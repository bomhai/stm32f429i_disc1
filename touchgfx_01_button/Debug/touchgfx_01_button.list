
touchgfx_01_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003130  0801e0d8  0801e0d8  0002e0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001b2  08021208  08021208  00031208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 0002f000  080213bc  080213bc  000313bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000c  080503bc  080503bc  000603bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080503c8  080503c8  00095968  2**0
                  CONTENTS
  7 .ARM          00000008  080503c8  080503c8  000603c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080503d0  080503d0  00095968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  080503d0  080503d0  000603d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080503e4  080503e4  000603e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000168  20000000  080503ec  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_Framebuffer 00025800  20000168  08050554  00070168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00009a14  20025968  08075d54  00095968  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2002f37c  08075d54  0009f37c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00095968  2**0
                  CONTENTS, READONLY
 16 .debug_info   00045c13  00000000  00000000  00095998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000c045  00000000  00000000  000db5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000032b8  00000000  00000000  000e75f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002dd8  00000000  00000000  000ea8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0003206d  00000000  00000000  000ed680  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00031ac8  00000000  00000000  0011f6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000fef46  00000000  00000000  001511b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  002500fb  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d910  00000000  00000000  002501f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20025968 	.word	0x20025968
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801e0c0 	.word	0x0801e0c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2002596c 	.word	0x2002596c
 80001ec:	0801e0c0 	.word	0x0801e0c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_CRC_Init+0x20>)
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_CRC_Init+0x24>)
 8000598:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_CRC_Init+0x20>)
 800059c:	f002 fb9e 	bl	8002cdc <HAL_CRC_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005a6:	f000 fe59 	bl	800125c <Error_Handler>
  }

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2002f088 	.word	0x2002f088
 80005b4:	40023000 	.word	0x40023000

080005b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_CRC_MspInit+0x3c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10d      	bne.n	80005e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023000 	.word	0x40023000
 80005f8:	40023800 	.word	0x40023800

080005fc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <MX_DMA2D_Init+0x60>)
 8000604:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800060e:	2202      	movs	r2, #2
 8000610:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000620:	2202      	movs	r2, #2
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800062c:	2200      	movs	r2, #0
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000632:	f002 fb6f 	bl	8002d14 <HAL_DMA2D_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800063c:	f000 fe0e 	bl	800125c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000640:	2101      	movs	r1, #1
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000644:	f002 fe30 	bl	80032a8 <HAL_DMA2D_ConfigLayer>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800064e:	f000 fe05 	bl	800125c <Error_Handler>
  }

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2002f090 	.word	0x2002f090
 800065c:	4002b000 	.word	0x4002b000

08000660 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_DMA2D_MspInit+0x48>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d115      	bne.n	800069e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 800067c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	205a      	movs	r0, #90	; 0x5a
 8000694:	f002 faea 	bl	8002c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000698:	205a      	movs	r0, #90	; 0x5a
 800069a:	f002 fb03 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	4002b000 	.word	0x4002b000
 80006ac:	40023800 	.word	0x40023800

080006b0 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_DMA2D_MspDeInit+0x2c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d108      	bne.n	80006d4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_DMA2D_MspDeInit+0x30>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_DMA2D_MspDeInit+0x30>)
 80006c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt Deinit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80006ce:	205a      	movs	r0, #90	; 0x5a
 80006d0:	f002 faf6 	bl	8002cc0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
} 
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	4002b000 	.word	0x4002b000
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_FMC_Init+0x98>)
 80006fe:	4a20      	ldr	r2, [pc, #128]	; (8000780 <MX_FMC_Init+0x9c>)
 8000700:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_FMC_Init+0x98>)
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_FMC_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_FMC_Init+0x98>)
 8000710:	2204      	movs	r2, #4
 8000712:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_FMC_Init+0x98>)
 8000716:	2210      	movs	r2, #16
 8000718:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_FMC_Init+0x98>)
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_FMC_Init+0x98>)
 8000722:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000726:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_FMC_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_FMC_Init+0x98>)
 8000730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000734:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_FMC_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_FMC_Init+0x98>)
 800073e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000754:	2303      	movs	r3, #3
 8000756:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_FMC_Init+0x98>)
 8000766:	f005 fc05 	bl	8005f74 <HAL_SDRAM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000770:	f000 fd74 	bl	800125c <Error_Handler>
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2002f0d0 	.word	0x2002f0d0
 8000780:	a0000140 	.word	0xa0000140

08000784 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000798:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <HAL_FMC_MspInit+0x104>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d16f      	bne.n	8000880 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <HAL_FMC_MspInit+0x104>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <HAL_FMC_MspInit+0x108>)
 80007ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ae:	4a37      	ldr	r2, [pc, #220]	; (800088c <HAL_FMC_MspInit+0x108>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6393      	str	r3, [r2, #56]	; 0x38
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <HAL_FMC_MspInit+0x108>)
 80007b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80007c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007c6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	482c      	ldr	r0, [pc, #176]	; (8000890 <HAL_FMC_MspInit+0x10c>)
 80007de:	f002 fe91 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f2:	230c      	movs	r3, #12
 80007f4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4826      	ldr	r0, [pc, #152]	; (8000894 <HAL_FMC_MspInit+0x110>)
 80007fc:	f002 fe82 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000800:	f248 1333 	movw	r3, #33075	; 0x8133
 8000804:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000812:	230c      	movs	r3, #12
 8000814:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <HAL_FMC_MspInit+0x114>)
 800081c:	f002 fe72 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000820:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000824:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <HAL_FMC_MspInit+0x118>)
 800083c:	f002 fe62 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000840:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000844:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000852:	230c      	movs	r3, #12
 8000854:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <HAL_FMC_MspInit+0x11c>)
 800085c:	f002 fe52 	bl	8003504 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000870:	230c      	movs	r3, #12
 8000872:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <HAL_FMC_MspInit+0x120>)
 800087a:	f002 fe43 	bl	8003504 <HAL_GPIO_Init>
 800087e:	e000      	b.n	8000882 <HAL_FMC_MspInit+0xfe>
    return;
 8000880:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20025984 	.word	0x20025984
 800088c:	40023800 	.word	0x40023800
 8000890:	40021400 	.word	0x40021400
 8000894:	40020800 	.word	0x40020800
 8000898:	40021800 	.word	0x40021800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40020400 	.word	0x40020400

080008a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008b0:	f7ff ff68 	bl	8000784 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <vApplicationGetIdleTaskMemory+0x2c>)
 8000900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <vApplicationGetIdleTaskMemory+0x30>)
 8000906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20025988 	.word	0x20025988
 8000920:	200259e0 	.word	0x200259e0

08000924 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_FREERTOS_Init+0x58>)
 800092c:	f107 041c 	add.w	r4, r7, #28
 8000930:	461d      	mov	r5, r3
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800093a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f007 f9ae 	bl	8007ca6 <osThreadCreate>
 800094a:	4602      	mov	r2, r0
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_FREERTOS_Init+0x5c>)
 800094e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(touchTask, TouchGFX_Task, osPriorityNormal, 0, 4086);
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_FREERTOS_Init+0x60>)
 8000952:	463c      	mov	r4, r7
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchGFXTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8000962:	463b      	mov	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f007 f99d 	bl	8007ca6 <osThreadCreate>
 800096c:	4602      	mov	r2, r0
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_FREERTOS_Init+0x64>)
 8000970:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 8000972:	bf00      	nop
 8000974:	3738      	adds	r7, #56	; 0x38
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	0801e0e4 	.word	0x0801e0e4
 8000980:	2002f104 	.word	0x2002f104
 8000984:	0801e10c 	.word	0x0801e10c
 8000988:	2002f108 	.word	0x2002f108

0800098c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <StartDefaultTask+0x1c>)
 800099a:	f003 f880 	bl	8003a9e <HAL_GPIO_TogglePin>
	  osDelay(500);
 800099e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a2:	f007 f9cc 	bl	8007d3e <osDelay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80009a6:	e7f5      	b.n	8000994 <StartDefaultTask+0x8>
 80009a8:	40021800 	.word	0x40021800

080009ac <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	4b89      	ldr	r3, [pc, #548]	; (8000bec <MX_GPIO_Init+0x240>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a88      	ldr	r2, [pc, #544]	; (8000bec <MX_GPIO_Init+0x240>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b86      	ldr	r3, [pc, #536]	; (8000bec <MX_GPIO_Init+0x240>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
 80009e2:	4b82      	ldr	r3, [pc, #520]	; (8000bec <MX_GPIO_Init+0x240>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a81      	ldr	r2, [pc, #516]	; (8000bec <MX_GPIO_Init+0x240>)
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b7f      	ldr	r3, [pc, #508]	; (8000bec <MX_GPIO_Init+0x240>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	4b7b      	ldr	r3, [pc, #492]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a7a      	ldr	r2, [pc, #488]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b78      	ldr	r3, [pc, #480]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	4b74      	ldr	r3, [pc, #464]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a73      	ldr	r2, [pc, #460]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b71      	ldr	r3, [pc, #452]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b6d      	ldr	r3, [pc, #436]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a6c      	ldr	r2, [pc, #432]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b6a      	ldr	r3, [pc, #424]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b66      	ldr	r3, [pc, #408]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a65      	ldr	r2, [pc, #404]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b63      	ldr	r3, [pc, #396]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a5e      	ldr	r2, [pc, #376]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a74:	f043 0310 	orr.w	r3, r3, #16
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b58      	ldr	r3, [pc, #352]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a57      	ldr	r2, [pc, #348]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b55      	ldr	r3, [pc, #340]	; (8000bec <MX_GPIO_Init+0x240>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2116      	movs	r1, #22
 8000aa6:	4852      	ldr	r0, [pc, #328]	; (8000bf0 <MX_GPIO_Init+0x244>)
 8000aa8:	f002 ffe0 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	4850      	ldr	r0, [pc, #320]	; (8000bf4 <MX_GPIO_Init+0x248>)
 8000ab2:	f002 ffdb 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000abc:	484e      	ldr	r0, [pc, #312]	; (8000bf8 <MX_GPIO_Init+0x24c>)
 8000abe:	f002 ffd5 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ac8:	484c      	ldr	r0, [pc, #304]	; (8000bfc <MX_GPIO_Init+0x250>)
 8000aca:	f002 ffcf 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ace:	2316      	movs	r3, #22
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4842      	ldr	r0, [pc, #264]	; (8000bf0 <MX_GPIO_Init+0x244>)
 8000ae6:	f002 fd0d 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000aea:	f248 0307 	movw	r3, #32775	; 0x8007
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000af0:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <MX_GPIO_Init+0x254>)
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	483d      	ldr	r0, [pc, #244]	; (8000bf4 <MX_GPIO_Init+0x248>)
 8000b00:	f002 fd00 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4836      	ldr	r0, [pc, #216]	; (8000bf4 <MX_GPIO_Init+0x248>)
 8000b1c:	f002 fcf2 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b20:	2320      	movs	r3, #32
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <MX_GPIO_Init+0x254>)
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	482f      	ldr	r0, [pc, #188]	; (8000bf0 <MX_GPIO_Init+0x244>)
 8000b34:	f002 fce6 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	482e      	ldr	r0, [pc, #184]	; (8000c04 <MX_GPIO_Init+0x258>)
 8000b4c:	f002 fcda 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000b50:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b62:	230c      	movs	r3, #12
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4825      	ldr	r0, [pc, #148]	; (8000c04 <MX_GPIO_Init+0x258>)
 8000b6e:	f002 fcc9 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_GPIO_Init+0x258>)
 8000b88:	f002 fcbc 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <MX_GPIO_Init+0x24c>)
 8000ba2:	f002 fcaf 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ba6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <MX_GPIO_Init+0x24c>)
 8000bc0:	f002 fca0 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bc4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_GPIO_Init+0x250>)
 8000bde:	f002 fc91 	bl	8003504 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020c00 	.word	0x40020c00
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	10120000 	.word	0x10120000
 8000c04:	40020400 	.word	0x40020400

08000c08 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <MX_I2C3_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <MX_I2C3_Init+0x7c>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c46:	f002 ff45 	bl	8003ad4 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 fb04 	bl	800125c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c58:	f003 ff29 	bl	8004aae <HAL_I2CEx_ConfigAnalogFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c62:	f000 fafb 	bl	800125c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C3_Init+0x74>)
 8000c6a:	f003 ff5c 	bl	8004b26 <HAL_I2CEx_ConfigDigitalFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000c74:	f000 faf2 	bl	800125c <Error_Handler>
  }

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2002f10c 	.word	0x2002f10c
 8000c80:	40005c00 	.word	0x40005c00
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <HAL_I2C_MspInit+0xc4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d14b      	bne.n	8000d42 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4815      	ldr	r0, [pc, #84]	; (8000d54 <HAL_I2C_MspInit+0xcc>)
 8000d00:	f002 fc00 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d16:	2304      	movs	r3, #4
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <HAL_I2C_MspInit+0xd0>)
 8000d22:	f002 fbef 	bl	8003504 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000d30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40005c00 	.word	0x40005c00
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020000 	.word	0x40020000

08000d5c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_I2C_MspDeInit+0x3c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10f      	bne.n	8000d8e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_I2C_MspDeInit+0x40>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_I2C_MspDeInit+0x40>)
 8000d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <HAL_I2C_MspDeInit+0x44>)
 8000d80:	f002 fd6a 	bl	8003858 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <HAL_I2C_MspDeInit+0x48>)
 8000d8a:	f002 fd65 	bl	8003858 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005c00 	.word	0x40005c00
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020000 	.word	0x40020000

08000da8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2234      	movs	r2, #52	; 0x34
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f01c fa06 	bl	801d1c6 <memset>

  hltdc.Instance = LTDC;
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dbc:	4a39      	ldr	r2, [pc, #228]	; (8000ea4 <MX_LTDC_Init+0xfc>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dc6:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dcc:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000dd8:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dda:	2209      	movs	r2, #9
 8000ddc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000de6:	221d      	movs	r2, #29
 8000de8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dec:	2203      	movs	r2, #3
 8000dee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000df2:	f240 120d 	movw	r2, #269	; 0x10d
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000dfa:	f240 1243 	movw	r2, #323	; 0x143
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e02:	f240 1217 	movw	r2, #279	; 0x117
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e0a:	f240 1247 	movw	r2, #327	; 0x147
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e28:	481d      	ldr	r0, [pc, #116]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e2a:	f003 febb 	bl	8004ba4 <HAL_LTDC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 fa12 	bl	800125c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000e3c:	23f0      	movs	r3, #240	; 0xf0
 8000e3e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000e44:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e48:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e4e:	23ff      	movs	r3, #255	; 0xff
 8000e50:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e60:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000e66:	23f0      	movs	r3, #240	; 0xf0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000e6a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_LTDC_Init+0xf8>)
 8000e8a:	f004 f813 	bl	8004eb4 <HAL_LTDC_ConfigLayer>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000e94:	f000 f9e2 	bl	800125c <Error_Handler>
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3738      	adds	r7, #56	; 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2002f160 	.word	0x2002f160
 8000ea4:	40016800 	.word	0x40016800

08000ea8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a7b      	ldr	r2, [pc, #492]	; (80010b4 <HAL_LTDC_MspInit+0x20c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f040 80f0 	bne.w	80010ac <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
 8000ed0:	4b79      	ldr	r3, [pc, #484]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4a78      	ldr	r2, [pc, #480]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000ed6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eda:	6453      	str	r3, [r2, #68]	; 0x44
 8000edc:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ee4:	623b      	str	r3, [r7, #32]
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	4b72      	ldr	r3, [pc, #456]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4a71      	ldr	r2, [pc, #452]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	f003 0320 	and.w	r3, r3, #32
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a6a      	ldr	r2, [pc, #424]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a63      	ldr	r2, [pc, #396]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b61      	ldr	r3, [pc, #388]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a5c      	ldr	r2, [pc, #368]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4a55      	ldr	r2, [pc, #340]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6313      	str	r3, [r2, #48]	; 0x30
 8000f68:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_LTDC_MspInit+0x210>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa2:	230e      	movs	r3, #14
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4843      	ldr	r0, [pc, #268]	; (80010bc <HAL_LTDC_MspInit+0x214>)
 8000fae:	f002 faa9 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8000fb2:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <HAL_LTDC_MspInit+0x218>)
 8000fd0:	f002 fa98 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4835      	ldr	r0, [pc, #212]	; (80010c4 <HAL_LTDC_MspInit+0x21c>)
 8000ff0:	f002 fa88 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ff4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001006:	230e      	movs	r3, #14
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	482c      	ldr	r0, [pc, #176]	; (80010c4 <HAL_LTDC_MspInit+0x21c>)
 8001012:	f002 fa77 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001016:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001028:	230e      	movs	r3, #14
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4825      	ldr	r0, [pc, #148]	; (80010c8 <HAL_LTDC_MspInit+0x220>)
 8001034:	f002 fa66 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001038:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800104a:	230e      	movs	r3, #14
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	481d      	ldr	r0, [pc, #116]	; (80010cc <HAL_LTDC_MspInit+0x224>)
 8001056:	f002 fa55 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800105a:	2348      	movs	r3, #72	; 0x48
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106a:	230e      	movs	r3, #14
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4816      	ldr	r0, [pc, #88]	; (80010d0 <HAL_LTDC_MspInit+0x228>)
 8001076:	f002 fa45 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800107a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800108c:	2309      	movs	r3, #9
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <HAL_LTDC_MspInit+0x220>)
 8001098:	f002 fa34 	bl	8003504 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2105      	movs	r1, #5
 80010a0:	2058      	movs	r0, #88	; 0x58
 80010a2:	f001 fde3 	bl	8002c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010a6:	2058      	movs	r0, #88	; 0x58
 80010a8:	f001 fdfc 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40016800 	.word	0x40016800
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f001 fc8a 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f828 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f7ff fc64 	bl	80009ac <MX_GPIO_Init>
  MX_CRC_Init();
 80010e4:	f7ff fa54 	bl	8000590 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010e8:	f7ff fa88 	bl	80005fc <MX_DMA2D_Init>
  MX_FMC_Init();
 80010ec:	f7ff fafa 	bl	80006e4 <MX_FMC_Init>
  MX_I2C3_Init();
 80010f0:	f7ff fd8a 	bl	8000c08 <MX_I2C3_Init>
  MX_LTDC_Init();
 80010f4:	f7ff fe58 	bl	8000da8 <MX_LTDC_Init>
  MX_SPI5_Init();
 80010f8:	f000 f8b8 	bl	800126c <MX_SPI5_Init>
  MX_TIM1_Init();
 80010fc:	f000 fae2 	bl	80016c4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001100:	f000 fb52 	bl	80017a8 <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8001104:	f009 f906 	bl	800a314 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  LcdDrv = &ili9341_drv;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <main+0x54>)
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <main+0x58>)
 800110c:	601a      	str	r2, [r3, #0]
  LcdDrv->Init();
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <main+0x54>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <main+0x54>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800111e:	f7ff fc01 	bl	8000924 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001122:	f006 fdb9 	bl	8007c98 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001126:	e7fe      	b.n	8001126 <main+0x52>
 8001128:	20025be0 	.word	0x20025be0
 800112c:	20000008 	.word	0x20000008

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0a0      	sub	sp, #128	; 0x80
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f01c f841 	bl	801d1c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2230      	movs	r2, #48	; 0x30
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f01c f832 	bl	801d1c6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <SystemClock_Config+0x100>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <SystemClock_Config+0x100>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <SystemClock_Config+0x100>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <SystemClock_Config+0x104>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <SystemClock_Config+0x104>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemClock_Config+0x104>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119e:	2301      	movs	r3, #1
 80011a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b2:	2304      	movs	r3, #4
 80011b4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011b6:	2348      	movs	r3, #72	; 0x48
 80011b8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011be:	2303      	movs	r3, #3
 80011c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 f882 	bl	80052d0 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011d2:	f000 f843 	bl	800125c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011f0:	2102      	movs	r1, #2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fadc 	bl	80057b0 <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011fe:	f000 f82d 	bl	800125c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001202:	2308      	movs	r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8001206:	233c      	movs	r3, #60	; 0x3c
 8001208:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800120a:	2305      	movs	r3, #5
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800120e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fced 	bl	8005bf8 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001224:	f000 f81a 	bl	800125c <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3780      	adds	r7, #128	; 0x80
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800124a:	f001 fbf3 	bl	8002a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40001000 	.word	0x40001000

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_SPI5_Init+0x64>)
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <MX_SPI5_Init+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_SPI5_Init+0x64>)
 8001278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800127c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_SPI5_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_SPI5_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_SPI5_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_SPI5_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_SPI5_Init+0x64>)
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_SPI5_Init+0x64>)
 80012a0:	2218      	movs	r2, #24
 80012a2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_SPI5_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_SPI5_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_SPI5_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_SPI5_Init+0x64>)
 80012b8:	220a      	movs	r2, #10
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_SPI5_Init+0x64>)
 80012be:	f004 fe8d 	bl	8005fdc <HAL_SPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80012c8:	f7ff ffc8 	bl	800125c <Error_Handler>
  }

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2002f208 	.word	0x2002f208
 80012d4:	40015000 	.word	0x40015000

080012d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_SPI_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12c      	bne.n	8001354 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_SPI_MspInit+0x88>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_SPI_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_SPI_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001332:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001344:	2305      	movs	r3, #5
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_SPI_MspInit+0x8c>)
 8001350:	f002 f8d8 	bl	8003504 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40015000 	.word	0x40015000
 8001360:	40023800 	.word	0x40023800
 8001364:	40021400 	.word	0x40021400

08001368 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_SPI_MspDeInit+0x30>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10a      	bne.n	8001390 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_SPI_MspDeInit+0x34>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <HAL_SPI_MspDeInit+0x34>)
 8001380:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001386:	f44f 7160 	mov.w	r1, #896	; 0x380
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_SPI_MspDeInit+0x38>)
 800138c:	f002 fa64 	bl	8003858 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40015000 	.word	0x40015000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40021400 	.word	0x40021400

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_MspInit+0x54>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_MspInit+0x54>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_MspInit+0x54>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_MspInit+0x54>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_MspInit+0x54>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_MspInit+0x54>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	210f      	movs	r1, #15
 80013e6:	f06f 0001 	mvn.w	r0, #1
 80013ea:	f001 fc3f 	bl	8002c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2036      	movs	r0, #54	; 0x36
 8001412:	f001 fc2b 	bl	8002c6c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001416:	2036      	movs	r0, #54	; 0x36
 8001418:	f001 fc44 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_InitTick+0xa4>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <HAL_InitTick+0xa4>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_InitTick+0xa4>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001438:	f107 0210 	add.w	r2, r7, #16
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fba6 	bl	8005b94 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001448:	f004 fb7c 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 800144c:	4603      	mov	r3, r0
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_InitTick+0xa8>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	3b01      	subs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_InitTick+0xac>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_InitTick+0xb0>)
 8001464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_InitTick+0xac>)
 8001468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_InitTick+0xac>)
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_InitTick+0xac>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_InitTick+0xac>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_InitTick+0xac>)
 8001482:	f005 fb35 	bl	8006af0 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <HAL_InitTick+0xac>)
 800148e:	f005 fb5a 	bl	8006b46 <HAL_TIM_Base_Start_IT>
 8001492:	4603      	mov	r3, r0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3730      	adds	r7, #48	; 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	2002f260 	.word	0x2002f260
 80014ac:	40001000 	.word	0x40001000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <TIM6_DAC_IRQHandler+0x10>)
 80014ea:	f005 fb50 	bl	8006b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2002f260 	.word	0x2002f260

080014f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <LTDC_IRQHandler+0x10>)
 80014fe:	f003 fc21 	bl	8004d44 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2002f160 	.word	0x2002f160

0800150c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA2D_IRQHandler+0x10>)
 8001512:	f001 fdb8 	bl	8003086 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2002f090 	.word	0x2002f090

08001520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_kill>:

int _kill(int pid, int sig)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800153a:	f01b fded 	bl	801d118 <__errno>
 800153e:	4602      	mov	r2, r0
 8001540:	2316      	movs	r3, #22
 8001542:	6013      	str	r3, [r2, #0]
	return -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_exit>:

void _exit (int status)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffe7 	bl	8001530 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001562:	e7fe      	b.n	8001562 <_exit+0x12>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
	}

return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e009      	b.n	80015c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf1      	blt.n	80015b0 <_write+0x12>
	}
	return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_close>:

int _close(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_isatty>:

int _isatty(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	return 1;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x50>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x16>
		heap_end = &end;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <_sbrk+0x50>)
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <_sbrk+0x54>)
 8001654:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <_sbrk+0x50>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <_sbrk+0x50>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	466a      	mov	r2, sp
 8001666:	4293      	cmp	r3, r2
 8001668:	d907      	bls.n	800167a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800166a:	f01b fd55 	bl	801d118 <__errno>
 800166e:	4602      	mov	r2, r0
 8001670:	230c      	movs	r3, #12
 8001672:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	e006      	b.n	8001688 <_sbrk+0x48>
	}

	heap_end += incr;
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <_sbrk+0x50>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a03      	ldr	r2, [pc, #12]	; (8001690 <_sbrk+0x50>)
 8001684:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20025be4 	.word	0x20025be4
 8001694:	2002f380 	.word	0x2002f380

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <SystemInit+0x28>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <SystemInit+0x28>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SystemInit+0x28>)
 80016ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b2:	609a      	str	r2, [r3, #8]
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_TIM1_Init+0x98>)
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <MX_TIM1_Init+0x9c>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_TIM1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_TIM1_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_TIM1_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_TIM1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_TIM1_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800170a:	4814      	ldr	r0, [pc, #80]	; (800175c <MX_TIM1_Init+0x98>)
 800170c:	f005 f9f0 	bl	8006af0 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001716:	f7ff fda1 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4619      	mov	r1, r3
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_TIM1_Init+0x98>)
 8001728:	f005 fb39 	bl	8006d9e <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001732:	f7ff fd93 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	4619      	mov	r1, r3
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <MX_TIM1_Init+0x98>)
 8001744:	f005 fd44 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800174e:	f7ff fd85 	bl	800125c <Error_Handler>
  }

}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2002f2a0 	.word	0x2002f2a0
 8001760:	40010000 	.word	0x40010000

08001764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10d      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_TIM_Base_MspInit+0x40>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0x40>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_TIM_Base_MspInit+0x40>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40023800 	.word	0x40023800

080017a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <MX_USART1_UART_Init+0x50>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_USART1_UART_Init+0x4c>)
 80017e0:	f005 fd86 	bl	80072f0 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ea:	f7ff fd37 	bl	800125c <Error_Handler>
  }

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2002f2e0 	.word	0x2002f2e0
 80017f8:	40011000 	.word	0x40011000

080017fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12c      	bne.n	8001878 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_UART_MspInit+0x88>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_UART_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001856:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001868:	2307      	movs	r3, #7
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_UART_MspInit+0x8c>)
 8001874:	f001 fe46 	bl	8003504 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40011000 	.word	0x40011000
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001892:	e003      	b.n	800189c <LoopCopyDataInit>

08001894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800189a:	3104      	adds	r1, #4

0800189c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018a4:	d3f6      	bcc.n	8001894 <CopyDataInit>
  ldr  r2, =_sbss
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018a8:	e002      	b.n	80018b0 <LoopFillZerobss>

080018aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ac:	f842 3b04 	str.w	r3, [r2], #4

080018b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018b4:	d3f9      	bcc.n	80018aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018b6:	f7ff feef 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f01b fc45 	bl	801d148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fc09 	bl	80010d4 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018c4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018c8:	080503ec 	.word	0x080503ec
  ldr  r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018d0:	20000168 	.word	0x20000168
  ldr  r2, =_sbss
 80018d4:	20025968 	.word	0x20025968
  ldr  r3, = _ebss
 80018d8:	2002f37c 	.word	0x2002f37c

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>

080018de <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018e2:	f000 fe4b 	bl	800257c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018e6:	20ca      	movs	r0, #202	; 0xca
 80018e8:	f000 f95d 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80018ec:	20c3      	movs	r0, #195	; 0xc3
 80018ee:	f000 f967 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80018f2:	2008      	movs	r0, #8
 80018f4:	f000 f964 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80018f8:	2050      	movs	r0, #80	; 0x50
 80018fa:	f000 f961 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80018fe:	20cf      	movs	r0, #207	; 0xcf
 8001900:	f000 f951 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001904:	2000      	movs	r0, #0
 8001906:	f000 f95b 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800190a:	20c1      	movs	r0, #193	; 0xc1
 800190c:	f000 f958 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001910:	2030      	movs	r0, #48	; 0x30
 8001912:	f000 f955 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001916:	20ed      	movs	r0, #237	; 0xed
 8001918:	f000 f945 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800191c:	2064      	movs	r0, #100	; 0x64
 800191e:	f000 f94f 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f94c 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001928:	2012      	movs	r0, #18
 800192a:	f000 f949 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800192e:	2081      	movs	r0, #129	; 0x81
 8001930:	f000 f946 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001934:	20e8      	movs	r0, #232	; 0xe8
 8001936:	f000 f936 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800193a:	2085      	movs	r0, #133	; 0x85
 800193c:	f000 f940 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f93d 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001946:	2078      	movs	r0, #120	; 0x78
 8001948:	f000 f93a 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800194c:	20cb      	movs	r0, #203	; 0xcb
 800194e:	f000 f92a 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001952:	2039      	movs	r0, #57	; 0x39
 8001954:	f000 f934 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001958:	202c      	movs	r0, #44	; 0x2c
 800195a:	f000 f931 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f92e 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001964:	2034      	movs	r0, #52	; 0x34
 8001966:	f000 f92b 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800196a:	2002      	movs	r0, #2
 800196c:	f000 f928 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001970:	20f7      	movs	r0, #247	; 0xf7
 8001972:	f000 f918 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001976:	2020      	movs	r0, #32
 8001978:	f000 f922 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800197c:	20ea      	movs	r0, #234	; 0xea
 800197e:	f000 f912 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f91c 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f919 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800198e:	20b1      	movs	r0, #177	; 0xb1
 8001990:	f000 f909 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f913 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800199a:	201b      	movs	r0, #27
 800199c:	f000 f910 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80019a0:	20b6      	movs	r0, #182	; 0xb6
 80019a2:	f000 f900 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80019a6:	200a      	movs	r0, #10
 80019a8:	f000 f90a 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80019ac:	20a2      	movs	r0, #162	; 0xa2
 80019ae:	f000 f907 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80019b2:	20c0      	movs	r0, #192	; 0xc0
 80019b4:	f000 f8f7 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019b8:	2010      	movs	r0, #16
 80019ba:	f000 f901 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80019be:	20c1      	movs	r0, #193	; 0xc1
 80019c0:	f000 f8f1 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019c4:	2010      	movs	r0, #16
 80019c6:	f000 f8fb 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80019ca:	20c5      	movs	r0, #197	; 0xc5
 80019cc:	f000 f8eb 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80019d0:	2045      	movs	r0, #69	; 0x45
 80019d2:	f000 f8f5 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019d6:	2015      	movs	r0, #21
 80019d8:	f000 f8f2 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019dc:	20c7      	movs	r0, #199	; 0xc7
 80019de:	f000 f8e2 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019e2:	2090      	movs	r0, #144	; 0x90
 80019e4:	f000 f8ec 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019e8:	2036      	movs	r0, #54	; 0x36
 80019ea:	f000 f8dc 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80019ee:	20c8      	movs	r0, #200	; 0xc8
 80019f0:	f000 f8e6 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80019f4:	20f2      	movs	r0, #242	; 0xf2
 80019f6:	f000 f8d6 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f8e0 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001a00:	20b0      	movs	r0, #176	; 0xb0
 8001a02:	f000 f8d0 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001a06:	20c2      	movs	r0, #194	; 0xc2
 8001a08:	f000 f8da 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a0c:	20b6      	movs	r0, #182	; 0xb6
 8001a0e:	f000 f8ca 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a12:	200a      	movs	r0, #10
 8001a14:	f000 f8d4 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a18:	20a7      	movs	r0, #167	; 0xa7
 8001a1a:	f000 f8d1 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a1e:	2027      	movs	r0, #39	; 0x27
 8001a20:	f000 f8ce 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a24:	2004      	movs	r0, #4
 8001a26:	f000 f8cb 	bl	8001bc0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a2a:	202a      	movs	r0, #42	; 0x2a
 8001a2c:	f000 f8bb 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f000 f8c5 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f8c2 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f8bf 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a42:	20ef      	movs	r0, #239	; 0xef
 8001a44:	f000 f8bc 	bl	8001bc0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a48:	202b      	movs	r0, #43	; 0x2b
 8001a4a:	f000 f8ac 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f8b6 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f000 f8b3 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 f8b0 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a60:	203f      	movs	r0, #63	; 0x3f
 8001a62:	f000 f8ad 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a66:	20f6      	movs	r0, #246	; 0xf6
 8001a68:	f000 f89d 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f000 f8a7 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f8a4 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f000 f8a1 	bl	8001bc0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a7e:	202c      	movs	r0, #44	; 0x2c
 8001a80:	f000 f891 	bl	8001ba6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a84:	20c8      	movs	r0, #200	; 0xc8
 8001a86:	f000 fe67 	bl	8002758 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a8a:	2026      	movs	r0, #38	; 0x26
 8001a8c:	f000 f88b 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f000 f895 	bl	8001bc0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001a96:	20e0      	movs	r0, #224	; 0xe0
 8001a98:	f000 f885 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001a9c:	200f      	movs	r0, #15
 8001a9e:	f000 f88f 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001aa2:	2029      	movs	r0, #41	; 0x29
 8001aa4:	f000 f88c 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001aa8:	2024      	movs	r0, #36	; 0x24
 8001aaa:	f000 f889 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001aae:	200c      	movs	r0, #12
 8001ab0:	f000 f886 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ab4:	200e      	movs	r0, #14
 8001ab6:	f000 f883 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001aba:	2009      	movs	r0, #9
 8001abc:	f000 f880 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ac0:	204e      	movs	r0, #78	; 0x4e
 8001ac2:	f000 f87d 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001ac6:	2078      	movs	r0, #120	; 0x78
 8001ac8:	f000 f87a 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001acc:	203c      	movs	r0, #60	; 0x3c
 8001ace:	f000 f877 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ad2:	2009      	movs	r0, #9
 8001ad4:	f000 f874 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ad8:	2013      	movs	r0, #19
 8001ada:	f000 f871 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ade:	2005      	movs	r0, #5
 8001ae0:	f000 f86e 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f000 f86b 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001aea:	2011      	movs	r0, #17
 8001aec:	f000 f868 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f865 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001af6:	20e1      	movs	r0, #225	; 0xe1
 8001af8:	f000 f855 	bl	8001ba6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 f85f 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001b02:	2016      	movs	r0, #22
 8001b04:	f000 f85c 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b08:	201b      	movs	r0, #27
 8001b0a:	f000 f859 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b0e:	2004      	movs	r0, #4
 8001b10:	f000 f856 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b14:	2011      	movs	r0, #17
 8001b16:	f000 f853 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b1a:	2007      	movs	r0, #7
 8001b1c:	f000 f850 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b20:	2031      	movs	r0, #49	; 0x31
 8001b22:	f000 f84d 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b26:	2033      	movs	r0, #51	; 0x33
 8001b28:	f000 f84a 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b2c:	2042      	movs	r0, #66	; 0x42
 8001b2e:	f000 f847 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b32:	2005      	movs	r0, #5
 8001b34:	f000 f844 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b38:	200c      	movs	r0, #12
 8001b3a:	f000 f841 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b3e:	200a      	movs	r0, #10
 8001b40:	f000 f83e 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b44:	2028      	movs	r0, #40	; 0x28
 8001b46:	f000 f83b 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b4a:	202f      	movs	r0, #47	; 0x2f
 8001b4c:	f000 f838 	bl	8001bc0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b50:	200f      	movs	r0, #15
 8001b52:	f000 f835 	bl	8001bc0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b56:	2011      	movs	r0, #17
 8001b58:	f000 f825 	bl	8001ba6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001b5c:	20c8      	movs	r0, #200	; 0xc8
 8001b5e:	f000 fdfb 	bl	8002758 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b62:	2029      	movs	r0, #41	; 0x29
 8001b64:	f000 f81f 	bl	8001ba6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b68:	202c      	movs	r0, #44	; 0x2c
 8001b6a:	f000 f81c 	bl	8001ba6 <ili9341_WriteReg>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b76:	f000 fd01 	bl	800257c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	20d3      	movs	r0, #211	; 0xd3
 8001b7e:	f000 f82c 	bl	8001bda <ili9341_ReadData>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29b      	uxth	r3, r3
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b8e:	2029      	movs	r0, #41	; 0x29
 8001b90:	f000 f809 	bl	8001ba6 <ili9341_WriteReg>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001b9c:	2028      	movs	r0, #40	; 0x28
 8001b9e:	f000 f802 	bl	8001ba6 <ili9341_WriteReg>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fd7c 	bl	80026b0 <LCD_IO_WriteReg>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fd4d 	bl	800266c <LCD_IO_WriteData>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	460a      	mov	r2, r1
 8001be4:	80fb      	strh	r3, [r7, #6]
 8001be6:	4613      	mov	r3, r2
 8001be8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001bea:	797a      	ldrb	r2, [r7, #5]
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fd7f 	bl	80026f4 <LCD_IO_ReadData>
 8001bf6:	4603      	mov	r3, r0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001c04:	23f0      	movs	r3, #240	; 0xf0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c14:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fa59 	bl	80020e8 <stmpe811_GetInstance>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2bff      	cmp	r3, #255	; 0xff
 8001c3e:	d112      	bne.n	8001c66 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 fa51 	bl	80020e8 <stmpe811_GetInstance>
 8001c46:	4603      	mov	r3, r0
 8001c48:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d80a      	bhi.n	8001c66 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001c50:	7bbb      	ldrb	r3, [r7, #14]
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	b2d1      	uxtb	r1, r2
 8001c56:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <stmpe811_Init+0x4c>)
 8001c58:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001c5a:	f000 fd88 	bl	800276e <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f807 	bl	8001c74 <stmpe811_Reset>
    }
  }
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20025be8 	.word	0x20025be8

08001c74 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2202      	movs	r2, #2
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fd7d 	bl	8002786 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f000 fdb7 	bl	8002800 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2200      	movs	r2, #0
 8001c98:	2103      	movs	r1, #3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd73 	bl	8002786 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f000 fdad 	bl	8002800 <IOE_Delay>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001cae:	b590      	push	{r4, r7, lr}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001cb8:	f000 fd59 	bl	800276e <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fd72 	bl	80027ac <IOE_Read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 fd69 	bl	80027ac <IOE_Read>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	b29b      	uxth	r3, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2109      	movs	r1, #9
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fd53 	bl	80027ac <IOE_Read>
 8001d06:	4603      	mov	r3, r0
 8001d08:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	2109      	movs	r1, #9
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fd33 	bl	8002786 <IOE_Write>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2109      	movs	r1, #9
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fd35 	bl	80027ac <IOE_Read>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	2109      	movs	r1, #9
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fd15 	bl	8002786 <IOE_Write>
    
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	80fb      	strh	r3, [r7, #6]
 8001d70:	4613      	mov	r3, r2
 8001d72:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fd14 	bl	80027ac <IOE_Read>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	797b      	ldrb	r3, [r7, #5]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	210a      	movs	r1, #10
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fcf4 	bl	8002786 <IOE_Write>
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	460a      	mov	r2, r1
 8001db0:	80fb      	strh	r3, [r7, #6]
 8001db2:	4613      	mov	r3, r2
 8001db4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	210a      	movs	r1, #10
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fcf3 	bl	80027ac <IOE_Read>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001dca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	b25b      	sxtb	r3, r3
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	210a      	movs	r1, #10
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fcce 	bl	8002786 <IOE_Write>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	80fb      	strh	r3, [r7, #6]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	210b      	movs	r1, #11
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fccf 	bl	80027ac <IOE_Read>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	797b      	ldrb	r3, [r7, #5]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b2db      	uxtb	r3, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	80fb      	strh	r3, [r7, #6]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	797a      	ldrb	r2, [r7, #5]
 8001e36:	210b      	movs	r1, #11
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fca4 	bl	8002786 <IOE_Write>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	6039      	str	r1, [r7, #0]
 8001e50:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2117      	movs	r1, #23
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fca5 	bl	80027ac <IOE_Read>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	b25a      	sxtb	r2, r3
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4013      	ands	r3, r2
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	2117      	movs	r1, #23
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fc80 	bl	8002786 <IOE_Write>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fc84 	bl	80027ac <IOE_Read>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fc64 	bl	8002786 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	21f0      	movs	r1, #240	; 0xf0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ffbf 	bl	8001e46 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fc54 	bl	8002786 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2249      	movs	r2, #73	; 0x49
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fc4d 	bl	8002786 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001eec:	2002      	movs	r0, #2
 8001eee:	f000 fc87 	bl	8002800 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2121      	movs	r1, #33	; 0x21
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fc43 	bl	8002786 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	229a      	movs	r2, #154	; 0x9a
 8001f06:	2141      	movs	r1, #65	; 0x41
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fc3c 	bl	8002786 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2201      	movs	r2, #1
 8001f14:	214a      	movs	r1, #74	; 0x4a
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fc35 	bl	8002786 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2201      	movs	r2, #1
 8001f22:	214b      	movs	r1, #75	; 0x4b
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fc2e 	bl	8002786 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	214b      	movs	r1, #75	; 0x4b
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fc27 	bl	8002786 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2156      	movs	r1, #86	; 0x56
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fc20 	bl	8002786 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2158      	movs	r1, #88	; 0x58
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fc19 	bl	8002786 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fc12 	bl	8002786 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	210b      	movs	r1, #11
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fc0b 	bl	8002786 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001f70:	2002      	movs	r0, #2
 8001f72:	f000 fc45 	bl	8002800 <IOE_Delay>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fc0a 	bl	80027ac <IOE_Read>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	2b80      	cmp	r3, #128	; 0x80
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00b      	beq.n	8001fc8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	214c      	movs	r1, #76	; 0x4c
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fbf8 	bl	80027ac <IOE_Read>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e00d      	b.n	8001fe4 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2201      	movs	r2, #1
 8001fce:	214b      	movs	r1, #75	; 0x4b
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fbd8 	bl	8002786 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2200      	movs	r2, #0
 8001fdc:	214b      	movs	r1, #75	; 0x4b
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fbd1 	bl	8002786 <IOE_Write>
  }
  
  return ret;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	f107 0210 	add.w	r2, r7, #16
 8002004:	2304      	movs	r3, #4
 8002006:	21d7      	movs	r1, #215	; 0xd7
 8002008:	f000 fbe3 	bl	80027d2 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800200c:	7c3b      	ldrb	r3, [r7, #16]
 800200e:	061a      	lsls	r2, r3, #24
 8002010:	7c7b      	ldrb	r3, [r7, #17]
 8002012:	041b      	lsls	r3, r3, #16
 8002014:	431a      	orrs	r2, r3
 8002016:	7cbb      	ldrb	r3, [r7, #18]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	4313      	orrs	r3, r2
 800201c:	7cfa      	ldrb	r2, [r7, #19]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	0d1b      	lsrs	r3, r3, #20
 8002026:	b29a      	uxth	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2201      	movs	r2, #1
 8002042:	214b      	movs	r1, #75	; 0x4b
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fb9e 	bl	8002786 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2200      	movs	r2, #0
 8002050:	214b      	movs	r1, #75	; 0x4b
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fb97 	bl	8002786 <IOE_Write>
}
 8002058:	bf00      	nop
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800206a:	f000 fb86 	bl	800277a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	211f      	movs	r1, #31
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe76 	bl	8001d64 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe36 	bl	8001cec <stmpe811_EnableGlobalIT>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fe47 	bl	8001d28 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	211f      	movs	r1, #31
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fe81 	bl	8001da6 <stmpe811_DisableITSource>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	211f      	movs	r1, #31
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fe99 	bl	8001df2 <stmpe811_ReadGITStatus>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	211f      	movs	r1, #31
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fea1 	bl	8001e20 <stmpe811_ClearGlobalIT>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e00b      	b.n	8002114 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <stmpe811_GetInstance+0x40>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	b29b      	uxth	r3, r3
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	429a      	cmp	r2, r3
 8002108:	d101      	bne.n	800210e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	e006      	b.n	800211c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	3301      	adds	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d9f0      	bls.n	80020fc <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800211a:	23ff      	movs	r3, #255	; 0xff
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20025be8 	.word	0x20025be8

0800212c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a33      	ldr	r2, [pc, #204]	; (8002208 <I2Cx_MspInit+0xdc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d15f      	bne.n	80021fe <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b32      	ldr	r3, [pc, #200]	; (800220c <I2Cx_MspInit+0xe0>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a31      	ldr	r2, [pc, #196]	; (800220c <I2Cx_MspInit+0xe0>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b2f      	ldr	r3, [pc, #188]	; (800220c <I2Cx_MspInit+0xe0>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <I2Cx_MspInit+0xe0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a2a      	ldr	r2, [pc, #168]	; (800220c <I2Cx_MspInit+0xe0>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b28      	ldr	r3, [pc, #160]	; (800220c <I2Cx_MspInit+0xe0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800217c:	2312      	movs	r3, #18
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002184:	2302      	movs	r3, #2
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002188:	2304      	movs	r3, #4
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	481f      	ldr	r0, [pc, #124]	; (8002210 <I2Cx_MspInit+0xe4>)
 8002194:	f001 f9b6 	bl	8003504 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800219c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	481b      	ldr	r0, [pc, #108]	; (8002214 <I2Cx_MspInit+0xe8>)
 80021a6:	f001 f9ad 	bl	8003504 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <I2Cx_MspInit+0xe0>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <I2Cx_MspInit+0xe0>)
 80021b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <I2Cx_MspInit+0xe0>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <I2Cx_MspInit+0xe0>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <I2Cx_MspInit+0xe0>)
 80021cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d0:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <I2Cx_MspInit+0xe0>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a0d      	ldr	r2, [pc, #52]	; (800220c <I2Cx_MspInit+0xe0>)
 80021d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021dc:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	210f      	movs	r1, #15
 80021e2:	2048      	movs	r0, #72	; 0x48
 80021e4:	f000 fd42 	bl	8002c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80021e8:	2048      	movs	r0, #72	; 0x48
 80021ea:	f000 fd5b 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	210f      	movs	r1, #15
 80021f2:	2049      	movs	r0, #73	; 0x49
 80021f4:	f000 fd3a 	bl	8002c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80021f8:	2049      	movs	r0, #73	; 0x49
 80021fa:	f000 fd53 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40005c00 	.word	0x40005c00
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020800 	.word	0x40020800

08002218 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800221c:	4814      	ldr	r0, [pc, #80]	; (8002270 <I2Cx_Init+0x58>)
 800221e:	f002 f8e1 	bl	80043e4 <HAL_I2C_GetState>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d121      	bne.n	800226c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <I2Cx_Init+0x58>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <I2Cx_Init+0x5c>)
 800222c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <I2Cx_Init+0x58>)
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <I2Cx_Init+0x60>)
 8002232:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <I2Cx_Init+0x58>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <I2Cx_Init+0x58>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <I2Cx_Init+0x58>)
 8002242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002246:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <I2Cx_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <I2Cx_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <I2Cx_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <I2Cx_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <I2Cx_Init+0x58>)
 8002262:	f7ff ff63 	bl	800212c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002266:	4802      	ldr	r0, [pc, #8]	; (8002270 <I2Cx_Init+0x58>)
 8002268:	f001 fc34 	bl	8003ad4 <HAL_I2C_Init>
  }
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2002f320 	.word	0x2002f320
 8002274:	40005c00 	.word	0x40005c00
 8002278:	000186a0 	.word	0x000186a0

0800227c <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <I2Cx_ITConfig+0x58>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <I2Cx_ITConfig+0x58>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <I2Cx_ITConfig+0x58>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80022a4:	2301      	movs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <I2Cx_ITConfig+0x5c>)
 80022ae:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <I2Cx_ITConfig+0x60>)
 80022b6:	f001 f925 	bl	8003504 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80022ba:	2200      	movs	r2, #0
 80022bc:	210f      	movs	r1, #15
 80022be:	2028      	movs	r0, #40	; 0x28
 80022c0:	f000 fcd4 	bl	8002c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80022c4:	2028      	movs	r0, #40	; 0x28
 80022c6:	f000 fced 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	10210000 	.word	0x10210000
 80022dc:	40020000 	.word	0x40020000

080022e0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	460b      	mov	r3, r1
 80022ec:	71bb      	strb	r3, [r7, #6]
 80022ee:	4613      	mov	r3, r2
 80022f0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	b299      	uxth	r1, r3
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <I2Cx_WriteData+0x4c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	1d7b      	adds	r3, r7, #5
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	4808      	ldr	r0, [pc, #32]	; (8002330 <I2Cx_WriteData+0x50>)
 8002310:	f001 fd48 	bl	8003da4 <HAL_I2C_Mem_Write>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800231e:	f000 f863 	bl	80023e8 <I2Cx_Error>
  }        
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000068 	.word	0x20000068
 8002330:	2002f320 	.word	0x2002f320

08002334 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af04      	add	r7, sp, #16
 800233a:	4603      	mov	r3, r0
 800233c:	460a      	mov	r2, r1
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	b299      	uxth	r1, r3
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <I2Cx_ReadData+0x50>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2301      	movs	r3, #1
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	f107 030e 	add.w	r3, r7, #14
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2301      	movs	r3, #1
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <I2Cx_ReadData+0x54>)
 8002368:	f001 fe16 	bl	8003f98 <HAL_I2C_Mem_Read>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002376:	f000 f837 	bl	80023e8 <I2Cx_Error>
  
  }
  return value;
 800237a:	7bbb      	ldrb	r3, [r7, #14]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000068 	.word	0x20000068
 8002388:	2002f320 	.word	0x2002f320

0800238c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af04      	add	r7, sp, #16
 8002392:	603a      	str	r2, [r7, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	460b      	mov	r3, r1
 800239c:	71bb      	strb	r3, [r7, #6]
 800239e:	4613      	mov	r3, r2
 80023a0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	b299      	uxth	r1, r3
 80023aa:	79bb      	ldrb	r3, [r7, #6]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <I2Cx_ReadBuffer+0x54>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	4809      	ldr	r0, [pc, #36]	; (80023e4 <I2Cx_ReadBuffer+0x58>)
 80023c0:	f001 fdea 	bl	8003f98 <HAL_I2C_Mem_Read>
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e002      	b.n	80023d8 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80023d2:	f000 f809 	bl	80023e8 <I2Cx_Error>

    return 1;
 80023d6:	2301      	movs	r3, #1
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000068 	.word	0x20000068
 80023e4:	2002f320 	.word	0x2002f320

080023e8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <I2Cx_Error+0x14>)
 80023ee:	f001 fca9 	bl	8003d44 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80023f2:	f7ff ff11 	bl	8002218 <I2Cx_Init>
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2002f320 	.word	0x2002f320

08002400 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002404:	4819      	ldr	r0, [pc, #100]	; (800246c <SPIx_Init+0x6c>)
 8002406:	f004 fa54 	bl	80068b2 <HAL_SPI_GetState>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d12b      	bne.n	8002468 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <SPIx_Init+0x6c>)
 8002412:	4a17      	ldr	r2, [pc, #92]	; (8002470 <SPIx_Init+0x70>)
 8002414:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <SPIx_Init+0x6c>)
 8002418:	2218      	movs	r2, #24
 800241a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <SPIx_Init+0x6c>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <SPIx_Init+0x6c>)
 8002424:	2200      	movs	r2, #0
 8002426:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <SPIx_Init+0x6c>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <SPIx_Init+0x6c>)
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <SPIx_Init+0x6c>)
 8002436:	2207      	movs	r2, #7
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <SPIx_Init+0x6c>)
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <SPIx_Init+0x6c>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <SPIx_Init+0x6c>)
 8002448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <SPIx_Init+0x6c>)
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SPIx_Init+0x6c>)
 8002456:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <SPIx_Init+0x6c>)
 800245e:	f000 f853 	bl	8002508 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002462:	4802      	ldr	r0, [pc, #8]	; (800246c <SPIx_Init+0x6c>)
 8002464:	f003 fdba 	bl	8005fdc <HAL_SPI_Init>
  } 
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20025bec 	.word	0x20025bec
 8002470:	40015000 	.word	0x40015000

08002474 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <SPIx_Read+0x38>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f107 0108 	add.w	r1, r7, #8
 800248e:	4808      	ldr	r0, [pc, #32]	; (80024b0 <SPIx_Read+0x3c>)
 8002490:	f003 ff64 	bl	800635c <HAL_SPI_Receive>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800249e:	f000 f827 	bl	80024f0 <SPIx_Error>
  }
  
  return readvalue;
 80024a2:	68bb      	ldr	r3, [r7, #8]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000006c 	.word	0x2000006c
 80024b0:	20025bec 	.word	0x20025bec

080024b4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <SPIx_Write+0x34>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1db9      	adds	r1, r7, #6
 80024c8:	2201      	movs	r2, #1
 80024ca:	4808      	ldr	r0, [pc, #32]	; (80024ec <SPIx_Write+0x38>)
 80024cc:	f003 fe12 	bl	80060f4 <HAL_SPI_Transmit>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024da:	f000 f809 	bl	80024f0 <SPIx_Error>
  }
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000006c 	.word	0x2000006c
 80024ec:	20025bec 	.word	0x20025bec

080024f0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <SPIx_Error+0x14>)
 80024f6:	f003 fdd5 	bl	80060a4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80024fa:	f7ff ff81 	bl	8002400 <SPIx_Init>
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20025bec 	.word	0x20025bec

08002508 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <SPIx_MspInit+0x6c>)
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	4a16      	ldr	r2, [pc, #88]	; (8002574 <SPIx_MspInit+0x6c>)
 800251a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251e:	6453      	str	r3, [r2, #68]	; 0x44
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <SPIx_MspInit+0x6c>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <SPIx_MspInit+0x6c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <SPIx_MspInit+0x6c>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <SPIx_MspInit+0x6c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002548:	f44f 7360 	mov.w	r3, #896	; 0x380
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002552:	2302      	movs	r3, #2
 8002554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002556:	2301      	movs	r3, #1
 8002558:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800255a:	2305      	movs	r3, #5
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	4804      	ldr	r0, [pc, #16]	; (8002578 <SPIx_MspInit+0x70>)
 8002566:	f000 ffcd 	bl	8003504 <HAL_GPIO_Init>
}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	; 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40021400 	.word	0x40021400

0800257c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <LCD_IO_Init+0xe0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d164      	bne.n	8002654 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <LCD_IO_Init+0xe0>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	4b32      	ldr	r3, [pc, #200]	; (8002660 <LCD_IO_Init+0xe4>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a31      	ldr	r2, [pc, #196]	; (8002660 <LCD_IO_Init+0xe4>)
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6313      	str	r3, [r2, #48]	; 0x30
 80025a0:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <LCD_IO_Init+0xe4>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80025ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	4619      	mov	r1, r3
 80025c4:	4827      	ldr	r0, [pc, #156]	; (8002664 <LCD_IO_Init+0xe8>)
 80025c6:	f000 ff9d 	bl	8003504 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <LCD_IO_Init+0xe4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a23      	ldr	r2, [pc, #140]	; (8002660 <LCD_IO_Init+0xe4>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <LCD_IO_Init+0xe4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80025e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	4619      	mov	r1, r3
 80025fe:	4819      	ldr	r0, [pc, #100]	; (8002664 <LCD_IO_Init+0xe8>)
 8002600:	f000 ff80 	bl	8003504 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <LCD_IO_Init+0xe4>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <LCD_IO_Init+0xe4>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <LCD_IO_Init+0xe4>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002620:	2304      	movs	r3, #4
 8002622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800262c:	2302      	movs	r3, #2
 800262e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	4619      	mov	r1, r3
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <LCD_IO_Init+0xec>)
 8002638:	f000 ff64 	bl	8003504 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800263c:	2200      	movs	r2, #0
 800263e:	2104      	movs	r1, #4
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <LCD_IO_Init+0xec>)
 8002642:	f001 fa13 	bl	8003a6c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002646:	2201      	movs	r2, #1
 8002648:	2104      	movs	r1, #4
 800264a:	4807      	ldr	r0, [pc, #28]	; (8002668 <LCD_IO_Init+0xec>)
 800264c:	f001 fa0e 	bl	8003a6c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002650:	f7ff fed6 	bl	8002400 <SPIx_Init>
  }
}
 8002654:	bf00      	nop
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20025c44 	.word	0x20025c44
 8002660:	40023800 	.word	0x40023800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40020800 	.word	0x40020800

0800266c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002676:	2201      	movs	r2, #1
 8002678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267c:	480a      	ldr	r0, [pc, #40]	; (80026a8 <LCD_IO_WriteData+0x3c>)
 800267e:	f001 f9f5 	bl	8003a6c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002682:	2200      	movs	r2, #0
 8002684:	2104      	movs	r1, #4
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <LCD_IO_WriteData+0x40>)
 8002688:	f001 f9f0 	bl	8003a6c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff10 	bl	80024b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002694:	2201      	movs	r2, #1
 8002696:	2104      	movs	r1, #4
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <LCD_IO_WriteData+0x40>)
 800269a:	f001 f9e7 	bl	8003a6c <HAL_GPIO_WritePin>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	40020800 	.word	0x40020800

080026b0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <LCD_IO_WriteReg+0x3c>)
 80026c2:	f001 f9d3 	bl	8003a6c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80026c6:	2200      	movs	r2, #0
 80026c8:	2104      	movs	r1, #4
 80026ca:	4809      	ldr	r0, [pc, #36]	; (80026f0 <LCD_IO_WriteReg+0x40>)
 80026cc:	f001 f9ce 	bl	8003a6c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff feed 	bl	80024b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026da:	2201      	movs	r2, #1
 80026dc:	2104      	movs	r1, #4
 80026de:	4804      	ldr	r0, [pc, #16]	; (80026f0 <LCD_IO_WriteReg+0x40>)
 80026e0:	f001 f9c4 	bl	8003a6c <HAL_GPIO_WritePin>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	40020800 	.word	0x40020800

080026f4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	80fb      	strh	r3, [r7, #6]
 8002700:	4613      	mov	r3, r2
 8002702:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002708:	2200      	movs	r2, #0
 800270a:	2104      	movs	r1, #4
 800270c:	4810      	ldr	r0, [pc, #64]	; (8002750 <LCD_IO_ReadData+0x5c>)
 800270e:	f001 f9ad 	bl	8003a6c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002712:	2200      	movs	r2, #0
 8002714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002718:	480e      	ldr	r0, [pc, #56]	; (8002754 <LCD_IO_ReadData+0x60>)
 800271a:	f001 f9a7 	bl	8003a6c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fec7 	bl	80024b4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002726:	797b      	ldrb	r3, [r7, #5]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fea3 	bl	8002474 <SPIx_Read>
 800272e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002730:	2201      	movs	r2, #1
 8002732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002736:	4807      	ldr	r0, [pc, #28]	; (8002754 <LCD_IO_ReadData+0x60>)
 8002738:	f001 f998 	bl	8003a6c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800273c:	2201      	movs	r2, #1
 800273e:	2104      	movs	r1, #4
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <LCD_IO_ReadData+0x5c>)
 8002742:	f001 f993 	bl	8003a6c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00

08002758 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f987 	bl	8002a74 <HAL_Delay>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002772:	f7ff fd51 	bl	8002218 <I2Cx_Init>
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}

0800277a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800277e:	f7ff fd7d 	bl	800227c <I2Cx_ITConfig>
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}

08002786 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	460b      	mov	r3, r1
 8002792:	71bb      	strb	r3, [r7, #6]
 8002794:	4613      	mov	r3, r2
 8002796:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002798:	797a      	ldrb	r2, [r7, #5]
 800279a:	79b9      	ldrb	r1, [r7, #6]
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fd9e 	bl	80022e0 <I2Cx_WriteData>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	460a      	mov	r2, r1
 80027b6:	71fb      	strb	r3, [r7, #7]
 80027b8:	4613      	mov	r3, r2
 80027ba:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80027bc:	79ba      	ldrb	r2, [r7, #6]
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fdb6 	bl	8002334 <I2Cx_ReadData>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	603a      	str	r2, [r7, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	460b      	mov	r3, r1
 80027e2:	71bb      	strb	r3, [r7, #6]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80027e8:	88bb      	ldrh	r3, [r7, #4]
 80027ea:	79b9      	ldrb	r1, [r7, #6]
 80027ec:	79f8      	ldrb	r0, [r7, #7]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	f7ff fdcc 	bl	800238c <I2Cx_ReadBuffer>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b29b      	uxth	r3, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f933 	bl	8002a74 <HAL_Delay>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	460a      	mov	r2, r1
 8002822:	80fb      	strh	r3, [r7, #6]
 8002824:	4613      	mov	r3, r2
 8002826:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <BSP_TS_Init+0x64>)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002832:	4a13      	ldr	r2, [pc, #76]	; (8002880 <BSP_TS_Init+0x68>)
 8002834:	88bb      	ldrh	r3, [r7, #4]
 8002836:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <BSP_TS_Init+0x6c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2082      	movs	r0, #130	; 0x82
 800283e:	4798      	blx	r3
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	f640 0311 	movw	r3, #2065	; 0x811
 8002848:	429a      	cmp	r2, r3
 800284a:	d104      	bne.n	8002856 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <BSP_TS_Init+0x70>)
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <BSP_TS_Init+0x6c>)
 8002850:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <BSP_TS_Init+0x70>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2082      	movs	r0, #130	; 0x82
 8002864:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <BSP_TS_Init+0x70>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2082      	movs	r0, #130	; 0x82
 800286e:	4798      	blx	r3
  }

  return ret;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20025c4c 	.word	0x20025c4c
 8002880:	20025c4e 	.word	0x20025c4e
 8002884:	20000040 	.word	0x20000040
 8002888:	20025c48 	.word	0x20025c48

0800288c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <BSP_TS_GetState+0x148>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2082      	movs	r0, #130	; 0x82
 800289c:	4798      	blx	r3
 800289e:	4603      	mov	r3, r0
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 808d 	beq.w	80029ca <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80028b0:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <BSP_TS_GetState+0x148>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f107 020c 	add.w	r2, r7, #12
 80028ba:	f107 010e 	add.w	r1, r7, #14
 80028be:	2082      	movs	r0, #130	; 0x82
 80028c0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80028c2:	89bb      	ldrh	r3, [r7, #12]
 80028c4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <BSP_TS_GetState+0x14c>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80028d8:	8abb      	ldrh	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d102      	bne.n	80028e4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	82bb      	strh	r3, [r7, #20]
 80028e2:	e008      	b.n	80028f6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80028e4:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <BSP_TS_GetState+0x150>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	8aba      	ldrh	r2, [r7, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d903      	bls.n	80028f6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <BSP_TS_GetState+0x150>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80028f6:	8abb      	ldrh	r3, [r7, #20]
 80028f8:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80028fa:	89fb      	ldrh	r3, [r7, #14]
 80028fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002900:	4293      	cmp	r3, r2
 8002902:	d806      	bhi.n	8002912 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800290a:	330e      	adds	r3, #14
 800290c:	b29b      	uxth	r3, r3
 800290e:	81fb      	strh	r3, [r7, #14]
 8002910:	e005      	b.n	800291e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8002918:	3308      	adds	r3, #8
 800291a:	b29b      	uxth	r3, r3
 800291c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	4a2f      	ldr	r2, [pc, #188]	; (80029e0 <BSP_TS_GetState+0x154>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800292a:	8afb      	ldrh	r3, [r7, #22]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	82fb      	strh	r3, [r7, #22]
 8002934:	e008      	b.n	8002948 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <BSP_TS_GetState+0x158>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	8afa      	ldrh	r2, [r7, #22]
 800293c:	429a      	cmp	r2, r3
 800293e:	d903      	bls.n	8002948 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <BSP_TS_GetState+0x158>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	3b01      	subs	r3, #1
 8002946:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8002948:	8afb      	ldrh	r3, [r7, #22]
 800294a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800294c:	89fb      	ldrh	r3, [r7, #14]
 800294e:	461a      	mov	r2, r3
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <BSP_TS_GetState+0x15c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d906      	bls.n	8002966 <BSP_TS_GetState+0xda>
 8002958:	89fa      	ldrh	r2, [r7, #14]
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <BSP_TS_GetState+0x15c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	e005      	b.n	8002972 <BSP_TS_GetState+0xe6>
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <BSP_TS_GetState+0x15c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b29a      	uxth	r2, r3
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	b29b      	uxth	r3, r3
 8002972:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8002974:	89bb      	ldrh	r3, [r7, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <BSP_TS_GetState+0x160>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d906      	bls.n	800298e <BSP_TS_GetState+0x102>
 8002980:	89ba      	ldrh	r2, [r7, #12]
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <BSP_TS_GetState+0x160>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	e005      	b.n	800299a <BSP_TS_GetState+0x10e>
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <BSP_TS_GetState+0x160>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29a      	uxth	r2, r3
 8002994:	89bb      	ldrh	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	b29b      	uxth	r3, r3
 800299a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800299c:	8a7a      	ldrh	r2, [r7, #18]
 800299e:	8a3b      	ldrh	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	dd07      	ble.n	80029b6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <BSP_TS_GetState+0x15c>)
 80029ac:	601a      	str	r2, [r3, #0]
      _y = y; 
 80029ae:	89bb      	ldrh	r3, [r7, #12]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <BSP_TS_GetState+0x160>)
 80029b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <BSP_TS_GetState+0x15c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <BSP_TS_GetState+0x160>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	809a      	strh	r2, [r3, #4]
  }
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20025c48 	.word	0x20025c48
 80029d8:	ba2e8ba3 	.word	0xba2e8ba3
 80029dc:	20025c4e 	.word	0x20025c4e
 80029e0:	88888889 	.word	0x88888889
 80029e4:	20025c4c 	.word	0x20025c4c
 80029e8:	20025c50 	.word	0x20025c50
 80029ec:	20025c54 	.word	0x20025c54

080029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_Init+0x40>)
 80029fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_Init+0x40>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_Init+0x40>)
 8002a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_Init+0x40>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_Init+0x40>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 f91c 	bl	8002c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe fcec 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a24:	f7fe fcbe 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00

08002a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x20>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_IncTick+0x24>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_IncTick+0x24>)
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000074 	.word	0x20000074
 8002a58:	2002f374 	.word	0x2002f374

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2002f374 	.word	0x2002f374

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff ffee 	bl	8002a5c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_Delay+0x40>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a9a:	bf00      	nop
 8002a9c:	f7ff ffde 	bl	8002a5c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000074 	.word	0x20000074

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db10      	blt.n	8002b8c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4909      	ldr	r1, [pc, #36]	; (8002b98 <__NVIC_DisableIRQ+0x40>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	3320      	adds	r3, #32
 8002b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b88:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ff2a 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c7e:	f7ff ff3f 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f7ff ffb1 	bl	8002bf0 <NVIC_EncodePriority>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff80 	bl	8002b9c <__NVIC_SetPriority>
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff32 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff42 	bl	8002b58 <__NVIC_DisableIRQ>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	795b      	ldrb	r3, [r3, #5]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fc5a 	bl	80005b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e03b      	b.n	8002d9e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fc90 	bl	8000660 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	f023 0107 	bic.w	r1, r3, #7
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68d1      	ldr	r1, [r2, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e05f      	b.n	8002e7a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002dba:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_DMA2D_DeInit+0xdc>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02e      	beq.n	8002e24 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8c1 	bl	8002f5c <HAL_DMA2D_Abort>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d021      	beq.n	8002e24 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04a      	b.n	8002e7a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d108      	bne.n	8002e04 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002df2:	2100      	movs	r1, #0
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8f7 	bl	8002fe8 <HAL_DMA2D_CLUTLoading_Abort>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d011      	beq.n	8002e24 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e03a      	b.n	8002e7a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d108      	bne.n	8002e24 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002e12:	2101      	movs	r1, #1
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f8e7 	bl	8002fe8 <HAL_DMA2D_CLUTLoading_Abort>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02a      	b.n	8002e7a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fd fc27 	bl	80006b0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_DMA2D_Start_IT+0x1c>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e020      	b.n	8002ee6 <HAL_DMA2D_Start_IT+0x5e>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa84 	bl	80033cc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e024      	b.n	8002f54 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fa4d 	bl	80033cc <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002f40:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 0205 	bic.w	r2, r3, #5
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f78:	f7ff fd70 	bl	8002a5c <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f7e:	e017      	b.n	8002fb0 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002f80:	f7ff fd6c 	bl	8002a5c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f8e:	d90f      	bls.n	8002fb0 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e017      	b.n	8002fe0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e0      	bne.n	8002f80 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3324      	adds	r3, #36	; 0x24
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0204 	orr.w	r2, r2, #4
 8003008:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d103      	bne.n	8003018 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	331c      	adds	r3, #28
 8003016:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003018:	f7ff fd20 	bl	8002a5c <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800301e:	e017      	b.n	8003050 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003020:	f7ff fd1c 	bl	8002a5c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302e:	d90f      	bls.n	8003050 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2203      	movs	r2, #3
 8003040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e016      	b.n	800307e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e1      	bne.n	8003020 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800306a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d026      	beq.n	80030f6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d021      	beq.n	80030f6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2204      	movs	r2, #4
 80030da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d026      	beq.n	800314e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d021      	beq.n	800314e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003118:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2204      	movs	r2, #4
 8003132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315e:	2b00      	cmp	r3, #0
 8003160:	d021      	beq.n	80031a6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003170:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2208      	movs	r2, #8
 8003178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2204      	movs	r2, #4
 800318a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00e      	beq.n	80031d8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2204      	movs	r2, #4
 80031d0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f853 	bl	800327e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d024      	beq.n	800322c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01f      	beq.n	800322c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2202      	movs	r2, #2
 8003202:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01f      	beq.n	8003276 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01a      	beq.n	8003276 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800324e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f80e 	bl	8003292 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_DMA2D_ConfigLayer+0x20>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e079      	b.n	80033bc <HAL_DMA2D_ConfigLayer+0x114>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	3318      	adds	r3, #24
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80032f2:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80032f4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b0a      	cmp	r3, #10
 80032fc:	d003      	beq.n	8003306 <HAL_DMA2D_ConfigLayer+0x5e>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b09      	cmp	r3, #9
 8003304:	d107      	bne.n	8003316 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e005      	b.n	8003322 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	061b      	lsls	r3, r3, #24
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d120      	bne.n	800336a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43db      	mvns	r3, r3
 8003332:	ea02 0103 	and.w	r1, r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	430a      	orrs	r2, r1
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b0a      	cmp	r3, #10
 8003350:	d003      	beq.n	800335a <HAL_DMA2D_ConfigLayer+0xb2>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b09      	cmp	r3, #9
 8003358:	d127      	bne.n	80033aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	e01f      	b.n	80033aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	ea02 0103 	and.w	r1, r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	430a      	orrs	r2, r1
 8003380:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b0a      	cmp	r3, #10
 8003392:	d003      	beq.n	800339c <HAL_DMA2D_ConfigLayer+0xf4>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b09      	cmp	r3, #9
 800339a:	d106      	bne.n	80033aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80033a8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	ff03000f 	.word	0xff03000f

080033cc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b08b      	sub	sp, #44	; 0x2c
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	041a      	lsls	r2, r3, #16
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003404:	d174      	bne.n	80034f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800340c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003414:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800341c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	431a      	orrs	r2, r3
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	4313      	orrs	r3, r2
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
 800343c:	e053      	b.n	80034e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d106      	bne.n	8003454 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e048      	b.n	80034e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d111      	bne.n	8003480 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	0cdb      	lsrs	r3, r3, #19
 8003460:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	0a9b      	lsrs	r3, r3, #10
 8003466:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	08db      	lsrs	r3, r3, #3
 800346c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	02db      	lsls	r3, r3, #11
 8003476:	4313      	orrs	r3, r2
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	e032      	b.n	80034e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d117      	bne.n	80034b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	0fdb      	lsrs	r3, r3, #31
 800348c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	0cdb      	lsrs	r3, r3, #19
 8003492:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	0adb      	lsrs	r3, r3, #11
 8003498:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	08db      	lsrs	r3, r3, #3
 800349e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	431a      	orrs	r2, r3
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	03db      	lsls	r3, r3, #15
 80034ae:	4313      	orrs	r3, r2
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	e016      	b.n	80034e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	0f1b      	lsrs	r3, r3, #28
 80034bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	0d1b      	lsrs	r3, r3, #20
 80034c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	0b1b      	lsrs	r3, r3, #12
 80034c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	011a      	lsls	r2, r3, #4
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	431a      	orrs	r2, r3
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	031b      	lsls	r3, r3, #12
 80034de:	4313      	orrs	r3, r2
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80034ee:	e003      	b.n	80034f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	60da      	str	r2, [r3, #12]
}
 80034f8:	bf00      	nop
 80034fa:	372c      	adds	r7, #44	; 0x2c
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e177      	b.n	8003810 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003520:	2201      	movs	r2, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	f040 8166 	bne.w	800380a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d00b      	beq.n	800355e <HAL_GPIO_Init+0x5a>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003552:	2b11      	cmp	r3, #17
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b12      	cmp	r3, #18
 800355c:	d130      	bne.n	80035c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	2201      	movs	r2, #1
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 0201 	and.w	r2, r3, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0xfc>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b12      	cmp	r3, #18
 80035fe:	d123      	bne.n	8003648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80c0 	beq.w	800380a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_GPIO_Init+0x320>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4a64      	ldr	r2, [pc, #400]	; (8003824 <HAL_GPIO_Init+0x320>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	4b62      	ldr	r3, [pc, #392]	; (8003824 <HAL_GPIO_Init+0x320>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a6:	4a60      	ldr	r2, [pc, #384]	; (8003828 <HAL_GPIO_Init+0x324>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a57      	ldr	r2, [pc, #348]	; (800382c <HAL_GPIO_Init+0x328>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d037      	beq.n	8003742 <HAL_GPIO_Init+0x23e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_GPIO_Init+0x32c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_GPIO_Init+0x23a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a55      	ldr	r2, [pc, #340]	; (8003834 <HAL_GPIO_Init+0x330>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x236>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a54      	ldr	r2, [pc, #336]	; (8003838 <HAL_GPIO_Init+0x334>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x232>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a53      	ldr	r2, [pc, #332]	; (800383c <HAL_GPIO_Init+0x338>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x22e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_GPIO_Init+0x33c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x22a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a51      	ldr	r2, [pc, #324]	; (8003844 <HAL_GPIO_Init+0x340>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x226>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a50      	ldr	r2, [pc, #320]	; (8003848 <HAL_GPIO_Init+0x344>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x222>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4f      	ldr	r2, [pc, #316]	; (800384c <HAL_GPIO_Init+0x348>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x21e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <HAL_GPIO_Init+0x34c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x21a>
 800371a:	2309      	movs	r3, #9
 800371c:	e012      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800371e:	230a      	movs	r3, #10
 8003720:	e010      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003722:	2308      	movs	r3, #8
 8003724:	e00e      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003726:	2307      	movs	r3, #7
 8003728:	e00c      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372a:	2306      	movs	r3, #6
 800372c:	e00a      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372e:	2305      	movs	r3, #5
 8003730:	e008      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003732:	2304      	movs	r3, #4
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003736:	2303      	movs	r3, #3
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003742:	2300      	movs	r3, #0
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003754:	4934      	ldr	r1, [pc, #208]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003762:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <HAL_GPIO_Init+0x350>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003786:	4a33      	ldr	r2, [pc, #204]	; (8003854 <HAL_GPIO_Init+0x350>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_GPIO_Init+0x350>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <HAL_GPIO_Init+0x350>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_GPIO_Init+0x350>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_GPIO_Init+0x350>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_GPIO_Init+0x350>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_GPIO_Init+0x350>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f67f ae84 	bls.w	8003520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003818:	bf00      	nop
 800381a:	3724      	adds	r7, #36	; 0x24
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40023800 	.word	0x40023800
 8003828:	40013800 	.word	0x40013800
 800382c:	40020000 	.word	0x40020000
 8003830:	40020400 	.word	0x40020400
 8003834:	40020800 	.word	0x40020800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40021400 	.word	0x40021400
 8003844:	40021800 	.word	0x40021800
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40022000 	.word	0x40022000
 8003850:	40022400 	.word	0x40022400
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e0d9      	b.n	8003a28 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003874:	2201      	movs	r2, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	f040 80c9 	bne.w	8003a22 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003890:	4a6a      	ldr	r2, [pc, #424]	; (8003a3c <HAL_GPIO_DeInit+0x1e4>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a62      	ldr	r2, [pc, #392]	; (8003a40 <HAL_GPIO_DeInit+0x1e8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d037      	beq.n	800392a <HAL_GPIO_DeInit+0xd2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a61      	ldr	r2, [pc, #388]	; (8003a44 <HAL_GPIO_DeInit+0x1ec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_GPIO_DeInit+0xce>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a60      	ldr	r2, [pc, #384]	; (8003a48 <HAL_GPIO_DeInit+0x1f0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d02b      	beq.n	8003922 <HAL_GPIO_DeInit+0xca>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a5f      	ldr	r2, [pc, #380]	; (8003a4c <HAL_GPIO_DeInit+0x1f4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d025      	beq.n	800391e <HAL_GPIO_DeInit+0xc6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_GPIO_DeInit+0x1f8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <HAL_GPIO_DeInit+0xc2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_GPIO_DeInit+0x1fc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d019      	beq.n	8003916 <HAL_GPIO_DeInit+0xbe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a5c      	ldr	r2, [pc, #368]	; (8003a58 <HAL_GPIO_DeInit+0x200>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_GPIO_DeInit+0xba>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a5b      	ldr	r2, [pc, #364]	; (8003a5c <HAL_GPIO_DeInit+0x204>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00d      	beq.n	800390e <HAL_GPIO_DeInit+0xb6>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a5a      	ldr	r2, [pc, #360]	; (8003a60 <HAL_GPIO_DeInit+0x208>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <HAL_GPIO_DeInit+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a59      	ldr	r2, [pc, #356]	; (8003a64 <HAL_GPIO_DeInit+0x20c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_GPIO_DeInit+0xae>
 8003902:	2309      	movs	r3, #9
 8003904:	e012      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 8003906:	230a      	movs	r3, #10
 8003908:	e010      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 800390a:	2308      	movs	r3, #8
 800390c:	e00e      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 800390e:	2307      	movs	r3, #7
 8003910:	e00c      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 8003912:	2306      	movs	r3, #6
 8003914:	e00a      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_DeInit+0xd4>
 800392a:	2300      	movs	r3, #0
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	429a      	cmp	r2, r3
 800393a:	d132      	bne.n	80039a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	43db      	mvns	r3, r3
 8003944:	4948      	ldr	r1, [pc, #288]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 8003946:	4013      	ands	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800394a:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	4945      	ldr	r1, [pc, #276]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 8003954:	4013      	ands	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003958:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	43db      	mvns	r3, r3
 8003960:	4941      	ldr	r1, [pc, #260]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 8003962:	4013      	ands	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43db      	mvns	r3, r3
 800396e:	493e      	ldr	r1, [pc, #248]	; (8003a68 <HAL_GPIO_DeInit+0x210>)
 8003970:	4013      	ands	r3, r2
 8003972:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003984:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_GPIO_DeInit+0x1e4>)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	43da      	mvns	r2, r3
 8003994:	4829      	ldr	r0, [pc, #164]	; (8003a3c <HAL_GPIO_DeInit+0x1e4>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	400a      	ands	r2, r1
 800399c:	3302      	adds	r3, #2
 800399e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2103      	movs	r1, #3
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	08d2      	lsrs	r2, r2, #3
 80039d8:	4019      	ands	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2103      	movs	r1, #3
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	2101      	movs	r1, #1
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2103      	movs	r1, #3
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	3301      	adds	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f67f af22 	bls.w	8003874 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40021400 	.word	0x40021400
 8003a58:	40021800 	.word	0x40021800
 8003a5c:	40021c00 	.word	0x40021c00
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40022400 	.word	0x40022400
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	887b      	ldrh	r3, [r7, #2]
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	887b      	ldrh	r3, [r7, #2]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d104      	bne.n	8003ac2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e11f      	b.n	8003d26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd f8c4 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b38:	f002 f804 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a7b      	ldr	r2, [pc, #492]	; (8003d30 <HAL_I2C_Init+0x25c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d807      	bhi.n	8003b58 <HAL_I2C_Init+0x84>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a7a      	ldr	r2, [pc, #488]	; (8003d34 <HAL_I2C_Init+0x260>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e006      	b.n	8003b66 <HAL_I2C_Init+0x92>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a77      	ldr	r2, [pc, #476]	; (8003d38 <HAL_I2C_Init+0x264>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0db      	b.n	8003d26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a72      	ldr	r2, [pc, #456]	; (8003d3c <HAL_I2C_Init+0x268>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a64      	ldr	r2, [pc, #400]	; (8003d30 <HAL_I2C_Init+0x25c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_I2C_Init+0xd4>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	e009      	b.n	8003bbc <HAL_I2C_Init+0xe8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	4a63      	ldr	r2, [pc, #396]	; (8003d40 <HAL_I2C_Init+0x26c>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4956      	ldr	r1, [pc, #344]	; (8003d30 <HAL_I2C_Init+0x25c>)
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	d80d      	bhi.n	8003bf8 <HAL_I2C_Init+0x124>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e59      	subs	r1, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	bf38      	it	cc
 8003bf4:	2304      	movcc	r3, #4
 8003bf6:	e04f      	b.n	8003c98 <HAL_I2C_Init+0x1c4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <HAL_I2C_Init+0x150>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e58      	subs	r0, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e012      	b.n	8003c4a <HAL_I2C_Init+0x176>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Init+0x17e>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e022      	b.n	8003c98 <HAL_I2C_Init+0x1c4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <HAL_I2C_Init+0x1a4>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1e58      	subs	r0, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	440b      	add	r3, r1
 8003c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	e00f      	b.n	8003c98 <HAL_I2C_Init+0x1c4>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	6809      	ldr	r1, [r1, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6911      	ldr	r1, [r2, #16]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	000186a0 	.word	0x000186a0
 8003d34:	001e847f 	.word	0x001e847f
 8003d38:	003d08ff 	.word	0x003d08ff
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	10624dd3 	.word	0x10624dd3

08003d44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e021      	b.n	8003d9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2224      	movs	r2, #36	; 0x24
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fff4 	bl	8000d5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	460b      	mov	r3, r1
 8003db8:	813b      	strh	r3, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dbe:	f7fe fe4d 	bl	8002a5c <HAL_GetTick>
 8003dc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	f040 80d9 	bne.w	8003f84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2319      	movs	r3, #25
 8003dd8:	2201      	movs	r2, #1
 8003dda:	496d      	ldr	r1, [pc, #436]	; (8003f90 <HAL_I2C_Mem_Write+0x1ec>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fc89 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0cc      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Mem_Write+0x56>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0c5      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d007      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2221      	movs	r2, #33	; 0x21
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a4d      	ldr	r2, [pc, #308]	; (8003f94 <HAL_I2C_Mem_Write+0x1f0>)
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e62:	88f8      	ldrh	r0, [r7, #6]
 8003e64:	893a      	ldrh	r2, [r7, #8]
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4603      	mov	r3, r0
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fac4 	bl	8004400 <I2C_RequestMemoryWrite>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d052      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e081      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fd0a 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06b      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_I2C_Mem_Write+0x180>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1aa      	bne.n	8003e82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fcf6 	bl	8004922 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e016      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	00100002 	.word	0x00100002
 8003f94:	ffff0000 	.word	0xffff0000

08003f98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	817b      	strh	r3, [r7, #10]
 8003faa:	460b      	mov	r3, r1
 8003fac:	813b      	strh	r3, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb2:	f7fe fd53 	bl	8002a5c <HAL_GetTick>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	f040 8208 	bne.w	80043d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2319      	movs	r3, #25
 8003fcc:	2201      	movs	r2, #1
 8003fce:	497b      	ldr	r1, [pc, #492]	; (80041bc <HAL_I2C_Mem_Read+0x224>)
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fb8f 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e1fb      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_I2C_Mem_Read+0x56>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e1f4      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d007      	beq.n	8004014 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2222      	movs	r2, #34	; 0x22
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2240      	movs	r2, #64	; 0x40
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a5b      	ldr	r2, [pc, #364]	; (80041c0 <HAL_I2C_Mem_Read+0x228>)
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004056:	88f8      	ldrh	r0, [r7, #6]
 8004058:	893a      	ldrh	r2, [r7, #8]
 800405a:	8979      	ldrh	r1, [r7, #10]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	4603      	mov	r3, r0
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa5e 	bl	8004528 <I2C_RequestMemoryRead>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1b0      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e184      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d11b      	bne.n	80040e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e164      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11b      	bne.n	8004126 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	e144      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800413c:	e138      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	2b03      	cmp	r3, #3
 8004144:	f200 80f1 	bhi.w	800432a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b01      	cmp	r3, #1
 800414e:	d123      	bne.n	8004198 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fc25 	bl	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e139      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004196:	e10b      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	2b02      	cmp	r3, #2
 800419e:	d14e      	bne.n	800423e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2200      	movs	r2, #0
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <HAL_I2C_Mem_Read+0x22c>)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 faa2 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e10e      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000
 80041c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800423c:	e0b8      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	2200      	movs	r2, #0
 8004246:	4966      	ldr	r1, [pc, #408]	; (80043e0 <HAL_I2C_Mem_Read+0x448>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fa53 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0bf      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2200      	movs	r2, #0
 80042a2:	494f      	ldr	r1, [pc, #316]	; (80043e0 <HAL_I2C_Mem_Read+0x448>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fa25 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e091      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004328:	e042      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fb38 	bl	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04c      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d118      	bne.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f aec2 	bne.w	800413e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	00010004 	.word	0x00010004

080043e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4603      	mov	r3, r0
 8004410:	817b      	strh	r3, [r7, #10]
 8004412:	460b      	mov	r3, r1
 8004414:	813b      	strh	r3, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2200      	movs	r2, #0
 8004432:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f95c 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e05f      	b.n	800451c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800446a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	492c      	ldr	r1, [pc, #176]	; (8004524 <I2C_RequestMemoryWrite+0x124>)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f995 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e04c      	b.n	800451c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	6a39      	ldr	r1, [r7, #32]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f9ff 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d107      	bne.n	80044c0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e02b      	b.n	800451c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ca:	893b      	ldrh	r3, [r7, #8]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
 80044d4:	e021      	b.n	800451a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	b29b      	uxth	r3, r3
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e6:	6a39      	ldr	r1, [r7, #32]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f9d9 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d107      	bne.n	800450c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e005      	b.n	800451c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004510:	893b      	ldrh	r3, [r7, #8]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	00010002 	.word	0x00010002

08004528 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	4603      	mov	r3, r0
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	460b      	mov	r3, r1
 800453c:	813b      	strh	r3, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004550:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	2200      	movs	r2, #0
 800456a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f8c0 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0a9      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004594:	897b      	ldrh	r3, [r7, #10]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	4951      	ldr	r1, [pc, #324]	; (80046f0 <I2C_RequestMemoryRead+0x1c8>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8f9 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e096      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6a39      	ldr	r1, [r7, #32]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f963 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d107      	bne.n	80045f8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e075      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004602:	893b      	ldrh	r3, [r7, #8]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]
 800460c:	e021      	b.n	8004652 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b29b      	uxth	r3, r3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461e:	6a39      	ldr	r1, [r7, #32]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f93d 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b04      	cmp	r3, #4
 8004632:	d107      	bne.n	8004644 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e04f      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	6a39      	ldr	r1, [r7, #32]
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f922 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b04      	cmp	r3, #4
 8004668:	d107      	bne.n	800467a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004678:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e034      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	2200      	movs	r2, #0
 8004696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f82a 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e013      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c0:	897b      	ldrh	r3, [r7, #10]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	4906      	ldr	r1, [pc, #24]	; (80046f0 <I2C_RequestMemoryRead+0x1c8>)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f863 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	00010002 	.word	0x00010002

080046f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004704:	e025      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d021      	beq.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fe f9a5 	bl	8002a5c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d116      	bne.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e023      	b.n	800479a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d10d      	bne.n	8004778 <I2C_WaitOnFlagUntilTimeout+0x84>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	e00c      	b.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0b6      	beq.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b0:	e051      	b.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d123      	bne.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e046      	b.n	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d021      	beq.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fe f923 	bl	8002a5c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e020      	b.n	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10c      	bne.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e00b      	b.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	43da      	mvns	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d18d      	bne.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ac:	e02d      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f8ce 	bl	8004a50 <I2C_IsAcknowledgeFailed>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e02d      	b.n	800491a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d021      	beq.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fe f8c9 	bl	8002a5c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e007      	b.n	800491a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d1ca      	bne.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492e:	e02d      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f88d 	bl	8004a50 <I2C_IsAcknowledgeFailed>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e02d      	b.n	800499c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d021      	beq.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fe f888 	bl	8002a5c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e007      	b.n	800499c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d1ca      	bne.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049b0:	e042      	b.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d119      	bne.n	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0210 	mvn.w	r2, #16
 80049c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e029      	b.n	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fe f832 	bl	8002a5c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d1b5      	bne.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d11b      	bne.n	8004aa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d129      	bne.n	8004b18 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2224      	movs	r2, #36	; 0x24
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0210 	bic.w	r2, r2, #16
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d12a      	bne.n	8004b96 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	; 0x24
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b60:	89fb      	ldrh	r3, [r7, #14]
 8004b62:	f023 030f 	bic.w	r3, r3, #15
 8004b66:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	89fb      	ldrh	r3, [r7, #14]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	89fa      	ldrh	r2, [r7, #14]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e0bf      	b.n	8004d36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc f96c 	bl	8000ea8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004be6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bfc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_LTDC_Init+0x19c>)
 8004c18:	400b      	ands	r3, r1
 8004c1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6899      	ldr	r1, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68d9      	ldr	r1, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_LTDC_Init+0x19c>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68d9      	ldr	r1, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1a      	ldr	r2, [r3, #32]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6919      	ldr	r1, [r3, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b33      	ldr	r3, [pc, #204]	; (8004d40 <HAL_LTDC_Init+0x19c>)
 8004c74:	400b      	ands	r3, r1
 8004c76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6919      	ldr	r1, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6959      	ldr	r1, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_LTDC_Init+0x19c>)
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6959      	ldr	r1, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0206 	orr.w	r2, r2, #6
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	f000f800 	.word	0xf000f800

08004d44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d023      	beq.n	8004dae <HAL_LTDC_IRQHandler+0x6a>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01e      	beq.n	8004dae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0204 	bic.w	r2, r2, #4
 8004d7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2204      	movs	r2, #4
 8004d86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d8e:	f043 0201 	orr.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f86f 	bl	8004e8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d023      	beq.n	8004e00 <HAL_LTDC_IRQHandler+0xbc>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01e      	beq.n	8004e00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0202 	bic.w	r2, r2, #2
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004de0:	f043 0202 	orr.w	r2, r3, #2
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2204      	movs	r2, #4
 8004dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f846 	bl	8004e8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01b      	beq.n	8004e42 <HAL_LTDC_IRQHandler+0xfe>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f009 f889 	bl	800df54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_LTDC_IRQHandler+0x140>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0208 	bic.w	r2, r2, #8
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f80e 	bl	8004ea0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004eb4:	b5b0      	push	{r4, r5, r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_LTDC_ConfigLayer+0x1a>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e02c      	b.n	8004f28 <HAL_LTDC_ConfigLayer+0x74>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2134      	movs	r1, #52	; 0x34
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f849 	bl	8004fa0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2201      	movs	r2, #1
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bdb0      	pop	{r4, r5, r7, pc}

08004f30 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_LTDC_ProgramLineEvent+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e023      	b.n	8004f90 <HAL_LTDC_ProgramLineEvent+0x60>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004f68:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40016800 	.word	0x40016800

08004fa0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbc:	4413      	add	r3, r2
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	01db      	lsls	r3, r3, #7
 8004fcc:	4413      	add	r3, r2
 8004fce:	3384      	adds	r3, #132	; 0x84
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	01d2      	lsls	r2, r2, #7
 8004fdc:	440a      	add	r2, r1
 8004fde:	3284      	adds	r2, #132	; 0x84
 8004fe0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fe4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff6:	4413      	add	r3, r2
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	01db      	lsls	r3, r3, #7
 8005004:	440b      	add	r3, r1
 8005006:	3384      	adds	r3, #132	; 0x84
 8005008:	4619      	mov	r1, r3
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501e:	4413      	add	r3, r2
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	01db      	lsls	r3, r3, #7
 800502e:	4413      	add	r3, r2
 8005030:	3384      	adds	r3, #132	; 0x84
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	4611      	mov	r1, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	01d2      	lsls	r2, r2, #7
 800503e:	440a      	add	r2, r1
 8005040:	3284      	adds	r2, #132	; 0x84
 8005042:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005046:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005056:	4413      	add	r3, r2
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	01db      	lsls	r3, r3, #7
 8005064:	440b      	add	r3, r1
 8005066:	3384      	adds	r3, #132	; 0x84
 8005068:	4619      	mov	r1, r3
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4313      	orrs	r3, r2
 800506e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	01db      	lsls	r3, r3, #7
 800507a:	4413      	add	r3, r2
 800507c:	3384      	adds	r3, #132	; 0x84
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	4611      	mov	r1, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	01d2      	lsls	r2, r2, #7
 800508a:	440a      	add	r2, r1
 800508c:	3284      	adds	r2, #132	; 0x84
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	01db      	lsls	r3, r3, #7
 800509e:	4413      	add	r3, r2
 80050a0:	3384      	adds	r3, #132	; 0x84
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	01db      	lsls	r3, r3, #7
 80050d0:	4413      	add	r3, r2
 80050d2:	3384      	adds	r3, #132	; 0x84
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	01db      	lsls	r3, r3, #7
 80050e0:	4413      	add	r3, r2
 80050e2:	3384      	adds	r3, #132	; 0x84
 80050e4:	461a      	mov	r2, r3
 80050e6:	2300      	movs	r3, #0
 80050e8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050f0:	461a      	mov	r2, r3
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	01db      	lsls	r3, r3, #7
 8005104:	440b      	add	r3, r1
 8005106:	3384      	adds	r3, #132	; 0x84
 8005108:	4619      	mov	r1, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	01db      	lsls	r3, r3, #7
 800511a:	4413      	add	r3, r2
 800511c:	3384      	adds	r3, #132	; 0x84
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	4611      	mov	r1, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	01d2      	lsls	r2, r2, #7
 800512a:	440a      	add	r2, r1
 800512c:	3284      	adds	r2, #132	; 0x84
 800512e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005132:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	01db      	lsls	r3, r3, #7
 800513e:	4413      	add	r3, r2
 8005140:	3384      	adds	r3, #132	; 0x84
 8005142:	461a      	mov	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	01db      	lsls	r3, r3, #7
 8005154:	4413      	add	r3, r2
 8005156:	3384      	adds	r3, #132	; 0x84
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	4611      	mov	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	01d2      	lsls	r2, r2, #7
 8005164:	440a      	add	r2, r1
 8005166:	3284      	adds	r2, #132	; 0x84
 8005168:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800516c:	f023 0307 	bic.w	r3, r3, #7
 8005170:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	6809      	ldr	r1, [r1, #0]
 800517e:	4608      	mov	r0, r1
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	01c9      	lsls	r1, r1, #7
 8005184:	4401      	add	r1, r0
 8005186:	3184      	adds	r1, #132	; 0x84
 8005188:	4313      	orrs	r3, r2
 800518a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	01db      	lsls	r3, r3, #7
 8005196:	4413      	add	r3, r2
 8005198:	3384      	adds	r3, #132	; 0x84
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	01db      	lsls	r3, r3, #7
 80051a6:	4413      	add	r3, r2
 80051a8:	3384      	adds	r3, #132	; 0x84
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	01db      	lsls	r3, r3, #7
 80051ba:	4413      	add	r3, r2
 80051bc:	3384      	adds	r3, #132	; 0x84
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80051ce:	2304      	movs	r3, #4
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e01b      	b.n	800520c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d102      	bne.n	80051e2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80051dc:	2303      	movs	r3, #3
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	e014      	b.n	800520c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d00b      	beq.n	8005202 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d007      	beq.n	8005202 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d003      	beq.n	8005202 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051fe:	2b07      	cmp	r3, #7
 8005200:	d102      	bne.n	8005208 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005202:	2302      	movs	r3, #2
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e001      	b.n	800520c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	01db      	lsls	r3, r3, #7
 8005216:	4413      	add	r3, r2
 8005218:	3384      	adds	r3, #132	; 0x84
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	4611      	mov	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	01d2      	lsls	r2, r2, #7
 8005226:	440a      	add	r2, r1
 8005228:	3284      	adds	r2, #132	; 0x84
 800522a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800522e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	041a      	lsls	r2, r3, #16
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	1acb      	subs	r3, r1, r3
 8005246:	69f9      	ldr	r1, [r7, #28]
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	3303      	adds	r3, #3
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6809      	ldr	r1, [r1, #0]
 8005252:	4608      	mov	r0, r1
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	01c9      	lsls	r1, r1, #7
 8005258:	4401      	add	r1, r0
 800525a:	3184      	adds	r1, #132	; 0x84
 800525c:	4313      	orrs	r3, r2
 800525e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	01db      	lsls	r3, r3, #7
 800526a:	4413      	add	r3, r2
 800526c:	3384      	adds	r3, #132	; 0x84
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	4611      	mov	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	01d2      	lsls	r2, r2, #7
 800527a:	440a      	add	r2, r1
 800527c:	3284      	adds	r2, #132	; 0x84
 800527e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005282:	f023 0307 	bic.w	r3, r3, #7
 8005286:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	01db      	lsls	r3, r3, #7
 8005292:	4413      	add	r3, r2
 8005294:	3384      	adds	r3, #132	; 0x84
 8005296:	461a      	mov	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	01db      	lsls	r3, r3, #7
 80052a8:	4413      	add	r3, r2
 80052aa:	3384      	adds	r3, #132	; 0x84
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	4611      	mov	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	01d2      	lsls	r2, r2, #7
 80052b8:	440a      	add	r2, r1
 80052ba:	3284      	adds	r2, #132	; 0x84
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	6013      	str	r3, [r2, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3724      	adds	r7, #36	; 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e25b      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d075      	beq.n	80053da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ee:	4ba3      	ldr	r3, [pc, #652]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d00c      	beq.n	8005314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052fa:	4ba0      	ldr	r3, [pc, #640]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005302:	2b08      	cmp	r3, #8
 8005304:	d112      	bne.n	800532c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005306:	4b9d      	ldr	r3, [pc, #628]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005312:	d10b      	bne.n	800532c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005314:	4b99      	ldr	r3, [pc, #612]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d05b      	beq.n	80053d8 <HAL_RCC_OscConfig+0x108>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d157      	bne.n	80053d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e236      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005334:	d106      	bne.n	8005344 <HAL_RCC_OscConfig+0x74>
 8005336:	4b91      	ldr	r3, [pc, #580]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a90      	ldr	r2, [pc, #576]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800533c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e01d      	b.n	8005380 <HAL_RCC_OscConfig+0xb0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0x98>
 800534e:	4b8b      	ldr	r3, [pc, #556]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a8a      	ldr	r2, [pc, #552]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b88      	ldr	r3, [pc, #544]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a87      	ldr	r2, [pc, #540]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e00b      	b.n	8005380 <HAL_RCC_OscConfig+0xb0>
 8005368:	4b84      	ldr	r3, [pc, #528]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a83      	ldr	r2, [pc, #524]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800536e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4b81      	ldr	r3, [pc, #516]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a80      	ldr	r2, [pc, #512]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800537a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005388:	f7fd fb68 	bl	8002a5c <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005390:	f7fd fb64 	bl	8002a5c <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	; 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e1fb      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	4b76      	ldr	r3, [pc, #472]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0xc0>
 80053ae:	e014      	b.n	80053da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7fd fb54 	bl	8002a5c <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fd fb50 	bl	8002a5c <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e1e7      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ca:	4b6c      	ldr	r3, [pc, #432]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0xe8>
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d063      	beq.n	80054ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e6:	4b65      	ldr	r3, [pc, #404]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f2:	4b62      	ldr	r3, [pc, #392]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d11c      	bne.n	8005438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fe:	4b5f      	ldr	r3, [pc, #380]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d116      	bne.n	8005438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540a:	4b5c      	ldr	r3, [pc, #368]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x152>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d001      	beq.n	8005422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e1bb      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	4b56      	ldr	r3, [pc, #344]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4952      	ldr	r1, [pc, #328]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005436:	e03a      	b.n	80054ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005440:	4b4f      	ldr	r3, [pc, #316]	; (8005580 <HAL_RCC_OscConfig+0x2b0>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fd fb09 	bl	8002a5c <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800544e:	f7fd fb05 	bl	8002a5c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e19c      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005460:	4b46      	ldr	r3, [pc, #280]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546c:	4b43      	ldr	r3, [pc, #268]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4940      	ldr	r1, [pc, #256]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
 8005480:	e015      	b.n	80054ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005482:	4b3f      	ldr	r3, [pc, #252]	; (8005580 <HAL_RCC_OscConfig+0x2b0>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005488:	f7fd fae8 	bl	8002a5c <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005490:	f7fd fae4 	bl	8002a5c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e17b      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d030      	beq.n	800551c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <HAL_RCC_OscConfig+0x2b4>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fd fac8 	bl	8002a5c <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d0:	f7fd fac4 	bl	8002a5c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e15b      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e2:	4b26      	ldr	r3, [pc, #152]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x200>
 80054ee:	e015      	b.n	800551c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f0:	4b24      	ldr	r3, [pc, #144]	; (8005584 <HAL_RCC_OscConfig+0x2b4>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f6:	f7fd fab1 	bl	8002a5c <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054fe:	f7fd faad 	bl	8002a5c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e144      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80a0 	beq.w	800566a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a0e      	ldr	r2, [pc, #56]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 8005544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCC_OscConfig+0x2ac>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_RCC_OscConfig+0x2b8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d121      	bne.n	80055aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <HAL_RCC_OscConfig+0x2b8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a07      	ldr	r2, [pc, #28]	; (8005588 <HAL_RCC_OscConfig+0x2b8>)
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005572:	f7fd fa73 	bl	8002a5c <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	e011      	b.n	800559e <HAL_RCC_OscConfig+0x2ce>
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800
 8005580:	42470000 	.word	0x42470000
 8005584:	42470e80 	.word	0x42470e80
 8005588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558c:	f7fd fa66 	bl	8002a5c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0fd      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559e:	4b81      	ldr	r3, [pc, #516]	; (80057a4 <HAL_RCC_OscConfig+0x4d4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d106      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2f0>
 80055b2:	4b7d      	ldr	r3, [pc, #500]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	4a7c      	ldr	r2, [pc, #496]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70
 80055be:	e01c      	b.n	80055fa <HAL_RCC_OscConfig+0x32a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b05      	cmp	r3, #5
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCC_OscConfig+0x312>
 80055c8:	4b77      	ldr	r3, [pc, #476]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a76      	ldr	r2, [pc, #472]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055ce:	f043 0304 	orr.w	r3, r3, #4
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
 80055d4:	4b74      	ldr	r3, [pc, #464]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a73      	ldr	r2, [pc, #460]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
 80055e0:	e00b      	b.n	80055fa <HAL_RCC_OscConfig+0x32a>
 80055e2:	4b71      	ldr	r3, [pc, #452]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	4a70      	ldr	r2, [pc, #448]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	6713      	str	r3, [r2, #112]	; 0x70
 80055ee:	4b6e      	ldr	r3, [pc, #440]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	4a6d      	ldr	r2, [pc, #436]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80055f4:	f023 0304 	bic.w	r3, r3, #4
 80055f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d015      	beq.n	800562e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005602:	f7fd fa2b 	bl	8002a5c <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	e00a      	b.n	8005620 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800560a:	f7fd fa27 	bl	8002a5c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e0bc      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005620:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ee      	beq.n	800560a <HAL_RCC_OscConfig+0x33a>
 800562c:	e014      	b.n	8005658 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fd fa15 	bl	8002a5c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fd fa11 	bl	8002a5c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0a6      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800564c:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ee      	bne.n	8005636 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565e:	4b52      	ldr	r3, [pc, #328]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	4a51      	ldr	r2, [pc, #324]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 8005664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8092 	beq.w	8005798 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005674:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b08      	cmp	r3, #8
 800567e:	d05c      	beq.n	800573a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d141      	bne.n	800570c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005688:	4b48      	ldr	r3, [pc, #288]	; (80057ac <HAL_RCC_OscConfig+0x4dc>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568e:	f7fd f9e5 	bl	8002a5c <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005696:	f7fd f9e1 	bl	8002a5c <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e078      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a8:	4b3f      	ldr	r3, [pc, #252]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	019b      	lsls	r3, r3, #6
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	3b01      	subs	r3, #1
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	4933      	ldr	r1, [pc, #204]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056de:	4b33      	ldr	r3, [pc, #204]	; (80057ac <HAL_RCC_OscConfig+0x4dc>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e4:	f7fd f9ba 	bl	8002a5c <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ec:	f7fd f9b6 	bl	8002a5c <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e04d      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fe:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0x41c>
 800570a:	e045      	b.n	8005798 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570c:	4b27      	ldr	r3, [pc, #156]	; (80057ac <HAL_RCC_OscConfig+0x4dc>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005712:	f7fd f9a3 	bl	8002a5c <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800571a:	f7fd f99f 	bl	8002a5c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e036      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f0      	bne.n	800571a <HAL_RCC_OscConfig+0x44a>
 8005738:	e02e      	b.n	8005798 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e029      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <HAL_RCC_OscConfig+0x4d8>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	429a      	cmp	r2, r3
 8005758:	d11c      	bne.n	8005794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005764:	429a      	cmp	r2, r3
 8005766:	d115      	bne.n	8005794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800576e:	4013      	ands	r3, r2
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005774:	4293      	cmp	r3, r2
 8005776:	d10d      	bne.n	8005794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d106      	bne.n	8005794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40007000 	.word	0x40007000
 80057a8:	40023800 	.word	0x40023800
 80057ac:	42470060 	.word	0x42470060

080057b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0cc      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c4:	4b68      	ldr	r3, [pc, #416]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d90c      	bls.n	80057ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b63      	ldr	r3, [pc, #396]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0b8      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005804:	4b59      	ldr	r3, [pc, #356]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4a58      	ldr	r2, [pc, #352]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800580e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800581c:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a52      	ldr	r2, [pc, #328]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b50      	ldr	r3, [pc, #320]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	494d      	ldr	r1, [pc, #308]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d044      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d119      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e07f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d003      	beq.n	800586e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586a:	2b03      	cmp	r3, #3
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586e:	4b3f      	ldr	r3, [pc, #252]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e06f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587e:	4b3b      	ldr	r3, [pc, #236]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e067      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588e:	4b37      	ldr	r3, [pc, #220]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4934      	ldr	r1, [pc, #208]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a0:	f7fd f8dc 	bl	8002a5c <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a6:	e00a      	b.n	80058be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a8:	f7fd f8d8 	bl	8002a5c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e04f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	4b2b      	ldr	r3, [pc, #172]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 020c 	and.w	r2, r3, #12
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d1eb      	bne.n	80058a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d20c      	bcs.n	80058f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e032      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4916      	ldr	r1, [pc, #88]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	490e      	ldr	r1, [pc, #56]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005936:	f000 f821 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800593a:	4601      	mov	r1, r0
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	5cd3      	ldrb	r3, [r2, r3]
 800594a:	fa21 f303 	lsr.w	r3, r1, r3
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_ClockConfig+0x1c8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb fd50 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023c00 	.word	0x40023c00
 800596c:	40023800 	.word	0x40023800
 8005970:	0801e460 	.word	0x0801e460
 8005974:	20000004 	.word	0x20000004
 8005978:	20000070 	.word	0x20000070

0800597c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	2300      	movs	r3, #0
 800598c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005992:	4b63      	ldr	r3, [pc, #396]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b04      	cmp	r3, #4
 800599c:	d007      	beq.n	80059ae <HAL_RCC_GetSysClockFreq+0x32>
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d008      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x38>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 80b4 	bne.w	8005b10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059a8:	4b5e      	ldr	r3, [pc, #376]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059aa:	60bb      	str	r3, [r7, #8]
       break;
 80059ac:	e0b3      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ae:	4b5e      	ldr	r3, [pc, #376]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80059b0:	60bb      	str	r3, [r7, #8]
      break;
 80059b2:	e0b0      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b4:	4b5a      	ldr	r3, [pc, #360]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059be:	4b58      	ldr	r3, [pc, #352]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d04a      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ca:	4b55      	ldr	r3, [pc, #340]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	099b      	lsrs	r3, r3, #6
 80059d0:	f04f 0400 	mov.w	r4, #0
 80059d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	ea03 0501 	and.w	r5, r3, r1
 80059e0:	ea04 0602 	and.w	r6, r4, r2
 80059e4:	4629      	mov	r1, r5
 80059e6:	4632      	mov	r2, r6
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	0154      	lsls	r4, r2, #5
 80059f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059f6:	014b      	lsls	r3, r1, #5
 80059f8:	4619      	mov	r1, r3
 80059fa:	4622      	mov	r2, r4
 80059fc:	1b49      	subs	r1, r1, r5
 80059fe:	eb62 0206 	sbc.w	r2, r2, r6
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	f04f 0400 	mov.w	r4, #0
 8005a0a:	0194      	lsls	r4, r2, #6
 8005a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a10:	018b      	lsls	r3, r1, #6
 8005a12:	1a5b      	subs	r3, r3, r1
 8005a14:	eb64 0402 	sbc.w	r4, r4, r2
 8005a18:	f04f 0100 	mov.w	r1, #0
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	00e2      	lsls	r2, r4, #3
 8005a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a26:	00d9      	lsls	r1, r3, #3
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4614      	mov	r4, r2
 8005a2c:	195b      	adds	r3, r3, r5
 8005a2e:	eb44 0406 	adc.w	r4, r4, r6
 8005a32:	f04f 0100 	mov.w	r1, #0
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	0262      	lsls	r2, r4, #9
 8005a3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a40:	0259      	lsls	r1, r3, #9
 8005a42:	460b      	mov	r3, r1
 8005a44:	4614      	mov	r4, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	4621      	mov	r1, r4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f04f 0400 	mov.w	r4, #0
 8005a50:	461a      	mov	r2, r3
 8005a52:	4623      	mov	r3, r4
 8005a54:	f7fa fc1c 	bl	8000290 <__aeabi_uldivmod>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e049      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a60:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	f04f 0400 	mov.w	r4, #0
 8005a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	ea03 0501 	and.w	r5, r3, r1
 8005a76:	ea04 0602 	and.w	r6, r4, r2
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	f04f 0300 	mov.w	r3, #0
 8005a82:	f04f 0400 	mov.w	r4, #0
 8005a86:	0154      	lsls	r4, r2, #5
 8005a88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a8c:	014b      	lsls	r3, r1, #5
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4622      	mov	r2, r4
 8005a92:	1b49      	subs	r1, r1, r5
 8005a94:	eb62 0206 	sbc.w	r2, r2, r6
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	f04f 0400 	mov.w	r4, #0
 8005aa0:	0194      	lsls	r4, r2, #6
 8005aa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005aa6:	018b      	lsls	r3, r1, #6
 8005aa8:	1a5b      	subs	r3, r3, r1
 8005aaa:	eb64 0402 	sbc.w	r4, r4, r2
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	00e2      	lsls	r2, r4, #3
 8005ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005abc:	00d9      	lsls	r1, r3, #3
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	195b      	adds	r3, r3, r5
 8005ac4:	eb44 0406 	adc.w	r4, r4, r6
 8005ac8:	f04f 0100 	mov.w	r1, #0
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	02a2      	lsls	r2, r4, #10
 8005ad2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ad6:	0299      	lsls	r1, r3, #10
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4614      	mov	r4, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	4621      	mov	r1, r4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f04f 0400 	mov.w	r4, #0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4623      	mov	r3, r4
 8005aea:	f7fa fbd1 	bl	8000290 <__aeabi_uldivmod>
 8005aee:	4603      	mov	r3, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	3301      	adds	r3, #1
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	60bb      	str	r3, [r7, #8]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b12:	60bb      	str	r3, [r7, #8]
      break;
 8005b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b16:	68bb      	ldr	r3, [r7, #8]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b20:	40023800 	.word	0x40023800
 8005b24:	00f42400 	.word	0x00f42400
 8005b28:	007a1200 	.word	0x007a1200

08005b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000004 	.word	0x20000004

08005b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b48:	f7ff fff0 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0a9b      	lsrs	r3, r3, #10
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4a03      	ldr	r2, [pc, #12]	; (8005b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40023800 	.word	0x40023800
 8005b68:	0801e470 	.word	0x0801e470

08005b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b70:	f7ff ffdc 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b74:	4601      	mov	r1, r0
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	0b5b      	lsrs	r3, r3, #13
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	4a03      	ldr	r2, [pc, #12]	; (8005b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	0801e470 	.word	0x0801e470

08005b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ba4:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0203 	and.w	r2, r3, #3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	08db      	lsrs	r3, r3, #3
 8005bce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <HAL_RCC_GetClockConfig+0x60>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40023c00 	.word	0x40023c00

08005bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d075      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c2c:	4bad      	ldr	r3, [pc, #692]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c32:	f7fc ff13 	bl	8002a5c <HAL_GetTick>
 8005c36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c38:	e008      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c3a:	f7fc ff0f 	bl	8002a5c <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e18b      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c4c:	4ba6      	ldr	r3, [pc, #664]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f0      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	019a      	lsls	r2, r3, #6
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	071b      	lsls	r3, r3, #28
 8005c70:	499d      	ldr	r1, [pc, #628]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01f      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c84:	4b98      	ldr	r3, [pc, #608]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c8a:	0f1b      	lsrs	r3, r3, #28
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	019a      	lsls	r2, r3, #6
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	071b      	lsls	r3, r3, #28
 8005ca4:	4990      	ldr	r1, [pc, #576]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005cac:	4b8e      	ldr	r3, [pc, #568]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb2:	f023 021f 	bic.w	r2, r3, #31
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	498a      	ldr	r1, [pc, #552]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00d      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	019a      	lsls	r2, r3, #6
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	071b      	lsls	r3, r3, #28
 8005ce4:	4980      	ldr	r1, [pc, #512]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cec:	4b7d      	ldr	r3, [pc, #500]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005cee:	2201      	movs	r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf2:	f7fc feb3 	bl	8002a5c <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cfa:	f7fc feaf 	bl	8002a5c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e12b      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d0c:	4b76      	ldr	r3, [pc, #472]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d079      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d30:	4b6e      	ldr	r3, [pc, #440]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d36:	f7fc fe91 	bl	8002a5c <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d3e:	f7fc fe8d 	bl	8002a5c <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e109      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d50:	4b65      	ldr	r3, [pc, #404]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5c:	d0ef      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d020      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	0f1b      	lsrs	r3, r3, #28
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	019a      	lsls	r2, r3, #6
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	061b      	lsls	r3, r3, #24
 8005d84:	431a      	orrs	r2, r3
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	071b      	lsls	r3, r3, #28
 8005d8a:	4957      	ldr	r1, [pc, #348]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d92:	4b55      	ldr	r3, [pc, #340]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	4950      	ldr	r1, [pc, #320]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01e      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005db8:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	0e1b      	lsrs	r3, r3, #24
 8005dc0:	f003 030f 	and.w	r3, r3, #15
 8005dc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	019a      	lsls	r2, r3, #6
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	061b      	lsls	r3, r3, #24
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	071b      	lsls	r3, r3, #28
 8005dd8:	4943      	ldr	r1, [pc, #268]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005de0:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	493e      	ldr	r1, [pc, #248]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005df6:	4b3d      	ldr	r3, [pc, #244]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dfc:	f7fc fe2e 	bl	8002a5c <HAL_GetTick>
 8005e00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e04:	f7fc fe2a 	bl	8002a5c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0a6      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e16:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e22:	d1ef      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 808d 	beq.w	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e40:	6413      	str	r3, [r2, #64]	; 0x40
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e4e:	4b28      	ldr	r3, [pc, #160]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e5a:	f7fc fdff 	bl	8002a5c <HAL_GetTick>
 8005e5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e62:	f7fc fdfb 	bl	8002a5c <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e077      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e74:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e80:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d039      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d032      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eae:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005eb4:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d11e      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ec6:	f7fc fdc9 	bl	8002a5c <HAL_GetTick>
 8005eca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ecc:	e014      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ece:	f7fc fdc5 	bl	8002a5c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d90b      	bls.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e03f      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005ee4:	42470068 	.word	0x42470068
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	42470070 	.word	0x42470070
 8005ef0:	40007000 	.word	0x40007000
 8005ef4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0e4      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f10:	d10d      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005f12:	4b16      	ldr	r3, [pc, #88]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	4911      	ldr	r1, [pc, #68]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]
 8005f2c:	e005      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f38:	6093      	str	r3, [r2, #8]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f46:	4909      	ldr	r1, [pc, #36]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	424711e0 	.word	0x424711e0

08005f74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e025      	b.n	8005fd4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fa fc83 	bl	80008a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f001 fd65 	bl	8007a84 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	f001 fdd0 	bl	8007b6a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e056      	b.n	800609c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb f965 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	ea42 0103 	orr.w	r1, r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	0c1b      	lsrs	r3, r3, #16
 800606c:	f003 0104 	and.w	r1, r3, #4
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800608a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e01a      	b.n	80060ec <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fb f94a 	bl	8001368 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_SPI_Transmit+0x22>
 8006112:	2302      	movs	r3, #2
 8006114:	e11e      	b.n	8006354 <HAL_SPI_Transmit+0x260>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800611e:	f7fc fc9d 	bl	8002a5c <HAL_GetTick>
 8006122:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d002      	beq.n	800613a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006134:	2302      	movs	r3, #2
 8006136:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006138:	e103      	b.n	8006342 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_SPI_Transmit+0x52>
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800614a:	e0fa      	b.n	8006342 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2203      	movs	r2, #3
 8006150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	88fa      	ldrh	r2, [r7, #6]
 800616a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006192:	d107      	bne.n	80061a4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d007      	beq.n	80061c2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ca:	d14b      	bne.n	8006264 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit+0xe6>
 80061d4:	8afb      	ldrh	r3, [r7, #22]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d13e      	bne.n	8006258 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061fe:	e02b      	b.n	8006258 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d112      	bne.n	8006234 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	86da      	strh	r2, [r3, #54]	; 0x36
 8006232:	e011      	b.n	8006258 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006234:	f7fc fc12 	bl	8002a5c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d803      	bhi.n	800624c <HAL_SPI_Transmit+0x158>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d102      	bne.n	8006252 <HAL_SPI_Transmit+0x15e>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006256:	e074      	b.n	8006342 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ce      	bne.n	8006200 <HAL_SPI_Transmit+0x10c>
 8006262:	e04c      	b.n	80062fe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_SPI_Transmit+0x17e>
 800626c:	8afb      	ldrh	r3, [r7, #22]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d140      	bne.n	80062f4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	7812      	ldrb	r2, [r2, #0]
 800627e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006298:	e02c      	b.n	80062f4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d113      	bne.n	80062d0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80062ce:	e011      	b.n	80062f4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d0:	f7fc fbc4 	bl	8002a5c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d803      	bhi.n	80062e8 <HAL_SPI_Transmit+0x1f4>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d102      	bne.n	80062ee <HAL_SPI_Transmit+0x1fa>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062f2:	e026      	b.n	8006342 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1cd      	bne.n	800629a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fbb2 	bl	8006a6c <SPI_EndRxTxTransaction>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e000      	b.n	8006342 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006340:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006352:	7ffb      	ldrb	r3, [r7, #31]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006378:	d112      	bne.n	80063a0 <HAL_SPI_Receive+0x44>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10e      	bne.n	80063a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2204      	movs	r2, #4
 8006386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f8e9 	bl	800656e <HAL_SPI_TransmitReceive>
 800639c:	4603      	mov	r3, r0
 800639e:	e0e2      	b.n	8006566 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_SPI_Receive+0x52>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e0db      	b.n	8006566 <HAL_SPI_Receive+0x20a>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b6:	f7fc fb51 	bl	8002a5c <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d002      	beq.n	80063ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
 80063ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063cc:	e0c2      	b.n	8006554 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_Receive+0x7e>
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d102      	bne.n	80063e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063de:	e0b9      	b.n	8006554 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2204      	movs	r2, #4
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d107      	bne.n	8006438 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006436:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d007      	beq.n	8006456 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006454:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d162      	bne.n	8006524 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800645e:	e02e      	b.n	80064be <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d115      	bne.n	800649a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f103 020c 	add.w	r2, r3, #12
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006498:	e011      	b.n	80064be <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649a:	f7fc fadf 	bl	8002a5c <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d803      	bhi.n	80064b2 <HAL_SPI_Receive+0x156>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Receive+0x15c>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064bc:	e04a      	b.n	8006554 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1cb      	bne.n	8006460 <HAL_SPI_Receive+0x104>
 80064c8:	e031      	b.n	800652e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d113      	bne.n	8006500 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	b292      	uxth	r2, r2
 80064e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064fe:	e011      	b.n	8006524 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006500:	f7fc faac 	bl	8002a5c <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d803      	bhi.n	8006518 <HAL_SPI_Receive+0x1bc>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d102      	bne.n	800651e <HAL_SPI_Receive+0x1c2>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006522:	e017      	b.n	8006554 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1cd      	bne.n	80064ca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fa35 	bl	80069a2 <SPI_EndRxTransaction>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
 8006550:	e000      	b.n	8006554 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006552:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b08c      	sub	sp, #48	; 0x30
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800657c:	2301      	movs	r3, #1
 800657e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x26>
 8006590:	2302      	movs	r3, #2
 8006592:	e18a      	b.n	80068aa <HAL_SPI_TransmitReceive+0x33c>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800659c:	f7fc fa5e 	bl	8002a5c <HAL_GetTick>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065b2:	887b      	ldrh	r3, [r7, #2]
 80065b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00f      	beq.n	80065de <HAL_SPI_TransmitReceive+0x70>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c4:	d107      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x68>
 80065ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d003      	beq.n	80065de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065d6:	2302      	movs	r3, #2
 80065d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065dc:	e15b      	b.n	8006896 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x82>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x82>
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d103      	bne.n	80065f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065f6:	e14e      	b.n	8006896 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b04      	cmp	r3, #4
 8006602:	d003      	beq.n	800660c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2205      	movs	r2, #5
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	887a      	ldrh	r2, [r7, #2]
 8006622:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	887a      	ldrh	r2, [r7, #2]
 800662e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	887a      	ldrh	r2, [r7, #2]
 8006634:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d007      	beq.n	8006660 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d178      	bne.n	800675c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x10a>
 8006672:	8b7b      	ldrh	r3, [r7, #26]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d166      	bne.n	8006746 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800669c:	e053      	b.n	8006746 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11b      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x176>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x176>
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d113      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	881a      	ldrh	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d119      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x1b8>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d014      	beq.n	8006726 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	b292      	uxth	r2, r2
 8006708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	1c9a      	adds	r2, r3, #2
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006722:	2301      	movs	r3, #1
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006726:	f7fc f999 	bl	8002a5c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006732:	429a      	cmp	r2, r3
 8006734:	d807      	bhi.n	8006746 <HAL_SPI_TransmitReceive+0x1d8>
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d003      	beq.n	8006746 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006744:	e0a7      	b.n	8006896 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1a6      	bne.n	800669e <HAL_SPI_TransmitReceive+0x130>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1a1      	bne.n	800669e <HAL_SPI_TransmitReceive+0x130>
 800675a:	e07c      	b.n	8006856 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_SPI_TransmitReceive+0x1fc>
 8006764:	8b7b      	ldrh	r3, [r7, #26]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d16b      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	330c      	adds	r3, #12
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006790:	e057      	b.n	8006842 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d11c      	bne.n	80067da <HAL_SPI_TransmitReceive+0x26c>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d017      	beq.n	80067da <HAL_SPI_TransmitReceive+0x26c>
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d114      	bne.n	80067da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d119      	bne.n	800681c <HAL_SPI_TransmitReceive+0x2ae>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d014      	beq.n	800681c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006818:	2301      	movs	r3, #1
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800681c:	f7fc f91e 	bl	8002a5c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006828:	429a      	cmp	r2, r3
 800682a:	d803      	bhi.n	8006834 <HAL_SPI_TransmitReceive+0x2c6>
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d102      	bne.n	800683a <HAL_SPI_TransmitReceive+0x2cc>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006840:	e029      	b.n	8006896 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1a2      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x224>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d19d      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f906 	bl	8006a6c <SPI_EndRxTxTransaction>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d006      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006872:	e010      	b.n	8006896 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	e000      	b.n	8006896 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006894:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3730      	adds	r7, #48	; 0x30
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c0:	b2db      	uxtb	r3, r3
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	4613      	mov	r3, r2
 80068dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068de:	e04c      	b.n	800697a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d048      	beq.n	800697a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80068e8:	f7fc f8b8 	bl	8002a5c <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d902      	bls.n	80068fe <SPI_WaitFlagStateUntilTimeout+0x30>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d13d      	bne.n	800697a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800690c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006916:	d111      	bne.n	800693c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006920:	d004      	beq.n	800692c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692a:	d107      	bne.n	800693c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006944:	d10f      	bne.n	8006966 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d1a3      	bne.n	80068e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b6:	d111      	bne.n	80069dc <SPI_EndRxTransaction+0x3a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c0:	d004      	beq.n	80069cc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ca:	d107      	bne.n	80069dc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e4:	d12a      	bne.n	8006a3c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ee:	d012      	beq.n	8006a16 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	2180      	movs	r1, #128	; 0x80
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff ff67 	bl	80068ce <SPI_WaitFlagStateUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02d      	beq.n	8006a62 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e026      	b.n	8006a64 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2101      	movs	r1, #1
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff ff54 	bl	80068ce <SPI_WaitFlagStateUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01a      	beq.n	8006a62 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e013      	b.n	8006a64 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2101      	movs	r1, #1
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff ff41 	bl	80068ce <SPI_WaitFlagStateUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e000      	b.n	8006a64 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a78:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <SPI_EndRxTxTransaction+0x7c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <SPI_EndRxTxTransaction+0x80>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	0d5b      	lsrs	r3, r3, #21
 8006a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a88:	fb02 f303 	mul.w	r3, r2, r3
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a96:	d112      	bne.n	8006abe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2180      	movs	r1, #128	; 0x80
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff ff13 	bl	80068ce <SPI_WaitFlagStateUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	f043 0220 	orr.w	r2, r3, #32
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e00f      	b.n	8006ade <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d0f2      	beq.n	8006abe <SPI_EndRxTxTransaction+0x52>
 8006ad8:	e000      	b.n	8006adc <SPI_EndRxTxTransaction+0x70>
        break;
 8006ada:	bf00      	nop
  }

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000004 	.word	0x20000004
 8006aec:	165e9f81 	.word	0x165e9f81

08006af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e01d      	b.n	8006b3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fa fe24 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f000 fa14 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b06      	cmp	r3, #6
 8006b6e:	d007      	beq.n	8006b80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d122      	bne.n	8006bea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d11b      	bne.n	8006bea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f06f 0202 	mvn.w	r2, #2
 8006bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f9a5 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006bd6:	e005      	b.n	8006be4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f997 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f9a8 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d122      	bne.n	8006c3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d11b      	bne.n	8006c3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f06f 0204 	mvn.w	r2, #4
 8006c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f97b 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006c2a:	e005      	b.n	8006c38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f96d 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f97e 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d122      	bne.n	8006c92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d11b      	bne.n	8006c92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f06f 0208 	mvn.w	r2, #8
 8006c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2204      	movs	r2, #4
 8006c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f951 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006c7e:	e005      	b.n	8006c8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f943 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f954 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d122      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	2b10      	cmp	r3, #16
 8006cac:	d11b      	bne.n	8006ce6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f06f 0210 	mvn.w	r2, #16
 8006cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2208      	movs	r2, #8
 8006cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f927 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006cd2:	e005      	b.n	8006ce0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f919 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f92a 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d10e      	bne.n	8006d12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d107      	bne.n	8006d12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f06f 0201 	mvn.w	r2, #1
 8006d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fa fa93 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b80      	cmp	r3, #128	; 0x80
 8006d1e:	d10e      	bne.n	8006d3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d107      	bne.n	8006d3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 facf 	bl	80072dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d10e      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d107      	bne.n	8006d6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8ef 	bl	8006f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d10e      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f06f 0220 	mvn.w	r2, #32
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa99 	bl	80072c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_TIM_ConfigClockSource+0x18>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e0a6      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x166>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dd4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ddc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d067      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x120>
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d80b      	bhi.n	8006e0a <HAL_TIM_ConfigClockSource+0x6c>
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d073      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x140>
 8006df6:	2b10      	cmp	r3, #16
 8006df8:	d802      	bhi.n	8006e00 <HAL_TIM_ConfigClockSource+0x62>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d06f      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006dfe:	e078      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d06c      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x140>
 8006e04:	2b30      	cmp	r3, #48	; 0x30
 8006e06:	d06a      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006e08:	e073      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e0a:	2b70      	cmp	r3, #112	; 0x70
 8006e0c:	d00d      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x8c>
 8006e0e:	2b70      	cmp	r3, #112	; 0x70
 8006e10:	d804      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x7e>
 8006e12:	2b50      	cmp	r3, #80	; 0x50
 8006e14:	d033      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0xe0>
 8006e16:	2b60      	cmp	r3, #96	; 0x60
 8006e18:	d041      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e1a:	e06a      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d066      	beq.n	8006ef0 <HAL_TIM_ConfigClockSource+0x152>
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d017      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e28:	e063      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6899      	ldr	r1, [r3, #8]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f000 f9a9 	bl	8007190 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	609a      	str	r2, [r3, #8]
      break;
 8006e56:	e04c      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f000 f992 	bl	8007190 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e7a:	609a      	str	r2, [r3, #8]
      break;
 8006e7c:	e039      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f000 f906 	bl	800709c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2150      	movs	r1, #80	; 0x50
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f95f 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006e9c:	e029      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6859      	ldr	r1, [r3, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f000 f925 	bl	80070fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2160      	movs	r1, #96	; 0x60
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f94f 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006ebc:	e019      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6859      	ldr	r1, [r3, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f000 f8e6 	bl	800709c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2140      	movs	r1, #64	; 0x40
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f93f 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006edc:	e009      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4610      	mov	r0, r2
 8006eea:	f000 f936 	bl	800715a <TIM_ITRx_SetConfig>
      break;
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7a:	d00f      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3d      	ldr	r2, [pc, #244]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3c      	ldr	r2, [pc, #240]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3b      	ldr	r2, [pc, #236]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3a      	ldr	r2, [pc, #232]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d02b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d027      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d023      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d017      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a28      	ldr	r2, [pc, #160]	; (8007084 <TIM_Base_SetConfig+0x128>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a27      	ldr	r2, [pc, #156]	; (8007088 <TIM_Base_SetConfig+0x12c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	; (800708c <TIM_Base_SetConfig+0x130>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	; (8007090 <TIM_Base_SetConfig+0x134>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d007      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a24      	ldr	r2, [pc, #144]	; (8007094 <TIM_Base_SetConfig+0x138>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <TIM_Base_SetConfig+0x13c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d108      	bne.n	8007020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40010400 	.word	0x40010400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	40001800 	.word	0x40001800
 8007094:	40001c00 	.word	0x40001c00
 8007098:	40002000 	.word	0x40002000

0800709c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f023 030a 	bic.w	r3, r3, #10
 80070d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f023 0210 	bic.w	r2, r3, #16
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	031b      	lsls	r3, r3, #12
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007136:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	f043 0307 	orr.w	r3, r3, #7
 800717c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	609a      	str	r2, [r3, #8]
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	021a      	lsls	r2, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	609a      	str	r2, [r3, #8]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e05a      	b.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a21      	ldr	r2, [pc, #132]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d022      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d01d      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d018      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1b      	ldr	r2, [pc, #108]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1a      	ldr	r2, [pc, #104]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00e      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a18      	ldr	r2, [pc, #96]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d009      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a17      	ldr	r2, [pc, #92]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d004      	beq.n	8007272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d10c      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4313      	orrs	r3, r2
 8007282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40001800 	.word	0x40001800

080072c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e03f      	b.n	8007382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fa fa70 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2224      	movs	r2, #36	; 0x24
 8007320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f829 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80073ce:	f023 030c 	bic.w	r3, r3, #12
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6812      	ldr	r2, [r2, #0]
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	430b      	orrs	r3, r1
 80073da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fa:	f040 818b 	bne.w	8007714 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4ac1      	ldr	r2, [pc, #772]	; (8007708 <UART_SetConfig+0x37c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d005      	beq.n	8007414 <UART_SetConfig+0x88>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4abf      	ldr	r2, [pc, #764]	; (800770c <UART_SetConfig+0x380>)
 800740e:	4293      	cmp	r3, r2
 8007410:	f040 80bd 	bne.w	800758e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fe fbaa 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 8007418:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	461d      	mov	r5, r3
 800741e:	f04f 0600 	mov.w	r6, #0
 8007422:	46a8      	mov	r8, r5
 8007424:	46b1      	mov	r9, r6
 8007426:	eb18 0308 	adds.w	r3, r8, r8
 800742a:	eb49 0409 	adc.w	r4, r9, r9
 800742e:	4698      	mov	r8, r3
 8007430:	46a1      	mov	r9, r4
 8007432:	eb18 0805 	adds.w	r8, r8, r5
 8007436:	eb49 0906 	adc.w	r9, r9, r6
 800743a:	f04f 0100 	mov.w	r1, #0
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007446:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800744a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800744e:	4688      	mov	r8, r1
 8007450:	4691      	mov	r9, r2
 8007452:	eb18 0005 	adds.w	r0, r8, r5
 8007456:	eb49 0106 	adc.w	r1, r9, r6
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	461d      	mov	r5, r3
 8007460:	f04f 0600 	mov.w	r6, #0
 8007464:	196b      	adds	r3, r5, r5
 8007466:	eb46 0406 	adc.w	r4, r6, r6
 800746a:	461a      	mov	r2, r3
 800746c:	4623      	mov	r3, r4
 800746e:	f7f8 ff0f 	bl	8000290 <__aeabi_uldivmod>
 8007472:	4603      	mov	r3, r0
 8007474:	460c      	mov	r4, r1
 8007476:	461a      	mov	r2, r3
 8007478:	4ba5      	ldr	r3, [pc, #660]	; (8007710 <UART_SetConfig+0x384>)
 800747a:	fba3 2302 	umull	r2, r3, r3, r2
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	461d      	mov	r5, r3
 8007488:	f04f 0600 	mov.w	r6, #0
 800748c:	46a9      	mov	r9, r5
 800748e:	46b2      	mov	sl, r6
 8007490:	eb19 0309 	adds.w	r3, r9, r9
 8007494:	eb4a 040a 	adc.w	r4, sl, sl
 8007498:	4699      	mov	r9, r3
 800749a:	46a2      	mov	sl, r4
 800749c:	eb19 0905 	adds.w	r9, r9, r5
 80074a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80074a4:	f04f 0100 	mov.w	r1, #0
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074b8:	4689      	mov	r9, r1
 80074ba:	4692      	mov	sl, r2
 80074bc:	eb19 0005 	adds.w	r0, r9, r5
 80074c0:	eb4a 0106 	adc.w	r1, sl, r6
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	461d      	mov	r5, r3
 80074ca:	f04f 0600 	mov.w	r6, #0
 80074ce:	196b      	adds	r3, r5, r5
 80074d0:	eb46 0406 	adc.w	r4, r6, r6
 80074d4:	461a      	mov	r2, r3
 80074d6:	4623      	mov	r3, r4
 80074d8:	f7f8 feda 	bl	8000290 <__aeabi_uldivmod>
 80074dc:	4603      	mov	r3, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	461a      	mov	r2, r3
 80074e2:	4b8b      	ldr	r3, [pc, #556]	; (8007710 <UART_SetConfig+0x384>)
 80074e4:	fba3 1302 	umull	r1, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	2164      	movs	r1, #100	; 0x64
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3332      	adds	r3, #50	; 0x32
 80074f6:	4a86      	ldr	r2, [pc, #536]	; (8007710 <UART_SetConfig+0x384>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007504:	4498      	add	r8, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	461d      	mov	r5, r3
 800750a:	f04f 0600 	mov.w	r6, #0
 800750e:	46a9      	mov	r9, r5
 8007510:	46b2      	mov	sl, r6
 8007512:	eb19 0309 	adds.w	r3, r9, r9
 8007516:	eb4a 040a 	adc.w	r4, sl, sl
 800751a:	4699      	mov	r9, r3
 800751c:	46a2      	mov	sl, r4
 800751e:	eb19 0905 	adds.w	r9, r9, r5
 8007522:	eb4a 0a06 	adc.w	sl, sl, r6
 8007526:	f04f 0100 	mov.w	r1, #0
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800753a:	4689      	mov	r9, r1
 800753c:	4692      	mov	sl, r2
 800753e:	eb19 0005 	adds.w	r0, r9, r5
 8007542:	eb4a 0106 	adc.w	r1, sl, r6
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	461d      	mov	r5, r3
 800754c:	f04f 0600 	mov.w	r6, #0
 8007550:	196b      	adds	r3, r5, r5
 8007552:	eb46 0406 	adc.w	r4, r6, r6
 8007556:	461a      	mov	r2, r3
 8007558:	4623      	mov	r3, r4
 800755a:	f7f8 fe99 	bl	8000290 <__aeabi_uldivmod>
 800755e:	4603      	mov	r3, r0
 8007560:	460c      	mov	r4, r1
 8007562:	461a      	mov	r2, r3
 8007564:	4b6a      	ldr	r3, [pc, #424]	; (8007710 <UART_SetConfig+0x384>)
 8007566:	fba3 1302 	umull	r1, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2164      	movs	r1, #100	; 0x64
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	3332      	adds	r3, #50	; 0x32
 8007578:	4a65      	ldr	r2, [pc, #404]	; (8007710 <UART_SetConfig+0x384>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	f003 0207 	and.w	r2, r3, #7
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4442      	add	r2, r8
 800758a:	609a      	str	r2, [r3, #8]
 800758c:	e26f      	b.n	8007a6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800758e:	f7fe fad9 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8007592:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	461d      	mov	r5, r3
 8007598:	f04f 0600 	mov.w	r6, #0
 800759c:	46a8      	mov	r8, r5
 800759e:	46b1      	mov	r9, r6
 80075a0:	eb18 0308 	adds.w	r3, r8, r8
 80075a4:	eb49 0409 	adc.w	r4, r9, r9
 80075a8:	4698      	mov	r8, r3
 80075aa:	46a1      	mov	r9, r4
 80075ac:	eb18 0805 	adds.w	r8, r8, r5
 80075b0:	eb49 0906 	adc.w	r9, r9, r6
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075c8:	4688      	mov	r8, r1
 80075ca:	4691      	mov	r9, r2
 80075cc:	eb18 0005 	adds.w	r0, r8, r5
 80075d0:	eb49 0106 	adc.w	r1, r9, r6
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	461d      	mov	r5, r3
 80075da:	f04f 0600 	mov.w	r6, #0
 80075de:	196b      	adds	r3, r5, r5
 80075e0:	eb46 0406 	adc.w	r4, r6, r6
 80075e4:	461a      	mov	r2, r3
 80075e6:	4623      	mov	r3, r4
 80075e8:	f7f8 fe52 	bl	8000290 <__aeabi_uldivmod>
 80075ec:	4603      	mov	r3, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	461a      	mov	r2, r3
 80075f2:	4b47      	ldr	r3, [pc, #284]	; (8007710 <UART_SetConfig+0x384>)
 80075f4:	fba3 2302 	umull	r2, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	461d      	mov	r5, r3
 8007602:	f04f 0600 	mov.w	r6, #0
 8007606:	46a9      	mov	r9, r5
 8007608:	46b2      	mov	sl, r6
 800760a:	eb19 0309 	adds.w	r3, r9, r9
 800760e:	eb4a 040a 	adc.w	r4, sl, sl
 8007612:	4699      	mov	r9, r3
 8007614:	46a2      	mov	sl, r4
 8007616:	eb19 0905 	adds.w	r9, r9, r5
 800761a:	eb4a 0a06 	adc.w	sl, sl, r6
 800761e:	f04f 0100 	mov.w	r1, #0
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800762a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800762e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007632:	4689      	mov	r9, r1
 8007634:	4692      	mov	sl, r2
 8007636:	eb19 0005 	adds.w	r0, r9, r5
 800763a:	eb4a 0106 	adc.w	r1, sl, r6
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	461d      	mov	r5, r3
 8007644:	f04f 0600 	mov.w	r6, #0
 8007648:	196b      	adds	r3, r5, r5
 800764a:	eb46 0406 	adc.w	r4, r6, r6
 800764e:	461a      	mov	r2, r3
 8007650:	4623      	mov	r3, r4
 8007652:	f7f8 fe1d 	bl	8000290 <__aeabi_uldivmod>
 8007656:	4603      	mov	r3, r0
 8007658:	460c      	mov	r4, r1
 800765a:	461a      	mov	r2, r3
 800765c:	4b2c      	ldr	r3, [pc, #176]	; (8007710 <UART_SetConfig+0x384>)
 800765e:	fba3 1302 	umull	r1, r3, r3, r2
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	2164      	movs	r1, #100	; 0x64
 8007666:	fb01 f303 	mul.w	r3, r1, r3
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	3332      	adds	r3, #50	; 0x32
 8007670:	4a27      	ldr	r2, [pc, #156]	; (8007710 <UART_SetConfig+0x384>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800767e:	4498      	add	r8, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	461d      	mov	r5, r3
 8007684:	f04f 0600 	mov.w	r6, #0
 8007688:	46a9      	mov	r9, r5
 800768a:	46b2      	mov	sl, r6
 800768c:	eb19 0309 	adds.w	r3, r9, r9
 8007690:	eb4a 040a 	adc.w	r4, sl, sl
 8007694:	4699      	mov	r9, r3
 8007696:	46a2      	mov	sl, r4
 8007698:	eb19 0905 	adds.w	r9, r9, r5
 800769c:	eb4a 0a06 	adc.w	sl, sl, r6
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076b4:	4689      	mov	r9, r1
 80076b6:	4692      	mov	sl, r2
 80076b8:	eb19 0005 	adds.w	r0, r9, r5
 80076bc:	eb4a 0106 	adc.w	r1, sl, r6
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	461d      	mov	r5, r3
 80076c6:	f04f 0600 	mov.w	r6, #0
 80076ca:	196b      	adds	r3, r5, r5
 80076cc:	eb46 0406 	adc.w	r4, r6, r6
 80076d0:	461a      	mov	r2, r3
 80076d2:	4623      	mov	r3, r4
 80076d4:	f7f8 fddc 	bl	8000290 <__aeabi_uldivmod>
 80076d8:	4603      	mov	r3, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	461a      	mov	r2, r3
 80076de:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <UART_SetConfig+0x384>)
 80076e0:	fba3 1302 	umull	r1, r3, r3, r2
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	2164      	movs	r1, #100	; 0x64
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	3332      	adds	r3, #50	; 0x32
 80076f2:	4a07      	ldr	r2, [pc, #28]	; (8007710 <UART_SetConfig+0x384>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	f003 0207 	and.w	r2, r3, #7
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4442      	add	r2, r8
 8007704:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007706:	e1b2      	b.n	8007a6e <UART_SetConfig+0x6e2>
 8007708:	40011000 	.word	0x40011000
 800770c:	40011400 	.word	0x40011400
 8007710:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4ad7      	ldr	r2, [pc, #860]	; (8007a78 <UART_SetConfig+0x6ec>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d005      	beq.n	800772a <UART_SetConfig+0x39e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4ad6      	ldr	r2, [pc, #856]	; (8007a7c <UART_SetConfig+0x6f0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	f040 80d1 	bne.w	80078cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800772a:	f7fe fa1f 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 800772e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	469a      	mov	sl, r3
 8007734:	f04f 0b00 	mov.w	fp, #0
 8007738:	46d0      	mov	r8, sl
 800773a:	46d9      	mov	r9, fp
 800773c:	eb18 0308 	adds.w	r3, r8, r8
 8007740:	eb49 0409 	adc.w	r4, r9, r9
 8007744:	4698      	mov	r8, r3
 8007746:	46a1      	mov	r9, r4
 8007748:	eb18 080a 	adds.w	r8, r8, sl
 800774c:	eb49 090b 	adc.w	r9, r9, fp
 8007750:	f04f 0100 	mov.w	r1, #0
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800775c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007760:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007764:	4688      	mov	r8, r1
 8007766:	4691      	mov	r9, r2
 8007768:	eb1a 0508 	adds.w	r5, sl, r8
 800776c:	eb4b 0609 	adc.w	r6, fp, r9
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	4619      	mov	r1, r3
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	0094      	lsls	r4, r2, #2
 8007784:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007788:	008b      	lsls	r3, r1, #2
 800778a:	461a      	mov	r2, r3
 800778c:	4623      	mov	r3, r4
 800778e:	4628      	mov	r0, r5
 8007790:	4631      	mov	r1, r6
 8007792:	f7f8 fd7d 	bl	8000290 <__aeabi_uldivmod>
 8007796:	4603      	mov	r3, r0
 8007798:	460c      	mov	r4, r1
 800779a:	461a      	mov	r2, r3
 800779c:	4bb8      	ldr	r3, [pc, #736]	; (8007a80 <UART_SetConfig+0x6f4>)
 800779e:	fba3 2302 	umull	r2, r3, r3, r2
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	469b      	mov	fp, r3
 80077ac:	f04f 0c00 	mov.w	ip, #0
 80077b0:	46d9      	mov	r9, fp
 80077b2:	46e2      	mov	sl, ip
 80077b4:	eb19 0309 	adds.w	r3, r9, r9
 80077b8:	eb4a 040a 	adc.w	r4, sl, sl
 80077bc:	4699      	mov	r9, r3
 80077be:	46a2      	mov	sl, r4
 80077c0:	eb19 090b 	adds.w	r9, r9, fp
 80077c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077dc:	4689      	mov	r9, r1
 80077de:	4692      	mov	sl, r2
 80077e0:	eb1b 0509 	adds.w	r5, fp, r9
 80077e4:	eb4c 060a 	adc.w	r6, ip, sl
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	4619      	mov	r1, r3
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f04f 0300 	mov.w	r3, #0
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	0094      	lsls	r4, r2, #2
 80077fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007800:	008b      	lsls	r3, r1, #2
 8007802:	461a      	mov	r2, r3
 8007804:	4623      	mov	r3, r4
 8007806:	4628      	mov	r0, r5
 8007808:	4631      	mov	r1, r6
 800780a:	f7f8 fd41 	bl	8000290 <__aeabi_uldivmod>
 800780e:	4603      	mov	r3, r0
 8007810:	460c      	mov	r4, r1
 8007812:	461a      	mov	r2, r3
 8007814:	4b9a      	ldr	r3, [pc, #616]	; (8007a80 <UART_SetConfig+0x6f4>)
 8007816:	fba3 1302 	umull	r1, r3, r3, r2
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	2164      	movs	r1, #100	; 0x64
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	3332      	adds	r3, #50	; 0x32
 8007828:	4a95      	ldr	r2, [pc, #596]	; (8007a80 <UART_SetConfig+0x6f4>)
 800782a:	fba2 2303 	umull	r2, r3, r2, r3
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007834:	4498      	add	r8, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	469b      	mov	fp, r3
 800783a:	f04f 0c00 	mov.w	ip, #0
 800783e:	46d9      	mov	r9, fp
 8007840:	46e2      	mov	sl, ip
 8007842:	eb19 0309 	adds.w	r3, r9, r9
 8007846:	eb4a 040a 	adc.w	r4, sl, sl
 800784a:	4699      	mov	r9, r3
 800784c:	46a2      	mov	sl, r4
 800784e:	eb19 090b 	adds.w	r9, r9, fp
 8007852:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007856:	f04f 0100 	mov.w	r1, #0
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007862:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007866:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800786a:	4689      	mov	r9, r1
 800786c:	4692      	mov	sl, r2
 800786e:	eb1b 0509 	adds.w	r5, fp, r9
 8007872:	eb4c 060a 	adc.w	r6, ip, sl
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4619      	mov	r1, r3
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	f04f 0400 	mov.w	r4, #0
 8007888:	0094      	lsls	r4, r2, #2
 800788a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800788e:	008b      	lsls	r3, r1, #2
 8007890:	461a      	mov	r2, r3
 8007892:	4623      	mov	r3, r4
 8007894:	4628      	mov	r0, r5
 8007896:	4631      	mov	r1, r6
 8007898:	f7f8 fcfa 	bl	8000290 <__aeabi_uldivmod>
 800789c:	4603      	mov	r3, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	461a      	mov	r2, r3
 80078a2:	4b77      	ldr	r3, [pc, #476]	; (8007a80 <UART_SetConfig+0x6f4>)
 80078a4:	fba3 1302 	umull	r1, r3, r3, r2
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	2164      	movs	r1, #100	; 0x64
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	3332      	adds	r3, #50	; 0x32
 80078b6:	4a72      	ldr	r2, [pc, #456]	; (8007a80 <UART_SetConfig+0x6f4>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	f003 020f 	and.w	r2, r3, #15
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4442      	add	r2, r8
 80078c8:	609a      	str	r2, [r3, #8]
 80078ca:	e0d0      	b.n	8007a6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80078cc:	f7fe f93a 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 80078d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	469a      	mov	sl, r3
 80078d6:	f04f 0b00 	mov.w	fp, #0
 80078da:	46d0      	mov	r8, sl
 80078dc:	46d9      	mov	r9, fp
 80078de:	eb18 0308 	adds.w	r3, r8, r8
 80078e2:	eb49 0409 	adc.w	r4, r9, r9
 80078e6:	4698      	mov	r8, r3
 80078e8:	46a1      	mov	r9, r4
 80078ea:	eb18 080a 	adds.w	r8, r8, sl
 80078ee:	eb49 090b 	adc.w	r9, r9, fp
 80078f2:	f04f 0100 	mov.w	r1, #0
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007902:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007906:	4688      	mov	r8, r1
 8007908:	4691      	mov	r9, r2
 800790a:	eb1a 0508 	adds.w	r5, sl, r8
 800790e:	eb4b 0609 	adc.w	r6, fp, r9
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	f04f 0400 	mov.w	r4, #0
 8007924:	0094      	lsls	r4, r2, #2
 8007926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800792a:	008b      	lsls	r3, r1, #2
 800792c:	461a      	mov	r2, r3
 800792e:	4623      	mov	r3, r4
 8007930:	4628      	mov	r0, r5
 8007932:	4631      	mov	r1, r6
 8007934:	f7f8 fcac 	bl	8000290 <__aeabi_uldivmod>
 8007938:	4603      	mov	r3, r0
 800793a:	460c      	mov	r4, r1
 800793c:	461a      	mov	r2, r3
 800793e:	4b50      	ldr	r3, [pc, #320]	; (8007a80 <UART_SetConfig+0x6f4>)
 8007940:	fba3 2302 	umull	r2, r3, r3, r2
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	469b      	mov	fp, r3
 800794e:	f04f 0c00 	mov.w	ip, #0
 8007952:	46d9      	mov	r9, fp
 8007954:	46e2      	mov	sl, ip
 8007956:	eb19 0309 	adds.w	r3, r9, r9
 800795a:	eb4a 040a 	adc.w	r4, sl, sl
 800795e:	4699      	mov	r9, r3
 8007960:	46a2      	mov	sl, r4
 8007962:	eb19 090b 	adds.w	r9, r9, fp
 8007966:	eb4a 0a0c 	adc.w	sl, sl, ip
 800796a:	f04f 0100 	mov.w	r1, #0
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800797a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800797e:	4689      	mov	r9, r1
 8007980:	4692      	mov	sl, r2
 8007982:	eb1b 0509 	adds.w	r5, fp, r9
 8007986:	eb4c 060a 	adc.w	r6, ip, sl
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	0094      	lsls	r4, r2, #2
 800799e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079a2:	008b      	lsls	r3, r1, #2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	4628      	mov	r0, r5
 80079aa:	4631      	mov	r1, r6
 80079ac:	f7f8 fc70 	bl	8000290 <__aeabi_uldivmod>
 80079b0:	4603      	mov	r3, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	461a      	mov	r2, r3
 80079b6:	4b32      	ldr	r3, [pc, #200]	; (8007a80 <UART_SetConfig+0x6f4>)
 80079b8:	fba3 1302 	umull	r1, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	2164      	movs	r1, #100	; 0x64
 80079c0:	fb01 f303 	mul.w	r3, r1, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	3332      	adds	r3, #50	; 0x32
 80079ca:	4a2d      	ldr	r2, [pc, #180]	; (8007a80 <UART_SetConfig+0x6f4>)
 80079cc:	fba2 2303 	umull	r2, r3, r2, r3
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d6:	4498      	add	r8, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	469b      	mov	fp, r3
 80079dc:	f04f 0c00 	mov.w	ip, #0
 80079e0:	46d9      	mov	r9, fp
 80079e2:	46e2      	mov	sl, ip
 80079e4:	eb19 0309 	adds.w	r3, r9, r9
 80079e8:	eb4a 040a 	adc.w	r4, sl, sl
 80079ec:	4699      	mov	r9, r3
 80079ee:	46a2      	mov	sl, r4
 80079f0:	eb19 090b 	adds.w	r9, r9, fp
 80079f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079f8:	f04f 0100 	mov.w	r1, #0
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	4692      	mov	sl, r2
 8007a10:	eb1b 0509 	adds.w	r5, fp, r9
 8007a14:	eb4c 060a 	adc.w	r6, ip, sl
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	f04f 0400 	mov.w	r4, #0
 8007a2a:	0094      	lsls	r4, r2, #2
 8007a2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a30:	008b      	lsls	r3, r1, #2
 8007a32:	461a      	mov	r2, r3
 8007a34:	4623      	mov	r3, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	4631      	mov	r1, r6
 8007a3a:	f7f8 fc29 	bl	8000290 <__aeabi_uldivmod>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	461a      	mov	r2, r3
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <UART_SetConfig+0x6f4>)
 8007a46:	fba3 1302 	umull	r1, r3, r3, r2
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	2164      	movs	r1, #100	; 0x64
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	3332      	adds	r3, #50	; 0x32
 8007a58:	4a09      	ldr	r2, [pc, #36]	; (8007a80 <UART_SetConfig+0x6f4>)
 8007a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	f003 020f 	and.w	r2, r3, #15
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4442      	add	r2, r8
 8007a6a:	609a      	str	r2, [r3, #8]
}
 8007a6c:	e7ff      	b.n	8007a6e <UART_SetConfig+0x6e2>
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a78:	40011000 	.word	0x40011000
 8007a7c:	40011400 	.word	0x40011400
 8007a80:	51eb851f 	.word	0x51eb851f

08007a84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d029      	beq.n	8007af2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007aae:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ab8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007abe:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007ac4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007aca:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007ad0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007ad6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007adc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007ae2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	e034      	b.n	8007b5c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007afe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007b0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b26:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b30:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007b36:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007b3c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007b42:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007b48:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d02e      	beq.n	8007be2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b90:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007ba0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007baa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007bb4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007bbe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007bc8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	e03b      	b.n	8007c5a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bf2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007c04:	4313      	orrs	r3, r2
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c18:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007c28:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007c32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007c3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007c46:	4313      	orrs	r3, r2
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c7a:	2b84      	cmp	r3, #132	; 0x84
 8007c7c:	d005      	beq.n	8007c8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	3303      	adds	r3, #3
 8007c88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c9c:	f001 f8d0 	bl	8008e40 <vTaskStartScheduler>
  
  return osOK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca8:	b089      	sub	sp, #36	; 0x24
 8007caa:	af04      	add	r7, sp, #16
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d020      	beq.n	8007cfa <osThreadCreate+0x54>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01c      	beq.n	8007cfa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685c      	ldr	r4, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681d      	ldr	r5, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691e      	ldr	r6, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff ffc8 	bl	8007c68 <makeFreeRtosPriority>
 8007cd8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ce2:	9202      	str	r2, [sp, #8]
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	9100      	str	r1, [sp, #0]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	4632      	mov	r2, r6
 8007cec:	4629      	mov	r1, r5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 fed8 	bl	8008aa4 <xTaskCreateStatic>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e01c      	b.n	8007d34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685c      	ldr	r4, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d06:	b29e      	uxth	r6, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff ffaa 	bl	8007c68 <makeFreeRtosPriority>
 8007d14:	4602      	mov	r2, r0
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	9200      	str	r2, [sp, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	4632      	mov	r2, r6
 8007d22:	4629      	mov	r1, r5
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 ff17 	bl	8008b58 <xTaskCreate>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d001      	beq.n	8007d34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d34:	68fb      	ldr	r3, [r7, #12]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <osDelay+0x16>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	e000      	b.n	8007d56 <osDelay+0x18>
 8007d54:	2301      	movs	r3, #1
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 f83e 	bl	8008dd8 <vTaskDelay>
  
  return osOK;
 8007d5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f103 0208 	add.w	r2, r3, #8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f103 0208 	add.w	r2, r3, #8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f103 0208 	add.w	r2, r3, #8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	601a      	str	r2, [r3, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1e:	d103      	bne.n	8007e28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	e00c      	b.n	8007e42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3308      	adds	r3, #8
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	e002      	b.n	8007e36 <vListInsert+0x2e>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d2f6      	bcs.n	8007e30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	601a      	str	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6892      	ldr	r2, [r2, #8]
 8007e90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6852      	ldr	r2, [r2, #4]
 8007e9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d103      	bne.n	8007eae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	1e5a      	subs	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	e7fe      	b.n	8007ef6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007ef8:	f001 ff18 	bl	8009d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	441a      	add	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f2e:	fb01 f303 	mul.w	r3, r1, r3
 8007f32:	441a      	add	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	22ff      	movs	r2, #255	; 0xff
 8007f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	22ff      	movs	r2, #255	; 0xff
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d114      	bne.n	8007f78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01a      	beq.n	8007f8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3310      	adds	r3, #16
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 f9d4 	bl	8009308 <xTaskRemoveFromEventList>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d012      	beq.n	8007f8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f66:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <xQueueGenericReset+0xcc>)
 8007f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	e009      	b.n	8007f8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fef2 	bl	8007d66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3324      	adds	r3, #36	; 0x24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff feed 	bl	8007d66 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f8c:	f001 fefc 	bl	8009d88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f90:	2301      	movs	r3, #1
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	; 0x28
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <xQueueGenericCreate+0x28>
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	e7fe      	b.n	8007fc6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	e004      	b.n	8007fde <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
 8007fdc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	3348      	adds	r3, #72	; 0x48
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 ffbc 	bl	8009f60 <pvPortMalloc>
 8007fe8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d011      	beq.n	8008014 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3348      	adds	r3, #72	; 0x48
 8007ff8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008002:	79fa      	ldrb	r2, [r7, #7]
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4613      	mov	r3, r2
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f805 	bl	800801e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008014:	69bb      	ldr	r3, [r7, #24]
	}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	60f8      	str	r0, [r7, #12]
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	607a      	str	r2, [r7, #4]
 800802a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e002      	b.n	8008040 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800804c:	2101      	movs	r1, #1
 800804e:	69b8      	ldr	r0, [r7, #24]
 8008050:	f7ff ff3e 	bl	8007ed0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08e      	sub	sp, #56	; 0x38
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800806a:	2300      	movs	r3, #0
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d109      	bne.n	800808c <xQueueGenericSend+0x30>
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
 800808a:	e7fe      	b.n	800808a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <xQueueGenericSend+0x3e>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <xQueueGenericSend+0x42>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericSend+0x44>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d109      	bne.n	80080b8 <xQueueGenericSend+0x5c>
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
 80080b6:	e7fe      	b.n	80080b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d103      	bne.n	80080c6 <xQueueGenericSend+0x6a>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <xQueueGenericSend+0x6e>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericSend+0x70>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <xQueueGenericSend+0x88>
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	e7fe      	b.n	80080e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080e4:	f001 fac8 	bl	8009678 <xTaskGetSchedulerState>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <xQueueGenericSend+0x98>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <xQueueGenericSend+0x9c>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <xQueueGenericSend+0x9e>
 80080f8:	2300      	movs	r3, #0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d109      	bne.n	8008112 <xQueueGenericSend+0xb6>
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	61fb      	str	r3, [r7, #28]
 8008110:	e7fe      	b.n	8008110 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008112:	f001 fe0b 	bl	8009d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	429a      	cmp	r2, r3
 8008120:	d302      	bcc.n	8008128 <xQueueGenericSend+0xcc>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d129      	bne.n	800817c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800812e:	f000 fba9 	bl	8008884 <prvCopyDataToQueue>
 8008132:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d010      	beq.n	800815e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	3324      	adds	r3, #36	; 0x24
 8008140:	4618      	mov	r0, r3
 8008142:	f001 f8e1 	bl	8009308 <xTaskRemoveFromEventList>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d013      	beq.n	8008174 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800814c:	4b3f      	ldr	r3, [pc, #252]	; (800824c <xQueueGenericSend+0x1f0>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	e00a      	b.n	8008174 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008164:	4b39      	ldr	r3, [pc, #228]	; (800824c <xQueueGenericSend+0x1f0>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008174:	f001 fe08 	bl	8009d88 <vPortExitCritical>
				return pdPASS;
 8008178:	2301      	movs	r3, #1
 800817a:	e063      	b.n	8008244 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d103      	bne.n	800818a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008182:	f001 fe01 	bl	8009d88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008186:	2300      	movs	r3, #0
 8008188:	e05c      	b.n	8008244 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4618      	mov	r0, r3
 8008196:	f001 f919 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800819a:	2301      	movs	r3, #1
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800819e:	f001 fdf3 	bl	8009d88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081a2:	f000 feab 	bl	8008efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081a6:	f001 fdc1 	bl	8009d2c <vPortEnterCritical>
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d103      	bne.n	80081c0 <xQueueGenericSend+0x164>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d103      	bne.n	80081d6 <xQueueGenericSend+0x17a>
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081d6:	f001 fdd7 	bl	8009d88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081da:	1d3a      	adds	r2, r7, #4
 80081dc:	f107 0314 	add.w	r3, r7, #20
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 f908 	bl	80093f8 <xTaskCheckForTimeOut>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d124      	bne.n	8008238 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f0:	f000 fc40 	bl	8008a74 <prvIsQueueFull>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d018      	beq.n	800822c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	3310      	adds	r3, #16
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f001 f85c 	bl	80092c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800820a:	f000 fbcb 	bl	80089a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800820e:	f000 fe83 	bl	8008f18 <xTaskResumeAll>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	f47f af7c 	bne.w	8008112 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <xQueueGenericSend+0x1f0>)
 800821c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	e772      	b.n	8008112 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800822c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800822e:	f000 fbb9 	bl	80089a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008232:	f000 fe71 	bl	8008f18 <xTaskResumeAll>
 8008236:	e76c      	b.n	8008112 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823a:	f000 fbb3 	bl	80089a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800823e:	f000 fe6b 	bl	8008f18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008242:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008244:	4618      	mov	r0, r3
 8008246:	3738      	adds	r7, #56	; 0x38
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	e000ed04 	.word	0xe000ed04

08008250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08e      	sub	sp, #56	; 0x38
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	d109      	bne.n	800827c <xQueueGenericSendFromISR+0x2c>
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
 800827a:	e7fe      	b.n	800827a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d103      	bne.n	800828a <xQueueGenericSendFromISR+0x3a>
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <xQueueGenericSendFromISR+0x3e>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <xQueueGenericSendFromISR+0x40>
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d109      	bne.n	80082a8 <xQueueGenericSendFromISR+0x58>
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	e7fe      	b.n	80082a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d103      	bne.n	80082b6 <xQueueGenericSendFromISR+0x66>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <xQueueGenericSendFromISR+0x6a>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueGenericSendFromISR+0x6c>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d109      	bne.n	80082d4 <xQueueGenericSendFromISR+0x84>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	e7fe      	b.n	80082d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082d4:	f001 fe06 	bl	8009ee4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082d8:	f3ef 8211 	mrs	r2, BASEPRI
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61ba      	str	r2, [r7, #24]
 80082ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <xQueueGenericSendFromISR+0xb6>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d12c      	bne.n	8008360 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800830c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008316:	f000 fab5 	bl	8008884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800831a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d112      	bne.n	800834a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d016      	beq.n	800835a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	4618      	mov	r0, r3
 8008332:	f000 ffe9 	bl	8009308 <xTaskRemoveFromEventList>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	e007      	b.n	800835a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800834a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800834e:	3301      	adds	r3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	b25a      	sxtb	r2, r3
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800835a:	2301      	movs	r3, #1
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800835e:	e001      	b.n	8008364 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008360:	2300      	movs	r3, #0
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008370:	4618      	mov	r0, r3
 8008372:	3738      	adds	r7, #56	; 0x38
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08e      	sub	sp, #56	; 0x38
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	623b      	str	r3, [r7, #32]
 800839e:	e7fe      	b.n	800839e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d009      	beq.n	80083bc <xQueueGiveFromISR+0x44>
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	e7fe      	b.n	80083ba <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <xQueueGiveFromISR+0x54>
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <xQueueGiveFromISR+0x58>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <xQueueGiveFromISR+0x5a>
 80083d0:	2300      	movs	r3, #0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <xQueueGiveFromISR+0x72>
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	61bb      	str	r3, [r7, #24]
 80083e8:	e7fe      	b.n	80083e8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083ea:	f001 fd7b 	bl	8009ee4 <vPortValidateInterruptPriority>
	__asm volatile
 80083ee:	f3ef 8211 	mrs	r2, BASEPRI
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	617a      	str	r2, [r7, #20]
 8008404:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008406:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008416:	429a      	cmp	r2, r3
 8008418:	d22b      	bcs.n	8008472 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800842c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d112      	bne.n	800845c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	d016      	beq.n	800846c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	3324      	adds	r3, #36	; 0x24
 8008442:	4618      	mov	r0, r3
 8008444:	f000 ff60 	bl	8009308 <xTaskRemoveFromEventList>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00e      	beq.n	800846c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e007      	b.n	800846c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800845c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008460:	3301      	adds	r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	b25a      	sxtb	r2, r3
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800846c:	2301      	movs	r3, #1
 800846e:	637b      	str	r3, [r7, #52]	; 0x34
 8008470:	e001      	b.n	8008476 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008472:	2300      	movs	r3, #0
 8008474:	637b      	str	r3, [r7, #52]	; 0x34
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008482:	4618      	mov	r0, r3
 8008484:	3738      	adds	r7, #56	; 0x38
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08c      	sub	sp, #48	; 0x30
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008498:	2300      	movs	r3, #0
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <xQueueReceive+0x2e>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	623b      	str	r3, [r7, #32]
 80084b8:	e7fe      	b.n	80084b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <xQueueReceive+0x3c>
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <xQueueReceive+0x40>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <xQueueReceive+0x42>
 80084cc:	2300      	movs	r3, #0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <xQueueReceive+0x5a>
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e7fe      	b.n	80084e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084e6:	f001 f8c7 	bl	8009678 <xTaskGetSchedulerState>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <xQueueReceive+0x6a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <xQueueReceive+0x6e>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <xQueueReceive+0x70>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <xQueueReceive+0x88>
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	e7fe      	b.n	8008512 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008514:	f001 fc0a 	bl	8009d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	2b00      	cmp	r3, #0
 8008522:	d01f      	beq.n	8008564 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008528:	f000 fa16 	bl	8008958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	1e5a      	subs	r2, r3, #1
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00f      	beq.n	800855c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	3310      	adds	r3, #16
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fee1 	bl	8009308 <xTaskRemoveFromEventList>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800854c:	4b3c      	ldr	r3, [pc, #240]	; (8008640 <xQueueReceive+0x1b4>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800855c:	f001 fc14 	bl	8009d88 <vPortExitCritical>
				return pdPASS;
 8008560:	2301      	movs	r3, #1
 8008562:	e069      	b.n	8008638 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d103      	bne.n	8008572 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800856a:	f001 fc0d 	bl	8009d88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800856e:	2300      	movs	r3, #0
 8008570:	e062      	b.n	8008638 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008578:	f107 0310 	add.w	r3, r7, #16
 800857c:	4618      	mov	r0, r3
 800857e:	f000 ff25 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008582:	2301      	movs	r3, #1
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008586:	f001 fbff 	bl	8009d88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800858a:	f000 fcb7 	bl	8008efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800858e:	f001 fbcd 	bl	8009d2c <vPortEnterCritical>
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008598:	b25b      	sxtb	r3, r3
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d103      	bne.n	80085a8 <xQueueReceive+0x11c>
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d103      	bne.n	80085be <xQueueReceive+0x132>
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085be:	f001 fbe3 	bl	8009d88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085c2:	1d3a      	adds	r2, r7, #4
 80085c4:	f107 0310 	add.w	r3, r7, #16
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 ff14 	bl	80093f8 <xTaskCheckForTimeOut>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d123      	bne.n	800861e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d8:	f000 fa36 	bl	8008a48 <prvIsQueueEmpty>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d017      	beq.n	8008612 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	3324      	adds	r3, #36	; 0x24
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fe68 	bl	80092c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f2:	f000 f9d7 	bl	80089a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085f6:	f000 fc8f 	bl	8008f18 <xTaskResumeAll>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d189      	bne.n	8008514 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008600:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <xQueueReceive+0x1b4>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	e780      	b.n	8008514 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008614:	f000 f9c6 	bl	80089a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008618:	f000 fc7e 	bl	8008f18 <xTaskResumeAll>
 800861c:	e77a      	b.n	8008514 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800861e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008620:	f000 f9c0 	bl	80089a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008624:	f000 fc78 	bl	8008f18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800862a:	f000 fa0d 	bl	8008a48 <prvIsQueueEmpty>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	f43f af6f 	beq.w	8008514 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008636:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008638:	4618      	mov	r0, r3
 800863a:	3730      	adds	r7, #48	; 0x30
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	e000ed04 	.word	0xe000ed04

08008644 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08e      	sub	sp, #56	; 0x38
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800864e:	2300      	movs	r3, #0
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d109      	bne.n	8008674 <xQueueSemaphoreTake+0x30>
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	623b      	str	r3, [r7, #32]
 8008672:	e7fe      	b.n	8008672 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d009      	beq.n	8008690 <xQueueSemaphoreTake+0x4c>
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	e7fe      	b.n	800868e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008690:	f000 fff2 	bl	8009678 <xTaskGetSchedulerState>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <xQueueSemaphoreTake+0x5c>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <xQueueSemaphoreTake+0x60>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <xQueueSemaphoreTake+0x62>
 80086a4:	2300      	movs	r3, #0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <xQueueSemaphoreTake+0x7a>
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	61bb      	str	r3, [r7, #24]
 80086bc:	e7fe      	b.n	80086bc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086be:	f001 fb35 	bl	8009d2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d024      	beq.n	8008718 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	1e5a      	subs	r2, r3, #1
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80086de:	f001 f985 	bl	80099ec <pvTaskIncrementMutexHeldCount>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00f      	beq.n	8008710 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	3310      	adds	r3, #16
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fe07 	bl	8009308 <xTaskRemoveFromEventList>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008700:	4b53      	ldr	r3, [pc, #332]	; (8008850 <xQueueSemaphoreTake+0x20c>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008710:	f001 fb3a 	bl	8009d88 <vPortExitCritical>
				return pdPASS;
 8008714:	2301      	movs	r3, #1
 8008716:	e096      	b.n	8008846 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d110      	bne.n	8008740 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	2b00      	cmp	r3, #0
 8008722:	d009      	beq.n	8008738 <xQueueSemaphoreTake+0xf4>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	617b      	str	r3, [r7, #20]
 8008736:	e7fe      	b.n	8008736 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008738:	f001 fb26 	bl	8009d88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800873c:	2300      	movs	r3, #0
 800873e:	e082      	b.n	8008846 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fe3e 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008754:	f001 fb18 	bl	8009d88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008758:	f000 fbd0 	bl	8008efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800875c:	f001 fae6 	bl	8009d2c <vPortEnterCritical>
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008766:	b25b      	sxtb	r3, r3
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d103      	bne.n	8008776 <xQueueSemaphoreTake+0x132>
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800877c:	b25b      	sxtb	r3, r3
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008782:	d103      	bne.n	800878c <xQueueSemaphoreTake+0x148>
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800878c:	f001 fafc 	bl	8009d88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008790:	463a      	mov	r2, r7
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fe2d 	bl	80093f8 <xTaskCheckForTimeOut>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d132      	bne.n	800880a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087a6:	f000 f94f 	bl	8008a48 <prvIsQueueEmpty>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d026      	beq.n	80087fe <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80087b8:	f001 fab8 	bl	8009d2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 ff77 	bl	80096b4 <xTaskPriorityInherit>
 80087c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80087c8:	f001 fade 	bl	8009d88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ce:	3324      	adds	r3, #36	; 0x24
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fd73 	bl	80092c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087dc:	f000 f8e2 	bl	80089a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087e0:	f000 fb9a 	bl	8008f18 <xTaskResumeAll>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f47f af69 	bne.w	80086be <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80087ec:	4b18      	ldr	r3, [pc, #96]	; (8008850 <xQueueSemaphoreTake+0x20c>)
 80087ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	e75f      	b.n	80086be <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80087fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008800:	f000 f8d0 	bl	80089a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008804:	f000 fb88 	bl	8008f18 <xTaskResumeAll>
 8008808:	e759      	b.n	80086be <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800880a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800880c:	f000 f8ca 	bl	80089a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008810:	f000 fb82 	bl	8008f18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008816:	f000 f917 	bl	8008a48 <prvIsQueueEmpty>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	f43f af4e 	beq.w	80086be <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00d      	beq.n	8008844 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008828:	f001 fa80 	bl	8009d2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800882c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800882e:	f000 f811 	bl	8008854 <prvGetDisinheritPriorityAfterTimeout>
 8008832:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800883a:	4618      	mov	r0, r3
 800883c:	f001 f83e 	bl	80098bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008840:	f001 faa2 	bl	8009d88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008844:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008846:	4618      	mov	r0, r3
 8008848:	3738      	adds	r7, #56	; 0x38
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	e000ed04 	.word	0xe000ed04

08008854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d006      	beq.n	8008872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f1c3 0307 	rsb	r3, r3, #7
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e001      	b.n	8008876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008876:	68fb      	ldr	r3, [r7, #12]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10d      	bne.n	80088be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d14d      	bne.n	8008946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 ff80 	bl	80097b4 <xTaskPriorityDisinherit>
 80088b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	e043      	b.n	8008946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d119      	bne.n	80088f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6858      	ldr	r0, [r3, #4]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	461a      	mov	r2, r3
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	f014 fc6e 	bl	801d1b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	441a      	add	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d32b      	bcc.n	8008946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	e026      	b.n	8008946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68d8      	ldr	r0, [r3, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008900:	461a      	mov	r2, r3
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	f014 fc54 	bl	801d1b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	425b      	negs	r3, r3
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d207      	bcs.n	8008934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	425b      	negs	r3, r3
 800892e:	441a      	add	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d105      	bne.n	8008946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3b01      	subs	r3, #1
 8008944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800894e:	697b      	ldr	r3, [r7, #20]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	441a      	add	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	d303      	bcc.n	800898c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68d9      	ldr	r1, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	461a      	mov	r2, r3
 8008996:	6838      	ldr	r0, [r7, #0]
 8008998:	f014 fc0a 	bl	801d1b0 <memcpy>
	}
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089ac:	f001 f9be 	bl	8009d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089b8:	e011      	b.n	80089de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d012      	beq.n	80089e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3324      	adds	r3, #36	; 0x24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fc9e 	bl	8009308 <xTaskRemoveFromEventList>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089d2:	f000 fd71 	bl	80094b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	3b01      	subs	r3, #1
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dce9      	bgt.n	80089ba <prvUnlockQueue+0x16>
 80089e6:	e000      	b.n	80089ea <prvUnlockQueue+0x46>
					break;
 80089e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	22ff      	movs	r2, #255	; 0xff
 80089ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089f2:	f001 f9c9 	bl	8009d88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089f6:	f001 f999 	bl	8009d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a02:	e011      	b.n	8008a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d012      	beq.n	8008a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3310      	adds	r3, #16
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fc79 	bl	8009308 <xTaskRemoveFromEventList>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d001      	beq.n	8008a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a1c:	f000 fd4c 	bl	80094b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dce9      	bgt.n	8008a04 <prvUnlockQueue+0x60>
 8008a30:	e000      	b.n	8008a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	22ff      	movs	r2, #255	; 0xff
 8008a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a3c:	f001 f9a4 	bl	8009d88 <vPortExitCritical>
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a50:	f001 f96c 	bl	8009d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e001      	b.n	8008a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a66:	f001 f98f 	bl	8009d88 <vPortExitCritical>

	return xReturn;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a7c:	f001 f956 	bl	8009d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d102      	bne.n	8008a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e001      	b.n	8008a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a96:	f001 f977 	bl	8009d88 <vPortExitCritical>

	return xReturn;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08e      	sub	sp, #56	; 0x38
 8008aa8:	af04      	add	r7, sp, #16
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d109      	bne.n	8008acc <xTaskCreateStatic+0x28>
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	623b      	str	r3, [r7, #32]
 8008aca:	e7fe      	b.n	8008aca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <xTaskCreateStatic+0x42>
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	e7fe      	b.n	8008ae4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ae6:	2358      	movs	r3, #88	; 0x58
 8008ae8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b58      	cmp	r3, #88	; 0x58
 8008aee:	d009      	beq.n	8008b04 <xTaskCreateStatic+0x60>
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	61bb      	str	r3, [r7, #24]
 8008b02:	e7fe      	b.n	8008b02 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01e      	beq.n	8008b4a <xTaskCreateStatic+0xa6>
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01b      	beq.n	8008b4a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b24:	2300      	movs	r3, #0
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	f107 0314 	add.w	r3, r7, #20
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f850 	bl	8008be2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b44:	f000 f8de 	bl	8008d04 <prvAddNewTaskToReadyList>
 8008b48:	e001      	b.n	8008b4e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b4e:	697b      	ldr	r3, [r7, #20]
	}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3728      	adds	r7, #40	; 0x28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	; 0x30
 8008b5c:	af04      	add	r7, sp, #16
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	4613      	mov	r3, r2
 8008b66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 f9f7 	bl	8009f60 <pvPortMalloc>
 8008b72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b7a:	2058      	movs	r0, #88	; 0x58
 8008b7c:	f001 f9f0 	bl	8009f60 <pvPortMalloc>
 8008b80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008b8e:	e005      	b.n	8008b9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b90:	6978      	ldr	r0, [r7, #20]
 8008b92:	f001 faab 	bl	800a0ec <vPortFree>
 8008b96:	e001      	b.n	8008b9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d017      	beq.n	8008bd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	2300      	movs	r3, #0
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	9302      	str	r3, [sp, #8]
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 f80e 	bl	8008be2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bc6:	69f8      	ldr	r0, [r7, #28]
 8008bc8:	f000 f89c 	bl	8008d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e002      	b.n	8008bd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b088      	sub	sp, #32
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
 8008bee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	21a5      	movs	r1, #165	; 0xa5
 8008bfc:	f014 fae3 	bl	801d1c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	f003 0307 	and.w	r3, r3, #7
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <prvInitialiseNewTask+0x56>
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e7fe      	b.n	8008c36 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01f      	beq.n	8008c7e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e012      	b.n	8008c6a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	7819      	ldrb	r1, [r3, #0]
 8008c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	3334      	adds	r3, #52	; 0x34
 8008c54:	460a      	mov	r2, r1
 8008c56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	3301      	adds	r3, #1
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b0f      	cmp	r3, #15
 8008c6e:	d9e9      	bls.n	8008c44 <prvInitialiseNewTask+0x62>
 8008c70:	e000      	b.n	8008c74 <prvInitialiseNewTask+0x92>
			{
				break;
 8008c72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c7c:	e003      	b.n	8008c86 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	2b06      	cmp	r3, #6
 8008c8a:	d901      	bls.n	8008c90 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c8c:	2306      	movs	r3, #6
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7ff f87d 	bl	8007da6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	3318      	adds	r3, #24
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff f878 	bl	8007da6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	f1c3 0207 	rsb	r2, r3, #7
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	2200      	movs	r2, #0
 8008cd0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	68f9      	ldr	r1, [r7, #12]
 8008ce4:	69b8      	ldr	r0, [r7, #24]
 8008ce6:	f000 fefb 	bl	8009ae0 <pxPortInitialiseStack>
 8008cea:	4602      	mov	r2, r0
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cfc:	bf00      	nop
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d0c:	f001 f80e 	bl	8009d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d10:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <prvAddNewTaskToReadyList+0xb8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	4a29      	ldr	r2, [pc, #164]	; (8008dbc <prvAddNewTaskToReadyList+0xb8>)
 8008d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d1a:	4b29      	ldr	r3, [pc, #164]	; (8008dc0 <prvAddNewTaskToReadyList+0xbc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d22:	4a27      	ldr	r2, [pc, #156]	; (8008dc0 <prvAddNewTaskToReadyList+0xbc>)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d28:	4b24      	ldr	r3, [pc, #144]	; (8008dbc <prvAddNewTaskToReadyList+0xb8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d110      	bne.n	8008d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d30:	f000 fbe8 	bl	8009504 <prvInitialiseTaskLists>
 8008d34:	e00d      	b.n	8008d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d36:	4b23      	ldr	r3, [pc, #140]	; (8008dc4 <prvAddNewTaskToReadyList+0xc0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d3e:	4b20      	ldr	r3, [pc, #128]	; (8008dc0 <prvAddNewTaskToReadyList+0xbc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d802      	bhi.n	8008d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d4c:	4a1c      	ldr	r2, [pc, #112]	; (8008dc0 <prvAddNewTaskToReadyList+0xbc>)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d52:	4b1d      	ldr	r3, [pc, #116]	; (8008dc8 <prvAddNewTaskToReadyList+0xc4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3301      	adds	r3, #1
 8008d58:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <prvAddNewTaskToReadyList+0xc4>)
 8008d5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d60:	2201      	movs	r2, #1
 8008d62:	409a      	lsls	r2, r3
 8008d64:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <prvAddNewTaskToReadyList+0xc8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <prvAddNewTaskToReadyList+0xc8>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4a15      	ldr	r2, [pc, #84]	; (8008dd0 <prvAddNewTaskToReadyList+0xcc>)
 8008d7c:	441a      	add	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4619      	mov	r1, r3
 8008d84:	4610      	mov	r0, r2
 8008d86:	f7ff f81b 	bl	8007dc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d8a:	f000 fffd 	bl	8009d88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <prvAddNewTaskToReadyList+0xc0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d96:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <prvAddNewTaskToReadyList+0xbc>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d207      	bcs.n	8008db4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008da4:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <prvAddNewTaskToReadyList+0xd0>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20025d58 	.word	0x20025d58
 8008dc0:	20025c58 	.word	0x20025c58
 8008dc4:	20025d64 	.word	0x20025d64
 8008dc8:	20025d74 	.word	0x20025d74
 8008dcc:	20025d60 	.word	0x20025d60
 8008dd0:	20025c5c 	.word	0x20025c5c
 8008dd4:	e000ed04 	.word	0xe000ed04

08008dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d016      	beq.n	8008e18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <vTaskDelay+0x60>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <vTaskDelay+0x2e>
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60bb      	str	r3, [r7, #8]
 8008e04:	e7fe      	b.n	8008e04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008e06:	f000 f879 	bl	8008efc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fe01 	bl	8009a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e12:	f000 f881 	bl	8008f18 <xTaskResumeAll>
 8008e16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d107      	bne.n	8008e2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008e1e:	4b07      	ldr	r3, [pc, #28]	; (8008e3c <vTaskDelay+0x64>)
 8008e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20025d80 	.word	0x20025d80
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	; 0x28
 8008e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e4e:	463a      	mov	r2, r7
 8008e50:	1d39      	adds	r1, r7, #4
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7f7 fd4a 	bl	80008f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	9202      	str	r2, [sp, #8]
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	2300      	movs	r3, #0
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	460a      	mov	r2, r1
 8008e6e:	491d      	ldr	r1, [pc, #116]	; (8008ee4 <vTaskStartScheduler+0xa4>)
 8008e70:	481d      	ldr	r0, [pc, #116]	; (8008ee8 <vTaskStartScheduler+0xa8>)
 8008e72:	f7ff fe17 	bl	8008aa4 <xTaskCreateStatic>
 8008e76:	4602      	mov	r2, r0
 8008e78:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <vTaskStartScheduler+0xac>)
 8008e7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <vTaskStartScheduler+0xac>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e001      	b.n	8008e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d115      	bne.n	8008ec0 <vTaskStartScheduler+0x80>
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <vTaskStartScheduler+0xb0>)
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eae:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <vTaskStartScheduler+0xb4>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008eb4:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <vTaskStartScheduler+0xb8>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008eba:	f000 fe99 	bl	8009bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ebe:	e00d      	b.n	8008edc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d109      	bne.n	8008edc <vTaskStartScheduler+0x9c>
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	e7fe      	b.n	8008eda <vTaskStartScheduler+0x9a>
}
 8008edc:	bf00      	nop
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	0801e128 	.word	0x0801e128
 8008ee8:	080094d1 	.word	0x080094d1
 8008eec:	20025d7c 	.word	0x20025d7c
 8008ef0:	20025d78 	.word	0x20025d78
 8008ef4:	20025d64 	.word	0x20025d64
 8008ef8:	20025d5c 	.word	0x20025d5c

08008efc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f00:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <vTaskSuspendAll+0x18>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3301      	adds	r3, #1
 8008f06:	4a03      	ldr	r2, [pc, #12]	; (8008f14 <vTaskSuspendAll+0x18>)
 8008f08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008f0a:	bf00      	nop
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	20025d80 	.word	0x20025d80

08008f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f26:	4b41      	ldr	r3, [pc, #260]	; (800902c <xTaskResumeAll+0x114>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <xTaskResumeAll+0x2a>
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	e7fe      	b.n	8008f40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f42:	f000 fef3 	bl	8009d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <xTaskResumeAll+0x114>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	4a37      	ldr	r2, [pc, #220]	; (800902c <xTaskResumeAll+0x114>)
 8008f4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f50:	4b36      	ldr	r3, [pc, #216]	; (800902c <xTaskResumeAll+0x114>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d161      	bne.n	800901c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f58:	4b35      	ldr	r3, [pc, #212]	; (8009030 <xTaskResumeAll+0x118>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d05d      	beq.n	800901c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f60:	e02e      	b.n	8008fc0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f62:	4b34      	ldr	r3, [pc, #208]	; (8009034 <xTaskResumeAll+0x11c>)
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3318      	adds	r3, #24
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe ff83 	bl	8007e7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe ff7e 	bl	8007e7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	2201      	movs	r2, #1
 8008f84:	409a      	lsls	r2, r3
 8008f86:	4b2c      	ldr	r3, [pc, #176]	; (8009038 <xTaskResumeAll+0x120>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	; (8009038 <xTaskResumeAll+0x120>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4a27      	ldr	r2, [pc, #156]	; (800903c <xTaskResumeAll+0x124>)
 8008f9e:	441a      	add	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe ff0a 	bl	8007dc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4b23      	ldr	r3, [pc, #140]	; (8009040 <xTaskResumeAll+0x128>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008fba:	4b22      	ldr	r3, [pc, #136]	; (8009044 <xTaskResumeAll+0x12c>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc0:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xTaskResumeAll+0x11c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1cc      	bne.n	8008f62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fce:	f000 fb33 	bl	8009638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <xTaskResumeAll+0x130>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d010      	beq.n	8009000 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fde:	f000 f837 	bl	8009050 <xTaskIncrementTick>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008fe8:	4b16      	ldr	r3, [pc, #88]	; (8009044 <xTaskResumeAll+0x12c>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f1      	bne.n	8008fde <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <xTaskResumeAll+0x130>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <xTaskResumeAll+0x12c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d009      	beq.n	800901c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800900c:	4b0f      	ldr	r3, [pc, #60]	; (800904c <xTaskResumeAll+0x134>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800901c:	f000 feb4 	bl	8009d88 <vPortExitCritical>

	return xAlreadyYielded;
 8009020:	68bb      	ldr	r3, [r7, #8]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20025d80 	.word	0x20025d80
 8009030:	20025d58 	.word	0x20025d58
 8009034:	20025d18 	.word	0x20025d18
 8009038:	20025d60 	.word	0x20025d60
 800903c:	20025c5c 	.word	0x20025c5c
 8009040:	20025c58 	.word	0x20025c58
 8009044:	20025d6c 	.word	0x20025d6c
 8009048:	20025d68 	.word	0x20025d68
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800905a:	4b4e      	ldr	r3, [pc, #312]	; (8009194 <xTaskIncrementTick+0x144>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 8087 	bne.w	8009172 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009064:	4b4c      	ldr	r3, [pc, #304]	; (8009198 <xTaskIncrementTick+0x148>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800906c:	4a4a      	ldr	r2, [pc, #296]	; (8009198 <xTaskIncrementTick+0x148>)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11f      	bne.n	80090b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009078:	4b48      	ldr	r3, [pc, #288]	; (800919c <xTaskIncrementTick+0x14c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d009      	beq.n	8009096 <xTaskIncrementTick+0x46>
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	e7fe      	b.n	8009094 <xTaskIncrementTick+0x44>
 8009096:	4b41      	ldr	r3, [pc, #260]	; (800919c <xTaskIncrementTick+0x14c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	4b40      	ldr	r3, [pc, #256]	; (80091a0 <xTaskIncrementTick+0x150>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a3e      	ldr	r2, [pc, #248]	; (800919c <xTaskIncrementTick+0x14c>)
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	4a3e      	ldr	r2, [pc, #248]	; (80091a0 <xTaskIncrementTick+0x150>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	4b3e      	ldr	r3, [pc, #248]	; (80091a4 <xTaskIncrementTick+0x154>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	4a3c      	ldr	r2, [pc, #240]	; (80091a4 <xTaskIncrementTick+0x154>)
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	f000 fac0 	bl	8009638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090b8:	4b3b      	ldr	r3, [pc, #236]	; (80091a8 <xTaskIncrementTick+0x158>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d348      	bcc.n	8009154 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090c2:	4b36      	ldr	r3, [pc, #216]	; (800919c <xTaskIncrementTick+0x14c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090cc:	4b36      	ldr	r3, [pc, #216]	; (80091a8 <xTaskIncrementTick+0x158>)
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295
 80090d2:	601a      	str	r2, [r3, #0]
					break;
 80090d4:	e03e      	b.n	8009154 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d6:	4b31      	ldr	r3, [pc, #196]	; (800919c <xTaskIncrementTick+0x14c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d203      	bcs.n	80090f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090ee:	4a2e      	ldr	r2, [pc, #184]	; (80091a8 <xTaskIncrementTick+0x158>)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090f4:	e02e      	b.n	8009154 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	3304      	adds	r3, #4
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fe febd 	bl	8007e7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	3318      	adds	r3, #24
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe feb4 	bl	8007e7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009116:	2201      	movs	r2, #1
 8009118:	409a      	lsls	r2, r3
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <xTaskIncrementTick+0x15c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4313      	orrs	r3, r2
 8009120:	4a22      	ldr	r2, [pc, #136]	; (80091ac <xTaskIncrementTick+0x15c>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4613      	mov	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4a1f      	ldr	r2, [pc, #124]	; (80091b0 <xTaskIncrementTick+0x160>)
 8009132:	441a      	add	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	3304      	adds	r3, #4
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f7fe fe40 	bl	8007dc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <xTaskIncrementTick+0x164>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	429a      	cmp	r2, r3
 800914c:	d3b9      	bcc.n	80090c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800914e:	2301      	movs	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009152:	e7b6      	b.n	80090c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009154:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <xTaskIncrementTick+0x164>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915a:	4915      	ldr	r1, [pc, #84]	; (80091b0 <xTaskIncrementTick+0x160>)
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d907      	bls.n	800917c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800916c:	2301      	movs	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e004      	b.n	800917c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009172:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <xTaskIncrementTick+0x168>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a0f      	ldr	r2, [pc, #60]	; (80091b8 <xTaskIncrementTick+0x168>)
 800917a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800917c:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <xTaskIncrementTick+0x16c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009188:	697b      	ldr	r3, [r7, #20]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20025d80 	.word	0x20025d80
 8009198:	20025d5c 	.word	0x20025d5c
 800919c:	20025d10 	.word	0x20025d10
 80091a0:	20025d14 	.word	0x20025d14
 80091a4:	20025d70 	.word	0x20025d70
 80091a8:	20025d78 	.word	0x20025d78
 80091ac:	20025d60 	.word	0x20025d60
 80091b0:	20025c5c 	.word	0x20025c5c
 80091b4:	20025c58 	.word	0x20025c58
 80091b8:	20025d68 	.word	0x20025d68
 80091bc:	20025d6c 	.word	0x20025d6c

080091c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091c6:	4b39      	ldr	r3, [pc, #228]	; (80092ac <vTaskSwitchContext+0xec>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ce:	4b38      	ldr	r3, [pc, #224]	; (80092b0 <vTaskSwitchContext+0xf0>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091d4:	e065      	b.n	80092a2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80091d6:	4b36      	ldr	r3, [pc, #216]	; (80092b0 <vTaskSwitchContext+0xf0>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80091dc:	4b35      	ldr	r3, [pc, #212]	; (80092b4 <vTaskSwitchContext+0xf4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	61fb      	str	r3, [r7, #28]
 80091e4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80091e8:	61bb      	str	r3, [r7, #24]
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d111      	bne.n	8009218 <vTaskSwitchContext+0x58>
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3304      	adds	r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d10b      	bne.n	8009218 <vTaskSwitchContext+0x58>
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3308      	adds	r3, #8
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	429a      	cmp	r2, r3
 800920a:	d105      	bne.n	8009218 <vTaskSwitchContext+0x58>
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	330c      	adds	r3, #12
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	429a      	cmp	r2, r3
 8009216:	d008      	beq.n	800922a <vTaskSwitchContext+0x6a>
 8009218:	4b26      	ldr	r3, [pc, #152]	; (80092b4 <vTaskSwitchContext+0xf4>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	4b25      	ldr	r3, [pc, #148]	; (80092b4 <vTaskSwitchContext+0xf4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3334      	adds	r3, #52	; 0x34
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7f7 fb50 	bl	80008ca <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922a:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <vTaskSwitchContext+0xf8>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	fab3 f383 	clz	r3, r3
 8009236:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	f1c3 031f 	rsb	r3, r3, #31
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	491e      	ldr	r1, [pc, #120]	; (80092bc <vTaskSwitchContext+0xfc>)
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	607b      	str	r3, [r7, #4]
 8009266:	e7fe      	b.n	8009266 <vTaskSwitchContext+0xa6>
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4a12      	ldr	r2, [pc, #72]	; (80092bc <vTaskSwitchContext+0xfc>)
 8009274:	4413      	add	r3, r2
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	605a      	str	r2, [r3, #4]
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3308      	adds	r3, #8
 800928a:	429a      	cmp	r2, r3
 800928c:	d104      	bne.n	8009298 <vTaskSwitchContext+0xd8>
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	605a      	str	r2, [r3, #4]
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <vTaskSwitchContext+0xf4>)
 80092a0:	6013      	str	r3, [r2, #0]
}
 80092a2:	bf00      	nop
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20025d80 	.word	0x20025d80
 80092b0:	20025d6c 	.word	0x20025d6c
 80092b4:	20025c58 	.word	0x20025c58
 80092b8:	20025d60 	.word	0x20025d60
 80092bc:	20025c5c 	.word	0x20025c5c

080092c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d109      	bne.n	80092e4 <vTaskPlaceOnEventList+0x24>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e7fe      	b.n	80092e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092e4:	4b07      	ldr	r3, [pc, #28]	; (8009304 <vTaskPlaceOnEventList+0x44>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3318      	adds	r3, #24
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7fe fd8b 	bl	8007e08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092f2:	2101      	movs	r1, #1
 80092f4:	6838      	ldr	r0, [r7, #0]
 80092f6:	f000 fb8d 	bl	8009a14 <prvAddCurrentTaskToDelayedList>
}
 80092fa:	bf00      	nop
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20025c58 	.word	0x20025c58

08009308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d109      	bne.n	8009332 <xTaskRemoveFromEventList+0x2a>
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e7fe      	b.n	8009330 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	3318      	adds	r3, #24
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fd9f 	bl	8007e7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933c:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <xTaskRemoveFromEventList+0xac>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d11c      	bne.n	800937e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fd96 	bl	8007e7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	2201      	movs	r2, #1
 8009354:	409a      	lsls	r2, r3
 8009356:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <xTaskRemoveFromEventList+0xb0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4313      	orrs	r3, r2
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <xTaskRemoveFromEventList+0xb0>)
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4a13      	ldr	r2, [pc, #76]	; (80093bc <xTaskRemoveFromEventList+0xb4>)
 800936e:	441a      	add	r2, r3
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f7fe fd22 	bl	8007dc0 <vListInsertEnd>
 800937c:	e005      	b.n	800938a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3318      	adds	r3, #24
 8009382:	4619      	mov	r1, r3
 8009384:	480e      	ldr	r0, [pc, #56]	; (80093c0 <xTaskRemoveFromEventList+0xb8>)
 8009386:	f7fe fd1b 	bl	8007dc0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <xTaskRemoveFromEventList+0xbc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	429a      	cmp	r2, r3
 8009396:	d905      	bls.n	80093a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <xTaskRemoveFromEventList+0xc0>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	e001      	b.n	80093a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093a8:	697b      	ldr	r3, [r7, #20]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20025d80 	.word	0x20025d80
 80093b8:	20025d60 	.word	0x20025d60
 80093bc:	20025c5c 	.word	0x20025c5c
 80093c0:	20025d18 	.word	0x20025d18
 80093c4:	20025c58 	.word	0x20025c58
 80093c8:	20025d6c 	.word	0x20025d6c

080093cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093d4:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <vTaskInternalSetTimeOutState+0x24>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <vTaskInternalSetTimeOutState+0x28>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20025d70 	.word	0x20025d70
 80093f4:	20025d5c 	.word	0x20025d5c

080093f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <xTaskCheckForTimeOut+0x24>
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	e7fe      	b.n	800941a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <xTaskCheckForTimeOut+0x3e>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	e7fe      	b.n	8009434 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009436:	f000 fc79 	bl	8009d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800943a:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <xTaskCheckForTimeOut+0xb8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d102      	bne.n	800945a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	61fb      	str	r3, [r7, #28]
 8009458:	e023      	b.n	80094a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	4b15      	ldr	r3, [pc, #84]	; (80094b4 <xTaskCheckForTimeOut+0xbc>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d007      	beq.n	8009476 <xTaskCheckForTimeOut+0x7e>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	429a      	cmp	r2, r3
 800946e:	d302      	bcc.n	8009476 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009470:	2301      	movs	r3, #1
 8009472:	61fb      	str	r3, [r7, #28]
 8009474:	e015      	b.n	80094a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	429a      	cmp	r2, r3
 800947e:	d20b      	bcs.n	8009498 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	1ad2      	subs	r2, r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7ff ff9d 	bl	80093cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009492:	2300      	movs	r3, #0
 8009494:	61fb      	str	r3, [r7, #28]
 8009496:	e004      	b.n	80094a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800949e:	2301      	movs	r3, #1
 80094a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094a2:	f000 fc71 	bl	8009d88 <vPortExitCritical>

	return xReturn;
 80094a6:	69fb      	ldr	r3, [r7, #28]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20025d5c 	.word	0x20025d5c
 80094b4:	20025d70 	.word	0x20025d70

080094b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094b8:	b480      	push	{r7}
 80094ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094bc:	4b03      	ldr	r3, [pc, #12]	; (80094cc <vTaskMissedYield+0x14>)
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
}
 80094c2:	bf00      	nop
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	20025d6c 	.word	0x20025d6c

080094d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094d8:	f000 f854 	bl	8009584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <prvIdleTask+0x2c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d907      	bls.n	80094f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80094e4:	4b06      	ldr	r3, [pc, #24]	; (8009500 <prvIdleTask+0x30>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80094f4:	f7f7 f9e2 	bl	80008bc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80094f8:	e7ee      	b.n	80094d8 <prvIdleTask+0x8>
 80094fa:	bf00      	nop
 80094fc:	20025c5c 	.word	0x20025c5c
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800950a:	2300      	movs	r3, #0
 800950c:	607b      	str	r3, [r7, #4]
 800950e:	e00c      	b.n	800952a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4a12      	ldr	r2, [pc, #72]	; (8009564 <prvInitialiseTaskLists+0x60>)
 800951c:	4413      	add	r3, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe fc21 	bl	8007d66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3301      	adds	r3, #1
 8009528:	607b      	str	r3, [r7, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b06      	cmp	r3, #6
 800952e:	d9ef      	bls.n	8009510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009530:	480d      	ldr	r0, [pc, #52]	; (8009568 <prvInitialiseTaskLists+0x64>)
 8009532:	f7fe fc18 	bl	8007d66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009536:	480d      	ldr	r0, [pc, #52]	; (800956c <prvInitialiseTaskLists+0x68>)
 8009538:	f7fe fc15 	bl	8007d66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800953c:	480c      	ldr	r0, [pc, #48]	; (8009570 <prvInitialiseTaskLists+0x6c>)
 800953e:	f7fe fc12 	bl	8007d66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009542:	480c      	ldr	r0, [pc, #48]	; (8009574 <prvInitialiseTaskLists+0x70>)
 8009544:	f7fe fc0f 	bl	8007d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009548:	480b      	ldr	r0, [pc, #44]	; (8009578 <prvInitialiseTaskLists+0x74>)
 800954a:	f7fe fc0c 	bl	8007d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800954e:	4b0b      	ldr	r3, [pc, #44]	; (800957c <prvInitialiseTaskLists+0x78>)
 8009550:	4a05      	ldr	r2, [pc, #20]	; (8009568 <prvInitialiseTaskLists+0x64>)
 8009552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <prvInitialiseTaskLists+0x7c>)
 8009556:	4a05      	ldr	r2, [pc, #20]	; (800956c <prvInitialiseTaskLists+0x68>)
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20025c5c 	.word	0x20025c5c
 8009568:	20025ce8 	.word	0x20025ce8
 800956c:	20025cfc 	.word	0x20025cfc
 8009570:	20025d18 	.word	0x20025d18
 8009574:	20025d2c 	.word	0x20025d2c
 8009578:	20025d44 	.word	0x20025d44
 800957c:	20025d10 	.word	0x20025d10
 8009580:	20025d14 	.word	0x20025d14

08009584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800958a:	e019      	b.n	80095c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800958c:	f000 fbce 	bl	8009d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <prvCheckTasksWaitingTermination+0x4c>)
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fc6c 	bl	8007e7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095a2:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <prvCheckTasksWaitingTermination+0x50>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	4a0a      	ldr	r2, [pc, #40]	; (80095d4 <prvCheckTasksWaitingTermination+0x50>)
 80095aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <prvCheckTasksWaitingTermination+0x54>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4a09      	ldr	r2, [pc, #36]	; (80095d8 <prvCheckTasksWaitingTermination+0x54>)
 80095b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095b6:	f000 fbe7 	bl	8009d88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f80e 	bl	80095dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <prvCheckTasksWaitingTermination+0x54>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e1      	bne.n	800958c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20025d2c 	.word	0x20025d2c
 80095d4:	20025d58 	.word	0x20025d58
 80095d8:	20025d40 	.word	0x20025d40

080095dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d108      	bne.n	8009600 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fd7a 	bl	800a0ec <vPortFree>
				vPortFree( pxTCB );
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fd77 	bl	800a0ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095fe:	e017      	b.n	8009630 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009606:	2b01      	cmp	r3, #1
 8009608:	d103      	bne.n	8009612 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fd6e 	bl	800a0ec <vPortFree>
	}
 8009610:	e00e      	b.n	8009630 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009618:	2b02      	cmp	r3, #2
 800961a:	d009      	beq.n	8009630 <prvDeleteTCB+0x54>
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	e7fe      	b.n	800962e <prvDeleteTCB+0x52>
	}
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <prvResetNextTaskUnblockTime+0x38>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009648:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <prvResetNextTaskUnblockTime+0x3c>)
 800964a:	f04f 32ff 	mov.w	r2, #4294967295
 800964e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009650:	e008      	b.n	8009664 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009652:	4b07      	ldr	r3, [pc, #28]	; (8009670 <prvResetNextTaskUnblockTime+0x38>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4a04      	ldr	r2, [pc, #16]	; (8009674 <prvResetNextTaskUnblockTime+0x3c>)
 8009662:	6013      	str	r3, [r2, #0]
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	20025d10 	.word	0x20025d10
 8009674:	20025d78 	.word	0x20025d78

08009678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800967e:	4b0b      	ldr	r3, [pc, #44]	; (80096ac <xTaskGetSchedulerState+0x34>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d102      	bne.n	800968c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009686:	2301      	movs	r3, #1
 8009688:	607b      	str	r3, [r7, #4]
 800968a:	e008      	b.n	800969e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800968c:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <xTaskGetSchedulerState+0x38>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009694:	2302      	movs	r3, #2
 8009696:	607b      	str	r3, [r7, #4]
 8009698:	e001      	b.n	800969e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800969a:	2300      	movs	r3, #0
 800969c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800969e:	687b      	ldr	r3, [r7, #4]
	}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	20025d64 	.word	0x20025d64
 80096b0:	20025d80 	.word	0x20025d80

080096b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d069      	beq.n	800979e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ce:	4b36      	ldr	r3, [pc, #216]	; (80097a8 <xTaskPriorityInherit+0xf4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d259      	bcs.n	800978c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	db06      	blt.n	80096ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e0:	4b31      	ldr	r3, [pc, #196]	; (80097a8 <xTaskPriorityInherit+0xf4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	f1c3 0207 	rsb	r2, r3, #7
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6959      	ldr	r1, [r3, #20]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <xTaskPriorityInherit+0xf8>)
 8009700:	4413      	add	r3, r2
 8009702:	4299      	cmp	r1, r3
 8009704:	d13a      	bne.n	800977c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fbb5 	bl	8007e7a <uxListRemove>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d115      	bne.n	8009742 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971a:	4924      	ldr	r1, [pc, #144]	; (80097ac <xTaskPriorityInherit+0xf8>)
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	440b      	add	r3, r1
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <xTaskPriorityInherit+0x8e>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	2201      	movs	r2, #1
 8009732:	fa02 f303 	lsl.w	r3, r2, r3
 8009736:	43da      	mvns	r2, r3
 8009738:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <xTaskPriorityInherit+0xfc>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4013      	ands	r3, r2
 800973e:	4a1c      	ldr	r2, [pc, #112]	; (80097b0 <xTaskPriorityInherit+0xfc>)
 8009740:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009742:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <xTaskPriorityInherit+0xf4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	2201      	movs	r2, #1
 8009752:	409a      	lsls	r2, r3
 8009754:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <xTaskPriorityInherit+0xfc>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4313      	orrs	r3, r2
 800975a:	4a15      	ldr	r2, [pc, #84]	; (80097b0 <xTaskPriorityInherit+0xfc>)
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4a10      	ldr	r2, [pc, #64]	; (80097ac <xTaskPriorityInherit+0xf8>)
 800976c:	441a      	add	r2, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	3304      	adds	r3, #4
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7fe fb23 	bl	8007dc0 <vListInsertEnd>
 800977a:	e004      	b.n	8009786 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <xTaskPriorityInherit+0xf4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009786:	2301      	movs	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	e008      	b.n	800979e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009790:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <xTaskPriorityInherit+0xf4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	429a      	cmp	r2, r3
 8009798:	d201      	bcs.n	800979e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800979a:	2301      	movs	r3, #1
 800979c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800979e:	68fb      	ldr	r3, [r7, #12]
	}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20025c58 	.word	0x20025c58
 80097ac:	20025c5c 	.word	0x20025c5c
 80097b0:	20025d60 	.word	0x20025d60

080097b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d06c      	beq.n	80098a4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097ca:	4b39      	ldr	r3, [pc, #228]	; (80098b0 <xTaskPriorityDisinherit+0xfc>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d009      	beq.n	80097e8 <xTaskPriorityDisinherit+0x34>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	e7fe      	b.n	80097e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d109      	bne.n	8009804 <xTaskPriorityDisinherit+0x50>
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	e7fe      	b.n	8009802 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009808:	1e5a      	subs	r2, r3, #1
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009816:	429a      	cmp	r2, r3
 8009818:	d044      	beq.n	80098a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981e:	2b00      	cmp	r3, #0
 8009820:	d140      	bne.n	80098a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3304      	adds	r3, #4
 8009826:	4618      	mov	r0, r3
 8009828:	f7fe fb27 	bl	8007e7a <uxListRemove>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d115      	bne.n	800985e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009836:	491f      	ldr	r1, [pc, #124]	; (80098b4 <xTaskPriorityDisinherit+0x100>)
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	440b      	add	r3, r1
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <xTaskPriorityDisinherit+0xaa>
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	2201      	movs	r2, #1
 800984e:	fa02 f303 	lsl.w	r3, r2, r3
 8009852:	43da      	mvns	r2, r3
 8009854:	4b18      	ldr	r3, [pc, #96]	; (80098b8 <xTaskPriorityDisinherit+0x104>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4013      	ands	r3, r2
 800985a:	4a17      	ldr	r2, [pc, #92]	; (80098b8 <xTaskPriorityDisinherit+0x104>)
 800985c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	f1c3 0207 	rsb	r2, r3, #7
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009876:	2201      	movs	r2, #1
 8009878:	409a      	lsls	r2, r3
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <xTaskPriorityDisinherit+0x104>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4313      	orrs	r3, r2
 8009880:	4a0d      	ldr	r2, [pc, #52]	; (80098b8 <xTaskPriorityDisinherit+0x104>)
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009888:	4613      	mov	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4a08      	ldr	r2, [pc, #32]	; (80098b4 <xTaskPriorityDisinherit+0x100>)
 8009892:	441a      	add	r2, r3
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	3304      	adds	r3, #4
 8009898:	4619      	mov	r1, r3
 800989a:	4610      	mov	r0, r2
 800989c:	f7fe fa90 	bl	8007dc0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098a0:	2301      	movs	r3, #1
 80098a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098a4:	697b      	ldr	r3, [r7, #20]
	}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20025c58 	.word	0x20025c58
 80098b4:	20025c5c 	.word	0x20025c5c
 80098b8:	20025d60 	.word	0x20025d60

080098bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8081 	beq.w	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d109      	bne.n	80098f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e7fe      	b.n	80098f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d902      	bls.n	8009902 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	e002      	b.n	8009908 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009906:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	69fa      	ldr	r2, [r7, #28]
 800990e:	429a      	cmp	r2, r3
 8009910:	d062      	beq.n	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	429a      	cmp	r2, r3
 800991a:	d15d      	bne.n	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800991c:	4b30      	ldr	r3, [pc, #192]	; (80099e0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	429a      	cmp	r2, r3
 8009924:	d109      	bne.n	800993a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	60bb      	str	r3, [r7, #8]
 8009938:	e7fe      	b.n	8009938 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	69fa      	ldr	r2, [r7, #28]
 8009944:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	db04      	blt.n	8009958 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	f1c3 0207 	rsb	r2, r3, #7
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	6959      	ldr	r1, [r3, #20]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4a1f      	ldr	r2, [pc, #124]	; (80099e4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009968:	4413      	add	r3, r2
 800996a:	4299      	cmp	r1, r3
 800996c:	d134      	bne.n	80099d8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	3304      	adds	r3, #4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fa81 	bl	8007e7a <uxListRemove>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d115      	bne.n	80099aa <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009982:	4918      	ldr	r1, [pc, #96]	; (80099e4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <vTaskPriorityDisinheritAfterTimeout+0xee>
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	2201      	movs	r2, #1
 800999a:	fa02 f303 	lsl.w	r3, r2, r3
 800999e:	43da      	mvns	r2, r3
 80099a0:	4b11      	ldr	r3, [pc, #68]	; (80099e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4013      	ands	r3, r2
 80099a6:	4a10      	ldr	r2, [pc, #64]	; (80099e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80099a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ae:	2201      	movs	r2, #1
 80099b0:	409a      	lsls	r2, r3
 80099b2:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	4a0b      	ldr	r2, [pc, #44]	; (80099e8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4a06      	ldr	r2, [pc, #24]	; (80099e4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80099ca:	441a      	add	r2, r3
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	3304      	adds	r3, #4
 80099d0:	4619      	mov	r1, r3
 80099d2:	4610      	mov	r0, r2
 80099d4:	f7fe f9f4 	bl	8007dc0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099d8:	bf00      	nop
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20025c58 	.word	0x20025c58
 80099e4:	20025c5c 	.word	0x20025c5c
 80099e8:	20025d60 	.word	0x20025d60

080099ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099ec:	b480      	push	{r7}
 80099ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <pvTaskIncrementMutexHeldCount+0x24>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <pvTaskIncrementMutexHeldCount+0x24>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099fe:	3201      	adds	r2, #1
 8009a00:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009a02:	4b03      	ldr	r3, [pc, #12]	; (8009a10 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a04:	681b      	ldr	r3, [r3, #0]
	}
 8009a06:	4618      	mov	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20025c58 	.word	0x20025c58

08009a14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a1e:	4b29      	ldr	r3, [pc, #164]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a24:	4b28      	ldr	r3, [pc, #160]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fa25 	bl	8007e7a <uxListRemove>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a36:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	43da      	mvns	r2, r3
 8009a44:	4b21      	ldr	r3, [pc, #132]	; (8009acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	4a20      	ldr	r2, [pc, #128]	; (8009acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d10a      	bne.n	8009a6c <prvAddCurrentTaskToDelayedList+0x58>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d007      	beq.n	8009a6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4619      	mov	r1, r3
 8009a64:	481a      	ldr	r0, [pc, #104]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a66:	f7fe f9ab 	bl	8007dc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a6a:	e026      	b.n	8009aba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a74:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d209      	bcs.n	8009a98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a84:	4b13      	ldr	r3, [pc, #76]	; (8009ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4610      	mov	r0, r2
 8009a92:	f7fe f9b9 	bl	8007e08 <vListInsert>
}
 8009a96:	e010      	b.n	8009aba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fe f9af 	bl	8007e08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d202      	bcs.n	8009aba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ab4:	4a09      	ldr	r2, [pc, #36]	; (8009adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	6013      	str	r3, [r2, #0]
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20025d5c 	.word	0x20025d5c
 8009ac8:	20025c58 	.word	0x20025c58
 8009acc:	20025d60 	.word	0x20025d60
 8009ad0:	20025d44 	.word	0x20025d44
 8009ad4:	20025d14 	.word	0x20025d14
 8009ad8:	20025d10 	.word	0x20025d10
 8009adc:	20025d78 	.word	0x20025d78

08009ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3b04      	subs	r3, #4
 8009af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3b04      	subs	r3, #4
 8009afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f023 0201 	bic.w	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b10:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <pxPortInitialiseStack+0x64>)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3b14      	subs	r3, #20
 8009b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3b04      	subs	r3, #4
 8009b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f06f 0202 	mvn.w	r2, #2
 8009b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3b20      	subs	r3, #32
 8009b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b36:	68fb      	ldr	r3, [r7, #12]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	08009b49 	.word	0x08009b49

08009b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b52:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <prvTaskExitError+0x50>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d009      	beq.n	8009b70 <prvTaskExitError+0x28>
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	e7fe      	b.n	8009b6e <prvTaskExitError+0x26>
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b82:	bf00      	nop
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0fc      	beq.n	8009b84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	20000078 	.word	0x20000078
 8009b9c:	00000000 	.word	0x00000000

08009ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ba0:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <pxCurrentTCBConst2>)
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f380 8809 	msr	PSP, r0
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f380 8811 	msr	BASEPRI, r0
 8009bba:	4770      	bx	lr
 8009bbc:	f3af 8000 	nop.w

08009bc0 <pxCurrentTCBConst2>:
 8009bc0:	20025c58 	.word	0x20025c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bc8:	4808      	ldr	r0, [pc, #32]	; (8009bec <prvPortStartFirstTask+0x24>)
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	f380 8808 	msr	MSP, r0
 8009bd2:	f04f 0000 	mov.w	r0, #0
 8009bd6:	f380 8814 	msr	CONTROL, r0
 8009bda:	b662      	cpsie	i
 8009bdc:	b661      	cpsie	f
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	df00      	svc	0
 8009be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bea:	bf00      	nop
 8009bec:	e000ed08 	.word	0xe000ed08

08009bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bf6:	4b44      	ldr	r3, [pc, #272]	; (8009d08 <xPortStartScheduler+0x118>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a44      	ldr	r2, [pc, #272]	; (8009d0c <xPortStartScheduler+0x11c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d109      	bne.n	8009c14 <xPortStartScheduler+0x24>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	613b      	str	r3, [r7, #16]
 8009c12:	e7fe      	b.n	8009c12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c14:	4b3c      	ldr	r3, [pc, #240]	; (8009d08 <xPortStartScheduler+0x118>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a3d      	ldr	r2, [pc, #244]	; (8009d10 <xPortStartScheduler+0x120>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d109      	bne.n	8009c32 <xPortStartScheduler+0x42>
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	e7fe      	b.n	8009c30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c32:	4b38      	ldr	r3, [pc, #224]	; (8009d14 <xPortStartScheduler+0x124>)
 8009c34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	22ff      	movs	r2, #255	; 0xff
 8009c42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	4b30      	ldr	r3, [pc, #192]	; (8009d18 <xPortStartScheduler+0x128>)
 8009c58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c5a:	4b30      	ldr	r3, [pc, #192]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009c5c:	2207      	movs	r2, #7
 8009c5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c60:	e009      	b.n	8009c76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009c62:	4b2e      	ldr	r3, [pc, #184]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	4a2c      	ldr	r2, [pc, #176]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009c6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7e:	2b80      	cmp	r3, #128	; 0x80
 8009c80:	d0ef      	beq.n	8009c62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f1c3 0307 	rsb	r3, r3, #7
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d009      	beq.n	8009ca2 <xPortStartScheduler+0xb2>
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60bb      	str	r3, [r7, #8]
 8009ca0:	e7fe      	b.n	8009ca0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ca2:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009caa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cb4:	4a19      	ldr	r2, [pc, #100]	; (8009d1c <xPortStartScheduler+0x12c>)
 8009cb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cc0:	4b17      	ldr	r3, [pc, #92]	; (8009d20 <xPortStartScheduler+0x130>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <xPortStartScheduler+0x130>)
 8009cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ccc:	4b14      	ldr	r3, [pc, #80]	; (8009d20 <xPortStartScheduler+0x130>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <xPortStartScheduler+0x130>)
 8009cd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009cd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cd8:	f000 f8d6 	bl	8009e88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cdc:	4b11      	ldr	r3, [pc, #68]	; (8009d24 <xPortStartScheduler+0x134>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ce2:	f000 f8f5 	bl	8009ed0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ce6:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <xPortStartScheduler+0x138>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a0f      	ldr	r2, [pc, #60]	; (8009d28 <xPortStartScheduler+0x138>)
 8009cec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cf2:	f7ff ff69 	bl	8009bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cf6:	f7ff fa63 	bl	80091c0 <vTaskSwitchContext>
	prvTaskExitError();
 8009cfa:	f7ff ff25 	bl	8009b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	e000ed00 	.word	0xe000ed00
 8009d0c:	410fc271 	.word	0x410fc271
 8009d10:	410fc270 	.word	0x410fc270
 8009d14:	e000e400 	.word	0xe000e400
 8009d18:	20025d84 	.word	0x20025d84
 8009d1c:	20025d88 	.word	0x20025d88
 8009d20:	e000ed20 	.word	0xe000ed20
 8009d24:	20000078 	.word	0x20000078
 8009d28:	e000ef34 	.word	0xe000ef34

08009d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <vPortEnterCritical+0x54>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	4a0d      	ldr	r2, [pc, #52]	; (8009d80 <vPortEnterCritical+0x54>)
 8009d4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <vPortEnterCritical+0x54>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d10e      	bne.n	8009d74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <vPortEnterCritical+0x58>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d009      	beq.n	8009d74 <vPortEnterCritical+0x48>
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	603b      	str	r3, [r7, #0]
 8009d72:	e7fe      	b.n	8009d72 <vPortEnterCritical+0x46>
	}
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20000078 	.word	0x20000078
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d8e:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <vPortExitCritical+0x22>
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	e7fe      	b.n	8009da8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009daa:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009db2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <vPortExitCritical+0x4c>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d104      	bne.n	8009dc6 <vPortExitCritical+0x3e>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20000078 	.word	0x20000078
	...

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f01e 0f10 	tst.w	lr, #16
 8009df0:	bf08      	it	eq
 8009df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfa:	6010      	str	r0, [r2, #0]
 8009dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e04:	f380 8811 	msr	BASEPRI, r0
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f7ff f9d6 	bl	80091c0 <vTaskSwitchContext>
 8009e14:	f04f 0000 	mov.w	r0, #0
 8009e18:	f380 8811 	msr	BASEPRI, r0
 8009e1c:	bc09      	pop	{r0, r3}
 8009e1e:	6819      	ldr	r1, [r3, #0]
 8009e20:	6808      	ldr	r0, [r1, #0]
 8009e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e26:	f01e 0f10 	tst.w	lr, #16
 8009e2a:	bf08      	it	eq
 8009e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e30:	f380 8809 	msr	PSP, r0
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst>:
 8009e40:	20025c58 	.word	0x20025c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e60:	f7ff f8f6 	bl	8009050 <xTaskIncrementTick>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <SysTick_Handler+0x3c>)
 8009e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	2300      	movs	r3, #0
 8009e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <vPortSetupTimerInterrupt+0x34>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e92:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <vPortSetupTimerInterrupt+0x38>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <vPortSetupTimerInterrupt+0x3c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a0a      	ldr	r2, [pc, #40]	; (8009ec8 <vPortSetupTimerInterrupt+0x40>)
 8009e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea2:	099b      	lsrs	r3, r3, #6
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <vPortSetupTimerInterrupt+0x44>)
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eaa:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <vPortSetupTimerInterrupt+0x34>)
 8009eac:	2207      	movs	r2, #7
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	e000e010 	.word	0xe000e010
 8009ec0:	e000e018 	.word	0xe000e018
 8009ec4:	20000004 	.word	0x20000004
 8009ec8:	10624dd3 	.word	0x10624dd3
 8009ecc:	e000e014 	.word	0xe000e014

08009ed0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ed0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ee0 <vPortEnableVFP+0x10>
 8009ed4:	6801      	ldr	r1, [r0, #0]
 8009ed6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009eda:	6001      	str	r1, [r0, #0]
 8009edc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ede:	bf00      	nop
 8009ee0:	e000ed88 	.word	0xe000ed88

08009ee4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009eea:	f3ef 8305 	mrs	r3, IPSR
 8009eee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b0f      	cmp	r3, #15
 8009ef4:	d913      	bls.n	8009f1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ef6:	4a16      	ldr	r2, [pc, #88]	; (8009f50 <vPortValidateInterruptPriority+0x6c>)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f00:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <vPortValidateInterruptPriority+0x70>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	7afa      	ldrb	r2, [r7, #11]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d209      	bcs.n	8009f1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	607b      	str	r3, [r7, #4]
 8009f1c:	e7fe      	b.n	8009f1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f1e:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <vPortValidateInterruptPriority+0x74>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f26:	4b0d      	ldr	r3, [pc, #52]	; (8009f5c <vPortValidateInterruptPriority+0x78>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d909      	bls.n	8009f42 <vPortValidateInterruptPriority+0x5e>
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	603b      	str	r3, [r7, #0]
 8009f40:	e7fe      	b.n	8009f40 <vPortValidateInterruptPriority+0x5c>
	}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	e000e3f0 	.word	0xe000e3f0
 8009f54:	20025d84 	.word	0x20025d84
 8009f58:	e000ed0c 	.word	0xe000ed0c
 8009f5c:	20025d88 	.word	0x20025d88

08009f60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f6c:	f7fe ffc6 	bl	8008efc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f70:	4b59      	ldr	r3, [pc, #356]	; (800a0d8 <pvPortMalloc+0x178>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f78:	f000 f910 	bl	800a19c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f7c:	4b57      	ldr	r3, [pc, #348]	; (800a0dc <pvPortMalloc+0x17c>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4013      	ands	r3, r2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 808c 	bne.w	800a0a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01c      	beq.n	8009fca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f90:	2208      	movs	r2, #8
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f003 0307 	and.w	r3, r3, #7
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d013      	beq.n	8009fca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f023 0307 	bic.w	r3, r3, #7
 8009fa8:	3308      	adds	r3, #8
 8009faa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d009      	beq.n	8009fca <pvPortMalloc+0x6a>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	e7fe      	b.n	8009fc8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d068      	beq.n	800a0a2 <pvPortMalloc+0x142>
 8009fd0:	4b43      	ldr	r3, [pc, #268]	; (800a0e0 <pvPortMalloc+0x180>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d863      	bhi.n	800a0a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009fda:	4b42      	ldr	r3, [pc, #264]	; (800a0e4 <pvPortMalloc+0x184>)
 8009fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009fde:	4b41      	ldr	r3, [pc, #260]	; (800a0e4 <pvPortMalloc+0x184>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009fe4:	e004      	b.n	8009ff0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d903      	bls.n	800a002 <pvPortMalloc+0xa2>
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f1      	bne.n	8009fe6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a002:	4b35      	ldr	r3, [pc, #212]	; (800a0d8 <pvPortMalloc+0x178>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a008:	429a      	cmp	r2, r3
 800a00a:	d04a      	beq.n	800a0a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2208      	movs	r2, #8
 800a012:	4413      	add	r3, r2
 800a014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	1ad2      	subs	r2, r2, r3
 800a026:	2308      	movs	r3, #8
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d91e      	bls.n	800a06c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4413      	add	r3, r2
 800a034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d009      	beq.n	800a054 <pvPortMalloc+0xf4>
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	613b      	str	r3, [r7, #16]
 800a052:	e7fe      	b.n	800a052 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	1ad2      	subs	r2, r2, r3
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a066:	69b8      	ldr	r0, [r7, #24]
 800a068:	f000 f8fa 	bl	800a260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a06c:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <pvPortMalloc+0x180>)
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	4a1a      	ldr	r2, [pc, #104]	; (800a0e0 <pvPortMalloc+0x180>)
 800a078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a07a:	4b19      	ldr	r3, [pc, #100]	; (800a0e0 <pvPortMalloc+0x180>)
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <pvPortMalloc+0x188>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d203      	bcs.n	800a08e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <pvPortMalloc+0x180>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a17      	ldr	r2, [pc, #92]	; (800a0e8 <pvPortMalloc+0x188>)
 800a08c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <pvPortMalloc+0x17c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	431a      	orrs	r2, r3
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0a2:	f7fe ff39 	bl	8008f18 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a0ac:	f7f6 fc18 	bl	80008e0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <pvPortMalloc+0x16e>
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e7fe      	b.n	800a0cc <pvPortMalloc+0x16c>
	return pvReturn;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3728      	adds	r7, #40	; 0x28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	2002dd94 	.word	0x2002dd94
 800a0dc:	2002dda0 	.word	0x2002dda0
 800a0e0:	2002dd98 	.word	0x2002dd98
 800a0e4:	2002dd8c 	.word	0x2002dd8c
 800a0e8:	2002dd9c 	.word	0x2002dd9c

0800a0ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d046      	beq.n	800a18c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a0fe:	2308      	movs	r3, #8
 800a100:	425b      	negs	r3, r3
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4413      	add	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	4b20      	ldr	r3, [pc, #128]	; (800a194 <vPortFree+0xa8>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4013      	ands	r3, r2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d109      	bne.n	800a12e <vPortFree+0x42>
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	e7fe      	b.n	800a12c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <vPortFree+0x5e>
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60bb      	str	r3, [r7, #8]
 800a148:	e7fe      	b.n	800a148 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	4b11      	ldr	r3, [pc, #68]	; (800a194 <vPortFree+0xa8>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4013      	ands	r3, r2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d019      	beq.n	800a18c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d115      	bne.n	800a18c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <vPortFree+0xa8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	43db      	mvns	r3, r3
 800a16a:	401a      	ands	r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a170:	f7fe fec4 	bl	8008efc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <vPortFree+0xac>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4413      	add	r3, r2
 800a17e:	4a06      	ldr	r2, [pc, #24]	; (800a198 <vPortFree+0xac>)
 800a180:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a182:	6938      	ldr	r0, [r7, #16]
 800a184:	f000 f86c 	bl	800a260 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a188:	f7fe fec6 	bl	8008f18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a18c:	bf00      	nop
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	2002dda0 	.word	0x2002dda0
 800a198:	2002dd98 	.word	0x2002dd98

0800a19c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1a8:	4b27      	ldr	r3, [pc, #156]	; (800a248 <prvHeapInit+0xac>)
 800a1aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f003 0307 	and.w	r3, r3, #7
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00c      	beq.n	800a1d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3307      	adds	r3, #7
 800a1ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 0307 	bic.w	r3, r3, #7
 800a1c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	4a1f      	ldr	r2, [pc, #124]	; (800a248 <prvHeapInit+0xac>)
 800a1cc:	4413      	add	r3, r2
 800a1ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a1d4:	4a1d      	ldr	r2, [pc, #116]	; (800a24c <prvHeapInit+0xb0>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a1da:	4b1c      	ldr	r3, [pc, #112]	; (800a24c <prvHeapInit+0xb0>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4a15      	ldr	r2, [pc, #84]	; (800a250 <prvHeapInit+0xb4>)
 800a1fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1fe:	4b14      	ldr	r3, [pc, #80]	; (800a250 <prvHeapInit+0xb4>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2200      	movs	r2, #0
 800a204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a206:	4b12      	ldr	r3, [pc, #72]	; (800a250 <prvHeapInit+0xb4>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a21c:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <prvHeapInit+0xb4>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	4a0a      	ldr	r2, [pc, #40]	; (800a254 <prvHeapInit+0xb8>)
 800a22a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	4a09      	ldr	r2, [pc, #36]	; (800a258 <prvHeapInit+0xbc>)
 800a232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <prvHeapInit+0xc0>)
 800a236:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a23a:	601a      	str	r2, [r3, #0]
}
 800a23c:	bf00      	nop
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20025d8c 	.word	0x20025d8c
 800a24c:	2002dd8c 	.word	0x2002dd8c
 800a250:	2002dd94 	.word	0x2002dd94
 800a254:	2002dd9c 	.word	0x2002dd9c
 800a258:	2002dd98 	.word	0x2002dd98
 800a25c:	2002dda0 	.word	0x2002dda0

0800a260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a268:	4b28      	ldr	r3, [pc, #160]	; (800a30c <prvInsertBlockIntoFreeList+0xac>)
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	e002      	b.n	800a274 <prvInsertBlockIntoFreeList+0x14>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d8f7      	bhi.n	800a26e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	4413      	add	r3, r2
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d108      	bne.n	800a2a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	441a      	add	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	441a      	add	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d118      	bne.n	800a2e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b15      	ldr	r3, [pc, #84]	; (800a310 <prvInsertBlockIntoFreeList+0xb0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d00d      	beq.n	800a2de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	441a      	add	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	e008      	b.n	800a2f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2de:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <prvInsertBlockIntoFreeList+0xb0>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	e003      	b.n	800a2f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d002      	beq.n	800a2fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2fe:	bf00      	nop
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	2002dd8c 	.word	0x2002dd8c
 800a310:	2002dd94 	.word	0x2002dd94

0800a314 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800a318:	f003 fa3a 	bl	800d790 <touchgfx_init>
}
 800a31c:	bf00      	nop
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800a328:	f003 fa5c 	bl	800d7e4 <touchgfx_taskEntry>
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
    {
 800a33c:	4a04      	ldr	r2, [pc, #16]	; (800a350 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
    }
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	0801e494 	.word	0x0801e494

0800a354 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
    }
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff ffe9 	bl	800a334 <_ZN8touchgfx12FontProviderD1Ev>
 800a362:	2104      	movs	r1, #4
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f012 fe79 	bl	801d05c <_ZdlPvj>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800a380:	887b      	ldrh	r3, [r7, #2]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d008      	beq.n	800a398 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800a386:	2b02      	cmp	r3, #2
 800a388:	d00b      	beq.n	800a3a2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10e      	bne.n	800a3ac <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800a38e:	f001 fd59 	bl	800be44 <_ZN17TypedTextDatabase8getFontsEv>
 800a392:	4603      	mov	r3, r0
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	e00a      	b.n	800a3ae <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800a398:	f001 fd54 	bl	800be44 <_ZN17TypedTextDatabase8getFontsEv>
 800a39c:	4603      	mov	r3, r0
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	e005      	b.n	800a3ae <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800a3a2:	f001 fd4f 	bl	800be44 <_ZN17TypedTextDatabase8getFontsEv>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	e000      	b.n	800a3ae <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800a3ac:	2300      	movs	r3, #0
    }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	4a05      	ldr	r2, [pc, #20]	; (800a3d8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff ffb3 	bl	800a334 <_ZN8touchgfx12FontProviderD1Ev>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	0801e480 	.word	0x0801e480

0800a3dc <_ZN23ApplicationFontProviderD0Ev>:
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ffe7 	bl	800a3b8 <_ZN23ApplicationFontProviderD1Ev>
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f012 fe35 	bl	801d05c <_ZdlPvj>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	4a04      	ldr	r2, [pc, #16]	; (800a418 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	0801fbb4 	.word	0x0801fbb4

0800a41c <_ZN8touchgfx4FontD0Ev>:
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ffe9 	bl	800a3fc <_ZN8touchgfx4FontD1Ev>
 800a42a:	2110      	movs	r1, #16
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f012 fe15 	bl	801d05c <_ZdlPvj>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	681c      	ldr	r4, [r3, #0]
 800a458:	f107 030f 	add.w	r3, r7, #15
 800a45c:	f107 0210 	add.w	r2, r7, #16
 800a460:	8879      	ldrh	r1, [r7, #2]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	47a0      	blx	r4
 800a466:	6178      	str	r0, [r7, #20]
        return glyph;
 800a468:	697b      	ldr	r3, [r7, #20]
    }
 800a46a:	4618      	mov	r0, r3
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd90      	pop	{r4, r7, pc}

0800a472 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	895b      	ldrh	r3, [r3, #10]
    }
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a48a:	b480      	push	{r7}
 800a48c:	b083      	sub	sp, #12
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	899b      	ldrh	r3, [r3, #12]
    }
 800a496:	4618      	mov	r0, r3
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	889b      	ldrh	r3, [r3, #4]
    }
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	889a      	ldrh	r2, [r3, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	799b      	ldrb	r3, [r3, #6]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	b29b      	uxth	r3, r3
    }
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	79db      	ldrb	r3, [r3, #7]
 800a4e8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a4ec:	b2db      	uxtb	r3, r3
    }
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	79db      	ldrb	r3, [r3, #7]
 800a506:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a50a:	b2db      	uxtb	r3, r3
    }
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	4a05      	ldr	r2, [pc, #20]	; (800a538 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff ff67 	bl	800a3fc <_ZN8touchgfx4FontD1Ev>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	0801fc6c 	.word	0x0801fc6c

0800a53c <_ZN8touchgfx9ConstFontD0Ev>:
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff ffe7 	bl	800a518 <_ZN8touchgfx9ConstFontD1Ev>
 800a54a:	2118      	movs	r1, #24
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f012 fd85 	bl	801d05c <_ZdlPvj>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	4a05      	ldr	r2, [pc, #20]	; (800a57c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff ffd3 	bl	800a518 <_ZN8touchgfx9ConstFontD1Ev>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	0801e4a8 	.word	0x0801e4a8

0800a580 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ffe7 	bl	800a55c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a58e:	2124      	movs	r1, #36	; 0x24
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f012 fd63 	bl	801d05c <_ZdlPvj>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7b5b      	ldrb	r3, [r3, #13]
 800a5ac:	021b      	lsls	r3, r3, #8
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5b4:	b21a      	sxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	7adb      	ldrb	r3, [r3, #11]
 800a5ba:	b21b      	sxth	r3, r3
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	b21b      	sxth	r3, r3
 800a5c0:	b29b      	uxth	r3, r3
    }
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
    }
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
	...

0800a5e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08c      	sub	sp, #48	; 0x30
 800a5ec:	af08      	add	r7, sp, #32
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	80fb      	strh	r3, [r7, #6]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	88b9      	ldrh	r1, [r7, #4]
 800a602:	88fa      	ldrh	r2, [r7, #6]
 800a604:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a606:	9306      	str	r3, [sp, #24]
 800a608:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a616:	9303      	str	r3, [sp, #12]
 800a618:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a61c:	9302      	str	r3, [sp, #8]
 800a61e:	7f3b      	ldrb	r3, [r7, #28]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	7e3b      	ldrb	r3, [r7, #24]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	460b      	mov	r3, r1
 800a628:	68b9      	ldr	r1, [r7, #8]
 800a62a:	f005 ffe3 	bl	80105f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800a62e:	4a08      	ldr	r2, [pc, #32]	; (800a650 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a638:	619a      	str	r2, [r3, #24]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a63e:	61da      	str	r2, [r3, #28]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a644:	621a      	str	r2, [r3, #32]
{
}
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	0801e4a8 	.word	0x0801e4a8

0800a654 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	889b      	ldrh	r3, [r3, #4]
 800a668:	0adb      	lsrs	r3, r3, #11
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4413      	add	r3, r2
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	460b      	mov	r3, r1
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	7b1b      	ldrb	r3, [r3, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e023      	b.n	800a6ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7ff ff7a 	bl	800a5a0 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a6b0:	8abb      	ldrh	r3, [r7, #20]
 800a6b2:	82fb      	strh	r3, [r7, #22]
 800a6b4:	8afa      	ldrh	r2, [r7, #22]
 800a6b6:	8abb      	ldrh	r3, [r7, #20]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	7b09      	ldrb	r1, [r1, #12]
 800a6bc:	440b      	add	r3, r1
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	da14      	bge.n	800a6ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	69da      	ldr	r2, [r3, #28]
 800a6c6:	8afb      	ldrh	r3, [r7, #22]
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	897a      	ldrh	r2, [r7, #10]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d107      	bne.n	800a6e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	69da      	ldr	r2, [r3, #28]
 800a6d8:	8afb      	ldrh	r3, [r7, #22]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a6e2:	e004      	b.n	800a6ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a6e4:	8afb      	ldrh	r3, [r7, #22]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	82fb      	strh	r3, [r7, #22]
 800a6ea:	e7e3      	b.n	800a6b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__tcf_0+0xc>)
 800a6fe:	f7ff ff2d 	bl	800a55c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a702:	bd80      	pop	{r7, pc}
 800a704:	2002dda4 	.word	0x2002dda4

0800a708 <_Z23getFont_verdana_10_4bppv>:
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08a      	sub	sp, #40	; 0x28
 800a70c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a70e:	4b15      	ldr	r3, [pc, #84]	; (800a764 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d11f      	bne.n	800a75a <_Z23getFont_verdana_10_4bppv+0x52>
 800a71a:	2300      	movs	r3, #0
 800a71c:	9309      	str	r3, [sp, #36]	; 0x24
 800a71e:	2300      	movs	r3, #0
 800a720:	9308      	str	r3, [sp, #32]
 800a722:	233f      	movs	r3, #63	; 0x3f
 800a724:	9307      	str	r3, [sp, #28]
 800a726:	4b10      	ldr	r3, [pc, #64]	; (800a768 <_Z23getFont_verdana_10_4bppv+0x60>)
 800a728:	9306      	str	r3, [sp, #24]
 800a72a:	4b10      	ldr	r3, [pc, #64]	; (800a76c <_Z23getFont_verdana_10_4bppv+0x64>)
 800a72c:	9305      	str	r3, [sp, #20]
 800a72e:	2300      	movs	r3, #0
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	2300      	movs	r3, #0
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	2301      	movs	r3, #1
 800a738:	9302      	str	r3, [sp, #8]
 800a73a:	2304      	movs	r3, #4
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	2300      	movs	r3, #0
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	230a      	movs	r3, #10
 800a744:	2201      	movs	r2, #1
 800a746:	490a      	ldr	r1, [pc, #40]	; (800a770 <_Z23getFont_verdana_10_4bppv+0x68>)
 800a748:	480a      	ldr	r0, [pc, #40]	; (800a774 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800a74a:	f7ff ff4d 	bl	800a5e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a750:	2201      	movs	r2, #1
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	4808      	ldr	r0, [pc, #32]	; (800a778 <_Z23getFont_verdana_10_4bppv+0x70>)
 800a756:	f012 fccb 	bl	801d0f0 <atexit>
    return verdana_10_4bpp;
 800a75a:	4b06      	ldr	r3, [pc, #24]	; (800a774 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	2002ddc8 	.word	0x2002ddc8
 800a768:	08021380 	.word	0x08021380
 800a76c:	0801e4f4 	.word	0x0801e4f4
 800a770:	0802138c 	.word	0x0802138c
 800a774:	2002dda4 	.word	0x2002dda4
 800a778:	0800a6f9 	.word	0x0800a6f9

0800a77c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__tcf_0+0xc>)
 800a782:	f7ff feeb 	bl	800a55c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a786:	bd80      	pop	{r7, pc}
 800a788:	2002ddcc 	.word	0x2002ddcc

0800a78c <_Z23getFont_verdana_20_4bppv>:
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08a      	sub	sp, #40	; 0x28
 800a790:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a792:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d11f      	bne.n	800a7de <_Z23getFont_verdana_20_4bppv+0x52>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9308      	str	r3, [sp, #32]
 800a7a6:	233f      	movs	r3, #63	; 0x3f
 800a7a8:	9307      	str	r3, [sp, #28]
 800a7aa:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <_Z23getFont_verdana_20_4bppv+0x60>)
 800a7ac:	9306      	str	r3, [sp, #24]
 800a7ae:	4b10      	ldr	r3, [pc, #64]	; (800a7f0 <_Z23getFont_verdana_20_4bppv+0x64>)
 800a7b0:	9305      	str	r3, [sp, #20]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	9302      	str	r3, [sp, #8]
 800a7be:	2304      	movs	r3, #4
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	2314      	movs	r3, #20
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	490a      	ldr	r1, [pc, #40]	; (800a7f4 <_Z23getFont_verdana_20_4bppv+0x68>)
 800a7cc:	480a      	ldr	r0, [pc, #40]	; (800a7f8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800a7ce:	f7ff ff0b 	bl	800a5e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a7d2:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	4808      	ldr	r0, [pc, #32]	; (800a7fc <_Z23getFont_verdana_20_4bppv+0x70>)
 800a7da:	f012 fc89 	bl	801d0f0 <atexit>
    return verdana_20_4bpp;
 800a7de:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	2002ddf0 	.word	0x2002ddf0
 800a7ec:	08021384 	.word	0x08021384
 800a7f0:	0801e4f8 	.word	0x0801e4f8
 800a7f4:	0802139c 	.word	0x0802139c
 800a7f8:	2002ddcc 	.word	0x2002ddcc
 800a7fc:	0800a77d 	.word	0x0800a77d

0800a800 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
 800a804:	4801      	ldr	r0, [pc, #4]	; (800a80c <__tcf_0+0xc>)
 800a806:	f7ff fea9 	bl	800a55c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	2002ddf4 	.word	0x2002ddf4

0800a810 <_Z23getFont_verdana_40_4bppv>:
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a816:	4b15      	ldr	r3, [pc, #84]	; (800a86c <_Z23getFont_verdana_40_4bppv+0x5c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d11f      	bne.n	800a862 <_Z23getFont_verdana_40_4bppv+0x52>
 800a822:	2300      	movs	r3, #0
 800a824:	9309      	str	r3, [sp, #36]	; 0x24
 800a826:	2300      	movs	r3, #0
 800a828:	9308      	str	r3, [sp, #32]
 800a82a:	233f      	movs	r3, #63	; 0x3f
 800a82c:	9307      	str	r3, [sp, #28]
 800a82e:	4b10      	ldr	r3, [pc, #64]	; (800a870 <_Z23getFont_verdana_40_4bppv+0x60>)
 800a830:	9306      	str	r3, [sp, #24]
 800a832:	4b10      	ldr	r3, [pc, #64]	; (800a874 <_Z23getFont_verdana_40_4bppv+0x64>)
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	2300      	movs	r3, #0
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	2300      	movs	r3, #0
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	2301      	movs	r3, #1
 800a840:	9302      	str	r3, [sp, #8]
 800a842:	2304      	movs	r3, #4
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	2300      	movs	r3, #0
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	2328      	movs	r3, #40	; 0x28
 800a84c:	2201      	movs	r2, #1
 800a84e:	490a      	ldr	r1, [pc, #40]	; (800a878 <_Z23getFont_verdana_40_4bppv+0x68>)
 800a850:	480a      	ldr	r0, [pc, #40]	; (800a87c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800a852:	f7ff fec9 	bl	800a5e8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a856:	4b05      	ldr	r3, [pc, #20]	; (800a86c <_Z23getFont_verdana_40_4bppv+0x5c>)
 800a858:	2201      	movs	r2, #1
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	4808      	ldr	r0, [pc, #32]	; (800a880 <_Z23getFont_verdana_40_4bppv+0x70>)
 800a85e:	f012 fc47 	bl	801d0f0 <atexit>
    return verdana_40_4bpp;
 800a862:	4b06      	ldr	r3, [pc, #24]	; (800a87c <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800a864:	4618      	mov	r0, r3
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	2002de18 	.word	0x2002de18
 800a870:	08021388 	.word	0x08021388
 800a874:	0801e4fc 	.word	0x0801e4fc
 800a878:	080213ac 	.word	0x080213ac
 800a87c:	2002ddf4 	.word	0x2002ddf4
 800a880:	0800a801 	.word	0x0800a801

0800a884 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
    {
    }
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	6039      	str	r1, [r7, #0]
    {
    }
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
    {
    }
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70fb      	strb	r3, [r7, #3]
    {
    }
 800a8ea:	bf00      	nop
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
    {
    }
 800a8fe:	bf00      	nop
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
    {
    }
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
	...

0800a920 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
    {
 800a928:	4a04      	ldr	r2, [pc, #16]	; (800a93c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	601a      	str	r2, [r3, #0]
    }
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	0801e5f0 	.word	0x0801e5f0

0800a940 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
    }
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff ffe9 	bl	800a920 <_ZN8touchgfx15UIEventListenerD1Ev>
 800a94e:	2104      	movs	r1, #4
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f012 fb83 	bl	801d05c <_ZdlPvj>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800a968:	4a07      	ldr	r2, [pc, #28]	; (800a988 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	605a      	str	r2, [r3, #4]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	721a      	strb	r2, [r3, #8]
    {
    }
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4618      	mov	r0, r3
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	0801e5d0 	.word	0x0801e5d0

0800a98c <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
    {
 800a994:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]
    }
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4618      	mov	r0, r3
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	0801e5d0 	.word	0x0801e5d0

0800a9ac <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
    }
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff ffe9 	bl	800a98c <_ZN8touchgfx10TransitionD1Ev>
 800a9ba:	210c      	movs	r1, #12
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f012 fb4d 	bl	801d05c <_ZdlPvj>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	605a      	str	r2, [r3, #4]
    }
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
    {
 800aa44:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
    }
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	0801e5b8 	.word	0x0801e5b8

0800aa5c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
    }
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff ffe9 	bl	800aa3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f012 faf5 	bl	801d05c <_ZdlPvj>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
    {
        return instance;
 800aa80:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800aa82:	681b      	ldr	r3, [r3, #0]
    }
 800aa84:	4618      	mov	r0, r3
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	2002edcc 	.word	0x2002edcc

0800aa94 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800aa94:	b480      	push	{r7}
 800aa96:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800aa98:	4b0b      	ldr	r3, [pc, #44]	; (800aac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d008      	beq.n	800aab6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800aaa4:	4b08      	ldr	r3, [pc, #32]	; (800aac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800aaae:	4b06      	ldr	r3, [pc, #24]	; (800aac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab4:	e002      	b.n	800aabc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800aab6:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
        }
    }
 800aabc:	4618      	mov	r0, r3
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	2002edcc 	.word	0x2002edcc

0800aacc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	4a05      	ldr	r2, [pc, #20]	; (800aaec <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4618      	mov	r0, r3
 800aade:	f7ff ff1f 	bl	800a920 <_ZN8touchgfx15UIEventListenerD1Ev>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	0801facc 	.word	0x0801facc

0800aaf0 <_ZN8touchgfx11ApplicationD0Ev>:
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff ffe7 	bl	800aacc <_ZN8touchgfx11ApplicationD1Ev>
 800aafe:	f44f 7198 	mov.w	r1, #304	; 0x130
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f012 faaa 	bl	801d05c <_ZdlPvj>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f005 f8a4 	bl	800fc6c <_ZN8touchgfx11ApplicationC1Ev>
 800ab24:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a04      	ldr	r2, [pc, #16]	; (800ab50 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ab3e:	6013      	str	r3, [r2, #0]
    }
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	0801e57c 	.word	0x0801e57c
 800ab50:	2002ee38 	.word	0x2002ee38

0800ab54 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	4a05      	ldr	r2, [pc, #20]	; (800ab74 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff ffb1 	bl	800aacc <_ZN8touchgfx11ApplicationD1Ev>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	0801e57c 	.word	0x0801e57c

0800ab78 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff ffe7 	bl	800ab54 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ab86:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f012 fa66 	bl	801d05c <_ZdlPvj>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b082      	sub	sp, #8
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f804 	bl	800abb0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00f      	beq.n	800abe2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	330c      	adds	r3, #12
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4610      	mov	r0, r2
 800abd6:	4798      	blx	r3
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800abe2:	2300      	movs	r3, #0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00e      	beq.n	800ac06 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3308      	adds	r3, #8
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800ac1a:	f005 f807 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4618      	mov	r0, r3
 800ac22:	f005 f809 	bl	800fc38 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d008      	beq.n	800ac40 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	330c      	adds	r3, #12
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4798      	blx	r3
    }
    if (*currentTrans)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d007      	beq.n	800ac58 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
    }
    if (*currentScreen)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d008      	beq.n	800ac72 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3314      	adds	r3, #20
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4798      	blx	r3
    }
    if (*currentPresenter)
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d008      	beq.n	800ac8c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3304      	adds	r3, #4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4798      	blx	r3
    }
    if (*currentScreen)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4610      	mov	r0, r2
 800aca2:	4798      	blx	r3
    }
    if (*currentPresenter)
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d008      	beq.n	800acbe <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3308      	adds	r3, #8
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4610      	mov	r0, r2
 800acbc:	4798      	blx	r3
    }
}
 800acbe:	bf00      	nop
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	330c      	adds	r3, #12
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	4798      	blx	r3
    newPresenter->activate();
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68b8      	ldr	r0, [r7, #8]
 800ace6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f006 f848 	bl	8010d80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3310      	adds	r3, #16
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	4798      	blx	r3

    Application::getInstance()->draw();
 800acfc:	f004 ff96 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6813      	ldr	r3, [r2, #0]
 800ad04:	3328      	adds	r3, #40	; 0x28
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	601a      	str	r2, [r3, #0]
    }
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	4a08      	ldr	r2, [pc, #32]	; (800ad5c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fa59 	bl	800b1fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7ff ff01 	bl	800ab54 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	0801e528 	.word	0x0801e528

0800ad60 <_ZN23FrontendApplicationBaseD0Ev>:
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff ffe1 	bl	800ad30 <_ZN23FrontendApplicationBaseD1Ev>
 800ad6e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f012 f972 	bl	801d05c <_ZdlPvj>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fde6 	bl	800a960 <_ZN8touchgfx10TransitionC1Ev>
 800ad94:	4a03      	ldr	r2, [pc, #12]	; (800ada4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	0801e508 	.word	0x0801e508

0800ada8 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	4a05      	ldr	r2, [pc, #20]	; (800adc8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff fde7 	bl	800a98c <_ZN8touchgfx10TransitionD1Ev>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	0801e508 	.word	0x0801e508

0800adcc <_ZN8touchgfx12NoTransitionD0Ev>:
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f7ff ffe7 	bl	800ada8 <_ZN8touchgfx12NoTransitionD1Ev>
 800adda:	210c      	movs	r1, #12
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f012 f93d 	bl	801d05c <_ZdlPvj>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	721a      	strb	r2, [r3, #8]
    }
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	605a      	str	r2, [r3, #4]
    }
 800ae16:	bf00      	nop
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
	...

0800ae24 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fe6e 	bl	800ab14 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ae38:	4a12      	ldr	r2, [pc, #72]	; (800ae84 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 f89d 	bl	800af84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800ae5a:	f7ff fe0f 	bl	800aa7c <_ZN8touchgfx3HAL11getInstanceEv>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	6813      	ldr	r3, [r2, #0]
 800ae62:	3308      	adds	r3, #8
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2101      	movs	r1, #1
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ae6c:	f7ff fe12 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800ae70:	4603      	mov	r3, r0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f00b f88d 	bl	8015f92 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	0801e528 	.word	0x0801e528

0800ae88 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	4611      	mov	r1, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff ffe9 	bl	800ae88 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	3208      	adds	r2, #8
 800aec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aeca:	e883 0003 	stmia.w	r3, {r0, r1}
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800aed8:	b590      	push	{r4, r7, lr}
 800aeda:	b089      	sub	sp, #36	; 0x24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800aee6:	4b10      	ldr	r3, [pc, #64]	; (800af28 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800aee8:	61bb      	str	r3, [r7, #24]
 800aeea:	2300      	movs	r3, #0
 800aeec:	61fb      	str	r3, [r7, #28]
 800aeee:	f107 0008 	add.w	r0, r7, #8
 800aef2:	f107 0318 	add.w	r3, r7, #24
 800aef6:	cb0c      	ldmia	r3, {r2, r3}
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	f000 f85f 	bl	800afbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	4619      	mov	r1, r3
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff ffcb 	bl	800aea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f974 	bl	800b1fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800af20:	bf00      	nop
 800af22:	3724      	adds	r7, #36	; 0x24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd90      	pop	{r4, r7, pc}
 800af28:	0800af2d 	.word	0x0800af2d

0800af2c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af02      	add	r7, sp, #8
 800af32:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800af40:	461a      	mov	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	4b04      	ldr	r3, [pc, #16]	; (800af5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800af4c:	4804      	ldr	r0, [pc, #16]	; (800af60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800af4e:	f000 f855 	bl	800affc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	2002ee2c 	.word	0x2002ee2c
 800af60:	2002ee28 	.word	0x2002ee28

0800af64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	4a04      	ldr	r2, [pc, #16]	; (800af80 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	0801e5b8 	.word	0x0801e5b8

0800af84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff ffe8 	bl	800af64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800af94:	4a08      	ldr	r2, [pc, #32]	; (800afb8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	605a      	str	r2, [r3, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	609a      	str	r2, [r3, #8]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	60da      	str	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4618      	mov	r0, r3
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	0801e564 	.word	0x0801e564

0800afbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	4639      	mov	r1, r7
 800afc8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff ffc8 	bl	800af64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800afd4:	4a08      	ldr	r2, [pc, #32]	; (800aff8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3308      	adds	r3, #8
 800afe4:	463a      	mov	r2, r7
 800afe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	0801e564 	.word	0x0801e564

0800affc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800affc:	b590      	push	{r4, r7, lr}
 800affe:	b089      	sub	sp, #36	; 0x24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3320      	adds	r3, #32
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4610      	mov	r0, r2
 800b01a:	4798      	blx	r3
 800b01c:	4603      	mov	r3, r0
 800b01e:	2bb3      	cmp	r3, #179	; 0xb3
 800b020:	d805      	bhi.n	800b02e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800b022:	4b4d      	ldr	r3, [pc, #308]	; (800b158 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800b024:	4a4d      	ldr	r2, [pc, #308]	; (800b15c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b026:	21c2      	movs	r1, #194	; 0xc2
 800b028:	484d      	ldr	r0, [pc, #308]	; (800b160 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b02a:	f012 f843 	bl	801d0b4 <__assert_func>
 800b02e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3320      	adds	r3, #32
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4610      	mov	r0, r2
 800b040:	4798      	blx	r3
 800b042:	4603      	mov	r3, r0
 800b044:	2b0f      	cmp	r3, #15
 800b046:	d805      	bhi.n	800b054 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b048:	4b46      	ldr	r3, [pc, #280]	; (800b164 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b04a:	4a44      	ldr	r2, [pc, #272]	; (800b15c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b04c:	21c3      	movs	r1, #195	; 0xc3
 800b04e:	4844      	ldr	r0, [pc, #272]	; (800b160 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b050:	f012 f830 	bl	801d0b4 <__assert_func>
 800b054:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3320      	adds	r3, #32
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	4603      	mov	r3, r0
 800b06a:	2b0b      	cmp	r3, #11
 800b06c:	d805      	bhi.n	800b07a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800b06e:	4b3e      	ldr	r3, [pc, #248]	; (800b168 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b070:	4a3a      	ldr	r2, [pc, #232]	; (800b15c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b072:	21c4      	movs	r1, #196	; 0xc4
 800b074:	483a      	ldr	r0, [pc, #232]	; (800b160 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b076:	f012 f81d 	bl	801d0b4 <__assert_func>
 800b07a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fdc4 	bl	800ac0e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 f86d 	bl	800b16c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800b092:	4603      	mov	r3, r0
 800b094:	4619      	mov	r1, r3
 800b096:	200c      	movs	r0, #12
 800b098:	f7ff fbf4 	bl	800a884 <_ZnwjPv>
 800b09c:	4604      	mov	r4, r0
 800b09e:	2c00      	cmp	r4, #0
 800b0a0:	d004      	beq.n	800b0ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7ff fe6e 	bl	800ad84 <_ZN8touchgfx12NoTransitionC1Ev>
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	e000      	b.n	800b0ae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800b0ac:	4623      	mov	r3, r4
 800b0ae:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f86b 	bl	800b192 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	4619      	mov	r1, r3
 800b0c0:	20b4      	movs	r0, #180	; 0xb4
 800b0c2:	f7ff fbdf 	bl	800a884 <_ZnwjPv>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2c00      	cmp	r4, #0
 800b0ca:	d004      	beq.n	800b0d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f001 f879 	bl	800c1c4 <_ZN11Screen1ViewC1Ev>
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	e000      	b.n	800b0d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800b0d6:	4623      	mov	r3, r4
 800b0d8:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 f869 	bl	800b1b8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	2010      	movs	r0, #16
 800b0ec:	f7ff fbca 	bl	800a884 <_ZnwjPv>
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	2c00      	cmp	r4, #0
 800b0f4:	d005      	beq.n	800b102 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 800b0f6:	69b9      	ldr	r1, [r7, #24]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 ffe7 	bl	800c0cc <_ZN16Screen1PresenterC1ER11Screen1View>
 800b0fe:	4623      	mov	r3, r4
 800b100:	e000      	b.n	800b104 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800b102:	4623      	mov	r3, r4
 800b104:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	3304      	adds	r3, #4
 800b122:	e000      	b.n	800b126 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800b124:	2300      	movs	r3, #0
 800b126:	4619      	mov	r1, r3
 800b128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b12a:	f7ff fdf3 	bl	800ad14 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	3304      	adds	r3, #4
 800b132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff fe66 	bl	800ae06 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	6979      	ldr	r1, [r7, #20]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f84d 	bl	800b1de <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b144:	69fa      	ldr	r2, [r7, #28]
 800b146:	6979      	ldr	r1, [r7, #20]
 800b148:	69b8      	ldr	r0, [r7, #24]
 800b14a:	f7ff fdbc 	bl	800acc6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800b14e:	697b      	ldr	r3, [r7, #20]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3724      	adds	r7, #36	; 0x24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd90      	pop	{r4, r7, pc}
 800b158:	0801e130 	.word	0x0801e130
 800b15c:	0801e610 	.word	0x0801e610
 800b160:	0801e1c0 	.word	0x0801e1c0
 800b164:	0801e204 	.word	0x0801e204
 800b168:	0801e2a8 	.word	0x0801e2a8

0800b16c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3324      	adds	r3, #36	; 0x24
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	887a      	ldrh	r2, [r7, #2]
 800b182:	4611      	mov	r1, r2
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
 800b188:	4603      	mov	r3, r0
    }
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	460b      	mov	r3, r1
 800b19c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3324      	adds	r3, #36	; 0x24
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	887a      	ldrh	r2, [r7, #2]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	4798      	blx	r3
 800b1ae:	4603      	mov	r3, r0
    }
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3324      	adds	r3, #36	; 0x24
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	887a      	ldrh	r2, [r7, #2]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	4798      	blx	r3
 800b1d4:	4603      	mov	r3, r0
    }
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	4a05      	ldr	r2, [pc, #20]	; (800b21c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fc15 	bl	800aa3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0801e564 	.word	0x0801e564

0800b220 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff ffe7 	bl	800b1fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800b22e:	2110      	movs	r1, #16
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f011 ff13 	bl	801d05c <_ZdlPvj>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	68d2      	ldr	r2, [r2, #12]
 800b250:	1052      	asrs	r2, r2, #1
 800b252:	1899      	adds	r1, r3, r2
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	e00a      	b.n	800b27c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	68d2      	ldr	r2, [r2, #12]
 800b26e:	1052      	asrs	r2, r2, #1
 800b270:	4413      	add	r3, r2
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6892      	ldr	r2, [r2, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4608      	mov	r0, r1
 800b27e:	4798      	blx	r3
    }
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d010      	beq.n	800b2ba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d107      	bne.n	800b2b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e000      	b.n	800b2b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d001      	beq.n	800b2ba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e000      	b.n	800b2bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800b2ba:	2300      	movs	r3, #0
    }
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	80da      	strh	r2, [r3, #6]
    }
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800b2f6:	b480      	push	{r7}
 800b2f8:	b085      	sub	sp, #20
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	4608      	mov	r0, r1
 800b300:	4611      	mov	r1, r2
 800b302:	461a      	mov	r2, r3
 800b304:	4603      	mov	r3, r0
 800b306:	817b      	strh	r3, [r7, #10]
 800b308:	460b      	mov	r3, r1
 800b30a:	813b      	strh	r3, [r7, #8]
 800b30c:	4613      	mov	r3, r2
 800b30e:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	897a      	ldrh	r2, [r7, #10]
 800b314:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	893a      	ldrh	r2, [r7, #8]
 800b31a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8b3a      	ldrh	r2, [r7, #24]
 800b326:	80da      	strh	r2, [r3, #6]
    }
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	460b      	mov	r3, r1
 800b340:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	887a      	ldrh	r2, [r7, #2]
 800b346:	801a      	strh	r2, [r3, #0]
    {
    }
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
	...

0800b358 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800b360:	4a13      	ldr	r2, [pc, #76]	; (800b3b0 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	1d18      	adds	r0, r3, #4
 800b36a:	2300      	movs	r3, #0
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2300      	movs	r3, #0
 800b370:	2200      	movs	r2, #0
 800b372:	2100      	movs	r1, #0
 800b374:	f7ff ffbf 	bl	800b2f6 <_ZN8touchgfx4RectC1Essss>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	330c      	adds	r3, #12
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff ffa3 	bl	800b2c8 <_ZN8touchgfx4RectC1Ev>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	615a      	str	r2, [r3, #20]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	619a      	str	r2, [r3, #24]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	61da      	str	r2, [r3, #28]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0801fc04 	.word	0x0801fc04

0800b3b4 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	4a04      	ldr	r2, [pc, #16]	; (800b3d0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	0801fc04 	.word	0x0801fc04

0800b3d4 <_ZN8touchgfx8DrawableD0Ev>:
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff ffe9 	bl	800b3b4 <_ZN8touchgfx8DrawableD1Ev>
 800b3e2:	2128      	movs	r1, #40	; 0x28
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f011 fe39 	bl	801d05c <_ZdlPvj>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	4608      	mov	r0, r1
 800b3fe:	4611      	mov	r1, r2
 800b400:	461a      	mov	r2, r3
 800b402:	4603      	mov	r3, r0
 800b404:	817b      	strh	r3, [r7, #10]
 800b406:	460b      	mov	r3, r1
 800b408:	813b      	strh	r3, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3334      	adds	r3, #52	; 0x34
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b41a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	4798      	blx	r3
        setWidth(width);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3338      	adds	r3, #56	; 0x38
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b42e:	4611      	mov	r1, r2
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	4798      	blx	r3
        setHeight(height);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	333c      	adds	r3, #60	; 0x3c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b440:	4611      	mov	r1, r2
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	4798      	blx	r3
    }
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	460b      	mov	r3, r1
 800b458:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	887a      	ldrh	r2, [r7, #2]
 800b45e:	809a      	strh	r2, [r3, #4]
    }
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	887a      	ldrh	r2, [r7, #2]
 800b47c:	80da      	strh	r2, [r3, #6]
    }
 800b47e:	bf00      	nop
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	807b      	strh	r3, [r7, #2]
 800b496:	4613      	mov	r3, r2
 800b498:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	332c      	adds	r3, #44	; 0x2c
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	4798      	blx	r3
        setY(y);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3330      	adds	r3, #48	; 0x30
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	4798      	blx	r3
    }
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	887a      	ldrh	r2, [r7, #2]
 800b4d6:	811a      	strh	r2, [r3, #8]
    }
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	887a      	ldrh	r2, [r7, #2]
 800b4f4:	815a      	strh	r2, [r3, #10]
    }
 800b4f6:	bf00      	nop
 800b4f8:	370c      	adds	r7, #12
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800b502:	b480      	push	{r7}
 800b504:	b083      	sub	sp, #12
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	bf00      	nop
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
 800b536:	bf00      	nop
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	6039      	str	r1, [r7, #0]
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800b586:	b480      	push	{r7}
 800b588:	b083      	sub	sp, #12
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	807b      	strh	r3, [r7, #2]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3354      	adds	r3, #84	; 0x54
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	8879      	ldrh	r1, [r7, #2]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b5c0:	b292      	uxth	r2, r2
 800b5c2:	1a8a      	subs	r2, r1, r2
 800b5c4:	b292      	uxth	r2, r2
 800b5c6:	b210      	sxth	r0, r2
 800b5c8:	8839      	ldrh	r1, [r7, #0]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b5d0:	b292      	uxth	r2, r2
 800b5d2:	1a8a      	subs	r2, r1, r2
 800b5d4:	b292      	uxth	r2, r2
 800b5d6:	b212      	sxth	r2, r2
 800b5d8:	4601      	mov	r1, r0
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	4798      	blx	r3
    }
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5f4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5fc:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b604:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7ff ffe1 	bl	800b5e6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	601a      	str	r2, [r3, #0]
    }
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	4a05      	ldr	r2, [pc, #20]	; (800b65c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff feb1 	bl	800b3b4 <_ZN8touchgfx8DrawableD1Ev>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	0801ef90 	.word	0x0801ef90

0800b660 <_ZN8touchgfx9ContainerD0Ev>:
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff ffe7 	bl	800b63c <_ZN8touchgfx9ContainerD1Ev>
 800b66e:	212c      	movs	r1, #44	; 0x2c
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f011 fcf3 	bl	801d05c <_ZdlPvj>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	4a06      	ldr	r2, [pc, #24]	; (800b6a4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3304      	adds	r3, #4
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff ffd2 	bl	800b63c <_ZN8touchgfx9ContainerD1Ev>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0801fcfc 	.word	0x0801fcfc

0800b6a8 <_ZN8touchgfx6ScreenD0Ev>:
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff ffe5 	bl	800b680 <_ZN8touchgfx6ScreenD1Ev>
 800b6b6:	213c      	movs	r1, #60	; 0x3c
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f011 fccf 	bl	801d05c <_ZdlPvj>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
    {
    }
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
    {
    }
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3304      	adds	r3, #4
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f002 fd6d 	bl	800e220 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
	...

0800b750 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff fdfc 	bl	800b358 <_ZN8touchgfx8DrawableC1Ev>
 800b760:	4a03      	ldr	r2, [pc, #12]	; (800b770 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	0801e7b8 	.word	0x0801e7b8

0800b774 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	4a05      	ldr	r2, [pc, #20]	; (800b794 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fe15 	bl	800b3b4 <_ZN8touchgfx8DrawableD1Ev>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	0801e7b8 	.word	0x0801e7b8

0800b798 <_ZN8touchgfx6WidgetD0Ev>:
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ffe7 	bl	800b774 <_ZN8touchgfx6WidgetD1Ev>
 800b7a6:	2128      	movs	r1, #40	; 0x28
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f011 fc57 	bl	801d05c <_ZdlPvj>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	607b      	str	r3, [r7, #4]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	817b      	strh	r3, [r7, #10]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fecd 	bl	800b56c <_ZNK8touchgfx8Drawable9isVisibleEv>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d008      	beq.n	800b7ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff fed3 	bl	800b586 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
        }
    }
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff ff9f 	bl	800b750 <_ZN8touchgfx6WidgetC1Ev>
 800b812:	4a0b      	ldr	r2, [pc, #44]	; (800b840 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3326      	adds	r3, #38	; 0x26
 800b81c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff fd88 	bl	800b336 <_ZN8touchgfx6BitmapC1Et>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	22ff      	movs	r2, #255	; 0xff
 800b82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f003 fdf3 	bl	800f41c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	0801f984 	.word	0x0801f984

0800b844 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	4a05      	ldr	r2, [pc, #20]	; (800b880 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff ff7f 	bl	800b774 <_ZN8touchgfx6WidgetD1Ev>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	0801f7a0 	.word	0x0801f7a0

0800b884 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff ffe7 	bl	800b860 <_ZN8touchgfx14AbstractButtonD1Ev>
 800b892:	2130      	movs	r1, #48	; 0x30
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f011 fbe1 	bl	801d05c <_ZdlPvj>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	4a05      	ldr	r2, [pc, #20]	; (800b8c4 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7ff ffd3 	bl	800b860 <_ZN8touchgfx14AbstractButtonD1Ev>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	0801f8e0 	.word	0x0801f8e0

0800b8c8 <_ZN8touchgfx6ButtonD0Ev>:
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7ff ffe7 	bl	800b8a4 <_ZN8touchgfx6ButtonD1Ev>
 800b8d6:	2134      	movs	r1, #52	; 0x34
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f011 fbbf 	bl	801d05c <_ZdlPvj>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
     * @param bmpReleased The bitmap to show in the "normal" state, ie when button is not pressed.
     * @param bmpPressed  The bitmap to show when the button is pressed.
     *
     * @see Button::setBitmaps
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	8812      	ldrh	r2, [r2, #0]
 800b8fa:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	68b9      	ldr	r1, [r7, #8]
 800b902:	4618      	mov	r0, r3
 800b904:	f003 fcd8 	bl	800f2b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800b908:	bf00      	nop
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	4a05      	ldr	r2, [pc, #20]	; (800b930 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff fead 	bl	800b680 <_ZN8touchgfx6ScreenD1Ev>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	0801e76c 	.word	0x0801e76c

0800b934 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff ffe7 	bl	800b910 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800b942:	2140      	movs	r1, #64	; 0x40
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f011 fb89 	bl	801d05c <_ZdlPvj>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	4a0d      	ldr	r2, [pc, #52]	; (800b994 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	33a4      	adds	r3, #164	; 0xa4
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f936 	bl	800bbd8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	336c      	adds	r3, #108	; 0x6c
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f975 	bl	800bc60 <_ZN8touchgfx12ToggleButtonD1Ev>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	3340      	adds	r3, #64	; 0x40
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f94e 	bl	800bc1c <_ZN8touchgfx5ImageD1Ev>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff ffc4 	bl	800b910 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	0801e71c 	.word	0x0801e71c

0800b998 <_ZN15Screen1ViewBaseD0Ev>:
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff ffd7 	bl	800b954 <_ZN15Screen1ViewBaseD1Ev>
 800b9a6:	21b4      	movs	r1, #180	; 0xb4
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f011 fb57 	bl	801d05c <_ZdlPvj>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <_ZN15Screen1ViewBase19toggleButtonClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void toggleButtonClicked()
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <_ZN15Screen1ViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase() :
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b089      	sub	sp, #36	; 0x24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 f898 	bl	800bb0c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800b9dc:	4a3a      	ldr	r2, [pc, #232]	; (800bac8 <_ZN15Screen1ViewBaseC1Ev+0xfc>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b9e8:	f107 0308 	add.w	r3, r7, #8
 800b9ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fca0 	bl	800b336 <_ZN8touchgfx6BitmapC1Et>
 800b9f6:	f107 0308 	add.w	r3, r7, #8
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7ff feff 	bl	800b800 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	336c      	adds	r3, #108	; 0x6c
 800ba06:	4618      	mov	r0, r3
 800ba08:	f003 fc36 	bl	800f278 <_ZN8touchgfx12ToggleButtonC1Ev>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800ba12:	4b2e      	ldr	r3, [pc, #184]	; (800bacc <_ZN15Screen1ViewBaseC1Ev+0x100>)
 800ba14:	60fb      	str	r3, [r7, #12]
 800ba16:	2300      	movs	r3, #0
 800ba18:	613b      	str	r3, [r7, #16]
 800ba1a:	f107 030c 	add.w	r3, r7, #12
 800ba1e:	cb0c      	ldmia	r3, {r2, r3}
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	f000 f899 	bl	800bb58 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    image1.setXY(0, 0);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3340      	adds	r3, #64	; 0x40
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fd2b 	bl	800b48a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_WALLPAPERS_240X320_ID));
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ba3a:	f107 0314 	add.w	r3, r7, #20
 800ba3e:	2102      	movs	r1, #2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fc78 	bl	800b336 <_ZN8touchgfx6BitmapC1Et>
 800ba46:	f107 0314 	add.w	r3, r7, #20
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f003 fce5 	bl	800f41c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    toggleButton.setXY(56, 141);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	336c      	adds	r3, #108	; 0x6c
 800ba56:	228d      	movs	r2, #141	; 0x8d
 800ba58:	2138      	movs	r1, #56	; 0x38
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff fd15 	bl	800b48a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ba66:	f107 0318 	add.w	r3, r7, #24
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fc62 	bl	800b336 <_ZN8touchgfx6BitmapC1Et>
 800ba72:	f107 031c 	add.w	r3, r7, #28
 800ba76:	2101      	movs	r1, #1
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff fc5c 	bl	800b336 <_ZN8touchgfx6BitmapC1Et>
 800ba7e:	f107 021c 	add.w	r2, r7, #28
 800ba82:	f107 0318 	add.w	r3, r7, #24
 800ba86:	4619      	mov	r1, r3
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f7ff ff2d 	bl	800b8e8 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton.setAction(buttonCallback);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	33a4      	adds	r3, #164	; 0xa4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7ff fed2 	bl	800b844 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(image1);
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3340      	adds	r3, #64	; 0x40
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f7ff fe41 	bl	800b730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton);
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	336c      	adds	r3, #108	; 0x6c
 800bab4:	4619      	mov	r1, r3
 800bab6:	4610      	mov	r0, r2
 800bab8:	f7ff fe3a 	bl	800b730 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4618      	mov	r0, r3
 800bac0:	3724      	adds	r7, #36	; 0x24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd90      	pop	{r4, r7, pc}
 800bac6:	bf00      	nop
 800bac8:	0801e71c 	.word	0x0801e71c
 800bacc:	0800bae5 	.word	0x0800bae5

0800bad0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	336c      	adds	r3, #108	; 0x6c
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d105      	bne.n	800bb04 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction1
        //When toggleButton clicked call virtual function
        //Call toggleButtonClicked
        toggleButtonClicked();
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	332c      	adds	r3, #44	; 0x2c
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
    }
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f004 ffb8 	bl	8010a8c <_ZN8touchgfx6ScreenC1Ev>
 800bb1c:	4a05      	ldr	r2, [pc, #20]	; (800bb34 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	0801e76c 	.word	0x0801e76c

0800bb38 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	4a04      	ldr	r2, [pc, #16]	; (800bb54 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	0801e7a0 	.word	0x0801e7a0

0800bb58 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	4639      	mov	r1, r7
 800bb64:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff ffe4 	bl	800bb38 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800bb70:	4a08      	ldr	r2, [pc, #32]	; (800bb94 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3308      	adds	r3, #8
 800bb80:	463a      	mov	r2, r7
 800bb82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	0801e754 	.word	0x0801e754

0800bb98 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
    }
 800bba0:	4a04      	ldr	r2, [pc, #16]	; (800bbb4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	0801e7a0 	.word	0x0801e7a0

0800bbb8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
    }
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7ff ffe9 	bl	800bb98 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800bbc6:	2104      	movs	r1, #4
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f011 fa47 	bl	801d05c <_ZdlPvj>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	4a05      	ldr	r2, [pc, #20]	; (800bbf8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff ffd5 	bl	800bb98 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	0801e754 	.word	0x0801e754

0800bbfc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff ffe7 	bl	800bbd8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800bc0a:	2110      	movs	r1, #16
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f011 fa25 	bl	801d05c <_ZdlPvj>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4618      	mov	r0, r3
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	4a05      	ldr	r2, [pc, #20]	; (800bc3c <_ZN8touchgfx5ImageD1Ev+0x20>)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fda1 	bl	800b774 <_ZN8touchgfx6WidgetD1Ev>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	0801f984 	.word	0x0801f984

0800bc40 <_ZN8touchgfx5ImageD0Ev>:
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff ffe7 	bl	800bc1c <_ZN8touchgfx5ImageD1Ev>
 800bc4e:	212c      	movs	r1, #44	; 0x2c
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f011 fa03 	bl	801d05c <_ZdlPvj>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <_ZN8touchgfx12ToggleButtonD1Ev>:
class ToggleButton : public Button
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	4a05      	ldr	r2, [pc, #20]	; (800bc80 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fe17 	bl	800b8a4 <_ZN8touchgfx6ButtonD1Ev>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	0801f80c 	.word	0x0801f80c

0800bc84 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff ffe7 	bl	800bc60 <_ZN8touchgfx12ToggleButtonD1Ev>
 800bc92:	2138      	movs	r1, #56	; 0x38
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f011 f9e1 	bl	801d05c <_ZdlPvj>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	68d2      	ldr	r2, [r2, #12]
 800bcb6:	1052      	asrs	r2, r2, #1
 800bcb8:	1898      	adds	r0, r3, r2
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	e00a      	b.n	800bce2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	68d2      	ldr	r2, [r2, #12]
 800bcd4:	1052      	asrs	r2, r2, #1
 800bcd6:	4413      	add	r3, r2
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	6892      	ldr	r2, [r2, #8]
 800bcde:	4413      	add	r3, r2
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	4798      	blx	r3
    }
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d010      	beq.n	800bd20 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d107      	bne.n	800bd16 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e000      	b.n	800bd18 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800bd16:	2300      	movs	r3, #0
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d001      	beq.n	800bd20 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e000      	b.n	800bd22 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800bd20:	2300      	movs	r3, #0
    }
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
	...

0800bd30 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800bd30:	b480      	push	{r7}
 800bd32:	af00      	add	r7, sp, #0
    return bitmap_database;
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	0801e818 	.word	0x0801e818

0800bd44 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800bd48:	2303      	movs	r3, #3
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param data A reference to the TypedTextData storage array.
     * @param f    The fonts associated with the array.
     * @param n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800bd62:	4a07      	ldr	r2, [pc, #28]	; (800bd80 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6013      	str	r3, [r2, #0]
        fonts = f;
 800bd68:	4a06      	ldr	r2, [pc, #24]	; (800bd84 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800bd6e:	4a06      	ldr	r2, [pc, #24]	; (800bd88 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	8013      	strh	r3, [r2, #0]
    }
 800bd74:	bf00      	nop
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	2002ee3c 	.word	0x2002ee3c
 800bd84:	2002ee44 	.word	0x2002ee44
 800bd88:	2002ee40 	.word	0x2002ee40

0800bd8c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800bd8c:	b590      	push	{r4, r7, lr}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d127      	bne.n	800bdf0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800bda0:	88fb      	ldrh	r3, [r7, #6]
 800bda2:	4a1e      	ldr	r2, [pc, #120]	; (800be1c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800bda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d016      	beq.n	800bdda <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800bdac:	88fb      	ldrh	r3, [r7, #6]
 800bdae:	4a1b      	ldr	r2, [pc, #108]	; (800be1c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800bdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	4a18      	ldr	r2, [pc, #96]	; (800be20 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800bdc0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	4413      	add	r3, r2
 800bdca:	4a16      	ldr	r2, [pc, #88]	; (800be24 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800bdcc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	e00a      	b.n	800bdf0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800bdda:	4b11      	ldr	r3, [pc, #68]	; (800be20 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800bddc:	4a12      	ldr	r2, [pc, #72]	; (800be28 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800bdde:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800bde0:	2200      	movs	r2, #0
 800bde2:	4b10      	ldr	r3, [pc, #64]	; (800be24 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800bde4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800bde6:	88fb      	ldrh	r3, [r7, #6]
 800bde8:	4a10      	ldr	r2, [pc, #64]	; (800be2c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800bdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdee:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00d      	beq.n	800be12 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800bdf6:	4a0e      	ldr	r2, [pc, #56]	; (800be30 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800bdf8:	88fb      	ldrh	r3, [r7, #6]
 800bdfa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800bdfc:	f000 f822 	bl	800be44 <_ZN17TypedTextDatabase8getFontsEv>
 800be00:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800be02:	f000 f817 	bl	800be34 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800be06:	4603      	mov	r3, r0
 800be08:	461a      	mov	r2, r3
 800be0a:	4621      	mov	r1, r4
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7ff ffa1 	bl	800bd54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	bd90      	pop	{r4, r7, pc}
 800be1a:	bf00      	nop
 800be1c:	2002de2c 	.word	0x2002de2c
 800be20:	2002de34 	.word	0x2002de34
 800be24:	2002de38 	.word	0x2002de38
 800be28:	080503bc 	.word	0x080503bc
 800be2c:	080503c4 	.word	0x080503c4
 800be30:	2002de30 	.word	0x2002de30

0800be34 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800be34:	b480      	push	{r7}
 800be36:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800be38:	2301      	movs	r3, #1
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
    return _fonts;
 800be48:	4b02      	ldr	r3, [pc, #8]	; (800be54 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	2002de3c 	.word	0x2002de3c

0800be58 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d113      	bne.n	800be90 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be6e:	4293      	cmp	r3, r2
 800be70:	d10e      	bne.n	800be90 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800be72:	f7fe fc8b 	bl	800a78c <_Z23getFont_verdana_20_4bppv>
 800be76:	4602      	mov	r2, r0
};
 800be78:	4b07      	ldr	r3, [pc, #28]	; (800be98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800be7a:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800be7c:	f7fe fcc8 	bl	800a810 <_Z23getFont_verdana_40_4bppv>
 800be80:	4602      	mov	r2, r0
};
 800be82:	4b05      	ldr	r3, [pc, #20]	; (800be98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800be84:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800be86:	f7fe fc3f 	bl	800a708 <_Z23getFont_verdana_10_4bppv>
 800be8a:	4602      	mov	r2, r0
};
 800be8c:	4b02      	ldr	r3, [pc, #8]	; (800be98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800be8e:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	2002de3c 	.word	0x2002de3c

0800be9c <_GLOBAL__sub_I__fonts>:
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bea4:	2001      	movs	r0, #1
 800bea6:	f7ff ffd7 	bl	800be58 <_Z41__static_initialization_and_destruction_0ii>
 800beaa:	bd80      	pop	{r7, pc}

0800beac <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	4a05      	ldr	r2, [pc, #20]	; (800becc <_ZN19FrontendApplicationD1Ev+0x20>)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe ff37 	bl	800ad30 <_ZN23FrontendApplicationBaseD1Ev>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	0801e85c 	.word	0x0801e85c

0800bed0 <_ZN19FrontendApplicationD0Ev>:
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff ffe7 	bl	800beac <_ZN19FrontendApplicationD1Ev>
 800bede:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f011 f8ba 	bl	801d05c <_ZdlPvj>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b082      	sub	sp, #8
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 f82d 	bl	800bf60 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f003 fd63 	bl	800f9d4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800bf0e:	bf00      	nop
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe ff7a 	bl	800ae24 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800bf30:	4a03      	ldr	r2, [pc, #12]	; (800bf40 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	601a      	str	r2, [r3, #0]
{

}
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	0801e85c 	.word	0x0801e85c

0800bf44 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
{

}
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4618      	mov	r0, r3
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <_ZN5Model4tickEv>:

void Model::tick()
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]

}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
    {
    }
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
    {
    }
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
    {
 800bfa4:	4a04      	ldr	r2, [pc, #16]	; (800bfb8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	601a      	str	r2, [r3, #0]
    }
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	0801e8d0 	.word	0x0801e8d0

0800bfbc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
    }
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ffe9 	bl	800bf9c <_ZN8touchgfx9PresenterD1Ev>
 800bfca:	2104      	movs	r1, #4
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f011 f845 	bl	801d05c <_ZdlPvj>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
    {
 800bfe4:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	601a      	str	r2, [r3, #0]
    }
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	0801e8d0 	.word	0x0801e8d0

0800bffc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	4a06      	ldr	r2, [pc, #24]	; (800c020 <_ZN13ModelListenerC1Ev+0x24>)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	605a      	str	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4618      	mov	r0, r3
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	0801e8c0 	.word	0x0801e8c0

0800c024 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	4a04      	ldr	r2, [pc, #16]	; (800c040 <_ZN13ModelListenerD1Ev+0x1c>)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	0801e8c0 	.word	0x0801e8c0

0800c044 <_ZN13ModelListenerD0Ev>:
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff ffe9 	bl	800c024 <_ZN13ModelListenerD1Ev>
 800c052:	2108      	movs	r1, #8
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f011 f801 	bl	801d05c <_ZdlPvj>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	4a09      	ldr	r2, [pc, #36]	; (800c094 <_ZN16Screen1PresenterD1Ev+0x30>)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	4a09      	ldr	r2, [pc, #36]	; (800c098 <_ZN16Screen1PresenterD1Ev+0x34>)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	605a      	str	r2, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3304      	adds	r3, #4
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7ff ffd1 	bl	800c024 <_ZN13ModelListenerD1Ev>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff ff89 	bl	800bf9c <_ZN8touchgfx9PresenterD1Ev>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	0801e898 	.word	0x0801e898
 800c098:	0801e8b0 	.word	0x0801e8b0

0800c09c <_ZThn4_N16Screen1PresenterD1Ev>:
 800c09c:	f1a0 0004 	sub.w	r0, r0, #4
 800c0a0:	e7e0      	b.n	800c064 <_ZN16Screen1PresenterD1Ev>
 800c0a2:	bf00      	nop

0800c0a4 <_ZN16Screen1PresenterD0Ev>:
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff ffd9 	bl	800c064 <_ZN16Screen1PresenterD1Ev>
 800c0b2:	2110      	movs	r1, #16
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f010 ffd1 	bl	801d05c <_ZdlPvj>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZThn4_N16Screen1PresenterD0Ev>:
 800c0c4:	f1a0 0004 	sub.w	r0, r0, #4
 800c0c8:	e7ec      	b.n	800c0a4 <_ZN16Screen1PresenterD0Ev>
	...

0800c0cc <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
    : view(v)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff ff7f 	bl	800bfdc <_ZN8touchgfx9PresenterC1Ev>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff ff8a 	bl	800bffc <_ZN13ModelListenerC1Ev>
 800c0e8:	4a06      	ldr	r2, [pc, #24]	; (800c104 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	4a06      	ldr	r2, [pc, #24]	; (800c108 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	605a      	str	r2, [r3, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	60da      	str	r2, [r3, #12]
{

}
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	0801e898 	.word	0x0801e898
 800c108:	0801e8b0 	.word	0x0801e8b0

0800c10c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]

}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]

}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <_ZNK8touchgfx6BitmapeqERKS0_>:
     *
     * @param other The bitmap to compare with.
     *
     * @return True if this bitmap has the same id as the other bitmap.
     */
    bool operator==(const Bitmap& other) const
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
    {
        return (bitmapId == other.bitmapId);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	881a      	ldrh	r2, [r3, #0]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	881b      	ldrh	r3, [r3, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	bf0c      	ite	eq
 800c14a:	2301      	moveq	r3, #1
 800c14c:	2300      	movne	r3, #0
 800c14e:	b2db      	uxtb	r3, r3
    }
 800c150:	4618      	mov	r0, r3
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <_ZNK8touchgfx12ToggleButton8getStateEv>:
     *
     *        Gets the state.
     *
     * @return true if state is currently active.
     */
    bool getState() const
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
    {
        return up == originalPressed;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	3334      	adds	r3, #52	; 0x34
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7ff ffdf 	bl	800c134 <_ZNK8touchgfx6BitmapeqERKS0_>
 800c176:	4603      	mov	r3, r0
    }
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	4a05      	ldr	r2, [pc, #20]	; (800c1a0 <_ZN11Screen1ViewD1Ev+0x20>)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff fbdf 	bl	800b954 <_ZN15Screen1ViewBaseD1Ev>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	0801e8e8 	.word	0x0801e8e8

0800c1a4 <_ZN11Screen1ViewD0Ev>:
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff ffe7 	bl	800c180 <_ZN11Screen1ViewD1Ev>
 800c1b2:	21b4      	movs	r1, #180	; 0xb4
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f010 ff51 	bl	801d05c <_ZdlPvj>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include "gpio.h"
Screen1View::Screen1View()
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7ff fbfc 	bl	800b9cc <_ZN15Screen1ViewBaseC1Ev>
 800c1d4:	4a03      	ldr	r2, [pc, #12]	; (800c1e4 <_ZN11Screen1ViewC1Ev+0x20>)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	601a      	str	r2, [r3, #0]
{

}
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	0801e8e8 	.word	0x0801e8e8

0800c1e8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fc6c 	bl	800bad0 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff fa70 	bl	800b6f0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <_ZN11Screen1View19toggleButtonClickedEv>:

void Screen1View::toggleButtonClicked()
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
	if(toggleButton.getState())			HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	336c      	adds	r3, #108	; 0x6c
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff ff99 	bl	800c15c <_ZNK8touchgfx12ToggleButton8getStateEv>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d006      	beq.n	800c23e <_ZN11Screen1View19toggleButtonClickedEv+0x26>
 800c230:	2201      	movs	r2, #1
 800c232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c236:	4807      	ldr	r0, [pc, #28]	; (800c254 <_ZN11Screen1View19toggleButtonClickedEv+0x3c>)
 800c238:	f7f7 fc18 	bl	8003a6c <HAL_GPIO_WritePin>
	else								HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
}
 800c23c:	e005      	b.n	800c24a <_ZN11Screen1View19toggleButtonClickedEv+0x32>
	else								HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 800c23e:	2200      	movs	r2, #0
 800c240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c244:	4803      	ldr	r0, [pc, #12]	; (800c254 <_ZN11Screen1View19toggleButtonClickedEv+0x3c>)
 800c246:	f7f7 fc11 	bl	8003a6c <HAL_GPIO_WritePin>
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	40021800 	.word	0x40021800

0800c258 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
    {
 800c260:	4a04      	ldr	r2, [pc, #16]	; (800c274 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	601a      	str	r2, [r3, #0]
    }
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	0801e938 	.word	0x0801e938

0800c278 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
    }
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7ff ffe9 	bl	800c258 <_ZN8touchgfx15TouchControllerD1Ev>
 800c286:	2104      	movs	r1, #4
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f010 fee7 	bl	801d05c <_ZdlPvj>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <_ZN20STM32TouchController4initEv>:
#include <STM32TouchController.hpp>
#include "stm32f429i_discovery_ts.h"


void STM32TouchController::init()
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 800c2a0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c2a4:	20f0      	movs	r0, #240	; 0xf0
 800c2a6:	f7f6 fab7 	bl	8002818 <BSP_TS_Init>
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b086      	sub	sp, #24
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 800c2be:	f107 0310 	add.w	r3, r7, #16
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f6 fae2 	bl	800288c <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 800c2c8:	8a3b      	ldrh	r3, [r7, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = TS_State.X;
 800c2ce:	8a7b      	ldrh	r3, [r7, #18]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	601a      	str	r2, [r3, #0]
        y = TS_State.Y;
 800c2d6:	8abb      	ldrh	r3, [r7, #20]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	601a      	str	r2, [r3, #0]
        return true;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e000      	b.n	800c2e4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	4a05      	ldr	r2, [pc, #20]	; (800c30c <_ZN20STM32TouchControllerD1Ev+0x20>)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff ffab 	bl	800c258 <_ZN8touchgfx15TouchControllerD1Ev>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	0801e920 	.word	0x0801e920

0800c310 <_ZN20STM32TouchControllerD0Ev>:
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff ffe7 	bl	800c2ec <_ZN20STM32TouchControllerD1Ev>
 800c31e:	2104      	movs	r1, #4
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f010 fe9b 	bl	801d05c <_ZdlPvj>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	71fb      	strb	r3, [r7, #7]

}
 800c33a:	bf00      	nop
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	4603      	mov	r3, r0
 800c34e:	71fb      	strb	r3, [r7, #7]

}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	71fb      	strb	r3, [r7, #7]

}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
	...

0800c374 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
    {
 800c37c:	4a04      	ldr	r2, [pc, #16]	; (800c390 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	601a      	str	r2, [r3, #0]
    }
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	0801f238 	.word	0x0801f238

0800c394 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
    }
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff ffe9 	bl	800c374 <_ZN8touchgfx3HALD1Ev>
 800c3a2:	2178      	movs	r1, #120	; 0x78
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f010 fe59 	bl	801d05c <_ZdlPvj>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	78fa      	ldrb	r2, [r7, #3]
 800c3c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
 800c3f4:	4603      	mov	r3, r0
    }
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f002 fdca 	bl	800efa0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3390      	adds	r3, #144	; 0x90
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	4798      	blx	r3
    }
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
    {
        return false;
 800c42a:	2300      	movs	r3, #0
    }
 800c42c:	4618      	mov	r0, r3
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 800c438:	b590      	push	{r4, r7, lr}
 800c43a:	b08b      	sub	sp, #44	; 0x2c
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	4611      	mov	r1, r2
 800c444:	461a      	mov	r2, r3
 800c446:	460b      	mov	r3, r1
 800c448:	80fb      	strh	r3, [r7, #6]
 800c44a:	4613      	mov	r3, r2
 800c44c:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 800c44e:	f7fe fb21 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800c452:	4602      	mov	r2, r0
 800c454:	6813      	ldr	r3, [r2, #0]
 800c456:	3328      	adds	r3, #40	; 0x28
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4610      	mov	r0, r2
 800c45c:	4798      	blx	r3
 800c45e:	4603      	mov	r3, r0
 800c460:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800c462:	8b7b      	ldrh	r3, [r7, #26]
 800c464:	4a3d      	ldr	r2, [pc, #244]	; (800c55c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 800c466:	8812      	ldrh	r2, [r2, #0]
 800c468:	fb02 f303 	mul.w	r3, r2, r3
 800c46c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800c47a:	797b      	ldrb	r3, [r7, #5]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800c480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	4413      	add	r3, r2
 800c486:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800c48c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c490:	2b00      	cmp	r3, #0
 800c492:	d005      	beq.n	800c4a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800c494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	4413      	add	r3, r2
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800c4a0:	88fb      	ldrh	r3, [r7, #6]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	2b1f      	cmp	r3, #31
 800c4a6:	d84d      	bhi.n	800c544 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 800c4a8:	a201      	add	r2, pc, #4	; (adr r2, 800c4b0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c531 	.word	0x0800c531
 800c4b4:	0800c531 	.word	0x0800c531
 800c4b8:	0800c545 	.word	0x0800c545
 800c4bc:	0800c531 	.word	0x0800c531
 800c4c0:	0800c545 	.word	0x0800c545
 800c4c4:	0800c545 	.word	0x0800c545
 800c4c8:	0800c545 	.word	0x0800c545
 800c4cc:	0800c531 	.word	0x0800c531
 800c4d0:	0800c545 	.word	0x0800c545
 800c4d4:	0800c545 	.word	0x0800c545
 800c4d8:	0800c545 	.word	0x0800c545
 800c4dc:	0800c545 	.word	0x0800c545
 800c4e0:	0800c545 	.word	0x0800c545
 800c4e4:	0800c545 	.word	0x0800c545
 800c4e8:	0800c545 	.word	0x0800c545
 800c4ec:	0800c531 	.word	0x0800c531
 800c4f0:	0800c545 	.word	0x0800c545
 800c4f4:	0800c545 	.word	0x0800c545
 800c4f8:	0800c545 	.word	0x0800c545
 800c4fc:	0800c545 	.word	0x0800c545
 800c500:	0800c545 	.word	0x0800c545
 800c504:	0800c545 	.word	0x0800c545
 800c508:	0800c545 	.word	0x0800c545
 800c50c:	0800c531 	.word	0x0800c531
 800c510:	0800c545 	.word	0x0800c545
 800c514:	0800c545 	.word	0x0800c545
 800c518:	0800c545 	.word	0x0800c545
 800c51c:	0800c545 	.word	0x0800c545
 800c520:	0800c545 	.word	0x0800c545
 800c524:	0800c545 	.word	0x0800c545
 800c528:	0800c545 	.word	0x0800c545
 800c52c:	0800c531 	.word	0x0800c531
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3374      	adds	r3, #116	; 0x74
 800c536:	681c      	ldr	r4, [r3, #0]
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	6a3a      	ldr	r2, [r7, #32]
 800c53c:	68b9      	ldr	r1, [r7, #8]
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	47a0      	blx	r4
            break;
 800c542:	e006      	b.n	800c552 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 800c544:	4b06      	ldr	r3, [pc, #24]	; (800c560 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 800c546:	4a07      	ldr	r2, [pc, #28]	; (800c564 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 800c548:	f240 3125 	movw	r1, #805	; 0x325
 800c54c:	4806      	ldr	r0, [pc, #24]	; (800c568 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 800c54e:	f010 fdb1 	bl	801d0b4 <__assert_func>
            break;
        }
    }
 800c552:	bf00      	nop
 800c554:	372c      	adds	r7, #44	; 0x2c
 800c556:	46bd      	mov	sp, r7
 800c558:	bd90      	pop	{r4, r7, pc}
 800c55a:	bf00      	nop
 800c55c:	2002edc8 	.word	0x2002edc8
 800c560:	0801e34c 	.word	0x0801e34c
 800c564:	0801ea4c 	.word	0x0801ea4c
 800c568:	0801e36c 	.word	0x0801e36c

0800c56c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800c580:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800c582:	4a12      	ldr	r2, [pc, #72]	; (800c5cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800c584:	f240 3137 	movw	r1, #823	; 0x337
 800c588:	4811      	ldr	r0, [pc, #68]	; (800c5d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800c58a:	f010 fd93 	bl	801d0b4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bf14      	ite	ne
 800c5a6:	2301      	movne	r3, #1
 800c5a8:	2300      	moveq	r3, #0
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	4b09      	ldr	r3, [pc, #36]	; (800c5d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800c5ae:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	bf14      	ite	ne
 800c5b6:	2301      	movne	r3, #1
 800c5b8:	2300      	moveq	r3, #0
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800c5be:	701a      	strb	r2, [r3, #0]
    }
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	0801e3b0 	.word	0x0801e3b0
 800c5cc:	0801e9fc 	.word	0x0801e9fc
 800c5d0:	0801e36c 	.word	0x0801e36c
 800c5d4:	2002edca 	.word	0x2002edca
 800c5d8:	2002edcb 	.word	0x2002edcb

0800c5dc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d004      	beq.n	800c5fa <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f4:	887a      	ldrh	r2, [r7, #2]
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	4798      	blx	r3
        }
    }
 800c5fa:	bf00      	nop
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	3318      	adds	r3, #24
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	4603      	mov	r3, r0
    }
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
	...

0800c628 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d017      	beq.n	800c670 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800c640:	4b1a      	ldr	r3, [pc, #104]	; (800c6ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d12a      	bne.n	800c69e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800c648:	4b19      	ldr	r3, [pc, #100]	; (800c6b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c64a:	881a      	ldrh	r2, [r3, #0]
 800c64c:	4b19      	ldr	r3, [pc, #100]	; (800c6b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c64e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800c650:	4b19      	ldr	r3, [pc, #100]	; (800c6b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c652:	881a      	ldrh	r2, [r3, #0]
 800c654:	4b19      	ldr	r3, [pc, #100]	; (800c6bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c656:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800c658:	4b16      	ldr	r3, [pc, #88]	; (800c6b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c65a:	881a      	ldrh	r2, [r3, #0]
 800c65c:	4b16      	ldr	r3, [pc, #88]	; (800c6b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c65e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800c660:	4b16      	ldr	r3, [pc, #88]	; (800c6bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c662:	881a      	ldrh	r2, [r3, #0]
 800c664:	4b12      	ldr	r3, [pc, #72]	; (800c6b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c666:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800c668:	4b10      	ldr	r3, [pc, #64]	; (800c6ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c66a:	2201      	movs	r2, #1
 800c66c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800c66e:	e016      	b.n	800c69e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800c670:	4b0e      	ldr	r3, [pc, #56]	; (800c6ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d012      	beq.n	800c69e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800c678:	4b0f      	ldr	r3, [pc, #60]	; (800c6b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c67a:	881a      	ldrh	r2, [r3, #0]
 800c67c:	4b0d      	ldr	r3, [pc, #52]	; (800c6b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c67e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c682:	881a      	ldrh	r2, [r3, #0]
 800c684:	4b0d      	ldr	r3, [pc, #52]	; (800c6bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c686:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800c688:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c68a:	881a      	ldrh	r2, [r3, #0]
 800c68c:	4b0a      	ldr	r3, [pc, #40]	; (800c6b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c68e:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800c690:	4b08      	ldr	r3, [pc, #32]	; (800c6b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c692:	881a      	ldrh	r2, [r3, #0]
 800c694:	4b06      	ldr	r3, [pc, #24]	; (800c6b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c696:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
    }
 800c69e:	bf00      	nop
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	2002edc4 	.word	0x2002edc4
 800c6b0:	2002edc0 	.word	0x2002edc0
 800c6b4:	2002edc6 	.word	0x2002edc6
 800c6b8:	2002edc2 	.word	0x2002edc2
 800c6bc:	2002edc8 	.word	0x2002edc8

0800c6c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f001 feea 	bl	800e4a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	4a05      	ldr	r2, [pc, #20]	; (800c6f8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff fe43 	bl	800c374 <_ZN8touchgfx3HALD1Ev>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	0801ec24 	.word	0x0801ec24

0800c6fc <_ZN20TouchGFXGeneratedHALD0Ev>:
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff ffe7 	bl	800c6d8 <_ZN20TouchGFXGeneratedHALD1Ev>
 800c70a:	2178      	movs	r1, #120	; 0x78
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f010 fca5 	bl	801d05c <_ZdlPvj>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff ffca 	bl	800c6c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <_ZN11TouchGFXHAL10initializeEv>:
    void    LCD_IO_WriteReg(uint8_t Reg);
}
using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4618      	mov	r0, r3
 800c740:	f001 fb26 	bl	800dd90 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
	enableLCDControllerInterrupt();
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3368      	adds	r3, #104	; 0x68
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	4798      	blx	r3
	enableInterrupts();
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3360      	adds	r3, #96	; 0x60
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	4798      	blx	r3

	OSWrappers::waitForVSync();
 800c76c:	f000 f922 	bl	800c9b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
	backPorchExited();
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3358      	adds	r3, #88	; 0x58
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4610      	mov	r0, r2
 800c77c:	4798      	blx	r3

	LCD_IO_WriteReg(0x29);
 800c77e:	2029      	movs	r0, #41	; 0x29
 800c780:	f7f5 ff96 	bl	80026b0 <LCD_IO_WriteReg>
	for(;;)
	{
		OSWrappers::waitForVSync();
 800c784:	f000 f916 	bl	800c9b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
		backPorchExited();
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3358      	adds	r3, #88	; 0x58
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4610      	mov	r0, r2
 800c794:	4798      	blx	r3
		OSWrappers::waitForVSync();
 800c796:	e7f5      	b.n	800c784 <_ZN11TouchGFXHAL9taskEntryEv+0x38>

0800c798 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f001 fb82 	bl	800deac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800c7a8:	4603      	mov	r3, r0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6839      	ldr	r1, [r7, #0]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f001 fb81 	bl	800dec8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f001 fb89 	bl	800def4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f001 faff 	bl	800ddf8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800c7fa:	bf00      	nop
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f001 fb03 	bl	800de18 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800c812:	bf00      	nop
 800c814:	3708      	adds	r7, #8
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	f001 fb05 	bl	800de34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b082      	sub	sp, #8
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f001 fb07 	bl	800de50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800c842:	bf00      	nop
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
	...

0800c84c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	4a05      	ldr	r2, [pc, #20]	; (800c86c <_ZN11TouchGFXHALD1Ev+0x20>)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff ff3b 	bl	800c6d8 <_ZN20TouchGFXGeneratedHALD1Ev>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	0801e950 	.word	0x0801e950

0800c870 <_ZN11TouchGFXHALD0Ev>:
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff ffe7 	bl	800c84c <_ZN11TouchGFXHALD1Ev>
 800c87e:	2178      	movs	r1, #120	; 0x78
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f010 fbeb 	bl	801d05c <_ZdlPvj>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800c890:	b580      	push	{r7, lr}
 800c892:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 800c894:	2203      	movs	r2, #3
 800c896:	2100      	movs	r1, #0
 800c898:	2001      	movs	r0, #1
 800c89a:	f7fb fb81 	bl	8007fa0 <xQueueGenericCreate>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d006      	beq.n	800c8ba <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 800c8ac:	4b08      	ldr	r3, [pc, #32]	; (800c8d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	f7fb fbd1 	bl	800805c <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	2101      	movs	r1, #1
 800c8be:	2001      	movs	r0, #1
 800c8c0:	f7fb fb6e 	bl	8007fa0 <xQueueGenericCreate>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800c8c8:	601a      	str	r2, [r3, #0]
}
 800c8ca:	bf00      	nop
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	2002de48 	.word	0x2002de48
 800c8d4:	2002de4c 	.word	0x2002de4c

0800c8d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 800c8dc:	4b04      	ldr	r3, [pc, #16]	; (800c8f0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fb fead 	bl	8008644 <xQueueSemaphoreTake>
}
 800c8ea:	bf00      	nop
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	2002de48 	.word	0x2002de48

0800c8f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	2200      	movs	r2, #0
 800c900:	2100      	movs	r1, #0
 800c902:	f7fb fbab 	bl	800805c <xQueueGenericSend>
}
 800c906:	bf00      	nop
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	2002de48 	.word	0x2002de48

0800c910 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 800c914:	4b03      	ldr	r3, [pc, #12]	; (800c924 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2100      	movs	r1, #0
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fb fe92 	bl	8008644 <xQueueSemaphoreTake>
}
 800c920:	bf00      	nop
 800c922:	bd80      	pop	{r7, pc}
 800c924:	2002de48 	.word	0x2002de48

0800c928 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 800c92e:	2300      	movs	r3, #0
 800c930:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 800c932:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	1d3a      	adds	r2, r7, #4
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fb fd1c 	bl	8008378 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d007      	beq.n	800c956 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 800c948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	f3bf 8f6f 	isb	sy
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	2002de48 	.word	0x2002de48
 800c964:	e000ed04 	.word	0xe000ed04

0800c968 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
    if (vsync_q)
 800c96e:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d013      	beq.n	800c99e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 800c976:	2300      	movs	r3, #0
 800c978:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 800c97a:	4b0b      	ldr	r3, [pc, #44]	; (800c9a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800c97c:	6818      	ldr	r0, [r3, #0]
 800c97e:	1d3a      	adds	r2, r7, #4
 800c980:	2300      	movs	r3, #0
 800c982:	490a      	ldr	r1, [pc, #40]	; (800c9ac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 800c984:	f7fb fc64 	bl	8008250 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d007      	beq.n	800c99e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 800c98e:	4b08      	ldr	r3, [pc, #32]	; (800c9b0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 800c990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	f3bf 8f6f 	isb	sy
    }
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	2002de4c 	.word	0x2002de4c
 800c9ac:	20000084 	.word	0x20000084
 800c9b0:	e000ed04 	.word	0xe000ed04

0800c9b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 800c9b8:	4b08      	ldr	r3, [pc, #32]	; (800c9dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	4908      	ldr	r1, [pc, #32]	; (800c9e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fb fd63 	bl	800848c <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ce:	4904      	ldr	r1, [pc, #16]	; (800c9e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fb fd5b 	bl	800848c <xQueueReceive>
}
 800c9d6:	bf00      	nop
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	2002de4c 	.word	0x2002de4c
 800c9e0:	20000084 	.word	0x20000084

0800c9e4 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fc f9f1 	bl	8008dd8 <vTaskDelay>
}
 800c9f6:	bf00      	nop
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <__NVIC_EnableIRQ>:
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	db0d      	blt.n	800ca2e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	f003 021f 	and.w	r2, r3, #31
 800ca1c:	4907      	ldr	r1, [pc, #28]	; (800ca3c <__NVIC_EnableIRQ+0x3c>)
 800ca1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca22:	095b      	lsrs	r3, r3, #5
 800ca24:	2001      	movs	r0, #1
 800ca26:	fa00 f202 	lsl.w	r2, r0, r2
 800ca2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ca2e:	bf00      	nop
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	e000e100 	.word	0xe000e100

0800ca40 <__NVIC_DisableIRQ>:
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	db12      	blt.n	800ca78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 021f 	and.w	r2, r3, #31
 800ca5c:	4909      	ldr	r1, [pc, #36]	; (800ca84 <__NVIC_DisableIRQ+0x44>)
 800ca5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca62:	095b      	lsrs	r3, r3, #5
 800ca64:	2001      	movs	r0, #1
 800ca66:	fa00 f202 	lsl.w	r2, r0, r2
 800ca6a:	3320      	adds	r3, #32
 800ca6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ca70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ca74:	f3bf 8f6f 	isb	sy
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr
 800ca84:	e000e100 	.word	0xe000e100

0800ca88 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
        return color;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
    }
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	b29b      	uxth	r3, r3
    }
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
	...

0800cad8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
    {
 800cae0:	4a04      	ldr	r2, [pc, #16]	; (800caf4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	601a      	str	r2, [r3, #0]
    }
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr
 800caf4:	0801eaf8 	.word	0x0801eaf8

0800caf8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
    }
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff ffe9 	bl	800cad8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800cb06:	2104      	movs	r1, #4
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f010 faa7 	bl	801d05c <_ZdlPvj>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	3344      	adds	r3, #68	; 0x44
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
    }
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800cb3c:	2300      	movs	r3, #0
    }
 800cb3e:	4618      	mov	r0, r3
 800cb40:	370c      	adds	r7, #12
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
	...

0800cb4c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
    {
 800cb54:	4a04      	ldr	r2, [pc, #16]	; (800cb68 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
    }
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	0801f67c 	.word	0x0801f67c

0800cb6c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
    }
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff ffe9 	bl	800cb4c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800cb7a:	210c      	movs	r1, #12
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f010 fa6d 	bl	801d05c <_ZdlPvj>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800cb96:	4a09      	ldr	r2, [pc, #36]	; (800cbbc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	605a      	str	r2, [r3, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	721a      	strb	r2, [r3, #8]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	725a      	strb	r2, [r3, #9]
    {
    }
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	0801f67c 	.word	0x0801f67c

0800cbc0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3314      	adds	r3, #20
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	4798      	blx	r3
    }
 800cbda:	bf00      	nop
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3328      	adds	r3, #40	; 0x28
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	4798      	blx	r3
    }
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	430a      	orrs	r2, r1
 800cc20:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc28:	f023 0107 	bic.w	r1, r3, #7
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	430a      	orrs	r2, r1
 800cc34:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800cc40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	6812      	ldr	r2, [r2, #0]
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800cc64:	f7fd ff0a 	bl	800aa7c <_ZN8touchgfx3HAL11getInstanceEv>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff ffa8 	bl	800cbc0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
    assert(0);
 800cc80:	4b02      	ldr	r3, [pc, #8]	; (800cc8c <DMA2D_XferErrorCallback+0x14>)
 800cc82:	4a03      	ldr	r2, [pc, #12]	; (800cc90 <DMA2D_XferErrorCallback+0x18>)
 800cc84:	2136      	movs	r1, #54	; 0x36
 800cc86:	4803      	ldr	r0, [pc, #12]	; (800cc94 <DMA2D_XferErrorCallback+0x1c>)
 800cc88:	f010 fa14 	bl	801d0b4 <__assert_func>
 800cc8c:	0801e3e8 	.word	0x0801e3e8
 800cc90:	0801eb14 	.word	0x0801eb14
 800cc94:	0801e3ec 	.word	0x0801e3ec

0800cc98 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3318      	adds	r3, #24
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff feef 	bl	800ca88 <_ZN8touchgfx9colortypeC1Ev>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 800ccb4:	b5b0      	push	{r4, r5, r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	330c      	adds	r3, #12
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f7ff ff61 	bl	800cb8c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800ccca:	4a0e      	ldr	r2, [pc, #56]	; (800cd04 <_ZN10STM32F4DMAC1Ev+0x50>)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f103 000c 	add.w	r0, r3, #12
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3320      	adds	r3, #32
 800ccda:	2260      	movs	r2, #96	; 0x60
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f002 fa85 	bl	800f1ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	3320      	adds	r3, #32
 800cce6:	245f      	movs	r4, #95	; 0x5f
 800cce8:	461d      	mov	r5, r3
 800ccea:	2c00      	cmp	r4, #0
 800ccec:	db05      	blt.n	800ccfa <_ZN10STM32F4DMAC1Ev+0x46>
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f7ff ffd2 	bl	800cc98 <_ZN8touchgfx6BlitOpC1Ev>
 800ccf4:	3520      	adds	r5, #32
 800ccf6:	3c01      	subs	r4, #1
 800ccf8:	e7f7      	b.n	800ccea <_ZN10STM32F4DMAC1Ev+0x36>
{}
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bdb0      	pop	{r4, r5, r7, pc}
 800cd04:	0801eaa8 	.word	0x0801eaa8

0800cd08 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	4a0b      	ldr	r2, [pc, #44]	; (800cd40 <_ZN10STM32F4DMAD1Ev+0x38>)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800cd16:	480b      	ldr	r0, [pc, #44]	; (800cd44 <_ZN10STM32F4DMAD1Ev+0x3c>)
 800cd18:	f7f6 f846 	bl	8002da8 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 800cd1c:	205a      	movs	r0, #90	; 0x5a
 800cd1e:	f7ff fe8f 	bl	800ca40 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	330c      	adds	r3, #12
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 faa0 	bl	800d26c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7ff ff0c 	bl	800cb4c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	0801eaa8 	.word	0x0801eaa8
 800cd44:	2002f090 	.word	0x2002f090

0800cd48 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
}
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff ffd9 	bl	800cd08 <_ZN10STM32F4DMAD1Ev>
 800cd56:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f010 f97e 	bl	801d05c <_ZdlPvj>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800cd74:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <_ZN10STM32F4DMA10initializeEv+0x30>)
 800cd76:	4a0a      	ldr	r2, [pc, #40]	; (800cda0 <_ZN10STM32F4DMA10initializeEv+0x34>)
 800cd78:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 800cd7a:	4808      	ldr	r0, [pc, #32]	; (800cd9c <_ZN10STM32F4DMA10initializeEv+0x30>)
 800cd7c:	f7f5 ffca 	bl	8002d14 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800cd80:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <_ZN10STM32F4DMA10initializeEv+0x30>)
 800cd82:	4a08      	ldr	r2, [pc, #32]	; (800cda4 <_ZN10STM32F4DMA10initializeEv+0x38>)
 800cd84:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <_ZN10STM32F4DMA10initializeEv+0x30>)
 800cd88:	4a07      	ldr	r2, [pc, #28]	; (800cda8 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 800cd8a:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 800cd8c:	205a      	movs	r0, #90	; 0x5a
 800cd8e:	f7ff fe37 	bl	800ca00 <__NVIC_EnableIRQ>
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	2002f090 	.word	0x2002f090
 800cda0:	4002b000 	.word	0x4002b000
 800cda4:	0800cc5d 	.word	0x0800cc5d
 800cda8:	0800cc79 	.word	0x0800cc79

0800cdac <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 800cdb4:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800cdc4:	b590      	push	{r4, r7, lr}
 800cdc6:	b08d      	sub	sp, #52	; 0x34
 800cdc8:	af02      	add	r7, sp, #8
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800cdce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d007      	beq.n	800cdf0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b40      	cmp	r3, #64	; 0x40
 800cde6:	d003      	beq.n	800cdf0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	d101      	bne.n	800cdf4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e000      	b.n	800cdf6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 800cdf4:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800cdf6:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800cdfc:	2b80      	cmp	r3, #128	; 0x80
 800cdfe:	d004      	beq.n	800ce0a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce08:	d101      	bne.n	800ce0e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e000      	b.n	800ce10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800ce0e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800ce10:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800ce12:	f7fd fe3f 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800ce16:	4602      	mov	r2, r0
 800ce18:	6813      	ldr	r3, [r2, #0]
 800ce1a:	3320      	adds	r3, #32
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4610      	mov	r0, r2
 800ce20:	4798      	blx	r3
 800ce22:	4603      	mov	r3, r0
 800ce24:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b40      	cmp	r3, #64	; 0x40
 800ce2c:	d01d      	beq.n	800ce6a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800ce2e:	2b40      	cmp	r3, #64	; 0x40
 800ce30:	d804      	bhi.n	800ce3c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	d00e      	beq.n	800ce54 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800ce36:	2b20      	cmp	r3, #32
 800ce38:	d017      	beq.n	800ce6a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800ce3a:	e019      	b.n	800ce70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800ce3c:	2b80      	cmp	r3, #128	; 0x80
 800ce3e:	d003      	beq.n	800ce48 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800ce40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce44:	d003      	beq.n	800ce4e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800ce46:	e013      	b.n	800ce70 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 800ce48:	230a      	movs	r3, #10
 800ce4a:	623b      	str	r3, [r7, #32]
        break;
 800ce4c:	e01a      	b.n	800ce84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800ce4e:	2309      	movs	r3, #9
 800ce50:	623b      	str	r3, [r7, #32]
        break;
 800ce52:	e017      	b.n	800ce84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800ce54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ce5a:	7f7b      	ldrb	r3, [r7, #29]
 800ce5c:	2b10      	cmp	r3, #16
 800ce5e:	d101      	bne.n	800ce64 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800ce60:	2302      	movs	r3, #2
 800ce62:	e000      	b.n	800ce66 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800ce64:	2301      	movs	r3, #1
 800ce66:	623b      	str	r3, [r7, #32]
        break;
 800ce68:	e00c      	b.n	800ce84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	623b      	str	r3, [r7, #32]
        break;
 800ce6e:	e009      	b.n	800ce84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800ce70:	2300      	movs	r3, #0
 800ce72:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ce74:	7f7b      	ldrb	r3, [r7, #29]
 800ce76:	2b10      	cmp	r3, #16
 800ce78:	d101      	bne.n	800ce7e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e000      	b.n	800ce80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	623b      	str	r3, [r7, #32]
        break;
 800ce82:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800ce84:	4a76      	ldr	r2, [pc, #472]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800ce8a:	7f7b      	ldrb	r3, [r7, #29]
 800ce8c:	2b10      	cmp	r3, #16
 800ce8e:	d101      	bne.n	800ce94 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e000      	b.n	800ce96 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800ce94:	2301      	movs	r3, #1
 800ce96:	4a72      	ldr	r2, [pc, #456]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ce98:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	8adb      	ldrh	r3, [r3, #22]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	8a1b      	ldrh	r3, [r3, #16]
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	4b6d      	ldr	r3, [pc, #436]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ceaa:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800ceac:	7f7b      	ldrb	r3, [r7, #29]
 800ceae:	2b10      	cmp	r3, #16
 800ceb0:	d101      	bne.n	800ceb6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	e000      	b.n	800ceb8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 800ceb6:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	8adb      	ldrh	r3, [r3, #22]
 800cebc:	4619      	mov	r1, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	8a1b      	ldrh	r3, [r3, #16]
 800cec2:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800cec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cec6:	4866      	ldr	r0, [pc, #408]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cec8:	f7ff fe9a 	bl	800cc00 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800cecc:	4a64      	ldr	r2, [pc, #400]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	8a9b      	ldrh	r3, [r3, #20]
 800ced6:	461a      	mov	r2, r3
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	8a1b      	ldrh	r3, [r3, #16]
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	461a      	mov	r2, r3
 800cee0:	4b5f      	ldr	r3, [pc, #380]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cee2:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 800cee4:	7ffb      	ldrb	r3, [r7, #31]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d103      	bne.n	800cef2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800ceea:	7fbb      	ldrb	r3, [r7, #30]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 8082 	beq.w	800cff6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	7f1b      	ldrb	r3, [r3, #28]
 800cef6:	2bff      	cmp	r3, #255	; 0xff
 800cef8:	d008      	beq.n	800cf0c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800cefa:	4b59      	ldr	r3, [pc, #356]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cefc:	2202      	movs	r2, #2
 800cefe:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	7f1b      	ldrb	r3, [r3, #28]
 800cf04:	461a      	mov	r2, r3
 800cf06:	4b56      	ldr	r3, [pc, #344]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cf08:	635a      	str	r2, [r3, #52]	; 0x34
 800cf0a:	e002      	b.n	800cf12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800cf0c:	4b54      	ldr	r3, [pc, #336]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800cf12:	7fbb      	ldrb	r3, [r7, #30]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d059      	beq.n	800cfcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 800cf18:	7f7b      	ldrb	r3, [r7, #29]
 800cf1a:	2b10      	cmp	r3, #16
 800cf1c:	d14a      	bne.n	800cfb4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	3318      	adds	r3, #24
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fdca 	bl	800cabc <_ZNK8touchgfx9colortypecvtEv>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	12db      	asrs	r3, r3, #11
 800cf2c:	f003 021f 	and.w	r2, r3, #31
 800cf30:	4613      	mov	r3, r2
 800cf32:	021b      	lsls	r3, r3, #8
 800cf34:	1a9b      	subs	r3, r3, r2
 800cf36:	4a4b      	ldr	r2, [pc, #300]	; (800d064 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800cf38:	fb82 1203 	smull	r1, r2, r2, r3
 800cf3c:	441a      	add	r2, r3
 800cf3e:	1112      	asrs	r2, r2, #4
 800cf40:	17db      	asrs	r3, r3, #31
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	3318      	adds	r3, #24
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fdb6 	bl	800cabc <_ZNK8touchgfx9colortypecvtEv>
 800cf50:	4603      	mov	r3, r0
 800cf52:	115b      	asrs	r3, r3, #5
 800cf54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cf58:	4613      	mov	r3, r2
 800cf5a:	021b      	lsls	r3, r3, #8
 800cf5c:	1a9b      	subs	r3, r3, r2
 800cf5e:	4a42      	ldr	r2, [pc, #264]	; (800d068 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800cf60:	fb82 1203 	smull	r1, r2, r2, r3
 800cf64:	441a      	add	r2, r3
 800cf66:	1152      	asrs	r2, r2, #5
 800cf68:	17db      	asrs	r3, r3, #31
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	3318      	adds	r3, #24
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7ff fda2 	bl	800cabc <_ZNK8touchgfx9colortypecvtEv>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	f003 021f 	and.w	r2, r3, #31
 800cf7e:	4613      	mov	r3, r2
 800cf80:	021b      	lsls	r3, r3, #8
 800cf82:	1a9b      	subs	r3, r3, r2
 800cf84:	4a37      	ldr	r2, [pc, #220]	; (800d064 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800cf86:	fb82 1203 	smull	r1, r2, r2, r3
 800cf8a:	441a      	add	r2, r3
 800cf8c:	1112      	asrs	r2, r2, #4
 800cf8e:	17db      	asrs	r3, r3, #31
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	7f1b      	ldrb	r3, [r3, #28]
 800cf98:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	061a      	lsls	r2, r3, #24
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	041b      	lsls	r3, r3, #16
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	021b      	lsls	r3, r3, #8
 800cfa8:	431a      	orrs	r2, r3
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	4a2c      	ldr	r2, [pc, #176]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cfb0:	6353      	str	r3, [r2, #52]	; 0x34
 800cfb2:	e00b      	b.n	800cfcc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	3318      	adds	r3, #24
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff fd73 	bl	800caa4 <_ZNK8touchgfx9colortype10getColor32Ev>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	7f1b      	ldrb	r3, [r3, #28]
 800cfc4:	061b      	lsls	r3, r3, #24
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	4a25      	ldr	r2, [pc, #148]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cfca:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	8adb      	ldrh	r3, [r3, #22]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	8a1b      	ldrh	r3, [r3, #16]
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4b21      	ldr	r3, [pc, #132]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cfdc:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800cfde:	7f7b      	ldrb	r3, [r7, #29]
 800cfe0:	2b10      	cmp	r3, #16
 800cfe2:	d101      	bne.n	800cfe8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 800cfe4:	2302      	movs	r3, #2
 800cfe6:	e000      	b.n	800cfea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4a1d      	ldr	r2, [pc, #116]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cfec:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800cfee:	2100      	movs	r1, #0
 800cff0:	481b      	ldr	r0, [pc, #108]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cff2:	f7f6 f959 	bl	80032a8 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800cff6:	2101      	movs	r1, #1
 800cff8:	4819      	ldr	r0, [pc, #100]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cffa:	f7f6 f955 	bl	80032a8 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 800cffe:	7ffb      	ldrb	r3, [r7, #31]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800d004:	7fbb      	ldrb	r3, [r7, #30]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d015      	beq.n	800d036 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d00e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d014:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d01a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d020:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d026:	9301      	str	r3, [sp, #4]
 800d028:	9200      	str	r2, [sp, #0]
 800d02a:	4623      	mov	r3, r4
 800d02c:	4602      	mov	r2, r0
 800d02e:	480c      	ldr	r0, [pc, #48]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d030:	f7f5 ff5d 	bl	8002eee <HAL_DMA2D_BlendingStart_IT>
 800d034:	e00f      	b.n	800d056 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d03a:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d040:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d046:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	4603      	mov	r3, r0
 800d050:	4803      	ldr	r0, [pc, #12]	; (800d060 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d052:	f7f5 ff19 	bl	8002e88 <HAL_DMA2D_Start_IT>
    }
}
 800d056:	bf00      	nop
 800d058:	372c      	adds	r7, #44	; 0x2c
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd90      	pop	{r4, r7, pc}
 800d05e:	bf00      	nop
 800d060:	2002f090 	.word	0x2002f090
 800d064:	84210843 	.word	0x84210843
 800d068:	82082083 	.word	0x82082083

0800d06c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 800d06c:	b590      	push	{r4, r7, lr}
 800d06e:	b08d      	sub	sp, #52	; 0x34
 800d070:	af02      	add	r7, sp, #8
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800d076:	f7fd fd0d 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800d07a:	4602      	mov	r2, r0
 800d07c:	6813      	ldr	r3, [r2, #0]
 800d07e:	3320      	adds	r3, #32
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4610      	mov	r0, r2
 800d084:	4798      	blx	r3
 800d086:	4603      	mov	r3, r0
 800d088:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d08a:	7ffb      	ldrb	r3, [r7, #31]
 800d08c:	2b10      	cmp	r3, #16
 800d08e:	d101      	bne.n	800d094 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 800d090:	2302      	movs	r3, #2
 800d092:	e000      	b.n	800d096 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 800d094:	2301      	movs	r3, #1
 800d096:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 800d09c:	7ffb      	ldrb	r3, [r7, #31]
 800d09e:	2b10      	cmp	r3, #16
 800d0a0:	d149      	bne.n	800d136 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	3318      	adds	r3, #24
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff fd08 	bl	800cabc <_ZNK8touchgfx9colortypecvtEv>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	12db      	asrs	r3, r3, #11
 800d0b0:	f003 021f 	and.w	r2, r3, #31
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	021b      	lsls	r3, r3, #8
 800d0b8:	1a9b      	subs	r3, r3, r2
 800d0ba:	4a69      	ldr	r2, [pc, #420]	; (800d260 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800d0bc:	fb82 1203 	smull	r1, r2, r2, r3
 800d0c0:	441a      	add	r2, r3
 800d0c2:	1112      	asrs	r2, r2, #4
 800d0c4:	17db      	asrs	r3, r3, #31
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	3318      	adds	r3, #24
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7ff fcf4 	bl	800cabc <_ZNK8touchgfx9colortypecvtEv>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	115b      	asrs	r3, r3, #5
 800d0d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d0dc:	4613      	mov	r3, r2
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	1a9b      	subs	r3, r3, r2
 800d0e2:	4a60      	ldr	r2, [pc, #384]	; (800d264 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 800d0e4:	fb82 1203 	smull	r1, r2, r2, r3
 800d0e8:	441a      	add	r2, r3
 800d0ea:	1152      	asrs	r2, r2, #5
 800d0ec:	17db      	asrs	r3, r3, #31
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff fce0 	bl	800cabc <_ZNK8touchgfx9colortypecvtEv>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	f003 021f 	and.w	r2, r3, #31
 800d102:	4613      	mov	r3, r2
 800d104:	021b      	lsls	r3, r3, #8
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	4a55      	ldr	r2, [pc, #340]	; (800d260 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800d10a:	fb82 1203 	smull	r1, r2, r2, r3
 800d10e:	441a      	add	r2, r3
 800d110:	1112      	asrs	r2, r2, #4
 800d112:	17db      	asrs	r3, r3, #31
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	7f1b      	ldrb	r3, [r3, #28]
 800d11c:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	061a      	lsls	r2, r3, #24
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	041b      	lsls	r3, r3, #16
 800d126:	431a      	orrs	r2, r3
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	4313      	orrs	r3, r2
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	4313      	orrs	r3, r2
 800d132:	623b      	str	r3, [r7, #32]
 800d134:	e00b      	b.n	800d14e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	7f1b      	ldrb	r3, [r3, #28]
 800d13a:	061b      	lsls	r3, r3, #24
 800d13c:	461c      	mov	r4, r3
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	3318      	adds	r3, #24
 800d142:	4618      	mov	r0, r3
 800d144:	f7ff fcae 	bl	800caa4 <_ZNK8touchgfx9colortype10getColor32Ev>
 800d148:	4603      	mov	r3, r0
 800d14a:	4323      	orrs	r3, r4
 800d14c:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b08      	cmp	r3, #8
 800d154:	d103      	bne.n	800d15e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800d156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d15c:	e003      	b.n	800d166 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 800d15e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800d162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d164:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800d166:	4a40      	ldr	r2, [pc, #256]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800d16c:	7ffb      	ldrb	r3, [r7, #31]
 800d16e:	2b10      	cmp	r3, #16
 800d170:	d101      	bne.n	800d176 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 800d172:	2302      	movs	r3, #2
 800d174:	e000      	b.n	800d178 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 800d176:	2301      	movs	r3, #1
 800d178:	4a3b      	ldr	r2, [pc, #236]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d17a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	8adb      	ldrh	r3, [r3, #22]
 800d180:	461a      	mov	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	8a1b      	ldrh	r3, [r3, #16]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	461a      	mov	r2, r3
 800d18a:	4b37      	ldr	r3, [pc, #220]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d18c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800d18e:	7ffb      	ldrb	r3, [r7, #31]
 800d190:	2b10      	cmp	r3, #16
 800d192:	d101      	bne.n	800d198 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 800d194:	2202      	movs	r2, #2
 800d196:	e000      	b.n	800d19a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 800d198:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	8adb      	ldrh	r3, [r3, #22]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	8a1b      	ldrh	r3, [r3, #16]
 800d1a4:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800d1a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1a8:	482f      	ldr	r0, [pc, #188]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1aa:	f7ff fd29 	bl	800cc00 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1b4:	d11e      	bne.n	800d1f4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d1b6:	4b2c      	ldr	r3, [pc, #176]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 800d1bc:	4a2a      	ldr	r2, [pc, #168]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 800d1c2:	4b29      	ldr	r3, [pc, #164]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1c4:	2209      	movs	r2, #9
 800d1c6:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	8adb      	ldrh	r3, [r3, #22]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	8a1b      	ldrh	r3, [r3, #16]
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	4b24      	ldr	r3, [pc, #144]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1d8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d1da:	7ffb      	ldrb	r3, [r7, #31]
 800d1dc:	2b10      	cmp	r3, #16
 800d1de:	d101      	bne.n	800d1e4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 800d1e0:	2302      	movs	r3, #2
 800d1e2:	e000      	b.n	800d1e6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	4a20      	ldr	r2, [pc, #128]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1e8:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	481e      	ldr	r0, [pc, #120]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1ee:	f7f6 f85b 	bl	80032a8 <HAL_DMA2D_ConfigLayer>
 800d1f2:	e005      	b.n	800d200 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800d1f4:	4a1c      	ldr	r2, [pc, #112]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 800d1fa:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800d200:	2101      	movs	r1, #1
 800d202:	4819      	ldr	r0, [pc, #100]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d204:	f7f6 f850 	bl	80032a8 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d20e:	d115      	bne.n	800d23c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d214:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d21a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d220:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d226:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	9200      	str	r2, [sp, #0]
 800d230:	4623      	mov	r3, r4
 800d232:	4602      	mov	r2, r0
 800d234:	480c      	ldr	r0, [pc, #48]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d236:	f7f5 fe5a 	bl	8002eee <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 800d23a:	e00d      	b.n	800d258 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800d246:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	460b      	mov	r3, r1
 800d250:	6a39      	ldr	r1, [r7, #32]
 800d252:	4805      	ldr	r0, [pc, #20]	; (800d268 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d254:	f7f5 fe18 	bl	8002e88 <HAL_DMA2D_Start_IT>
}
 800d258:	bf00      	nop
 800d25a:	372c      	adds	r7, #44	; 0x2c
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd90      	pop	{r4, r7, pc}
 800d260:	84210843 	.word	0x84210843
 800d264:	82082083 	.word	0x82082083
 800d268:	2002f090 	.word	0x2002f090

0800d26c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	4a05      	ldr	r2, [pc, #20]	; (800d28c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fc2b 	bl	800cad8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	0801f6cc 	.word	0x0801f6cc

0800d290 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ffe7 	bl	800d26c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800d29e:	2114      	movs	r1, #20
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f00f fedb 	bl	801d05c <_ZdlPvj>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800d2b8:	4a04      	ldr	r2, [pc, #16]	; (800d2cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6013      	str	r3, [r2, #0]
    }
 800d2be:	bf00      	nop
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	2002ee48 	.word	0x2002ee48

0800d2d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 800d2de:	4a0b      	ldr	r2, [pc, #44]	; (800d30c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	605a      	str	r2, [r3, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	609a      	str	r2, [r3, #8]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	60da      	str	r2, [r3, #12]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	611a      	str	r2, [r3, #16]
    {
    }
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	0801ec14 	.word	0x0801ec14

0800d310 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
    {
 800d318:	4a04      	ldr	r2, [pc, #16]	; (800d32c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	601a      	str	r2, [r3, #0]
    }
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	0801ec14 	.word	0x0801ec14

0800d330 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
    }
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f7ff ffe9 	bl	800d310 <_ZN8touchgfx7MVPHeapD1Ev>
 800d33e:	2114      	movs	r1, #20
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f00f fe8b 	bl	801d05c <_ZdlPvj>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
    {
 800d358:	4a04      	ldr	r2, [pc, #16]	; (800d36c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	601a      	str	r2, [r3, #0]
    }
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	0801f9f0 	.word	0x0801f9f0

0800d370 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
    }
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff ffe9 	bl	800d350 <_ZN8touchgfx3LCDD1Ev>
 800d37e:	2108      	movs	r1, #8
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f00f fe6b 	bl	801d05c <_ZdlPvj>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	801a      	strh	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	805a      	strh	r2, [r3, #2]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	809a      	strh	r2, [r3, #4]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	80da      	strh	r2, [r3, #6]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	811a      	strh	r2, [r3, #8]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	815a      	strh	r2, [r3, #10]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	819a      	strh	r2, [r3, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	739a      	strb	r2, [r3, #14]
        {
        }
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b082      	sub	sp, #8
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7ff ffd5 	bl	800d390 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	611a      	str	r2, [r3, #16]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	829a      	strh	r2, [r3, #20]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 800d40a:	4a44      	ldr	r2, [pc, #272]	; (800d51c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	601a      	str	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	605a      	str	r2, [r3, #4]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	609a      	str	r2, [r3, #8]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	60da      	str	r2, [r3, #12]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	611a      	str	r2, [r3, #16]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	615a      	str	r2, [r3, #20]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	619a      	str	r2, [r3, #24]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	331c      	adds	r3, #28
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff ffcc 	bl	800d3d6 <_ZN8touchgfx8GesturesC1Ev>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	639a      	str	r2, [r3, #56]	; 0x38
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	63da      	str	r2, [r3, #60]	; 0x3c
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	641a      	str	r2, [r3, #64]	; 0x40
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	645a      	str	r2, [r3, #68]	; 0x44
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2201      	movs	r2, #1
 800d46a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	64da      	str	r2, [r3, #76]	; 0x4c
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3350      	adds	r3, #80	; 0x50
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fd ff25 	bl	800b2c8 <_ZN8touchgfx4RectC1Ev>
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2200      	movs	r2, #0
 800d492:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	671a      	str	r2, [r3, #112]	; 0x70
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 800d4d4:	4a12      	ldr	r2, [pc, #72]	; (800d520 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800d4da:	4a12      	ldr	r2, [pc, #72]	; (800d524 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800d4dc:	8b3b      	ldrh	r3, [r7, #24]
 800d4de:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800d4e0:	4a11      	ldr	r2, [pc, #68]	; (800d528 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800d4e2:	8bbb      	ldrh	r3, [r7, #28]
 800d4e4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800d4e6:	4b11      	ldr	r3, [pc, #68]	; (800d52c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800d4ec:	4b0d      	ldr	r3, [pc, #52]	; (800d524 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800d4ee:	881a      	ldrh	r2, [r3, #0]
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	; (800d530 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 800d4f2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800d4f4:	4b0c      	ldr	r3, [pc, #48]	; (800d528 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800d4f6:	881a      	ldrh	r2, [r3, #0]
 800d4f8:	4b0e      	ldr	r3, [pc, #56]	; (800d534 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800d4fa:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800d4fc:	8b3a      	ldrh	r2, [r7, #24]
 800d4fe:	8bbb      	ldrh	r3, [r7, #28]
 800d500:	429a      	cmp	r2, r3
 800d502:	d301      	bcc.n	800d508 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 800d504:	2200      	movs	r2, #0
 800d506:	e000      	b.n	800d50a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 800d508:	2201      	movs	r2, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	0801f238 	.word	0x0801f238
 800d520:	2002edcc 	.word	0x2002edcc
 800d524:	2002edc0 	.word	0x2002edc0
 800d528:	2002edc2 	.word	0x2002edc2
 800d52c:	2002edc4 	.word	0x2002edc4
 800d530:	2002edc6 	.word	0x2002edc6
 800d534:	2002edc8 	.word	0x2002edc8

0800d538 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	4618      	mov	r0, r3
 800d546:	f7fd fcc7 	bl	800aed8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
	...

0800d554 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af02      	add	r7, sp, #8
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	68b9      	ldr	r1, [r7, #8]
 800d56e:	f7ff feaf 	bl	800d2d0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800d572:	4a04      	ldr	r2, [pc, #16]	; (800d584 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	601a      	str	r2, [r3, #0]
    {

    }
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	0801ec00 	.word	0x0801ec00

0800d588 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__tcf_0+0xc>)
 800d58e:	f000 f9cf 	bl	800d930 <_ZN12FrontendHeapD1Ev>
 800d592:	bd80      	pop	{r7, pc}
 800d594:	2002de50 	.word	0x2002de50

0800d598 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800d598:	b580      	push	{r7, lr}
 800d59a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800d59c:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d108      	bne.n	800d5ba <_ZN12FrontendHeap11getInstanceEv+0x22>
 800d5a8:	4806      	ldr	r0, [pc, #24]	; (800d5c4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 800d5aa:	f000 f831 	bl	800d610 <_ZN12FrontendHeapC1Ev>
 800d5ae:	4b04      	ldr	r3, [pc, #16]	; (800d5c0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	4804      	ldr	r0, [pc, #16]	; (800d5c8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 800d5b6:	f00f fd9b 	bl	801d0f0 <atexit>
        return instance;
 800d5ba:	4b02      	ldr	r3, [pc, #8]	; (800d5c4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 800d5bc:	4618      	mov	r0, r3
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	2002e0a0 	.word	0x2002e0a0
 800d5c4:	2002de50 	.word	0x2002de50
 800d5c8:	0800d589 	.word	0x0800d589

0800d5cc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	4a05      	ldr	r2, [pc, #20]	; (800d5ec <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	601a      	str	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff fe97 	bl	800d310 <_ZN8touchgfx7MVPHeapD1Ev>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	0801ec00 	.word	0x0801ec00

0800d5f0 <_ZN16FrontendHeapBaseD0Ev>:
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff ffe7 	bl	800d5cc <_ZN16FrontendHeapBaseD1Ev>
 800d5fe:	2114      	movs	r1, #20
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f00f fd2b 	bl	801d05c <_ZdlPvj>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b085      	sub	sp, #20
 800d614:	af02      	add	r7, sp, #8
 800d616:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f103 0114 	add.w	r1, r3, #20
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	33fc      	adds	r3, #252	; 0xfc
 800d630:	9300      	str	r3, [sp, #0]
 800d632:	4623      	mov	r3, r4
 800d634:	f7ff ff8e 	bl	800d554 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800d638:	4a16      	ldr	r2, [pc, #88]	; (800d694 <_ZN12FrontendHeapC1Ev+0x84>)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	3314      	adds	r3, #20
 800d642:	4618      	mov	r0, r3
 800d644:	f000 f8d8 	bl	800d7f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	332c      	adds	r3, #44	; 0x2c
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f907 	bl	800d860 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	33e8      	adds	r3, #232	; 0xe8
 800d656:	4618      	mov	r0, r3
 800d658:	f000 f936 	bl	800d8c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	4619      	mov	r1, r3
 800d66c:	f7fe fc54 	bl	800bf18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fc64 	bl	800bf44 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	33fc      	adds	r3, #252	; 0xfc
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f7ff ff57 	bl	800d538 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	bd90      	pop	{r4, r7, pc}
 800d694:	0801eb50 	.word	0x0801eb50

0800d698 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
{
public:
    LCD16bpp();

    virtual ~LCD16bpp()
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
    {
 800d6a0:	4a05      	ldr	r2, [pc, #20]	; (800d6b8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fe51 	bl	800d350 <_ZN8touchgfx3LCDD1Ev>
    }
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	08020c8c 	.word	0x08020c8c

0800d6bc <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
    }
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff ffe7 	bl	800d698 <_ZN8touchgfx8LCD16bppD1Ev>
 800d6ca:	2178      	movs	r1, #120	; 0x78
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f00f fcc5 	bl	801d05c <_ZdlPvj>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
 800d6e8:	603b      	str	r3, [r7, #0]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	8bbb      	ldrh	r3, [r7, #28]
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	8b3b      	ldrh	r3, [r7, #24]
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	68b9      	ldr	r1, [r7, #8]
 800d6fa:	f7ff fe7f 	bl	800d3fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800d6fe:	4a04      	ldr	r2, [pc, #16]	; (800d710 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	601a      	str	r2, [r3, #0]
    }
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	0801ec24 	.word	0x0801ec24

0800d714 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af02      	add	r7, sp, #8
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	8bbb      	ldrh	r3, [r7, #28]
 800d726:	9301      	str	r3, [sp, #4]
 800d728:	8b3b      	ldrh	r3, [r7, #24]
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	f7ff ffd3 	bl	800d6dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d736:	4a04      	ldr	r2, [pc, #16]	; (800d748 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	601a      	str	r2, [r3, #0]
    }
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	0801e950 	.word	0x0801e950

0800d74c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	4a04      	ldr	r2, [pc, #16]	; (800d768 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	601a      	str	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	0801e938 	.word	0x0801e938

0800d76c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff ffe8 	bl	800d74c <_ZN8touchgfx15TouchControllerC1Ev>
 800d77c:	4a03      	ldr	r2, [pc, #12]	; (800d78c <_ZN20STM32TouchControllerC1Ev+0x20>)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	0801e920 	.word	0x0801e920

0800d790 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b085      	sub	sp, #20
 800d794:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800d796:	f7fe facb 	bl	800bd30 <_ZN14BitmapDatabase11getInstanceEv>
 800d79a:	4604      	mov	r4, r0
 800d79c:	f7fe fad2 	bl	800bd44 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f003 ffb5 	bl	801171c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800d7b2:	4809      	ldr	r0, [pc, #36]	; (800d7d8 <touchgfx_init+0x48>)
 800d7b4:	f7ff fd7c 	bl	800d2b0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	f7fe fae7 	bl	800bd8c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 800d7be:	4807      	ldr	r0, [pc, #28]	; (800d7dc <touchgfx_init+0x4c>)
 800d7c0:	f003 fefa 	bl	80115b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800d7c4:	f7ff fee8 	bl	800d598 <_ZN12FrontendHeap11getInstanceEv>
 800d7c8:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 800d7ca:	4805      	ldr	r0, [pc, #20]	; (800d7e0 <touchgfx_init+0x50>)
 800d7cc:	f7fe ffb2 	bl	800c734 <_ZN11TouchGFXHAL10initializeEv>
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd90      	pop	{r4, r7, pc}
 800d7d8:	2002ed40 	.word	0x2002ed40
 800d7dc:	20000088 	.word	0x20000088
 800d7e0:	2002ed44 	.word	0x2002ed44

0800d7e4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 800d7e8:	4802      	ldr	r0, [pc, #8]	; (800d7f4 <touchgfx_taskEntry+0x10>)
 800d7ea:	f7fe ffaf 	bl	800c74c <_ZN11TouchGFXHAL9taskEntryEv>
}
 800d7ee:	bf00      	nop
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	2002ed44 	.word	0x2002ed44

0800d7f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 fc6c 	bl	800e0e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d808:	4a03      	ldr	r2, [pc, #12]	; (800d818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	601a      	str	r2, [r3, #0]
    {
    }
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	0801ebcc 	.word	0x0801ebcc

0800d81c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
    {
    }
 800d824:	4a05      	ldr	r2, [pc, #20]	; (800d83c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 fc55 	bl	800e0dc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4618      	mov	r0, r3
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	0801ebcc 	.word	0x0801ebcc

0800d840 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
    }
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ffe7 	bl	800d81c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d84e:	2118      	movs	r1, #24
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f00f fc03 	bl	801d05c <_ZdlPvj>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f000 fc38 	bl	800e0e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d870:	4a03      	ldr	r2, [pc, #12]	; (800d880 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
    }
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	0801eb98 	.word	0x0801eb98

0800d884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
    }
 800d88c:	4a05      	ldr	r2, [pc, #20]	; (800d8a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4618      	mov	r0, r3
 800d896:	f000 fc21 	bl	800e0dc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4618      	mov	r0, r3
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	0801eb98 	.word	0x0801eb98

0800d8a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
    }
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff ffe7 	bl	800d884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d8b6:	21bc      	movs	r1, #188	; 0xbc
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f00f fbcf 	bl	801d05c <_ZdlPvj>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 fc04 	bl	800e0e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d8d8:	4a03      	ldr	r2, [pc, #12]	; (800d8e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	601a      	str	r2, [r3, #0]
    }
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	0801eb64 	.word	0x0801eb64

0800d8ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
    }
 800d8f4:	4a05      	ldr	r2, [pc, #20]	; (800d90c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 fbed 	bl	800e0dc <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4618      	mov	r0, r3
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	0801eb64 	.word	0x0801eb64

0800d910 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
    }
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ffe7 	bl	800d8ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d91e:	2114      	movs	r1, #20
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f00f fb9b 	bl	801d05c <_ZdlPvj>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	4a0f      	ldr	r2, [pc, #60]	; (800d978 <_ZN12FrontendHeapD1Ev+0x48>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	33fc      	adds	r3, #252	; 0xfc
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fab2 	bl	800beac <_ZN19FrontendApplicationD1Ev>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	33e8      	adds	r3, #232	; 0xe8
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff ffcd 	bl	800d8ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	332c      	adds	r3, #44	; 0x2c
 800d956:	4618      	mov	r0, r3
 800d958:	f7ff ff94 	bl	800d884 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	3314      	adds	r3, #20
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff ff5b 	bl	800d81c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff fe2f 	bl	800d5cc <_ZN16FrontendHeapBaseD1Ev>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	0801eb50 	.word	0x0801eb50

0800d97c <_ZN12FrontendHeapD0Ev>:
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ffd3 	bl	800d930 <_ZN12FrontendHeapD1Ev>
 800d98a:	f44f 7114 	mov.w	r1, #592	; 0x250
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f00f fb64 	bl	801d05c <_ZdlPvj>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
	...

0800d9a0 <_Z41__static_initialization_and_destruction_0ii>:
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af02      	add	r7, sp, #8
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d118      	bne.n	800d9e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d113      	bne.n	800d9e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 800d9ba:	4817      	ldr	r0, [pc, #92]	; (800da18 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800d9bc:	f7ff fed6 	bl	800d76c <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800d9c0:	4816      	ldr	r0, [pc, #88]	; (800da1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d9c2:	f7ff f977 	bl	800ccb4 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 800d9c6:	4816      	ldr	r0, [pc, #88]	; (800da20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d9c8:	f006 feac 	bl	8014724 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800d9cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	23f0      	movs	r3, #240	; 0xf0
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	4b10      	ldr	r3, [pc, #64]	; (800da18 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800d9d8:	4a11      	ldr	r2, [pc, #68]	; (800da20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d9da:	4910      	ldr	r1, [pc, #64]	; (800da1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d9dc:	4811      	ldr	r0, [pc, #68]	; (800da24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d9de:	f7ff fe99 	bl	800d714 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d113      	bne.n	800da10 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d10e      	bne.n	800da10 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800d9f2:	480c      	ldr	r0, [pc, #48]	; (800da24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d9f4:	f7fe ff2a 	bl	800c84c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800d9f8:	480b      	ldr	r0, [pc, #44]	; (800da28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d9fa:	f7fc fcdd 	bl	800a3b8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800d9fe:	4808      	ldr	r0, [pc, #32]	; (800da20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800da00:	f7ff fe4a 	bl	800d698 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 800da04:	4805      	ldr	r0, [pc, #20]	; (800da1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800da06:	f7ff f97f 	bl	800cd08 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800da0a:	4803      	ldr	r0, [pc, #12]	; (800da18 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800da0c:	f7fe fc6e 	bl	800c2ec <_ZN20STM32TouchControllerD1Ev>
}
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	2002e0a4 	.word	0x2002e0a4
 800da1c:	2002e0a8 	.word	0x2002e0a8
 800da20:	2002ecc8 	.word	0x2002ecc8
 800da24:	2002ed44 	.word	0x2002ed44
 800da28:	20000088 	.word	0x20000088

0800da2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800da34:	2301      	movs	r3, #1
    }
 800da36:	4618      	mov	r0, r3
 800da38:	370c      	adds	r7, #12
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 800da42:	b480      	push	{r7}
 800da44:	b083      	sub	sp, #12
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800da4a:	230c      	movs	r3, #12
    }
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	460b      	mov	r3, r1
 800da62:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800da64:	887a      	ldrh	r2, [r7, #2]
 800da66:	4613      	mov	r3, r2
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	4413      	add	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	3308      	adds	r3, #8
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	4413      	add	r3, r2
    }
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800da8c:	887a      	ldrh	r2, [r7, #2]
 800da8e:	4613      	mov	r3, r2
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4413      	add	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	3308      	adds	r3, #8
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	4413      	add	r3, r2
    }
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800dab0:	2301      	movs	r3, #1
    }
 800dab2:	4618      	mov	r0, r3
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800dabe:	b480      	push	{r7}
 800dac0:	b083      	sub	sp, #12
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800dac6:	23b4      	movs	r3, #180	; 0xb4
    }
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800dae0:	887b      	ldrh	r3, [r7, #2]
 800dae2:	22b4      	movs	r2, #180	; 0xb4
 800dae4:	fb02 f303 	mul.w	r3, r2, r3
 800dae8:	3308      	adds	r3, #8
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	4413      	add	r3, r2
    }
 800daee:	4618      	mov	r0, r3
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	460b      	mov	r3, r1
 800db04:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800db06:	887b      	ldrh	r3, [r7, #2]
 800db08:	22b4      	movs	r2, #180	; 0xb4
 800db0a:	fb02 f303 	mul.w	r3, r2, r3
 800db0e:	3308      	adds	r3, #8
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	4413      	add	r3, r2
    }
 800db14:	4618      	mov	r0, r3
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800db28:	2301      	movs	r3, #1
    }
 800db2a:	4618      	mov	r0, r3
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800db36:	b480      	push	{r7}
 800db38:	b083      	sub	sp, #12
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800db3e:	2310      	movs	r3, #16
    }
 800db40:	4618      	mov	r0, r3
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800db58:	887b      	ldrh	r3, [r7, #2]
 800db5a:	011b      	lsls	r3, r3, #4
 800db5c:	3308      	adds	r3, #8
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	4413      	add	r3, r2
    }
 800db62:	4618      	mov	r0, r3
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800db6e:	b480      	push	{r7}
 800db70:	b083      	sub	sp, #12
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800db7a:	887b      	ldrh	r3, [r7, #2]
 800db7c:	011b      	lsls	r3, r3, #4
 800db7e:	3308      	adds	r3, #8
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	4413      	add	r3, r2
    }
 800db84:	4618      	mov	r0, r3
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <_GLOBAL__sub_I_touchgfx_init>:
 800db90:	b580      	push	{r7, lr}
 800db92:	af00      	add	r7, sp, #0
 800db94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db98:	2001      	movs	r0, #1
 800db9a:	f7ff ff01 	bl	800d9a0 <_Z41__static_initialization_and_destruction_0ii>
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <_GLOBAL__sub_D_touchgfx_init>:
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dba8:	2000      	movs	r0, #0
 800dbaa:	f7ff fef9 	bl	800d9a0 <_Z41__static_initialization_and_destruction_0ii>
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3318      	adds	r3, #24
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	4798      	blx	r3
    }
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	78fa      	ldrb	r2, [r7, #3]
 800dbdc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800dc22:	78fb      	ldrb	r3, [r7, #3]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d105      	bne.n	800dc34 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	78fa      	ldrb	r2, [r7, #3]
 800dc2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e027      	b.n	800dc84 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800dc34:	78fb      	ldrb	r3, [r7, #3]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d123      	bne.n	800dc82 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d014      	beq.n	800dc6c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3380      	adds	r3, #128	; 0x80
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	4798      	blx	r3
 800dc4e:	4603      	mov	r3, r0
 800dc50:	461a      	mov	r2, r3
 800dc52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d008      	beq.n	800dc6c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800dc5a:	4b0c      	ldr	r3, [pc, #48]	; (800dc8c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	f083 0301 	eor.w	r3, r3, #1
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d001      	beq.n	800dc6c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e000      	b.n	800dc6e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d005      	beq.n	800dc7e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	78fa      	ldrb	r2, [r7, #3]
 800dc76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e002      	b.n	800dc84 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e000      	b.n	800dc84 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800dc82:	2300      	movs	r3, #0
    }
 800dc84:	4618      	mov	r0, r3
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	2002edca 	.word	0x2002edca

0800dc90 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800dca0:	bf00      	nop
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <__NVIC_EnableIRQ>:
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dcb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	db0d      	blt.n	800dcda <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dcbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	f003 021f 	and.w	r2, r3, #31
 800dcc8:	4907      	ldr	r1, [pc, #28]	; (800dce8 <__NVIC_EnableIRQ+0x3c>)
 800dcca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcce:	095b      	lsrs	r3, r3, #5
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	fa00 f202 	lsl.w	r2, r0, r2
 800dcd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800dcda:	bf00      	nop
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	e000e100 	.word	0xe000e100

0800dcec <__NVIC_DisableIRQ>:
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dcf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	db12      	blt.n	800dd24 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	f003 021f 	and.w	r2, r3, #31
 800dd08:	4909      	ldr	r1, [pc, #36]	; (800dd30 <__NVIC_DisableIRQ+0x44>)
 800dd0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd0e:	095b      	lsrs	r3, r3, #5
 800dd10:	2001      	movs	r0, #1
 800dd12:	fa00 f202 	lsl.w	r2, r0, r2
 800dd16:	3320      	adds	r3, #32
 800dd18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800dd1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dd20:	f3bf 8f6f 	isb	sy
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	e000e100 	.word	0xe000e100

0800dd34 <__NVIC_SetPriority>:
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	6039      	str	r1, [r7, #0]
 800dd3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	db0c      	blt.n	800dd62 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	4a0e      	ldr	r2, [pc, #56]	; (800dd88 <__NVIC_SetPriority+0x54>)
 800dd4e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800dd52:	4608      	mov	r0, r1
 800dd54:	011b      	lsls	r3, r3, #4
 800dd56:	b2d9      	uxtb	r1, r3
 800dd58:	1813      	adds	r3, r2, r0
 800dd5a:	460a      	mov	r2, r1
 800dd5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dd60:	e00c      	b.n	800dd7c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	4909      	ldr	r1, [pc, #36]	; (800dd8c <__NVIC_SetPriority+0x58>)
 800dd68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f003 030f 	and.w	r3, r3, #15
 800dd72:	3b04      	subs	r3, #4
 800dd74:	0112      	lsls	r2, r2, #4
 800dd76:	b2d2      	uxtb	r2, r2
 800dd78:	440b      	add	r3, r1
 800dd7a:	761a      	strb	r2, [r3, #24]
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	e000e100 	.word	0xe000e100
 800dd8c:	e000ed00 	.word	0xe000ed00

0800dd90 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800dd90:	b5b0      	push	{r4, r5, r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fe78 	bl	800ea90 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800dda0:	687d      	ldr	r5, [r7, #4]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	334c      	adds	r3, #76	; 0x4c
 800dda8:	681c      	ldr	r4, [r3, #0]
 800ddaa:	f001 ff3f 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	490d      	ldr	r1, [pc, #52]	; (800ddf0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7ff ff68 	bl	800dc90 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7ff ff23 	bl	800dc10 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3374      	adds	r3, #116	; 0x74
 800ddd2:	681c      	ldr	r4, [r3, #0]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	4906      	ldr	r1, [pc, #24]	; (800ddf4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 800ddda:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2101      	movs	r1, #1
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff fef3 	bl	800dbcc <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800dde6:	bf00      	nop
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bdb0      	pop	{r4, r5, r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	0800c9e5 	.word	0x0800c9e5
 800ddf4:	20000168 	.word	0x20000168

0800ddf8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800de00:	2109      	movs	r1, #9
 800de02:	205a      	movs	r0, #90	; 0x5a
 800de04:	f7ff ff96 	bl	800dd34 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800de08:	2109      	movs	r1, #9
 800de0a:	2058      	movs	r0, #88	; 0x58
 800de0c:	f7ff ff92 	bl	800dd34 <__NVIC_SetPriority>
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800de20:	205a      	movs	r0, #90	; 0x5a
 800de22:	f7ff ff43 	bl	800dcac <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800de26:	2058      	movs	r0, #88	; 0x58
 800de28:	f7ff ff40 	bl	800dcac <__NVIC_EnableIRQ>
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800de3c:	205a      	movs	r0, #90	; 0x5a
 800de3e:	f7ff ff55 	bl	800dcec <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800de42:	2058      	movs	r0, #88	; 0x58
 800de44:	f7ff ff52 	bl	800dcec <__NVIC_DisableIRQ>
}
 800de48:	bf00      	nop
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800de58:	4b11      	ldr	r3, [pc, #68]	; (800dea0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de62:	b29b      	uxth	r3, r3
 800de64:	3b01      	subs	r3, #1
 800de66:	b29a      	uxth	r2, r3
 800de68:	4b0e      	ldr	r3, [pc, #56]	; (800dea4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800de6a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800de6c:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	b29b      	uxth	r3, r3
 800de72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de76:	b29b      	uxth	r3, r3
 800de78:	3b01      	subs	r3, #1
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800de7e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800de80:	4b08      	ldr	r3, [pc, #32]	; (800dea4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800de82:	881a      	ldrh	r2, [r3, #0]
 800de84:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800de86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800de88:	4b05      	ldr	r3, [pc, #20]	; (800dea0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800de8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de8c:	4a04      	ldr	r2, [pc, #16]	; (800dea0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800de8e:	f043 0301 	orr.w	r3, r3, #1
 800de92:	6353      	str	r3, [r2, #52]	; 0x34
}
 800de94:	bf00      	nop
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	40016800 	.word	0x40016800
 800dea4:	2002edbc 	.word	0x2002edbc
 800dea8:	2002edbe 	.word	0x2002edbe

0800deac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800deb4:	4b03      	ldr	r3, [pc, #12]	; (800dec4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800deb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	40016884 	.word	0x40016884

0800dec8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800ded2:	4a06      	ldr	r2, [pc, #24]	; (800deec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800ded8:	4b05      	ldr	r3, [pc, #20]	; (800def0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800deda:	2201      	movs	r2, #1
 800dedc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dede:	bf00      	nop
 800dee0:	370c      	adds	r7, #12
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	40016884 	.word	0x40016884
 800def0:	40016800 	.word	0x40016800

0800def4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fad4 	bl	800e4b0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800df18:	4b0d      	ldr	r3, [pc, #52]	; (800df50 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800df1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df1c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800df1e:	4b0c      	ldr	r3, [pc, #48]	; (800df50 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	b29b      	uxth	r3, r3
 800df24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3301      	adds	r3, #1
 800df2c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 800df2e:	89fa      	ldrh	r2, [r7, #14]
 800df30:	89bb      	ldrh	r3, [r7, #12]
 800df32:	429a      	cmp	r2, r3
 800df34:	d201      	bcs.n	800df3a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 800df36:	2300      	movs	r3, #0
 800df38:	e003      	b.n	800df42 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 800df3a:	89fa      	ldrh	r2, [r7, #14]
 800df3c:	89bb      	ldrh	r3, [r7, #12]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	b29b      	uxth	r3, r3
    }
}
 800df42:	4618      	mov	r0, r3
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	40016800 	.word	0x40016800

0800df54 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800df5c:	4b1a      	ldr	r3, [pc, #104]	; (800dfc8 <HAL_LTDC_LineEventCallback+0x74>)
 800df5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df60:	4a1a      	ldr	r2, [pc, #104]	; (800dfcc <HAL_LTDC_LineEventCallback+0x78>)
 800df62:	8812      	ldrh	r2, [r2, #0]
 800df64:	4293      	cmp	r3, r2
 800df66:	bf0c      	ite	eq
 800df68:	2301      	moveq	r3, #1
 800df6a:	2300      	movne	r3, #0
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d017      	beq.n	800dfa2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800df72:	4b17      	ldr	r3, [pc, #92]	; (800dfd0 <HAL_LTDC_LineEventCallback+0x7c>)
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7f6 ffd9 	bl	8004f30 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800df7e:	f7fc fd7d 	bl	800aa7c <_ZN8touchgfx3HAL11getInstanceEv>
 800df82:	4603      	mov	r3, r0
 800df84:	4618      	mov	r0, r3
 800df86:	f7ff fe31 	bl	800dbec <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800df8a:	f7fe fced 	bl	800c968 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800df8e:	f7fc fd75 	bl	800aa7c <_ZN8touchgfx3HAL11getInstanceEv>
 800df92:	4603      	mov	r3, r0
 800df94:	4618      	mov	r0, r3
 800df96:	f001 f803 	bl	800efa0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800df9a:	2000      	movs	r0, #0
 800df9c:	f7fe f9c8 	bl	800c330 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800dfa0:	e00e      	b.n	800dfc0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800dfa2:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <HAL_LTDC_LineEventCallback+0x78>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7f6 ffc1 	bl	8004f30 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800dfae:	2000      	movs	r0, #0
 800dfb0:	f7fe f9c9 	bl	800c346 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800dfb4:	f7fc fd62 	bl	800aa7c <_ZN8touchgfx3HAL11getInstanceEv>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff fdf8 	bl	800dbb0 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	40016800 	.word	0x40016800
 800dfcc:	2002edbc 	.word	0x2002edbc
 800dfd0:	2002edbe 	.word	0x2002edbe

0800dfd4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800dfd4:	8880      	ldrh	r0, [r0, #4]
 800dfd6:	4770      	bx	lr

0800dfd8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800dfd8:	2300      	movs	r3, #0
 800dfda:	8083      	strh	r3, [r0, #4]
 800dfdc:	4770      	bx	lr
	...

0800dfe0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800dfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe2:	6803      	ldr	r3, [r0, #0]
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	460e      	mov	r6, r1
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfea:	2100      	movs	r1, #0
 800dfec:	4798      	blx	r3
 800dfee:	682b      	ldr	r3, [r5, #0]
 800dff0:	4604      	mov	r4, r0
 800dff2:	6a1b      	ldr	r3, [r3, #32]
 800dff4:	4628      	mov	r0, r5
 800dff6:	4798      	blx	r3
 800dff8:	88ab      	ldrh	r3, [r5, #4]
 800dffa:	1b34      	subs	r4, r6, r4
 800dffc:	b2a4      	uxth	r4, r4
 800dffe:	fbb4 f4f0 	udiv	r4, r4, r0
 800e002:	42a3      	cmp	r3, r4
 800e004:	d805      	bhi.n	800e012 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800e006:	4b0e      	ldr	r3, [pc, #56]	; (800e040 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800e008:	4a0e      	ldr	r2, [pc, #56]	; (800e044 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800e00a:	211e      	movs	r1, #30
 800e00c:	480e      	ldr	r0, [pc, #56]	; (800e048 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800e00e:	f00f f851 	bl	801d0b4 <__assert_func>
 800e012:	682b      	ldr	r3, [r5, #0]
 800e014:	2100      	movs	r1, #0
 800e016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e018:	4628      	mov	r0, r5
 800e01a:	4798      	blx	r3
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	4607      	mov	r7, r0
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	4628      	mov	r0, r5
 800e024:	4798      	blx	r3
 800e026:	1bf3      	subs	r3, r6, r7
 800e028:	b29b      	uxth	r3, r3
 800e02a:	fbb3 f2f0 	udiv	r2, r3, r0
 800e02e:	fb02 3010 	mls	r0, r2, r0, r3
 800e032:	b118      	cbz	r0, 800e03c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800e034:	4b05      	ldr	r3, [pc, #20]	; (800e04c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800e036:	4a03      	ldr	r2, [pc, #12]	; (800e044 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800e038:	211f      	movs	r1, #31
 800e03a:	e7e7      	b.n	800e00c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800e03c:	4620      	mov	r0, r4
 800e03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e040:	0801ecd0 	.word	0x0801ecd0
 800e044:	0801ee3e 	.word	0x0801ee3e
 800e048:	0801ece5 	.word	0x0801ece5
 800e04c:	0801ed13 	.word	0x0801ed13

0800e050 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	6803      	ldr	r3, [r0, #0]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	460d      	mov	r5, r1
 800e058:	4604      	mov	r4, r0
 800e05a:	4798      	blx	r3
 800e05c:	4285      	cmp	r5, r0
 800e05e:	d905      	bls.n	800e06c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800e060:	4b0c      	ldr	r3, [pc, #48]	; (800e094 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800e062:	4a0d      	ldr	r2, [pc, #52]	; (800e098 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800e064:	212f      	movs	r1, #47	; 0x2f
 800e066:	480d      	ldr	r0, [pc, #52]	; (800e09c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800e068:	f00f f824 	bl	801d0b4 <__assert_func>
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	88a5      	ldrh	r5, [r4, #4]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	4620      	mov	r0, r4
 800e074:	4798      	blx	r3
 800e076:	4285      	cmp	r5, r0
 800e078:	d303      	bcc.n	800e082 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800e07a:	4b09      	ldr	r3, [pc, #36]	; (800e0a0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800e07c:	4a06      	ldr	r2, [pc, #24]	; (800e098 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800e07e:	2130      	movs	r1, #48	; 0x30
 800e080:	e7f1      	b.n	800e066 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	88a1      	ldrh	r1, [r4, #4]
 800e086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e088:	4620      	mov	r0, r4
 800e08a:	4798      	blx	r3
 800e08c:	88a3      	ldrh	r3, [r4, #4]
 800e08e:	3301      	adds	r3, #1
 800e090:	80a3      	strh	r3, [r4, #4]
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	0801ed8d 	.word	0x0801ed8d
 800e098:	0801ee81 	.word	0x0801ee81
 800e09c:	0801ece5 	.word	0x0801ece5
 800e0a0:	0801eda4 	.word	0x0801eda4

0800e0a4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	6803      	ldr	r3, [r0, #0]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	4616      	mov	r6, r2
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	4798      	blx	r3
 800e0b2:	4286      	cmp	r6, r0
 800e0b4:	d905      	bls.n	800e0c2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800e0b6:	4b06      	ldr	r3, [pc, #24]	; (800e0d0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800e0b8:	4a06      	ldr	r2, [pc, #24]	; (800e0d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800e0ba:	4807      	ldr	r0, [pc, #28]	; (800e0d8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800e0bc:	2139      	movs	r1, #57	; 0x39
 800e0be:	f00e fff9 	bl	801d0b4 <__assert_func>
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0ce:	4718      	bx	r3
 800e0d0:	0801ed8d 	.word	0x0801ed8d
 800e0d4:	0801edf4 	.word	0x0801edf4
 800e0d8:	0801ece5 	.word	0x0801ece5

0800e0dc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e0dc:	4770      	bx	lr
	...

0800e0e0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e0e0:	4a02      	ldr	r2, [pc, #8]	; (800e0ec <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e0e2:	6002      	str	r2, [r0, #0]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	8082      	strh	r2, [r0, #4]
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	0801edc8 	.word	0x0801edc8

0800e0f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e0f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	b12b      	cbz	r3, 800e102 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e0f6:	b920      	cbnz	r0, 800e102 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e0f8:	1a5a      	subs	r2, r3, r1
 800e0fa:	4250      	negs	r0, r2
 800e0fc:	4150      	adcs	r0, r2
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	e7f8      	b.n	800e0f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e102:	4770      	bx	lr

0800e104 <_ZN8touchgfx9Container9removeAllEv>:
 800e104:	2200      	movs	r2, #0
 800e106:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e108:	b123      	cbz	r3, 800e114 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e10a:	6999      	ldr	r1, [r3, #24]
 800e10c:	6281      	str	r1, [r0, #40]	; 0x28
 800e10e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e112:	e7f8      	b.n	800e106 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e114:	4770      	bx	lr

0800e116 <_ZN8touchgfx9Container6unlinkEv>:
 800e116:	2300      	movs	r3, #0
 800e118:	6283      	str	r3, [r0, #40]	; 0x28
 800e11a:	4770      	bx	lr

0800e11c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	461f      	mov	r7, r3
 800e122:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800e126:	460d      	mov	r5, r1
 800e128:	4616      	mov	r6, r2
 800e12a:	b103      	cbz	r3, 800e12e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800e12c:	6038      	str	r0, [r7, #0]
 800e12e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e130:	b314      	cbz	r4, 800e178 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800e132:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e136:	b1eb      	cbz	r3, 800e174 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e138:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e13c:	428d      	cmp	r5, r1
 800e13e:	db19      	blt.n	800e174 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e140:	8923      	ldrh	r3, [r4, #8]
 800e142:	b289      	uxth	r1, r1
 800e144:	440b      	add	r3, r1
 800e146:	b21b      	sxth	r3, r3
 800e148:	429d      	cmp	r5, r3
 800e14a:	da13      	bge.n	800e174 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e14c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e150:	4296      	cmp	r6, r2
 800e152:	db0f      	blt.n	800e174 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e154:	8963      	ldrh	r3, [r4, #10]
 800e156:	b292      	uxth	r2, r2
 800e158:	4413      	add	r3, r2
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	429e      	cmp	r6, r3
 800e15e:	da09      	bge.n	800e174 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	1ab2      	subs	r2, r6, r2
 800e164:	1a69      	subs	r1, r5, r1
 800e166:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800e16a:	b212      	sxth	r2, r2
 800e16c:	463b      	mov	r3, r7
 800e16e:	b209      	sxth	r1, r1
 800e170:	4620      	mov	r0, r4
 800e172:	47c0      	blx	r8
 800e174:	69a4      	ldr	r4, [r4, #24]
 800e176:	e7db      	b.n	800e130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e17c <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e17c:	2200      	movs	r2, #0
 800e17e:	8002      	strh	r2, [r0, #0]
 800e180:	8042      	strh	r2, [r0, #2]
 800e182:	8082      	strh	r2, [r0, #4]
 800e184:	80c2      	strh	r2, [r0, #6]
 800e186:	4770      	bx	lr

0800e188 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e18c:	460d      	mov	r5, r1
 800e18e:	4616      	mov	r6, r2
 800e190:	b13c      	cbz	r4, 800e1a2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	4620      	mov	r0, r4
 800e196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e198:	4632      	mov	r2, r6
 800e19a:	4629      	mov	r1, r5
 800e19c:	4798      	blx	r3
 800e19e:	69a4      	ldr	r4, [r4, #24]
 800e1a0:	e7f6      	b.n	800e190 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}

0800e1a4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e1a8:	460d      	mov	r5, r1
 800e1aa:	b134      	cbz	r4, 800e1ba <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	4798      	blx	r3
 800e1b6:	69a4      	ldr	r4, [r4, #24]
 800e1b8:	e7f7      	b.n	800e1aa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e1ba:	bd38      	pop	{r3, r4, r5, pc}

0800e1bc <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e1bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e1be:	b19b      	cbz	r3, 800e1e8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e1c0:	428b      	cmp	r3, r1
 800e1c2:	d109      	bne.n	800e1d8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e1c4:	699a      	ldr	r2, [r3, #24]
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	6159      	str	r1, [r3, #20]
 800e1ca:	6282      	str	r2, [r0, #40]	; 0x28
 800e1cc:	b902      	cbnz	r2, 800e1d0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e1ce:	4770      	bx	lr
 800e1d0:	6199      	str	r1, [r3, #24]
 800e1d2:	4770      	bx	lr
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	b13a      	cbz	r2, 800e1e8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e1d8:	699a      	ldr	r2, [r3, #24]
 800e1da:	428a      	cmp	r2, r1
 800e1dc:	d1fa      	bne.n	800e1d4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e1de:	698a      	ldr	r2, [r1, #24]
 800e1e0:	619a      	str	r2, [r3, #24]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e1e8:	4770      	bx	lr

0800e1ea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e1ea:	b410      	push	{r4}
 800e1ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	b92b      	cbnz	r3, 800e1fe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e1f2:	6803      	ldr	r3, [r0, #0]
 800e1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	4718      	bx	r3
 800e1fe:	b941      	cbnz	r1, 800e212 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e200:	6193      	str	r3, [r2, #24]
 800e202:	6282      	str	r2, [r0, #40]	; 0x28
 800e204:	6154      	str	r4, [r2, #20]
 800e206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	4603      	mov	r3, r0
 800e20e:	2800      	cmp	r0, #0
 800e210:	d0f9      	beq.n	800e206 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e212:	4299      	cmp	r1, r3
 800e214:	6998      	ldr	r0, [r3, #24]
 800e216:	d1f9      	bne.n	800e20c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e218:	6190      	str	r0, [r2, #24]
 800e21a:	618a      	str	r2, [r1, #24]
 800e21c:	e7f2      	b.n	800e204 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800e220 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800e220:	4288      	cmp	r0, r1
 800e222:	b508      	push	{r3, lr}
 800e224:	d105      	bne.n	800e232 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800e226:	4b11      	ldr	r3, [pc, #68]	; (800e26c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800e228:	4a11      	ldr	r2, [pc, #68]	; (800e270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e22a:	2123      	movs	r1, #35	; 0x23
 800e22c:	4811      	ldr	r0, [pc, #68]	; (800e274 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800e22e:	f00e ff41 	bl	801d0b4 <__assert_func>
 800e232:	694b      	ldr	r3, [r1, #20]
 800e234:	b11b      	cbz	r3, 800e23e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800e236:	4b10      	ldr	r3, [pc, #64]	; (800e278 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800e238:	4a0d      	ldr	r2, [pc, #52]	; (800e270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e23a:	2124      	movs	r1, #36	; 0x24
 800e23c:	e7f6      	b.n	800e22c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800e23e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800e242:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e244:	b913      	cbnz	r3, 800e24c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800e246:	6281      	str	r1, [r0, #40]	; 0x28
 800e248:	bd08      	pop	{r3, pc}
 800e24a:	4613      	mov	r3, r2
 800e24c:	699a      	ldr	r2, [r3, #24]
 800e24e:	b12a      	cbz	r2, 800e25c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800e250:	428b      	cmp	r3, r1
 800e252:	d1fa      	bne.n	800e24a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800e254:	4b09      	ldr	r3, [pc, #36]	; (800e27c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800e256:	4a06      	ldr	r2, [pc, #24]	; (800e270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e258:	2135      	movs	r1, #53	; 0x35
 800e25a:	e7e7      	b.n	800e22c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800e25c:	428b      	cmp	r3, r1
 800e25e:	d103      	bne.n	800e268 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800e260:	4b06      	ldr	r3, [pc, #24]	; (800e27c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800e262:	4a03      	ldr	r2, [pc, #12]	; (800e270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e264:	2138      	movs	r1, #56	; 0x38
 800e266:	e7e1      	b.n	800e22c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800e268:	6199      	str	r1, [r3, #24]
 800e26a:	e7ed      	b.n	800e248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800e26c:	0801eebf 	.word	0x0801eebf
 800e270:	0801f014 	.word	0x0801f014
 800e274:	0801eeeb 	.word	0x0801eeeb
 800e278:	0801ef1e 	.word	0x0801ef1e
 800e27c:	0801ef54 	.word	0x0801ef54

0800e280 <_ZN8touchgfx4RectaNERKS0_>:
 800e280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	888b      	ldrh	r3, [r1, #4]
 800e286:	f9b1 9000 	ldrsh.w	r9, [r1]
 800e28a:	f9b0 a000 	ldrsh.w	sl, [r0]
 800e28e:	444b      	add	r3, r9
 800e290:	b29b      	uxth	r3, r3
 800e292:	fa0f f883 	sxth.w	r8, r3
 800e296:	45c2      	cmp	sl, r8
 800e298:	da30      	bge.n	800e2fc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e29a:	8882      	ldrh	r2, [r0, #4]
 800e29c:	4452      	add	r2, sl
 800e29e:	b292      	uxth	r2, r2
 800e2a0:	fa0f fe82 	sxth.w	lr, r2
 800e2a4:	45f1      	cmp	r9, lr
 800e2a6:	da29      	bge.n	800e2fc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e2a8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e2ac:	88cc      	ldrh	r4, [r1, #6]
 800e2ae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e2b2:	442c      	add	r4, r5
 800e2b4:	b224      	sxth	r4, r4
 800e2b6:	42a6      	cmp	r6, r4
 800e2b8:	da20      	bge.n	800e2fc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e2ba:	88c7      	ldrh	r7, [r0, #6]
 800e2bc:	4437      	add	r7, r6
 800e2be:	b2bf      	uxth	r7, r7
 800e2c0:	fa0f fc87 	sxth.w	ip, r7
 800e2c4:	4565      	cmp	r5, ip
 800e2c6:	da19      	bge.n	800e2fc <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e2c8:	45ca      	cmp	sl, r9
 800e2ca:	4654      	mov	r4, sl
 800e2cc:	bfb8      	it	lt
 800e2ce:	464c      	movlt	r4, r9
 800e2d0:	42b5      	cmp	r5, r6
 800e2d2:	bfb8      	it	lt
 800e2d4:	4635      	movlt	r5, r6
 800e2d6:	45f0      	cmp	r8, lr
 800e2d8:	bfc8      	it	gt
 800e2da:	4613      	movgt	r3, r2
 800e2dc:	1b1b      	subs	r3, r3, r4
 800e2de:	8083      	strh	r3, [r0, #4]
 800e2e0:	88ca      	ldrh	r2, [r1, #6]
 800e2e2:	884b      	ldrh	r3, [r1, #2]
 800e2e4:	8004      	strh	r4, [r0, #0]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	b21a      	sxth	r2, r3
 800e2ec:	4594      	cmp	ip, r2
 800e2ee:	bfb8      	it	lt
 800e2f0:	463b      	movlt	r3, r7
 800e2f2:	1b5b      	subs	r3, r3, r5
 800e2f4:	80c3      	strh	r3, [r0, #6]
 800e2f6:	8045      	strh	r5, [r0, #2]
 800e2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	8003      	strh	r3, [r0, #0]
 800e300:	8043      	strh	r3, [r0, #2]
 800e302:	8083      	strh	r3, [r0, #4]
 800e304:	80c3      	strh	r3, [r0, #6]
 800e306:	e7f7      	b.n	800e2f8 <_ZN8touchgfx4RectaNERKS0_+0x78>

0800e308 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e308:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e30c:	b12b      	cbz	r3, 800e31a <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 800e30e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e312:	fab0 f080 	clz	r0, r0
 800e316:	0940      	lsrs	r0, r0, #5
 800e318:	4770      	bx	lr
 800e31a:	2001      	movs	r0, #1
 800e31c:	4770      	bx	lr

0800e31e <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e322:	2300      	movs	r3, #0
 800e324:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800e326:	8003      	strh	r3, [r0, #0]
 800e328:	4604      	mov	r4, r0
 800e32a:	8043      	strh	r3, [r0, #2]
 800e32c:	8083      	strh	r3, [r0, #4]
 800e32e:	80c3      	strh	r3, [r0, #6]
 800e330:	2d00      	cmp	r5, #0
 800e332:	d040      	beq.n	800e3b6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e334:	1d28      	adds	r0, r5, #4
 800e336:	f7ff ffe7 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e33a:	b988      	cbnz	r0, 800e360 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e33c:	4620      	mov	r0, r4
 800e33e:	f7ff ffe3 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e342:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e346:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e34a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e34e:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e352:	b138      	cbz	r0, 800e364 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e354:	8022      	strh	r2, [r4, #0]
 800e356:	8063      	strh	r3, [r4, #2]
 800e358:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e35c:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e360:	69ad      	ldr	r5, [r5, #24]
 800e362:	e7e5      	b.n	800e330 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e364:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e368:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e36c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e370:	4290      	cmp	r0, r2
 800e372:	4607      	mov	r7, r0
 800e374:	bfa8      	it	ge
 800e376:	4617      	movge	r7, r2
 800e378:	4472      	add	r2, lr
 800e37a:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e37e:	8027      	strh	r7, [r4, #0]
 800e380:	4299      	cmp	r1, r3
 800e382:	460e      	mov	r6, r1
 800e384:	4440      	add	r0, r8
 800e386:	bfa8      	it	ge
 800e388:	461e      	movge	r6, r3
 800e38a:	4471      	add	r1, lr
 800e38c:	4463      	add	r3, ip
 800e38e:	b200      	sxth	r0, r0
 800e390:	b212      	sxth	r2, r2
 800e392:	b209      	sxth	r1, r1
 800e394:	b21b      	sxth	r3, r3
 800e396:	4290      	cmp	r0, r2
 800e398:	bfac      	ite	ge
 800e39a:	ebc7 0200 	rsbge	r2, r7, r0
 800e39e:	ebc7 0202 	rsblt	r2, r7, r2
 800e3a2:	4299      	cmp	r1, r3
 800e3a4:	bfac      	ite	ge
 800e3a6:	ebc6 0301 	rsbge	r3, r6, r1
 800e3aa:	ebc6 0303 	rsblt	r3, r6, r3
 800e3ae:	8066      	strh	r6, [r4, #2]
 800e3b0:	80a2      	strh	r2, [r4, #4]
 800e3b2:	80e3      	strh	r3, [r4, #6]
 800e3b4:	e7d4      	b.n	800e360 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3bc <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e3bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e3c0:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e3c4:	b383      	cbz	r3, 800e428 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e3c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e3c8:	b374      	cbz	r4, 800e428 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e3ca:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e3ce:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e3d2:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e3d6:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e3da:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e3de:	b303      	cbz	r3, 800e422 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e3e0:	4668      	mov	r0, sp
 800e3e2:	1d21      	adds	r1, r4, #4
 800e3e4:	f8ad 5000 	strh.w	r5, [sp]
 800e3e8:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e3ec:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e3f0:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e3f4:	f7ff ff44 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 800e3f8:	4668      	mov	r0, sp
 800e3fa:	f7ff ff85 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e3fe:	b980      	cbnz	r0, 800e422 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e400:	f8bd 3000 	ldrh.w	r3, [sp]
 800e404:	88a2      	ldrh	r2, [r4, #4]
 800e406:	1a9b      	subs	r3, r3, r2
 800e408:	f8ad 3000 	strh.w	r3, [sp]
 800e40c:	88e2      	ldrh	r2, [r4, #6]
 800e40e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e412:	1a9b      	subs	r3, r3, r2
 800e414:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	4669      	mov	r1, sp
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	4620      	mov	r0, r4
 800e420:	4798      	blx	r3
 800e422:	69a4      	ldr	r4, [r4, #24]
 800e424:	2c00      	cmp	r4, #0
 800e426:	d1d8      	bne.n	800e3da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e428:	b002      	add	sp, #8
 800e42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e42e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e42e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e430:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e434:	460d      	mov	r5, r1
 800e436:	4616      	mov	r6, r2
 800e438:	b323      	cbz	r3, 800e484 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e43a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e43c:	b314      	cbz	r4, 800e484 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e43e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e442:	b1eb      	cbz	r3, 800e480 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e444:	6828      	ldr	r0, [r5, #0]
 800e446:	6869      	ldr	r1, [r5, #4]
 800e448:	466b      	mov	r3, sp
 800e44a:	c303      	stmia	r3!, {r0, r1}
 800e44c:	4668      	mov	r0, sp
 800e44e:	1d21      	adds	r1, r4, #4
 800e450:	f7ff ff16 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 800e454:	4668      	mov	r0, sp
 800e456:	f7ff ff57 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e45a:	b988      	cbnz	r0, 800e480 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e45c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e460:	88a2      	ldrh	r2, [r4, #4]
 800e462:	1a9b      	subs	r3, r3, r2
 800e464:	f8ad 3000 	strh.w	r3, [sp]
 800e468:	88e2      	ldrh	r2, [r4, #6]
 800e46a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e46e:	1a9b      	subs	r3, r3, r2
 800e470:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	4632      	mov	r2, r6
 800e478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e47a:	4669      	mov	r1, sp
 800e47c:	4620      	mov	r0, r4
 800e47e:	4798      	blx	r3
 800e480:	69a4      	ldr	r4, [r4, #24]
 800e482:	e7db      	b.n	800e43c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e484:	b002      	add	sp, #8
 800e486:	bd70      	pop	{r4, r5, r6, pc}

0800e488 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800e488:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e48c:	4770      	bx	lr

0800e48e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e48e:	b513      	push	{r0, r1, r4, lr}
 800e490:	6803      	ldr	r3, [r0, #0]
 800e492:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800e496:	2300      	movs	r3, #0
 800e498:	e9cd 3300 	strd	r3, r3, [sp]
 800e49c:	466b      	mov	r3, sp
 800e49e:	47a0      	blx	r4
 800e4a0:	b002      	add	sp, #8
 800e4a2:	bd10      	pop	{r4, pc}

0800e4a4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e4aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800e4ae:	4770      	bx	lr

0800e4b0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e4b6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800e4ba:	4770      	bx	lr

0800e4bc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e4bc:	6843      	ldr	r3, [r0, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	725a      	strb	r2, [r3, #9]
 800e4c2:	6840      	ldr	r0, [r0, #4]
 800e4c4:	6803      	ldr	r3, [r0, #0]
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	4718      	bx	r3

0800e4ca <_ZN8touchgfx3HAL8flushDMAEv>:
 800e4ca:	6840      	ldr	r0, [r0, #4]
 800e4cc:	6803      	ldr	r3, [r0, #0]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	4718      	bx	r3
	...

0800e4d4 <_ZN8touchgfx3HAL10beginFrameEv>:
 800e4d4:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	b123      	cbz	r3, 800e4e4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e4da:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800e4de:	f080 0001 	eor.w	r0, r0, #1
 800e4e2:	4770      	bx	lr
 800e4e4:	2001      	movs	r0, #1
 800e4e6:	4770      	bx	lr
 800e4e8:	2002edca 	.word	0x2002edca

0800e4ec <_ZN8touchgfx3HAL8endFrameEv>:
 800e4ec:	b510      	push	{r4, lr}
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	6840      	ldr	r0, [r0, #4]
 800e4f2:	6803      	ldr	r3, [r0, #0]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	4798      	blx	r3
 800e4f8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800e4fc:	b113      	cbz	r3, 800e504 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e4fe:	2301      	movs	r3, #1
 800e500:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e504:	bd10      	pop	{r4, pc}

0800e506 <_ZN8touchgfx3HAL9taskEntryEv>:
 800e506:	b508      	push	{r3, lr}
 800e508:	6803      	ldr	r3, [r0, #0]
 800e50a:	4604      	mov	r4, r0
 800e50c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e50e:	4798      	blx	r3
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e514:	4620      	mov	r0, r4
 800e516:	4798      	blx	r3
 800e518:	f7fe fa4c 	bl	800c9b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800e51c:	6823      	ldr	r3, [r4, #0]
 800e51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e520:	e7f8      	b.n	800e514 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800e524 <_ZN8touchgfx3HAL4tickEv>:
 800e524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e526:	6803      	ldr	r3, [r0, #0]
 800e528:	4d5c      	ldr	r5, [pc, #368]	; (800e69c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e52a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e52e:	4604      	mov	r4, r0
 800e530:	4798      	blx	r3
 800e532:	2800      	cmp	r0, #0
 800e534:	f000 8097 	beq.w	800e666 <_ZN8touchgfx3HAL4tickEv+0x142>
 800e538:	2001      	movs	r0, #1
 800e53a:	f7fd fef9 	bl	800c330 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e53e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800e542:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800e546:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800e54a:	2600      	movs	r6, #0
 800e54c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800e550:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800e554:	b133      	cbz	r3, 800e564 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	4620      	mov	r0, r4
 800e55a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e55e:	4798      	blx	r3
 800e560:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800e564:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800e568:	6862      	ldr	r2, [r4, #4]
 800e56a:	f083 0301 	eor.w	r3, r3, #1
 800e56e:	7253      	strb	r3, [r2, #9]
 800e570:	2601      	movs	r6, #1
 800e572:	702e      	strb	r6, [r5, #0]
 800e574:	f001 fb5a 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 800e578:	6803      	ldr	r3, [r0, #0]
 800e57a:	4631      	mov	r1, r6
 800e57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e57e:	4798      	blx	r3
 800e580:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800e584:	b90b      	cbnz	r3, 800e58a <_ZN8touchgfx3HAL4tickEv+0x66>
 800e586:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800e58a:	f001 fb4f 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 800e58e:	6803      	ldr	r3, [r0, #0]
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	4798      	blx	r3
 800e594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e596:	6803      	ldr	r3, [r0, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	4798      	blx	r3
 800e59c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800e5a0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800e5ac:	b10a      	cbz	r2, 800e5b2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1eb      	bne.n	800e58a <_ZN8touchgfx3HAL4tickEv+0x66>
 800e5b2:	4a3b      	ldr	r2, [pc, #236]	; (800e6a0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e5b4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800e5b8:	7813      	ldrb	r3, [r2, #0]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	b25b      	sxtb	r3, r3
 800e5be:	4299      	cmp	r1, r3
 800e5c0:	7013      	strb	r3, [r2, #0]
 800e5c2:	dc10      	bgt.n	800e5e6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800e5c4:	68e0      	ldr	r0, [r4, #12]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	7013      	strb	r3, [r2, #0]
 800e5ca:	6803      	ldr	r3, [r0, #0]
 800e5cc:	aa03      	add	r2, sp, #12
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	a902      	add	r1, sp, #8
 800e5d2:	4798      	blx	r3
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	d051      	beq.n	800e67e <_ZN8touchgfx3HAL4tickEv+0x15a>
 800e5da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4798      	blx	r3
 800e5e6:	6960      	ldr	r0, [r4, #20]
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	f88d 3007 	strb.w	r3, [sp, #7]
 800e5ee:	b158      	cbz	r0, 800e608 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800e5f0:	6803      	ldr	r3, [r0, #0]
 800e5f2:	f10d 0107 	add.w	r1, sp, #7
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	4798      	blx	r3
 800e5fa:	b128      	cbz	r0, 800e608 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800e5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e602:	6803      	ldr	r3, [r0, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	4798      	blx	r3
 800e608:	f104 001c 	add.w	r0, r4, #28
 800e60c:	f00e fc6e 	bl	801ceec <_ZN8touchgfx8Gestures4tickEv>
 800e610:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800e614:	b30b      	cbz	r3, 800e65a <_ZN8touchgfx3HAL4tickEv+0x136>
 800e616:	6920      	ldr	r0, [r4, #16]
 800e618:	6803      	ldr	r3, [r0, #0]
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	4798      	blx	r3
 800e61e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e620:	4606      	mov	r6, r0
 800e622:	b903      	cbnz	r3, 800e626 <_ZN8touchgfx3HAL4tickEv+0x102>
 800e624:	6720      	str	r0, [r4, #112]	; 0x70
 800e626:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e628:	4a1e      	ldr	r2, [pc, #120]	; (800e6a4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800e62a:	1af3      	subs	r3, r6, r3
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d914      	bls.n	800e65a <_ZN8touchgfx3HAL4tickEv+0x136>
 800e630:	6920      	ldr	r0, [r4, #16]
 800e632:	6803      	ldr	r3, [r0, #0]
 800e634:	699b      	ldr	r3, [r3, #24]
 800e636:	4798      	blx	r3
 800e638:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e63a:	2264      	movs	r2, #100	; 0x64
 800e63c:	1af3      	subs	r3, r6, r3
 800e63e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e642:	fbb0 f0f3 	udiv	r0, r0, r3
 800e646:	2800      	cmp	r0, #0
 800e648:	dc1e      	bgt.n	800e688 <_ZN8touchgfx3HAL4tickEv+0x164>
 800e64a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800e64e:	6920      	ldr	r0, [r4, #16]
 800e650:	6803      	ldr	r3, [r0, #0]
 800e652:	2100      	movs	r1, #0
 800e654:	69db      	ldr	r3, [r3, #28]
 800e656:	4798      	blx	r3
 800e658:	6726      	str	r6, [r4, #112]	; 0x70
 800e65a:	f001 fae7 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 800e65e:	6803      	ldr	r3, [r0, #0]
 800e660:	2100      	movs	r1, #0
 800e662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e664:	4798      	blx	r3
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	4620      	mov	r0, r4
 800e66a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e66e:	4798      	blx	r3
 800e670:	2001      	movs	r0, #1
 800e672:	f7fd fe68 	bl	800c346 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e676:	2300      	movs	r3, #0
 800e678:	702b      	strb	r3, [r5, #0]
 800e67a:	b004      	add	sp, #16
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e682:	4620      	mov	r0, r4
 800e684:	4798      	blx	r3
 800e686:	e7ae      	b.n	800e5e6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800e688:	2863      	cmp	r0, #99	; 0x63
 800e68a:	bfcb      	itete	gt
 800e68c:	2300      	movgt	r3, #0
 800e68e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800e692:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800e696:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800e69a:	e7d8      	b.n	800e64e <_ZN8touchgfx3HAL4tickEv+0x12a>
 800e69c:	2002edd0 	.word	0x2002edd0
 800e6a0:	2002edd1 	.word	0x2002edd1
 800e6a4:	05f5e100 	.word	0x05f5e100

0800e6a8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e6a8:	f7fe b924 	b.w	800c8f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e6ac <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e6ac:	6581      	str	r1, [r0, #88]	; 0x58
 800e6ae:	301c      	adds	r0, #28
 800e6b0:	f00e bc1a 	b.w	801cee8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e6b4 <_ZN8touchgfx3HAL5touchEll>:
 800e6b4:	b530      	push	{r4, r5, lr}
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	a804      	add	r0, sp, #16
 800e6bc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e6c0:	f001 f872 	bl	800f7a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e6c4:	9b04      	ldr	r3, [sp, #16]
 800e6c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e6ca:	a906      	add	r1, sp, #24
 800e6cc:	9b05      	ldr	r3, [sp, #20]
 800e6ce:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e6d2:	a803      	add	r0, sp, #12
 800e6d4:	f001 f8b6 	bl	800f844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e6d8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800e6dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e6e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e6e4:	f104 001c 	add.w	r0, r4, #28
 800e6e8:	b189      	cbz	r1, 800e70e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e6ea:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	462a      	mov	r2, r5
 800e6f8:	f00e fc06 	bl	801cf08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e6fc:	b128      	cbz	r0, 800e70a <_ZN8touchgfx3HAL5touchEll+0x56>
 800e6fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e702:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e704:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e708:	6623      	str	r3, [r4, #96]	; 0x60
 800e70a:	b007      	add	sp, #28
 800e70c:	bd30      	pop	{r4, r5, pc}
 800e70e:	f00e fc3f 	bl	801cf90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e712:	2301      	movs	r3, #1
 800e714:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e718:	e7f1      	b.n	800e6fe <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e71a:	b570      	push	{r4, r5, r6, lr}
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d050      	beq.n	800e7c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e720:	ea81 0002 	eor.w	r0, r1, r2
 800e724:	07c6      	lsls	r6, r0, #31
 800e726:	d508      	bpl.n	800e73a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e728:	3a01      	subs	r2, #1
 800e72a:	18cc      	adds	r4, r1, r3
 800e72c:	42a1      	cmp	r1, r4
 800e72e:	d048      	beq.n	800e7c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e730:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e734:	f801 0b01 	strb.w	r0, [r1], #1
 800e738:	e7f8      	b.n	800e72c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e73a:	07d5      	lsls	r5, r2, #31
 800e73c:	bf42      	ittt	mi
 800e73e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e742:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e746:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d915      	bls.n	800e77a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e74e:	ea82 0001 	eor.w	r0, r2, r1
 800e752:	0784      	lsls	r4, r0, #30
 800e754:	d02d      	beq.n	800e7b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800e756:	1e94      	subs	r4, r2, #2
 800e758:	4608      	mov	r0, r1
 800e75a:	18ce      	adds	r6, r1, r3
 800e75c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800e760:	f820 5b02 	strh.w	r5, [r0], #2
 800e764:	1a35      	subs	r5, r6, r0
 800e766:	2d01      	cmp	r5, #1
 800e768:	d8f8      	bhi.n	800e75c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800e76a:	1e98      	subs	r0, r3, #2
 800e76c:	f020 0001 	bic.w	r0, r0, #1
 800e770:	3002      	adds	r0, #2
 800e772:	4401      	add	r1, r0
 800e774:	4402      	add	r2, r0
 800e776:	f003 0301 	and.w	r3, r3, #1
 800e77a:	1f14      	subs	r4, r2, #4
 800e77c:	4608      	mov	r0, r1
 800e77e:	18ce      	adds	r6, r1, r3
 800e780:	1a35      	subs	r5, r6, r0
 800e782:	2d03      	cmp	r5, #3
 800e784:	d810      	bhi.n	800e7a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800e786:	089c      	lsrs	r4, r3, #2
 800e788:	00a0      	lsls	r0, r4, #2
 800e78a:	4401      	add	r1, r0
 800e78c:	3801      	subs	r0, #1
 800e78e:	4402      	add	r2, r0
 800e790:	f06f 0003 	mvn.w	r0, #3
 800e794:	fb00 3404 	mla	r4, r0, r4, r3
 800e798:	440c      	add	r4, r1
 800e79a:	42a1      	cmp	r1, r4
 800e79c:	d011      	beq.n	800e7c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e79e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e7a2:	f801 3b01 	strb.w	r3, [r1], #1
 800e7a6:	e7f8      	b.n	800e79a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800e7a8:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800e7ac:	f840 5b04 	str.w	r5, [r0], #4
 800e7b0:	e7e6      	b.n	800e780 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800e7b2:	0790      	lsls	r0, r2, #30
 800e7b4:	d0e1      	beq.n	800e77a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e7b6:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e7ba:	f821 0b02 	strh.w	r0, [r1], #2
 800e7be:	3b02      	subs	r3, #2
 800e7c0:	e7db      	b.n	800e77a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e7c2:	2001      	movs	r0, #1
 800e7c4:	bd70      	pop	{r4, r5, r6, pc}

0800e7c6 <_ZN8touchgfx3HAL7noTouchEv>:
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	b153      	cbz	r3, 800e7e6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e7d0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800e7d4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800e7d8:	2101      	movs	r1, #1
 800e7da:	301c      	adds	r0, #28
 800e7dc:	f00e fbd8 	bl	801cf90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e7e6:	bd10      	pop	{r4, pc}

0800e7e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	6980      	ldr	r0, [r0, #24]
 800e7f0:	b085      	sub	sp, #20
 800e7f2:	460f      	mov	r7, r1
 800e7f4:	4690      	mov	r8, r2
 800e7f6:	4699      	mov	r9, r3
 800e7f8:	b930      	cbnz	r0, 800e808 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800e7fa:	4b1f      	ldr	r3, [pc, #124]	; (800e878 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800e7fc:	4a1f      	ldr	r2, [pc, #124]	; (800e87c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800e7fe:	f44f 7198 	mov.w	r1, #304	; 0x130
 800e802:	481f      	ldr	r0, [pc, #124]	; (800e880 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 800e804:	f00e fc56 	bl	801d0b4 <__assert_func>
 800e808:	ac04      	add	r4, sp, #16
 800e80a:	2600      	movs	r6, #0
 800e80c:	f844 6d04 	str.w	r6, [r4, #-4]!
 800e810:	6806      	ldr	r6, [r0, #0]
 800e812:	9401      	str	r4, [sp, #4]
 800e814:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800e818:	9400      	str	r4, [sp, #0]
 800e81a:	6834      	ldr	r4, [r6, #0]
 800e81c:	47a0      	blx	r4
 800e81e:	4c19      	ldr	r4, [pc, #100]	; (800e884 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 800e820:	4606      	mov	r6, r0
 800e822:	f8a4 9000 	strh.w	r9, [r4]
 800e826:	f7fc f935 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800e82a:	6803      	ldr	r3, [r0, #0]
 800e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82e:	4798      	blx	r3
 800e830:	280c      	cmp	r0, #12
 800e832:	d80f      	bhi.n	800e854 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800e834:	e8df f000 	tbb	[pc, r0]
 800e838:	1b1b1207 	.word	0x1b1b1207
 800e83c:	1b1b1b1b 	.word	0x1b1b1b1b
 800e840:	1b1b1b1b 	.word	0x1b1b1b1b
 800e844:	1b          	.byte	0x1b
 800e845:	00          	.byte	0x00
 800e846:	8823      	ldrh	r3, [r4, #0]
 800e848:	fb08 7203 	mla	r2, r8, r3, r7
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e852:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e854:	4630      	mov	r0, r6
 800e856:	b005      	add	sp, #20
 800e858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e85c:	8822      	ldrh	r2, [r4, #0]
 800e85e:	9b03      	ldr	r3, [sp, #12]
 800e860:	fb08 7202 	mla	r2, r8, r2, r7
 800e864:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e868:	1a9a      	subs	r2, r3, r2
 800e86a:	63ea      	str	r2, [r5, #60]	; 0x3c
 800e86c:	e7f2      	b.n	800e854 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800e86e:	4b06      	ldr	r3, [pc, #24]	; (800e888 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 800e870:	4a02      	ldr	r2, [pc, #8]	; (800e87c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800e872:	f240 114d 	movw	r1, #333	; 0x14d
 800e876:	e7c4      	b.n	800e802 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800e878:	0801f0bd 	.word	0x0801f0bd
 800e87c:	0801f3ce 	.word	0x0801f3ce
 800e880:	0801f102 	.word	0x0801f102
 800e884:	2002edc6 	.word	0x2002edc6
 800e888:	0801f128 	.word	0x0801f128

0800e88c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800e88c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e890:	4698      	mov	r8, r3
 800e892:	6803      	ldr	r3, [r0, #0]
 800e894:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800e896:	4b0f      	ldr	r3, [pc, #60]	; (800e8d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800e898:	b087      	sub	sp, #28
 800e89a:	f8b3 9000 	ldrh.w	r9, [r3]
 800e89e:	460e      	mov	r6, r1
 800e8a0:	4617      	mov	r7, r2
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	f7fc f8f6 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800e8a8:	6803      	ldr	r3, [r0, #0]
 800e8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ac:	4798      	blx	r3
 800e8ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e8b2:	9302      	str	r3, [sp, #8]
 800e8b4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e8b8:	9301      	str	r3, [sp, #4]
 800e8ba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800e8c4:	4643      	mov	r3, r8
 800e8c6:	463a      	mov	r2, r7
 800e8c8:	4631      	mov	r1, r6
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	47a8      	blx	r5
 800e8ce:	b007      	add	sp, #28
 800e8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8d4:	2002edc6 	.word	0x2002edc6

0800e8d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8dc:	4606      	mov	r6, r0
 800e8de:	b089      	sub	sp, #36	; 0x24
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	4691      	mov	r9, r2
 800e8e6:	4698      	mov	r8, r3
 800e8e8:	f002 fe6c 	bl	80115c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	f000 8092 	beq.w	800ea16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 800e8f2:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800ea30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800e8f6:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800ea34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 800e8fa:	f8da 0000 	ldr.w	r0, [sl]
 800e8fe:	4f4b      	ldr	r7, [pc, #300]	; (800ea2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800e900:	6802      	ldr	r2, [r0, #0]
 800e902:	6a12      	ldr	r2, [r2, #32]
 800e904:	4790      	blx	r2
 800e906:	f8da 0000 	ldr.w	r0, [sl]
 800e90a:	6802      	ldr	r2, [r0, #0]
 800e90c:	ad08      	add	r5, sp, #32
 800e90e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e910:	4790      	blx	r2
 800e912:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 800e916:	f8bb 3000 	ldrh.w	r3, [fp]
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	4628      	mov	r0, r5
 800e91e:	883b      	ldrh	r3, [r7, #0]
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	f002 ff0f 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e926:	f8ab 0000 	strh.w	r0, [fp]
 800e92a:	4628      	mov	r0, r5
 800e92c:	f002 ff44 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e930:	f8da b000 	ldr.w	fp, [sl]
 800e934:	8038      	strh	r0, [r7, #0]
 800e936:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800e93a:	9302      	str	r3, [sp, #8]
 800e93c:	4648      	mov	r0, r9
 800e93e:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 800e942:	f002 fe3f 	bl	80115c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e946:	f8da 2000 	ldr.w	r2, [sl]
 800e94a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800e94e:	63d0      	str	r0, [r2, #60]	; 0x3c
 800e950:	6822      	ldr	r2, [r4, #0]
 800e952:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 800e956:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e958:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 800e95c:	2200      	movs	r2, #0
 800e95e:	4611      	mov	r1, r2
 800e960:	4620      	mov	r0, r4
 800e962:	4798      	blx	r3
 800e964:	2201      	movs	r2, #1
 800e966:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 800e96a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800e96e:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 800e972:	1d22      	adds	r2, r4, #4
 800e974:	2900      	cmp	r1, #0
 800e976:	d051      	beq.n	800ea1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800e978:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800e97c:	2900      	cmp	r1, #0
 800e97e:	d04d      	beq.n	800ea1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800e980:	6810      	ldr	r0, [r2, #0]
 800e982:	6851      	ldr	r1, [r2, #4]
 800e984:	f10d 0c18 	add.w	ip, sp, #24
 800e988:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e98c:	4641      	mov	r1, r8
 800e98e:	a806      	add	r0, sp, #24
 800e990:	f7ff fc76 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 800e994:	4628      	mov	r0, r5
 800e996:	f003 f861 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e99a:	4680      	mov	r8, r0
 800e99c:	f7fc f87a 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800e9a0:	6802      	ldr	r2, [r0, #0]
 800e9a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e9a4:	4790      	blx	r2
 800e9a6:	4580      	cmp	r8, r0
 800e9a8:	d03d      	beq.n	800ea26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 800e9aa:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800e9ac:	b150      	cbz	r0, 800e9c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f003 f854 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e9b4:	4605      	mov	r5, r0
 800e9b6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800e9b8:	6803      	ldr	r3, [r0, #0]
 800e9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9bc:	4798      	blx	r3
 800e9be:	1a2b      	subs	r3, r5, r0
 800e9c0:	4258      	negs	r0, r3
 800e9c2:	4158      	adcs	r0, r3
 800e9c4:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800e9c8:	6822      	ldr	r2, [r4, #0]
 800e9ca:	6963      	ldr	r3, [r4, #20]
 800e9cc:	9303      	str	r3, [sp, #12]
 800e9ce:	2500      	movs	r5, #0
 800e9d0:	6165      	str	r5, [r4, #20]
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	6892      	ldr	r2, [r2, #8]
 800e9d6:	a906      	add	r1, sp, #24
 800e9d8:	4790      	blx	r2
 800e9da:	9b03      	ldr	r3, [sp, #12]
 800e9dc:	6163      	str	r3, [r4, #20]
 800e9de:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	4c11      	ldr	r4, [pc, #68]	; (800ea30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 800e9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ee:	4652      	mov	r2, sl
 800e9f0:	4649      	mov	r1, r9
 800e9f2:	4798      	blx	r3
 800e9f4:	6820      	ldr	r0, [r4, #0]
 800e9f6:	9b02      	ldr	r3, [sp, #8]
 800e9f8:	9a00      	ldr	r2, [sp, #0]
 800e9fa:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 800e9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ea34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 800ea00:	801a      	strh	r2, [r3, #0]
 800ea02:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800ea04:	9a01      	ldr	r2, [sp, #4]
 800ea06:	801a      	strh	r2, [r3, #0]
 800ea08:	6803      	ldr	r3, [r0, #0]
 800ea0a:	6a1b      	ldr	r3, [r3, #32]
 800ea0c:	4798      	blx	r3
 800ea0e:	6820      	ldr	r0, [r4, #0]
 800ea10:	6803      	ldr	r3, [r0, #0]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea14:	4798      	blx	r3
 800ea16:	b009      	add	sp, #36	; 0x24
 800ea18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1c:	6810      	ldr	r0, [r2, #0]
 800ea1e:	6851      	ldr	r1, [r2, #4]
 800ea20:	ab06      	add	r3, sp, #24
 800ea22:	c303      	stmia	r3!, {r0, r1}
 800ea24:	e7b6      	b.n	800e994 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 800ea26:	2000      	movs	r0, #0
 800ea28:	e7cc      	b.n	800e9c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800ea2a:	bf00      	nop
 800ea2c:	2002edc8 	.word	0x2002edc8
 800ea30:	2002edcc 	.word	0x2002edcc
 800ea34:	2002edc6 	.word	0x2002edc6

0800ea38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	4b07      	ldr	r3, [pc, #28]	; (800ea58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	4604      	mov	r4, r0
 800ea40:	b13b      	cbz	r3, 800ea52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ea42:	6803      	ldr	r3, [r0, #0]
 800ea44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea46:	4798      	blx	r3
 800ea48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ea4a:	4283      	cmp	r3, r0
 800ea4c:	d101      	bne.n	800ea52 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ea4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ea50:	bd10      	pop	{r4, pc}
 800ea52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ea54:	e7fc      	b.n	800ea50 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800ea56:	bf00      	nop
 800ea58:	2002edca 	.word	0x2002edca

0800ea5c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	4b0b      	ldr	r3, [pc, #44]	; (800ea8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	4604      	mov	r4, r0
 800ea64:	b95b      	cbnz	r3, 800ea7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea66:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d007      	beq.n	800ea7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea6e:	6840      	ldr	r0, [r0, #4]
 800ea70:	f000 fbc8 	bl	800f204 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ea74:	b118      	cbz	r0, 800ea7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ea76:	6862      	ldr	r2, [r4, #4]
 800ea78:	7a53      	ldrb	r3, [r2, #9]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d0fc      	beq.n	800ea78 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ea7e:	f7fd ff2b 	bl	800c8d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7ff ffd8 	bl	800ea38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop
 800ea8c:	2002edca 	.word	0x2002edca

0800ea90 <_ZN8touchgfx3HAL10initializeEv>:
 800ea90:	b510      	push	{r4, lr}
 800ea92:	4604      	mov	r4, r0
 800ea94:	f7fd fefc 	bl	800c890 <_ZN8touchgfx10OSWrappers10initializeEv>
 800ea98:	6860      	ldr	r0, [r4, #4]
 800ea9a:	6803      	ldr	r3, [r0, #0]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	4798      	blx	r3
 800eaa0:	68e0      	ldr	r0, [r4, #12]
 800eaa2:	6803      	ldr	r3, [r0, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	4798      	blx	r3
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	4620      	mov	r0, r4
 800eaac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab2:	4718      	bx	r3

0800eab4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800eab4:	b508      	push	{r3, lr}
 800eab6:	290c      	cmp	r1, #12
 800eab8:	d817      	bhi.n	800eaea <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800eaba:	e8df f001 	tbb	[pc, r1]
 800eabe:	090b      	.short	0x090b
 800eac0:	0d0d0d07 	.word	0x0d0d0d07
 800eac4:	1414140d 	.word	0x1414140d
 800eac8:	1414      	.short	0x1414
 800eaca:	0d          	.byte	0x0d
 800eacb:	00          	.byte	0x00
 800eacc:	2020      	movs	r0, #32
 800eace:	bd08      	pop	{r3, pc}
 800ead0:	2018      	movs	r0, #24
 800ead2:	e7fc      	b.n	800eace <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800ead4:	2010      	movs	r0, #16
 800ead6:	e7fa      	b.n	800eace <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800ead8:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800eada:	4a06      	ldr	r2, [pc, #24]	; (800eaf4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800eadc:	4806      	ldr	r0, [pc, #24]	; (800eaf8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800eade:	f44f 710c 	mov.w	r1, #560	; 0x230
 800eae2:	f00e fae7 	bl	801d0b4 <__assert_func>
 800eae6:	2008      	movs	r0, #8
 800eae8:	e7f1      	b.n	800eace <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800eaea:	2000      	movs	r0, #0
 800eaec:	e7ef      	b.n	800eace <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800eaee:	bf00      	nop
 800eaf0:	0801f1fb 	.word	0x0801f1fb
 800eaf4:	0801f590 	.word	0x0801f590
 800eaf8:	0801f102 	.word	0x0801f102

0800eafc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	460d      	mov	r5, r1
 800eb00:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800eb04:	4616      	mov	r6, r2
 800eb06:	461c      	mov	r4, r3
 800eb08:	f7ff ffd4 	bl	800eab4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800eb0c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800eb10:	10c0      	asrs	r0, r0, #3
 800eb12:	fb06 5101 	mla	r1, r6, r1, r5
 800eb16:	fb00 4001 	mla	r0, r0, r1, r4
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}

0800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800eb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb20:	b08a      	sub	sp, #40	; 0x28
 800eb22:	f04f 0c00 	mov.w	ip, #0
 800eb26:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800eb2a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800eb2e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800eb32:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800eb36:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800eb3a:	f8cd c020 	str.w	ip, [sp, #32]
 800eb3e:	f1b8 0f02 	cmp.w	r8, #2
 800eb42:	4604      	mov	r4, r0
 800eb44:	469a      	mov	sl, r3
 800eb46:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800eb4a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800eb4e:	d030      	beq.n	800ebb2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800eb50:	2bff      	cmp	r3, #255	; 0xff
 800eb52:	d12c      	bne.n	800ebae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800eb54:	4560      	cmp	r0, ip
 800eb56:	bf14      	ite	ne
 800eb58:	2004      	movne	r0, #4
 800eb5a:	2001      	moveq	r0, #1
 800eb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb60:	9204      	str	r2, [sp, #16]
 800eb62:	4620      	mov	r0, r4
 800eb64:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800eb68:	f8ad 201c 	strh.w	r2, [sp, #28]
 800eb6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eb70:	f8ad 6018 	strh.w	r6, [sp, #24]
 800eb74:	f8ad 501a 	strh.w	r5, [sp, #26]
 800eb78:	f7ff ff5e 	bl	800ea38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eb7c:	e9cd 9700 	strd	r9, r7, [sp]
 800eb80:	4603      	mov	r3, r0
 800eb82:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800eb86:	4651      	mov	r1, sl
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f7ff ffb7 	bl	800eafc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800eb8e:	f8ad 901e 	strh.w	r9, [sp, #30]
 800eb92:	9005      	str	r0, [sp, #20]
 800eb94:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800eb98:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800eb9c:	b106      	cbz	r6, 800eba0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800eb9e:	b98d      	cbnz	r5, 800ebc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800eba0:	4b12      	ldr	r3, [pc, #72]	; (800ebec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800eba2:	4a13      	ldr	r2, [pc, #76]	; (800ebf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800eba4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800eba8:	4812      	ldr	r0, [pc, #72]	; (800ebf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800ebaa:	f00e fa83 	bl	801d0b4 <__assert_func>
 800ebae:	2004      	movs	r0, #4
 800ebb0:	e7d4      	b.n	800eb5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800ebb2:	2bff      	cmp	r3, #255	; 0xff
 800ebb4:	d104      	bne.n	800ebc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	bf14      	ite	ne
 800ebba:	2040      	movne	r0, #64	; 0x40
 800ebbc:	2020      	moveq	r0, #32
 800ebbe:	e7cd      	b.n	800eb5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800ebc0:	2040      	movs	r0, #64	; 0x40
 800ebc2:	e7cb      	b.n	800eb5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	9d02      	ldr	r5, [sp, #8]
 800ebc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebca:	4620      	mov	r0, r4
 800ebcc:	4798      	blx	r3
 800ebce:	4228      	tst	r0, r5
 800ebd0:	d104      	bne.n	800ebdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800ebd2:	4b09      	ldr	r3, [pc, #36]	; (800ebf8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800ebd4:	4a06      	ldr	r2, [pc, #24]	; (800ebf0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800ebd6:	f240 11b1 	movw	r1, #433	; 0x1b1
 800ebda:	e7e5      	b.n	800eba8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800ebdc:	6860      	ldr	r0, [r4, #4]
 800ebde:	6803      	ldr	r3, [r0, #0]
 800ebe0:	a902      	add	r1, sp, #8
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	4798      	blx	r3
 800ebe6:	b00a      	add	sp, #40	; 0x28
 800ebe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebec:	0801f17e 	.word	0x0801f17e
 800ebf0:	0801f432 	.word	0x0801f432
 800ebf4:	0801f102 	.word	0x0801f102
 800ebf8:	0801f1b6 	.word	0x0801f1b6

0800ebfc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	b08a      	sub	sp, #40	; 0x28
 800ec00:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800ec04:	9408      	str	r4, [sp, #32]
 800ec06:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800ec0a:	9407      	str	r4, [sp, #28]
 800ec0c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800ec10:	9406      	str	r4, [sp, #24]
 800ec12:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800ec16:	9405      	str	r4, [sp, #20]
 800ec18:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800ec1c:	9404      	str	r4, [sp, #16]
 800ec1e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800ec22:	9403      	str	r4, [sp, #12]
 800ec24:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800ec28:	9402      	str	r4, [sp, #8]
 800ec2a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800ec2e:	e9cd 3400 	strd	r3, r4, [sp]
 800ec32:	4613      	mov	r3, r2
 800ec34:	2200      	movs	r2, #0
 800ec36:	f7ff ff71 	bl	800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800ec3a:	b00a      	add	sp, #40	; 0x28
 800ec3c:	bd10      	pop	{r4, pc}
	...

0800ec40 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800ec40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec42:	b08b      	sub	sp, #44	; 0x2c
 800ec44:	4616      	mov	r6, r2
 800ec46:	460d      	mov	r5, r1
 800ec48:	461f      	mov	r7, r3
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	f7fb ff22 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800ec50:	6803      	ldr	r3, [r0, #0]
 800ec52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec54:	4798      	blx	r3
 800ec56:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800ec5a:	4b0d      	ldr	r3, [pc, #52]	; (800ec90 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	9306      	str	r3, [sp, #24]
 800ec60:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ec64:	9305      	str	r3, [sp, #20]
 800ec66:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ec70:	9303      	str	r3, [sp, #12]
 800ec72:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ec76:	9302      	str	r3, [sp, #8]
 800ec78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	e9cd 7300 	strd	r7, r3, [sp]
 800ec82:	4629      	mov	r1, r5
 800ec84:	4633      	mov	r3, r6
 800ec86:	4620      	mov	r0, r4
 800ec88:	f7ff ff48 	bl	800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800ec8c:	b00b      	add	sp, #44	; 0x2c
 800ec8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec90:	2002edc6 	.word	0x2002edc6

0800ec94 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800ec94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec98:	461f      	mov	r7, r3
 800ec9a:	4b14      	ldr	r3, [pc, #80]	; (800ecec <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800ec9c:	b08a      	sub	sp, #40	; 0x28
 800ec9e:	4616      	mov	r6, r2
 800eca0:	f8b3 8000 	ldrh.w	r8, [r3]
 800eca4:	460d      	mov	r5, r1
 800eca6:	4604      	mov	r4, r0
 800eca8:	f7fb fef4 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800ecac:	6803      	ldr	r3, [r0, #0]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb0:	4798      	blx	r3
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800ecb8:	2301      	movs	r3, #1
 800ecba:	9305      	str	r3, [sp, #20]
 800ecbc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ecc6:	9303      	str	r3, [sp, #12]
 800ecc8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800eccc:	9302      	str	r3, [sp, #8]
 800ecce:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ecd2:	9008      	str	r0, [sp, #32]
 800ecd4:	e9cd 7300 	strd	r7, r3, [sp]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	4633      	mov	r3, r6
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4620      	mov	r0, r4
 800ece0:	f7ff ff1c 	bl	800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800ece4:	b00a      	add	sp, #40	; 0x28
 800ece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecea:	bf00      	nop
 800ecec:	2002edc6 	.word	0x2002edc6

0800ecf0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	b08b      	sub	sp, #44	; 0x2c
 800ecf6:	469b      	mov	fp, r3
 800ecf8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800ecfc:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800ed00:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800ed04:	2fff      	cmp	r7, #255	; 0xff
 800ed06:	bf14      	ite	ne
 800ed08:	2308      	movne	r3, #8
 800ed0a:	2302      	moveq	r3, #2
 800ed0c:	2600      	movs	r6, #0
 800ed0e:	4604      	mov	r4, r0
 800ed10:	4689      	mov	r9, r1
 800ed12:	4692      	mov	sl, r2
 800ed14:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800ed18:	9608      	str	r6, [sp, #32]
 800ed1a:	f7ff fe8d 	bl	800ea38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ed1e:	e9cd 8500 	strd	r8, r5, [sp]
 800ed22:	4603      	mov	r3, r0
 800ed24:	465a      	mov	r2, fp
 800ed26:	4651      	mov	r1, sl
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f7ff fee7 	bl	800eafc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800ed2e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800ed32:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ed36:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ed3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	9005      	str	r0, [sp, #20]
 800ed42:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800ed46:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800ed4a:	f8ad 601c 	strh.w	r6, [sp, #28]
 800ed4e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800ed52:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed56:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800ed5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5c:	9d02      	ldr	r5, [sp, #8]
 800ed5e:	4620      	mov	r0, r4
 800ed60:	4798      	blx	r3
 800ed62:	4228      	tst	r0, r5
 800ed64:	d106      	bne.n	800ed74 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800ed66:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800ed68:	4a07      	ldr	r2, [pc, #28]	; (800ed88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800ed6a:	4808      	ldr	r0, [pc, #32]	; (800ed8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800ed6c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800ed70:	f00e f9a0 	bl	801d0b4 <__assert_func>
 800ed74:	6860      	ldr	r0, [r4, #4]
 800ed76:	6803      	ldr	r3, [r0, #0]
 800ed78:	a902      	add	r1, sp, #8
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	4798      	blx	r3
 800ed7e:	b00b      	add	sp, #44	; 0x2c
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	0801f1b6 	.word	0x0801f1b6
 800ed88:	0801f4fb 	.word	0x0801f4fb
 800ed8c:	0801f102 	.word	0x0801f102

0800ed90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ed90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ed94:	461f      	mov	r7, r3
 800ed96:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ed98:	460d      	mov	r5, r1
 800ed9a:	f8b3 8000 	ldrh.w	r8, [r3]
 800ed9e:	4616      	mov	r6, r2
 800eda0:	4604      	mov	r4, r0
 800eda2:	f7fb fe77 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800eda6:	6803      	ldr	r3, [r0, #0]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edaa:	4798      	blx	r3
 800edac:	463b      	mov	r3, r7
 800edae:	e9cd 8000 	strd	r8, r0, [sp]
 800edb2:	4632      	mov	r2, r6
 800edb4:	4629      	mov	r1, r5
 800edb6:	4620      	mov	r0, r4
 800edb8:	f7ff fea0 	bl	800eafc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800edbc:	b002      	add	sp, #8
 800edbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc2:	bf00      	nop
 800edc4:	2002edc6 	.word	0x2002edc6

0800edc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800edc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edcc:	b088      	sub	sp, #32
 800edce:	4698      	mov	r8, r3
 800edd0:	2300      	movs	r3, #0
 800edd2:	9306      	str	r3, [sp, #24]
 800edd4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800edd8:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800eddc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ede0:	f8ad 6010 	strh.w	r6, [sp, #16]
 800ede4:	e9cd 3100 	strd	r3, r1, [sp]
 800ede8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800edec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800edf0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800edf4:	f88d 301c 	strb.w	r3, [sp, #28]
 800edf8:	4617      	mov	r7, r2
 800edfa:	4604      	mov	r4, r0
 800edfc:	f8ad 5012 	strh.w	r5, [sp, #18]
 800ee00:	f7ff fe1a 	bl	800ea38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ee04:	4642      	mov	r2, r8
 800ee06:	4603      	mov	r3, r0
 800ee08:	4639      	mov	r1, r7
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f7ff ffc0 	bl	800ed90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ee10:	4b16      	ldr	r3, [pc, #88]	; (800ee6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800ee12:	9003      	str	r0, [sp, #12]
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee1a:	f7fb fe3b 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800ee1e:	6803      	ldr	r3, [r0, #0]
 800ee20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee22:	4798      	blx	r3
 800ee24:	f88d 001e 	strb.w	r0, [sp, #30]
 800ee28:	f88d 001d 	strb.w	r0, [sp, #29]
 800ee2c:	b106      	cbz	r6, 800ee30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800ee2e:	b935      	cbnz	r5, 800ee3e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800ee30:	4b0f      	ldr	r3, [pc, #60]	; (800ee70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800ee32:	4a10      	ldr	r2, [pc, #64]	; (800ee74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800ee34:	f240 11cd 	movw	r1, #461	; 0x1cd
 800ee38:	480f      	ldr	r0, [pc, #60]	; (800ee78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800ee3a:	f00e f93b 	bl	801d0b4 <__assert_func>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	9d00      	ldr	r5, [sp, #0]
 800ee42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee44:	4620      	mov	r0, r4
 800ee46:	4798      	blx	r3
 800ee48:	4228      	tst	r0, r5
 800ee4a:	d104      	bne.n	800ee56 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800ee4c:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800ee4e:	4a09      	ldr	r2, [pc, #36]	; (800ee74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800ee50:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800ee54:	e7f0      	b.n	800ee38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800ee56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee58:	6860      	ldr	r0, [r4, #4]
 800ee5a:	9306      	str	r3, [sp, #24]
 800ee5c:	6803      	ldr	r3, [r0, #0]
 800ee5e:	4669      	mov	r1, sp
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	4798      	blx	r3
 800ee64:	b008      	add	sp, #32
 800ee66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6a:	bf00      	nop
 800ee6c:	2002edc6 	.word	0x2002edc6
 800ee70:	0801f17e 	.word	0x0801f17e
 800ee74:	0801f2e4 	.word	0x0801f2e4
 800ee78:	0801f102 	.word	0x0801f102
 800ee7c:	0801f1b6 	.word	0x0801f1b6

0800ee80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	b08a      	sub	sp, #40	; 0x28
 800ee84:	466b      	mov	r3, sp
 800ee86:	e883 0006 	stmia.w	r3, {r1, r2}
 800ee8a:	4b20      	ldr	r3, [pc, #128]	; (800ef0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	4604      	mov	r4, r0
 800ee90:	b933      	cbnz	r3, 800eea0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800ee92:	4b1f      	ldr	r3, [pc, #124]	; (800ef10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800ee94:	4a1f      	ldr	r2, [pc, #124]	; (800ef14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800ee96:	4820      	ldr	r0, [pc, #128]	; (800ef18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800ee98:	f240 11f9 	movw	r1, #505	; 0x1f9
 800ee9c:	f00e f90a 	bl	801d0b4 <__assert_func>
 800eea0:	2300      	movs	r3, #0
 800eea2:	9308      	str	r3, [sp, #32]
 800eea4:	2301      	movs	r3, #1
 800eea6:	9302      	str	r3, [sp, #8]
 800eea8:	6803      	ldr	r3, [r0, #0]
 800eeaa:	f8bd 5000 	ldrh.w	r5, [sp]
 800eeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb0:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800eeb4:	4798      	blx	r3
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	4629      	mov	r1, r5
 800eeba:	4603      	mov	r3, r0
 800eebc:	4620      	mov	r0, r4
 800eebe:	f7ff ff67 	bl	800ed90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eec4:	9305      	str	r3, [sp, #20]
 800eec6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eeca:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eece:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eed2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eed6:	4b11      	ldr	r3, [pc, #68]	; (800ef1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800eed8:	9003      	str	r0, [sp, #12]
 800eeda:	881b      	ldrh	r3, [r3, #0]
 800eedc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eee4:	f7fb fdd6 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800eee8:	6803      	ldr	r3, [r0, #0]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeec:	4798      	blx	r3
 800eeee:	23ff      	movs	r3, #255	; 0xff
 800eef0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800eef4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800eef8:	6860      	ldr	r0, [r4, #4]
 800eefa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eefe:	6803      	ldr	r3, [r0, #0]
 800ef00:	a902      	add	r1, sp, #8
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	4798      	blx	r3
 800ef06:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ef08:	b00a      	add	sp, #40	; 0x28
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	2002edcb 	.word	0x2002edcb
 800ef10:	0801f04f 	.word	0x0801f04f
 800ef14:	0801f388 	.word	0x0801f388
 800ef18:	0801f102 	.word	0x0801f102
 800ef1c:	2002edc6 	.word	0x2002edc6

0800ef20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800ef20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef22:	b08b      	sub	sp, #44	; 0x2c
 800ef24:	466d      	mov	r5, sp
 800ef26:	e885 0006 	stmia.w	r5, {r1, r2}
 800ef2a:	461d      	mov	r5, r3
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	9308      	str	r3, [sp, #32]
 800ef30:	2301      	movs	r3, #1
 800ef32:	9302      	str	r3, [sp, #8]
 800ef34:	6803      	ldr	r3, [r0, #0]
 800ef36:	f8bd 6000 	ldrh.w	r6, [sp]
 800ef3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef3c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ef40:	4604      	mov	r4, r0
 800ef42:	4798      	blx	r3
 800ef44:	463a      	mov	r2, r7
 800ef46:	4631      	mov	r1, r6
 800ef48:	4603      	mov	r3, r0
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f7ff ff20 	bl	800ed90 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ef50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ef54:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ef58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ef5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ef60:	4b0e      	ldr	r3, [pc, #56]	; (800ef9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800ef62:	9003      	str	r0, [sp, #12]
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ef6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef6c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ef70:	9505      	str	r5, [sp, #20]
 800ef72:	f7fb fd8f 	bl	800aa94 <_ZN8touchgfx3HAL3lcdEv>
 800ef76:	6803      	ldr	r3, [r0, #0]
 800ef78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7a:	4798      	blx	r3
 800ef7c:	23ff      	movs	r3, #255	; 0xff
 800ef7e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800ef82:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800ef86:	6860      	ldr	r0, [r4, #4]
 800ef88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ef8c:	6803      	ldr	r3, [r0, #0]
 800ef8e:	a902      	add	r1, sp, #8
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	4798      	blx	r3
 800ef94:	4628      	mov	r0, r5
 800ef96:	b00b      	add	sp, #44	; 0x2c
 800ef98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	2002edc6 	.word	0x2002edc6

0800efa0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800efa6:	4604      	mov	r4, r0
 800efa8:	b19b      	cbz	r3, 800efd2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800efaa:	2002      	movs	r0, #2
 800efac:	f7fd f9d6 	bl	800c35c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800efb0:	2300      	movs	r3, #0
 800efb2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800efb6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	4620      	mov	r0, r4
 800efbe:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800efc2:	f7ff fd39 	bl	800ea38 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800efc6:	462b      	mov	r3, r5
 800efc8:	4601      	mov	r1, r0
 800efca:	4620      	mov	r0, r4
 800efcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efd0:	4718      	bx	r3
 800efd2:	bd70      	pop	{r4, r5, r6, pc}

0800efd4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800efd4:	4770      	bx	lr

0800efd6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800efd6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800efda:	1a13      	subs	r3, r2, r0
 800efdc:	4258      	negs	r0, r3
 800efde:	4158      	adcs	r0, r3
 800efe0:	4770      	bx	lr

0800efe2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800efe2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800efe6:	1a9b      	subs	r3, r3, r2
 800efe8:	2b00      	cmp	r3, #0
 800efea:	bfdc      	itt	le
 800efec:	6882      	ldrle	r2, [r0, #8]
 800efee:	189b      	addle	r3, r3, r2
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	bfcc      	ite	gt
 800eff4:	2000      	movgt	r0, #0
 800eff6:	2001      	movle	r0, #1
 800eff8:	4770      	bx	lr

0800effa <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800effa:	6902      	ldr	r2, [r0, #16]
 800effc:	6840      	ldr	r0, [r0, #4]
 800effe:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800f002:	4770      	bx	lr

0800f004 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800f004:	6803      	ldr	r3, [r0, #0]
 800f006:	691b      	ldr	r3, [r3, #16]
 800f008:	4718      	bx	r3

0800f00a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800f00a:	4770      	bx	lr

0800f00c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800f00c:	4770      	bx	lr
	...

0800f010 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800f010:	b570      	push	{r4, r5, r6, lr}
 800f012:	2301      	movs	r3, #1
 800f014:	7203      	strb	r3, [r0, #8]
 800f016:	4604      	mov	r4, r0
 800f018:	6840      	ldr	r0, [r0, #4]
 800f01a:	6803      	ldr	r3, [r0, #0]
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	4798      	blx	r3
 800f020:	6803      	ldr	r3, [r0, #0]
 800f022:	2b08      	cmp	r3, #8
 800f024:	4605      	mov	r5, r0
 800f026:	d01e      	beq.n	800f066 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 800f028:	d80b      	bhi.n	800f042 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d027      	beq.n	800f07e <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800f02e:	2b04      	cmp	r3, #4
 800f030:	d011      	beq.n	800f056 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800f032:	2b01      	cmp	r3, #1
 800f034:	d028      	beq.n	800f088 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f036:	4b17      	ldr	r3, [pc, #92]	; (800f094 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800f038:	4a17      	ldr	r2, [pc, #92]	; (800f098 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800f03a:	4818      	ldr	r0, [pc, #96]	; (800f09c <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800f03c:	218b      	movs	r1, #139	; 0x8b
 800f03e:	f00e f839 	bl	801d0b4 <__assert_func>
 800f042:	2b40      	cmp	r3, #64	; 0x40
 800f044:	d020      	beq.n	800f088 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f046:	d801      	bhi.n	800f04c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800f048:	2b20      	cmp	r3, #32
 800f04a:	e7f3      	b.n	800f034 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800f04c:	2b80      	cmp	r3, #128	; 0x80
 800f04e:	d01b      	beq.n	800f088 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f054:	e7ee      	b.n	800f034 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	7f01      	ldrb	r1, [r0, #28]
 800f05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f05c:	4620      	mov	r0, r4
 800f05e:	4798      	blx	r3
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f064:	e006      	b.n	800f074 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	7f01      	ldrb	r1, [r0, #28]
 800f06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f06c:	4620      	mov	r0, r4
 800f06e:	4798      	blx	r3
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f074:	4629      	mov	r1, r5
 800f076:	4620      	mov	r0, r4
 800f078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f07c:	4718      	bx	r3
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	4620      	mov	r0, r4
 800f082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f084:	4798      	blx	r3
 800f086:	e7f3      	b.n	800f070 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	4620      	mov	r0, r4
 800f08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f08e:	4798      	blx	r3
 800f090:	e7e6      	b.n	800f060 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 800f092:	bf00      	nop
 800f094:	0801f5d9 	.word	0x0801f5d9
 800f098:	0801f6e8 	.word	0x0801f6e8
 800f09c:	0801f5fe 	.word	0x0801f5fe

0800f0a0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800f0a0:	b570      	push	{r4, r5, r6, lr}
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	460e      	mov	r6, r1
 800f0a6:	6860      	ldr	r0, [r4, #4]
 800f0a8:	6803      	ldr	r3, [r0, #0]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	4798      	blx	r3
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d1f9      	bne.n	800f0a6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800f0b2:	4d0b      	ldr	r5, [pc, #44]	; (800f0e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 800f0b4:	6828      	ldr	r0, [r5, #0]
 800f0b6:	6803      	ldr	r3, [r0, #0]
 800f0b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ba:	4798      	blx	r3
 800f0bc:	f7fd fc28 	bl	800c910 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800f0c0:	6860      	ldr	r0, [r4, #4]
 800f0c2:	6803      	ldr	r3, [r0, #0]
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	4798      	blx	r3
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d0:	4798      	blx	r3
 800f0d2:	6828      	ldr	r0, [r5, #0]
 800f0d4:	6803      	ldr	r3, [r0, #0]
 800f0d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0dc:	4718      	bx	r3
 800f0de:	bf00      	nop
 800f0e0:	2002edcc 	.word	0x2002edcc

0800f0e4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800f0e4:	b508      	push	{r3, lr}
 800f0e6:	f7fd fbf7 	bl	800c8d8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f0ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f0ee:	f7fd bc01 	b.w	800c8f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f0f2 <_ZN8touchgfx13DMA_Interface5startEv>:
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	6840      	ldr	r0, [r0, #4]
 800f0f8:	6803      	ldr	r3, [r0, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4798      	blx	r3
 800f0fe:	b948      	cbnz	r0, 800f114 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f100:	7a63      	ldrb	r3, [r4, #9]
 800f102:	b13b      	cbz	r3, 800f114 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f104:	7a23      	ldrb	r3, [r4, #8]
 800f106:	b92b      	cbnz	r3, 800f114 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	4620      	mov	r0, r4
 800f10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f112:	4718      	bx	r3
 800f114:	bd10      	pop	{r4, pc}
	...

0800f118 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800f11e:	1b12      	subs	r2, r2, r4
 800f120:	2a00      	cmp	r2, #0
 800f122:	bfdc      	itt	le
 800f124:	6883      	ldrle	r3, [r0, #8]
 800f126:	18d2      	addle	r2, r2, r3
 800f128:	2a01      	cmp	r2, #1
 800f12a:	dd18      	ble.n	800f15e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800f12c:	6843      	ldr	r3, [r0, #4]
 800f12e:	f101 021c 	add.w	r2, r1, #28
 800f132:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800f136:	f851 4b04 	ldr.w	r4, [r1], #4
 800f13a:	f843 4b04 	str.w	r4, [r3], #4
 800f13e:	4291      	cmp	r1, r2
 800f140:	d1f9      	bne.n	800f136 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800f142:	880a      	ldrh	r2, [r1, #0]
 800f144:	801a      	strh	r2, [r3, #0]
 800f146:	788a      	ldrb	r2, [r1, #2]
 800f148:	709a      	strb	r2, [r3, #2]
 800f14a:	68c3      	ldr	r3, [r0, #12]
 800f14c:	6882      	ldr	r2, [r0, #8]
 800f14e:	f3bf 8f5b 	dmb	ish
 800f152:	3301      	adds	r3, #1
 800f154:	429a      	cmp	r2, r3
 800f156:	bfd8      	it	le
 800f158:	1a9b      	suble	r3, r3, r2
 800f15a:	60c3      	str	r3, [r0, #12]
 800f15c:	bd10      	pop	{r4, pc}
 800f15e:	4b03      	ldr	r3, [pc, #12]	; (800f16c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800f160:	4a03      	ldr	r2, [pc, #12]	; (800f170 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800f162:	4804      	ldr	r0, [pc, #16]	; (800f174 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800f164:	2139      	movs	r1, #57	; 0x39
 800f166:	f00d ffa5 	bl	801d0b4 <__assert_func>
 800f16a:	bf00      	nop
 800f16c:	0801f624 	.word	0x0801f624
 800f170:	0801f718 	.word	0x0801f718
 800f174:	0801f5fe 	.word	0x0801f5fe

0800f178 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800f178:	b510      	push	{r4, lr}
 800f17a:	6803      	ldr	r3, [r0, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4604      	mov	r4, r0
 800f180:	4798      	blx	r3
 800f182:	b128      	cbz	r0, 800f190 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800f184:	4b07      	ldr	r3, [pc, #28]	; (800f1a4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800f186:	4a08      	ldr	r2, [pc, #32]	; (800f1a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800f188:	4808      	ldr	r0, [pc, #32]	; (800f1ac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800f18a:	213f      	movs	r1, #63	; 0x3f
 800f18c:	f00d ff92 	bl	801d0b4 <__assert_func>
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	68a2      	ldr	r2, [r4, #8]
 800f194:	f3bf 8f5b 	dmb	ish
 800f198:	3301      	adds	r3, #1
 800f19a:	429a      	cmp	r2, r3
 800f19c:	bfd8      	it	le
 800f19e:	1a9b      	suble	r3, r3, r2
 800f1a0:	6123      	str	r3, [r4, #16]
 800f1a2:	bd10      	pop	{r4, pc}
 800f1a4:	0801f647 	.word	0x0801f647
 800f1a8:	0801f766 	.word	0x0801f766
 800f1ac:	0801f5fe 	.word	0x0801f5fe

0800f1b0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	6840      	ldr	r0, [r0, #4]
 800f1b6:	6803      	ldr	r3, [r0, #0]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4798      	blx	r3
 800f1bc:	4605      	mov	r5, r0
 800f1be:	b930      	cbnz	r0, 800f1ce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f1c0:	7a23      	ldrb	r3, [r4, #8]
 800f1c2:	b123      	cbz	r3, 800f1ce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f1c4:	6860      	ldr	r0, [r4, #4]
 800f1c6:	6803      	ldr	r3, [r0, #0]
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	4798      	blx	r3
 800f1cc:	7225      	strb	r5, [r4, #8]
 800f1ce:	6860      	ldr	r0, [r4, #4]
 800f1d0:	6803      	ldr	r3, [r0, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4798      	blx	r3
 800f1d6:	b928      	cbnz	r0, 800f1e4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	4620      	mov	r0, r4
 800f1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1e2:	4718      	bx	r3
 800f1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1e8:	f7fd bb9e 	b.w	800c928 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800f1ec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800f1ec:	b510      	push	{r4, lr}
 800f1ee:	4c04      	ldr	r4, [pc, #16]	; (800f200 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800f1f0:	6082      	str	r2, [r0, #8]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	e9c0 4100 	strd	r4, r1, [r0]
 800f1f8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800f1fc:	bd10      	pop	{r4, pc}
 800f1fe:	bf00      	nop
 800f200:	0801f6cc 	.word	0x0801f6cc

0800f204 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800f204:	6840      	ldr	r0, [r0, #4]
 800f206:	6803      	ldr	r3, [r0, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4718      	bx	r3

0800f20c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800f20c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800f210:	4770      	bx	lr

0800f212 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800f212:	b570      	push	{r4, r5, r6, lr}
 800f214:	790b      	ldrb	r3, [r1, #4]
 800f216:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	bf0c      	ite	eq
 800f21e:	2301      	moveq	r3, #1
 800f220:	2300      	movne	r3, #0
 800f222:	4604      	mov	r4, r0
 800f224:	460e      	mov	r6, r1
 800f226:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800f22a:	d110      	bne.n	800f24e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800f22c:	b185      	cbz	r5, 800f250 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 800f22e:	7933      	ldrb	r3, [r6, #4]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d113      	bne.n	800f25c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f234:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f236:	b188      	cbz	r0, 800f25c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f238:	6803      	ldr	r3, [r0, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	4798      	blx	r3
 800f23e:	b168      	cbz	r0, 800f25c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f240:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f242:	6803      	ldr	r3, [r0, #0]
 800f244:	4621      	mov	r1, r4
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f24c:	4718      	bx	r3
 800f24e:	b12d      	cbz	r5, 800f25c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f250:	6823      	ldr	r3, [r4, #0]
 800f252:	4620      	mov	r0, r4
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	4798      	blx	r3
 800f258:	2d00      	cmp	r5, #0
 800f25a:	d1e8      	bne.n	800f22e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800f25c:	bd70      	pop	{r4, r5, r6, pc}

0800f25e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800f25e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f262:	b133      	cbz	r3, 800f272 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800f264:	790b      	ldrb	r3, [r1, #4]
 800f266:	2b01      	cmp	r3, #1
 800f268:	bf01      	itttt	eq
 800f26a:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800f26c:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800f26e:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800f270:	8603      	strheq	r3, [r0, #48]	; 0x30
 800f272:	f7ff bfce 	b.w	800f212 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
	...

0800f278 <_ZN8touchgfx12ToggleButtonC1Ev>:
 800f278:	2200      	movs	r2, #0
 800f27a:	2101      	movs	r1, #1
 800f27c:	8082      	strh	r2, [r0, #4]
 800f27e:	80c2      	strh	r2, [r0, #6]
 800f280:	8102      	strh	r2, [r0, #8]
 800f282:	8142      	strh	r2, [r0, #10]
 800f284:	8182      	strh	r2, [r0, #12]
 800f286:	81c2      	strh	r2, [r0, #14]
 800f288:	8202      	strh	r2, [r0, #16]
 800f28a:	8242      	strh	r2, [r0, #18]
 800f28c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f290:	61c2      	str	r2, [r0, #28]
 800f292:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800f296:	6282      	str	r2, [r0, #40]	; 0x28
 800f298:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800f29c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800f2a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2a4:	4903      	ldr	r1, [pc, #12]	; (800f2b4 <_ZN8touchgfx12ToggleButtonC1Ev+0x3c>)
 800f2a6:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800f2a8:	8602      	strh	r2, [r0, #48]	; 0x30
 800f2aa:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 800f2ae:	6001      	str	r1, [r0, #0]
 800f2b0:	8682      	strh	r2, [r0, #52]	; 0x34
 800f2b2:	4770      	bx	lr
 800f2b4:	0801f80c 	.word	0x0801f80c

0800f2b8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	880b      	ldrh	r3, [r1, #0]
 800f2bc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800f2be:	4605      	mov	r5, r0
 800f2c0:	8813      	ldrh	r3, [r2, #0]
 800f2c2:	f825 3f30 	strh.w	r3, [r5, #48]!
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f002 fa3b 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f2ce:	8120      	strh	r0, [r4, #8]
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f002 fa71 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f2d6:	8160      	strh	r0, [r4, #10]
 800f2d8:	bd38      	pop	{r3, r4, r5, pc}

0800f2da <_ZNK8touchgfx6Button12getSolidRectEv>:
 800f2da:	b510      	push	{r4, lr}
 800f2dc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800f2e0:	2bff      	cmp	r3, #255	; 0xff
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	d006      	beq.n	800f2f4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	8003      	strh	r3, [r0, #0]
 800f2ea:	8043      	strh	r3, [r0, #2]
 800f2ec:	8083      	strh	r3, [r0, #4]
 800f2ee:	80c3      	strh	r3, [r0, #6]
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	bd10      	pop	{r4, pc}
 800f2f4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800f2f8:	b11b      	cbz	r3, 800f302 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800f2fa:	3130      	adds	r1, #48	; 0x30
 800f2fc:	f002 fa96 	bl	801182c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f300:	e7f6      	b.n	800f2f0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800f302:	312e      	adds	r1, #46	; 0x2e
 800f304:	e7fa      	b.n	800f2fc <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800f308 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800f308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f30c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f310:	b08b      	sub	sp, #44	; 0x2c
 800f312:	4604      	mov	r4, r0
 800f314:	4689      	mov	r9, r1
 800f316:	2b00      	cmp	r3, #0
 800f318:	d043      	beq.n	800f3a2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 800f31a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800f31c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f320:	a805      	add	r0, sp, #20
 800f322:	f002 fa0f 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f326:	4607      	mov	r7, r0
 800f328:	fa0f f880 	sxth.w	r8, r0
 800f32c:	a805      	add	r0, sp, #20
 800f32e:	f002 fa43 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f332:	f9b9 6000 	ldrsh.w	r6, [r9]
 800f336:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800f33a:	4432      	add	r2, r6
 800f33c:	b292      	uxth	r2, r2
 800f33e:	2300      	movs	r3, #0
 800f340:	fa0f fe82 	sxth.w	lr, r2
 800f344:	459e      	cmp	lr, r3
 800f346:	fa0f fc80 	sxth.w	ip, r0
 800f34a:	9306      	str	r3, [sp, #24]
 800f34c:	dd2b      	ble.n	800f3a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f34e:	45b0      	cmp	r8, r6
 800f350:	dd29      	ble.n	800f3a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f352:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800f356:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800f35a:	442b      	add	r3, r5
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	b219      	sxth	r1, r3
 800f360:	2900      	cmp	r1, #0
 800f362:	dd20      	ble.n	800f3a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f364:	45ac      	cmp	ip, r5
 800f366:	dd1e      	ble.n	800f3a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f368:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800f36c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800f370:	45f0      	cmp	r8, lr
 800f372:	bfb8      	it	lt
 800f374:	463a      	movlt	r2, r7
 800f376:	458c      	cmp	ip, r1
 800f378:	bfb8      	it	lt
 800f37a:	4603      	movlt	r3, r0
 800f37c:	1b92      	subs	r2, r2, r6
 800f37e:	1b5b      	subs	r3, r3, r5
 800f380:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f384:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f388:	f8ad 6018 	strh.w	r6, [sp, #24]
 800f38c:	f8ad 501a 	strh.w	r5, [sp, #26]
 800f390:	4b1d      	ldr	r3, [pc, #116]	; (800f408 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	b953      	cbnz	r3, 800f3ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 800f396:	4b1d      	ldr	r3, [pc, #116]	; (800f40c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 800f398:	4a1d      	ldr	r2, [pc, #116]	; (800f410 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800f39a:	481e      	ldr	r0, [pc, #120]	; (800f414 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800f39c:	21b8      	movs	r1, #184	; 0xb8
 800f39e:	f00d fe89 	bl	801d0b4 <__assert_func>
 800f3a2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800f3a4:	e7ba      	b.n	800f31c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	9307      	str	r3, [sp, #28]
 800f3aa:	e7f1      	b.n	800f390 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 800f3ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d024      	beq.n	800f402 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800f3b8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f3bc:	b30b      	cbz	r3, 800f402 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800f3be:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800f3c2:	b1f3      	cbz	r3, 800f402 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	a908      	add	r1, sp, #32
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	4798      	blx	r3
 800f3d4:	4b10      	ldr	r3, [pc, #64]	; (800f418 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f3dc:	b10a      	cbz	r2, 800f3e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800f3de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f3e0:	b900      	cbnz	r0, 800f3e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 800f3e2:	6898      	ldr	r0, [r3, #8]
 800f3e4:	6801      	ldr	r1, [r0, #0]
 800f3e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800f3ea:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800f3ee:	2501      	movs	r5, #1
 800f3f0:	9502      	str	r5, [sp, #8]
 800f3f2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800f3f6:	9401      	str	r4, [sp, #4]
 800f3f8:	ac06      	add	r4, sp, #24
 800f3fa:	9400      	str	r4, [sp, #0]
 800f3fc:	68cc      	ldr	r4, [r1, #12]
 800f3fe:	a905      	add	r1, sp, #20
 800f400:	47a0      	blx	r4
 800f402:	b00b      	add	sp, #44	; 0x2c
 800f404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f408:	2002ee74 	.word	0x2002ee74
 800f40c:	0801f874 	.word	0x0801f874
 800f410:	0801f948 	.word	0x0801f948
 800f414:	0801f8b0 	.word	0x0801f8b0
 800f418:	2002edcc 	.word	0x2002edcc

0800f41c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800f41c:	b570      	push	{r4, r5, r6, lr}
 800f41e:	4605      	mov	r5, r0
 800f420:	880b      	ldrh	r3, [r1, #0]
 800f422:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f424:	f855 3b26 	ldr.w	r3, [r5], #38
 800f428:	4604      	mov	r4, r0
 800f42a:	4628      	mov	r0, r5
 800f42c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800f42e:	f002 f989 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f432:	b201      	sxth	r1, r0
 800f434:	4620      	mov	r0, r4
 800f436:	47b0      	blx	r6
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	4628      	mov	r0, r5
 800f43c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800f43e:	f002 f9bb 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f442:	b201      	sxth	r1, r0
 800f444:	4620      	mov	r0, r4
 800f446:	47b0      	blx	r6
 800f448:	4628      	mov	r0, r5
 800f44a:	f002 fa49 	bl	80118e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800f44e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800f452:	bd70      	pop	{r4, r5, r6, pc}

0800f454 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800f454:	b510      	push	{r4, lr}
 800f456:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800f45a:	2bff      	cmp	r3, #255	; 0xff
 800f45c:	4604      	mov	r4, r0
 800f45e:	d006      	beq.n	800f46e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800f460:	2300      	movs	r3, #0
 800f462:	8003      	strh	r3, [r0, #0]
 800f464:	8043      	strh	r3, [r0, #2]
 800f466:	8083      	strh	r3, [r0, #4]
 800f468:	80c3      	strh	r3, [r0, #6]
 800f46a:	4620      	mov	r0, r4
 800f46c:	bd10      	pop	{r4, pc}
 800f46e:	3126      	adds	r1, #38	; 0x26
 800f470:	f002 f9dc 	bl	801182c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f474:	e7f9      	b.n	800f46a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0800f478 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	4604      	mov	r4, r0
 800f47e:	b088      	sub	sp, #32
 800f480:	f854 3b26 	ldr.w	r3, [r4], #38
 800f484:	2500      	movs	r5, #0
 800f486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f488:	460f      	mov	r7, r1
 800f48a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f48e:	a904      	add	r1, sp, #16
 800f490:	4606      	mov	r6, r0
 800f492:	4798      	blx	r3
 800f494:	4620      	mov	r0, r4
 800f496:	f002 f955 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f49a:	4680      	mov	r8, r0
 800f49c:	4620      	mov	r0, r4
 800f49e:	f002 f98b 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f4a2:	9506      	str	r5, [sp, #24]
 800f4a4:	ad06      	add	r5, sp, #24
 800f4a6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	f8ad 801c 	strh.w	r8, [sp, #28]
 800f4b2:	f7fe fee5 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 800f4b6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f4ba:	b1c3      	cbz	r3, 800f4ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 800f4bc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800f4c0:	b1ab      	cbz	r3, 800f4ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 800f4c2:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f4ca:	b10a      	cbz	r2, 800f4d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 800f4cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f4ce:	b900      	cbnz	r0, 800f4d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 800f4d0:	6898      	ldr	r0, [r3, #8]
 800f4d2:	6801      	ldr	r1, [r0, #0]
 800f4d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800f4d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800f4dc:	2701      	movs	r7, #1
 800f4de:	9702      	str	r7, [sp, #8]
 800f4e0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800f4e4:	e9cd 5600 	strd	r5, r6, [sp]
 800f4e8:	68cd      	ldr	r5, [r1, #12]
 800f4ea:	4621      	mov	r1, r4
 800f4ec:	47a8      	blx	r5
 800f4ee:	b008      	add	sp, #32
 800f4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f4:	2002edcc 	.word	0x2002edcc

0800f4f8 <_ZN8touchgfx3LCD4initEv>:
 800f4f8:	4770      	bx	lr

0800f4fa <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800f4fa:	2000      	movs	r0, #0
 800f4fc:	4770      	bx	lr

0800f4fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800f4fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f502:	b091      	sub	sp, #68	; 0x44
 800f504:	4699      	mov	r9, r3
 800f506:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 800f50a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f50c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800f510:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800f514:	4680      	mov	r8, r0
 800f516:	4617      	mov	r7, r2
 800f518:	a80e      	add	r0, sp, #56	; 0x38
 800f51a:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 800f51e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800f522:	2500      	movs	r5, #0
 800f524:	910d      	str	r1, [sp, #52]	; 0x34
 800f526:	950e      	str	r5, [sp, #56]	; 0x38
 800f528:	f000 f9fa 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f52c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f52e:	f8d9 6000 	ldr.w	r6, [r9]
 800f532:	6818      	ldr	r0, [r3, #0]
 800f534:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f536:	f9b4 b000 	ldrsh.w	fp, [r4]
 800f53a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f53e:	eb02 0c06 	add.w	ip, r2, r6
 800f542:	1b80      	subs	r0, r0, r6
 800f544:	ebab 0e0c 	sub.w	lr, fp, ip
 800f548:	4570      	cmp	r0, lr
 800f54a:	f340 80bd 	ble.w	800f6c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800f54e:	88a1      	ldrh	r1, [r4, #4]
 800f550:	4459      	add	r1, fp
 800f552:	b209      	sxth	r1, r1
 800f554:	458c      	cmp	ip, r1
 800f556:	f300 80b7 	bgt.w	800f6c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800f55a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800f55e:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 800f562:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 800f566:	edd9 6a07 	vldr	s13, [r9, #28]
 800f56a:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 800f56e:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 800f572:	4283      	cmp	r3, r0
 800f574:	bfa8      	it	ge
 800f576:	4603      	movge	r3, r0
 800f578:	ee07 3a90 	vmov	s15, r3
 800f57c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800f580:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f584:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f588:	ee65 4a24 	vmul.f32	s9, s10, s9
 800f58c:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f590:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f594:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f598:	45e3      	cmp	fp, ip
 800f59a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800f59e:	ee32 1a05 	vadd.f32	s2, s4, s10
 800f5a2:	ee36 0a84 	vadd.f32	s0, s13, s8
 800f5a6:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f5aa:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f5ae:	f340 808e 	ble.w	800f6ce <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 800f5b2:	fb9e f5f3 	sdiv	r5, lr, r3
 800f5b6:	ee07 5a10 	vmov	s14, r5
 800f5ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5be:	2d00      	cmp	r5, #0
 800f5c0:	fb03 e415 	mls	r4, r3, r5, lr
 800f5c4:	eea7 0a04 	vfma.f32	s0, s14, s8
 800f5c8:	eee7 0a24 	vfma.f32	s1, s14, s9
 800f5cc:	eea7 1a05 	vfma.f32	s2, s14, s10
 800f5d0:	dd13      	ble.n	800f5fa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800f5d2:	ee70 6a44 	vsub.f32	s13, s0, s8
 800f5d6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800f5da:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e2:	bf18      	it	ne
 800f5e4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800f5e8:	ee31 2a45 	vsub.f32	s4, s2, s10
 800f5ec:	bf08      	it	eq
 800f5ee:	eeb0 7a67 	vmoveq.f32	s14, s15
 800f5f2:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f5f6:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f5fa:	fb05 f703 	mul.w	r7, r5, r3
 800f5fe:	1bc0      	subs	r0, r0, r7
 800f600:	443e      	add	r6, r7
 800f602:	1997      	adds	r7, r2, r6
 800f604:	4407      	add	r7, r0
 800f606:	42b9      	cmp	r1, r7
 800f608:	bfbc      	itt	lt
 800f60a:	1a88      	sublt	r0, r1, r2
 800f60c:	1b80      	sublt	r0, r0, r6
 800f60e:	2800      	cmp	r0, #0
 800f610:	dd5a      	ble.n	800f6c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800f612:	fb90 f1f3 	sdiv	r1, r0, r3
 800f616:	fb03 0211 	mls	r2, r3, r1, r0
 800f61a:	b90a      	cbnz	r2, 800f620 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 800f61c:	3901      	subs	r1, #1
 800f61e:	461a      	mov	r2, r3
 800f620:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800f624:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 800f628:	44a4      	add	ip, r4
 800f62a:	fb03 c505 	mla	r5, r3, r5, ip
 800f62e:	2900      	cmp	r1, #0
 800f630:	bfcc      	ite	gt
 800f632:	469e      	movgt	lr, r3
 800f634:	4696      	movle	lr, r2
 800f636:	eef0 6a42 	vmov.f32	s13, s4
 800f63a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f63e:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f642:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f646:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f64a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f64e:	eeb0 7a61 	vmov.f32	s14, s3
 800f652:	ee17 0a90 	vmov	r0, s15
 800f656:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f65a:	fb90 f6f3 	sdiv	r6, r0, r3
 800f65e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f662:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f666:	ee17 0a90 	vmov	r0, s15
 800f66a:	fb90 f7f3 	sdiv	r7, r0, r3
 800f66e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f672:	900c      	str	r0, [sp, #48]	; 0x30
 800f674:	f8d0 8000 	ldr.w	r8, [r0]
 800f678:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f67a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f67e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 800f682:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f686:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 800f68a:	f8cd a020 	str.w	sl, [sp, #32]
 800f68e:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 800f692:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f694:	f8d9 9014 	ldr.w	r9, [r9, #20]
 800f698:	9603      	str	r6, [sp, #12]
 800f69a:	e9cd 7004 	strd	r7, r0, [sp, #16]
 800f69e:	ee16 0a90 	vmov	r0, s13
 800f6a2:	fb07 0704 	mla	r7, r7, r4, r0
 800f6a6:	ee17 0a10 	vmov	r0, s14
 800f6aa:	fb06 0604 	mla	r6, r6, r4, r0
 800f6ae:	e9cd 3600 	strd	r3, r6, [sp]
 800f6b2:	44ca      	add	sl, r9
 800f6b4:	f8cd a01c 	str.w	sl, [sp, #28]
 800f6b8:	9506      	str	r5, [sp, #24]
 800f6ba:	9702      	str	r7, [sp, #8]
 800f6bc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f6c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f6c2:	ebae 0304 	sub.w	r3, lr, r4
 800f6c6:	47a8      	blx	r5
 800f6c8:	b011      	add	sp, #68	; 0x44
 800f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ce:	462c      	mov	r4, r5
 800f6d0:	e797      	b.n	800f602 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

0800f6d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800f6d2:	b510      	push	{r4, lr}
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f6da:	d00b      	beq.n	800f6f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d00e      	beq.n	800f6fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d001      	beq.n	800f6e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800f6e4:	1860      	adds	r0, r4, r1
 800f6e6:	bd10      	pop	{r4, pc}
 800f6e8:	8880      	ldrh	r0, [r0, #4]
 800f6ea:	4420      	add	r0, r4
 800f6ec:	b200      	sxth	r0, r0
 800f6ee:	1a80      	subs	r0, r0, r2
 800f6f0:	3801      	subs	r0, #1
 800f6f2:	e7f8      	b.n	800f6e6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800f6f4:	8880      	ldrh	r0, [r0, #4]
 800f6f6:	4420      	add	r0, r4
 800f6f8:	b200      	sxth	r0, r0
 800f6fa:	1a40      	subs	r0, r0, r1
 800f6fc:	e7f8      	b.n	800f6f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800f6fe:	18a0      	adds	r0, r4, r2
 800f700:	e7f1      	b.n	800f6e6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800f702 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800f702:	b510      	push	{r4, lr}
 800f704:	2b02      	cmp	r3, #2
 800f706:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800f70a:	d006      	beq.n	800f71a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800f70c:	2b03      	cmp	r3, #3
 800f70e:	d00a      	beq.n	800f726 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800f710:	2b01      	cmp	r3, #1
 800f712:	bf14      	ite	ne
 800f714:	18a0      	addne	r0, r4, r2
 800f716:	1860      	addeq	r0, r4, r1
 800f718:	bd10      	pop	{r4, pc}
 800f71a:	88c0      	ldrh	r0, [r0, #6]
 800f71c:	4420      	add	r0, r4
 800f71e:	b200      	sxth	r0, r0
 800f720:	1a80      	subs	r0, r0, r2
 800f722:	3801      	subs	r0, #1
 800f724:	e7f8      	b.n	800f718 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800f726:	88c0      	ldrh	r0, [r0, #6]
 800f728:	4420      	add	r0, r4
 800f72a:	b200      	sxth	r0, r0
 800f72c:	1a40      	subs	r0, r0, r1
 800f72e:	e7f8      	b.n	800f722 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0800f730 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800f730:	4b01      	ldr	r3, [pc, #4]	; (800f738 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800f732:	2200      	movs	r2, #0
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	4770      	bx	lr
 800f738:	2002edd4 	.word	0x2002edd4

0800f73c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 800f73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73e:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 800f742:	1e05      	subs	r5, r0, #0
 800f744:	bfba      	itte	lt
 800f746:	f04f 37ff 	movlt.w	r7, #4294967295
 800f74a:	426d      	neglt	r5, r5
 800f74c:	2701      	movge	r7, #1
 800f74e:	f1be 0f00 	cmp.w	lr, #0
 800f752:	bfb8      	it	lt
 800f754:	f1ce 0e00 	rsblt	lr, lr, #0
 800f758:	f04f 0601 	mov.w	r6, #1
 800f75c:	fa4e f001 	asr.w	r0, lr, r1
 800f760:	fa06 f101 	lsl.w	r1, r6, r1
 800f764:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f768:	f101 31ff 	add.w	r1, r1, #4294967295
 800f76c:	ea01 010e 	and.w	r1, r1, lr
 800f770:	bfb8      	it	lt
 800f772:	427f      	neglt	r7, r7
 800f774:	434d      	muls	r5, r1
 800f776:	2c00      	cmp	r4, #0
 800f778:	f8dc 1000 	ldr.w	r1, [ip]
 800f77c:	bfb8      	it	lt
 800f77e:	4264      	neglt	r4, r4
 800f780:	fb03 1300 	mla	r3, r3, r0, r1
 800f784:	fb95 f1f4 	sdiv	r1, r5, r4
 800f788:	fb04 5511 	mls	r5, r4, r1, r5
 800f78c:	441d      	add	r5, r3
 800f78e:	fb95 f3f4 	sdiv	r3, r5, r4
 800f792:	fb04 5413 	mls	r4, r4, r3, r5
 800f796:	4419      	add	r1, r3
 800f798:	bfb8      	it	lt
 800f79a:	427f      	neglt	r7, r7
 800f79c:	fb02 1000 	mla	r0, r2, r0, r1
 800f7a0:	f8cc 4000 	str.w	r4, [ip]
 800f7a4:	4378      	muls	r0, r7
 800f7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ac:	4c24      	ldr	r4, [pc, #144]	; (800f840 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 800f7ae:	6807      	ldr	r7, [r0, #0]
 800f7b0:	69a3      	ldr	r3, [r4, #24]
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	b92b      	cbnz	r3, 800f7c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 800f7b8:	6840      	ldr	r0, [r0, #4]
 800f7ba:	e9c5 7000 	strd	r7, r0, [r5]
 800f7be:	b006      	add	sp, #24
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	68a2      	ldr	r2, [r4, #8]
 800f7c6:	6820      	ldr	r0, [r4, #0]
 800f7c8:	ae06      	add	r6, sp, #24
 800f7ca:	f04f 0802 	mov.w	r8, #2
 800f7ce:	fb93 f1f8 	sdiv	r1, r3, r8
 800f7d2:	440a      	add	r2, r1
 800f7d4:	f846 2d04 	str.w	r2, [r6, #-4]!
 800f7d8:	69e1      	ldr	r1, [r4, #28]
 800f7da:	9700      	str	r7, [sp, #0]
 800f7dc:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800f7e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f7e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7e4:	f7ff ffaa 	bl	800f73c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800f7e8:	69a3      	ldr	r3, [r4, #24]
 800f7ea:	9301      	str	r3, [sp, #4]
 800f7ec:	686b      	ldr	r3, [r5, #4]
 800f7ee:	9300      	str	r3, [sp, #0]
 800f7f0:	4607      	mov	r7, r0
 800f7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f7f6:	6a21      	ldr	r1, [r4, #32]
 800f7f8:	9602      	str	r6, [sp, #8]
 800f7fa:	6860      	ldr	r0, [r4, #4]
 800f7fc:	f7ff ff9e 	bl	800f73c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800f800:	6963      	ldr	r3, [r4, #20]
 800f802:	69a2      	ldr	r2, [r4, #24]
 800f804:	fb92 f8f8 	sdiv	r8, r2, r8
 800f808:	4443      	add	r3, r8
 800f80a:	9305      	str	r3, [sp, #20]
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800f814:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f816:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f81a:	4407      	add	r7, r0
 800f81c:	68e0      	ldr	r0, [r4, #12]
 800f81e:	f7ff ff8d 	bl	800f73c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800f822:	69a3      	ldr	r3, [r4, #24]
 800f824:	9301      	str	r3, [sp, #4]
 800f826:	686b      	ldr	r3, [r5, #4]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	4680      	mov	r8, r0
 800f82c:	9602      	str	r6, [sp, #8]
 800f82e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f830:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f832:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f834:	6920      	ldr	r0, [r4, #16]
 800f836:	f7ff ff81 	bl	800f73c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800f83a:	4440      	add	r0, r8
 800f83c:	e7bd      	b.n	800f7ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 800f83e:	bf00      	nop
 800f840:	2002edd8 	.word	0x2002edd8

0800f844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800f844:	b510      	push	{r4, lr}
 800f846:	4b07      	ldr	r3, [pc, #28]	; (800f864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d108      	bne.n	800f860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800f84e:	4b06      	ldr	r3, [pc, #24]	; (800f868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800f850:	880c      	ldrh	r4, [r1, #0]
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f858:	3b01      	subs	r3, #1
 800f85a:	1b1b      	subs	r3, r3, r4
 800f85c:	8003      	strh	r3, [r0, #0]
 800f85e:	800a      	strh	r2, [r1, #0]
 800f860:	bd10      	pop	{r4, pc}
 800f862:	bf00      	nop
 800f864:	2002edc4 	.word	0x2002edc4
 800f868:	2002edc8 	.word	0x2002edc8

0800f86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800f86c:	b510      	push	{r4, lr}
 800f86e:	4b0a      	ldr	r3, [pc, #40]	; (800f898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d10e      	bne.n	800f894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800f876:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f87a:	8843      	ldrh	r3, [r0, #2]
 800f87c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f880:	8044      	strh	r4, [r0, #2]
 800f882:	18ca      	adds	r2, r1, r3
 800f884:	4b05      	ldr	r3, [pc, #20]	; (800f89c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800f886:	881b      	ldrh	r3, [r3, #0]
 800f888:	1a9b      	subs	r3, r3, r2
 800f88a:	8003      	strh	r3, [r0, #0]
 800f88c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f890:	80c3      	strh	r3, [r0, #6]
 800f892:	8081      	strh	r1, [r0, #4]
 800f894:	bd10      	pop	{r4, pc}
 800f896:	bf00      	nop
 800f898:	2002edc4 	.word	0x2002edc4
 800f89c:	2002edc0 	.word	0x2002edc0

0800f8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800f8a0:	b510      	push	{r4, lr}
 800f8a2:	4b07      	ldr	r3, [pc, #28]	; (800f8c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d108      	bne.n	800f8bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800f8aa:	f9b1 3000 	ldrsh.w	r3, [r1]
 800f8ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f8b2:	8003      	strh	r3, [r0, #0]
 800f8b4:	8893      	ldrh	r3, [r2, #4]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	1b1b      	subs	r3, r3, r4
 800f8ba:	800b      	strh	r3, [r1, #0]
 800f8bc:	bd10      	pop	{r4, pc}
 800f8be:	bf00      	nop
 800f8c0:	2002edc4 	.word	0x2002edc4

0800f8c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800f8c4:	b513      	push	{r0, r1, r4, lr}
 800f8c6:	4b08      	ldr	r3, [pc, #32]	; (800f8e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800f8c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f8cc:	4b07      	ldr	r3, [pc, #28]	; (800f8ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 800f8ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f8d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f8da:	2400      	movs	r4, #0
 800f8dc:	466a      	mov	r2, sp
 800f8de:	9400      	str	r4, [sp, #0]
 800f8e0:	f7ff ffde 	bl	800f8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800f8e4:	b002      	add	sp, #8
 800f8e6:	bd10      	pop	{r4, pc}
 800f8e8:	2002edc0 	.word	0x2002edc0
 800f8ec:	2002edc2 	.word	0x2002edc2

0800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800f8f0:	b510      	push	{r4, lr}
 800f8f2:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	460a      	mov	r2, r1
 800f8fa:	d10d      	bne.n	800f918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800f8fc:	8881      	ldrh	r1, [r0, #4]
 800f8fe:	8803      	ldrh	r3, [r0, #0]
 800f900:	440b      	add	r3, r1
 800f902:	4601      	mov	r1, r0
 800f904:	3b01      	subs	r3, #1
 800f906:	f821 3b02 	strh.w	r3, [r1], #2
 800f90a:	f7ff ffc9 	bl	800f8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800f90e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f912:	88c2      	ldrh	r2, [r0, #6]
 800f914:	8082      	strh	r2, [r0, #4]
 800f916:	80c3      	strh	r3, [r0, #6]
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	bf00      	nop
 800f91c:	2002edc4 	.word	0x2002edc4

0800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800f920:	b507      	push	{r0, r1, r2, lr}
 800f922:	4b09      	ldr	r3, [pc, #36]	; (800f948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800f924:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f928:	4b08      	ldr	r3, [pc, #32]	; (800f94c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 800f92a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f92e:	2100      	movs	r1, #0
 800f930:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f934:	9100      	str	r1, [sp, #0]
 800f936:	4669      	mov	r1, sp
 800f938:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f93c:	f7ff ffd8 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f940:	b003      	add	sp, #12
 800f942:	f85d fb04 	ldr.w	pc, [sp], #4
 800f946:	bf00      	nop
 800f948:	2002edc0 	.word	0x2002edc0
 800f94c:	2002edc2 	.word	0x2002edc2

0800f950 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800f950:	4b03      	ldr	r3, [pc, #12]	; (800f960 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800f952:	6818      	ldr	r0, [r3, #0]
 800f954:	b110      	cbz	r0, 800f95c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800f956:	6803      	ldr	r3, [r0, #0]
 800f958:	699b      	ldr	r3, [r3, #24]
 800f95a:	4718      	bx	r3
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	2002ee28 	.word	0x2002ee28

0800f964 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800f964:	4770      	bx	lr
	...

0800f968 <_ZN8touchgfx11Application4drawEv>:
 800f968:	b507      	push	{r0, r1, r2, lr}
 800f96a:	4b09      	ldr	r3, [pc, #36]	; (800f990 <_ZN8touchgfx11Application4drawEv+0x28>)
 800f96c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f970:	4b08      	ldr	r3, [pc, #32]	; (800f994 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800f972:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f97a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f97e:	6803      	ldr	r3, [r0, #0]
 800f980:	2100      	movs	r1, #0
 800f982:	9100      	str	r1, [sp, #0]
 800f984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f986:	4669      	mov	r1, sp
 800f988:	4798      	blx	r3
 800f98a:	b003      	add	sp, #12
 800f98c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f990:	2002edc0 	.word	0x2002edc0
 800f994:	2002edc2 	.word	0x2002edc2

0800f998 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800f998:	4b03      	ldr	r3, [pc, #12]	; (800f9a8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800f99a:	6818      	ldr	r0, [r3, #0]
 800f99c:	b110      	cbz	r0, 800f9a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800f99e:	6803      	ldr	r3, [r0, #0]
 800f9a0:	69db      	ldr	r3, [r3, #28]
 800f9a2:	4718      	bx	r3
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop
 800f9a8:	2002ee28 	.word	0x2002ee28

0800f9ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800f9ac:	4b03      	ldr	r3, [pc, #12]	; (800f9bc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800f9ae:	6818      	ldr	r0, [r3, #0]
 800f9b0:	b110      	cbz	r0, 800f9b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800f9b2:	6803      	ldr	r3, [r0, #0]
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	4718      	bx	r3
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	2002ee28 	.word	0x2002ee28

0800f9c0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800f9c0:	4b03      	ldr	r3, [pc, #12]	; (800f9d0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800f9c2:	6818      	ldr	r0, [r3, #0]
 800f9c4:	b110      	cbz	r0, 800f9cc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800f9c6:	6803      	ldr	r3, [r0, #0]
 800f9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ca:	4718      	bx	r3
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	2002ee28 	.word	0x2002ee28

0800f9d4 <_ZN8touchgfx11Application15handleTickEventEv>:
 800f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d8:	4d3a      	ldr	r5, [pc, #232]	; (800fac4 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800f9da:	4604      	mov	r4, r0
 800f9dc:	6828      	ldr	r0, [r5, #0]
 800f9de:	b140      	cbz	r0, 800f9f2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 800f9e0:	7a03      	ldrb	r3, [r0, #8]
 800f9e2:	b933      	cbnz	r3, 800f9f2 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 800f9e4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 800f9e8:	6803      	ldr	r3, [r0, #0]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f0:	4718      	bx	r3
 800f9f2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800f9f6:	b97b      	cbnz	r3, 800fa18 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800f9f8:	b170      	cbz	r0, 800fa18 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800f9fa:	7a03      	ldrb	r3, [r0, #8]
 800f9fc:	b163      	cbz	r3, 800fa18 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800f9fe:	4b32      	ldr	r3, [pc, #200]	; (800fac8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800fa00:	6818      	ldr	r0, [r3, #0]
 800fa02:	b110      	cbz	r0, 800fa0a <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 800fa04:	6803      	ldr	r3, [r0, #0]
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	4798      	blx	r3
 800fa0a:	6828      	ldr	r0, [r5, #0]
 800fa0c:	6803      	ldr	r3, [r0, #0]
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	4798      	blx	r3
 800fa12:	2301      	movs	r3, #1
 800fa14:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 800fa18:	2500      	movs	r5, #0
 800fa1a:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800fa1e:	42a8      	cmp	r0, r5
 800fa20:	dd0c      	ble.n	800fa3c <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 800fa22:	1963      	adds	r3, r4, r5
 800fa24:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800fa28:	b132      	cbz	r2, 800fa38 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 800fa2a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800fa2e:	4413      	add	r3, r2
 800fa30:	6858      	ldr	r0, [r3, #4]
 800fa32:	6803      	ldr	r3, [r0, #0]
 800fa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa36:	4798      	blx	r3
 800fa38:	3501      	adds	r5, #1
 800fa3a:	e7ee      	b.n	800fa1a <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 800fa3c:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 800fa40:	3801      	subs	r0, #1
 800fa42:	3678      	adds	r6, #120	; 0x78
 800fa44:	f04f 0c00 	mov.w	ip, #0
 800fa48:	1c43      	adds	r3, r0, #1
 800fa4a:	d033      	beq.n	800fab4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800fa4c:	1823      	adds	r3, r4, r0
 800fa4e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800fa52:	bb6a      	cbnz	r2, 800fab0 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 800fa54:	b281      	uxth	r1, r0
 800fa56:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fa5a:	1d25      	adds	r5, r4, #4
 800fa5c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fa60:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 800fa64:	4293      	cmp	r3, r2
 800fa66:	dc0a      	bgt.n	800fa7e <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 800fa68:	f101 0288 	add.w	r2, r1, #136	; 0x88
 800fa6c:	4422      	add	r2, r4
 800fa6e:	18b1      	adds	r1, r6, r2
 800fa70:	b289      	uxth	r1, r1
 800fa72:	428b      	cmp	r3, r1
 800fa74:	d919      	bls.n	800faaa <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 800fa76:	7851      	ldrb	r1, [r2, #1]
 800fa78:	f802 1b01 	strb.w	r1, [r2], #1
 800fa7c:	e7f7      	b.n	800fa6e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 800fa7e:	682f      	ldr	r7, [r5, #0]
 800fa80:	45b9      	cmp	r9, r7
 800fa82:	f105 0804 	add.w	r8, r5, #4
 800fa86:	d10d      	bne.n	800faa4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 800fa88:	4696      	mov	lr, r2
 800fa8a:	f1be 0f1e 	cmp.w	lr, #30
 800fa8e:	dc06      	bgt.n	800fa9e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 800fa90:	f10e 0e01 	add.w	lr, lr, #1
 800fa94:	686f      	ldr	r7, [r5, #4]
 800fa96:	f845 7b04 	str.w	r7, [r5], #4
 800fa9a:	4573      	cmp	r3, lr
 800fa9c:	dcf5      	bgt.n	800fa8a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 800faa4:	3201      	adds	r2, #1
 800faa6:	4645      	mov	r5, r8
 800faa8:	e7da      	b.n	800fa60 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 800faaa:	4423      	add	r3, r4
 800faac:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 800fab0:	3801      	subs	r0, #1
 800fab2:	e7c9      	b.n	800fa48 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 800fab4:	4b04      	ldr	r3, [pc, #16]	; (800fac8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800fab6:	6818      	ldr	r0, [r3, #0]
 800fab8:	b110      	cbz	r0, 800fac0 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 800faba:	6803      	ldr	r3, [r0, #0]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	e795      	b.n	800f9ec <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 800fac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac4:	2002ee2c 	.word	0x2002ee2c
 800fac8:	2002ee28 	.word	0x2002ee28

0800facc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	4606      	mov	r6, r0
 800fad0:	460c      	mov	r4, r1
 800fad2:	b929      	cbnz	r1, 800fae0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800fad4:	4b0c      	ldr	r3, [pc, #48]	; (800fb08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800fad6:	4a0d      	ldr	r2, [pc, #52]	; (800fb0c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800fad8:	480d      	ldr	r0, [pc, #52]	; (800fb10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800fada:	2164      	movs	r1, #100	; 0x64
 800fadc:	f00d faea 	bl	801d0b4 <__assert_func>
 800fae0:	4d0c      	ldr	r5, [pc, #48]	; (800fb14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800fae2:	2300      	movs	r3, #0
 800fae4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800fae8:	6828      	ldr	r0, [r5, #0]
 800faea:	b110      	cbz	r0, 800faf2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800faec:	6803      	ldr	r3, [r0, #0]
 800faee:	695b      	ldr	r3, [r3, #20]
 800faf0:	4798      	blx	r3
 800faf2:	602c      	str	r4, [r5, #0]
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	4620      	mov	r0, r4
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	4798      	blx	r3
 800fafc:	6833      	ldr	r3, [r6, #0]
 800fafe:	4630      	mov	r0, r6
 800fb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb06:	4718      	bx	r3
 800fb08:	0801fa38 	.word	0x0801fa38
 800fb0c:	0801fb00 	.word	0x0801fb00
 800fb10:	0801fa42 	.word	0x0801fa42
 800fb14:	2002ee28 	.word	0x2002ee28

0800fb18 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800fb1e:	888a      	ldrh	r2, [r1, #4]
 800fb20:	f9b0 3000 	ldrsh.w	r3, [r0]
 800fb24:	4422      	add	r2, r4
 800fb26:	b212      	sxth	r2, r2
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	da15      	bge.n	800fb58 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fb2c:	8882      	ldrh	r2, [r0, #4]
 800fb2e:	4413      	add	r3, r2
 800fb30:	b21b      	sxth	r3, r3
 800fb32:	429c      	cmp	r4, r3
 800fb34:	da10      	bge.n	800fb58 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fb36:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fb3a:	88c9      	ldrh	r1, [r1, #6]
 800fb3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fb40:	4419      	add	r1, r3
 800fb42:	b209      	sxth	r1, r1
 800fb44:	428a      	cmp	r2, r1
 800fb46:	da07      	bge.n	800fb58 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fb48:	88c0      	ldrh	r0, [r0, #6]
 800fb4a:	4410      	add	r0, r2
 800fb4c:	b200      	sxth	r0, r0
 800fb4e:	4283      	cmp	r3, r0
 800fb50:	bfac      	ite	ge
 800fb52:	2000      	movge	r0, #0
 800fb54:	2001      	movlt	r0, #1
 800fb56:	bd10      	pop	{r4, pc}
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e7fc      	b.n	800fb56 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800fb5c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800fb5c:	b570      	push	{r4, r5, r6, lr}
 800fb5e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800fb62:	f9b0 5000 	ldrsh.w	r5, [r0]
 800fb66:	42ac      	cmp	r4, r5
 800fb68:	db18      	blt.n	800fb9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800fb6a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800fb6e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	db12      	blt.n	800fb9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800fb76:	8886      	ldrh	r6, [r0, #4]
 800fb78:	4435      	add	r5, r6
 800fb7a:	888e      	ldrh	r6, [r1, #4]
 800fb7c:	4434      	add	r4, r6
 800fb7e:	b22d      	sxth	r5, r5
 800fb80:	b224      	sxth	r4, r4
 800fb82:	42a5      	cmp	r5, r4
 800fb84:	db0a      	blt.n	800fb9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800fb86:	88c0      	ldrh	r0, [r0, #6]
 800fb88:	4418      	add	r0, r3
 800fb8a:	88cb      	ldrh	r3, [r1, #6]
 800fb8c:	441a      	add	r2, r3
 800fb8e:	b200      	sxth	r0, r0
 800fb90:	b212      	sxth	r2, r2
 800fb92:	4290      	cmp	r0, r2
 800fb94:	bfb4      	ite	lt
 800fb96:	2000      	movlt	r0, #0
 800fb98:	2001      	movge	r0, #1
 800fb9a:	bd70      	pop	{r4, r5, r6, pc}
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	e7fc      	b.n	800fb9a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800fba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	4604      	mov	r4, r0
 800fba4:	4608      	mov	r0, r1
 800fba6:	460d      	mov	r5, r1
 800fba8:	f7fe fbae 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fbac:	b978      	cbnz	r0, 800fbce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f7fe fbaa 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fbb4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800fbb8:	b150      	cbz	r0, 800fbd0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800fbba:	8026      	strh	r6, [r4, #0]
 800fbbc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800fbc0:	8063      	strh	r3, [r4, #2]
 800fbc2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800fbc6:	80a3      	strh	r3, [r4, #4]
 800fbc8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800fbcc:	80e3      	strh	r3, [r4, #6]
 800fbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800fbd4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800fbd8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800fbdc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800fbe0:	88ed      	ldrh	r5, [r5, #6]
 800fbe2:	42b1      	cmp	r1, r6
 800fbe4:	460f      	mov	r7, r1
 800fbe6:	bfa8      	it	ge
 800fbe8:	4637      	movge	r7, r6
 800fbea:	4293      	cmp	r3, r2
 800fbec:	4618      	mov	r0, r3
 800fbee:	4466      	add	r6, ip
 800fbf0:	bfa8      	it	ge
 800fbf2:	4610      	movge	r0, r2
 800fbf4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800fbf8:	8027      	strh	r7, [r4, #0]
 800fbfa:	442a      	add	r2, r5
 800fbfc:	88e5      	ldrh	r5, [r4, #6]
 800fbfe:	8060      	strh	r0, [r4, #2]
 800fc00:	4461      	add	r1, ip
 800fc02:	442b      	add	r3, r5
 800fc04:	b236      	sxth	r6, r6
 800fc06:	b209      	sxth	r1, r1
 800fc08:	b212      	sxth	r2, r2
 800fc0a:	b21b      	sxth	r3, r3
 800fc0c:	428e      	cmp	r6, r1
 800fc0e:	bfac      	ite	ge
 800fc10:	ebc7 0106 	rsbge	r1, r7, r6
 800fc14:	ebc7 0101 	rsblt	r1, r7, r1
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	bfac      	ite	ge
 800fc1c:	ebc0 0202 	rsbge	r2, r0, r2
 800fc20:	ebc0 0203 	rsblt	r2, r0, r3
 800fc24:	80a1      	strh	r1, [r4, #4]
 800fc26:	80e2      	strh	r2, [r4, #6]
 800fc28:	e7d1      	b.n	800fbce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800fc2c <_ZN8touchgfx11Application11getInstanceEv>:
 800fc2c:	4b01      	ldr	r3, [pc, #4]	; (800fc34 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800fc2e:	6818      	ldr	r0, [r3, #0]
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	2002ee38 	.word	0x2002ee38

0800fc38 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800fc38:	2300      	movs	r3, #0
 800fc3a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800fc3e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800fc42:	30a8      	adds	r0, #168	; 0xa8
 800fc44:	f802 3b01 	strb.w	r3, [r2], #1
 800fc48:	4282      	cmp	r2, r0
 800fc4a:	d1fb      	bne.n	800fc44 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800fc4c:	4770      	bx	lr

0800fc4e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800fc4e:	4603      	mov	r3, r0
 800fc50:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800fc54:	2200      	movs	r2, #0
 800fc56:	801a      	strh	r2, [r3, #0]
 800fc58:	805a      	strh	r2, [r3, #2]
 800fc5a:	809a      	strh	r2, [r3, #4]
 800fc5c:	80da      	strh	r2, [r3, #6]
 800fc5e:	3308      	adds	r3, #8
 800fc60:	428b      	cmp	r3, r1
 800fc62:	d1f8      	bne.n	800fc56 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800fc64:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800fc68:	4770      	bx	lr
	...

0800fc6c <_ZN8touchgfx11ApplicationC1Ev>:
 800fc6c:	b570      	push	{r4, r5, r6, lr}
 800fc6e:	4b16      	ldr	r3, [pc, #88]	; (800fcc8 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 800fc70:	6003      	str	r3, [r0, #0]
 800fc72:	2500      	movs	r5, #0
 800fc74:	4604      	mov	r4, r0
 800fc76:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 800fc7a:	30a8      	adds	r0, #168	; 0xa8
 800fc7c:	f7ff ffe7 	bl	800fc4e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fc80:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800fc84:	f7ff ffe3 	bl	800fc4e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800fc88:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 800fc8c:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 800fc90:	490e      	ldr	r1, [pc, #56]	; (800fccc <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 800fc92:	480f      	ldr	r0, [pc, #60]	; (800fcd0 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 800fc94:	4e0f      	ldr	r6, [pc, #60]	; (800fcd4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800fc96:	f00d f8db 	bl	801ce50 <CRC_Lock>
 800fc9a:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800fc9c:	b158      	cbz	r0, 800fcb6 <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 800fc9e:	801d      	strh	r5, [r3, #0]
 800fca0:	4a0e      	ldr	r2, [pc, #56]	; (800fcdc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800fca2:	2300      	movs	r3, #0
 800fca4:	6013      	str	r3, [r2, #0]
 800fca6:	4a0e      	ldr	r2, [pc, #56]	; (800fce0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800fca8:	6033      	str	r3, [r6, #0]
 800fcaa:	4620      	mov	r0, r4
 800fcac:	6013      	str	r3, [r2, #0]
 800fcae:	f7ff ffc3 	bl	800fc38 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	bd70      	pop	{r4, r5, r6, pc}
 800fcb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fcba:	2002      	movs	r0, #2
 800fcbc:	801a      	strh	r2, [r3, #0]
 800fcbe:	6030      	str	r0, [r6, #0]
 800fcc0:	f000 ff1e 	bl	8010b00 <_ZN8touchgfx6Screen4drawEv>
 800fcc4:	e7ec      	b.n	800fca0 <_ZN8touchgfx11ApplicationC1Ev+0x34>
 800fcc6:	bf00      	nop
 800fcc8:	0801facc 	.word	0x0801facc
 800fccc:	b5e8b5cd 	.word	0xb5e8b5cd
 800fcd0:	f407a5c2 	.word	0xf407a5c2
 800fcd4:	2002ee28 	.word	0x2002ee28
 800fcd8:	2000008c 	.word	0x2000008c
 800fcdc:	2002ee38 	.word	0x2002ee38
 800fce0:	2002ee2c 	.word	0x2002ee2c

0800fce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800fce4:	2300      	movs	r3, #0
 800fce6:	8003      	strh	r3, [r0, #0]
 800fce8:	8043      	strh	r3, [r0, #2]
 800fcea:	8083      	strh	r3, [r0, #4]
 800fcec:	80c3      	strh	r3, [r0, #6]
 800fcee:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	b530      	push	{r4, r5, lr}
 800fcf6:	d912      	bls.n	800fd1e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 800fcf8:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	6825      	ldr	r5, [r4, #0]
 800fd00:	6005      	str	r5, [r0, #0]
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	6865      	ldr	r5, [r4, #4]
 800fd06:	6045      	str	r5, [r0, #4]
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 800fd0e:	d906      	bls.n	800fd1e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 800fd10:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800fd14:	681d      	ldr	r5, [r3, #0]
 800fd16:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 800fd1a:	685d      	ldr	r5, [r3, #4]
 800fd1c:	6065      	str	r5, [r4, #4]
 800fd1e:	bd30      	pop	{r4, r5, pc}

0800fd20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800fd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd22:	466b      	mov	r3, sp
 800fd24:	e883 0006 	stmia.w	r3, {r1, r2}
 800fd28:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800fd2c:	2a07      	cmp	r2, #7
 800fd2e:	4604      	mov	r4, r0
 800fd30:	d906      	bls.n	800fd40 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800fd32:	4b09      	ldr	r3, [pc, #36]	; (800fd58 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800fd34:	4a09      	ldr	r2, [pc, #36]	; (800fd5c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800fd36:	480a      	ldr	r0, [pc, #40]	; (800fd60 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800fd38:	f44f 7102 	mov.w	r1, #520	; 0x208
 800fd3c:	f00d f9ba 	bl	801d0b4 <__assert_func>
 800fd40:	1c51      	adds	r1, r2, #1
 800fd42:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800fd46:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800fd4a:	cb03      	ldmia	r3!, {r0, r1}
 800fd4c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800fd50:	6069      	str	r1, [r5, #4]
 800fd52:	b003      	add	sp, #12
 800fd54:	bd30      	pop	{r4, r5, pc}
 800fd56:	bf00      	nop
 800fd58:	0801fa6c 	.word	0x0801fa6c
 800fd5c:	0801fb44 	.word	0x0801fb44
 800fd60:	0801fa9b 	.word	0x0801fa9b

0800fd64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800fd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd68:	b089      	sub	sp, #36	; 0x24
 800fd6a:	466c      	mov	r4, sp
 800fd6c:	4606      	mov	r6, r0
 800fd6e:	4620      	mov	r0, r4
 800fd70:	e884 0006 	stmia.w	r4, {r1, r2}
 800fd74:	f7fe fac8 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd78:	bbb0      	cbnz	r0, 800fde8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 800fd7a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 800fd7e:	b1fd      	cbz	r5, 800fdc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 800fd80:	3d01      	subs	r5, #1
 800fd82:	af04      	add	r7, sp, #16
 800fd84:	f04f 090a 	mov.w	r9, #10
 800fd88:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 800fd8c:	ab02      	add	r3, sp, #8
 800fd8e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800fd92:	6851      	ldr	r1, [r2, #4]
 800fd94:	c303      	stmia	r3!, {r0, r1}
 800fd96:	4621      	mov	r1, r4
 800fd98:	a802      	add	r0, sp, #8
 800fd9a:	fa1f f885 	uxth.w	r8, r5
 800fd9e:	f7ff fedd 	bl	800fb5c <_ZNK8touchgfx4Rect8includesERKS0_>
 800fda2:	bb08      	cbnz	r0, 800fde8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 800fda4:	a902      	add	r1, sp, #8
 800fda6:	4620      	mov	r0, r4
 800fda8:	f7ff fed8 	bl	800fb5c <_ZNK8touchgfx4Rect8includesERKS0_>
 800fdac:	b1f8      	cbz	r0, 800fdee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 800fdae:	4642      	mov	r2, r8
 800fdb0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800fdb4:	a806      	add	r0, sp, #24
 800fdb6:	f7ff ff95 	bl	800fce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fdba:	f115 35ff 	adds.w	r5, r5, #4294967295
 800fdbe:	d2e3      	bcs.n	800fd88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 800fdc0:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 800fdc4:	2b08      	cmp	r3, #8
 800fdc6:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 800fdca:	d108      	bne.n	800fdde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800fdcc:	4629      	mov	r1, r5
 800fdce:	a806      	add	r0, sp, #24
 800fdd0:	2207      	movs	r2, #7
 800fdd2:	f7ff ff87 	bl	800fce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fdd6:	a906      	add	r1, sp, #24
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f7ff fee1 	bl	800fba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fdde:	e894 0006 	ldmia.w	r4, {r1, r2}
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7ff ff9c 	bl	800fd20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800fde8:	b009      	add	sp, #36	; 0x24
 800fdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdee:	4621      	mov	r1, r4
 800fdf0:	a802      	add	r0, sp, #8
 800fdf2:	f7ff fe91 	bl	800fb18 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800fdf6:	b150      	cbz	r0, 800fe0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 800fdf8:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800fdfc:	a806      	add	r0, sp, #24
 800fdfe:	4642      	mov	r2, r8
 800fe00:	f7ff ff70 	bl	800fce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fe04:	a902      	add	r1, sp, #8
 800fe06:	4620      	mov	r0, r4
 800fe08:	f7ff feca 	bl	800fba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fe0c:	e7d5      	b.n	800fdba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800fe0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fe12:	e887 0003 	stmia.w	r7, {r0, r1}
 800fe16:	a902      	add	r1, sp, #8
 800fe18:	4638      	mov	r0, r7
 800fe1a:	f7ff fec1 	bl	800fba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800fe1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fe22:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fe26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800fe2a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800fe2e:	fb13 f302 	smulbb	r3, r3, r2
 800fe32:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800fe36:	fb11 f102 	smulbb	r1, r1, r2
 800fe3a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800fe3e:	fb12 1100 	smlabb	r1, r2, r0, r1
 800fe42:	220b      	movs	r2, #11
 800fe44:	fb09 f303 	mul.w	r3, r9, r3
 800fe48:	434a      	muls	r2, r1
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	dab5      	bge.n	800fdba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800fe4e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800fe52:	a806      	add	r0, sp, #24
 800fe54:	4642      	mov	r2, r8
 800fe56:	f7ff ff45 	bl	800fce4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800fe5a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800fe5e:	e884 0003 	stmia.w	r4, {r0, r1}
 800fe62:	e7aa      	b.n	800fdba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0800fe64 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800fe64:	b530      	push	{r4, r5, lr}
 800fe66:	4b1d      	ldr	r3, [pc, #116]	; (800fedc <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800fe68:	b085      	sub	sp, #20
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe70:	4b1b      	ldr	r3, [pc, #108]	; (800fee0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800fe72:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fe76:	2100      	movs	r1, #0
 800fe78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe7c:	9100      	str	r1, [sp, #0]
 800fe7e:	4605      	mov	r5, r0
 800fe80:	6861      	ldr	r1, [r4, #4]
 800fe82:	6820      	ldr	r0, [r4, #0]
 800fe84:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fe88:	ab02      	add	r3, sp, #8
 800fe8a:	c303      	stmia	r3!, {r0, r1}
 800fe8c:	4669      	mov	r1, sp
 800fe8e:	a802      	add	r0, sp, #8
 800fe90:	f7fe f9f6 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 800fe94:	ab02      	add	r3, sp, #8
 800fe96:	cb03      	ldmia	r3!, {r0, r1}
 800fe98:	4b12      	ldr	r3, [pc, #72]	; (800fee4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800fe9a:	6020      	str	r0, [r4, #0]
 800fe9c:	6818      	ldr	r0, [r3, #0]
 800fe9e:	6061      	str	r1, [r4, #4]
 800fea0:	b138      	cbz	r0, 800feb2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800fea2:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 800fea6:	b133      	cbz	r3, 800feb6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800fea8:	6821      	ldr	r1, [r4, #0]
 800feaa:	6862      	ldr	r2, [r4, #4]
 800feac:	4628      	mov	r0, r5
 800feae:	f7ff ff59 	bl	800fd64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800feb2:	b005      	add	sp, #20
 800feb4:	bd30      	pop	{r4, r5, pc}
 800feb6:	6803      	ldr	r3, [r0, #0]
 800feb8:	4621      	mov	r1, r4
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	4798      	blx	r3
 800febe:	4b0a      	ldr	r3, [pc, #40]	; (800fee8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800fec0:	6818      	ldr	r0, [r3, #0]
 800fec2:	b118      	cbz	r0, 800fecc <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800fec4:	6803      	ldr	r3, [r0, #0]
 800fec6:	4621      	mov	r1, r4
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	4798      	blx	r3
 800fecc:	4b07      	ldr	r3, [pc, #28]	; (800feec <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800fece:	6818      	ldr	r0, [r3, #0]
 800fed0:	6803      	ldr	r3, [r0, #0]
 800fed2:	4621      	mov	r1, r4
 800fed4:	695b      	ldr	r3, [r3, #20]
 800fed6:	4798      	blx	r3
 800fed8:	e7eb      	b.n	800feb2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800feda:	bf00      	nop
 800fedc:	2002edc0 	.word	0x2002edc0
 800fee0:	2002edc2 	.word	0x2002edc2
 800fee4:	2002ee28 	.word	0x2002ee28
 800fee8:	2002ee24 	.word	0x2002ee24
 800feec:	2002edcc 	.word	0x2002edcc

0800fef0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef4:	4604      	mov	r4, r0
 800fef6:	b09b      	sub	sp, #108	; 0x6c
 800fef8:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 800fefc:	b129      	cbz	r1, 800ff0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800fefe:	2300      	movs	r3, #0
 800ff00:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800ff04:	b01b      	add	sp, #108	; 0x6c
 800ff06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0a:	4baf      	ldr	r3, [pc, #700]	; (80101c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	b33b      	cbz	r3, 800ff60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800ff10:	4dae      	ldr	r5, [pc, #696]	; (80101cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800ff12:	4628      	mov	r0, r5
 800ff14:	f7fe f9f8 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ff18:	4606      	mov	r6, r0
 800ff1a:	bb08      	cbnz	r0, 800ff60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	f7ff fca5 	bl	800f86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800ff22:	6829      	ldr	r1, [r5, #0]
 800ff24:	686a      	ldr	r2, [r5, #4]
 800ff26:	4620      	mov	r0, r4
 800ff28:	f7ff ff1c 	bl	800fd64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ff2c:	802e      	strh	r6, [r5, #0]
 800ff2e:	806e      	strh	r6, [r5, #2]
 800ff30:	80ae      	strh	r6, [r5, #4]
 800ff32:	80ee      	strh	r6, [r5, #6]
 800ff34:	4fa6      	ldr	r7, [pc, #664]	; (80101d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800ff36:	a809      	add	r0, sp, #36	; 0x24
 800ff38:	f7ff fe89 	bl	800fc4e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ff3c:	883d      	ldrh	r5, [r7, #0]
 800ff3e:	462e      	mov	r6, r5
 800ff40:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ff44:	42b3      	cmp	r3, r6
 800ff46:	d910      	bls.n	800ff6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 800ff48:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ff4c:	a809      	add	r0, sp, #36	; 0x24
 800ff4e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800ff52:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ff56:	3601      	adds	r6, #1
 800ff58:	f7ff fee2 	bl	800fd20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ff5c:	b2b6      	uxth	r6, r6
 800ff5e:	e7ef      	b.n	800ff40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 800ff60:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1e5      	bne.n	800ff34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 800ff68:	e7cc      	b.n	800ff04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800ff6a:	462e      	mov	r6, r5
 800ff6c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800ff70:	42b3      	cmp	r3, r6
 800ff72:	d90b      	bls.n	800ff8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800ff74:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800ff7e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800ff82:	3601      	adds	r6, #1
 800ff84:	f7ff feee 	bl	800fd64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ff88:	b2b6      	uxth	r6, r6
 800ff8a:	e7ef      	b.n	800ff6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 800ff8c:	4e91      	ldr	r6, [pc, #580]	; (80101d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800ff8e:	6833      	ldr	r3, [r6, #0]
 800ff90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	f040 8092 	bne.w	80100be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 800ff9a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800ff9e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800ffa2:	33aa      	adds	r3, #170	; 0xaa
 800ffa4:	f04f 0900 	mov.w	r9, #0
 800ffa8:	42a8      	cmp	r0, r5
 800ffaa:	f103 0308 	add.w	r3, r3, #8
 800ffae:	dd0a      	ble.n	800ffc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 800ffb0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800ffb4:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800ffb8:	440a      	add	r2, r1
 800ffba:	b212      	sxth	r2, r2
 800ffbc:	4591      	cmp	r9, r2
 800ffbe:	bfb8      	it	lt
 800ffc0:	4691      	movlt	r9, r2
 800ffc2:	3501      	adds	r5, #1
 800ffc4:	e7f0      	b.n	800ffa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 800ffc6:	4b84      	ldr	r3, [pc, #528]	; (80101d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800ffc8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80101e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 800ffcc:	881d      	ldrh	r5, [r3, #0]
 800ffce:	2300      	movs	r3, #0
 800ffd0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ffd4:	2d0f      	cmp	r5, #15
 800ffd6:	bf8c      	ite	hi
 800ffd8:	08ed      	lsrhi	r5, r5, #3
 800ffda:	2501      	movls	r5, #1
 800ffdc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ffe0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800ffe4:	6830      	ldr	r0, [r6, #0]
 800ffe6:	440b      	add	r3, r1
 800ffe8:	b21b      	sxth	r3, r3
 800ffea:	4599      	cmp	r9, r3
 800ffec:	6802      	ldr	r2, [r0, #0]
 800ffee:	dd49      	ble.n	8010084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 800fff0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800fff4:	4798      	blx	r3
 800fff6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800fffa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fffe:	4413      	add	r3, r2
 8010000:	b21b      	sxth	r3, r3
 8010002:	195a      	adds	r2, r3, r5
 8010004:	4290      	cmp	r0, r2
 8010006:	da07      	bge.n	8010018 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8010008:	4581      	cmp	r9, r0
 801000a:	dd05      	ble.n	8010018 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801000c:	4298      	cmp	r0, r3
 801000e:	da33      	bge.n	8010078 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8010010:	2b00      	cmp	r3, #0
 8010012:	dd31      	ble.n	8010078 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8010014:	4648      	mov	r0, r9
 8010016:	e004      	b.n	8010022 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8010018:	4298      	cmp	r0, r3
 801001a:	dbfb      	blt.n	8010014 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801001c:	4548      	cmp	r0, r9
 801001e:	bfa8      	it	ge
 8010020:	4648      	movge	r0, r9
 8010022:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010026:	f8b7 a000 	ldrh.w	sl, [r7]
 801002a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801002e:	2100      	movs	r1, #0
 8010030:	1ac0      	subs	r0, r0, r3
 8010032:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010036:	f8ad 2018 	strh.w	r2, [sp, #24]
 801003a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801003e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010042:	4553      	cmp	r3, sl
 8010044:	d9ca      	bls.n	800ffdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8010046:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801004a:	ab07      	add	r3, sp, #28
 801004c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8010050:	6851      	ldr	r1, [r2, #4]
 8010052:	c303      	stmia	r3!, {r0, r1}
 8010054:	a807      	add	r0, sp, #28
 8010056:	a905      	add	r1, sp, #20
 8010058:	f7fe f912 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 801005c:	a807      	add	r0, sp, #28
 801005e:	f7fe f953 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010062:	b920      	cbnz	r0, 801006e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8010064:	6823      	ldr	r3, [r4, #0]
 8010066:	a907      	add	r1, sp, #28
 8010068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801006a:	4620      	mov	r0, r4
 801006c:	4798      	blx	r3
 801006e:	f10a 0a01 	add.w	sl, sl, #1
 8010072:	fa1f fa8a 	uxth.w	sl, sl
 8010076:	e7e2      	b.n	801003e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8010078:	6830      	ldr	r0, [r6, #0]
 801007a:	6803      	ldr	r3, [r0, #0]
 801007c:	2101      	movs	r1, #1
 801007e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010080:	4798      	blx	r3
 8010082:	e7ab      	b.n	800ffdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8010084:	69d3      	ldr	r3, [r2, #28]
 8010086:	4798      	blx	r3
 8010088:	4b54      	ldr	r3, [pc, #336]	; (80101dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	f43f af39 	beq.w	800ff04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8010092:	2300      	movs	r3, #0
 8010094:	883d      	ldrh	r5, [r7, #0]
 8010096:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801009a:	34ea      	adds	r4, #234	; 0xea
 801009c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80100a0:	42ab      	cmp	r3, r5
 80100a2:	f67f af2f 	bls.w	800ff04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80100a6:	ab1a      	add	r3, sp, #104	; 0x68
 80100a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80100ac:	3b44      	subs	r3, #68	; 0x44
 80100ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80100b2:	4620      	mov	r0, r4
 80100b4:	3501      	adds	r5, #1
 80100b6:	f7ff fe33 	bl	800fd20 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80100ba:	b2ad      	uxth	r5, r5
 80100bc:	e7ee      	b.n	801009c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d16a      	bne.n	8010198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80100c2:	f8df a120 	ldr.w	sl, [pc, #288]	; 80101e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80100c6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80100ca:	42ab      	cmp	r3, r5
 80100cc:	d9dc      	bls.n	8010088 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80100ce:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80100d2:	ab03      	add	r3, sp, #12
 80100d4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80100d8:	6851      	ldr	r1, [r2, #4]
 80100da:	c303      	stmia	r3!, {r0, r1}
 80100dc:	f89a 3000 	ldrb.w	r3, [sl]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d102      	bne.n	80100ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80100e4:	a803      	add	r0, sp, #12
 80100e6:	f7ff fc1b 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80100ea:	a803      	add	r0, sp, #12
 80100ec:	f7fe f90c 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d14a      	bne.n	801018a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 80100f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80100f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80100fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010100:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010104:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010108:	f8ad 001a 	strh.w	r0, [sp, #26]
 801010c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010110:	f10d 0914 	add.w	r9, sp, #20
 8010114:	f10d 081c 	add.w	r8, sp, #28
 8010118:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801011c:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8010120:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8010124:	6830      	ldr	r0, [r6, #0]
 8010126:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801012a:	f8d0 e000 	ldr.w	lr, [r0]
 801012e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8010132:	44dc      	add	ip, fp
 8010134:	ebac 0c02 	sub.w	ip, ip, r2
 8010138:	fa1f fc8c 	uxth.w	ip, ip
 801013c:	f8cd c000 	str.w	ip, [sp]
 8010140:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8010144:	47d8      	blx	fp
 8010146:	f89a 3000 	ldrb.w	r3, [sl]
 801014a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801014e:	2b01      	cmp	r3, #1
 8010150:	d11e      	bne.n	8010190 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8010152:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010156:	e888 0003 	stmia.w	r8, {r0, r1}
 801015a:	4640      	mov	r0, r8
 801015c:	f7ff fb86 	bl	800f86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010164:	4641      	mov	r1, r8
 8010166:	4620      	mov	r0, r4
 8010168:	4798      	blx	r3
 801016a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801016e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010172:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010176:	4413      	add	r3, r2
 8010178:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801017c:	440a      	add	r2, r1
 801017e:	b21b      	sxth	r3, r3
 8010180:	b212      	sxth	r2, r2
 8010182:	4293      	cmp	r3, r2
 8010184:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010188:	dbc6      	blt.n	8010118 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801018a:	3501      	adds	r5, #1
 801018c:	b2ad      	uxth	r5, r5
 801018e:	e79a      	b.n	80100c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8010190:	6823      	ldr	r3, [r4, #0]
 8010192:	4649      	mov	r1, r9
 8010194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010196:	e7e6      	b.n	8010166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8010198:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801019c:	42ab      	cmp	r3, r5
 801019e:	f67f af73 	bls.w	8010088 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80101a2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80101a6:	ab07      	add	r3, sp, #28
 80101a8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80101ac:	6851      	ldr	r1, [r2, #4]
 80101ae:	c303      	stmia	r3!, {r0, r1}
 80101b0:	a807      	add	r0, sp, #28
 80101b2:	f7fe f8a9 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 80101b6:	b920      	cbnz	r0, 80101c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80101b8:	6823      	ldr	r3, [r4, #0]
 80101ba:	a907      	add	r1, sp, #28
 80101bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101be:	4620      	mov	r0, r4
 80101c0:	4798      	blx	r3
 80101c2:	3501      	adds	r5, #1
 80101c4:	b2ad      	uxth	r5, r5
 80101c6:	e7e7      	b.n	8010198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80101c8:	2002ee24 	.word	0x2002ee24
 80101cc:	2002ee30 	.word	0x2002ee30
 80101d0:	2000008c 	.word	0x2000008c
 80101d4:	2002edcc 	.word	0x2002edcc
 80101d8:	2002edc2 	.word	0x2002edc2
 80101dc:	2002edca 	.word	0x2002edca
 80101e0:	2002edc0 	.word	0x2002edc0
 80101e4:	2002edc4 	.word	0x2002edc4

080101e8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80101e8:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	801a      	strh	r2, [r3, #0]
 80101ee:	805a      	strh	r2, [r3, #2]
 80101f0:	809a      	strh	r2, [r3, #4]
 80101f2:	80da      	strh	r2, [r3, #6]
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	2002ee30 	.word	0x2002ee30

080101fc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 80101fc:	2000      	movs	r0, #0
 80101fe:	4770      	bx	lr

08010200 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8010200:	2000      	movs	r0, #0
 8010202:	4770      	bx	lr

08010204 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8010204:	b508      	push	{r3, lr}
 8010206:	6803      	ldr	r3, [r0, #0]
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	4798      	blx	r3
 801020c:	b128      	cbz	r0, 801021a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801020e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8010212:	7a80      	ldrb	r0, [r0, #10]
 8010214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010218:	4318      	orrs	r0, r3
 801021a:	bd08      	pop	{r3, pc}

0801021c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801021c:	b40e      	push	{r1, r2, r3}
 801021e:	b533      	push	{r0, r1, r4, r5, lr}
 8010220:	ab05      	add	r3, sp, #20
 8010222:	f853 2b04 	ldr.w	r2, [r3], #4
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	4b09      	ldr	r3, [pc, #36]	; (8010250 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 801022a:	685c      	ldr	r4, [r3, #4]
 801022c:	1061      	asrs	r1, r4, #1
 801022e:	07e4      	lsls	r4, r4, #31
 8010230:	eb00 0501 	add.w	r5, r0, r1
 8010234:	bf45      	ittet	mi
 8010236:	681b      	ldrmi	r3, [r3, #0]
 8010238:	5841      	ldrmi	r1, [r0, r1]
 801023a:	681c      	ldrpl	r4, [r3, #0]
 801023c:	58cc      	ldrmi	r4, [r1, r3]
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	2100      	movs	r1, #0
 8010242:	4628      	mov	r0, r5
 8010244:	47a0      	blx	r4
 8010246:	b002      	add	sp, #8
 8010248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801024c:	b003      	add	sp, #12
 801024e:	4770      	bx	lr
 8010250:	2000007c 	.word	0x2000007c

08010254 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8010254:	b40c      	push	{r2, r3}
 8010256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010258:	ab06      	add	r3, sp, #24
 801025a:	f853 2b04 	ldr.w	r2, [r3], #4
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	4b09      	ldr	r3, [pc, #36]	; (8010288 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8010262:	685d      	ldr	r5, [r3, #4]
 8010264:	106c      	asrs	r4, r5, #1
 8010266:	07ed      	lsls	r5, r5, #31
 8010268:	eb00 0604 	add.w	r6, r0, r4
 801026c:	bf45      	ittet	mi
 801026e:	681b      	ldrmi	r3, [r3, #0]
 8010270:	5900      	ldrmi	r0, [r0, r4]
 8010272:	681c      	ldrpl	r4, [r3, #0]
 8010274:	58c4      	ldrmi	r4, [r0, r3]
 8010276:	9b01      	ldr	r3, [sp, #4]
 8010278:	4630      	mov	r0, r6
 801027a:	47a0      	blx	r4
 801027c:	b002      	add	sp, #8
 801027e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010282:	b002      	add	sp, #8
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop
 8010288:	2000007c 	.word	0x2000007c

0801028c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801028c:	b40e      	push	{r1, r2, r3}
 801028e:	b530      	push	{r4, r5, lr}
 8010290:	b098      	sub	sp, #96	; 0x60
 8010292:	ab1b      	add	r3, sp, #108	; 0x6c
 8010294:	4604      	mov	r4, r0
 8010296:	f853 5b04 	ldr.w	r5, [r3], #4
 801029a:	9301      	str	r3, [sp, #4]
 801029c:	a802      	add	r0, sp, #8
 801029e:	f000 ffd5 	bl	801124c <_ZN8touchgfx12TextProviderC1Ev>
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	4620      	mov	r0, r4
 80102a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a8:	4798      	blx	r3
 80102aa:	9a01      	ldr	r2, [sp, #4]
 80102ac:	4603      	mov	r3, r0
 80102ae:	4629      	mov	r1, r5
 80102b0:	a802      	add	r0, sp, #8
 80102b2:	f000 ffe8 	bl	8011286 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80102b6:	a802      	add	r0, sp, #8
 80102b8:	f001 f81e 	bl	80112f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80102bc:	2401      	movs	r4, #1
 80102be:	b2a3      	uxth	r3, r4
 80102c0:	b140      	cbz	r0, 80102d4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 80102c2:	280a      	cmp	r0, #10
 80102c4:	bf08      	it	eq
 80102c6:	3301      	addeq	r3, #1
 80102c8:	a802      	add	r0, sp, #8
 80102ca:	bf08      	it	eq
 80102cc:	b21c      	sxtheq	r4, r3
 80102ce:	f001 f813 	bl	80112f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80102d2:	e7f4      	b.n	80102be <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80102d4:	4618      	mov	r0, r3
 80102d6:	b018      	add	sp, #96	; 0x60
 80102d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102dc:	b003      	add	sp, #12
 80102de:	4770      	bx	lr

080102e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80102e0:	b40e      	push	{r1, r2, r3}
 80102e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102e4:	b098      	sub	sp, #96	; 0x60
 80102e6:	ab1d      	add	r3, sp, #116	; 0x74
 80102e8:	4605      	mov	r5, r0
 80102ea:	f853 4b04 	ldr.w	r4, [r3], #4
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	a802      	add	r0, sp, #8
 80102f2:	f000 ffab 	bl	801124c <_ZN8touchgfx12TextProviderC1Ev>
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	4f21      	ldr	r7, [pc, #132]	; (8010380 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80102fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102fc:	4628      	mov	r0, r5
 80102fe:	4798      	blx	r3
 8010300:	ae18      	add	r6, sp, #96	; 0x60
 8010302:	4603      	mov	r3, r0
 8010304:	4621      	mov	r1, r4
 8010306:	9a00      	ldr	r2, [sp, #0]
 8010308:	a802      	add	r0, sp, #8
 801030a:	2400      	movs	r4, #0
 801030c:	f000 ffbb 	bl	8011286 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010310:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8010314:	462a      	mov	r2, r5
 8010316:	4633      	mov	r3, r6
 8010318:	4621      	mov	r1, r4
 801031a:	a802      	add	r0, sp, #8
 801031c:	f001 f918 	bl	8011550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010320:	b338      	cbz	r0, 8010372 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 8010322:	280a      	cmp	r0, #10
 8010324:	d01e      	beq.n	8010364 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8010326:	9901      	ldr	r1, [sp, #4]
 8010328:	b1e1      	cbz	r1, 8010364 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801032a:	7b4b      	ldrb	r3, [r1, #13]
 801032c:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010330:	79c9      	ldrb	r1, [r1, #7]
 8010332:	88aa      	ldrh	r2, [r5, #4]
 8010334:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010338:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801033c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010340:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8010344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010348:	bf14      	ite	ne
 801034a:	4638      	movne	r0, r7
 801034c:	2000      	moveq	r0, #0
 801034e:	ea41 010e 	orr.w	r1, r1, lr
 8010352:	ea43 030c 	orr.w	r3, r3, ip
 8010356:	440a      	add	r2, r1
 8010358:	4303      	orrs	r3, r0
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	b29b      	uxth	r3, r3
 801035e:	42a3      	cmp	r3, r4
 8010360:	bfc8      	it	gt
 8010362:	b21c      	sxthgt	r4, r3
 8010364:	4633      	mov	r3, r6
 8010366:	462a      	mov	r2, r5
 8010368:	2100      	movs	r1, #0
 801036a:	a802      	add	r0, sp, #8
 801036c:	f001 f8f0 	bl	8011550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010370:	e7d6      	b.n	8010320 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8010372:	b2a0      	uxth	r0, r4
 8010374:	b018      	add	sp, #96	; 0x60
 8010376:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801037a:	b003      	add	sp, #12
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	fffffe00 	.word	0xfffffe00

08010384 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8010384:	b40e      	push	{r1, r2, r3}
 8010386:	b570      	push	{r4, r5, r6, lr}
 8010388:	b099      	sub	sp, #100	; 0x64
 801038a:	ab1d      	add	r3, sp, #116	; 0x74
 801038c:	4604      	mov	r4, r0
 801038e:	f853 5b04 	ldr.w	r5, [r3], #4
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	a802      	add	r0, sp, #8
 8010396:	f000 ff59 	bl	801124c <_ZN8touchgfx12TextProviderC1Ev>
 801039a:	6823      	ldr	r3, [r4, #0]
 801039c:	4620      	mov	r0, r4
 801039e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103a0:	4798      	blx	r3
 80103a2:	4629      	mov	r1, r5
 80103a4:	4603      	mov	r3, r0
 80103a6:	9a00      	ldr	r2, [sp, #0]
 80103a8:	a802      	add	r0, sp, #8
 80103aa:	ad18      	add	r5, sp, #96	; 0x60
 80103ac:	f000 ff6b 	bl	8011286 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80103b0:	2100      	movs	r1, #0
 80103b2:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80103b6:	4622      	mov	r2, r4
 80103b8:	462b      	mov	r3, r5
 80103ba:	a802      	add	r0, sp, #8
 80103bc:	f001 f8c8 	bl	8011550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80103c0:	26ff      	movs	r6, #255	; 0xff
 80103c2:	b190      	cbz	r0, 80103ea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 80103c4:	280a      	cmp	r0, #10
 80103c6:	d009      	beq.n	80103dc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80103c8:	9a01      	ldr	r2, [sp, #4]
 80103ca:	b13a      	cbz	r2, 80103dc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80103cc:	7923      	ldrb	r3, [r4, #4]
 80103ce:	7a12      	ldrb	r2, [r2, #8]
 80103d0:	1a9b      	subs	r3, r3, r2
 80103d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80103d6:	429e      	cmp	r6, r3
 80103d8:	bf28      	it	cs
 80103da:	461e      	movcs	r6, r3
 80103dc:	462b      	mov	r3, r5
 80103de:	4622      	mov	r2, r4
 80103e0:	2100      	movs	r1, #0
 80103e2:	a802      	add	r0, sp, #8
 80103e4:	f001 f8b4 	bl	8011550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80103e8:	e7eb      	b.n	80103c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80103ea:	4630      	mov	r0, r6
 80103ec:	b019      	add	sp, #100	; 0x64
 80103ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103f2:	b003      	add	sp, #12
 80103f4:	4770      	bx	lr

080103f6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80103f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	4606      	mov	r6, r0
 80103fc:	b099      	sub	sp, #100	; 0x64
 80103fe:	a802      	add	r0, sp, #8
 8010400:	4614      	mov	r4, r2
 8010402:	4688      	mov	r8, r1
 8010404:	461d      	mov	r5, r3
 8010406:	f000 ff21 	bl	801124c <_ZN8touchgfx12TextProviderC1Ev>
 801040a:	6833      	ldr	r3, [r6, #0]
 801040c:	4630      	mov	r0, r6
 801040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010410:	4798      	blx	r3
 8010412:	462a      	mov	r2, r5
 8010414:	4603      	mov	r3, r0
 8010416:	4621      	mov	r1, r4
 8010418:	a802      	add	r0, sp, #8
 801041a:	f000 ff34 	bl	8011286 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801041e:	f04f 0b00 	mov.w	fp, #0
 8010422:	465f      	mov	r7, fp
 8010424:	46da      	mov	sl, fp
 8010426:	46d9      	mov	r9, fp
 8010428:	ab01      	add	r3, sp, #4
 801042a:	4632      	mov	r2, r6
 801042c:	4641      	mov	r1, r8
 801042e:	a802      	add	r0, sp, #8
 8010430:	f8cd 9004 	str.w	r9, [sp, #4]
 8010434:	f001 f88c 	bl	8011550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010438:	4605      	mov	r5, r0
 801043a:	b108      	cbz	r0, 8010440 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801043c:	280a      	cmp	r0, #10
 801043e:	d10b      	bne.n	8010458 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8010440:	4557      	cmp	r7, sl
 8010442:	bf38      	it	cc
 8010444:	4657      	movcc	r7, sl
 8010446:	f04f 0a00 	mov.w	sl, #0
 801044a:	b91d      	cbnz	r5, 8010454 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801044c:	4638      	mov	r0, r7
 801044e:	b019      	add	sp, #100	; 0x64
 8010450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010454:	46ab      	mov	fp, r5
 8010456:	e7e7      	b.n	8010428 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8010458:	9a01      	ldr	r2, [sp, #4]
 801045a:	2a00      	cmp	r2, #0
 801045c:	d0fa      	beq.n	8010454 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801045e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8010462:	6833      	ldr	r3, [r6, #0]
 8010464:	8895      	ldrh	r5, [r2, #4]
 8010466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010468:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801046c:	7a94      	ldrb	r4, [r2, #10]
 801046e:	4659      	mov	r1, fp
 8010470:	4304      	orrs	r4, r0
 8010472:	4630      	mov	r0, r6
 8010474:	4798      	blx	r3
 8010476:	4420      	add	r0, r4
 8010478:	4450      	add	r0, sl
 801047a:	fa1f fa80 	uxth.w	sl, r0
 801047e:	e7e4      	b.n	801044a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08010480 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8010480:	b513      	push	{r0, r1, r4, lr}
 8010482:	1d01      	adds	r1, r0, #4
 8010484:	4603      	mov	r3, r0
 8010486:	c903      	ldmia	r1, {r0, r1}
 8010488:	466a      	mov	r2, sp
 801048a:	e882 0003 	stmia.w	r2, {r0, r1}
 801048e:	2100      	movs	r1, #0
 8010490:	9100      	str	r1, [sp, #0]
 8010492:	6819      	ldr	r1, [r3, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	690c      	ldr	r4, [r1, #16]
 8010498:	4611      	mov	r1, r2
 801049a:	47a0      	blx	r4
 801049c:	b002      	add	sp, #8
 801049e:	bd10      	pop	{r4, pc}

080104a0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	680b      	ldr	r3, [r1, #0]
 80104a4:	460c      	mov	r4, r1
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	4605      	mov	r5, r0
 80104aa:	4798      	blx	r3
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	4620      	mov	r0, r4
 80104b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b2:	4629      	mov	r1, r5
 80104b4:	4798      	blx	r3
 80104b6:	4628      	mov	r0, r5
 80104b8:	bd38      	pop	{r3, r4, r5, pc}

080104ba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80104ba:	b410      	push	{r4}
 80104bc:	880a      	ldrh	r2, [r1, #0]
 80104be:	8884      	ldrh	r4, [r0, #4]
 80104c0:	4422      	add	r2, r4
 80104c2:	800a      	strh	r2, [r1, #0]
 80104c4:	88c4      	ldrh	r4, [r0, #6]
 80104c6:	884a      	ldrh	r2, [r1, #2]
 80104c8:	4422      	add	r2, r4
 80104ca:	804a      	strh	r2, [r1, #2]
 80104cc:	6940      	ldr	r0, [r0, #20]
 80104ce:	b120      	cbz	r0, 80104da <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80104d0:	6803      	ldr	r3, [r0, #0]
 80104d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d8:	4718      	bx	r3
 80104da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80104e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e2:	460b      	mov	r3, r1
 80104e4:	b085      	sub	sp, #20
 80104e6:	4604      	mov	r4, r0
 80104e8:	b901      	cbnz	r1, 80104ec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80104ea:	b1fa      	cbz	r2, 801052c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 80104ec:	1d27      	adds	r7, r4, #4
 80104ee:	e897 0003 	ldmia.w	r7, {r0, r1}
 80104f2:	466e      	mov	r6, sp
 80104f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80104f8:	88e1      	ldrh	r1, [r4, #6]
 80104fa:	440a      	add	r2, r1
 80104fc:	88a1      	ldrh	r1, [r4, #4]
 80104fe:	4419      	add	r1, r3
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	b209      	sxth	r1, r1
 8010504:	4620      	mov	r0, r4
 8010506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010508:	b212      	sxth	r2, r2
 801050a:	4798      	blx	r3
 801050c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010510:	ad02      	add	r5, sp, #8
 8010512:	e885 0003 	stmia.w	r5, {r0, r1}
 8010516:	6960      	ldr	r0, [r4, #20]
 8010518:	b150      	cbz	r0, 8010530 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801051a:	6803      	ldr	r3, [r0, #0]
 801051c:	4631      	mov	r1, r6
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	4798      	blx	r3
 8010522:	6960      	ldr	r0, [r4, #20]
 8010524:	6803      	ldr	r3, [r0, #0]
 8010526:	691b      	ldr	r3, [r3, #16]
 8010528:	4629      	mov	r1, r5
 801052a:	4798      	blx	r3
 801052c:	b005      	add	sp, #20
 801052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010530:	f7ff fb7c 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 8010534:	6803      	ldr	r3, [r0, #0]
 8010536:	4631      	mov	r1, r6
 8010538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801053a:	4798      	blx	r3
 801053c:	f7ff fb76 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 8010540:	6803      	ldr	r3, [r0, #0]
 8010542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010544:	e7f0      	b.n	8010528 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08010546 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8010546:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010548:	8882      	ldrh	r2, [r0, #4]
 801054a:	880b      	ldrh	r3, [r1, #0]
 801054c:	4413      	add	r3, r2
 801054e:	800b      	strh	r3, [r1, #0]
 8010550:	88c2      	ldrh	r2, [r0, #6]
 8010552:	884b      	ldrh	r3, [r1, #2]
 8010554:	4413      	add	r3, r2
 8010556:	4602      	mov	r2, r0
 8010558:	804b      	strh	r3, [r1, #2]
 801055a:	4605      	mov	r5, r0
 801055c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010560:	460c      	mov	r4, r1
 8010562:	6851      	ldr	r1, [r2, #4]
 8010564:	466b      	mov	r3, sp
 8010566:	c303      	stmia	r3!, {r0, r1}
 8010568:	4621      	mov	r1, r4
 801056a:	4668      	mov	r0, sp
 801056c:	f7fd fe88 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 8010570:	466b      	mov	r3, sp
 8010572:	cb03      	ldmia	r3!, {r0, r1}
 8010574:	6020      	str	r0, [r4, #0]
 8010576:	6061      	str	r1, [r4, #4]
 8010578:	6968      	ldr	r0, [r5, #20]
 801057a:	b128      	cbz	r0, 8010588 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801057c:	6803      	ldr	r3, [r0, #0]
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	4621      	mov	r1, r4
 8010582:	4798      	blx	r3
 8010584:	b003      	add	sp, #12
 8010586:	bd30      	pop	{r4, r5, pc}
 8010588:	f7ff fb50 	bl	800fc2c <_ZN8touchgfx11Application11getInstanceEv>
 801058c:	6803      	ldr	r3, [r0, #0]
 801058e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010590:	e7f6      	b.n	8010580 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08010592 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8010592:	b570      	push	{r4, r5, r6, lr}
 8010594:	8882      	ldrh	r2, [r0, #4]
 8010596:	880b      	ldrh	r3, [r1, #0]
 8010598:	4413      	add	r3, r2
 801059a:	800b      	strh	r3, [r1, #0]
 801059c:	88c2      	ldrh	r2, [r0, #6]
 801059e:	884b      	ldrh	r3, [r1, #2]
 80105a0:	460c      	mov	r4, r1
 80105a2:	4413      	add	r3, r2
 80105a4:	804b      	strh	r3, [r1, #2]
 80105a6:	4605      	mov	r5, r0
 80105a8:	1d01      	adds	r1, r0, #4
 80105aa:	4620      	mov	r0, r4
 80105ac:	f7fd fe68 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 80105b0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80105b4:	b153      	cbz	r3, 80105cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80105b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80105ba:	b13b      	cbz	r3, 80105cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80105bc:	6968      	ldr	r0, [r5, #20]
 80105be:	b128      	cbz	r0, 80105cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80105c0:	6803      	ldr	r3, [r0, #0]
 80105c2:	4621      	mov	r1, r4
 80105c4:	6a1b      	ldr	r3, [r3, #32]
 80105c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105ca:	4718      	bx	r3
 80105cc:	bd70      	pop	{r4, r5, r6, pc}

080105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80105ce:	b510      	push	{r4, lr}
 80105d0:	4604      	mov	r4, r0
 80105d2:	4608      	mov	r0, r1
 80105d4:	2300      	movs	r3, #0
 80105d6:	8023      	strh	r3, [r4, #0]
 80105d8:	8063      	strh	r3, [r4, #2]
 80105da:	6803      	ldr	r3, [r0, #0]
 80105dc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80105e0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80105e4:	80a1      	strh	r1, [r4, #4]
 80105e6:	80e2      	strh	r2, [r4, #6]
 80105e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ea:	4621      	mov	r1, r4
 80105ec:	4798      	blx	r3
 80105ee:	4620      	mov	r0, r4
 80105f0:	bd10      	pop	{r4, pc}
	...

080105f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80105f4:	b530      	push	{r4, r5, lr}
 80105f6:	8083      	strh	r3, [r0, #4]
 80105f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80105fc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8010600:	7183      	strb	r3, [r0, #6]
 8010602:	79c3      	ldrb	r3, [r0, #7]
 8010604:	6101      	str	r1, [r0, #16]
 8010606:	f365 0306 	bfi	r3, r5, #0, #7
 801060a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801060e:	8282      	strh	r2, [r0, #20]
 8010610:	f365 13c7 	bfi	r3, r5, #7, #1
 8010614:	71c3      	strb	r3, [r0, #7]
 8010616:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801061a:	7203      	strb	r3, [r0, #8]
 801061c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010620:	7243      	strb	r3, [r0, #9]
 8010622:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010626:	8143      	strh	r3, [r0, #10]
 8010628:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801062c:	8183      	strh	r3, [r0, #12]
 801062e:	4b01      	ldr	r3, [pc, #4]	; (8010634 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8010630:	6003      	str	r3, [r0, #0]
 8010632:	bd30      	pop	{r4, r5, pc}
 8010634:	0801fc6c 	.word	0x0801fc6c

08010638 <_ZNK8touchgfx9ConstFont4findEt>:
 8010638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801063a:	8a84      	ldrh	r4, [r0, #20]
 801063c:	2500      	movs	r5, #0
 801063e:	3c01      	subs	r4, #1
 8010640:	260e      	movs	r6, #14
 8010642:	42a5      	cmp	r5, r4
 8010644:	dc0c      	bgt.n	8010660 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8010646:	192a      	adds	r2, r5, r4
 8010648:	6903      	ldr	r3, [r0, #16]
 801064a:	1052      	asrs	r2, r2, #1
 801064c:	fb06 3302 	mla	r3, r6, r2, r3
 8010650:	889f      	ldrh	r7, [r3, #4]
 8010652:	428f      	cmp	r7, r1
 8010654:	d901      	bls.n	801065a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8010656:	1e54      	subs	r4, r2, #1
 8010658:	e7f3      	b.n	8010642 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801065a:	d202      	bcs.n	8010662 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801065c:	1c55      	adds	r5, r2, #1
 801065e:	e7f0      	b.n	8010642 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8010660:	2300      	movs	r3, #0
 8010662:	4618      	mov	r0, r3
 8010664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010666 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8010666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010668:	4605      	mov	r5, r0
 801066a:	4617      	mov	r7, r2
 801066c:	461e      	mov	r6, r3
 801066e:	f7ff ffe3 	bl	8010638 <_ZNK8touchgfx9ConstFont4findEt>
 8010672:	b9e0      	cbnz	r0, 80106ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8010674:	b911      	cbnz	r1, 801067c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8010676:	2400      	movs	r4, #0
 8010678:	4620      	mov	r0, r4
 801067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801067c:	290a      	cmp	r1, #10
 801067e:	d0fa      	beq.n	8010676 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	4628      	mov	r0, r5
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	4798      	blx	r3
 8010688:	4601      	mov	r1, r0
 801068a:	4628      	mov	r0, r5
 801068c:	f7ff ffd4 	bl	8010638 <_ZNK8touchgfx9ConstFont4findEt>
 8010690:	4604      	mov	r4, r0
 8010692:	2800      	cmp	r0, #0
 8010694:	d0ef      	beq.n	8010676 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010696:	682b      	ldr	r3, [r5, #0]
 8010698:	4621      	mov	r1, r4
 801069a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801069c:	4628      	mov	r0, r5
 801069e:	4798      	blx	r3
 80106a0:	6038      	str	r0, [r7, #0]
 80106a2:	682b      	ldr	r3, [r5, #0]
 80106a4:	4628      	mov	r0, r5
 80106a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106a8:	4798      	blx	r3
 80106aa:	7030      	strb	r0, [r6, #0]
 80106ac:	e7e4      	b.n	8010678 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80106ae:	4604      	mov	r4, r0
 80106b0:	e7f1      	b.n	8010696 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

080106b2 <_ZN8touchgfx10ClickEventD1Ev>:
 80106b2:	4770      	bx	lr

080106b4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80106b4:	2000      	movs	r0, #0
 80106b6:	4770      	bx	lr

080106b8 <_ZN8touchgfx9DragEventD1Ev>:
 80106b8:	4770      	bx	lr

080106ba <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80106ba:	2001      	movs	r0, #1
 80106bc:	4770      	bx	lr

080106be <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80106be:	2002      	movs	r0, #2
 80106c0:	4770      	bx	lr

080106c2 <_ZN8touchgfx12GestureEventD1Ev>:
 80106c2:	4770      	bx	lr

080106c4 <_ZN8touchgfx10ClickEventD0Ev>:
 80106c4:	b510      	push	{r4, lr}
 80106c6:	210c      	movs	r1, #12
 80106c8:	4604      	mov	r4, r0
 80106ca:	f00c fcc7 	bl	801d05c <_ZdlPvj>
 80106ce:	4620      	mov	r0, r4
 80106d0:	bd10      	pop	{r4, pc}

080106d2 <_ZN8touchgfx9DragEventD0Ev>:
 80106d2:	b510      	push	{r4, lr}
 80106d4:	2110      	movs	r1, #16
 80106d6:	4604      	mov	r4, r0
 80106d8:	f00c fcc0 	bl	801d05c <_ZdlPvj>
 80106dc:	4620      	mov	r0, r4
 80106de:	bd10      	pop	{r4, pc}

080106e0 <_ZN8touchgfx12GestureEventD0Ev>:
 80106e0:	b510      	push	{r4, lr}
 80106e2:	210c      	movs	r1, #12
 80106e4:	4604      	mov	r4, r0
 80106e6:	f00c fcb9 	bl	801d05c <_ZdlPvj>
 80106ea:	4620      	mov	r0, r4
 80106ec:	bd10      	pop	{r4, pc}
	...

080106f0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80106f0:	b530      	push	{r4, r5, lr}
 80106f2:	460d      	mov	r5, r1
 80106f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80106f6:	b087      	sub	sp, #28
 80106f8:	4604      	mov	r4, r0
 80106fa:	b301      	cbz	r1, 801073e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80106fc:	a801      	add	r0, sp, #4
 80106fe:	f7ff ff66 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010702:	892a      	ldrh	r2, [r5, #8]
 8010704:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010708:	7928      	ldrb	r0, [r5, #4]
 801070a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801070e:	f88d 0010 	strb.w	r0, [sp, #16]
 8010712:	1ad2      	subs	r2, r2, r3
 8010714:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010716:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010718:	f8ad 1012 	strh.w	r1, [sp, #18]
 801071c:	441a      	add	r2, r3
 801071e:	896b      	ldrh	r3, [r5, #10]
 8010720:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8010724:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010728:	1b5b      	subs	r3, r3, r5
 801072a:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801072c:	442b      	add	r3, r5
 801072e:	4d05      	ldr	r5, [pc, #20]	; (8010744 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8010730:	9503      	str	r5, [sp, #12]
 8010732:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010736:	6803      	ldr	r3, [r0, #0]
 8010738:	a903      	add	r1, sp, #12
 801073a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801073c:	4798      	blx	r3
 801073e:	b007      	add	sp, #28
 8010740:	bd30      	pop	{r4, r5, pc}
 8010742:	bf00      	nop
 8010744:	0801fce8 	.word	0x0801fce8

08010748 <_ZNK8touchgfx4Rect9intersectEss>:
 8010748:	b510      	push	{r4, lr}
 801074a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801074e:	428b      	cmp	r3, r1
 8010750:	dc10      	bgt.n	8010774 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8010752:	8884      	ldrh	r4, [r0, #4]
 8010754:	4423      	add	r3, r4
 8010756:	b21b      	sxth	r3, r3
 8010758:	4299      	cmp	r1, r3
 801075a:	da0b      	bge.n	8010774 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801075c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010760:	4293      	cmp	r3, r2
 8010762:	dc07      	bgt.n	8010774 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8010764:	88c0      	ldrh	r0, [r0, #6]
 8010766:	4418      	add	r0, r3
 8010768:	b200      	sxth	r0, r0
 801076a:	4282      	cmp	r2, r0
 801076c:	bfac      	ite	ge
 801076e:	2000      	movge	r0, #0
 8010770:	2001      	movlt	r0, #1
 8010772:	bd10      	pop	{r4, pc}
 8010774:	2000      	movs	r0, #0
 8010776:	e7fc      	b.n	8010772 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08010778 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8010778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801077a:	460c      	mov	r4, r1
 801077c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801077e:	b089      	sub	sp, #36	; 0x24
 8010780:	4605      	mov	r5, r0
 8010782:	2900      	cmp	r1, #0
 8010784:	d054      	beq.n	8010830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8010786:	4668      	mov	r0, sp
 8010788:	f7ff ff21 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801078c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801078e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8010790:	8922      	ldrh	r2, [r4, #8]
 8010792:	88e1      	ldrh	r1, [r4, #6]
 8010794:	443a      	add	r2, r7
 8010796:	4431      	add	r1, r6
 8010798:	b212      	sxth	r2, r2
 801079a:	b209      	sxth	r1, r1
 801079c:	4668      	mov	r0, sp
 801079e:	f7ff ffd3 	bl	8010748 <_ZNK8touchgfx4Rect9intersectEss>
 80107a2:	b1d0      	cbz	r0, 80107da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80107a4:	89a2      	ldrh	r2, [r4, #12]
 80107a6:	8961      	ldrh	r1, [r4, #10]
 80107a8:	443a      	add	r2, r7
 80107aa:	4431      	add	r1, r6
 80107ac:	b212      	sxth	r2, r2
 80107ae:	b209      	sxth	r1, r1
 80107b0:	4668      	mov	r0, sp
 80107b2:	f7ff ffc9 	bl	8010748 <_ZNK8touchgfx4Rect9intersectEss>
 80107b6:	4603      	mov	r3, r0
 80107b8:	b978      	cbnz	r0, 80107da <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80107ba:	4a1e      	ldr	r2, [pc, #120]	; (8010834 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80107bc:	9204      	str	r2, [sp, #16]
 80107be:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80107c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80107c4:	2202      	movs	r2, #2
 80107c6:	f88d 2014 	strb.w	r2, [sp, #20]
 80107ca:	f8ad 3018 	strh.w	r3, [sp, #24]
 80107ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 80107d2:	6803      	ldr	r3, [r0, #0]
 80107d4:	a904      	add	r1, sp, #16
 80107d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107d8:	4798      	blx	r3
 80107da:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80107dc:	a802      	add	r0, sp, #8
 80107de:	f7ff fef6 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80107e2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80107e6:	88e0      	ldrh	r0, [r4, #6]
 80107e8:	8961      	ldrh	r1, [r4, #10]
 80107ea:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80107ee:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80107f2:	8923      	ldrh	r3, [r4, #8]
 80107f4:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80107f6:	7927      	ldrb	r7, [r4, #4]
 80107f8:	f88d 7014 	strb.w	r7, [sp, #20]
 80107fc:	1a80      	subs	r0, r0, r2
 80107fe:	1a89      	subs	r1, r1, r2
 8010800:	89a2      	ldrh	r2, [r4, #12]
 8010802:	4c0d      	ldr	r4, [pc, #52]	; (8010838 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8010804:	9404      	str	r4, [sp, #16]
 8010806:	4460      	add	r0, ip
 8010808:	eba3 030e 	sub.w	r3, r3, lr
 801080c:	eba2 020e 	sub.w	r2, r2, lr
 8010810:	f8ad 0016 	strh.w	r0, [sp, #22]
 8010814:	4433      	add	r3, r6
 8010816:	4461      	add	r1, ip
 8010818:	4432      	add	r2, r6
 801081a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801081c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8010820:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010824:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010828:	6803      	ldr	r3, [r0, #0]
 801082a:	a904      	add	r1, sp, #16
 801082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801082e:	4798      	blx	r3
 8010830:	b009      	add	sp, #36	; 0x24
 8010832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010834:	0801fcc0 	.word	0x0801fcc0
 8010838:	0801fcd4 	.word	0x0801fcd4

0801083c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8010844:	790b      	ldrb	r3, [r1, #4]
 8010846:	b0a1      	sub	sp, #132	; 0x84
 8010848:	4604      	mov	r4, r0
 801084a:	460d      	mov	r5, r1
 801084c:	f1b9 0f00 	cmp.w	r9, #0
 8010850:	d00f      	beq.n	8010872 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8010852:	2b00      	cmp	r3, #0
 8010854:	f040 80a0 	bne.w	8010998 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8010858:	b021      	add	sp, #132	; 0x84
 801085a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8010862:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8010866:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801086a:	1d20      	adds	r0, r4, #4
 801086c:	f7fd fc56 	bl	800e11c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010870:	e092      	b.n	8010998 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1f0      	bne.n	8010858 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8010876:	4b5e      	ldr	r3, [pc, #376]	; (80109f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801087e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8010882:	f1ba 0f03 	cmp.w	sl, #3
 8010886:	ddea      	ble.n	801085e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8010888:	f1ba 0f0c 	cmp.w	sl, #12
 801088c:	f04f 0303 	mov.w	r3, #3
 8010890:	bfdc      	itt	le
 8010892:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8010896:	fb92 f3f3 	sdivle	r3, r2, r3
 801089a:	9301      	str	r3, [sp, #4]
 801089c:	4b55      	ldr	r3, [pc, #340]	; (80109f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801089e:	4956      	ldr	r1, [pc, #344]	; (80109f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 80108a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108a4:	4b55      	ldr	r3, [pc, #340]	; (80109fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 80108a6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80108aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80108b2:	ab0e      	add	r3, sp, #56	; 0x38
 80108b4:	2248      	movs	r2, #72	; 0x48
 80108b6:	2600      	movs	r6, #0
 80108b8:	4618      	mov	r0, r3
 80108ba:	960a      	str	r6, [sp, #40]	; 0x28
 80108bc:	f00c fc78 	bl	801d1b0 <memcpy>
 80108c0:	f04f 32ff 	mov.w	r2, #4294967295
 80108c4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80108c8:	f8cd a008 	str.w	sl, [sp, #8]
 80108cc:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80108d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	46b3      	mov	fp, r6
 80108d8:	9303      	str	r3, [sp, #12]
 80108da:	2300      	movs	r3, #0
 80108dc:	9309      	str	r3, [sp, #36]	; 0x24
 80108de:	9b07      	ldr	r3, [sp, #28]
 80108e0:	9a03      	ldr	r2, [sp, #12]
 80108e2:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80108e6:	88ef      	ldrh	r7, [r5, #6]
 80108e8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80108ec:	fb13 f302 	smulbb	r3, r3, r2
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	9304      	str	r3, [sp, #16]
 80108f4:	9b07      	ldr	r3, [sp, #28]
 80108f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80108fa:	a80a      	add	r0, sp, #40	; 0x28
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	fb13 f302 	smulbb	r3, r3, r2
 8010902:	b29b      	uxth	r3, r3
 8010904:	9305      	str	r3, [sp, #20]
 8010906:	9b04      	ldr	r3, [sp, #16]
 8010908:	441f      	add	r7, r3
 801090a:	9b05      	ldr	r3, [sp, #20]
 801090c:	4498      	add	r8, r3
 801090e:	b23f      	sxth	r7, r7
 8010910:	fa0f f888 	sxth.w	r8, r8
 8010914:	4642      	mov	r2, r8
 8010916:	4639      	mov	r1, r7
 8010918:	f7ff ff16 	bl	8010748 <_ZNK8touchgfx4Rect9intersectEss>
 801091c:	b380      	cbz	r0, 8010980 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801091e:	4639      	mov	r1, r7
 8010920:	ab09      	add	r3, sp, #36	; 0x24
 8010922:	4642      	mov	r2, r8
 8010924:	1d20      	adds	r0, r4, #4
 8010926:	f7fd fbf9 	bl	800e11c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801092a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801092c:	b341      	cbz	r1, 8010980 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801092e:	4549      	cmp	r1, r9
 8010930:	d026      	beq.n	8010980 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8010932:	a80c      	add	r0, sp, #48	; 0x30
 8010934:	f7ff fe4b 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010938:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801093c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010940:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8010944:	2002      	movs	r0, #2
 8010946:	fb92 f2f0 	sdiv	r2, r2, r0
 801094a:	440a      	add	r2, r1
 801094c:	1a99      	subs	r1, r3, r2
 801094e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8010952:	fb93 f3f0 	sdiv	r3, r3, r0
 8010956:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801095a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801095e:	4403      	add	r3, r0
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	435b      	muls	r3, r3
 8010964:	9a06      	ldr	r2, [sp, #24]
 8010966:	fb01 3301 	mla	r3, r1, r1, r3
 801096a:	4293      	cmp	r3, r2
 801096c:	d208      	bcs.n	8010980 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801096e:	9a04      	ldr	r2, [sp, #16]
 8010970:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010974:	86a2      	strh	r2, [r4, #52]	; 0x34
 8010976:	9a05      	ldr	r2, [sp, #20]
 8010978:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801097c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801097e:	9306      	str	r3, [sp, #24]
 8010980:	f10b 0b02 	add.w	fp, fp, #2
 8010984:	f1bb 0f08 	cmp.w	fp, #8
 8010988:	dda7      	ble.n	80108da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801098a:	9b02      	ldr	r3, [sp, #8]
 801098c:	4453      	add	r3, sl
 801098e:	9302      	str	r3, [sp, #8]
 8010990:	9b01      	ldr	r3, [sp, #4]
 8010992:	3601      	adds	r6, #1
 8010994:	42b3      	cmp	r3, r6
 8010996:	d199      	bne.n	80108cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8010998:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801099a:	2900      	cmp	r1, #0
 801099c:	f43f af5c 	beq.w	8010858 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80109a0:	a80c      	add	r0, sp, #48	; 0x30
 80109a2:	f7ff fe14 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80109a6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80109aa:	88ea      	ldrh	r2, [r5, #6]
 80109ac:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80109b0:	7929      	ldrb	r1, [r5, #4]
 80109b2:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80109b6:	1ad2      	subs	r2, r2, r3
 80109b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80109ba:	441a      	add	r2, r3
 80109bc:	892b      	ldrh	r3, [r5, #8]
 80109be:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80109c2:	1a1b      	subs	r3, r3, r0
 80109c4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80109c6:	4403      	add	r3, r0
 80109c8:	480d      	ldr	r0, [pc, #52]	; (8010a00 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 80109ca:	900e      	str	r0, [sp, #56]	; 0x38
 80109cc:	2600      	movs	r6, #0
 80109ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80109d0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80109d4:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80109d8:	6803      	ldr	r3, [r0, #0]
 80109da:	a90e      	add	r1, sp, #56	; 0x38
 80109dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109de:	4798      	blx	r3
 80109e0:	792b      	ldrb	r3, [r5, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f43f af38 	beq.w	8010858 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80109e8:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80109ec:	e734      	b.n	8010858 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80109ee:	bf00      	nop
 80109f0:	2002edcc 	.word	0x2002edcc
 80109f4:	2002edc0 	.word	0x2002edc0
 80109f8:	0801e418 	.word	0x0801e418
 80109fc:	2002edc2 	.word	0x2002edc2
 8010a00:	0801fcc0 	.word	0x0801fcc0

08010a04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8010a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a06:	4604      	mov	r4, r0
 8010a08:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8010a0c:	3201      	adds	r2, #1
 8010a0e:	d112      	bne.n	8010a36 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8010a10:	6803      	ldr	r3, [r0, #0]
 8010a12:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010a16:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010a1a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010a1e:	2500      	movs	r5, #0
 8010a20:	9500      	str	r5, [sp, #0]
 8010a22:	466d      	mov	r5, sp
 8010a24:	4629      	mov	r1, r5
 8010a26:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010a2a:	6a1b      	ldr	r3, [r3, #32]
 8010a2c:	4798      	blx	r3
 8010a2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a32:	e884 0003 	stmia.w	r4, {r0, r1}
 8010a36:	4620      	mov	r0, r4
 8010a38:	b003      	add	sp, #12
 8010a3a:	bd30      	pop	{r4, r5, pc}

08010a3c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8010a3c:	b513      	push	{r0, r1, r4, lr}
 8010a3e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8010a42:	3301      	adds	r3, #1
 8010a44:	4604      	mov	r4, r0
 8010a46:	d109      	bne.n	8010a5c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8010a48:	4601      	mov	r1, r0
 8010a4a:	4668      	mov	r0, sp
 8010a4c:	f7ff fdbf 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010a50:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a54:	8423      	strh	r3, [r4, #32]
 8010a56:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a5a:	8463      	strh	r3, [r4, #34]	; 0x22
 8010a5c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8010a60:	b002      	add	sp, #8
 8010a62:	bd10      	pop	{r4, pc}

08010a64 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8010a64:	b513      	push	{r0, r1, r4, lr}
 8010a66:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	d109      	bne.n	8010a84 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8010a70:	4601      	mov	r1, r0
 8010a72:	4668      	mov	r0, sp
 8010a74:	f7ff fdab 	bl	80105ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010a78:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a7c:	8423      	strh	r3, [r4, #32]
 8010a7e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010a82:	8463      	strh	r3, [r4, #34]	; 0x22
 8010a84:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8010a88:	b002      	add	sp, #8
 8010a8a:	bd10      	pop	{r4, pc}

08010a8c <_ZN8touchgfx6ScreenC1Ev>:
 8010a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8e:	4605      	mov	r5, r0
 8010a90:	4b17      	ldr	r3, [pc, #92]	; (8010af0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8010a92:	f845 3b04 	str.w	r3, [r5], #4
 8010a96:	2301      	movs	r3, #1
 8010a98:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8010a9c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010aa0:	4b14      	ldr	r3, [pc, #80]	; (8010af4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8010aa2:	4915      	ldr	r1, [pc, #84]	; (8010af8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8010aa4:	f9b3 7000 	ldrsh.w	r7, [r3]
 8010aa8:	4b14      	ldr	r3, [pc, #80]	; (8010afc <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8010aaa:	6041      	str	r1, [r0, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	8102      	strh	r2, [r0, #8]
 8010ab0:	8142      	strh	r2, [r0, #10]
 8010ab2:	8182      	strh	r2, [r0, #12]
 8010ab4:	81c2      	strh	r2, [r0, #14]
 8010ab6:	8202      	strh	r2, [r0, #16]
 8010ab8:	8242      	strh	r2, [r0, #18]
 8010aba:	8282      	strh	r2, [r0, #20]
 8010abc:	82c2      	strh	r2, [r0, #22]
 8010abe:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010ac2:	6202      	str	r2, [r0, #32]
 8010ac4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8010ac8:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8010acc:	6342      	str	r2, [r0, #52]	; 0x34
 8010ace:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f7fa fcd7 	bl	800b48a <_ZN8touchgfx8Drawable5setXYEss>
 8010adc:	4639      	mov	r1, r7
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f7fa fcf1 	bl	800b4c6 <_ZN8touchgfx8Drawable8setWidthEs>
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	f7fa fcfc 	bl	800b4e4 <_ZN8touchgfx8Drawable9setHeightEs>
 8010aec:	4620      	mov	r0, r4
 8010aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010af0:	0801fcfc 	.word	0x0801fcfc
 8010af4:	2002edc0 	.word	0x2002edc0
 8010af8:	0801ef90 	.word	0x0801ef90
 8010afc:	2002edc2 	.word	0x2002edc2

08010b00 <_ZN8touchgfx6Screen4drawEv>:
 8010b00:	b507      	push	{r0, r1, r2, lr}
 8010b02:	4b09      	ldr	r3, [pc, #36]	; (8010b28 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8010b04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010b08:	4b08      	ldr	r3, [pc, #32]	; (8010b2c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8010b0a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b12:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b16:	6803      	ldr	r3, [r0, #0]
 8010b18:	2100      	movs	r1, #0
 8010b1a:	9100      	str	r1, [sp, #0]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	4669      	mov	r1, sp
 8010b20:	4798      	blx	r3
 8010b22:	b003      	add	sp, #12
 8010b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b28:	2002edc0 	.word	0x2002edc0
 8010b2c:	2002edc2 	.word	0x2002edc2

08010b30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8010b38:	b089      	sub	sp, #36	; 0x24
 8010b3a:	4680      	mov	r8, r0
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	4615      	mov	r5, r2
 8010b40:	b16b      	cbz	r3, 8010b5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8010b42:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010b46:	b153      	cbz	r3, 8010b5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8010b48:	4628      	mov	r0, r5
 8010b4a:	f7ff ff5b 	bl	8010a04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010b4e:	4621      	mov	r1, r4
 8010b50:	f7fe ffe2 	bl	800fb18 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010b54:	69eb      	ldr	r3, [r5, #28]
 8010b56:	b928      	cbnz	r0, 8010b64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8010b58:	461d      	mov	r5, r3
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d1f4      	bne.n	8010b48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8010b5e:	b009      	add	sp, #36	; 0x24
 8010b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b64:	ae04      	add	r6, sp, #16
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d051      	beq.n	8010c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8010b6a:	682b      	ldr	r3, [r5, #0]
 8010b6c:	4629      	mov	r1, r5
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	a802      	add	r0, sp, #8
 8010b72:	4798      	blx	r3
 8010b74:	4628      	mov	r0, r5
 8010b76:	f7ff ff61 	bl	8010a3c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010b7a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8010b7e:	4407      	add	r7, r0
 8010b80:	4628      	mov	r0, r5
 8010b82:	f7ff ff6f 	bl	8010a64 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010b86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010b8a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010b8e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010b92:	4418      	add	r0, r3
 8010b94:	4621      	mov	r1, r4
 8010b96:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010b9a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010b9e:	b23f      	sxth	r7, r7
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010ba6:	f8ad 7010 	strh.w	r7, [sp, #16]
 8010baa:	f7fd fb69 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f7ff ff28 	bl	8010a04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010bba:	ab06      	add	r3, sp, #24
 8010bbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fd fb5c 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 8010bc8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010bcc:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010bd0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8010bd4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8010bd8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8010bdc:	4299      	cmp	r1, r3
 8010bde:	d10b      	bne.n	8010bf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8010be0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010be4:	4552      	cmp	r2, sl
 8010be6:	d107      	bne.n	8010bf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8010be8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010bec:	455a      	cmp	r2, fp
 8010bee:	d103      	bne.n	8010bf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8010bf0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010bf4:	454a      	cmp	r2, r9
 8010bf6:	d00a      	beq.n	8010c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8010bf8:	f1bb 0f00 	cmp.w	fp, #0
 8010bfc:	d002      	beq.n	8010c04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8010bfe:	f1b9 0f00 	cmp.w	r9, #0
 8010c02:	d12e      	bne.n	8010c62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8010c04:	69ea      	ldr	r2, [r5, #28]
 8010c06:	4621      	mov	r1, r4
 8010c08:	4640      	mov	r0, r8
 8010c0a:	f7ff ff91 	bl	8010b30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010c0e:	4628      	mov	r0, r5
 8010c10:	f7ff fef8 	bl	8010a04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8010c14:	6861      	ldr	r1, [r4, #4]
 8010c16:	4602      	mov	r2, r0
 8010c18:	6820      	ldr	r0, [r4, #0]
 8010c1a:	4633      	mov	r3, r6
 8010c1c:	c303      	stmia	r3!, {r0, r1}
 8010c1e:	4611      	mov	r1, r2
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7fd fb2d 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 8010c26:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d097      	beq.n	8010b5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8010c2e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d093      	beq.n	8010b5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8010c36:	4628      	mov	r0, r5
 8010c38:	f7ff ff00 	bl	8010a3c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8010c3c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010c40:	1a18      	subs	r0, r3, r0
 8010c42:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010c46:	4628      	mov	r0, r5
 8010c48:	f7ff ff0c 	bl	8010a64 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8010c4c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010c50:	1a18      	subs	r0, r3, r0
 8010c52:	f8ad 0012 	strh.w	r0, [sp, #18]
 8010c56:	682b      	ldr	r3, [r5, #0]
 8010c58:	4631      	mov	r1, r6
 8010c5a:	689b      	ldr	r3, [r3, #8]
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	4798      	blx	r3
 8010c60:	e77d      	b.n	8010b5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8010c62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8010c66:	fa1f f08a 	uxth.w	r0, sl
 8010c6a:	4552      	cmp	r2, sl
 8010c6c:	9000      	str	r0, [sp, #0]
 8010c6e:	da12      	bge.n	8010c96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8010c70:	9301      	str	r3, [sp, #4]
 8010c72:	9b00      	ldr	r3, [sp, #0]
 8010c74:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010c78:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010c7c:	1a9a      	subs	r2, r3, r2
 8010c7e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8010c82:	f8ad 0014 	strh.w	r0, [sp, #20]
 8010c86:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010c8a:	69ea      	ldr	r2, [r5, #28]
 8010c8c:	4631      	mov	r1, r6
 8010c8e:	4640      	mov	r0, r8
 8010c90:	f7ff ff4e 	bl	8010b30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010c94:	9b01      	ldr	r3, [sp, #4]
 8010c96:	f9b4 2000 	ldrsh.w	r2, [r4]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	b29f      	uxth	r7, r3
 8010c9e:	da0d      	bge.n	8010cbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8010ca0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010ca4:	1aba      	subs	r2, r7, r2
 8010ca6:	f8ad a012 	strh.w	sl, [sp, #18]
 8010caa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010cae:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010cb2:	69ea      	ldr	r2, [r5, #28]
 8010cb4:	4631      	mov	r1, r6
 8010cb6:	4640      	mov	r0, r8
 8010cb8:	f7ff ff3a 	bl	8010b30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010cbc:	8822      	ldrh	r2, [r4, #0]
 8010cbe:	88a3      	ldrh	r3, [r4, #4]
 8010cc0:	445f      	add	r7, fp
 8010cc2:	4413      	add	r3, r2
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	b2bf      	uxth	r7, r7
 8010cc8:	b23a      	sxth	r2, r7
 8010cca:	b219      	sxth	r1, r3
 8010ccc:	4291      	cmp	r1, r2
 8010cce:	dd0d      	ble.n	8010cec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8010cd0:	1bdb      	subs	r3, r3, r7
 8010cd2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010cd6:	f8ad a012 	strh.w	sl, [sp, #18]
 8010cda:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010cde:	f8ad 9016 	strh.w	r9, [sp, #22]
 8010ce2:	69ea      	ldr	r2, [r5, #28]
 8010ce4:	4631      	mov	r1, r6
 8010ce6:	4640      	mov	r0, r8
 8010ce8:	f7ff ff22 	bl	8010b30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010cec:	88e2      	ldrh	r2, [r4, #6]
 8010cee:	8863      	ldrh	r3, [r4, #2]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	9a00      	ldr	r2, [sp, #0]
 8010cf4:	444a      	add	r2, r9
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	fa1f f982 	uxth.w	r9, r2
 8010cfc:	fa0f f289 	sxth.w	r2, r9
 8010d00:	b219      	sxth	r1, r3
 8010d02:	428a      	cmp	r2, r1
 8010d04:	da83      	bge.n	8010c0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8010d06:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010d0a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010d0e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010d12:	eba3 0309 	sub.w	r3, r3, r9
 8010d16:	f8ad 0010 	strh.w	r0, [sp, #16]
 8010d1a:	f8ad 2012 	strh.w	r2, [sp, #18]
 8010d1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010d22:	69ea      	ldr	r2, [r5, #28]
 8010d24:	4631      	mov	r1, r6
 8010d26:	e76f      	b.n	8010c08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08010d28 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8010d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d2a:	aa02      	add	r2, sp, #8
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	f842 3d04 	str.w	r3, [r2, #-4]!
 8010d32:	4604      	mov	r4, r0
 8010d34:	3004      	adds	r0, #4
 8010d36:	460d      	mov	r5, r1
 8010d38:	f7fd fb79 	bl	800e42e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8010d3c:	9a01      	ldr	r2, [sp, #4]
 8010d3e:	b11a      	cbz	r2, 8010d48 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4620      	mov	r0, r4
 8010d44:	f7ff fef4 	bl	8010b30 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8010d48:	b003      	add	sp, #12
 8010d4a:	bd30      	pop	{r4, r5, pc}

08010d4c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8010d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d4e:	4602      	mov	r2, r0
 8010d50:	4604      	mov	r4, r0
 8010d52:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8010d56:	460d      	mov	r5, r1
 8010d58:	6851      	ldr	r1, [r2, #4]
 8010d5a:	466b      	mov	r3, sp
 8010d5c:	c303      	stmia	r3!, {r0, r1}
 8010d5e:	4629      	mov	r1, r5
 8010d60:	4668      	mov	r0, sp
 8010d62:	f7fd fa8d 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 8010d66:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8010d6a:	4669      	mov	r1, sp
 8010d6c:	b123      	cbz	r3, 8010d78 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f7ff ffda 	bl	8010d28 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8010d74:	b003      	add	sp, #12
 8010d76:	bd30      	pop	{r4, r5, pc}
 8010d78:	1d20      	adds	r0, r4, #4
 8010d7a:	f7fd fb1f 	bl	800e3bc <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8010d7e:	e7f9      	b.n	8010d74 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08010d80 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8010d80:	680a      	ldr	r2, [r1, #0]
 8010d82:	460b      	mov	r3, r1
 8010d84:	6952      	ldr	r2, [r2, #20]
 8010d86:	1d01      	adds	r1, r0, #4
 8010d88:	4618      	mov	r0, r3
 8010d8a:	4710      	bx	r2

08010d8c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8010d8c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8010d90:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8010d94:	4b03      	ldr	r3, [pc, #12]	; (8010da4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8010d96:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8010d9a:	bf08      	it	eq
 8010d9c:	2300      	moveq	r3, #0
 8010d9e:	4308      	orrs	r0, r1
 8010da0:	4318      	orrs	r0, r3
 8010da2:	4770      	bx	lr
 8010da4:	fffffe00 	.word	0xfffffe00

08010da8 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8010da8:	7b43      	ldrb	r3, [r0, #13]
 8010daa:	7201      	strb	r1, [r0, #8]
 8010dac:	b289      	uxth	r1, r1
 8010dae:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8010db2:	05ca      	lsls	r2, r1, #23
 8010db4:	bf48      	it	mi
 8010db6:	f043 0320 	orrmi.w	r3, r3, #32
 8010dba:	7343      	strb	r3, [r0, #13]
 8010dbc:	058b      	lsls	r3, r1, #22
 8010dbe:	bf42      	ittt	mi
 8010dc0:	7b43      	ldrbmi	r3, [r0, #13]
 8010dc2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8010dc6:	7343      	strbmi	r3, [r0, #13]
 8010dc8:	4770      	bx	lr

08010dca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8010dca:	b530      	push	{r4, r5, lr}
 8010dcc:	2500      	movs	r5, #0
 8010dce:	2401      	movs	r4, #1
 8010dd0:	6843      	ldr	r3, [r0, #4]
 8010dd2:	b913      	cbnz	r3, 8010dda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8010dd4:	6803      	ldr	r3, [r0, #0]
 8010dd6:	b1f3      	cbz	r3, 8010e16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8010dd8:	6043      	str	r3, [r0, #4]
 8010dda:	7c03      	ldrb	r3, [r0, #16]
 8010ddc:	b143      	cbz	r3, 8010df0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8010dde:	68c3      	ldr	r3, [r0, #12]
 8010de0:	b12b      	cbz	r3, 8010dee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010de2:	881a      	ldrh	r2, [r3, #0]
 8010de4:	b11a      	cbz	r2, 8010dee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8010de6:	1c9a      	adds	r2, r3, #2
 8010de8:	60c2      	str	r2, [r0, #12]
 8010dea:	8818      	ldrh	r0, [r3, #0]
 8010dec:	bd30      	pop	{r4, r5, pc}
 8010dee:	7405      	strb	r5, [r0, #16]
 8010df0:	6843      	ldr	r3, [r0, #4]
 8010df2:	8819      	ldrh	r1, [r3, #0]
 8010df4:	b179      	cbz	r1, 8010e16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8010df6:	1c9a      	adds	r2, r3, #2
 8010df8:	2902      	cmp	r1, #2
 8010dfa:	6042      	str	r2, [r0, #4]
 8010dfc:	d1f5      	bne.n	8010dea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8010dfe:	6883      	ldr	r3, [r0, #8]
 8010e00:	1d1a      	adds	r2, r3, #4
 8010e02:	6082      	str	r2, [r0, #8]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	60c3      	str	r3, [r0, #12]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d0e1      	beq.n	8010dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d0de      	beq.n	8010dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010e12:	7404      	strb	r4, [r0, #16]
 8010e14:	e7dc      	b.n	8010dd0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8010e16:	2000      	movs	r0, #0
 8010e18:	e7e8      	b.n	8010dec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08010e1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8010e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	4608      	mov	r0, r1
 8010e20:	b1e9      	cbz	r1, 8010e5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8010e22:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8010e26:	460b      	mov	r3, r1
 8010e28:	f101 0708 	add.w	r7, r1, #8
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	6818      	ldr	r0, [r3, #0]
 8010e30:	6859      	ldr	r1, [r3, #4]
 8010e32:	4626      	mov	r6, r4
 8010e34:	c603      	stmia	r6!, {r0, r1}
 8010e36:	3308      	adds	r3, #8
 8010e38:	42bb      	cmp	r3, r7
 8010e3a:	4634      	mov	r4, r6
 8010e3c:	d1f7      	bne.n	8010e2e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8010e3e:	6818      	ldr	r0, [r3, #0]
 8010e40:	6030      	str	r0, [r6, #0]
 8010e42:	889b      	ldrh	r3, [r3, #4]
 8010e44:	80b3      	strh	r3, [r6, #4]
 8010e46:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8010e4a:	015b      	lsls	r3, r3, #5
 8010e4c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010e50:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8010e54:	430b      	orrs	r3, r1
 8010e56:	425b      	negs	r3, r3
 8010e58:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e60 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	460c      	mov	r4, r1
 8010e64:	6811      	ldr	r1, [r2, #0]
 8010e66:	4610      	mov	r0, r2
 8010e68:	68cd      	ldr	r5, [r1, #12]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	47a8      	blx	r5
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	bf08      	it	eq
 8010e72:	4620      	moveq	r0, r4
 8010e74:	bd38      	pop	{r3, r4, r5, pc}

08010e76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8010e76:	b570      	push	{r4, r5, r6, lr}
 8010e78:	8810      	ldrh	r0, [r2, #0]
 8010e7a:	4298      	cmp	r0, r3
 8010e7c:	d817      	bhi.n	8010eae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010e7e:	1e48      	subs	r0, r1, #1
 8010e80:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8010e84:	4298      	cmp	r0, r3
 8010e86:	d312      	bcc.n	8010eae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010e88:	2400      	movs	r4, #0
 8010e8a:	428c      	cmp	r4, r1
 8010e8c:	d20f      	bcs.n	8010eae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010e8e:	1860      	adds	r0, r4, r1
 8010e90:	1040      	asrs	r0, r0, #1
 8010e92:	0085      	lsls	r5, r0, #2
 8010e94:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8010e98:	42b3      	cmp	r3, r6
 8010e9a:	d902      	bls.n	8010ea2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	b284      	uxth	r4, r0
 8010ea0:	e7f3      	b.n	8010e8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010ea2:	d102      	bne.n	8010eaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8010ea4:	442a      	add	r2, r5
 8010ea6:	8850      	ldrh	r0, [r2, #2]
 8010ea8:	bd70      	pop	{r4, r5, r6, pc}
 8010eaa:	b281      	uxth	r1, r0
 8010eac:	e7ed      	b.n	8010e8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010eae:	2000      	movs	r0, #0
 8010eb0:	e7fa      	b.n	8010ea8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08010eb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	8ac3      	ldrh	r3, [r0, #22]
 8010eb8:	428b      	cmp	r3, r1
 8010eba:	d805      	bhi.n	8010ec8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8010ebc:	4b07      	ldr	r3, [pc, #28]	; (8010edc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8010ebe:	4a08      	ldr	r2, [pc, #32]	; (8010ee0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8010ec0:	4808      	ldr	r0, [pc, #32]	; (8010ee4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8010ec2:	21fd      	movs	r1, #253	; 0xfd
 8010ec4:	f00c f8f6 	bl	801d0b4 <__assert_func>
 8010ec8:	8a83      	ldrh	r3, [r0, #20]
 8010eca:	240a      	movs	r4, #10
 8010ecc:	4419      	add	r1, r3
 8010ece:	fbb1 f3f4 	udiv	r3, r1, r4
 8010ed2:	fb04 1113 	mls	r1, r4, r3, r1
 8010ed6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8010eda:	bd10      	pop	{r4, pc}
 8010edc:	0801fd49 	.word	0x0801fd49
 8010ee0:	08020178 	.word	0x08020178
 8010ee4:	0801fd57 	.word	0x0801fd57

08010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8010ee8:	b508      	push	{r3, lr}
 8010eea:	8ac3      	ldrh	r3, [r0, #22]
 8010eec:	428b      	cmp	r3, r1
 8010eee:	d805      	bhi.n	8010efc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8010ef0:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8010ef2:	4a08      	ldr	r2, [pc, #32]	; (8010f14 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8010ef4:	4808      	ldr	r0, [pc, #32]	; (8010f18 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8010ef6:	21d3      	movs	r1, #211	; 0xd3
 8010ef8:	f00c f8dc 	bl	801d0b4 <__assert_func>
 8010efc:	8a83      	ldrh	r3, [r0, #20]
 8010efe:	220a      	movs	r2, #10
 8010f00:	4419      	add	r1, r3
 8010f02:	fbb1 f3f2 	udiv	r3, r1, r2
 8010f06:	fb02 1113 	mls	r1, r2, r3, r1
 8010f0a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8010f0e:	bd08      	pop	{r3, pc}
 8010f10:	0801fd49 	.word	0x0801fd49
 8010f14:	0801fec8 	.word	0x0801fec8
 8010f18:	0801fd57 	.word	0x0801fd57

08010f1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8010f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f20:	4604      	mov	r4, r0
 8010f22:	4688      	mov	r8, r1
 8010f24:	4615      	mov	r5, r2
 8010f26:	b94a      	cbnz	r2, 8010f3c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8010f28:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8010f2c:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8010f30:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8010f34:	4691      	mov	r9, r2
 8010f36:	4648      	mov	r0, r9
 8010f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8010f40:	8892      	ldrh	r2, [r2, #4]
 8010f42:	462b      	mov	r3, r5
 8010f44:	f105 0c08 	add.w	ip, r5, #8
 8010f48:	46b3      	mov	fp, r6
 8010f4a:	6818      	ldr	r0, [r3, #0]
 8010f4c:	6859      	ldr	r1, [r3, #4]
 8010f4e:	4637      	mov	r7, r6
 8010f50:	c703      	stmia	r7!, {r0, r1}
 8010f52:	3308      	adds	r3, #8
 8010f54:	4563      	cmp	r3, ip
 8010f56:	463e      	mov	r6, r7
 8010f58:	d1f7      	bne.n	8010f4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8010f5a:	6818      	ldr	r0, [r3, #0]
 8010f5c:	6038      	str	r0, [r7, #0]
 8010f5e:	889b      	ldrh	r3, [r3, #4]
 8010f60:	80bb      	strh	r3, [r7, #4]
 8010f62:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8010f66:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8010f6a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8010f6e:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8010f72:	18d3      	adds	r3, r2, r3
 8010f74:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8010f78:	b298      	uxth	r0, r3
 8010f7a:	ea4a 0a01 	orr.w	sl, sl, r1
 8010f7e:	281d      	cmp	r0, #29
 8010f80:	fa1f f68a 	uxth.w	r6, sl
 8010f84:	46d9      	mov	r9, fp
 8010f86:	d842      	bhi.n	801100e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 8010f88:	2301      	movs	r3, #1
 8010f8a:	4950      	ldr	r1, [pc, #320]	; (80110cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b0>)
 8010f8c:	4083      	lsls	r3, r0
 8010f8e:	420b      	tst	r3, r1
 8010f90:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8010f94:	d114      	bne.n	8010fc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8010f96:	f413 7f60 	tst.w	r3, #896	; 0x380
 8010f9a:	d03c      	beq.n	8011016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 8010f9c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8010fa0:	fa1f fa8a 	uxth.w	sl, sl
 8010fa4:	eba1 010a 	sub.w	r1, r1, sl
 8010fa8:	4658      	mov	r0, fp
 8010faa:	b209      	sxth	r1, r1
 8010fac:	f7ff fefc 	bl	8010da8 <_ZN8touchgfx9GlyphNode6setTopEs>
 8010fb0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8010fb4:	1b86      	subs	r6, r0, r6
 8010fb6:	eba6 0a0a 	sub.w	sl, r6, sl
 8010fba:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8010fbe:	e7ba      	b.n	8010f36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	f104 001a 	add.w	r0, r4, #26
 8010fc6:	f7ff ff8f 	bl	8010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8010fca:	f640 6333 	movw	r3, #3635	; 0xe33
 8010fce:	4298      	cmp	r0, r3
 8010fd0:	4601      	mov	r1, r0
 8010fd2:	d10a      	bne.n	8010fea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xce>
 8010fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fd8:	4640      	mov	r0, r8
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	4798      	blx	r3
 8010fde:	7b41      	ldrb	r1, [r0, #13]
 8010fe0:	7a00      	ldrb	r0, [r0, #8]
 8010fe2:	f7ff fed3 	bl	8010d8c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8010fe6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8010fea:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8010fee:	4431      	add	r1, r6
 8010ff0:	4451      	add	r1, sl
 8010ff2:	b209      	sxth	r1, r1
 8010ff4:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8010ff8:	4658      	mov	r0, fp
 8010ffa:	f7ff fed5 	bl	8010da8 <_ZN8touchgfx9GlyphNode6setTopEs>
 8010ffe:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8011002:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8011006:	1a9b      	subs	r3, r3, r2
 8011008:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801100c:	e793      	b.n	8010f36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801100e:	f640 631b 	movw	r3, #3611	; 0xe1b
 8011012:	429a      	cmp	r2, r3
 8011014:	d005      	beq.n	8011022 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x106>
 8011016:	f022 0302 	bic.w	r3, r2, #2
 801101a:	f640 611d 	movw	r1, #3613	; 0xe1d
 801101e:	428b      	cmp	r3, r1
 8011020:	d119      	bne.n	8011056 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8011022:	1e53      	subs	r3, r2, #1
 8011024:	b29b      	uxth	r3, r3
 8011026:	4642      	mov	r2, r8
 8011028:	4629      	mov	r1, r5
 801102a:	4620      	mov	r0, r4
 801102c:	f7ff ff18 	bl	8010e60 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011030:	7b41      	ldrb	r1, [r0, #13]
 8011032:	7a00      	ldrb	r0, [r0, #8]
 8011034:	f7ff feaa 	bl	8010d8c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8011038:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801103c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8011040:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011044:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011048:	4313      	orrs	r3, r2
 801104a:	115a      	asrs	r2, r3, #5
 801104c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8011050:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8011054:	e02d      	b.n	80110b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x196>
 8011056:	4639      	mov	r1, r7
 8011058:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801105c:	f7ff fe96 	bl	8010d8c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8011060:	f640 6109 	movw	r1, #3593	; 0xe09
 8011064:	f022 0310 	bic.w	r3, r2, #16
 8011068:	428b      	cmp	r3, r1
 801106a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801106e:	d003      	beq.n	8011078 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 8011070:	f640 6313 	movw	r3, #3603	; 0xe13
 8011074:	429a      	cmp	r2, r3
 8011076:	d126      	bne.n	80110c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1aa>
 8011078:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801107c:	b27f      	sxtb	r7, r7
 801107e:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8011082:	431f      	orrs	r7, r3
 8011084:	f640 6313 	movw	r3, #3603	; 0xe13
 8011088:	429a      	cmp	r2, r3
 801108a:	bf1a      	itte	ne
 801108c:	f102 33ff 	addne.w	r3, r2, #4294967295
 8011090:	b29b      	uxthne	r3, r3
 8011092:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8011096:	4642      	mov	r2, r8
 8011098:	4629      	mov	r1, r5
 801109a:	4620      	mov	r0, r4
 801109c:	f7ff fee0 	bl	8010e60 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80110a0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80110a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80110a8:	7a83      	ldrb	r3, [r0, #10]
 80110aa:	4313      	orrs	r3, r2
 80110ac:	1aff      	subs	r7, r7, r3
 80110ae:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 80110b2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80110b6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80110ba:	f7ff fe67 	bl	8010d8c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80110be:	1b80      	subs	r0, r0, r6
 80110c0:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 80110c4:	e737      	b.n	8010f36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80110c6:	2300      	movs	r3, #0
 80110c8:	e7c2      	b.n	8011050 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x134>
 80110ca:	bf00      	nop
 80110cc:	3fc00079 	.word	0x3fc00079

080110d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80110d0:	3a01      	subs	r2, #1
 80110d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110d6:	b292      	uxth	r2, r2
 80110d8:	460c      	mov	r4, r1
 80110da:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80110de:	42b2      	cmp	r2, r6
 80110e0:	d018      	beq.n	8011114 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 80110e2:	8b01      	ldrh	r1, [r0, #24]
 80110e4:	f834 5b02 	ldrh.w	r5, [r4], #2
 80110e8:	4291      	cmp	r1, r2
 80110ea:	d805      	bhi.n	80110f8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 80110ec:	4b14      	ldr	r3, [pc, #80]	; (8011140 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 80110ee:	4a15      	ldr	r2, [pc, #84]	; (8011144 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 80110f0:	4815      	ldr	r0, [pc, #84]	; (8011148 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 80110f2:	21d3      	movs	r1, #211	; 0xd3
 80110f4:	f00b ffde 	bl	801d0b4 <__assert_func>
 80110f8:	8ac1      	ldrh	r1, [r0, #22]
 80110fa:	4411      	add	r1, r2
 80110fc:	f001 0101 	and.w	r1, r1, #1
 8011100:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011104:	3a01      	subs	r2, #1
 8011106:	8a49      	ldrh	r1, [r1, #18]
 8011108:	428d      	cmp	r5, r1
 801110a:	b292      	uxth	r2, r2
 801110c:	d0e7      	beq.n	80110de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801110e:	2000      	movs	r0, #0
 8011110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011114:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8011118:	2600      	movs	r6, #0
 801111a:	441f      	add	r7, r3
 801111c:	f100 051a 	add.w	r5, r0, #26
 8011120:	b2b1      	uxth	r1, r6
 8011122:	42b9      	cmp	r1, r7
 8011124:	da09      	bge.n	801113a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6a>
 8011126:	4628      	mov	r0, r5
 8011128:	f7ff fede 	bl	8010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801112c:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 8011130:	4540      	cmp	r0, r8
 8011132:	f106 0601 	add.w	r6, r6, #1
 8011136:	d0f3      	beq.n	8011120 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8011138:	e7e9      	b.n	801110e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801113a:	2001      	movs	r0, #1
 801113c:	e7e8      	b.n	8011110 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801113e:	bf00      	nop
 8011140:	0801fd49 	.word	0x0801fd49
 8011144:	080202d8 	.word	0x080202d8
 8011148:	0801fd57 	.word	0x0801fd57

0801114c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	8ac3      	ldrh	r3, [r0, #22]
 8011150:	428b      	cmp	r3, r1
 8011152:	d205      	bcs.n	8011160 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8011154:	4b08      	ldr	r3, [pc, #32]	; (8011178 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8011156:	4a09      	ldr	r2, [pc, #36]	; (801117c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 8011158:	4809      	ldr	r0, [pc, #36]	; (8011180 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801115a:	21d8      	movs	r1, #216	; 0xd8
 801115c:	f00b ffaa 	bl	801d0b4 <__assert_func>
 8011160:	8a82      	ldrh	r2, [r0, #20]
 8011162:	250a      	movs	r5, #10
 8011164:	440a      	add	r2, r1
 8011166:	1a5b      	subs	r3, r3, r1
 8011168:	fbb2 f4f5 	udiv	r4, r2, r5
 801116c:	fb05 2214 	mls	r2, r5, r4, r2
 8011170:	8282      	strh	r2, [r0, #20]
 8011172:	82c3      	strh	r3, [r0, #22]
 8011174:	bd38      	pop	{r3, r4, r5, pc}
 8011176:	bf00      	nop
 8011178:	0801fd3d 	.word	0x0801fd3d
 801117c:	080200f4 	.word	0x080200f4
 8011180:	0801fd57 	.word	0x0801fd57

08011184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	8ac3      	ldrh	r3, [r0, #22]
 8011188:	2b09      	cmp	r3, #9
 801118a:	d905      	bls.n	8011198 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801118c:	4b08      	ldr	r3, [pc, #32]	; (80111b0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801118e:	4a09      	ldr	r2, [pc, #36]	; (80111b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8011190:	4809      	ldr	r0, [pc, #36]	; (80111b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8011192:	21f7      	movs	r1, #247	; 0xf7
 8011194:	f00b ff8e 	bl	801d0b4 <__assert_func>
 8011198:	8a82      	ldrh	r2, [r0, #20]
 801119a:	250a      	movs	r5, #10
 801119c:	441a      	add	r2, r3
 801119e:	fbb2 f4f5 	udiv	r4, r2, r5
 80111a2:	fb05 2214 	mls	r2, r5, r4, r2
 80111a6:	3301      	adds	r3, #1
 80111a8:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80111ac:	82c3      	strh	r3, [r0, #22]
 80111ae:	bd38      	pop	{r3, r4, r5, pc}
 80111b0:	0801fd31 	.word	0x0801fd31
 80111b4:	08020045 	.word	0x08020045
 80111b8:	0801fd57 	.word	0x0801fd57

080111bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80111bc:	b538      	push	{r3, r4, r5, lr}
 80111be:	4604      	mov	r4, r0
 80111c0:	f100 051a 	add.w	r5, r0, #26
 80111c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80111c6:	2b0a      	cmp	r3, #10
 80111c8:	d01c      	beq.n	8011204 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 80111ca:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80111cc:	b962      	cbnz	r2, 80111e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80111ce:	f104 051a 	add.w	r5, r4, #26
 80111d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80111d4:	2b0a      	cmp	r3, #10
 80111d6:	d015      	beq.n	8011204 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 80111d8:	4620      	mov	r0, r4
 80111da:	f7ff fdf6 	bl	8010dca <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80111de:	4601      	mov	r1, r0
 80111e0:	4628      	mov	r0, r5
 80111e2:	f7ff ffcf 	bl	8011184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 80111e6:	e7f4      	b.n	80111d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 80111e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80111ea:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 80111ee:	3301      	adds	r3, #1
 80111f0:	f003 0301 	and.w	r3, r3, #1
 80111f4:	3a01      	subs	r2, #1
 80111f6:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 80111f8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80111fa:	8722      	strh	r2, [r4, #56]	; 0x38
 80111fc:	4628      	mov	r0, r5
 80111fe:	f7ff ffc1 	bl	8011184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8011202:	e7df      	b.n	80111c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8011204:	bd38      	pop	{r3, r4, r5, pc}
	...

08011208 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8011208:	2300      	movs	r3, #0
 801120a:	b510      	push	{r4, lr}
 801120c:	6043      	str	r3, [r0, #4]
 801120e:	60c3      	str	r3, [r0, #12]
 8011210:	7403      	strb	r3, [r0, #16]
 8011212:	8603      	strh	r3, [r0, #48]	; 0x30
 8011214:	8303      	strh	r3, [r0, #24]
 8011216:	8703      	strh	r3, [r0, #56]	; 0x38
 8011218:	4604      	mov	r4, r0
 801121a:	f7ff ffcf 	bl	80111bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801121e:	4a0a      	ldr	r2, [pc, #40]	; (8011248 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8011220:	6813      	ldr	r3, [r2, #0]
 8011222:	4611      	mov	r1, r2
 8011224:	b913      	cbnz	r3, 801122c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8011226:	6852      	ldr	r2, [r2, #4]
 8011228:	07d0      	lsls	r0, r2, #31
 801122a:	d50b      	bpl.n	8011244 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801122c:	6849      	ldr	r1, [r1, #4]
 801122e:	104a      	asrs	r2, r1, #1
 8011230:	07c9      	lsls	r1, r1, #31
 8011232:	eb04 0002 	add.w	r0, r4, r2
 8011236:	bf48      	it	mi
 8011238:	58a2      	ldrmi	r2, [r4, r2]
 801123a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801123e:	bf48      	it	mi
 8011240:	58d3      	ldrmi	r3, [r2, r3]
 8011242:	4718      	bx	r3
 8011244:	bd10      	pop	{r4, pc}
 8011246:	bf00      	nop
 8011248:	2002de1c 	.word	0x2002de1c

0801124c <_ZN8touchgfx12TextProviderC1Ev>:
 801124c:	b510      	push	{r4, lr}
 801124e:	2300      	movs	r3, #0
 8011250:	2201      	movs	r2, #1
 8011252:	4604      	mov	r4, r0
 8011254:	e9c0 3300 	strd	r3, r3, [r0]
 8011258:	60c3      	str	r3, [r0, #12]
 801125a:	7403      	strb	r3, [r0, #16]
 801125c:	82c3      	strh	r3, [r0, #22]
 801125e:	8303      	strh	r3, [r0, #24]
 8011260:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8011262:	8603      	strh	r3, [r0, #48]	; 0x30
 8011264:	86c3      	strh	r3, [r0, #54]	; 0x36
 8011266:	8703      	strh	r3, [r0, #56]	; 0x38
 8011268:	63c3      	str	r3, [r0, #60]	; 0x3c
 801126a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801126e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8011272:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8011276:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801127a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801127e:	f7ff ffc3 	bl	8011208 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011282:	4620      	mov	r0, r4
 8011284:	bd10      	pop	{r4, pc}

08011286 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8011286:	b410      	push	{r4}
 8011288:	6082      	str	r2, [r0, #8]
 801128a:	6001      	str	r1, [r0, #0]
 801128c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801128e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011292:	f7ff bfb9 	b.w	8011208 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08011298 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8011298:	b508      	push	{r3, lr}
 801129a:	88c2      	ldrh	r2, [r0, #6]
 801129c:	440a      	add	r2, r1
 801129e:	2a02      	cmp	r2, #2
 80112a0:	dd05      	ble.n	80112ae <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 80112a2:	4b06      	ldr	r3, [pc, #24]	; (80112bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 80112a4:	4a06      	ldr	r2, [pc, #24]	; (80112c0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 80112a6:	4807      	ldr	r0, [pc, #28]	; (80112c4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 80112a8:	21ec      	movs	r1, #236	; 0xec
 80112aa:	f00b ff03 	bl	801d0b4 <__assert_func>
 80112ae:	8883      	ldrh	r3, [r0, #4]
 80112b0:	80c2      	strh	r2, [r0, #6]
 80112b2:	1a59      	subs	r1, r3, r1
 80112b4:	f001 0101 	and.w	r1, r1, #1
 80112b8:	8081      	strh	r1, [r0, #4]
 80112ba:	bd08      	pop	{r3, pc}
 80112bc:	0801fd83 	.word	0x0801fd83
 80112c0:	08020251 	.word	0x08020251
 80112c4:	0801fd57 	.word	0x0801fd57

080112c8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 80112c8:	b508      	push	{r3, lr}
 80112ca:	88c3      	ldrh	r3, [r0, #6]
 80112cc:	428b      	cmp	r3, r1
 80112ce:	d805      	bhi.n	80112dc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 80112d0:	4b06      	ldr	r3, [pc, #24]	; (80112ec <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 80112d2:	4a07      	ldr	r2, [pc, #28]	; (80112f0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 80112d4:	4807      	ldr	r0, [pc, #28]	; (80112f4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 80112d6:	21fd      	movs	r1, #253	; 0xfd
 80112d8:	f00b feec 	bl	801d0b4 <__assert_func>
 80112dc:	8883      	ldrh	r3, [r0, #4]
 80112de:	4419      	add	r1, r3
 80112e0:	f001 0101 	and.w	r1, r1, #1
 80112e4:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 80112e8:	bd08      	pop	{r3, pc}
 80112ea:	bf00      	nop
 80112ec:	0801fd49 	.word	0x0801fd49
 80112f0:	080203a9 	.word	0x080203a9
 80112f4:	0801fd57 	.word	0x0801fd57

080112f8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80112f8:	b570      	push	{r4, r5, r6, lr}
 80112fa:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80112fc:	4604      	mov	r4, r0
 80112fe:	b92a      	cbnz	r2, 801130c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8011302:	4a13      	ldr	r2, [pc, #76]	; (8011350 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8011304:	4813      	ldr	r0, [pc, #76]	; (8011354 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8011306:	21de      	movs	r1, #222	; 0xde
 8011308:	f00b fed4 	bl	801d0b4 <__assert_func>
 801130c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801130e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8011312:	260a      	movs	r6, #10
 8011314:	3301      	adds	r3, #1
 8011316:	8b4d      	ldrh	r5, [r1, #26]
 8011318:	fbb3 f1f6 	udiv	r1, r3, r6
 801131c:	3a01      	subs	r2, #1
 801131e:	fb06 3311 	mls	r3, r6, r1, r3
 8011322:	8602      	strh	r2, [r0, #48]	; 0x30
 8011324:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8011326:	f7ff ff49 	bl	80111bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801132a:	8b23      	ldrh	r3, [r4, #24]
 801132c:	2b02      	cmp	r3, #2
 801132e:	bf04      	itt	eq
 8011330:	2301      	moveq	r3, #1
 8011332:	8323      	strheq	r3, [r4, #24]
 8011334:	3412      	adds	r4, #18
 8011336:	4620      	mov	r0, r4
 8011338:	2101      	movs	r1, #1
 801133a:	f7ff ffad 	bl	8011298 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801133e:	4620      	mov	r0, r4
 8011340:	462a      	mov	r2, r5
 8011342:	2100      	movs	r1, #0
 8011344:	f7ff ffc0 	bl	80112c8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8011348:	4628      	mov	r0, r5
 801134a:	bd70      	pop	{r4, r5, r6, pc}
 801134c:	0801fd28 	.word	0x0801fd28
 8011350:	0801ff9a 	.word	0x0801ff9a
 8011354:	0801fd57 	.word	0x0801fd57

08011358 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8011358:	428a      	cmp	r2, r1
 801135a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135e:	4604      	mov	r4, r0
 8011360:	460e      	mov	r6, r1
 8011362:	4615      	mov	r5, r2
 8011364:	469a      	mov	sl, r3
 8011366:	d92b      	bls.n	80113c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8011368:	1a57      	subs	r7, r2, r1
 801136a:	b2bf      	uxth	r7, r7
 801136c:	f04f 0800 	mov.w	r8, #0
 8011370:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8011374:	f04f 0b0a 	mov.w	fp, #10
 8011378:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801137a:	b92b      	cbnz	r3, 8011388 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801137c:	4b24      	ldr	r3, [pc, #144]	; (8011410 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801137e:	4a25      	ldr	r2, [pc, #148]	; (8011414 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8011380:	21e6      	movs	r1, #230	; 0xe6
 8011382:	4825      	ldr	r0, [pc, #148]	; (8011418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8011384:	f00b fe96 	bl	801d0b4 <__assert_func>
 8011388:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801138a:	3b01      	subs	r3, #1
 801138c:	b29b      	uxth	r3, r3
 801138e:	441a      	add	r2, r3
 8011390:	8623      	strh	r3, [r4, #48]	; 0x30
 8011392:	fbb2 f3fb 	udiv	r3, r2, fp
 8011396:	fb0b 2313 	mls	r3, fp, r3, r2
 801139a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801139e:	2101      	movs	r1, #1
 80113a0:	8b5a      	ldrh	r2, [r3, #26]
 80113a2:	9201      	str	r2, [sp, #4]
 80113a4:	4648      	mov	r0, r9
 80113a6:	f7ff ff77 	bl	8011298 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80113aa:	f108 0801 	add.w	r8, r8, #1
 80113ae:	9a01      	ldr	r2, [sp, #4]
 80113b0:	2100      	movs	r1, #0
 80113b2:	4648      	mov	r0, r9
 80113b4:	f7ff ff88 	bl	80112c8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80113b8:	fa1f f388 	uxth.w	r3, r8
 80113bc:	429f      	cmp	r7, r3
 80113be:	d8db      	bhi.n	8011378 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 80113c0:	f104 071a 	add.w	r7, r4, #26
 80113c4:	4631      	mov	r1, r6
 80113c6:	4638      	mov	r0, r7
 80113c8:	f7ff fec0 	bl	801114c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 80113cc:	260a      	movs	r6, #10
 80113ce:	b1c5      	cbz	r5, 8011402 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80113d0:	3d01      	subs	r5, #1
 80113d2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80113d4:	b2ad      	uxth	r5, r5
 80113d6:	2b09      	cmp	r3, #9
 80113d8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 80113dc:	d903      	bls.n	80113e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 80113de:	4b0f      	ldr	r3, [pc, #60]	; (801141c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 80113e0:	4a0f      	ldr	r2, [pc, #60]	; (8011420 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 80113e2:	21ec      	movs	r1, #236	; 0xec
 80113e4:	e7cd      	b.n	8011382 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 80113e6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80113e8:	3109      	adds	r1, #9
 80113ea:	3301      	adds	r3, #1
 80113ec:	fbb1 f0f6 	udiv	r0, r1, r6
 80113f0:	fb06 1110 	mls	r1, r6, r0, r1
 80113f4:	85e1      	strh	r1, [r4, #46]	; 0x2e
 80113f6:	8623      	strh	r3, [r4, #48]	; 0x30
 80113f8:	2100      	movs	r1, #0
 80113fa:	4638      	mov	r0, r7
 80113fc:	f7ff fd5a 	bl	8010eb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011400:	e7e5      	b.n	80113ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8011402:	4620      	mov	r0, r4
 8011404:	b003      	add	sp, #12
 8011406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140a:	f7ff bed7 	b.w	80111bc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801140e:	bf00      	nop
 8011410:	0801fd28 	.word	0x0801fd28
 8011414:	0801fe1e 	.word	0x0801fe1e
 8011418:	0801fd57 	.word	0x0801fd57
 801141c:	0801fd83 	.word	0x0801fd83
 8011420:	0801fd96 	.word	0x0801fd96

08011424 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8011424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011428:	4605      	mov	r5, r0
 801142a:	4616      	mov	r6, r2
 801142c:	1c8c      	adds	r4, r1, #2
 801142e:	8809      	ldrh	r1, [r1, #0]
 8011430:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8011434:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8011438:	42b3      	cmp	r3, r6
 801143a:	d124      	bne.n	8011486 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801143c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8011440:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8011444:	f001 070f 	and.w	r7, r1, #15
 8011448:	f8cd 8000 	str.w	r8, [sp]
 801144c:	464b      	mov	r3, r9
 801144e:	4652      	mov	r2, sl
 8011450:	4621      	mov	r1, r4
 8011452:	4628      	mov	r0, r5
 8011454:	f7ff fe3c 	bl	80110d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8011458:	4683      	mov	fp, r0
 801145a:	b168      	cbz	r0, 8011478 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801145c:	eb0a 0109 	add.w	r1, sl, r9
 8011460:	4441      	add	r1, r8
 8011462:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8011466:	463a      	mov	r2, r7
 8011468:	4649      	mov	r1, r9
 801146a:	4628      	mov	r0, r5
 801146c:	f7ff ff74 	bl	8011358 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8011470:	4658      	mov	r0, fp
 8011472:	b003      	add	sp, #12
 8011474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011478:	eb07 010a 	add.w	r1, r7, sl
 801147c:	4449      	add	r1, r9
 801147e:	4441      	add	r1, r8
 8011480:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8011484:	e7d2      	b.n	801142c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8011486:	f04f 0b00 	mov.w	fp, #0
 801148a:	e7f1      	b.n	8011470 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801148c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801148c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011490:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8011492:	886f      	ldrh	r7, [r5, #2]
 8011494:	4604      	mov	r4, r0
 8011496:	087f      	lsrs	r7, r7, #1
 8011498:	260b      	movs	r6, #11
 801149a:	f100 091a 	add.w	r9, r0, #26
 801149e:	3e01      	subs	r6, #1
 80114a0:	d013      	beq.n	80114ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80114a2:	2100      	movs	r1, #0
 80114a4:	4648      	mov	r0, r9
 80114a6:	f7ff fd1f 	bl	8010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80114aa:	462a      	mov	r2, r5
 80114ac:	4680      	mov	r8, r0
 80114ae:	4603      	mov	r3, r0
 80114b0:	4639      	mov	r1, r7
 80114b2:	4620      	mov	r0, r4
 80114b4:	f7ff fcdf 	bl	8010e76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80114b8:	b138      	cbz	r0, 80114ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80114ba:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80114be:	4642      	mov	r2, r8
 80114c0:	4620      	mov	r0, r4
 80114c2:	f7ff ffaf 	bl	8011424 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	d1e9      	bne.n	801149e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 80114ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080114d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	4b1e      	ldr	r3, [pc, #120]	; (801154c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80114d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d8:	4604      	mov	r4, r0
 80114da:	f003 0501 	and.w	r5, r3, #1
 80114de:	b902      	cbnz	r2, 80114e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 80114e0:	b165      	cbz	r5, 80114fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 80114e2:	105b      	asrs	r3, r3, #1
 80114e4:	f104 061a 	add.w	r6, r4, #26
 80114e8:	18e0      	adds	r0, r4, r3
 80114ea:	b10d      	cbz	r5, 80114f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 80114ec:	58e3      	ldr	r3, [r4, r3]
 80114ee:	589a      	ldr	r2, [r3, r2]
 80114f0:	4790      	blx	r2
 80114f2:	2100      	movs	r1, #0
 80114f4:	4602      	mov	r2, r0
 80114f6:	4630      	mov	r0, r6
 80114f8:	f7ff fcdc 	bl	8010eb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80114fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80114fe:	b303      	cbz	r3, 8011542 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8011500:	f104 051a 	add.w	r5, r4, #26
 8011504:	2100      	movs	r1, #0
 8011506:	4628      	mov	r0, r5
 8011508:	f7ff fcee 	bl	8010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801150c:	b1c8      	cbz	r0, 8011542 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801150e:	4620      	mov	r0, r4
 8011510:	f7ff ffbc 	bl	801148c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8011514:	2101      	movs	r1, #1
 8011516:	4628      	mov	r0, r5
 8011518:	f7ff fce6 	bl	8010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801151c:	f640 133f 	movw	r3, #2367	; 0x93f
 8011520:	4298      	cmp	r0, r3
 8011522:	4606      	mov	r6, r0
 8011524:	d10d      	bne.n	8011542 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8011526:	2100      	movs	r1, #0
 8011528:	4628      	mov	r0, r5
 801152a:	f7ff fcdd 	bl	8010ee8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801152e:	2101      	movs	r1, #1
 8011530:	4602      	mov	r2, r0
 8011532:	4628      	mov	r0, r5
 8011534:	f7ff fcbe 	bl	8010eb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011538:	4632      	mov	r2, r6
 801153a:	2100      	movs	r1, #0
 801153c:	4628      	mov	r0, r5
 801153e:	f7ff fcb9 	bl	8010eb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011542:	4620      	mov	r0, r4
 8011544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011548:	f7ff bed6 	b.w	80112f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801154c:	2002de24 	.word	0x2002de24

08011550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8011550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011552:	4617      	mov	r7, r2
 8011554:	461e      	mov	r6, r3
 8011556:	4605      	mov	r5, r0
 8011558:	f7ff ffba 	bl	80114d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	4604      	mov	r4, r0
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	4601      	mov	r1, r0
 8011564:	4638      	mov	r0, r7
 8011566:	4798      	blx	r3
 8011568:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801156c:	b29b      	uxth	r3, r3
 801156e:	2b7f      	cmp	r3, #127	; 0x7f
 8011570:	4602      	mov	r2, r0
 8011572:	6030      	str	r0, [r6, #0]
 8011574:	d813      	bhi.n	801159e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8011576:	4639      	mov	r1, r7
 8011578:	4628      	mov	r0, r5
 801157a:	f7ff fccf 	bl	8010f1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801157e:	6030      	str	r0, [r6, #0]
 8011580:	6833      	ldr	r3, [r6, #0]
 8011582:	b143      	cbz	r3, 8011596 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8011584:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8011588:	7a9b      	ldrb	r3, [r3, #10]
 801158a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801158e:	4313      	orrs	r3, r2
 8011590:	bf0c      	ite	eq
 8011592:	2301      	moveq	r3, #1
 8011594:	2300      	movne	r3, #0
 8011596:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801159a:	4620      	mov	r0, r4
 801159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d0ec      	beq.n	8011580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80115a6:	f640 1302 	movw	r3, #2306	; 0x902
 80115aa:	429c      	cmp	r4, r3
 80115ac:	d1e8      	bne.n	8011580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80115ae:	4601      	mov	r1, r0
 80115b0:	4628      	mov	r0, r5
 80115b2:	f7ff fc32 	bl	8010e1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80115b6:	e7e2      	b.n	801157e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

080115b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80115b8:	4b01      	ldr	r3, [pc, #4]	; (80115c0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80115ba:	6018      	str	r0, [r3, #0]
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop
 80115c0:	2002ee4c 	.word	0x2002ee4c

080115c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80115c4:	4b07      	ldr	r3, [pc, #28]	; (80115e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 80115c6:	881a      	ldrh	r2, [r3, #0]
 80115c8:	4282      	cmp	r2, r0
 80115ca:	d809      	bhi.n	80115e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80115cc:	4b06      	ldr	r3, [pc, #24]	; (80115e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 80115ce:	881b      	ldrh	r3, [r3, #0]
 80115d0:	4413      	add	r3, r2
 80115d2:	4298      	cmp	r0, r3
 80115d4:	da04      	bge.n	80115e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80115d6:	4b05      	ldr	r3, [pc, #20]	; (80115ec <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80115de:	4770      	bx	lr
 80115e0:	2000      	movs	r0, #0
 80115e2:	4770      	bx	lr
 80115e4:	2002ee6c 	.word	0x2002ee6c
 80115e8:	2002ee70 	.word	0x2002ee70
 80115ec:	2002ee50 	.word	0x2002ee50

080115f0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80115f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f4:	4d26      	ldr	r5, [pc, #152]	; (8011690 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80115f6:	682b      	ldr	r3, [r5, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d046      	beq.n	801168a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 80115fc:	4a25      	ldr	r2, [pc, #148]	; (8011694 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80115fe:	4f26      	ldr	r7, [pc, #152]	; (8011698 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8011600:	8810      	ldrh	r0, [r2, #0]
 8011602:	883c      	ldrh	r4, [r7, #0]
 8011604:	4e25      	ldr	r6, [pc, #148]	; (801169c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8011606:	4420      	add	r0, r4
 8011608:	1c42      	adds	r2, r0, #1
 801160a:	f022 0201 	bic.w	r2, r2, #1
 801160e:	0412      	lsls	r2, r2, #16
 8011610:	0c12      	lsrs	r2, r2, #16
 8011612:	0051      	lsls	r1, r2, #1
 8011614:	220e      	movs	r2, #14
 8011616:	fb02 fc04 	mul.w	ip, r2, r4
 801161a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801161e:	4c20      	ldr	r4, [pc, #128]	; (80116a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8011620:	eb03 0208 	add.w	r2, r3, r8
 8011624:	eb08 0e01 	add.w	lr, r8, r1
 8011628:	6022      	str	r2, [r4, #0]
 801162a:	eb03 020e 	add.w	r2, r3, lr
 801162e:	6032      	str	r2, [r6, #0]
 8011630:	44e6      	add	lr, ip
 8011632:	4a1c      	ldr	r2, [pc, #112]	; (80116a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8011634:	4473      	add	r3, lr
 8011636:	6013      	str	r3, [r2, #0]
 8011638:	4a1b      	ldr	r2, [pc, #108]	; (80116a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801163a:	2300      	movs	r3, #0
 801163c:	8013      	strh	r3, [r2, #0]
 801163e:	4a1b      	ldr	r2, [pc, #108]	; (80116ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8011640:	6812      	ldr	r2, [r2, #0]
 8011642:	eba2 0208 	sub.w	r2, r2, r8
 8011646:	1a52      	subs	r2, r2, r1
 8011648:	4919      	ldr	r1, [pc, #100]	; (80116b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801164a:	eba2 020c 	sub.w	r2, r2, ip
 801164e:	600a      	str	r2, [r1, #0]
 8011650:	4a18      	ldr	r2, [pc, #96]	; (80116b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8011652:	469c      	mov	ip, r3
 8011654:	8013      	strh	r3, [r2, #0]
 8011656:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801165a:	4283      	cmp	r3, r0
 801165c:	d10d      	bne.n	801167a <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801165e:	883d      	ldrh	r5, [r7, #0]
 8011660:	6830      	ldr	r0, [r6, #0]
 8011662:	2300      	movs	r3, #0
 8011664:	240e      	movs	r4, #14
 8011666:	429d      	cmp	r5, r3
 8011668:	d90f      	bls.n	801168a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801166a:	fb04 0203 	mla	r2, r4, r3, r0
 801166e:	3301      	adds	r3, #1
 8011670:	7b11      	ldrb	r1, [r2, #12]
 8011672:	f36f 1145 	bfc	r1, #5, #1
 8011676:	7311      	strb	r1, [r2, #12]
 8011678:	e7f5      	b.n	8011666 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801167a:	682a      	ldr	r2, [r5, #0]
 801167c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8011680:	6822      	ldr	r2, [r4, #0]
 8011682:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011686:	3301      	adds	r3, #1
 8011688:	e7e7      	b.n	801165a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801168e:	bf00      	nop
 8011690:	2002ee50 	.word	0x2002ee50
 8011694:	2002ee6c 	.word	0x2002ee6c
 8011698:	2002ee70 	.word	0x2002ee70
 801169c:	2002ee54 	.word	0x2002ee54
 80116a0:	2002ee64 	.word	0x2002ee64
 80116a4:	2002ee5c 	.word	0x2002ee5c
 80116a8:	2002ee6e 	.word	0x2002ee6e
 80116ac:	2002ee58 	.word	0x2002ee58
 80116b0:	2002ee68 	.word	0x2002ee68
 80116b4:	2002ee60 	.word	0x2002ee60

080116b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	4b10      	ldr	r3, [pc, #64]	; (80116fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	b9db      	cbnz	r3, 80116f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80116c0:	b1d1      	cbz	r1, 80116f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80116c2:	4b0f      	ldr	r3, [pc, #60]	; (8011700 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80116c4:	801a      	strh	r2, [r3, #0]
 80116c6:	4b0f      	ldr	r3, [pc, #60]	; (8011704 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	b292      	uxth	r2, r2
 80116cc:	240e      	movs	r4, #14
 80116ce:	4413      	add	r3, r2
 80116d0:	4362      	muls	r2, r4
 80116d2:	2406      	movs	r4, #6
 80116d4:	fb04 2203 	mla	r2, r4, r3, r2
 80116d8:	428a      	cmp	r2, r1
 80116da:	d305      	bcc.n	80116e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80116dc:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80116de:	4a0b      	ldr	r2, [pc, #44]	; (801170c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80116e0:	480b      	ldr	r0, [pc, #44]	; (8011710 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80116e2:	2137      	movs	r1, #55	; 0x37
 80116e4:	f00b fce6 	bl	801d0b4 <__assert_func>
 80116e8:	4b0a      	ldr	r3, [pc, #40]	; (8011714 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80116ea:	6019      	str	r1, [r3, #0]
 80116ec:	4b0a      	ldr	r3, [pc, #40]	; (8011718 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80116ee:	6018      	str	r0, [r3, #0]
 80116f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116f4:	f7ff bf7c 	b.w	80115f0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80116f8:	bd10      	pop	{r4, pc}
 80116fa:	bf00      	nop
 80116fc:	2002ee5c 	.word	0x2002ee5c
 8011700:	2002ee70 	.word	0x2002ee70
 8011704:	2002ee6c 	.word	0x2002ee6c
 8011708:	080204de 	.word	0x080204de
 801170c:	08020537 	.word	0x08020537
 8011710:	080204b9 	.word	0x080204b9
 8011714:	2002ee58 	.word	0x2002ee58
 8011718:	2002ee50 	.word	0x2002ee50

0801171c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801171c:	b470      	push	{r4, r5, r6}
 801171e:	4c07      	ldr	r4, [pc, #28]	; (801173c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8011720:	6826      	ldr	r6, [r4, #0]
 8011722:	4605      	mov	r5, r0
 8011724:	4610      	mov	r0, r2
 8011726:	9a03      	ldr	r2, [sp, #12]
 8011728:	b936      	cbnz	r6, 8011738 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801172a:	6025      	str	r5, [r4, #0]
 801172c:	4c04      	ldr	r4, [pc, #16]	; (8011740 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801172e:	8021      	strh	r1, [r4, #0]
 8011730:	bc70      	pop	{r4, r5, r6}
 8011732:	4619      	mov	r1, r3
 8011734:	f7ff bfc0 	b.w	80116b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8011738:	bc70      	pop	{r4, r5, r6}
 801173a:	4770      	bx	lr
 801173c:	2002ee74 	.word	0x2002ee74
 8011740:	2002ee6c 	.word	0x2002ee6c

08011744 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011744:	b508      	push	{r3, lr}
 8011746:	4b14      	ldr	r3, [pc, #80]	; (8011798 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8011748:	6819      	ldr	r1, [r3, #0]
 801174a:	b931      	cbnz	r1, 801175a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801174c:	4b13      	ldr	r3, [pc, #76]	; (801179c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801174e:	4a14      	ldr	r2, [pc, #80]	; (80117a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8011750:	4814      	ldr	r0, [pc, #80]	; (80117a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011752:	f240 21e6 	movw	r1, #742	; 0x2e6
 8011756:	f00b fcad 	bl	801d0b4 <__assert_func>
 801175a:	4a13      	ldr	r2, [pc, #76]	; (80117a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801175c:	8803      	ldrh	r3, [r0, #0]
 801175e:	8812      	ldrh	r2, [r2, #0]
 8011760:	4293      	cmp	r3, r2
 8011762:	d204      	bcs.n	801176e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8011764:	2214      	movs	r2, #20
 8011766:	fb02 1303 	mla	r3, r2, r3, r1
 801176a:	8918      	ldrh	r0, [r3, #8]
 801176c:	bd08      	pop	{r3, pc}
 801176e:	490f      	ldr	r1, [pc, #60]	; (80117ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8011770:	8809      	ldrh	r1, [r1, #0]
 8011772:	4411      	add	r1, r2
 8011774:	428b      	cmp	r3, r1
 8011776:	da06      	bge.n	8011786 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8011778:	1a9b      	subs	r3, r3, r2
 801177a:	4a0d      	ldr	r2, [pc, #52]	; (80117b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801177c:	6812      	ldr	r2, [r2, #0]
 801177e:	210e      	movs	r1, #14
 8011780:	fb01 2303 	mla	r3, r1, r3, r2
 8011784:	e7f1      	b.n	801176a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8011786:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801178a:	4293      	cmp	r3, r2
 801178c:	bf0a      	itet	eq
 801178e:	4b09      	ldreq	r3, [pc, #36]	; (80117b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8011790:	2000      	movne	r0, #0
 8011792:	8818      	ldrheq	r0, [r3, #0]
 8011794:	e7ea      	b.n	801176c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8011796:	bf00      	nop
 8011798:	2002ee74 	.word	0x2002ee74
 801179c:	0801f874 	.word	0x0801f874
 80117a0:	080205e4 	.word	0x080205e4
 80117a4:	080204b9 	.word	0x080204b9
 80117a8:	2002ee6c 	.word	0x2002ee6c
 80117ac:	2002ee70 	.word	0x2002ee70
 80117b0:	2002ee54 	.word	0x2002ee54
 80117b4:	2002edc0 	.word	0x2002edc0

080117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80117b8:	b508      	push	{r3, lr}
 80117ba:	4b14      	ldr	r3, [pc, #80]	; (801180c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80117bc:	6819      	ldr	r1, [r3, #0]
 80117be:	b931      	cbnz	r1, 80117ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80117c0:	4b13      	ldr	r3, [pc, #76]	; (8011810 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80117c2:	4a14      	ldr	r2, [pc, #80]	; (8011814 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80117c4:	4814      	ldr	r0, [pc, #80]	; (8011818 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80117c6:	f240 21fa 	movw	r1, #762	; 0x2fa
 80117ca:	f00b fc73 	bl	801d0b4 <__assert_func>
 80117ce:	4a13      	ldr	r2, [pc, #76]	; (801181c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80117d0:	8803      	ldrh	r3, [r0, #0]
 80117d2:	8812      	ldrh	r2, [r2, #0]
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d204      	bcs.n	80117e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80117d8:	2214      	movs	r2, #20
 80117da:	fb02 1303 	mla	r3, r2, r3, r1
 80117de:	8958      	ldrh	r0, [r3, #10]
 80117e0:	bd08      	pop	{r3, pc}
 80117e2:	490f      	ldr	r1, [pc, #60]	; (8011820 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80117e4:	8809      	ldrh	r1, [r1, #0]
 80117e6:	4411      	add	r1, r2
 80117e8:	428b      	cmp	r3, r1
 80117ea:	da06      	bge.n	80117fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80117ec:	1a9b      	subs	r3, r3, r2
 80117ee:	4a0d      	ldr	r2, [pc, #52]	; (8011824 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80117f0:	6812      	ldr	r2, [r2, #0]
 80117f2:	210e      	movs	r1, #14
 80117f4:	fb01 2303 	mla	r3, r1, r3, r2
 80117f8:	e7f1      	b.n	80117de <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80117fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80117fe:	4293      	cmp	r3, r2
 8011800:	bf0a      	itet	eq
 8011802:	4b09      	ldreq	r3, [pc, #36]	; (8011828 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8011804:	2000      	movne	r0, #0
 8011806:	8818      	ldrheq	r0, [r3, #0]
 8011808:	e7ea      	b.n	80117e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801180a:	bf00      	nop
 801180c:	2002ee74 	.word	0x2002ee74
 8011810:	0801f874 	.word	0x0801f874
 8011814:	08020610 	.word	0x08020610
 8011818:	080204b9 	.word	0x080204b9
 801181c:	2002ee6c 	.word	0x2002ee6c
 8011820:	2002ee70 	.word	0x2002ee70
 8011824:	2002ee54 	.word	0x2002ee54
 8011828:	2002edc2 	.word	0x2002edc2

0801182c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801182c:	b510      	push	{r4, lr}
 801182e:	4b23      	ldr	r3, [pc, #140]	; (80118bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8011830:	681c      	ldr	r4, [r3, #0]
 8011832:	b934      	cbnz	r4, 8011842 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8011834:	4b22      	ldr	r3, [pc, #136]	; (80118c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8011836:	4a23      	ldr	r2, [pc, #140]	; (80118c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8011838:	4823      	ldr	r0, [pc, #140]	; (80118c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801183a:	f240 310e 	movw	r1, #782	; 0x30e
 801183e:	f00b fc39 	bl	801d0b4 <__assert_func>
 8011842:	4a22      	ldr	r2, [pc, #136]	; (80118cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8011844:	880b      	ldrh	r3, [r1, #0]
 8011846:	8812      	ldrh	r2, [r2, #0]
 8011848:	4293      	cmp	r3, r2
 801184a:	d211      	bcs.n	8011870 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801184c:	2214      	movs	r2, #20
 801184e:	fb02 4303 	mla	r3, r2, r3, r4
 8011852:	8a1a      	ldrh	r2, [r3, #16]
 8011854:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8011858:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801185c:	8a5b      	ldrh	r3, [r3, #18]
 801185e:	8004      	strh	r4, [r0, #0]
 8011860:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011868:	8041      	strh	r1, [r0, #2]
 801186a:	8082      	strh	r2, [r0, #4]
 801186c:	80c3      	strh	r3, [r0, #6]
 801186e:	e00e      	b.n	801188e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8011870:	4917      	ldr	r1, [pc, #92]	; (80118d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8011872:	8809      	ldrh	r1, [r1, #0]
 8011874:	4411      	add	r1, r2
 8011876:	428b      	cmp	r3, r1
 8011878:	da0a      	bge.n	8011890 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801187a:	1a9b      	subs	r3, r3, r2
 801187c:	4a15      	ldr	r2, [pc, #84]	; (80118d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801187e:	6812      	ldr	r2, [r2, #0]
 8011880:	210e      	movs	r1, #14
 8011882:	fb01 2303 	mla	r3, r1, r3, r2
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	6002      	str	r2, [r0, #0]
 801188a:	685a      	ldr	r2, [r3, #4]
 801188c:	6042      	str	r2, [r0, #4]
 801188e:	bd10      	pop	{r4, pc}
 8011890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011894:	4293      	cmp	r3, r2
 8011896:	d10b      	bne.n	80118b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8011898:	4b0f      	ldr	r3, [pc, #60]	; (80118d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801189a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801189e:	4b0f      	ldr	r3, [pc, #60]	; (80118dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80118a0:	8081      	strh	r1, [r0, #4]
 80118a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80118a6:	80c2      	strh	r2, [r0, #6]
 80118a8:	2300      	movs	r3, #0
 80118aa:	8003      	strh	r3, [r0, #0]
 80118ac:	8043      	strh	r3, [r0, #2]
 80118ae:	e7ee      	b.n	801188e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80118b0:	2300      	movs	r3, #0
 80118b2:	8003      	strh	r3, [r0, #0]
 80118b4:	8043      	strh	r3, [r0, #2]
 80118b6:	8083      	strh	r3, [r0, #4]
 80118b8:	e7d8      	b.n	801186c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80118ba:	bf00      	nop
 80118bc:	2002ee74 	.word	0x2002ee74
 80118c0:	0801f874 	.word	0x0801f874
 80118c4:	0802057d 	.word	0x0802057d
 80118c8:	080204b9 	.word	0x080204b9
 80118cc:	2002ee6c 	.word	0x2002ee6c
 80118d0:	2002ee70 	.word	0x2002ee70
 80118d4:	2002ee54 	.word	0x2002ee54
 80118d8:	2002edc0 	.word	0x2002edc0
 80118dc:	2002edc2 	.word	0x2002edc2

080118e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80118e0:	4b18      	ldr	r3, [pc, #96]	; (8011944 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	b34b      	cbz	r3, 801193a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80118e6:	4a18      	ldr	r2, [pc, #96]	; (8011948 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80118e8:	8800      	ldrh	r0, [r0, #0]
 80118ea:	8812      	ldrh	r2, [r2, #0]
 80118ec:	4290      	cmp	r0, r2
 80118ee:	d211      	bcs.n	8011914 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80118f0:	2214      	movs	r2, #20
 80118f2:	fb02 3300 	mla	r3, r2, r0, r3
 80118f6:	8a1a      	ldrh	r2, [r3, #16]
 80118f8:	8919      	ldrh	r1, [r3, #8]
 80118fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80118fe:	428a      	cmp	r2, r1
 8011900:	db1d      	blt.n	801193e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8011902:	8a58      	ldrh	r0, [r3, #18]
 8011904:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011908:	895b      	ldrh	r3, [r3, #10]
 801190a:	4298      	cmp	r0, r3
 801190c:	bfac      	ite	ge
 801190e:	2000      	movge	r0, #0
 8011910:	2001      	movlt	r0, #1
 8011912:	4770      	bx	lr
 8011914:	4b0d      	ldr	r3, [pc, #52]	; (801194c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8011916:	881b      	ldrh	r3, [r3, #0]
 8011918:	4413      	add	r3, r2
 801191a:	4298      	cmp	r0, r3
 801191c:	da0d      	bge.n	801193a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801191e:	4b0c      	ldr	r3, [pc, #48]	; (8011950 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	1a80      	subs	r0, r0, r2
 8011924:	220e      	movs	r2, #14
 8011926:	fb02 3300 	mla	r3, r2, r0, r3
 801192a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801192e:	891a      	ldrh	r2, [r3, #8]
 8011930:	4291      	cmp	r1, r2
 8011932:	db04      	blt.n	801193e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8011934:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8011938:	e7e6      	b.n	8011908 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801193a:	2000      	movs	r0, #0
 801193c:	4770      	bx	lr
 801193e:	2001      	movs	r0, #1
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	2002ee74 	.word	0x2002ee74
 8011948:	2002ee6c 	.word	0x2002ee6c
 801194c:	2002ee70 	.word	0x2002ee70
 8011950:	2002ee54 	.word	0x2002ee54

08011954 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8011954:	b508      	push	{r3, lr}
 8011956:	4b12      	ldr	r3, [pc, #72]	; (80119a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8011958:	6819      	ldr	r1, [r3, #0]
 801195a:	b931      	cbnz	r1, 801196a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801195c:	4b11      	ldr	r3, [pc, #68]	; (80119a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801195e:	4a12      	ldr	r2, [pc, #72]	; (80119a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8011960:	4812      	ldr	r0, [pc, #72]	; (80119ac <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8011962:	f240 3132 	movw	r1, #818	; 0x332
 8011966:	f00b fba5 	bl	801d0b4 <__assert_func>
 801196a:	8803      	ldrh	r3, [r0, #0]
 801196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011970:	4293      	cmp	r3, r2
 8011972:	d012      	beq.n	801199a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8011974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011978:	4293      	cmp	r3, r2
 801197a:	d103      	bne.n	8011984 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801197c:	4b0c      	ldr	r3, [pc, #48]	; (80119b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8011982:	bd08      	pop	{r3, pc}
 8011984:	4a0b      	ldr	r2, [pc, #44]	; (80119b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8011986:	6812      	ldr	r2, [r2, #0]
 8011988:	b11a      	cbz	r2, 8011992 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801198a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801198e:	2800      	cmp	r0, #0
 8011990:	d1f7      	bne.n	8011982 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8011992:	2214      	movs	r2, #20
 8011994:	4353      	muls	r3, r2
 8011996:	58c8      	ldr	r0, [r1, r3]
 8011998:	e7f3      	b.n	8011982 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801199a:	2000      	movs	r0, #0
 801199c:	e7f1      	b.n	8011982 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801199e:	bf00      	nop
 80119a0:	2002ee74 	.word	0x2002ee74
 80119a4:	0801f874 	.word	0x0801f874
 80119a8:	080205b3 	.word	0x080205b3
 80119ac:	080204b9 	.word	0x080204b9
 80119b0:	2002edcc 	.word	0x2002edcc
 80119b4:	2002ee50 	.word	0x2002ee50

080119b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80119b8:	8802      	ldrh	r2, [r0, #0]
 80119ba:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80119be:	429a      	cmp	r2, r3
 80119c0:	d840      	bhi.n	8011a44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80119c2:	4b21      	ldr	r3, [pc, #132]	; (8011a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d220      	bcs.n	8011a0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 80119ca:	4b20      	ldr	r3, [pc, #128]	; (8011a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80119cc:	6819      	ldr	r1, [r3, #0]
 80119ce:	2314      	movs	r3, #20
 80119d0:	fb03 1302 	mla	r3, r3, r2, r1
 80119d4:	6858      	ldr	r0, [r3, #4]
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d035      	beq.n	8011a46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80119da:	491d      	ldr	r1, [pc, #116]	; (8011a50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80119dc:	6809      	ldr	r1, [r1, #0]
 80119de:	2900      	cmp	r1, #0
 80119e0:	d031      	beq.n	8011a46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80119e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80119e6:	b371      	cbz	r1, 8011a46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80119e8:	895a      	ldrh	r2, [r3, #10]
 80119ea:	8918      	ldrh	r0, [r3, #8]
 80119ec:	4350      	muls	r0, r2
 80119ee:	7c5a      	ldrb	r2, [r3, #17]
 80119f0:	7cdb      	ldrb	r3, [r3, #19]
 80119f2:	0952      	lsrs	r2, r2, #5
 80119f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80119f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80119fc:	2b0b      	cmp	r3, #11
 80119fe:	bf18      	it	ne
 8011a00:	0040      	lslne	r0, r0, #1
 8011a02:	3003      	adds	r0, #3
 8011a04:	f020 0003 	bic.w	r0, r0, #3
 8011a08:	4408      	add	r0, r1
 8011a0a:	4770      	bx	lr
 8011a0c:	4911      	ldr	r1, [pc, #68]	; (8011a54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8011a0e:	8809      	ldrh	r1, [r1, #0]
 8011a10:	4419      	add	r1, r3
 8011a12:	428a      	cmp	r2, r1
 8011a14:	da16      	bge.n	8011a44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8011a16:	4910      	ldr	r1, [pc, #64]	; (8011a58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8011a18:	6809      	ldr	r1, [r1, #0]
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	200e      	movs	r0, #14
 8011a1e:	fb00 1303 	mla	r3, r0, r3, r1
 8011a22:	7b19      	ldrb	r1, [r3, #12]
 8011a24:	f001 011f 	and.w	r1, r1, #31
 8011a28:	290b      	cmp	r1, #11
 8011a2a:	d10b      	bne.n	8011a44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8011a2c:	8919      	ldrh	r1, [r3, #8]
 8011a2e:	8958      	ldrh	r0, [r3, #10]
 8011a30:	4b07      	ldr	r3, [pc, #28]	; (8011a50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8011a32:	4348      	muls	r0, r1
 8011a34:	6819      	ldr	r1, [r3, #0]
 8011a36:	3003      	adds	r0, #3
 8011a38:	f020 0303 	bic.w	r3, r0, #3
 8011a3c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8011a40:	4418      	add	r0, r3
 8011a42:	4770      	bx	lr
 8011a44:	2000      	movs	r0, #0
 8011a46:	4770      	bx	lr
 8011a48:	2002ee6c 	.word	0x2002ee6c
 8011a4c:	2002ee74 	.word	0x2002ee74
 8011a50:	2002ee50 	.word	0x2002ee50
 8011a54:	2002ee70 	.word	0x2002ee70
 8011a58:	2002ee54 	.word	0x2002ee54

08011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8011a5c:	4b19      	ldr	r3, [pc, #100]	; (8011ac4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8011a5e:	6819      	ldr	r1, [r3, #0]
 8011a60:	8803      	ldrh	r3, [r0, #0]
 8011a62:	b1e9      	cbz	r1, 8011aa0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8011a64:	4a18      	ldr	r2, [pc, #96]	; (8011ac8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8011a66:	8812      	ldrh	r2, [r2, #0]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d90a      	bls.n	8011a82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8011a6c:	2214      	movs	r2, #20
 8011a6e:	fb02 1303 	mla	r3, r2, r3, r1
 8011a72:	7c58      	ldrb	r0, [r3, #17]
 8011a74:	0942      	lsrs	r2, r0, #5
 8011a76:	7cd8      	ldrb	r0, [r3, #19]
 8011a78:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8011a7c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8011a80:	4770      	bx	lr
 8011a82:	4912      	ldr	r1, [pc, #72]	; (8011acc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8011a84:	8809      	ldrh	r1, [r1, #0]
 8011a86:	4411      	add	r1, r2
 8011a88:	428b      	cmp	r3, r1
 8011a8a:	da09      	bge.n	8011aa0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8011a8c:	1a9b      	subs	r3, r3, r2
 8011a8e:	4a10      	ldr	r2, [pc, #64]	; (8011ad0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8011a90:	6812      	ldr	r2, [r2, #0]
 8011a92:	210e      	movs	r1, #14
 8011a94:	fb01 2303 	mla	r3, r1, r3, r2
 8011a98:	7b18      	ldrb	r0, [r3, #12]
 8011a9a:	f000 001f 	and.w	r0, r0, #31
 8011a9e:	4770      	bx	lr
 8011aa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d10a      	bne.n	8011abe <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	; (8011ad4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011ab0:	b10a      	cbz	r2, 8011ab6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8011ab2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011ab4:	b900      	cbnz	r0, 8011ab8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8011ab6:	6898      	ldr	r0, [r3, #8]
 8011ab8:	6803      	ldr	r3, [r0, #0]
 8011aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011abc:	4718      	bx	r3
 8011abe:	2000      	movs	r0, #0
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop
 8011ac4:	2002ee74 	.word	0x2002ee74
 8011ac8:	2002ee6c 	.word	0x2002ee6c
 8011acc:	2002ee70 	.word	0x2002ee70
 8011ad0:	2002ee54 	.word	0x2002ee54
 8011ad4:	2002edcc 	.word	0x2002edcc

08011ad8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8011ad8:	2010      	movs	r0, #16
 8011ada:	4770      	bx	lr

08011adc <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8011adc:	2000      	movs	r0, #0
 8011ade:	4770      	bx	lr

08011ae0 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8011ae0:	00d2      	lsls	r2, r2, #3
 8011ae2:	0209      	lsls	r1, r1, #8
 8011ae4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8011ae8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8011aec:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8011af0:	4310      	orrs	r0, r2
 8011af2:	4770      	bx	lr

08011af4 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8011af4:	1209      	asrs	r1, r1, #8
 8011af6:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8011afa:	4770      	bx	lr

08011afc <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8011afc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8011b00:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8011b04:	4770      	bx	lr

08011b06 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8011b06:	00c9      	lsls	r1, r1, #3
 8011b08:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8011b0c:	4770      	bx	lr

08011b0e <_ZN8touchgfx8LCD16bpp4initEv>:
 8011b0e:	4770      	bx	lr

08011b10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011b10:	2bff      	cmp	r3, #255	; 0xff
 8011b12:	d050      	beq.n	8011bb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8011b14:	2a0b      	cmp	r2, #11
 8011b16:	d04a      	beq.n	8011bae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8011b18:	d80e      	bhi.n	8011b38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8011b1a:	2a03      	cmp	r2, #3
 8011b1c:	d03f      	beq.n	8011b9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8011b1e:	d804      	bhi.n	8011b2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8011b20:	2a01      	cmp	r2, #1
 8011b22:	d03e      	beq.n	8011ba2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8011b24:	d93f      	bls.n	8011ba6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8011b26:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8011b28:	4770      	bx	lr
 8011b2a:	2a09      	cmp	r2, #9
 8011b2c:	d03f      	beq.n	8011bae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8011b2e:	d83c      	bhi.n	8011baa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8011b30:	2a08      	cmp	r2, #8
 8011b32:	d03a      	beq.n	8011baa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8011b34:	2000      	movs	r0, #0
 8011b36:	4770      	bx	lr
 8011b38:	2a2f      	cmp	r2, #47	; 0x2f
 8011b3a:	d024      	beq.n	8011b86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011b3c:	d80d      	bhi.n	8011b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8011b3e:	2a2d      	cmp	r2, #45	; 0x2d
 8011b40:	d014      	beq.n	8011b6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8011b42:	d826      	bhi.n	8011b92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8011b44:	2a2c      	cmp	r2, #44	; 0x2c
 8011b46:	d1f5      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011b48:	684b      	ldr	r3, [r1, #4]
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d018      	beq.n	8011b82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8011b50:	d323      	bcc.n	8011b9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8011b52:	2b02      	cmp	r3, #2
 8011b54:	d1ee      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011b56:	6880      	ldr	r0, [r0, #8]
 8011b58:	4770      	bx	lr
 8011b5a:	2a31      	cmp	r2, #49	; 0x31
 8011b5c:	d004      	beq.n	8011b68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8011b5e:	d328      	bcc.n	8011bb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8011b60:	2a32      	cmp	r2, #50	; 0x32
 8011b62:	d026      	beq.n	8011bb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8011b64:	2a33      	cmp	r2, #51	; 0x33
 8011b66:	d1e5      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011b68:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8011b6a:	4770      	bx	lr
 8011b6c:	684b      	ldr	r3, [r1, #4]
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d004      	beq.n	8011b7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8011b74:	d30b      	bcc.n	8011b8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011b76:	2b02      	cmp	r3, #2
 8011b78:	d1dc      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011b7a:	6900      	ldr	r0, [r0, #16]
 8011b7c:	4770      	bx	lr
 8011b7e:	6a00      	ldr	r0, [r0, #32]
 8011b80:	4770      	bx	lr
 8011b82:	6980      	ldr	r0, [r0, #24]
 8011b84:	4770      	bx	lr
 8011b86:	684b      	ldr	r3, [r1, #4]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d1d2      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011b8e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011b90:	4770      	bx	lr
 8011b92:	684b      	ldr	r3, [r1, #4]
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d1cc      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011b9a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011b9c:	4770      	bx	lr
 8011b9e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8011ba0:	4770      	bx	lr
 8011ba2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8011ba4:	4770      	bx	lr
 8011ba6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8011ba8:	4770      	bx	lr
 8011baa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8011bac:	4770      	bx	lr
 8011bae:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8011bb0:	4770      	bx	lr
 8011bb2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8011bb4:	4770      	bx	lr
 8011bb6:	2a0b      	cmp	r2, #11
 8011bb8:	d049      	beq.n	8011c4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8011bba:	d80e      	bhi.n	8011bda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8011bbc:	2a03      	cmp	r2, #3
 8011bbe:	d040      	beq.n	8011c42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8011bc0:	d804      	bhi.n	8011bcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8011bc2:	2a01      	cmp	r2, #1
 8011bc4:	d03f      	beq.n	8011c46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8011bc6:	d940      	bls.n	8011c4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8011bc8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8011bca:	4770      	bx	lr
 8011bcc:	2a09      	cmp	r2, #9
 8011bce:	d03e      	beq.n	8011c4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8011bd0:	d801      	bhi.n	8011bd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8011bd2:	2a08      	cmp	r2, #8
 8011bd4:	d1ae      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011bd6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8011bd8:	4770      	bx	lr
 8011bda:	2a2f      	cmp	r2, #47	; 0x2f
 8011bdc:	d024      	beq.n	8011c28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8011bde:	d80d      	bhi.n	8011bfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8011be0:	2a2d      	cmp	r2, #45	; 0x2d
 8011be2:	d014      	beq.n	8011c0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8011be4:	d826      	bhi.n	8011c34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8011be6:	2a2c      	cmp	r2, #44	; 0x2c
 8011be8:	d1a4      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011bea:	684b      	ldr	r3, [r1, #4]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d018      	beq.n	8011c24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8011bf2:	d324      	bcc.n	8011c3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	d19d      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011bf8:	68c0      	ldr	r0, [r0, #12]
 8011bfa:	4770      	bx	lr
 8011bfc:	2a31      	cmp	r2, #49	; 0x31
 8011bfe:	d004      	beq.n	8011c0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8011c00:	d327      	bcc.n	8011c52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8011c02:	2a32      	cmp	r2, #50	; 0x32
 8011c04:	d025      	beq.n	8011c52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8011c06:	2a33      	cmp	r2, #51	; 0x33
 8011c08:	d194      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011c0a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8011c0c:	4770      	bx	lr
 8011c0e:	684b      	ldr	r3, [r1, #4]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d004      	beq.n	8011c20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8011c16:	d30b      	bcc.n	8011c30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8011c18:	2b02      	cmp	r3, #2
 8011c1a:	d18b      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011c1c:	6940      	ldr	r0, [r0, #20]
 8011c1e:	4770      	bx	lr
 8011c20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011c22:	4770      	bx	lr
 8011c24:	69c0      	ldr	r0, [r0, #28]
 8011c26:	4770      	bx	lr
 8011c28:	684b      	ldr	r3, [r1, #4]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d181      	bne.n	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011c30:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8011c32:	4770      	bx	lr
 8011c34:	684b      	ldr	r3, [r1, #4]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	f47f af7b 	bne.w	8011b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011c3e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8011c40:	4770      	bx	lr
 8011c42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011c44:	4770      	bx	lr
 8011c46:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8011c48:	4770      	bx	lr
 8011c4a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8011c4c:	4770      	bx	lr
 8011c4e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8011c50:	4770      	bx	lr
 8011c52:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8011c54:	4770      	bx	lr

08011c56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5a:	b087      	sub	sp, #28
 8011c5c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011c5e:	9205      	str	r2, [sp, #20]
 8011c60:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8011c64:	9202      	str	r2, [sp, #8]
 8011c66:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011c6a:	9101      	str	r1, [sp, #4]
 8011c6c:	6871      	ldr	r1, [r6, #4]
 8011c6e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011c70:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8011c74:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8011c78:	fb01 2505 	mla	r5, r1, r5, r2
 8011c7c:	6832      	ldr	r2, [r6, #0]
 8011c7e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8011c82:	6802      	ldr	r2, [r0, #0]
 8011c84:	9203      	str	r2, [sp, #12]
 8011c86:	6842      	ldr	r2, [r0, #4]
 8011c88:	fa1f fe84 	uxth.w	lr, r4
 8011c8c:	3204      	adds	r2, #4
 8011c8e:	43e4      	mvns	r4, r4
 8011c90:	9204      	str	r2, [sp, #16]
 8011c92:	b2e4      	uxtb	r4, r4
 8011c94:	9a01      	ldr	r2, [sp, #4]
 8011c96:	2a00      	cmp	r2, #0
 8011c98:	dc03      	bgt.n	8011ca2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8011c9a:	9a05      	ldr	r2, [sp, #20]
 8011c9c:	2a00      	cmp	r2, #0
 8011c9e:	f340 8119 	ble.w	8011ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8011ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ca4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8011ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011caa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	dd0f      	ble.n	8011cd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8011cb2:	1408      	asrs	r0, r1, #16
 8011cb4:	d406      	bmi.n	8011cc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011cb6:	4540      	cmp	r0, r8
 8011cb8:	da04      	bge.n	8011cc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011cba:	1410      	asrs	r0, r2, #16
 8011cbc:	d402      	bmi.n	8011cc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8011cbe:	9e02      	ldr	r6, [sp, #8]
 8011cc0:	42b0      	cmp	r0, r6
 8011cc2:	db07      	blt.n	8011cd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8011cc4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011cc6:	4401      	add	r1, r0
 8011cc8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	4402      	add	r2, r0
 8011cce:	3502      	adds	r5, #2
 8011cd0:	e7ed      	b.n	8011cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8011cd2:	d00f      	beq.n	8011cf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8011cd4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011cd6:	1e58      	subs	r0, r3, #1
 8011cd8:	fb06 1600 	mla	r6, r6, r0, r1
 8011cdc:	1436      	asrs	r6, r6, #16
 8011cde:	d547      	bpl.n	8011d70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8011ce0:	469b      	mov	fp, r3
 8011ce2:	46aa      	mov	sl, r5
 8011ce4:	f1bb 0f00 	cmp.w	fp, #0
 8011ce8:	f300 809e 	bgt.w	8011e28 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8011cec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011cf0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8011cf4:	9b01      	ldr	r3, [sp, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f340 80ec 	ble.w	8011ed4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8011cfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011d04:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011d0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011d12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011d16:	eef0 6a62 	vmov.f32	s13, s5
 8011d1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011d1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011d22:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011d26:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8011d2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011d2e:	eef0 6a43 	vmov.f32	s13, s6
 8011d32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011d36:	ee12 2a90 	vmov	r2, s5
 8011d3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011d3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d42:	ee13 2a10 	vmov	r2, s6
 8011d46:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8011d50:	9b01      	ldr	r3, [sp, #4]
 8011d52:	9a05      	ldr	r2, [sp, #20]
 8011d54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011d58:	3b01      	subs	r3, #1
 8011d5a:	9301      	str	r3, [sp, #4]
 8011d5c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8011d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d62:	eeb0 3a67 	vmov.f32	s6, s15
 8011d66:	bf08      	it	eq
 8011d68:	4613      	moveq	r3, r2
 8011d6a:	eef0 2a47 	vmov.f32	s5, s14
 8011d6e:	e791      	b.n	8011c94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8011d70:	4546      	cmp	r6, r8
 8011d72:	dab5      	bge.n	8011ce0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8011d74:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011d76:	fb06 2000 	mla	r0, r6, r0, r2
 8011d7a:	1400      	asrs	r0, r0, #16
 8011d7c:	d4b0      	bmi.n	8011ce0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8011d7e:	9e02      	ldr	r6, [sp, #8]
 8011d80:	42b0      	cmp	r0, r6
 8011d82:	daad      	bge.n	8011ce0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8011d84:	469a      	mov	sl, r3
 8011d86:	46ab      	mov	fp, r5
 8011d88:	f1ba 0f00 	cmp.w	sl, #0
 8011d8c:	ddae      	ble.n	8011cec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8011d8e:	9f03      	ldr	r7, [sp, #12]
 8011d90:	1410      	asrs	r0, r2, #16
 8011d92:	140e      	asrs	r6, r1, #16
 8011d94:	fb08 7000 	mla	r0, r8, r0, r7
 8011d98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d9c:	5d80      	ldrb	r0, [r0, r6]
 8011d9e:	9e04      	ldr	r6, [sp, #16]
 8011da0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8011da4:	f8bb 6000 	ldrh.w	r6, [fp]
 8011da8:	1237      	asrs	r7, r6, #8
 8011daa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8011dae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011db2:	fb17 f704 	smulbb	r7, r7, r4
 8011db6:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8011dba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8011dbe:	00f6      	lsls	r6, r6, #3
 8011dc0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8011dc4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8011dc8:	10c7      	asrs	r7, r0, #3
 8011dca:	b2f6      	uxtb	r6, r6
 8011dcc:	00c0      	lsls	r0, r0, #3
 8011dce:	fb19 f904 	smulbb	r9, r9, r4
 8011dd2:	fb16 f604 	smulbb	r6, r6, r4
 8011dd6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8011dda:	b2c0      	uxtb	r0, r0
 8011ddc:	fa1f fc8c 	uxth.w	ip, ip
 8011de0:	fb07 970e 	mla	r7, r7, lr, r9
 8011de4:	fb00 600e 	mla	r0, r0, lr, r6
 8011de8:	b280      	uxth	r0, r0
 8011dea:	b2bf      	uxth	r7, r7
 8011dec:	f10c 0601 	add.w	r6, ip, #1
 8011df0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8011df4:	f107 0901 	add.w	r9, r7, #1
 8011df8:	1c46      	adds	r6, r0, #1
 8011dfa:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8011dfe:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8011e02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011e04:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011e08:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8011e0c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011e10:	ea4c 0c06 	orr.w	ip, ip, r6
 8011e14:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8011e18:	4401      	add	r1, r0
 8011e1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011e1c:	ea4c 0c09 	orr.w	ip, ip, r9
 8011e20:	f82b cb02 	strh.w	ip, [fp], #2
 8011e24:	4402      	add	r2, r0
 8011e26:	e7af      	b.n	8011d88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8011e28:	140e      	asrs	r6, r1, #16
 8011e2a:	d44a      	bmi.n	8011ec2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8011e2c:	4546      	cmp	r6, r8
 8011e2e:	da48      	bge.n	8011ec2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8011e30:	1410      	asrs	r0, r2, #16
 8011e32:	d446      	bmi.n	8011ec2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8011e34:	9f02      	ldr	r7, [sp, #8]
 8011e36:	42b8      	cmp	r0, r7
 8011e38:	da43      	bge.n	8011ec2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8011e3a:	9f03      	ldr	r7, [sp, #12]
 8011e3c:	fb08 7000 	mla	r0, r8, r0, r7
 8011e40:	5d80      	ldrb	r0, [r0, r6]
 8011e42:	9e04      	ldr	r6, [sp, #16]
 8011e44:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8011e48:	f8ba 6000 	ldrh.w	r6, [sl]
 8011e4c:	1237      	asrs	r7, r6, #8
 8011e4e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8011e52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011e56:	fb17 f704 	smulbb	r7, r7, r4
 8011e5a:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8011e5e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8011e62:	00f6      	lsls	r6, r6, #3
 8011e64:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8011e68:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8011e6c:	10c7      	asrs	r7, r0, #3
 8011e6e:	b2f6      	uxtb	r6, r6
 8011e70:	00c0      	lsls	r0, r0, #3
 8011e72:	fb19 f904 	smulbb	r9, r9, r4
 8011e76:	fb16 f604 	smulbb	r6, r6, r4
 8011e7a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8011e7e:	b2c0      	uxtb	r0, r0
 8011e80:	fa1f fc8c 	uxth.w	ip, ip
 8011e84:	fb07 970e 	mla	r7, r7, lr, r9
 8011e88:	fb00 600e 	mla	r0, r0, lr, r6
 8011e8c:	b2bf      	uxth	r7, r7
 8011e8e:	b280      	uxth	r0, r0
 8011e90:	f10c 0601 	add.w	r6, ip, #1
 8011e94:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8011e98:	f107 0901 	add.w	r9, r7, #1
 8011e9c:	1c46      	adds	r6, r0, #1
 8011e9e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8011ea2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8011ea6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011eaa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8011eae:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011eb2:	ea4c 0c06 	orr.w	ip, ip, r6
 8011eb6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8011eba:	ea4c 0c09 	orr.w	ip, ip, r9
 8011ebe:	f8aa c000 	strh.w	ip, [sl]
 8011ec2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011ec4:	4401      	add	r1, r0
 8011ec6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011ec8:	f10a 0a02 	add.w	sl, sl, #2
 8011ecc:	4402      	add	r2, r0
 8011ece:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ed2:	e707      	b.n	8011ce4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8011ed4:	b007      	add	sp, #28
 8011ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011eda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8011eda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ede:	b085      	sub	sp, #20
 8011ee0:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8011ee4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011ee6:	9203      	str	r2, [sp, #12]
 8011ee8:	6842      	ldr	r2, [r0, #4]
 8011eea:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011eec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8011eee:	6800      	ldr	r0, [r0, #0]
 8011ef0:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8011ef4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8011ef8:	4696      	mov	lr, r2
 8011efa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011efc:	fb0e 2505 	mla	r5, lr, r5, r2
 8011f00:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011f04:	6860      	ldr	r0, [r4, #4]
 8011f06:	6822      	ldr	r2, [r4, #0]
 8011f08:	9201      	str	r2, [sp, #4]
 8011f0a:	1d02      	adds	r2, r0, #4
 8011f0c:	9202      	str	r2, [sp, #8]
 8011f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f12:	2900      	cmp	r1, #0
 8011f14:	dc03      	bgt.n	8011f1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8011f16:	9a03      	ldr	r2, [sp, #12]
 8011f18:	2a00      	cmp	r2, #0
 8011f1a:	f340 809b 	ble.w	8012054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8011f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f20:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f26:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	dd0e      	ble.n	8011f4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8011f2e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8011f32:	d406      	bmi.n	8011f42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8011f34:	45e6      	cmp	lr, ip
 8011f36:	da04      	bge.n	8011f42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8011f38:	ea5f 4e20 	movs.w	lr, r0, asr #16
 8011f3c:	d401      	bmi.n	8011f42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8011f3e:	45c6      	cmp	lr, r8
 8011f40:	db05      	blt.n	8011f4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8011f42:	443c      	add	r4, r7
 8011f44:	4430      	add	r0, r6
 8011f46:	3b01      	subs	r3, #1
 8011f48:	3502      	adds	r5, #2
 8011f4a:	e7ee      	b.n	8011f2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8011f4c:	d010      	beq.n	8011f70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8011f4e:	f103 3eff 	add.w	lr, r3, #4294967295
 8011f52:	fb07 490e 	mla	r9, r7, lr, r4
 8011f56:	ea5f 4929 	movs.w	r9, r9, asr #16
 8011f5a:	d53d      	bpl.n	8011fd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8011f5c:	469e      	mov	lr, r3
 8011f5e:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8011f62:	f1be 0f00 	cmp.w	lr, #0
 8011f66:	dc58      	bgt.n	801201a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8011f68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f6c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8011f70:	2900      	cmp	r1, #0
 8011f72:	dd6f      	ble.n	8012054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8011f74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011f78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011f7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f82:	3901      	subs	r1, #1
 8011f84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011f88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011f8c:	eeb0 6a62 	vmov.f32	s12, s5
 8011f90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011f94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011f98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011f9c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011fa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011fa4:	eeb0 6a43 	vmov.f32	s12, s6
 8011fa8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011fac:	ee12 2a90 	vmov	r2, s5
 8011fb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011fb4:	fb92 f7f3 	sdiv	r7, r2, r3
 8011fb8:	ee13 2a10 	vmov	r2, s6
 8011fbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011fc0:	fb92 f6f3 	sdiv	r6, r2, r3
 8011fc4:	9a03      	ldr	r2, [sp, #12]
 8011fc6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011fca:	bf08      	it	eq
 8011fcc:	4613      	moveq	r3, r2
 8011fce:	eeb0 3a67 	vmov.f32	s6, s15
 8011fd2:	eef0 2a47 	vmov.f32	s5, s14
 8011fd6:	e79c      	b.n	8011f12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8011fd8:	45e1      	cmp	r9, ip
 8011fda:	dabf      	bge.n	8011f5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8011fdc:	fb06 0e0e 	mla	lr, r6, lr, r0
 8011fe0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8011fe4:	d4ba      	bmi.n	8011f5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8011fe6:	45c6      	cmp	lr, r8
 8011fe8:	dab8      	bge.n	8011f5c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8011fea:	469e      	mov	lr, r3
 8011fec:	46aa      	mov	sl, r5
 8011fee:	f1be 0f00 	cmp.w	lr, #0
 8011ff2:	ddb9      	ble.n	8011f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8011ff4:	9a01      	ldr	r2, [sp, #4]
 8011ff6:	ea4f 4920 	mov.w	r9, r0, asr #16
 8011ffa:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8011ffe:	fb0c 2909 	mla	r9, ip, r9, r2
 8012002:	9a02      	ldr	r2, [sp, #8]
 8012004:	f819 900b 	ldrb.w	r9, [r9, fp]
 8012008:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 801200c:	f82a 9b02 	strh.w	r9, [sl], #2
 8012010:	443c      	add	r4, r7
 8012012:	4430      	add	r0, r6
 8012014:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012018:	e7e9      	b.n	8011fee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801201a:	ea5f 4a24 	movs.w	sl, r4, asr #16
 801201e:	d414      	bmi.n	801204a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8012020:	45e2      	cmp	sl, ip
 8012022:	da12      	bge.n	801204a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8012024:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012028:	d40f      	bmi.n	801204a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801202a:	45c1      	cmp	r9, r8
 801202c:	da0d      	bge.n	801204a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801202e:	9a01      	ldr	r2, [sp, #4]
 8012030:	fb0c 2909 	mla	r9, ip, r9, r2
 8012034:	9a02      	ldr	r2, [sp, #8]
 8012036:	f819 900a 	ldrb.w	r9, [r9, sl]
 801203a:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 801203e:	f06f 0201 	mvn.w	r2, #1
 8012042:	fb02 f90e 	mul.w	r9, r2, lr
 8012046:	f82b a009 	strh.w	sl, [fp, r9]
 801204a:	443c      	add	r4, r7
 801204c:	4430      	add	r0, r6
 801204e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012052:	e786      	b.n	8011f62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8012054:	b005      	add	sp, #20
 8012056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801205a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801205a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205e:	b087      	sub	sp, #28
 8012060:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012062:	9205      	str	r2, [sp, #20]
 8012064:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012068:	9202      	str	r2, [sp, #8]
 801206a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801206e:	9101      	str	r1, [sp, #4]
 8012070:	6871      	ldr	r1, [r6, #4]
 8012072:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8012074:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8012078:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801207c:	fb01 2404 	mla	r4, r1, r4, r2
 8012080:	6832      	ldr	r2, [r6, #0]
 8012082:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012086:	682a      	ldr	r2, [r5, #0]
 8012088:	9203      	str	r2, [sp, #12]
 801208a:	686a      	ldr	r2, [r5, #4]
 801208c:	fa1f fc80 	uxth.w	ip, r0
 8012090:	3204      	adds	r2, #4
 8012092:	43c0      	mvns	r0, r0
 8012094:	9200      	str	r2, [sp, #0]
 8012096:	b2c0      	uxtb	r0, r0
 8012098:	9a01      	ldr	r2, [sp, #4]
 801209a:	2a00      	cmp	r2, #0
 801209c:	dc03      	bgt.n	80120a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801209e:	9a05      	ldr	r2, [sp, #20]
 80120a0:	2a00      	cmp	r2, #0
 80120a2:	f340 811b 	ble.w	80122dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80120a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80120a8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80120ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80120ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	dd0f      	ble.n	80120d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80120b6:	140d      	asrs	r5, r1, #16
 80120b8:	d406      	bmi.n	80120c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80120ba:	4575      	cmp	r5, lr
 80120bc:	da04      	bge.n	80120c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80120be:	1415      	asrs	r5, r2, #16
 80120c0:	d402      	bmi.n	80120c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80120c2:	9e02      	ldr	r6, [sp, #8]
 80120c4:	42b5      	cmp	r5, r6
 80120c6:	db07      	blt.n	80120d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80120c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80120ca:	4429      	add	r1, r5
 80120cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80120ce:	3b01      	subs	r3, #1
 80120d0:	442a      	add	r2, r5
 80120d2:	3402      	adds	r4, #2
 80120d4:	e7ed      	b.n	80120b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 80120d6:	d00f      	beq.n	80120f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80120d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80120da:	1e5d      	subs	r5, r3, #1
 80120dc:	fb06 1605 	mla	r6, r6, r5, r1
 80120e0:	1436      	asrs	r6, r6, #16
 80120e2:	d547      	bpl.n	8012174 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 80120e4:	469a      	mov	sl, r3
 80120e6:	46a1      	mov	r9, r4
 80120e8:	f1ba 0f00 	cmp.w	sl, #0
 80120ec:	f300 809f 	bgt.w	801222e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 80120f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80120f8:	9b01      	ldr	r3, [sp, #4]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f340 80ee 	ble.w	80122dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8012100:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012108:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801210c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801210e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012112:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012116:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801211a:	eef0 6a62 	vmov.f32	s13, s5
 801211e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012122:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012126:	ee77 2a62 	vsub.f32	s5, s14, s5
 801212a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801212e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012132:	eef0 6a43 	vmov.f32	s13, s6
 8012136:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801213a:	ee12 2a90 	vmov	r2, s5
 801213e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012142:	fb92 f3f3 	sdiv	r3, r2, r3
 8012146:	ee13 2a10 	vmov	r2, s6
 801214a:	9313      	str	r3, [sp, #76]	; 0x4c
 801214c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801214e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012152:	9314      	str	r3, [sp, #80]	; 0x50
 8012154:	9b01      	ldr	r3, [sp, #4]
 8012156:	9a05      	ldr	r2, [sp, #20]
 8012158:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801215c:	3b01      	subs	r3, #1
 801215e:	9301      	str	r3, [sp, #4]
 8012160:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8012164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012166:	eeb0 3a67 	vmov.f32	s6, s15
 801216a:	bf08      	it	eq
 801216c:	4613      	moveq	r3, r2
 801216e:	eef0 2a47 	vmov.f32	s5, s14
 8012172:	e791      	b.n	8012098 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8012174:	4576      	cmp	r6, lr
 8012176:	dab5      	bge.n	80120e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012178:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801217a:	fb06 2505 	mla	r5, r6, r5, r2
 801217e:	142d      	asrs	r5, r5, #16
 8012180:	d4b0      	bmi.n	80120e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012182:	9e02      	ldr	r6, [sp, #8]
 8012184:	42b5      	cmp	r5, r6
 8012186:	daad      	bge.n	80120e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012188:	4699      	mov	r9, r3
 801218a:	46a2      	mov	sl, r4
 801218c:	f1b9 0f00 	cmp.w	r9, #0
 8012190:	ddae      	ble.n	80120f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8012192:	9f03      	ldr	r7, [sp, #12]
 8012194:	1415      	asrs	r5, r2, #16
 8012196:	140e      	asrs	r6, r1, #16
 8012198:	fb0e 7505 	mla	r5, lr, r5, r7
 801219c:	f109 39ff 	add.w	r9, r9, #4294967295
 80121a0:	f815 8006 	ldrb.w	r8, [r5, r6]
 80121a4:	9d00      	ldr	r5, [sp, #0]
 80121a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80121aa:	eb05 0b08 	add.w	fp, r5, r8
 80121ae:	f8ba 5000 	ldrh.w	r5, [sl]
 80121b2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80121b6:	f89b b001 	ldrb.w	fp, [fp, #1]
 80121ba:	122f      	asrs	r7, r5, #8
 80121bc:	fb16 f60c 	smulbb	r6, r6, ip
 80121c0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80121c4:	fb07 6700 	mla	r7, r7, r0, r6
 80121c8:	10ee      	asrs	r6, r5, #3
 80121ca:	fb1b fb0c 	smulbb	fp, fp, ip
 80121ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80121d2:	fb06 b600 	mla	r6, r6, r0, fp
 80121d6:	b2b6      	uxth	r6, r6
 80121d8:	9604      	str	r6, [sp, #16]
 80121da:	9e00      	ldr	r6, [sp, #0]
 80121dc:	00ed      	lsls	r5, r5, #3
 80121de:	f816 8008 	ldrb.w	r8, [r6, r8]
 80121e2:	b2ed      	uxtb	r5, r5
 80121e4:	fb15 f500 	smulbb	r5, r5, r0
 80121e8:	b2bf      	uxth	r7, r7
 80121ea:	fb08 580c 	mla	r8, r8, ip, r5
 80121ee:	fa1f f888 	uxth.w	r8, r8
 80121f2:	1c7d      	adds	r5, r7, #1
 80121f4:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80121f8:	f108 0501 	add.w	r5, r8, #1
 80121fc:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8012200:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8012204:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012208:	432f      	orrs	r7, r5
 801220a:	9d04      	ldr	r5, [sp, #16]
 801220c:	f105 0b01 	add.w	fp, r5, #1
 8012210:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8012214:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012216:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801221a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801221e:	4429      	add	r1, r5
 8012220:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012222:	ea47 070b 	orr.w	r7, r7, fp
 8012226:	f82a 7b02 	strh.w	r7, [sl], #2
 801222a:	442a      	add	r2, r5
 801222c:	e7ae      	b.n	801218c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801222e:	140e      	asrs	r6, r1, #16
 8012230:	d44b      	bmi.n	80122ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8012232:	4576      	cmp	r6, lr
 8012234:	da49      	bge.n	80122ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8012236:	1415      	asrs	r5, r2, #16
 8012238:	d447      	bmi.n	80122ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801223a:	9f02      	ldr	r7, [sp, #8]
 801223c:	42bd      	cmp	r5, r7
 801223e:	da44      	bge.n	80122ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8012240:	9f03      	ldr	r7, [sp, #12]
 8012242:	fb0e 7505 	mla	r5, lr, r5, r7
 8012246:	f815 8006 	ldrb.w	r8, [r5, r6]
 801224a:	9d00      	ldr	r5, [sp, #0]
 801224c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8012250:	eb05 0b08 	add.w	fp, r5, r8
 8012254:	f8b9 5000 	ldrh.w	r5, [r9]
 8012258:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801225c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8012260:	122f      	asrs	r7, r5, #8
 8012262:	fb16 f60c 	smulbb	r6, r6, ip
 8012266:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801226a:	fb07 6700 	mla	r7, r7, r0, r6
 801226e:	10ee      	asrs	r6, r5, #3
 8012270:	fb1b fb0c 	smulbb	fp, fp, ip
 8012274:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012278:	fb06 b600 	mla	r6, r6, r0, fp
 801227c:	b2b6      	uxth	r6, r6
 801227e:	9604      	str	r6, [sp, #16]
 8012280:	9e00      	ldr	r6, [sp, #0]
 8012282:	00ed      	lsls	r5, r5, #3
 8012284:	f816 8008 	ldrb.w	r8, [r6, r8]
 8012288:	b2ed      	uxtb	r5, r5
 801228a:	fb15 f500 	smulbb	r5, r5, r0
 801228e:	b2bf      	uxth	r7, r7
 8012290:	fb08 580c 	mla	r8, r8, ip, r5
 8012294:	fa1f f888 	uxth.w	r8, r8
 8012298:	1c7d      	adds	r5, r7, #1
 801229a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801229e:	f108 0501 	add.w	r5, r8, #1
 80122a2:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 80122a6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80122aa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80122ae:	432f      	orrs	r7, r5
 80122b0:	9d04      	ldr	r5, [sp, #16]
 80122b2:	f105 0b01 	add.w	fp, r5, #1
 80122b6:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80122ba:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80122be:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80122c2:	ea47 070b 	orr.w	r7, r7, fp
 80122c6:	f8a9 7000 	strh.w	r7, [r9]
 80122ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80122cc:	4429      	add	r1, r5
 80122ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80122d0:	f109 0902 	add.w	r9, r9, #2
 80122d4:	442a      	add	r2, r5
 80122d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80122da:	e705      	b.n	80120e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80122dc:	b007      	add	sp, #28
 80122de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080122e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80122e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e8:	b085      	sub	sp, #20
 80122ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80122f0:	9203      	str	r2, [sp, #12]
 80122f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80122f6:	6870      	ldr	r0, [r6, #4]
 80122f8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80122fa:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 80122fe:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8012302:	9101      	str	r1, [sp, #4]
 8012304:	fb00 2404 	mla	r4, r0, r4, r2
 8012308:	6832      	ldr	r2, [r6, #0]
 801230a:	686e      	ldr	r6, [r5, #4]
 801230c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012310:	682a      	ldr	r2, [r5, #0]
 8012312:	9202      	str	r2, [sp, #8]
 8012314:	3604      	adds	r6, #4
 8012316:	9a01      	ldr	r2, [sp, #4]
 8012318:	2a00      	cmp	r2, #0
 801231a:	dc03      	bgt.n	8012324 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801231c:	9a03      	ldr	r2, [sp, #12]
 801231e:	2a00      	cmp	r2, #0
 8012320:	f340 80c7 	ble.w	80124b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8012324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012326:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801232a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801232c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012330:	2b00      	cmp	r3, #0
 8012332:	dd0e      	ble.n	8012352 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012334:	1405      	asrs	r5, r0, #16
 8012336:	d405      	bmi.n	8012344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8012338:	42bd      	cmp	r5, r7
 801233a:	da03      	bge.n	8012344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801233c:	1415      	asrs	r5, r2, #16
 801233e:	d401      	bmi.n	8012344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8012340:	4545      	cmp	r5, r8
 8012342:	db07      	blt.n	8012354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8012344:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012346:	4428      	add	r0, r5
 8012348:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801234a:	3b01      	subs	r3, #1
 801234c:	442a      	add	r2, r5
 801234e:	3402      	adds	r4, #2
 8012350:	e7ee      	b.n	8012330 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8012352:	d010      	beq.n	8012376 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8012354:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012356:	1e5d      	subs	r5, r3, #1
 8012358:	fb01 0c05 	mla	ip, r1, r5, r0
 801235c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8012360:	d545      	bpl.n	80123ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8012362:	469e      	mov	lr, r3
 8012364:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 8012368:	f1be 0f00 	cmp.w	lr, #0
 801236c:	dc72      	bgt.n	8012454 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801236e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012372:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012376:	9b01      	ldr	r3, [sp, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	f340 809a 	ble.w	80124b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 801237e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012386:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801238a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801238c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012390:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012394:	eeb0 6a62 	vmov.f32	s12, s5
 8012398:	ee61 7a27 	vmul.f32	s15, s2, s15
 801239c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80123a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80123a4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80123a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80123ac:	eeb0 6a43 	vmov.f32	s12, s6
 80123b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80123b4:	ee12 2a90 	vmov	r2, s5
 80123b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80123bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80123c0:	ee13 2a10 	vmov	r2, s6
 80123c4:	9311      	str	r3, [sp, #68]	; 0x44
 80123c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80123cc:	9312      	str	r3, [sp, #72]	; 0x48
 80123ce:	9b01      	ldr	r3, [sp, #4]
 80123d0:	9a03      	ldr	r2, [sp, #12]
 80123d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80123d6:	3b01      	subs	r3, #1
 80123d8:	9301      	str	r3, [sp, #4]
 80123da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80123de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123e0:	eeb0 3a67 	vmov.f32	s6, s15
 80123e4:	bf08      	it	eq
 80123e6:	4613      	moveq	r3, r2
 80123e8:	eef0 2a47 	vmov.f32	s5, s14
 80123ec:	e793      	b.n	8012316 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 80123ee:	45bc      	cmp	ip, r7
 80123f0:	dab7      	bge.n	8012362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80123f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80123f4:	fb01 2505 	mla	r5, r1, r5, r2
 80123f8:	142d      	asrs	r5, r5, #16
 80123fa:	d4b2      	bmi.n	8012362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80123fc:	4545      	cmp	r5, r8
 80123fe:	dab0      	bge.n	8012362 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012400:	469e      	mov	lr, r3
 8012402:	46a2      	mov	sl, r4
 8012404:	f1be 0f00 	cmp.w	lr, #0
 8012408:	ddb1      	ble.n	801236e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801240a:	9902      	ldr	r1, [sp, #8]
 801240c:	1415      	asrs	r5, r2, #16
 801240e:	fb07 1505 	mla	r5, r7, r5, r1
 8012412:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012416:	4928      	ldr	r1, [pc, #160]	; (80124b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 8012418:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801241c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012420:	eb06 0b0c 	add.w	fp, r6, ip
 8012424:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012428:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801242c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8012430:	00ed      	lsls	r5, r5, #3
 8012432:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8012436:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801243a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801243c:	ea49 0505 	orr.w	r5, r9, r5
 8012440:	f816 900c 	ldrb.w	r9, [r6, ip]
 8012444:	4408      	add	r0, r1
 8012446:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012448:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 801244c:	f82a 5b02 	strh.w	r5, [sl], #2
 8012450:	440a      	add	r2, r1
 8012452:	e7d7      	b.n	8012404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 8012454:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8012458:	d424      	bmi.n	80124a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801245a:	45bc      	cmp	ip, r7
 801245c:	da22      	bge.n	80124a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801245e:	1415      	asrs	r5, r2, #16
 8012460:	d420      	bmi.n	80124a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8012462:	4545      	cmp	r5, r8
 8012464:	da1e      	bge.n	80124a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8012466:	9902      	ldr	r1, [sp, #8]
 8012468:	fb07 1505 	mla	r5, r7, r5, r1
 801246c:	f06f 0101 	mvn.w	r1, #1
 8012470:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8012474:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012478:	eb06 050c 	add.w	r5, r6, ip
 801247c:	fb01 f90e 	mul.w	r9, r1, lr
 8012480:	f895 a002 	ldrb.w	sl, [r5, #2]
 8012484:	786d      	ldrb	r5, [r5, #1]
 8012486:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801248a:	00ed      	lsls	r5, r5, #3
 801248c:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 8012490:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012494:	ea4a 0505 	orr.w	r5, sl, r5
 8012498:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801249c:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 80124a0:	f82b 5009 	strh.w	r5, [fp, r9]
 80124a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80124a6:	4408      	add	r0, r1
 80124a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80124aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80124ae:	440a      	add	r2, r1
 80124b0:	e75a      	b.n	8012368 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80124b2:	b005      	add	sp, #20
 80124b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b8:	fffff800 	.word	0xfffff800

080124bc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80124bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c0:	b087      	sub	sp, #28
 80124c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124c6:	9204      	str	r2, [sp, #16]
 80124c8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80124cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80124ce:	9201      	str	r2, [sp, #4]
 80124d0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80124d4:	9205      	str	r2, [sp, #20]
 80124d6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80124da:	9100      	str	r1, [sp, #0]
 80124dc:	6869      	ldr	r1, [r5, #4]
 80124de:	981a      	ldr	r0, [sp, #104]	; 0x68
 80124e0:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80124e4:	fb01 2404 	mla	r4, r1, r4, r2
 80124e8:	682a      	ldr	r2, [r5, #0]
 80124ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80124ee:	6802      	ldr	r2, [r0, #0]
 80124f0:	9202      	str	r2, [sp, #8]
 80124f2:	6842      	ldr	r2, [r0, #4]
 80124f4:	3204      	adds	r2, #4
 80124f6:	9203      	str	r2, [sp, #12]
 80124f8:	9a00      	ldr	r2, [sp, #0]
 80124fa:	2a00      	cmp	r2, #0
 80124fc:	dc03      	bgt.n	8012506 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80124fe:	9a04      	ldr	r2, [sp, #16]
 8012500:	2a00      	cmp	r2, #0
 8012502:	f340 812c 	ble.w	801275e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012506:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012508:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801250c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801250e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012512:	2b00      	cmp	r3, #0
 8012514:	dd0f      	ble.n	8012536 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8012516:	1402      	asrs	r2, r0, #16
 8012518:	d406      	bmi.n	8012528 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801251a:	4572      	cmp	r2, lr
 801251c:	da04      	bge.n	8012528 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801251e:	140a      	asrs	r2, r1, #16
 8012520:	d402      	bmi.n	8012528 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8012522:	9d01      	ldr	r5, [sp, #4]
 8012524:	42aa      	cmp	r2, r5
 8012526:	db07      	blt.n	8012538 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8012528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801252a:	4410      	add	r0, r2
 801252c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801252e:	3b01      	subs	r3, #1
 8012530:	4411      	add	r1, r2
 8012532:	3402      	adds	r4, #2
 8012534:	e7ed      	b.n	8012512 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8012536:	d00f      	beq.n	8012558 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8012538:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801253a:	1e5a      	subs	r2, r3, #1
 801253c:	fb05 0502 	mla	r5, r5, r2, r0
 8012540:	142d      	asrs	r5, r5, #16
 8012542:	d545      	bpl.n	80125d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8012544:	4699      	mov	r9, r3
 8012546:	46a0      	mov	r8, r4
 8012548:	f1b9 0f00 	cmp.w	r9, #0
 801254c:	f300 80a7 	bgt.w	801269e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8012550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012554:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012558:	9b00      	ldr	r3, [sp, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f340 80ff 	ble.w	801275e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012560:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012564:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012568:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801256c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801256e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012572:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012576:	eeb0 6a62 	vmov.f32	s12, s5
 801257a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801257e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012582:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012586:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801258a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801258e:	eeb0 6a43 	vmov.f32	s12, s6
 8012592:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012596:	ee12 2a90 	vmov	r2, s5
 801259a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801259e:	fb92 f3f3 	sdiv	r3, r2, r3
 80125a2:	ee13 2a10 	vmov	r2, s6
 80125a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80125a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80125ae:	9314      	str	r3, [sp, #80]	; 0x50
 80125b0:	9b00      	ldr	r3, [sp, #0]
 80125b2:	9a04      	ldr	r2, [sp, #16]
 80125b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80125b8:	3b01      	subs	r3, #1
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80125c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125c2:	eeb0 3a67 	vmov.f32	s6, s15
 80125c6:	bf08      	it	eq
 80125c8:	4613      	moveq	r3, r2
 80125ca:	eef0 2a47 	vmov.f32	s5, s14
 80125ce:	e793      	b.n	80124f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80125d0:	4575      	cmp	r5, lr
 80125d2:	dab7      	bge.n	8012544 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80125d4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80125d6:	fb05 1202 	mla	r2, r5, r2, r1
 80125da:	1412      	asrs	r2, r2, #16
 80125dc:	d4b2      	bmi.n	8012544 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80125de:	9d01      	ldr	r5, [sp, #4]
 80125e0:	42aa      	cmp	r2, r5
 80125e2:	daaf      	bge.n	8012544 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80125e4:	f04f 0800 	mov.w	r8, #0
 80125e8:	eba3 0208 	sub.w	r2, r3, r8
 80125ec:	2a00      	cmp	r2, #0
 80125ee:	ddaf      	ble.n	8012550 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80125f0:	9e02      	ldr	r6, [sp, #8]
 80125f2:	140a      	asrs	r2, r1, #16
 80125f4:	1405      	asrs	r5, r0, #16
 80125f6:	fb0e 6202 	mla	r2, lr, r2, r6
 80125fa:	5d52      	ldrb	r2, [r2, r5]
 80125fc:	9d03      	ldr	r5, [sp, #12]
 80125fe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8012602:	0e2e      	lsrs	r6, r5, #24
 8012604:	d044      	beq.n	8012690 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8012606:	9a05      	ldr	r2, [sp, #20]
 8012608:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801260c:	4356      	muls	r6, r2
 801260e:	1c72      	adds	r2, r6, #1
 8012610:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8012614:	1212      	asrs	r2, r2, #8
 8012616:	fa1f f982 	uxth.w	r9, r2
 801261a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801261e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8012622:	43d2      	mvns	r2, r2
 8012624:	b2d2      	uxtb	r2, r2
 8012626:	fb16 f609 	smulbb	r6, r6, r9
 801262a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801262e:	fb07 6702 	mla	r7, r7, r2, r6
 8012632:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012636:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801263a:	b2ed      	uxtb	r5, r5
 801263c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012640:	fa5f fc8c 	uxtb.w	ip, ip
 8012644:	fb15 f509 	smulbb	r5, r5, r9
 8012648:	fb0c 5502 	mla	r5, ip, r2, r5
 801264c:	b2bf      	uxth	r7, r7
 801264e:	fb1a fa09 	smulbb	sl, sl, r9
 8012652:	b2ad      	uxth	r5, r5
 8012654:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012658:	fb06 a602 	mla	r6, r6, r2, sl
 801265c:	1c7a      	adds	r2, r7, #1
 801265e:	f105 0a01 	add.w	sl, r5, #1
 8012662:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012666:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801266a:	b2b6      	uxth	r6, r6
 801266c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012670:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012674:	ea47 070a 	orr.w	r7, r7, sl
 8012678:	f106 0a01 	add.w	sl, r6, #1
 801267c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012680:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012684:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012688:	ea47 070a 	orr.w	r7, r7, sl
 801268c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8012690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012692:	4410      	add	r0, r2
 8012694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012696:	f108 0801 	add.w	r8, r8, #1
 801269a:	4411      	add	r1, r2
 801269c:	e7a4      	b.n	80125e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 801269e:	1405      	asrs	r5, r0, #16
 80126a0:	d454      	bmi.n	801274c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80126a2:	4575      	cmp	r5, lr
 80126a4:	da52      	bge.n	801274c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80126a6:	140a      	asrs	r2, r1, #16
 80126a8:	d450      	bmi.n	801274c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80126aa:	9e01      	ldr	r6, [sp, #4]
 80126ac:	42b2      	cmp	r2, r6
 80126ae:	da4d      	bge.n	801274c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80126b0:	9e02      	ldr	r6, [sp, #8]
 80126b2:	fb0e 6202 	mla	r2, lr, r2, r6
 80126b6:	5d52      	ldrb	r2, [r2, r5]
 80126b8:	9d03      	ldr	r5, [sp, #12]
 80126ba:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80126be:	0e2e      	lsrs	r6, r5, #24
 80126c0:	d044      	beq.n	801274c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80126c2:	9a05      	ldr	r2, [sp, #20]
 80126c4:	f8b8 c000 	ldrh.w	ip, [r8]
 80126c8:	4356      	muls	r6, r2
 80126ca:	1c72      	adds	r2, r6, #1
 80126cc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80126d0:	1212      	asrs	r2, r2, #8
 80126d2:	fa1f fa82 	uxth.w	sl, r2
 80126d6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80126da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80126de:	43d2      	mvns	r2, r2
 80126e0:	b2d2      	uxtb	r2, r2
 80126e2:	fb16 f60a 	smulbb	r6, r6, sl
 80126e6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80126ea:	fb07 6702 	mla	r7, r7, r2, r6
 80126ee:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 80126f2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80126f6:	b2ed      	uxtb	r5, r5
 80126f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80126fc:	fa5f fc8c 	uxtb.w	ip, ip
 8012700:	fb15 f50a 	smulbb	r5, r5, sl
 8012704:	fb0c 5502 	mla	r5, ip, r2, r5
 8012708:	b2bf      	uxth	r7, r7
 801270a:	fb1b fb0a 	smulbb	fp, fp, sl
 801270e:	b2ad      	uxth	r5, r5
 8012710:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012714:	fb06 b602 	mla	r6, r6, r2, fp
 8012718:	1c7a      	adds	r2, r7, #1
 801271a:	f105 0b01 	add.w	fp, r5, #1
 801271e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012722:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8012726:	b2b6      	uxth	r6, r6
 8012728:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801272c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012730:	ea47 070b 	orr.w	r7, r7, fp
 8012734:	f106 0b01 	add.w	fp, r6, #1
 8012738:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801273c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8012740:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8012744:	ea47 070b 	orr.w	r7, r7, fp
 8012748:	f8a8 7000 	strh.w	r7, [r8]
 801274c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801274e:	4410      	add	r0, r2
 8012750:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012752:	f108 0802 	add.w	r8, r8, #2
 8012756:	4411      	add	r1, r2
 8012758:	f109 39ff 	add.w	r9, r9, #4294967295
 801275c:	e6f4      	b.n	8012548 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801275e:	b007      	add	sp, #28
 8012760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012764 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012768:	b087      	sub	sp, #28
 801276a:	468b      	mov	fp, r1
 801276c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801276e:	9205      	str	r2, [sp, #20]
 8012770:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012774:	9201      	str	r2, [sp, #4]
 8012776:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801277a:	6869      	ldr	r1, [r5, #4]
 801277c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801277e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8012782:	fb01 2404 	mla	r4, r1, r4, r2
 8012786:	682a      	ldr	r2, [r5, #0]
 8012788:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801278c:	6802      	ldr	r2, [r0, #0]
 801278e:	9203      	str	r2, [sp, #12]
 8012790:	6842      	ldr	r2, [r0, #4]
 8012792:	3204      	adds	r2, #4
 8012794:	9204      	str	r2, [sp, #16]
 8012796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801279a:	f1bb 0f00 	cmp.w	fp, #0
 801279e:	dc03      	bgt.n	80127a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80127a0:	9a05      	ldr	r2, [sp, #20]
 80127a2:	2a00      	cmp	r2, #0
 80127a4:	f340 814a 	ble.w	8012a3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 80127a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80127aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80127ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80127b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	dd0f      	ble.n	80127d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80127b8:	1408      	asrs	r0, r1, #16
 80127ba:	d406      	bmi.n	80127ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80127bc:	4540      	cmp	r0, r8
 80127be:	da04      	bge.n	80127ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80127c0:	1410      	asrs	r0, r2, #16
 80127c2:	d402      	bmi.n	80127ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80127c4:	9d01      	ldr	r5, [sp, #4]
 80127c6:	42a8      	cmp	r0, r5
 80127c8:	db07      	blt.n	80127da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80127ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80127cc:	4401      	add	r1, r0
 80127ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80127d0:	3b01      	subs	r3, #1
 80127d2:	4402      	add	r2, r0
 80127d4:	3402      	adds	r4, #2
 80127d6:	e7ed      	b.n	80127b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80127d8:	d018      	beq.n	801280c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 80127da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80127dc:	1e58      	subs	r0, r3, #1
 80127de:	fb05 1500 	mla	r5, r5, r0, r1
 80127e2:	142d      	asrs	r5, r5, #16
 80127e4:	d40a      	bmi.n	80127fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80127e6:	4545      	cmp	r5, r8
 80127e8:	da08      	bge.n	80127fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80127ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80127ec:	fb05 2000 	mla	r0, r5, r0, r2
 80127f0:	1400      	asrs	r0, r0, #16
 80127f2:	d403      	bmi.n	80127fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80127f4:	9d01      	ldr	r5, [sp, #4]
 80127f6:	42a8      	cmp	r0, r5
 80127f8:	f2c0 80b7 	blt.w	801296a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80127fc:	2600      	movs	r6, #0
 80127fe:	1998      	adds	r0, r3, r6
 8012800:	2800      	cmp	r0, #0
 8012802:	dc3e      	bgt.n	8012882 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8012804:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012808:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801280c:	f1bb 0f00 	cmp.w	fp, #0
 8012810:	f340 8114 	ble.w	8012a3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8012814:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012818:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801281c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012820:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012822:	f1bb 0b01 	subs.w	fp, fp, #1
 8012826:	ee31 1a05 	vadd.f32	s2, s2, s10
 801282a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801282e:	eeb0 6a62 	vmov.f32	s12, s5
 8012832:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012836:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801283a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801283e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012842:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012846:	eeb0 6a43 	vmov.f32	s12, s6
 801284a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801284e:	ee12 2a90 	vmov	r2, s5
 8012852:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012856:	fb92 f3f3 	sdiv	r3, r2, r3
 801285a:	ee13 2a10 	vmov	r2, s6
 801285e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012862:	9313      	str	r3, [sp, #76]	; 0x4c
 8012864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012866:	fb92 f3f3 	sdiv	r3, r2, r3
 801286a:	9a05      	ldr	r2, [sp, #20]
 801286c:	9314      	str	r3, [sp, #80]	; 0x50
 801286e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012872:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012874:	eeb0 3a67 	vmov.f32	s6, s15
 8012878:	bf08      	it	eq
 801287a:	4613      	moveq	r3, r2
 801287c:	eef0 2a47 	vmov.f32	s5, s14
 8012880:	e78b      	b.n	801279a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8012882:	140d      	asrs	r5, r1, #16
 8012884:	d459      	bmi.n	801293a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012886:	4545      	cmp	r5, r8
 8012888:	da57      	bge.n	801293a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801288a:	1410      	asrs	r0, r2, #16
 801288c:	d455      	bmi.n	801293a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801288e:	9f01      	ldr	r7, [sp, #4]
 8012890:	42b8      	cmp	r0, r7
 8012892:	da52      	bge.n	801293a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012894:	9f03      	ldr	r7, [sp, #12]
 8012896:	fb08 7000 	mla	r0, r8, r0, r7
 801289a:	5d40      	ldrb	r0, [r0, r5]
 801289c:	9d04      	ldr	r5, [sp, #16]
 801289e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80128a2:	0e07      	lsrs	r7, r0, #24
 80128a4:	2fff      	cmp	r7, #255	; 0xff
 80128a6:	d04e      	beq.n	8012946 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 80128a8:	b2fd      	uxtb	r5, r7
 80128aa:	2f00      	cmp	r7, #0
 80128ac:	d045      	beq.n	801293a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80128ae:	f06f 0701 	mvn.w	r7, #1
 80128b2:	4377      	muls	r7, r6
 80128b4:	fa1f f985 	uxth.w	r9, r5
 80128b8:	f834 e007 	ldrh.w	lr, [r4, r7]
 80128bc:	9702      	str	r7, [sp, #8]
 80128be:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80128c2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80128c6:	43ed      	mvns	r5, r5
 80128c8:	b2ed      	uxtb	r5, r5
 80128ca:	fb17 f709 	smulbb	r7, r7, r9
 80128ce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80128d2:	fb0c 7c05 	mla	ip, ip, r5, r7
 80128d6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80128da:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80128de:	b2c0      	uxtb	r0, r0
 80128e0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80128e4:	fa5f fe8e 	uxtb.w	lr, lr
 80128e8:	fb10 f009 	smulbb	r0, r0, r9
 80128ec:	fb0e 0005 	mla	r0, lr, r5, r0
 80128f0:	b280      	uxth	r0, r0
 80128f2:	fa1f fc8c 	uxth.w	ip, ip
 80128f6:	fb1a fa09 	smulbb	sl, sl, r9
 80128fa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80128fe:	fb07 a705 	mla	r7, r7, r5, sl
 8012902:	f100 0a01 	add.w	sl, r0, #1
 8012906:	f10c 0501 	add.w	r5, ip, #1
 801290a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801290e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8012912:	b2bf      	uxth	r7, r7
 8012914:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012918:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801291c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012920:	f107 0a01 	add.w	sl, r7, #1
 8012924:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8012928:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801292c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012930:	9802      	ldr	r0, [sp, #8]
 8012932:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012936:	f824 c000 	strh.w	ip, [r4, r0]
 801293a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801293c:	4401      	add	r1, r0
 801293e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012940:	3e01      	subs	r6, #1
 8012942:	4402      	add	r2, r0
 8012944:	e75b      	b.n	80127fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8012946:	f06f 0501 	mvn.w	r5, #1
 801294a:	fb05 f706 	mul.w	r7, r5, r6
 801294e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8012952:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8012956:	0945      	lsrs	r5, r0, #5
 8012958:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801295c:	ea4c 0505 	orr.w	r5, ip, r5
 8012960:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8012964:	4305      	orrs	r5, r0
 8012966:	53e5      	strh	r5, [r4, r7]
 8012968:	e7e7      	b.n	801293a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801296a:	f04f 0e00 	mov.w	lr, #0
 801296e:	eba3 000e 	sub.w	r0, r3, lr
 8012972:	2800      	cmp	r0, #0
 8012974:	f77f af46 	ble.w	8012804 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8012978:	9e03      	ldr	r6, [sp, #12]
 801297a:	1410      	asrs	r0, r2, #16
 801297c:	140d      	asrs	r5, r1, #16
 801297e:	fb08 6000 	mla	r0, r8, r0, r6
 8012982:	5d40      	ldrb	r0, [r0, r5]
 8012984:	9d04      	ldr	r5, [sp, #16]
 8012986:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801298a:	0e06      	lsrs	r6, r0, #24
 801298c:	2eff      	cmp	r6, #255	; 0xff
 801298e:	d048      	beq.n	8012a22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8012990:	b2f5      	uxtb	r5, r6
 8012992:	2e00      	cmp	r6, #0
 8012994:	d03e      	beq.n	8012a14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8012996:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801299a:	fa1f f985 	uxth.w	r9, r5
 801299e:	ea4f 272c 	mov.w	r7, ip, asr #8
 80129a2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80129a6:	43ed      	mvns	r5, r5
 80129a8:	b2ed      	uxtb	r5, r5
 80129aa:	fb16 f609 	smulbb	r6, r6, r9
 80129ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80129b2:	fb07 6705 	mla	r7, r7, r5, r6
 80129b6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80129ba:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80129be:	b2c0      	uxtb	r0, r0
 80129c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80129c4:	fa5f fc8c 	uxtb.w	ip, ip
 80129c8:	fb10 f009 	smulbb	r0, r0, r9
 80129cc:	fb0c 0005 	mla	r0, ip, r5, r0
 80129d0:	b2bf      	uxth	r7, r7
 80129d2:	fb1a fa09 	smulbb	sl, sl, r9
 80129d6:	b280      	uxth	r0, r0
 80129d8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80129dc:	fb06 a605 	mla	r6, r6, r5, sl
 80129e0:	1c7d      	adds	r5, r7, #1
 80129e2:	f100 0a01 	add.w	sl, r0, #1
 80129e6:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80129ea:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80129ee:	b2b6      	uxth	r6, r6
 80129f0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80129f4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80129f8:	ea47 070a 	orr.w	r7, r7, sl
 80129fc:	f106 0a01 	add.w	sl, r6, #1
 8012a00:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012a04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012a08:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012a0c:	ea47 070a 	orr.w	r7, r7, sl
 8012a10:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8012a14:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012a16:	4401      	add	r1, r0
 8012a18:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012a1a:	f10e 0e01 	add.w	lr, lr, #1
 8012a1e:	4402      	add	r2, r0
 8012a20:	e7a5      	b.n	801296e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 8012a22:	4d08      	ldr	r5, [pc, #32]	; (8012a44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 8012a24:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8012a28:	0945      	lsrs	r5, r0, #5
 8012a2a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012a2e:	4335      	orrs	r5, r6
 8012a30:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8012a34:	4305      	orrs	r5, r0
 8012a36:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8012a3a:	e7eb      	b.n	8012a14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8012a3c:	b007      	add	sp, #28
 8012a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a42:	bf00      	nop
 8012a44:	fffff800 	.word	0xfffff800

08012a48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a4c:	b087      	sub	sp, #28
 8012a4e:	468b      	mov	fp, r1
 8012a50:	9204      	str	r2, [sp, #16]
 8012a52:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012a56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012a58:	9201      	str	r2, [sp, #4]
 8012a5a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8012a5e:	9205      	str	r2, [sp, #20]
 8012a60:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8012a64:	6869      	ldr	r1, [r5, #4]
 8012a66:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012a68:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8012a6c:	fb01 2404 	mla	r4, r1, r4, r2
 8012a70:	682a      	ldr	r2, [r5, #0]
 8012a72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012a76:	6802      	ldr	r2, [r0, #0]
 8012a78:	9202      	str	r2, [sp, #8]
 8012a7a:	6842      	ldr	r2, [r0, #4]
 8012a7c:	9203      	str	r2, [sp, #12]
 8012a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012a82:	f1bb 0f00 	cmp.w	fp, #0
 8012a86:	dc03      	bgt.n	8012a90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8012a88:	9a04      	ldr	r2, [sp, #16]
 8012a8a:	2a00      	cmp	r2, #0
 8012a8c:	f340 8136 	ble.w	8012cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8012a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a92:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012a96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	dd0f      	ble.n	8012ac0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8012aa0:	1408      	asrs	r0, r1, #16
 8012aa2:	d406      	bmi.n	8012ab2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8012aa4:	4540      	cmp	r0, r8
 8012aa6:	da04      	bge.n	8012ab2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8012aa8:	1410      	asrs	r0, r2, #16
 8012aaa:	d402      	bmi.n	8012ab2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8012aac:	9d01      	ldr	r5, [sp, #4]
 8012aae:	42a8      	cmp	r0, r5
 8012ab0:	db07      	blt.n	8012ac2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8012ab2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012ab4:	4401      	add	r1, r0
 8012ab6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012ab8:	3b01      	subs	r3, #1
 8012aba:	4402      	add	r2, r0
 8012abc:	3402      	adds	r4, #2
 8012abe:	e7ed      	b.n	8012a9c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8012ac0:	d00f      	beq.n	8012ae2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8012ac2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012ac4:	1e58      	subs	r0, r3, #1
 8012ac6:	fb05 1500 	mla	r5, r5, r0, r1
 8012aca:	142d      	asrs	r5, r5, #16
 8012acc:	d544      	bpl.n	8012b58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8012ace:	9300      	str	r3, [sp, #0]
 8012ad0:	46a2      	mov	sl, r4
 8012ad2:	9800      	ldr	r0, [sp, #0]
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	f300 80ab 	bgt.w	8012c30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8012ada:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012ade:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012ae2:	f1bb 0f00 	cmp.w	fp, #0
 8012ae6:	f340 8109 	ble.w	8012cfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8012aea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012aee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012af2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012af6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012af8:	f1bb 0b01 	subs.w	fp, fp, #1
 8012afc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012b00:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012b04:	eeb0 6a62 	vmov.f32	s12, s5
 8012b08:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012b0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012b10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012b14:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012b18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012b1c:	eeb0 6a43 	vmov.f32	s12, s6
 8012b20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012b24:	ee12 2a90 	vmov	r2, s5
 8012b28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012b2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012b30:	ee13 2a10 	vmov	r2, s6
 8012b34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012b38:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012b40:	9a04      	ldr	r2, [sp, #16]
 8012b42:	9314      	str	r3, [sp, #80]	; 0x50
 8012b44:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b4a:	eeb0 3a67 	vmov.f32	s6, s15
 8012b4e:	bf08      	it	eq
 8012b50:	4613      	moveq	r3, r2
 8012b52:	eef0 2a47 	vmov.f32	s5, s14
 8012b56:	e794      	b.n	8012a82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8012b58:	4545      	cmp	r5, r8
 8012b5a:	dab8      	bge.n	8012ace <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8012b5c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012b5e:	fb05 2000 	mla	r0, r5, r0, r2
 8012b62:	1400      	asrs	r0, r0, #16
 8012b64:	d4b3      	bmi.n	8012ace <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8012b66:	9d01      	ldr	r5, [sp, #4]
 8012b68:	42a8      	cmp	r0, r5
 8012b6a:	dab0      	bge.n	8012ace <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8012b6c:	f04f 0900 	mov.w	r9, #0
 8012b70:	eba3 0009 	sub.w	r0, r3, r9
 8012b74:	2800      	cmp	r0, #0
 8012b76:	ddb0      	ble.n	8012ada <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8012b78:	140d      	asrs	r5, r1, #16
 8012b7a:	1410      	asrs	r0, r2, #16
 8012b7c:	fb08 5000 	mla	r0, r8, r0, r5
 8012b80:	9d03      	ldr	r5, [sp, #12]
 8012b82:	5c2e      	ldrb	r6, [r5, r0]
 8012b84:	2e00      	cmp	r6, #0
 8012b86:	d04c      	beq.n	8012c22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8012b88:	9d02      	ldr	r5, [sp, #8]
 8012b8a:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8012b8e:	9805      	ldr	r0, [sp, #20]
 8012b90:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8012b94:	4346      	muls	r6, r0
 8012b96:	1c70      	adds	r0, r6, #1
 8012b98:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8012b9c:	1200      	asrs	r0, r0, #8
 8012b9e:	b287      	uxth	r7, r0
 8012ba0:	122e      	asrs	r6, r5, #8
 8012ba2:	43c0      	mvns	r0, r0
 8012ba4:	b2c0      	uxtb	r0, r0
 8012ba6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012baa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012bae:	fb16 f600 	smulbb	r6, r6, r0
 8012bb2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8012bb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012bba:	00ed      	lsls	r5, r5, #3
 8012bbc:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012bc0:	b2ed      	uxtb	r5, r5
 8012bc2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012bc6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012bca:	fb15 f500 	smulbb	r5, r5, r0
 8012bce:	fa5f fe8e 	uxtb.w	lr, lr
 8012bd2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8012bd6:	fb0e 5507 	mla	r5, lr, r7, r5
 8012bda:	fb1a fa00 	smulbb	sl, sl, r0
 8012bde:	fa1f fc8c 	uxth.w	ip, ip
 8012be2:	b2ad      	uxth	r5, r5
 8012be4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012be8:	fb06 a607 	mla	r6, r6, r7, sl
 8012bec:	f10c 0001 	add.w	r0, ip, #1
 8012bf0:	f105 0a01 	add.w	sl, r5, #1
 8012bf4:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8012bf8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012bfc:	b2b6      	uxth	r6, r6
 8012bfe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012c02:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012c06:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012c0a:	f106 0a01 	add.w	sl, r6, #1
 8012c0e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012c12:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012c16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012c1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012c1e:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 8012c22:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012c24:	4401      	add	r1, r0
 8012c26:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012c28:	f109 0901 	add.w	r9, r9, #1
 8012c2c:	4402      	add	r2, r0
 8012c2e:	e79f      	b.n	8012b70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 8012c30:	1408      	asrs	r0, r1, #16
 8012c32:	d459      	bmi.n	8012ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8012c34:	4540      	cmp	r0, r8
 8012c36:	da57      	bge.n	8012ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8012c38:	1415      	asrs	r5, r2, #16
 8012c3a:	d455      	bmi.n	8012ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8012c3c:	9e01      	ldr	r6, [sp, #4]
 8012c3e:	42b5      	cmp	r5, r6
 8012c40:	da52      	bge.n	8012ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8012c42:	fb08 0005 	mla	r0, r8, r5, r0
 8012c46:	9d03      	ldr	r5, [sp, #12]
 8012c48:	5c2e      	ldrb	r6, [r5, r0]
 8012c4a:	2e00      	cmp	r6, #0
 8012c4c:	d04c      	beq.n	8012ce8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8012c4e:	9d02      	ldr	r5, [sp, #8]
 8012c50:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8012c54:	9805      	ldr	r0, [sp, #20]
 8012c56:	f8ba 5000 	ldrh.w	r5, [sl]
 8012c5a:	4346      	muls	r6, r0
 8012c5c:	1c70      	adds	r0, r6, #1
 8012c5e:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8012c62:	1200      	asrs	r0, r0, #8
 8012c64:	b287      	uxth	r7, r0
 8012c66:	122e      	asrs	r6, r5, #8
 8012c68:	43c0      	mvns	r0, r0
 8012c6a:	b2c0      	uxtb	r0, r0
 8012c6c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012c70:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012c74:	fb16 f600 	smulbb	r6, r6, r0
 8012c78:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8012c7c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012c80:	00ed      	lsls	r5, r5, #3
 8012c82:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012c86:	b2ed      	uxtb	r5, r5
 8012c88:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012c8c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012c90:	fb15 f500 	smulbb	r5, r5, r0
 8012c94:	fa5f fe8e 	uxtb.w	lr, lr
 8012c98:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8012c9c:	fb0e 5507 	mla	r5, lr, r7, r5
 8012ca0:	fb19 f900 	smulbb	r9, r9, r0
 8012ca4:	fa1f fc8c 	uxth.w	ip, ip
 8012ca8:	b2ad      	uxth	r5, r5
 8012caa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012cae:	fb06 9607 	mla	r6, r6, r7, r9
 8012cb2:	f10c 0001 	add.w	r0, ip, #1
 8012cb6:	f105 0901 	add.w	r9, r5, #1
 8012cba:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8012cbe:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8012cc2:	b2b6      	uxth	r6, r6
 8012cc4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8012cc8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012ccc:	ea4c 0c09 	orr.w	ip, ip, r9
 8012cd0:	f106 0901 	add.w	r9, r6, #1
 8012cd4:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 8012cd8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012cdc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8012ce0:	ea4c 0c09 	orr.w	ip, ip, r9
 8012ce4:	f8aa c000 	strh.w	ip, [sl]
 8012ce8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012cea:	4401      	add	r1, r0
 8012cec:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012cee:	4402      	add	r2, r0
 8012cf0:	9800      	ldr	r0, [sp, #0]
 8012cf2:	3801      	subs	r0, #1
 8012cf4:	f10a 0a02 	add.w	sl, sl, #2
 8012cf8:	9000      	str	r0, [sp, #0]
 8012cfa:	e6ea      	b.n	8012ad2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012cfc:	b007      	add	sp, #28
 8012cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012d02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d06:	b087      	sub	sp, #28
 8012d08:	468b      	mov	fp, r1
 8012d0a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012d0c:	9205      	str	r2, [sp, #20]
 8012d0e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012d12:	9202      	str	r2, [sp, #8]
 8012d14:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8012d18:	6869      	ldr	r1, [r5, #4]
 8012d1a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8012d1c:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8012d20:	fb01 2000 	mla	r0, r1, r0, r2
 8012d24:	682a      	ldr	r2, [r5, #0]
 8012d26:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8012d2a:	6822      	ldr	r2, [r4, #0]
 8012d2c:	9201      	str	r2, [sp, #4]
 8012d2e:	6862      	ldr	r2, [r4, #4]
 8012d30:	9204      	str	r2, [sp, #16]
 8012d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d36:	f1bb 0f00 	cmp.w	fp, #0
 8012d3a:	dc03      	bgt.n	8012d44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8012d3c:	9a05      	ldr	r2, [sp, #20]
 8012d3e:	2a00      	cmp	r2, #0
 8012d40:	f340 813d 	ble.w	8012fbe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8012d44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012d46:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012d4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	dd0f      	ble.n	8012d74 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8012d54:	140c      	asrs	r4, r1, #16
 8012d56:	d406      	bmi.n	8012d66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8012d58:	454c      	cmp	r4, r9
 8012d5a:	da04      	bge.n	8012d66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8012d5c:	1414      	asrs	r4, r2, #16
 8012d5e:	d402      	bmi.n	8012d66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8012d60:	9d02      	ldr	r5, [sp, #8]
 8012d62:	42ac      	cmp	r4, r5
 8012d64:	db07      	blt.n	8012d76 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8012d66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012d68:	4421      	add	r1, r4
 8012d6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	4422      	add	r2, r4
 8012d70:	3002      	adds	r0, #2
 8012d72:	e7ed      	b.n	8012d50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8012d74:	d018      	beq.n	8012da8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 8012d76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012d78:	1e5c      	subs	r4, r3, #1
 8012d7a:	fb05 1504 	mla	r5, r5, r4, r1
 8012d7e:	142d      	asrs	r5, r5, #16
 8012d80:	d40a      	bmi.n	8012d98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8012d82:	454d      	cmp	r5, r9
 8012d84:	da08      	bge.n	8012d98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8012d86:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012d88:	fb05 2404 	mla	r4, r5, r4, r2
 8012d8c:	1424      	asrs	r4, r4, #16
 8012d8e:	d403      	bmi.n	8012d98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8012d90:	9d02      	ldr	r5, [sp, #8]
 8012d92:	42ac      	cmp	r4, r5
 8012d94:	f2c0 80ae 	blt.w	8012ef4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 8012d98:	2600      	movs	r6, #0
 8012d9a:	199c      	adds	r4, r3, r6
 8012d9c:	2c00      	cmp	r4, #0
 8012d9e:	dc3e      	bgt.n	8012e1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8012da0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012da4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012da8:	f1bb 0f00 	cmp.w	fp, #0
 8012dac:	f340 8107 	ble.w	8012fbe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8012db0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012db4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012db8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012dbe:	f1bb 0b01 	subs.w	fp, fp, #1
 8012dc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012dc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012dca:	eeb0 6a62 	vmov.f32	s12, s5
 8012dce:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012dd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012dd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012dda:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012dde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012de2:	eeb0 6a43 	vmov.f32	s12, s6
 8012de6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012dea:	ee12 2a90 	vmov	r2, s5
 8012dee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012df2:	fb92 f3f3 	sdiv	r3, r2, r3
 8012df6:	ee13 2a10 	vmov	r2, s6
 8012dfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012dfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8012e00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8012e06:	9a05      	ldr	r2, [sp, #20]
 8012e08:	9314      	str	r3, [sp, #80]	; 0x50
 8012e0a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012e0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e10:	eeb0 3a67 	vmov.f32	s6, s15
 8012e14:	bf08      	it	eq
 8012e16:	4613      	moveq	r3, r2
 8012e18:	eef0 2a47 	vmov.f32	s5, s14
 8012e1c:	e78b      	b.n	8012d36 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8012e1e:	140c      	asrs	r4, r1, #16
 8012e20:	d45a      	bmi.n	8012ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012e22:	454c      	cmp	r4, r9
 8012e24:	da58      	bge.n	8012ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012e26:	1415      	asrs	r5, r2, #16
 8012e28:	d456      	bmi.n	8012ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012e2a:	9f02      	ldr	r7, [sp, #8]
 8012e2c:	42bd      	cmp	r5, r7
 8012e2e:	da53      	bge.n	8012ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012e30:	fb09 4505 	mla	r5, r9, r5, r4
 8012e34:	9c04      	ldr	r4, [sp, #16]
 8012e36:	5d64      	ldrb	r4, [r4, r5]
 8012e38:	2cff      	cmp	r4, #255	; 0xff
 8012e3a:	d053      	beq.n	8012ee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8012e3c:	2c00      	cmp	r4, #0
 8012e3e:	d04b      	beq.n	8012ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012e40:	9f01      	ldr	r7, [sp, #4]
 8012e42:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8012e46:	f06f 0501 	mvn.w	r5, #1
 8012e4a:	4375      	muls	r5, r6
 8012e4c:	9503      	str	r5, [sp, #12]
 8012e4e:	5b45      	ldrh	r5, [r0, r5]
 8012e50:	fa1f fc84 	uxth.w	ip, r4
 8012e54:	122f      	asrs	r7, r5, #8
 8012e56:	43e4      	mvns	r4, r4
 8012e58:	b2e4      	uxtb	r4, r4
 8012e5a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8012e5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012e62:	fb17 f704 	smulbb	r7, r7, r4
 8012e66:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8012e6a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8012e6e:	00ed      	lsls	r5, r5, #3
 8012e70:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8012e74:	b2ed      	uxtb	r5, r5
 8012e76:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8012e7a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8012e7e:	fb15 f504 	smulbb	r5, r5, r4
 8012e82:	fa5f f888 	uxtb.w	r8, r8
 8012e86:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8012e8a:	fb08 550c 	mla	r5, r8, ip, r5
 8012e8e:	fb1a fa04 	smulbb	sl, sl, r4
 8012e92:	fa1f fe8e 	uxth.w	lr, lr
 8012e96:	b2ad      	uxth	r5, r5
 8012e98:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8012e9c:	fb07 a70c 	mla	r7, r7, ip, sl
 8012ea0:	f10e 0401 	add.w	r4, lr, #1
 8012ea4:	f105 0a01 	add.w	sl, r5, #1
 8012ea8:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8012eac:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012eb0:	b2bf      	uxth	r7, r7
 8012eb2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012eb6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8012eba:	ea4e 0e0a 	orr.w	lr, lr, sl
 8012ebe:	f107 0a01 	add.w	sl, r7, #1
 8012ec2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8012ec6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012eca:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012ece:	9c03      	ldr	r4, [sp, #12]
 8012ed0:	ea4e 0e0a 	orr.w	lr, lr, sl
 8012ed4:	f820 e004 	strh.w	lr, [r0, r4]
 8012ed8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012eda:	4421      	add	r1, r4
 8012edc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8012ede:	3e01      	subs	r6, #1
 8012ee0:	4422      	add	r2, r4
 8012ee2:	e75a      	b.n	8012d9a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8012ee4:	9c01      	ldr	r4, [sp, #4]
 8012ee6:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8012eea:	f06f 0401 	mvn.w	r4, #1
 8012eee:	4374      	muls	r4, r6
 8012ef0:	5305      	strh	r5, [r0, r4]
 8012ef2:	e7f1      	b.n	8012ed8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8012ef4:	f04f 0800 	mov.w	r8, #0
 8012ef8:	eba3 0408 	sub.w	r4, r3, r8
 8012efc:	2c00      	cmp	r4, #0
 8012efe:	f77f af4f 	ble.w	8012da0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8012f02:	140c      	asrs	r4, r1, #16
 8012f04:	1415      	asrs	r5, r2, #16
 8012f06:	fb09 4505 	mla	r5, r9, r5, r4
 8012f0a:	9c04      	ldr	r4, [sp, #16]
 8012f0c:	5d64      	ldrb	r4, [r4, r5]
 8012f0e:	2cff      	cmp	r4, #255	; 0xff
 8012f10:	d04f      	beq.n	8012fb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8012f12:	2c00      	cmp	r4, #0
 8012f14:	d046      	beq.n	8012fa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012f16:	9e01      	ldr	r6, [sp, #4]
 8012f18:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8012f1c:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 8012f20:	b2a7      	uxth	r7, r4
 8012f22:	122e      	asrs	r6, r5, #8
 8012f24:	43e4      	mvns	r4, r4
 8012f26:	b2e4      	uxtb	r4, r4
 8012f28:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012f2c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012f30:	fb16 f604 	smulbb	r6, r6, r4
 8012f34:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8012f38:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012f3c:	00ed      	lsls	r5, r5, #3
 8012f3e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012f42:	b2ed      	uxtb	r5, r5
 8012f44:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012f48:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012f4c:	fb15 f504 	smulbb	r5, r5, r4
 8012f50:	fa5f fe8e 	uxtb.w	lr, lr
 8012f54:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8012f58:	fb0e 5507 	mla	r5, lr, r7, r5
 8012f5c:	fb1a fa04 	smulbb	sl, sl, r4
 8012f60:	fa1f fc8c 	uxth.w	ip, ip
 8012f64:	b2ad      	uxth	r5, r5
 8012f66:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012f6a:	fb06 a607 	mla	r6, r6, r7, sl
 8012f6e:	f10c 0401 	add.w	r4, ip, #1
 8012f72:	f105 0a01 	add.w	sl, r5, #1
 8012f76:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8012f7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012f7e:	b2b6      	uxth	r6, r6
 8012f80:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012f84:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012f88:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012f8c:	f106 0a01 	add.w	sl, r6, #1
 8012f90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012f94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012f98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012f9c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012fa0:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 8012fa4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012fa6:	4421      	add	r1, r4
 8012fa8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8012faa:	f108 0801 	add.w	r8, r8, #1
 8012fae:	4422      	add	r2, r4
 8012fb0:	e7a2      	b.n	8012ef8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8012fb2:	9c01      	ldr	r4, [sp, #4]
 8012fb4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8012fb8:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 8012fbc:	e7f2      	b.n	8012fa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012fbe:	b007      	add	sp, #28
 8012fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012fc4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc8:	b085      	sub	sp, #20
 8012fca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012fcc:	9203      	str	r2, [sp, #12]
 8012fce:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8012fd2:	9201      	str	r2, [sp, #4]
 8012fd4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012fd8:	9100      	str	r1, [sp, #0]
 8012fda:	6841      	ldr	r1, [r0, #4]
 8012fdc:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8012fe0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8012fe4:	fb01 2404 	mla	r4, r1, r4, r2
 8012fe8:	6802      	ldr	r2, [r0, #0]
 8012fea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012fee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012ff0:	fa1f fe85 	uxth.w	lr, r5
 8012ff4:	6812      	ldr	r2, [r2, #0]
 8012ff6:	9202      	str	r2, [sp, #8]
 8012ff8:	43ed      	mvns	r5, r5
 8012ffa:	b2ed      	uxtb	r5, r5
 8012ffc:	9a00      	ldr	r2, [sp, #0]
 8012ffe:	2a00      	cmp	r2, #0
 8013000:	dc03      	bgt.n	801300a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8013002:	9a03      	ldr	r2, [sp, #12]
 8013004:	2a00      	cmp	r2, #0
 8013006:	f340 8117 	ble.w	8013238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801300a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801300c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013012:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013016:	2b00      	cmp	r3, #0
 8013018:	dd0f      	ble.n	801303a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801301a:	1408      	asrs	r0, r1, #16
 801301c:	d406      	bmi.n	801302c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801301e:	4540      	cmp	r0, r8
 8013020:	da04      	bge.n	801302c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8013022:	1410      	asrs	r0, r2, #16
 8013024:	d402      	bmi.n	801302c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8013026:	9e01      	ldr	r6, [sp, #4]
 8013028:	42b0      	cmp	r0, r6
 801302a:	db07      	blt.n	801303c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801302c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801302e:	4401      	add	r1, r0
 8013030:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013032:	3b01      	subs	r3, #1
 8013034:	4402      	add	r2, r0
 8013036:	3402      	adds	r4, #2
 8013038:	e7ed      	b.n	8013016 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801303a:	d069      	beq.n	8013110 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801303c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801303e:	1e58      	subs	r0, r3, #1
 8013040:	fb06 1600 	mla	r6, r6, r0, r1
 8013044:	1436      	asrs	r6, r6, #16
 8013046:	d459      	bmi.n	80130fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8013048:	4546      	cmp	r6, r8
 801304a:	da57      	bge.n	80130fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801304c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801304e:	fb06 2000 	mla	r0, r6, r0, r2
 8013052:	1400      	asrs	r0, r0, #16
 8013054:	d452      	bmi.n	80130fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8013056:	9e01      	ldr	r6, [sp, #4]
 8013058:	42b0      	cmp	r0, r6
 801305a:	da4f      	bge.n	80130fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801305c:	469a      	mov	sl, r3
 801305e:	46a3      	mov	fp, r4
 8013060:	f1ba 0f00 	cmp.w	sl, #0
 8013064:	dd50      	ble.n	8013108 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8013066:	140e      	asrs	r6, r1, #16
 8013068:	1410      	asrs	r0, r2, #16
 801306a:	fb08 6000 	mla	r0, r8, r0, r6
 801306e:	9e02      	ldr	r6, [sp, #8]
 8013070:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8013074:	f8bb 6000 	ldrh.w	r6, [fp]
 8013078:	1237      	asrs	r7, r6, #8
 801307a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801307e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013082:	fb17 f705 	smulbb	r7, r7, r5
 8013086:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801308a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801308e:	00f6      	lsls	r6, r6, #3
 8013090:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8013094:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013098:	10c7      	asrs	r7, r0, #3
 801309a:	b2f6      	uxtb	r6, r6
 801309c:	00c0      	lsls	r0, r0, #3
 801309e:	fb19 f905 	smulbb	r9, r9, r5
 80130a2:	fb16 f605 	smulbb	r6, r6, r5
 80130a6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80130aa:	b2c0      	uxtb	r0, r0
 80130ac:	fa1f fc8c 	uxth.w	ip, ip
 80130b0:	fb07 970e 	mla	r7, r7, lr, r9
 80130b4:	fb00 600e 	mla	r0, r0, lr, r6
 80130b8:	b280      	uxth	r0, r0
 80130ba:	b2bf      	uxth	r7, r7
 80130bc:	f10c 0601 	add.w	r6, ip, #1
 80130c0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80130c4:	f107 0901 	add.w	r9, r7, #1
 80130c8:	1c46      	adds	r6, r0, #1
 80130ca:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80130ce:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80130d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80130d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80130d8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80130dc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80130e0:	ea4c 0c06 	orr.w	ip, ip, r6
 80130e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80130e8:	4401      	add	r1, r0
 80130ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80130ec:	ea4c 0c09 	orr.w	ip, ip, r9
 80130f0:	f82b cb02 	strh.w	ip, [fp], #2
 80130f4:	4402      	add	r2, r0
 80130f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130fa:	e7b1      	b.n	8013060 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80130fc:	f04f 0900 	mov.w	r9, #0
 8013100:	eb03 0009 	add.w	r0, r3, r9
 8013104:	2800      	cmp	r0, #0
 8013106:	dc41      	bgt.n	801318c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8013108:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801310c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013110:	9b00      	ldr	r3, [sp, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	f340 8090 	ble.w	8013238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8013118:	ee30 0a04 	vadd.f32	s0, s0, s8
 801311c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013120:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013126:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801312a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801312e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013132:	eef0 6a62 	vmov.f32	s13, s5
 8013136:	ee61 7a27 	vmul.f32	s15, s2, s15
 801313a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801313e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013142:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013146:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801314a:	eef0 6a43 	vmov.f32	s13, s6
 801314e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013152:	ee12 2a90 	vmov	r2, s5
 8013156:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801315a:	fb92 f3f3 	sdiv	r3, r2, r3
 801315e:	ee13 2a10 	vmov	r2, s6
 8013162:	9311      	str	r3, [sp, #68]	; 0x44
 8013164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013166:	fb92 f3f3 	sdiv	r3, r2, r3
 801316a:	9312      	str	r3, [sp, #72]	; 0x48
 801316c:	9b00      	ldr	r3, [sp, #0]
 801316e:	9a03      	ldr	r2, [sp, #12]
 8013170:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013174:	3b01      	subs	r3, #1
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801317c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801317e:	eeb0 3a67 	vmov.f32	s6, s15
 8013182:	bf08      	it	eq
 8013184:	4613      	moveq	r3, r2
 8013186:	eef0 2a47 	vmov.f32	s5, s14
 801318a:	e737      	b.n	8012ffc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801318c:	140e      	asrs	r6, r1, #16
 801318e:	d44c      	bmi.n	801322a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8013190:	4546      	cmp	r6, r8
 8013192:	da4a      	bge.n	801322a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8013194:	1410      	asrs	r0, r2, #16
 8013196:	d448      	bmi.n	801322a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8013198:	9f01      	ldr	r7, [sp, #4]
 801319a:	42b8      	cmp	r0, r7
 801319c:	da45      	bge.n	801322a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801319e:	fb08 6000 	mla	r0, r8, r0, r6
 80131a2:	9e02      	ldr	r6, [sp, #8]
 80131a4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 80131a8:	f06f 0601 	mvn.w	r6, #1
 80131ac:	fb06 fb09 	mul.w	fp, r6, r9
 80131b0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80131b4:	f834 600b 	ldrh.w	r6, [r4, fp]
 80131b8:	1237      	asrs	r7, r6, #8
 80131ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80131be:	fb17 f705 	smulbb	r7, r7, r5
 80131c2:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 80131c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80131ca:	00f6      	lsls	r6, r6, #3
 80131cc:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80131d0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80131d4:	10c7      	asrs	r7, r0, #3
 80131d6:	b2f6      	uxtb	r6, r6
 80131d8:	00c0      	lsls	r0, r0, #3
 80131da:	fb1a fa05 	smulbb	sl, sl, r5
 80131de:	fb16 f605 	smulbb	r6, r6, r5
 80131e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80131e6:	b2c0      	uxtb	r0, r0
 80131e8:	fa1f fc8c 	uxth.w	ip, ip
 80131ec:	fb07 a70e 	mla	r7, r7, lr, sl
 80131f0:	fb00 600e 	mla	r0, r0, lr, r6
 80131f4:	b2bf      	uxth	r7, r7
 80131f6:	b280      	uxth	r0, r0
 80131f8:	f10c 0601 	add.w	r6, ip, #1
 80131fc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8013200:	f107 0a01 	add.w	sl, r7, #1
 8013204:	1c46      	adds	r6, r0, #1
 8013206:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801320a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801320e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013212:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013216:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801321a:	ea4c 0c06 	orr.w	ip, ip, r6
 801321e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013222:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013226:	f824 c00b 	strh.w	ip, [r4, fp]
 801322a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801322c:	4401      	add	r1, r0
 801322e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013230:	f109 39ff 	add.w	r9, r9, #4294967295
 8013234:	4402      	add	r2, r0
 8013236:	e763      	b.n	8013100 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 8013238:	b005      	add	sp, #20
 801323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801323e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801323e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013242:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013244:	9201      	str	r2, [sp, #4]
 8013246:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801324a:	6844      	ldr	r4, [r0, #4]
 801324c:	6800      	ldr	r0, [r0, #0]
 801324e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8013252:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8013256:	fb04 2505 	mla	r5, r4, r5, r2
 801325a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801325e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013260:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8013264:	6802      	ldr	r2, [r0, #0]
 8013266:	9200      	str	r2, [sp, #0]
 8013268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801326c:	2900      	cmp	r1, #0
 801326e:	dc03      	bgt.n	8013278 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8013270:	9a01      	ldr	r2, [sp, #4]
 8013272:	2a00      	cmp	r2, #0
 8013274:	f340 8095 	ble.w	80133a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8013278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801327a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801327e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013280:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013284:	2b00      	cmp	r3, #0
 8013286:	dd0e      	ble.n	80132a6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8013288:	ea5f 4824 	movs.w	r8, r4, asr #16
 801328c:	d406      	bmi.n	801329c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801328e:	45e0      	cmp	r8, ip
 8013290:	da04      	bge.n	801329c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8013292:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013296:	d401      	bmi.n	801329c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8013298:	45f0      	cmp	r8, lr
 801329a:	db05      	blt.n	80132a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801329c:	443c      	add	r4, r7
 801329e:	4430      	add	r0, r6
 80132a0:	3b01      	subs	r3, #1
 80132a2:	3502      	adds	r5, #2
 80132a4:	e7ee      	b.n	8013284 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80132a6:	d010      	beq.n	80132ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80132a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80132ac:	fb07 4908 	mla	r9, r7, r8, r4
 80132b0:	ea5f 4929 	movs.w	r9, r9, asr #16
 80132b4:	d53d      	bpl.n	8013332 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80132b6:	4698      	mov	r8, r3
 80132b8:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 80132bc:	f1b8 0f00 	cmp.w	r8, #0
 80132c0:	dc55      	bgt.n	801336e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80132c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132c6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80132ca:	2900      	cmp	r1, #0
 80132cc:	dd69      	ble.n	80133a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80132ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80132d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80132d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80132da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132dc:	3901      	subs	r1, #1
 80132de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80132e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80132e6:	eeb0 6a62 	vmov.f32	s12, s5
 80132ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80132ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80132f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80132f6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80132fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80132fe:	eeb0 6a43 	vmov.f32	s12, s6
 8013302:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013306:	ee12 2a90 	vmov	r2, s5
 801330a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801330e:	fb92 f7f3 	sdiv	r7, r2, r3
 8013312:	ee13 2a10 	vmov	r2, s6
 8013316:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801331a:	fb92 f6f3 	sdiv	r6, r2, r3
 801331e:	9a01      	ldr	r2, [sp, #4]
 8013320:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013324:	bf08      	it	eq
 8013326:	4613      	moveq	r3, r2
 8013328:	eeb0 3a67 	vmov.f32	s6, s15
 801332c:	eef0 2a47 	vmov.f32	s5, s14
 8013330:	e79c      	b.n	801326c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 8013332:	45e1      	cmp	r9, ip
 8013334:	dabf      	bge.n	80132b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013336:	fb06 0808 	mla	r8, r6, r8, r0
 801333a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801333e:	d4ba      	bmi.n	80132b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013340:	45f0      	cmp	r8, lr
 8013342:	dab8      	bge.n	80132b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013344:	4698      	mov	r8, r3
 8013346:	46aa      	mov	sl, r5
 8013348:	f1b8 0f00 	cmp.w	r8, #0
 801334c:	ddb9      	ble.n	80132c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801334e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8013352:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8013356:	fb0c b909 	mla	r9, ip, r9, fp
 801335a:	9a00      	ldr	r2, [sp, #0]
 801335c:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8013360:	f82a 9b02 	strh.w	r9, [sl], #2
 8013364:	443c      	add	r4, r7
 8013366:	4430      	add	r0, r6
 8013368:	f108 38ff 	add.w	r8, r8, #4294967295
 801336c:	e7ec      	b.n	8013348 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801336e:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8013372:	d411      	bmi.n	8013398 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013374:	45e2      	cmp	sl, ip
 8013376:	da0f      	bge.n	8013398 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013378:	ea5f 4920 	movs.w	r9, r0, asr #16
 801337c:	d40c      	bmi.n	8013398 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801337e:	45f1      	cmp	r9, lr
 8013380:	da0a      	bge.n	8013398 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013382:	fb0c a909 	mla	r9, ip, r9, sl
 8013386:	9a00      	ldr	r2, [sp, #0]
 8013388:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 801338c:	f06f 0201 	mvn.w	r2, #1
 8013390:	fb02 f908 	mul.w	r9, r2, r8
 8013394:	f82b a009 	strh.w	sl, [fp, r9]
 8013398:	443c      	add	r4, r7
 801339a:	4430      	add	r0, r6
 801339c:	f108 38ff 	add.w	r8, r8, #4294967295
 80133a0:	e78c      	b.n	80132bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80133a2:	b003      	add	sp, #12
 80133a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80133a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ac:	b087      	sub	sp, #28
 80133ae:	468b      	mov	fp, r1
 80133b0:	9204      	str	r2, [sp, #16]
 80133b2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80133b6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80133b8:	9201      	str	r2, [sp, #4]
 80133ba:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80133be:	9205      	str	r2, [sp, #20]
 80133c0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80133c4:	6841      	ldr	r1, [r0, #4]
 80133c6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80133ca:	fb01 2404 	mla	r4, r1, r4, r2
 80133ce:	6802      	ldr	r2, [r0, #0]
 80133d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80133d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80133d6:	6812      	ldr	r2, [r2, #0]
 80133d8:	9203      	str	r2, [sp, #12]
 80133da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133de:	f1bb 0f00 	cmp.w	fp, #0
 80133e2:	dc03      	bgt.n	80133ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80133e4:	9a04      	ldr	r2, [sp, #16]
 80133e6:	2a00      	cmp	r2, #0
 80133e8:	f340 812c 	ble.w	8013644 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 80133ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80133ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80133f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133f4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	dd0f      	ble.n	801341c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80133fc:	1402      	asrs	r2, r0, #16
 80133fe:	d406      	bmi.n	801340e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013400:	4542      	cmp	r2, r8
 8013402:	da04      	bge.n	801340e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013404:	140a      	asrs	r2, r1, #16
 8013406:	d402      	bmi.n	801340e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013408:	9d01      	ldr	r5, [sp, #4]
 801340a:	42aa      	cmp	r2, r5
 801340c:	db07      	blt.n	801341e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801340e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013410:	4410      	add	r0, r2
 8013412:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013414:	3b01      	subs	r3, #1
 8013416:	4411      	add	r1, r2
 8013418:	3402      	adds	r4, #2
 801341a:	e7ed      	b.n	80133f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801341c:	d01a      	beq.n	8013454 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801341e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013420:	1e5a      	subs	r2, r3, #1
 8013422:	fb05 0502 	mla	r5, r5, r2, r0
 8013426:	142d      	asrs	r5, r5, #16
 8013428:	d40a      	bmi.n	8013440 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801342a:	4545      	cmp	r5, r8
 801342c:	da08      	bge.n	8013440 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801342e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013430:	fb05 1202 	mla	r2, r5, r2, r1
 8013434:	1412      	asrs	r2, r2, #16
 8013436:	d403      	bmi.n	8013440 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013438:	9d01      	ldr	r5, [sp, #4]
 801343a:	42aa      	cmp	r2, r5
 801343c:	f2c0 80a6 	blt.w	801358c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8013440:	f04f 0c00 	mov.w	ip, #0
 8013444:	eb03 020c 	add.w	r2, r3, ip
 8013448:	2a00      	cmp	r2, #0
 801344a:	dc3e      	bgt.n	80134ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801344c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013450:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013454:	f1bb 0f00 	cmp.w	fp, #0
 8013458:	f340 80f4 	ble.w	8013644 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801345c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013460:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013464:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801346a:	f1bb 0b01 	subs.w	fp, fp, #1
 801346e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013472:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013476:	eeb0 6a62 	vmov.f32	s12, s5
 801347a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801347e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013482:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013486:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801348a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801348e:	eeb0 6a43 	vmov.f32	s12, s6
 8013492:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013496:	ee12 2a90 	vmov	r2, s5
 801349a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801349e:	fb92 f3f3 	sdiv	r3, r2, r3
 80134a2:	ee13 2a10 	vmov	r2, s6
 80134a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80134aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80134ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80134b2:	9a04      	ldr	r2, [sp, #16]
 80134b4:	9314      	str	r3, [sp, #80]	; 0x50
 80134b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80134ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134bc:	eeb0 3a67 	vmov.f32	s6, s15
 80134c0:	bf08      	it	eq
 80134c2:	4613      	moveq	r3, r2
 80134c4:	eef0 2a47 	vmov.f32	s5, s14
 80134c8:	e789      	b.n	80133de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80134ca:	1405      	asrs	r5, r0, #16
 80134cc:	d457      	bmi.n	801357e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80134ce:	4545      	cmp	r5, r8
 80134d0:	da55      	bge.n	801357e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80134d2:	140a      	asrs	r2, r1, #16
 80134d4:	d453      	bmi.n	801357e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80134d6:	9e01      	ldr	r6, [sp, #4]
 80134d8:	42b2      	cmp	r2, r6
 80134da:	da50      	bge.n	801357e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80134dc:	fb08 5202 	mla	r2, r8, r2, r5
 80134e0:	9d03      	ldr	r5, [sp, #12]
 80134e2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80134e6:	0e2e      	lsrs	r6, r5, #24
 80134e8:	d049      	beq.n	801357e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80134ea:	f06f 0201 	mvn.w	r2, #1
 80134ee:	fb02 f20c 	mul.w	r2, r2, ip
 80134f2:	9202      	str	r2, [sp, #8]
 80134f4:	f834 e002 	ldrh.w	lr, [r4, r2]
 80134f8:	9a05      	ldr	r2, [sp, #20]
 80134fa:	4356      	muls	r6, r2
 80134fc:	1c72      	adds	r2, r6, #1
 80134fe:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013502:	1212      	asrs	r2, r2, #8
 8013504:	fa1f f982 	uxth.w	r9, r2
 8013508:	ea4f 272e 	mov.w	r7, lr, asr #8
 801350c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013510:	43d2      	mvns	r2, r2
 8013512:	b2d2      	uxtb	r2, r2
 8013514:	fb16 f609 	smulbb	r6, r6, r9
 8013518:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801351c:	fb07 6702 	mla	r7, r7, r2, r6
 8013520:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013524:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013528:	b2ed      	uxtb	r5, r5
 801352a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801352e:	fa5f fe8e 	uxtb.w	lr, lr
 8013532:	fb15 f509 	smulbb	r5, r5, r9
 8013536:	fb0e 5502 	mla	r5, lr, r2, r5
 801353a:	b2bf      	uxth	r7, r7
 801353c:	fb1a fa09 	smulbb	sl, sl, r9
 8013540:	b2ad      	uxth	r5, r5
 8013542:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013546:	fb06 a602 	mla	r6, r6, r2, sl
 801354a:	1c7a      	adds	r2, r7, #1
 801354c:	f105 0a01 	add.w	sl, r5, #1
 8013550:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013554:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013558:	b2b6      	uxth	r6, r6
 801355a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801355e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013562:	ea47 070a 	orr.w	r7, r7, sl
 8013566:	f106 0a01 	add.w	sl, r6, #1
 801356a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801356e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013572:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013576:	9a02      	ldr	r2, [sp, #8]
 8013578:	ea47 070a 	orr.w	r7, r7, sl
 801357c:	52a7      	strh	r7, [r4, r2]
 801357e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013580:	4410      	add	r0, r2
 8013582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013584:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013588:	4411      	add	r1, r2
 801358a:	e75b      	b.n	8013444 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801358c:	f04f 0e00 	mov.w	lr, #0
 8013590:	eba3 020e 	sub.w	r2, r3, lr
 8013594:	2a00      	cmp	r2, #0
 8013596:	f77f af59 	ble.w	801344c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 801359a:	1405      	asrs	r5, r0, #16
 801359c:	140a      	asrs	r2, r1, #16
 801359e:	fb08 5202 	mla	r2, r8, r2, r5
 80135a2:	9d03      	ldr	r5, [sp, #12]
 80135a4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80135a8:	0e2e      	lsrs	r6, r5, #24
 80135aa:	d044      	beq.n	8013636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80135ac:	9a05      	ldr	r2, [sp, #20]
 80135ae:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80135b2:	4356      	muls	r6, r2
 80135b4:	1c72      	adds	r2, r6, #1
 80135b6:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80135ba:	1212      	asrs	r2, r2, #8
 80135bc:	fa1f f982 	uxth.w	r9, r2
 80135c0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80135c4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80135c8:	43d2      	mvns	r2, r2
 80135ca:	b2d2      	uxtb	r2, r2
 80135cc:	fb16 f609 	smulbb	r6, r6, r9
 80135d0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80135d4:	fb07 6702 	mla	r7, r7, r2, r6
 80135d8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80135dc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80135e0:	b2ed      	uxtb	r5, r5
 80135e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80135e6:	fa5f fc8c 	uxtb.w	ip, ip
 80135ea:	fb15 f509 	smulbb	r5, r5, r9
 80135ee:	fb0c 5502 	mla	r5, ip, r2, r5
 80135f2:	b2bf      	uxth	r7, r7
 80135f4:	fb1a fa09 	smulbb	sl, sl, r9
 80135f8:	b2ad      	uxth	r5, r5
 80135fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80135fe:	fb06 a602 	mla	r6, r6, r2, sl
 8013602:	1c7a      	adds	r2, r7, #1
 8013604:	f105 0a01 	add.w	sl, r5, #1
 8013608:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801360c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013610:	b2b6      	uxth	r6, r6
 8013612:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013616:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801361a:	ea47 070a 	orr.w	r7, r7, sl
 801361e:	f106 0a01 	add.w	sl, r6, #1
 8013622:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013626:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801362a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801362e:	ea47 070a 	orr.w	r7, r7, sl
 8013632:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8013636:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013638:	4410      	add	r0, r2
 801363a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801363c:	f10e 0e01 	add.w	lr, lr, #1
 8013640:	4411      	add	r1, r2
 8013642:	e7a5      	b.n	8013590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8013644:	b007      	add	sp, #28
 8013646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801364c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013650:	b087      	sub	sp, #28
 8013652:	468b      	mov	fp, r1
 8013654:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013656:	9205      	str	r2, [sp, #20]
 8013658:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801365c:	9201      	str	r2, [sp, #4]
 801365e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8013662:	6861      	ldr	r1, [r4, #4]
 8013664:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8013668:	fb01 2000 	mla	r0, r1, r0, r2
 801366c:	6822      	ldr	r2, [r4, #0]
 801366e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8013672:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013674:	6812      	ldr	r2, [r2, #0]
 8013676:	9203      	str	r2, [sp, #12]
 8013678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801367c:	f1bb 0f00 	cmp.w	fp, #0
 8013680:	dc03      	bgt.n	801368a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8013682:	9a05      	ldr	r2, [sp, #20]
 8013684:	2a00      	cmp	r2, #0
 8013686:	f340 814b 	ble.w	8013920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801368a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801368c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013690:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013692:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013696:	2b00      	cmp	r3, #0
 8013698:	dd0f      	ble.n	80136ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801369a:	140c      	asrs	r4, r1, #16
 801369c:	d406      	bmi.n	80136ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801369e:	454c      	cmp	r4, r9
 80136a0:	da04      	bge.n	80136ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80136a2:	1414      	asrs	r4, r2, #16
 80136a4:	d402      	bmi.n	80136ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80136a6:	9d01      	ldr	r5, [sp, #4]
 80136a8:	42ac      	cmp	r4, r5
 80136aa:	db07      	blt.n	80136bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80136ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80136ae:	4421      	add	r1, r4
 80136b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80136b2:	3b01      	subs	r3, #1
 80136b4:	4422      	add	r2, r4
 80136b6:	3002      	adds	r0, #2
 80136b8:	e7ed      	b.n	8013696 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80136ba:	d018      	beq.n	80136ee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80136bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80136be:	1e5c      	subs	r4, r3, #1
 80136c0:	fb05 1504 	mla	r5, r5, r4, r1
 80136c4:	142d      	asrs	r5, r5, #16
 80136c6:	d40a      	bmi.n	80136de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80136c8:	454d      	cmp	r5, r9
 80136ca:	da08      	bge.n	80136de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80136cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80136ce:	fb05 2404 	mla	r4, r5, r4, r2
 80136d2:	1424      	asrs	r4, r4, #16
 80136d4:	d403      	bmi.n	80136de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80136d6:	9d01      	ldr	r5, [sp, #4]
 80136d8:	42ac      	cmp	r4, r5
 80136da:	f2c0 80bb 	blt.w	8013854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 80136de:	2700      	movs	r7, #0
 80136e0:	19dc      	adds	r4, r3, r7
 80136e2:	2c00      	cmp	r4, #0
 80136e4:	dc3e      	bgt.n	8013764 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80136e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80136ee:	f1bb 0f00 	cmp.w	fp, #0
 80136f2:	f340 8115 	ble.w	8013920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 80136f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80136fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80136fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013702:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013704:	f1bb 0b01 	subs.w	fp, fp, #1
 8013708:	ee31 1a05 	vadd.f32	s2, s2, s10
 801370c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013710:	eeb0 6a62 	vmov.f32	s12, s5
 8013714:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013718:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801371c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013720:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013724:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013728:	eeb0 6a43 	vmov.f32	s12, s6
 801372c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013730:	ee12 2a90 	vmov	r2, s5
 8013734:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013738:	fb92 f3f3 	sdiv	r3, r2, r3
 801373c:	ee13 2a10 	vmov	r2, s6
 8013740:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013744:	9313      	str	r3, [sp, #76]	; 0x4c
 8013746:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013748:	fb92 f3f3 	sdiv	r3, r2, r3
 801374c:	9a05      	ldr	r2, [sp, #20]
 801374e:	9314      	str	r3, [sp, #80]	; 0x50
 8013750:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013756:	eeb0 3a67 	vmov.f32	s6, s15
 801375a:	bf08      	it	eq
 801375c:	4613      	moveq	r3, r2
 801375e:	eef0 2a47 	vmov.f32	s5, s14
 8013762:	e78b      	b.n	801367c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8013764:	140d      	asrs	r5, r1, #16
 8013766:	d45c      	bmi.n	8013822 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013768:	454d      	cmp	r5, r9
 801376a:	da5a      	bge.n	8013822 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801376c:	1414      	asrs	r4, r2, #16
 801376e:	d458      	bmi.n	8013822 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013770:	9e01      	ldr	r6, [sp, #4]
 8013772:	42b4      	cmp	r4, r6
 8013774:	da55      	bge.n	8013822 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013776:	fb09 5404 	mla	r4, r9, r4, r5
 801377a:	9d03      	ldr	r5, [sp, #12]
 801377c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8013780:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8013784:	d04d      	beq.n	8013822 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013786:	0a26      	lsrs	r6, r4, #8
 8013788:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801378c:	fa5f f58e 	uxtb.w	r5, lr
 8013790:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8013794:	9604      	str	r6, [sp, #16]
 8013796:	d04a      	beq.n	801382e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8013798:	f06f 0601 	mvn.w	r6, #1
 801379c:	437e      	muls	r6, r7
 801379e:	fa1f fa85 	uxth.w	sl, r5
 80137a2:	f830 8006 	ldrh.w	r8, [r0, r6]
 80137a6:	9602      	str	r6, [sp, #8]
 80137a8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80137ac:	43ed      	mvns	r5, r5
 80137ae:	fa5f fc8c 	uxtb.w	ip, ip
 80137b2:	b2ed      	uxtb	r5, r5
 80137b4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80137b8:	fb1c fc0a 	smulbb	ip, ip, sl
 80137bc:	fb0e cc05 	mla	ip, lr, r5, ip
 80137c0:	b2e4      	uxtb	r4, r4
 80137c2:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 80137c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80137ca:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80137ce:	fa5f f888 	uxtb.w	r8, r8
 80137d2:	fb14 f40a 	smulbb	r4, r4, sl
 80137d6:	fb08 4405 	mla	r4, r8, r5, r4
 80137da:	b2a4      	uxth	r4, r4
 80137dc:	fa1f fc8c 	uxth.w	ip, ip
 80137e0:	fb16 f60a 	smulbb	r6, r6, sl
 80137e4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80137e8:	fb0e 6e05 	mla	lr, lr, r5, r6
 80137ec:	1c66      	adds	r6, r4, #1
 80137ee:	f10c 0501 	add.w	r5, ip, #1
 80137f2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80137f6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80137fa:	fa1f fe8e 	uxth.w	lr, lr
 80137fe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013802:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013806:	ea4c 0c06 	orr.w	ip, ip, r6
 801380a:	f10e 0601 	add.w	r6, lr, #1
 801380e:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8013812:	0976      	lsrs	r6, r6, #5
 8013814:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013818:	9c02      	ldr	r4, [sp, #8]
 801381a:	ea4c 0c06 	orr.w	ip, ip, r6
 801381e:	f820 c004 	strh.w	ip, [r0, r4]
 8013822:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013824:	4421      	add	r1, r4
 8013826:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013828:	3f01      	subs	r7, #1
 801382a:	4422      	add	r2, r4
 801382c:	e758      	b.n	80136e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801382e:	4e3e      	ldr	r6, [pc, #248]	; (8013928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8013830:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8013834:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8013838:	ea4c 0c04 	orr.w	ip, ip, r4
 801383c:	9c04      	ldr	r4, [sp, #16]
 801383e:	f06f 0501 	mvn.w	r5, #1
 8013842:	00e6      	lsls	r6, r4, #3
 8013844:	437d      	muls	r5, r7
 8013846:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801384a:	ea4c 0c04 	orr.w	ip, ip, r4
 801384e:	f820 c005 	strh.w	ip, [r0, r5]
 8013852:	e7e6      	b.n	8013822 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013854:	f04f 0800 	mov.w	r8, #0
 8013858:	eba3 0408 	sub.w	r4, r3, r8
 801385c:	2c00      	cmp	r4, #0
 801385e:	f77f af42 	ble.w	80136e6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8013862:	140d      	asrs	r5, r1, #16
 8013864:	1414      	asrs	r4, r2, #16
 8013866:	fb09 5404 	mla	r4, r9, r4, r5
 801386a:	9d03      	ldr	r5, [sp, #12]
 801386c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8013870:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8013874:	d042      	beq.n	80138fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8013876:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801387a:	fa5f f58c 	uxtb.w	r5, ip
 801387e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8013882:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8013886:	d040      	beq.n	801390a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8013888:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801388c:	fa1f fa85 	uxth.w	sl, r5
 8013890:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013894:	43ed      	mvns	r5, r5
 8013896:	b2ff      	uxtb	r7, r7
 8013898:	b2ed      	uxtb	r5, r5
 801389a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801389e:	fb17 f70a 	smulbb	r7, r7, sl
 80138a2:	fb0c 7705 	mla	r7, ip, r5, r7
 80138a6:	b2e4      	uxtb	r4, r4
 80138a8:	ea4f 0cee 	mov.w	ip, lr, asr #3
 80138ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80138b0:	fa5f fe8e 	uxtb.w	lr, lr
 80138b4:	fb14 f40a 	smulbb	r4, r4, sl
 80138b8:	fb0e 4405 	mla	r4, lr, r5, r4
 80138bc:	b2f6      	uxtb	r6, r6
 80138be:	b2bf      	uxth	r7, r7
 80138c0:	fb16 f60a 	smulbb	r6, r6, sl
 80138c4:	b2a4      	uxth	r4, r4
 80138c6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80138ca:	fb0c 6c05 	mla	ip, ip, r5, r6
 80138ce:	1c7d      	adds	r5, r7, #1
 80138d0:	1c66      	adds	r6, r4, #1
 80138d2:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80138d6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80138da:	fa1f fc8c 	uxth.w	ip, ip
 80138de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80138e2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80138e6:	4337      	orrs	r7, r6
 80138e8:	f10c 0601 	add.w	r6, ip, #1
 80138ec:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80138f0:	0976      	lsrs	r6, r6, #5
 80138f2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80138f6:	4337      	orrs	r7, r6
 80138f8:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 80138fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80138fe:	4421      	add	r1, r4
 8013900:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013902:	f108 0801 	add.w	r8, r8, #1
 8013906:	4422      	add	r2, r4
 8013908:	e7a6      	b.n	8013858 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 801390a:	4d07      	ldr	r5, [pc, #28]	; (8013928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 801390c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8013910:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8013914:	00f6      	lsls	r6, r6, #3
 8013916:	4327      	orrs	r7, r4
 8013918:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801391c:	4327      	orrs	r7, r4
 801391e:	e7eb      	b.n	80138f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8013920:	b007      	add	sp, #28
 8013922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013926:	bf00      	nop
 8013928:	fffff800 	.word	0xfffff800

0801392c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013930:	b089      	sub	sp, #36	; 0x24
 8013932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013936:	9206      	str	r2, [sp, #24]
 8013938:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 801393c:	9202      	str	r2, [sp, #8]
 801393e:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8013942:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8013944:	9203      	str	r2, [sp, #12]
 8013946:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801394a:	9207      	str	r2, [sp, #28]
 801394c:	e9dd 2518 	ldrd	r2, r5, [sp, #96]	; 0x60
 8013950:	6860      	ldr	r0, [r4, #4]
 8013952:	9101      	str	r1, [sp, #4]
 8013954:	fb00 2505 	mla	r5, r0, r5, r2
 8013958:	6822      	ldr	r2, [r4, #0]
 801395a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801395e:	9a02      	ldr	r2, [sp, #8]
 8013960:	3201      	adds	r2, #1
 8013962:	f022 0201 	bic.w	r2, r2, #1
 8013966:	9204      	str	r2, [sp, #16]
 8013968:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801396a:	6812      	ldr	r2, [r2, #0]
 801396c:	9205      	str	r2, [sp, #20]
 801396e:	9a01      	ldr	r2, [sp, #4]
 8013970:	2a00      	cmp	r2, #0
 8013972:	dc03      	bgt.n	801397c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8013974:	9a06      	ldr	r2, [sp, #24]
 8013976:	2a00      	cmp	r2, #0
 8013978:	f340 8153 	ble.w	8013c22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801397c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801397e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013982:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013984:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013988:	2b00      	cmp	r3, #0
 801398a:	dd10      	ble.n	80139ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 801398c:	1422      	asrs	r2, r4, #16
 801398e:	d407      	bmi.n	80139a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013990:	9e02      	ldr	r6, [sp, #8]
 8013992:	4296      	cmp	r6, r2
 8013994:	dd04      	ble.n	80139a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013996:	1402      	asrs	r2, r0, #16
 8013998:	d402      	bmi.n	80139a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801399a:	9e03      	ldr	r6, [sp, #12]
 801399c:	42b2      	cmp	r2, r6
 801399e:	db07      	blt.n	80139b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80139a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80139a2:	4414      	add	r4, r2
 80139a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80139a6:	3b01      	subs	r3, #1
 80139a8:	4410      	add	r0, r2
 80139aa:	3502      	adds	r5, #2
 80139ac:	e7ec      	b.n	8013988 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80139ae:	d00f      	beq.n	80139d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 80139b0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80139b2:	1e5a      	subs	r2, r3, #1
 80139b4:	fb06 4602 	mla	r6, r6, r2, r4
 80139b8:	1436      	asrs	r6, r6, #16
 80139ba:	d545      	bpl.n	8013a48 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 80139bc:	469a      	mov	sl, r3
 80139be:	46a9      	mov	r9, r5
 80139c0:	f1ba 0f00 	cmp.w	sl, #0
 80139c4:	f300 80ba 	bgt.w	8013b3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80139c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80139cc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80139d0:	9b01      	ldr	r3, [sp, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f340 8125 	ble.w	8013c22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80139d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80139dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80139e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80139e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80139ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80139ee:	eeb0 6a62 	vmov.f32	s12, s5
 80139f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80139f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80139fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80139fe:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8013a02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013a06:	eeb0 6a43 	vmov.f32	s12, s6
 8013a0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013a0e:	ee12 2a90 	vmov	r2, s5
 8013a12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a1a:	ee13 2a10 	vmov	r2, s6
 8013a1e:	9315      	str	r3, [sp, #84]	; 0x54
 8013a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a26:	9316      	str	r3, [sp, #88]	; 0x58
 8013a28:	9b01      	ldr	r3, [sp, #4]
 8013a2a:	9a06      	ldr	r2, [sp, #24]
 8013a2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013a30:	3b01      	subs	r3, #1
 8013a32:	9301      	str	r3, [sp, #4]
 8013a34:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8013a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a3a:	eeb0 3a67 	vmov.f32	s6, s15
 8013a3e:	bf08      	it	eq
 8013a40:	4613      	moveq	r3, r2
 8013a42:	eef0 2a47 	vmov.f32	s5, s14
 8013a46:	e792      	b.n	801396e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8013a48:	9f02      	ldr	r7, [sp, #8]
 8013a4a:	42b7      	cmp	r7, r6
 8013a4c:	ddb6      	ble.n	80139bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8013a4e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8013a50:	fb06 0202 	mla	r2, r6, r2, r0
 8013a54:	1412      	asrs	r2, r2, #16
 8013a56:	d4b1      	bmi.n	80139bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8013a58:	9e03      	ldr	r6, [sp, #12]
 8013a5a:	42b2      	cmp	r2, r6
 8013a5c:	daae      	bge.n	80139bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8013a5e:	f04f 0800 	mov.w	r8, #0
 8013a62:	eba3 0208 	sub.w	r2, r3, r8
 8013a66:	2a00      	cmp	r2, #0
 8013a68:	ddae      	ble.n	80139c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013a6a:	9904      	ldr	r1, [sp, #16]
 8013a6c:	1422      	asrs	r2, r4, #16
 8013a6e:	1406      	asrs	r6, r0, #16
 8013a70:	fb01 2606 	mla	r6, r1, r6, r2
 8013a74:	0872      	lsrs	r2, r6, #1
 8013a76:	9905      	ldr	r1, [sp, #20]
 8013a78:	5c8a      	ldrb	r2, [r1, r2]
 8013a7a:	07f1      	lsls	r1, r6, #31
 8013a7c:	bf54      	ite	pl
 8013a7e:	f002 020f 	andpl.w	r2, r2, #15
 8013a82:	1112      	asrmi	r2, r2, #4
 8013a84:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013a88:	b2d2      	uxtb	r2, r2
 8013a8a:	2a00      	cmp	r2, #0
 8013a8c:	d04f      	beq.n	8013b2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8013a8e:	4966      	ldr	r1, [pc, #408]	; (8013c28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8013a90:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8013a94:	680e      	ldr	r6, [r1, #0]
 8013a96:	9907      	ldr	r1, [sp, #28]
 8013a98:	434a      	muls	r2, r1
 8013a9a:	1c57      	adds	r7, r2, #1
 8013a9c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8013aa0:	1212      	asrs	r2, r2, #8
 8013aa2:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8013aa6:	fa1f fa82 	uxth.w	sl, r2
 8013aaa:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013aae:	43d2      	mvns	r2, r2
 8013ab0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013ab4:	b2d2      	uxtb	r2, r2
 8013ab6:	fb1c fc0a 	smulbb	ip, ip, sl
 8013aba:	f3c6 09cc 	ubfx	r9, r6, #3, #13
 8013abe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013ac2:	495a      	ldr	r1, [pc, #360]	; (8013c2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8013ac4:	fb07 c702 	mla	r7, r7, r2, ip
 8013ac8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013acc:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8013ad0:	fb19 f90a 	smulbb	r9, r9, sl
 8013ad4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8013ad8:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8013adc:	fb0c 9c02 	mla	ip, ip, r2, r9
 8013ae0:	b2f6      	uxtb	r6, r6
 8013ae2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013ae6:	fa1f fc8c 	uxth.w	ip, ip
 8013aea:	fa5f fe8e 	uxtb.w	lr, lr
 8013aee:	fb16 f60a 	smulbb	r6, r6, sl
 8013af2:	b2bf      	uxth	r7, r7
 8013af4:	fb0e 6602 	mla	r6, lr, r2, r6
 8013af8:	f10c 0901 	add.w	r9, ip, #1
 8013afc:	b2b6      	uxth	r6, r6
 8013afe:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8013b02:	f107 0b01 	add.w	fp, r7, #1
 8013b06:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013b0a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8013b0e:	f106 0e01 	add.w	lr, r6, #1
 8013b12:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8013b16:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013b1a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8013b1e:	ea4c 0c07 	orr.w	ip, ip, r7
 8013b22:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8013b26:	ea4c 0c0e 	orr.w	ip, ip, lr
 8013b2a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8013b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013b30:	4414      	add	r4, r2
 8013b32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013b34:	f108 0801 	add.w	r8, r8, #1
 8013b38:	4410      	add	r0, r2
 8013b3a:	e792      	b.n	8013a62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8013b3c:	1422      	asrs	r2, r4, #16
 8013b3e:	d467      	bmi.n	8013c10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8013b40:	9e02      	ldr	r6, [sp, #8]
 8013b42:	4296      	cmp	r6, r2
 8013b44:	dd64      	ble.n	8013c10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8013b46:	1406      	asrs	r6, r0, #16
 8013b48:	d462      	bmi.n	8013c10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8013b4a:	9f03      	ldr	r7, [sp, #12]
 8013b4c:	42be      	cmp	r6, r7
 8013b4e:	da5f      	bge.n	8013c10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8013b50:	9f04      	ldr	r7, [sp, #16]
 8013b52:	fb06 2607 	mla	r6, r6, r7, r2
 8013b56:	0872      	lsrs	r2, r6, #1
 8013b58:	9f05      	ldr	r7, [sp, #20]
 8013b5a:	5cba      	ldrb	r2, [r7, r2]
 8013b5c:	07f6      	lsls	r6, r6, #31
 8013b5e:	bf54      	ite	pl
 8013b60:	f002 020f 	andpl.w	r2, r2, #15
 8013b64:	1112      	asrmi	r2, r2, #4
 8013b66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013b6a:	b2d2      	uxtb	r2, r2
 8013b6c:	2a00      	cmp	r2, #0
 8013b6e:	d04f      	beq.n	8013c10 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8013b70:	9f07      	ldr	r7, [sp, #28]
 8013b72:	4e2d      	ldr	r6, [pc, #180]	; (8013c28 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8013b74:	f8b9 e000 	ldrh.w	lr, [r9]
 8013b78:	6836      	ldr	r6, [r6, #0]
 8013b7a:	492c      	ldr	r1, [pc, #176]	; (8013c2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8013b7c:	437a      	muls	r2, r7
 8013b7e:	1c57      	adds	r7, r2, #1
 8013b80:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8013b84:	1212      	asrs	r2, r2, #8
 8013b86:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8013b8a:	fa1f fb82 	uxth.w	fp, r2
 8013b8e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013b92:	43d2      	mvns	r2, r2
 8013b94:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013b98:	b2d2      	uxtb	r2, r2
 8013b9a:	fb1c fc0b 	smulbb	ip, ip, fp
 8013b9e:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8013ba2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013ba6:	fb07 c702 	mla	r7, r7, r2, ip
 8013baa:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8013bae:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8013bb2:	fb18 f80b 	smulbb	r8, r8, fp
 8013bb6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8013bba:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8013bbe:	fb0c 8c02 	mla	ip, ip, r2, r8
 8013bc2:	b2f6      	uxtb	r6, r6
 8013bc4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013bc8:	fa1f fc8c 	uxth.w	ip, ip
 8013bcc:	fa5f fe8e 	uxtb.w	lr, lr
 8013bd0:	fb16 f60b 	smulbb	r6, r6, fp
 8013bd4:	b2bf      	uxth	r7, r7
 8013bd6:	fb0e 6602 	mla	r6, lr, r2, r6
 8013bda:	f10c 0801 	add.w	r8, ip, #1
 8013bde:	b2b6      	uxth	r6, r6
 8013be0:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8013be4:	f107 0801 	add.w	r8, r7, #1
 8013be8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013bec:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8013bf0:	f106 0e01 	add.w	lr, r6, #1
 8013bf4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8013bf8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013bfc:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8013c00:	ea4c 0c07 	orr.w	ip, ip, r7
 8013c04:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8013c08:	ea4c 0c0e 	orr.w	ip, ip, lr
 8013c0c:	f8a9 c000 	strh.w	ip, [r9]
 8013c10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c12:	4414      	add	r4, r2
 8013c14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013c16:	f109 0902 	add.w	r9, r9, #2
 8013c1a:	4410      	add	r0, r2
 8013c1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c20:	e6ce      	b.n	80139c0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8013c22:	b009      	add	sp, #36	; 0x24
 8013c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c28:	2002edd4 	.word	0x2002edd4
 8013c2c:	0007fff8 	.word	0x0007fff8

08013c30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c34:	b087      	sub	sp, #28
 8013c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c3a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013c3c:	9205      	str	r2, [sp, #20]
 8013c3e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013c42:	9201      	str	r2, [sp, #4]
 8013c44:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8013c48:	6860      	ldr	r0, [r4, #4]
 8013c4a:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 8013c4e:	9100      	str	r1, [sp, #0]
 8013c50:	fb00 2505 	mla	r5, r0, r5, r2
 8013c54:	6822      	ldr	r2, [r4, #0]
 8013c56:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8013c5a:	f10b 0201 	add.w	r2, fp, #1
 8013c5e:	f022 0201 	bic.w	r2, r2, #1
 8013c62:	9203      	str	r2, [sp, #12]
 8013c64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c66:	6812      	ldr	r2, [r2, #0]
 8013c68:	9204      	str	r2, [sp, #16]
 8013c6a:	9a00      	ldr	r2, [sp, #0]
 8013c6c:	2a00      	cmp	r2, #0
 8013c6e:	dc03      	bgt.n	8013c78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8013c70:	9a05      	ldr	r2, [sp, #20]
 8013c72:	2a00      	cmp	r2, #0
 8013c74:	f340 815c 	ble.w	8013f30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8013c78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013c7a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013c7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c80:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	dd0f      	ble.n	8013ca8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013c88:	1422      	asrs	r2, r4, #16
 8013c8a:	d406      	bmi.n	8013c9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013c8c:	4593      	cmp	fp, r2
 8013c8e:	dd04      	ble.n	8013c9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013c90:	1402      	asrs	r2, r0, #16
 8013c92:	d402      	bmi.n	8013c9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013c94:	9e01      	ldr	r6, [sp, #4]
 8013c96:	42b2      	cmp	r2, r6
 8013c98:	db07      	blt.n	8013caa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8013c9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013c9c:	4414      	add	r4, r2
 8013c9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	4410      	add	r0, r2
 8013ca4:	3502      	adds	r5, #2
 8013ca6:	e7ed      	b.n	8013c84 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8013ca8:	d018      	beq.n	8013cdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8013caa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013cac:	1e5a      	subs	r2, r3, #1
 8013cae:	fb06 4602 	mla	r6, r6, r2, r4
 8013cb2:	1436      	asrs	r6, r6, #16
 8013cb4:	d40a      	bmi.n	8013ccc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013cb6:	45b3      	cmp	fp, r6
 8013cb8:	dd08      	ble.n	8013ccc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013cba:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013cbc:	fb06 0202 	mla	r2, r6, r2, r0
 8013cc0:	1412      	asrs	r2, r2, #16
 8013cc2:	d403      	bmi.n	8013ccc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013cc4:	9e01      	ldr	r6, [sp, #4]
 8013cc6:	42b2      	cmp	r2, r6
 8013cc8:	f2c0 80bf 	blt.w	8013e4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 8013ccc:	2700      	movs	r7, #0
 8013cce:	19da      	adds	r2, r3, r7
 8013cd0:	2a00      	cmp	r2, #0
 8013cd2:	dc3f      	bgt.n	8013d54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8013cd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013cd8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8013cdc:	9b00      	ldr	r3, [sp, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	f340 8126 	ble.w	8013f30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8013ce4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ce8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013cec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013cf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013cf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013cfa:	eeb0 6a62 	vmov.f32	s12, s5
 8013cfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013d02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013d0a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013d0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013d12:	eeb0 6a43 	vmov.f32	s12, s6
 8013d16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013d1a:	ee12 2a90 	vmov	r2, s5
 8013d1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d26:	ee13 2a10 	vmov	r2, s6
 8013d2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8013d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d32:	9314      	str	r3, [sp, #80]	; 0x50
 8013d34:	9b00      	ldr	r3, [sp, #0]
 8013d36:	9a05      	ldr	r2, [sp, #20]
 8013d38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d46:	eeb0 3a67 	vmov.f32	s6, s15
 8013d4a:	bf08      	it	eq
 8013d4c:	4613      	moveq	r3, r2
 8013d4e:	eef0 2a47 	vmov.f32	s5, s14
 8013d52:	e78a      	b.n	8013c6a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8013d54:	1422      	asrs	r2, r4, #16
 8013d56:	d466      	bmi.n	8013e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013d58:	4593      	cmp	fp, r2
 8013d5a:	dd64      	ble.n	8013e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013d5c:	1406      	asrs	r6, r0, #16
 8013d5e:	d462      	bmi.n	8013e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013d60:	9901      	ldr	r1, [sp, #4]
 8013d62:	428e      	cmp	r6, r1
 8013d64:	da5f      	bge.n	8013e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013d66:	9903      	ldr	r1, [sp, #12]
 8013d68:	fb06 2601 	mla	r6, r6, r1, r2
 8013d6c:	0872      	lsrs	r2, r6, #1
 8013d6e:	9904      	ldr	r1, [sp, #16]
 8013d70:	5c8a      	ldrb	r2, [r1, r2]
 8013d72:	07f6      	lsls	r6, r6, #31
 8013d74:	bf54      	ite	pl
 8013d76:	f002 020f 	andpl.w	r2, r2, #15
 8013d7a:	1112      	asrmi	r2, r2, #4
 8013d7c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013d80:	b2d2      	uxtb	r2, r2
 8013d82:	2a00      	cmp	r2, #0
 8013d84:	d04f      	beq.n	8013e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013d86:	496c      	ldr	r1, [pc, #432]	; (8013f38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 8013d88:	680e      	ldr	r6, [r1, #0]
 8013d8a:	496c      	ldr	r1, [pc, #432]	; (8013f3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 8013d8c:	ea4f 2926 	mov.w	r9, r6, asr #8
 8013d90:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8013d94:	2aff      	cmp	r2, #255	; 0xff
 8013d96:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8013d9a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8013d9e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8013da2:	b2f6      	uxtb	r6, r6
 8013da4:	d045      	beq.n	8013e32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8013da6:	f06f 0101 	mvn.w	r1, #1
 8013daa:	4379      	muls	r1, r7
 8013dac:	fa1f fa82 	uxth.w	sl, r2
 8013db0:	f835 e001 	ldrh.w	lr, [r5, r1]
 8013db4:	9102      	str	r1, [sp, #8]
 8013db6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013dba:	43d2      	mvns	r2, r2
 8013dbc:	b2d2      	uxtb	r2, r2
 8013dbe:	fb19 f90a 	smulbb	r9, r9, sl
 8013dc2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013dc6:	fb0c 9c02 	mla	ip, ip, r2, r9
 8013dca:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8013dce:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013dd2:	fb18 f80a 	smulbb	r8, r8, sl
 8013dd6:	fb09 8802 	mla	r8, r9, r2, r8
 8013dda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013dde:	fa1f f888 	uxth.w	r8, r8
 8013de2:	fa5f fe8e 	uxtb.w	lr, lr
 8013de6:	fb16 f60a 	smulbb	r6, r6, sl
 8013dea:	fa1f fc8c 	uxth.w	ip, ip
 8013dee:	fb0e 6602 	mla	r6, lr, r2, r6
 8013df2:	f108 0901 	add.w	r9, r8, #1
 8013df6:	b2b6      	uxth	r6, r6
 8013df8:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8013dfc:	f10c 0901 	add.w	r9, ip, #1
 8013e00:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013e04:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8013e08:	1c72      	adds	r2, r6, #1
 8013e0a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8013e0e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013e12:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8013e16:	ea48 080c 	orr.w	r8, r8, ip
 8013e1a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013e1e:	ea48 0806 	orr.w	r8, r8, r6
 8013e22:	f825 8001 	strh.w	r8, [r5, r1]
 8013e26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013e28:	4414      	add	r4, r2
 8013e2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e2c:	3f01      	subs	r7, #1
 8013e2e:	4410      	add	r0, r2
 8013e30:	e74d      	b.n	8013cce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8013e32:	f06f 0201 	mvn.w	r2, #1
 8013e36:	08f6      	lsrs	r6, r6, #3
 8013e38:	fb02 fe07 	mul.w	lr, r2, r7
 8013e3c:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8013e40:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 8013e44:	f825 600e 	strh.w	r6, [r5, lr]
 8013e48:	e7ed      	b.n	8013e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013e4a:	f04f 0e00 	mov.w	lr, #0
 8013e4e:	eba3 020e 	sub.w	r2, r3, lr
 8013e52:	2a00      	cmp	r2, #0
 8013e54:	f77f af3e 	ble.w	8013cd4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8013e58:	9903      	ldr	r1, [sp, #12]
 8013e5a:	1422      	asrs	r2, r4, #16
 8013e5c:	1406      	asrs	r6, r0, #16
 8013e5e:	fb01 2606 	mla	r6, r1, r6, r2
 8013e62:	0872      	lsrs	r2, r6, #1
 8013e64:	9904      	ldr	r1, [sp, #16]
 8013e66:	5c8a      	ldrb	r2, [r1, r2]
 8013e68:	07f1      	lsls	r1, r6, #31
 8013e6a:	bf54      	ite	pl
 8013e6c:	f002 020f 	andpl.w	r2, r2, #15
 8013e70:	1112      	asrmi	r2, r2, #4
 8013e72:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013e76:	b2d2      	uxtb	r2, r2
 8013e78:	2a00      	cmp	r2, #0
 8013e7a:	d04a      	beq.n	8013f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 8013e7c:	492e      	ldr	r1, [pc, #184]	; (8013f38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 8013e7e:	680e      	ldr	r6, [r1, #0]
 8013e80:	492e      	ldr	r1, [pc, #184]	; (8013f3c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 8013e82:	ea4f 2926 	mov.w	r9, r6, asr #8
 8013e86:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8013e8a:	2aff      	cmp	r2, #255	; 0xff
 8013e8c:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8013e90:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8013e94:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8013e98:	b2f6      	uxtb	r6, r6
 8013e9a:	d041      	beq.n	8013f20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f0>
 8013e9c:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 8013ea0:	fa1f fa82 	uxth.w	sl, r2
 8013ea4:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013ea8:	43d2      	mvns	r2, r2
 8013eaa:	b2d2      	uxtb	r2, r2
 8013eac:	fb19 f90a 	smulbb	r9, r9, sl
 8013eb0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013eb4:	fb07 9702 	mla	r7, r7, r2, r9
 8013eb8:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8013ebc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013ec0:	fb18 f80a 	smulbb	r8, r8, sl
 8013ec4:	fb09 8802 	mla	r8, r9, r2, r8
 8013ec8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013ecc:	fa1f f888 	uxth.w	r8, r8
 8013ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8013ed4:	fb16 f60a 	smulbb	r6, r6, sl
 8013ed8:	b2bf      	uxth	r7, r7
 8013eda:	fb0c 6602 	mla	r6, ip, r2, r6
 8013ede:	f108 0901 	add.w	r9, r8, #1
 8013ee2:	b2b6      	uxth	r6, r6
 8013ee4:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8013ee8:	f107 0901 	add.w	r9, r7, #1
 8013eec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013ef0:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8013ef4:	1c72      	adds	r2, r6, #1
 8013ef6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8013efa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013efe:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8013f02:	ea48 0807 	orr.w	r8, r8, r7
 8013f06:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013f0a:	ea48 0806 	orr.w	r8, r8, r6
 8013f0e:	f825 801e 	strh.w	r8, [r5, lr, lsl #1]
 8013f12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f14:	4414      	add	r4, r2
 8013f16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013f18:	f10e 0e01 	add.w	lr, lr, #1
 8013f1c:	4410      	add	r0, r2
 8013f1e:	e796      	b.n	8013e4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8013f20:	08f6      	lsrs	r6, r6, #3
 8013f22:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8013f26:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 8013f2a:	f825 601e 	strh.w	r6, [r5, lr, lsl #1]
 8013f2e:	e7f0      	b.n	8013f12 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 8013f30:	b007      	add	sp, #28
 8013f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f36:	bf00      	nop
 8013f38:	2002edd4 	.word	0x2002edd4
 8013f3c:	0007fff8 	.word	0x0007fff8

08013f40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8013f40:	4770      	bx	lr

08013f42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8013f42:	4770      	bx	lr

08013f44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8013f44:	4770      	bx	lr

08013f46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8013f46:	4770      	bx	lr

08013f48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013f48:	4770      	bx	lr

08013f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013f4a:	4770      	bx	lr

08013f4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8013f4c:	4770      	bx	lr

08013f4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8013f4e:	4770      	bx	lr

08013f50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8013f50:	4770      	bx	lr

08013f52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8013f52:	4770      	bx	lr

08013f54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013f54:	4770      	bx	lr

08013f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013f56:	4770      	bx	lr

08013f58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013f58:	4770      	bx	lr

08013f5a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8013f5a:	4770      	bx	lr

08013f5c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8013f5c:	4770      	bx	lr

08013f5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8013f5e:	4770      	bx	lr

08013f60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8013f60:	4770      	bx	lr

08013f62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8013f62:	4770      	bx	lr

08013f64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8013f64:	4770      	bx	lr

08013f66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8013f66:	4770      	bx	lr

08013f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8013f68:	4770      	bx	lr

08013f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8013f6a:	4770      	bx	lr

08013f6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013f6c:	4770      	bx	lr

08013f6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8013f6e:	4770      	bx	lr

08013f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8013f70:	4770      	bx	lr

08013f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8013f72:	4770      	bx	lr

08013f74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8013f74:	4770      	bx	lr

08013f76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8013f76:	4770      	bx	lr

08013f78 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8013f78:	b508      	push	{r3, lr}
 8013f7a:	4b06      	ldr	r3, [pc, #24]	; (8013f94 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8013f7c:	8818      	ldrh	r0, [r3, #0]
 8013f7e:	b928      	cbnz	r0, 8013f8c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8013f80:	4b05      	ldr	r3, [pc, #20]	; (8013f98 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8013f82:	4a06      	ldr	r2, [pc, #24]	; (8013f9c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8013f84:	4806      	ldr	r0, [pc, #24]	; (8013fa0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8013f86:	21d7      	movs	r1, #215	; 0xd7
 8013f88:	f009 f894 	bl	801d0b4 <__assert_func>
 8013f8c:	0040      	lsls	r0, r0, #1
 8013f8e:	b280      	uxth	r0, r0
 8013f90:	bd08      	pop	{r3, pc}
 8013f92:	bf00      	nop
 8013f94:	2002edc6 	.word	0x2002edc6
 8013f98:	080209dd 	.word	0x080209dd
 8013f9c:	08020f63 	.word	0x08020f63
 8013fa0:	08020a1f 	.word	0x08020a1f

08013fa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8013fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa8:	b08d      	sub	sp, #52	; 0x34
 8013faa:	460f      	mov	r7, r1
 8013fac:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8013fb0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8013fb4:	4616      	mov	r6, r2
 8013fb6:	f1b9 0f00 	cmp.w	r9, #0
 8013fba:	d046      	beq.n	801404a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8013fbc:	6810      	ldr	r0, [r2, #0]
 8013fbe:	6851      	ldr	r1, [r2, #4]
 8013fc0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8014188 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8013fc4:	ad08      	add	r5, sp, #32
 8013fc6:	c503      	stmia	r5!, {r0, r1}
 8013fc8:	6818      	ldr	r0, [r3, #0]
 8013fca:	6859      	ldr	r1, [r3, #4]
 8013fcc:	ad0a      	add	r5, sp, #40	; 0x28
 8013fce:	c503      	stmia	r5!, {r0, r1}
 8013fd0:	a808      	add	r0, sp, #32
 8013fd2:	f7fb fca5 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013fd6:	4631      	mov	r1, r6
 8013fd8:	a80a      	add	r0, sp, #40	; 0x28
 8013fda:	f7fb fc89 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013fde:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8013fe2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8013fe6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8013fea:	f8d8 0000 	ldr.w	r0, [r8]
 8013fee:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8013ff2:	fb16 2103 	smlabb	r1, r6, r3, r2
 8013ff6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8013ffa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8013ffe:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8014002:	440a      	add	r2, r1
 8014004:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014008:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801400c:	4413      	add	r3, r2
 801400e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014012:	6803      	ldr	r3, [r0, #0]
 8014014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014016:	4798      	blx	r3
 8014018:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801401c:	d018      	beq.n	8014050 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801401e:	f010 0f04 	tst.w	r0, #4
 8014022:	d019      	beq.n	8014058 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8014024:	f8d8 0000 	ldr.w	r0, [r8]
 8014028:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801402c:	6801      	ldr	r1, [r0, #0]
 801402e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8014032:	e9cd 9403 	strd	r9, r4, [sp, #12]
 8014036:	b2bf      	uxth	r7, r7
 8014038:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801403c:	9402      	str	r4, [sp, #8]
 801403e:	b2ad      	uxth	r5, r5
 8014040:	9701      	str	r7, [sp, #4]
 8014042:	9500      	str	r5, [sp, #0]
 8014044:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8014046:	4631      	mov	r1, r6
 8014048:	47a0      	blx	r4
 801404a:	b00d      	add	sp, #52	; 0x34
 801404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014050:	b914      	cbnz	r4, 8014058 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8014052:	f010 0f01 	tst.w	r0, #1
 8014056:	e7e4      	b.n	8014022 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8014058:	f8d8 0000 	ldr.w	r0, [r8]
 801405c:	6803      	ldr	r3, [r0, #0]
 801405e:	6a1b      	ldr	r3, [r3, #32]
 8014060:	4798      	blx	r3
 8014062:	4a48      	ldr	r2, [pc, #288]	; (8014184 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 8014064:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8014068:	8814      	ldrh	r4, [r2, #0]
 801406a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801406e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014072:	fb01 3404 	mla	r4, r1, r4, r3
 8014076:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801407a:	4692      	mov	sl, r2
 801407c:	d118      	bne.n	80140b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 801407e:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 8014082:	f04f 0900 	mov.w	r9, #0
 8014086:	f8d8 0000 	ldr.w	r0, [r8]
 801408a:	45b9      	cmp	r9, r7
 801408c:	6803      	ldr	r3, [r0, #0]
 801408e:	da73      	bge.n	8014178 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 8014090:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8014092:	4632      	mov	r2, r6
 8014094:	465b      	mov	r3, fp
 8014096:	4621      	mov	r1, r4
 8014098:	47a8      	blx	r5
 801409a:	f8ba 3000 	ldrh.w	r3, [sl]
 801409e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80140a2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80140a6:	f109 0901 	add.w	r9, r9, #1
 80140aa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80140ae:	e7ea      	b.n	8014086 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 80140b0:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 80140b4:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 80140b8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80140bc:	f04f 0b00 	mov.w	fp, #0
 80140c0:	fa1f f389 	uxth.w	r3, r9
 80140c4:	fa1f f888 	uxth.w	r8, r8
 80140c8:	9207      	str	r2, [sp, #28]
 80140ca:	45bb      	cmp	fp, r7
 80140cc:	da54      	bge.n	8014178 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 80140ce:	f04f 0e00 	mov.w	lr, #0
 80140d2:	45ae      	cmp	lr, r5
 80140d4:	da41      	bge.n	801415a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 80140d6:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 80140da:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 80140de:	1208      	asrs	r0, r1, #8
 80140e0:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80140e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80140e8:	fb10 f008 	smulbb	r0, r0, r8
 80140ec:	ea4f 09e1 	mov.w	r9, r1, asr #3
 80140f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80140f4:	00c9      	lsls	r1, r1, #3
 80140f6:	fb0c 0c03 	mla	ip, ip, r3, r0
 80140fa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80140fe:	10d0      	asrs	r0, r2, #3
 8014100:	b2c9      	uxtb	r1, r1
 8014102:	00d2      	lsls	r2, r2, #3
 8014104:	fa1f fc8c 	uxth.w	ip, ip
 8014108:	fb19 f908 	smulbb	r9, r9, r8
 801410c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8014110:	b2d2      	uxtb	r2, r2
 8014112:	fb11 f108 	smulbb	r1, r1, r8
 8014116:	fb00 9003 	mla	r0, r0, r3, r9
 801411a:	fb02 1203 	mla	r2, r2, r3, r1
 801411e:	f10c 0901 	add.w	r9, ip, #1
 8014122:	b292      	uxth	r2, r2
 8014124:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8014128:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801412c:	f102 0c01 	add.w	ip, r2, #1
 8014130:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8014134:	b280      	uxth	r0, r0
 8014136:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801413a:	ea49 0c02 	orr.w	ip, r9, r2
 801413e:	f100 0901 	add.w	r9, r0, #1
 8014142:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8014146:	0940      	lsrs	r0, r0, #5
 8014148:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801414c:	ea4c 0c00 	orr.w	ip, ip, r0
 8014150:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 8014154:	f10e 0e01 	add.w	lr, lr, #1
 8014158:	e7bb      	b.n	80140d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801415a:	9a07      	ldr	r2, [sp, #28]
 801415c:	8812      	ldrh	r2, [r2, #0]
 801415e:	1b52      	subs	r2, r2, r5
 8014160:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8014164:	4414      	add	r4, r2
 8014166:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801416a:	1b52      	subs	r2, r2, r5
 801416c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8014170:	4416      	add	r6, r2
 8014172:	f10b 0b01 	add.w	fp, fp, #1
 8014176:	e7a8      	b.n	80140ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 8014178:	4b03      	ldr	r3, [pc, #12]	; (8014188 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801417a:	6818      	ldr	r0, [r3, #0]
 801417c:	6803      	ldr	r3, [r0, #0]
 801417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014180:	4798      	blx	r3
 8014182:	e762      	b.n	801404a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8014184:	2002edc6 	.word	0x2002edc6
 8014188:	2002edcc 	.word	0x2002edcc

0801418c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801418c:	b510      	push	{r4, lr}
 801418e:	2104      	movs	r1, #4
 8014190:	4604      	mov	r4, r0
 8014192:	f008 ff63 	bl	801d05c <_ZdlPvj>
 8014196:	4620      	mov	r0, r4
 8014198:	bd10      	pop	{r4, pc}

0801419a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801419a:	b510      	push	{r4, lr}
 801419c:	2104      	movs	r1, #4
 801419e:	4604      	mov	r4, r0
 80141a0:	f008 ff5c 	bl	801d05c <_ZdlPvj>
 80141a4:	4620      	mov	r0, r4
 80141a6:	bd10      	pop	{r4, pc}

080141a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	2104      	movs	r1, #4
 80141ac:	4604      	mov	r4, r0
 80141ae:	f008 ff55 	bl	801d05c <_ZdlPvj>
 80141b2:	4620      	mov	r0, r4
 80141b4:	bd10      	pop	{r4, pc}

080141b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80141b6:	b510      	push	{r4, lr}
 80141b8:	2104      	movs	r1, #4
 80141ba:	4604      	mov	r4, r0
 80141bc:	f008 ff4e 	bl	801d05c <_ZdlPvj>
 80141c0:	4620      	mov	r0, r4
 80141c2:	bd10      	pop	{r4, pc}

080141c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80141c4:	b510      	push	{r4, lr}
 80141c6:	2104      	movs	r1, #4
 80141c8:	4604      	mov	r4, r0
 80141ca:	f008 ff47 	bl	801d05c <_ZdlPvj>
 80141ce:	4620      	mov	r0, r4
 80141d0:	bd10      	pop	{r4, pc}

080141d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80141d2:	b510      	push	{r4, lr}
 80141d4:	2104      	movs	r1, #4
 80141d6:	4604      	mov	r4, r0
 80141d8:	f008 ff40 	bl	801d05c <_ZdlPvj>
 80141dc:	4620      	mov	r0, r4
 80141de:	bd10      	pop	{r4, pc}

080141e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80141e0:	b510      	push	{r4, lr}
 80141e2:	2104      	movs	r1, #4
 80141e4:	4604      	mov	r4, r0
 80141e6:	f008 ff39 	bl	801d05c <_ZdlPvj>
 80141ea:	4620      	mov	r0, r4
 80141ec:	bd10      	pop	{r4, pc}

080141ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80141ee:	b510      	push	{r4, lr}
 80141f0:	2104      	movs	r1, #4
 80141f2:	4604      	mov	r4, r0
 80141f4:	f008 ff32 	bl	801d05c <_ZdlPvj>
 80141f8:	4620      	mov	r0, r4
 80141fa:	bd10      	pop	{r4, pc}

080141fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80141fc:	b510      	push	{r4, lr}
 80141fe:	2104      	movs	r1, #4
 8014200:	4604      	mov	r4, r0
 8014202:	f008 ff2b 	bl	801d05c <_ZdlPvj>
 8014206:	4620      	mov	r0, r4
 8014208:	bd10      	pop	{r4, pc}

0801420a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801420a:	b510      	push	{r4, lr}
 801420c:	2104      	movs	r1, #4
 801420e:	4604      	mov	r4, r0
 8014210:	f008 ff24 	bl	801d05c <_ZdlPvj>
 8014214:	4620      	mov	r0, r4
 8014216:	bd10      	pop	{r4, pc}

08014218 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014218:	b510      	push	{r4, lr}
 801421a:	2104      	movs	r1, #4
 801421c:	4604      	mov	r4, r0
 801421e:	f008 ff1d 	bl	801d05c <_ZdlPvj>
 8014222:	4620      	mov	r0, r4
 8014224:	bd10      	pop	{r4, pc}

08014226 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014226:	b510      	push	{r4, lr}
 8014228:	2104      	movs	r1, #4
 801422a:	4604      	mov	r4, r0
 801422c:	f008 ff16 	bl	801d05c <_ZdlPvj>
 8014230:	4620      	mov	r0, r4
 8014232:	bd10      	pop	{r4, pc}

08014234 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014234:	b510      	push	{r4, lr}
 8014236:	2104      	movs	r1, #4
 8014238:	4604      	mov	r4, r0
 801423a:	f008 ff0f 	bl	801d05c <_ZdlPvj>
 801423e:	4620      	mov	r0, r4
 8014240:	bd10      	pop	{r4, pc}

08014242 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8014242:	b510      	push	{r4, lr}
 8014244:	2104      	movs	r1, #4
 8014246:	4604      	mov	r4, r0
 8014248:	f008 ff08 	bl	801d05c <_ZdlPvj>
 801424c:	4620      	mov	r0, r4
 801424e:	bd10      	pop	{r4, pc}

08014250 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014250:	b510      	push	{r4, lr}
 8014252:	2104      	movs	r1, #4
 8014254:	4604      	mov	r4, r0
 8014256:	f008 ff01 	bl	801d05c <_ZdlPvj>
 801425a:	4620      	mov	r0, r4
 801425c:	bd10      	pop	{r4, pc}

0801425e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801425e:	b510      	push	{r4, lr}
 8014260:	2104      	movs	r1, #4
 8014262:	4604      	mov	r4, r0
 8014264:	f008 fefa 	bl	801d05c <_ZdlPvj>
 8014268:	4620      	mov	r0, r4
 801426a:	bd10      	pop	{r4, pc}

0801426c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801426c:	b510      	push	{r4, lr}
 801426e:	2104      	movs	r1, #4
 8014270:	4604      	mov	r4, r0
 8014272:	f008 fef3 	bl	801d05c <_ZdlPvj>
 8014276:	4620      	mov	r0, r4
 8014278:	bd10      	pop	{r4, pc}

0801427a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801427a:	b510      	push	{r4, lr}
 801427c:	2104      	movs	r1, #4
 801427e:	4604      	mov	r4, r0
 8014280:	f008 feec 	bl	801d05c <_ZdlPvj>
 8014284:	4620      	mov	r0, r4
 8014286:	bd10      	pop	{r4, pc}

08014288 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014288:	b510      	push	{r4, lr}
 801428a:	2104      	movs	r1, #4
 801428c:	4604      	mov	r4, r0
 801428e:	f008 fee5 	bl	801d05c <_ZdlPvj>
 8014292:	4620      	mov	r0, r4
 8014294:	bd10      	pop	{r4, pc}

08014296 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014296:	b510      	push	{r4, lr}
 8014298:	2104      	movs	r1, #4
 801429a:	4604      	mov	r4, r0
 801429c:	f008 fede 	bl	801d05c <_ZdlPvj>
 80142a0:	4620      	mov	r0, r4
 80142a2:	bd10      	pop	{r4, pc}

080142a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	2104      	movs	r1, #4
 80142a8:	4604      	mov	r4, r0
 80142aa:	f008 fed7 	bl	801d05c <_ZdlPvj>
 80142ae:	4620      	mov	r0, r4
 80142b0:	bd10      	pop	{r4, pc}

080142b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80142b2:	b510      	push	{r4, lr}
 80142b4:	2104      	movs	r1, #4
 80142b6:	4604      	mov	r4, r0
 80142b8:	f008 fed0 	bl	801d05c <_ZdlPvj>
 80142bc:	4620      	mov	r0, r4
 80142be:	bd10      	pop	{r4, pc}

080142c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80142c0:	b510      	push	{r4, lr}
 80142c2:	2104      	movs	r1, #4
 80142c4:	4604      	mov	r4, r0
 80142c6:	f008 fec9 	bl	801d05c <_ZdlPvj>
 80142ca:	4620      	mov	r0, r4
 80142cc:	bd10      	pop	{r4, pc}

080142ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80142ce:	b510      	push	{r4, lr}
 80142d0:	2104      	movs	r1, #4
 80142d2:	4604      	mov	r4, r0
 80142d4:	f008 fec2 	bl	801d05c <_ZdlPvj>
 80142d8:	4620      	mov	r0, r4
 80142da:	bd10      	pop	{r4, pc}

080142dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80142dc:	b510      	push	{r4, lr}
 80142de:	2104      	movs	r1, #4
 80142e0:	4604      	mov	r4, r0
 80142e2:	f008 febb 	bl	801d05c <_ZdlPvj>
 80142e6:	4620      	mov	r0, r4
 80142e8:	bd10      	pop	{r4, pc}

080142ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80142ea:	b510      	push	{r4, lr}
 80142ec:	2104      	movs	r1, #4
 80142ee:	4604      	mov	r4, r0
 80142f0:	f008 feb4 	bl	801d05c <_ZdlPvj>
 80142f4:	4620      	mov	r0, r4
 80142f6:	bd10      	pop	{r4, pc}

080142f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80142f8:	b510      	push	{r4, lr}
 80142fa:	2104      	movs	r1, #4
 80142fc:	4604      	mov	r4, r0
 80142fe:	f008 fead 	bl	801d05c <_ZdlPvj>
 8014302:	4620      	mov	r0, r4
 8014304:	bd10      	pop	{r4, pc}

08014306 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8014306:	b510      	push	{r4, lr}
 8014308:	2104      	movs	r1, #4
 801430a:	4604      	mov	r4, r0
 801430c:	f008 fea6 	bl	801d05c <_ZdlPvj>
 8014310:	4620      	mov	r0, r4
 8014312:	bd10      	pop	{r4, pc}

08014314 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014318:	460e      	mov	r6, r1
 801431a:	b08b      	sub	sp, #44	; 0x2c
 801431c:	4615      	mov	r5, r2
 801431e:	461c      	mov	r4, r3
 8014320:	b323      	cbz	r3, 801436c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8014322:	4608      	mov	r0, r1
 8014324:	f7f9 fff0 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014328:	bb00      	cbnz	r0, 801436c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801432a:	6830      	ldr	r0, [r6, #0]
 801432c:	6871      	ldr	r1, [r6, #4]
 801432e:	4e55      	ldr	r6, [pc, #340]	; (8014484 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 8014330:	ab08      	add	r3, sp, #32
 8014332:	c303      	stmia	r3!, {r0, r1}
 8014334:	a808      	add	r0, sp, #32
 8014336:	f7fb faf3 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801433a:	6830      	ldr	r0, [r6, #0]
 801433c:	6803      	ldr	r3, [r0, #0]
 801433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014340:	4798      	blx	r3
 8014342:	2cff      	cmp	r4, #255	; 0xff
 8014344:	d015      	beq.n	8014372 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 8014346:	f010 0f08 	tst.w	r0, #8
 801434a:	d015      	beq.n	8014378 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 801434c:	6830      	ldr	r0, [r6, #0]
 801434e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014352:	6801      	ldr	r1, [r0, #0]
 8014354:	9402      	str	r4, [sp, #8]
 8014356:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801435a:	9401      	str	r4, [sp, #4]
 801435c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8014360:	9400      	str	r4, [sp, #0]
 8014362:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8014364:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014368:	4629      	mov	r1, r5
 801436a:	47a0      	blx	r4
 801436c:	b00b      	add	sp, #44	; 0x2c
 801436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014372:	f010 0f02 	tst.w	r0, #2
 8014376:	e7e8      	b.n	801434a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8014378:	6830      	ldr	r0, [r6, #0]
 801437a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801437e:	6803      	ldr	r3, [r0, #0]
 8014380:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8014384:	6a1b      	ldr	r3, [r3, #32]
 8014386:	4798      	blx	r3
 8014388:	4a3f      	ldr	r2, [pc, #252]	; (8014488 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 801438a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801438e:	8816      	ldrh	r6, [r2, #0]
 8014390:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014394:	2cff      	cmp	r4, #255	; 0xff
 8014396:	fb06 1303 	mla	r3, r6, r3, r1
 801439a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801439e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80143a2:	4616      	mov	r6, r2
 80143a4:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 80143a8:	d10a      	bne.n	80143c0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 80143aa:	0049      	lsls	r1, r1, #1
 80143ac:	2200      	movs	r2, #0
 80143ae:	454a      	cmp	r2, r9
 80143b0:	da62      	bge.n	8014478 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 80143b2:	2300      	movs	r3, #0
 80143b4:	4543      	cmp	r3, r8
 80143b6:	da58      	bge.n	801446a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 80143b8:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 80143bc:	3301      	adds	r3, #1
 80143be:	e7f9      	b.n	80143b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 80143c0:	122b      	asrs	r3, r5, #8
 80143c2:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 80143c6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80143ca:	b2a4      	uxth	r4, r4
 80143cc:	4363      	muls	r3, r4
 80143ce:	9305      	str	r3, [sp, #20]
 80143d0:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 80143d4:	00eb      	lsls	r3, r5, #3
 80143d6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80143da:	b2db      	uxtb	r3, r3
 80143dc:	0049      	lsls	r1, r1, #1
 80143de:	4366      	muls	r6, r4
 80143e0:	4363      	muls	r3, r4
 80143e2:	9106      	str	r1, [sp, #24]
 80143e4:	f04f 0c00 	mov.w	ip, #0
 80143e8:	b2bf      	uxth	r7, r7
 80143ea:	9207      	str	r2, [sp, #28]
 80143ec:	45cc      	cmp	ip, r9
 80143ee:	da43      	bge.n	8014478 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 80143f0:	4682      	mov	sl, r0
 80143f2:	f04f 0e00 	mov.w	lr, #0
 80143f6:	45c6      	cmp	lr, r8
 80143f8:	da2d      	bge.n	8014456 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x142>
 80143fa:	f8ba 2000 	ldrh.w	r2, [sl]
 80143fe:	9905      	ldr	r1, [sp, #20]
 8014400:	1214      	asrs	r4, r2, #8
 8014402:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8014406:	fb14 f407 	smulbb	r4, r4, r7
 801440a:	440c      	add	r4, r1
 801440c:	10d1      	asrs	r1, r2, #3
 801440e:	00d2      	lsls	r2, r2, #3
 8014410:	b2d2      	uxtb	r2, r2
 8014412:	fb12 f207 	smulbb	r2, r2, r7
 8014416:	b2a4      	uxth	r4, r4
 8014418:	441a      	add	r2, r3
 801441a:	b292      	uxth	r2, r2
 801441c:	1c65      	adds	r5, r4, #1
 801441e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8014422:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8014426:	fb11 f107 	smulbb	r1, r1, r7
 801442a:	1c55      	adds	r5, r2, #1
 801442c:	4431      	add	r1, r6
 801442e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8014432:	b289      	uxth	r1, r1
 8014434:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014438:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801443c:	4314      	orrs	r4, r2
 801443e:	1c4a      	adds	r2, r1, #1
 8014440:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8014444:	0949      	lsrs	r1, r1, #5
 8014446:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801444a:	430c      	orrs	r4, r1
 801444c:	f82a 4b02 	strh.w	r4, [sl], #2
 8014450:	f10e 0e01 	add.w	lr, lr, #1
 8014454:	e7cf      	b.n	80143f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe2>
 8014456:	9a07      	ldr	r2, [sp, #28]
 8014458:	9906      	ldr	r1, [sp, #24]
 801445a:	8812      	ldrh	r2, [r2, #0]
 801445c:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 8014460:	440a      	add	r2, r1
 8014462:	4410      	add	r0, r2
 8014464:	f10c 0c01 	add.w	ip, ip, #1
 8014468:	e7c0      	b.n	80143ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd8>
 801446a:	8833      	ldrh	r3, [r6, #0]
 801446c:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 8014470:	440b      	add	r3, r1
 8014472:	4418      	add	r0, r3
 8014474:	3201      	adds	r2, #1
 8014476:	e79a      	b.n	80143ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 8014478:	4b02      	ldr	r3, [pc, #8]	; (8014484 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801447a:	6818      	ldr	r0, [r3, #0]
 801447c:	6803      	ldr	r3, [r0, #0]
 801447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014480:	4798      	blx	r3
 8014482:	e773      	b.n	801436c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8014484:	2002edcc 	.word	0x2002edcc
 8014488:	2002edc6 	.word	0x2002edc6

0801448c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014490:	4d9b      	ldr	r5, [pc, #620]	; (8014700 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8014492:	4690      	mov	r8, r2
 8014494:	682a      	ldr	r2, [r5, #0]
 8014496:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801449a:	2a02      	cmp	r2, #2
 801449c:	b08f      	sub	sp, #60	; 0x3c
 801449e:	4604      	mov	r4, r0
 80144a0:	4689      	mov	r9, r1
 80144a2:	d106      	bne.n	80144b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80144a4:	4b97      	ldr	r3, [pc, #604]	; (8014704 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80144a6:	4a98      	ldr	r2, [pc, #608]	; (8014708 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80144a8:	f240 21c2 	movw	r1, #706	; 0x2c2
 80144ac:	4897      	ldr	r0, [pc, #604]	; (801470c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80144ae:	f008 fe01 	bl	801d0b4 <__assert_func>
 80144b2:	ae0e      	add	r6, sp, #56	; 0x38
 80144b4:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80144b8:	4630      	mov	r0, r6
 80144ba:	f7fd facf 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	4607      	mov	r7, r0
 80144c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c4:	4620      	mov	r0, r4
 80144c6:	4798      	blx	r3
 80144c8:	4287      	cmp	r7, r0
 80144ca:	d004      	beq.n	80144d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80144cc:	4b90      	ldr	r3, [pc, #576]	; (8014710 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80144ce:	4a8e      	ldr	r2, [pc, #568]	; (8014708 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80144d0:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80144d4:	e7ea      	b.n	80144ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80144d6:	4630      	mov	r0, r6
 80144d8:	f7fd fa3c 	bl	8011954 <_ZNK8touchgfx6Bitmap7getDataEv>
 80144dc:	4607      	mov	r7, r0
 80144de:	b920      	cbnz	r0, 80144ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80144e0:	4b8c      	ldr	r3, [pc, #560]	; (8014714 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80144e2:	4a89      	ldr	r2, [pc, #548]	; (8014708 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80144e4:	f240 21c6 	movw	r1, #710	; 0x2c6
 80144e8:	e7e0      	b.n	80144ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80144ea:	f8d8 0000 	ldr.w	r0, [r8]
 80144ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80144f2:	f9b8 a000 	ldrsh.w	sl, [r8]
 80144f6:	ab06      	add	r3, sp, #24
 80144f8:	c303      	stmia	r3!, {r0, r1}
 80144fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80144fe:	f8d9 0000 	ldr.w	r0, [r9]
 8014502:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8014506:	ab08      	add	r3, sp, #32
 8014508:	c303      	stmia	r3!, {r0, r1}
 801450a:	4630      	mov	r0, r6
 801450c:	f7fd f91a 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014510:	4680      	mov	r8, r0
 8014512:	4630      	mov	r0, r6
 8014514:	f7fd f950 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014518:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801451c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8014520:	f10d 0920 	add.w	r9, sp, #32
 8014524:	a806      	add	r0, sp, #24
 8014526:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801452a:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801452e:	f7fb f9f7 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014532:	4648      	mov	r0, r9
 8014534:	f7fb f9f4 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014538:	a80a      	add	r0, sp, #40	; 0x28
 801453a:	f7fb f9f1 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801453e:	4e76      	ldr	r6, [pc, #472]	; (8014718 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8014540:	4b76      	ldr	r3, [pc, #472]	; (801471c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8014542:	f9b6 2000 	ldrsh.w	r2, [r6]
 8014546:	f9b3 3000 	ldrsh.w	r3, [r3]
 801454a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801454e:	2100      	movs	r1, #0
 8014550:	910c      	str	r1, [sp, #48]	; 0x30
 8014552:	4648      	mov	r0, r9
 8014554:	a90c      	add	r1, sp, #48	; 0x30
 8014556:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801455a:	f7f9 fe91 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 801455e:	4648      	mov	r0, r9
 8014560:	f7f9 fed2 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014564:	2800      	cmp	r0, #0
 8014566:	f040 80bd 	bne.w	80146e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801456a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801456e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014572:	4288      	cmp	r0, r1
 8014574:	db37      	blt.n	80145e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014576:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801457a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801457e:	429a      	cmp	r2, r3
 8014580:	db31      	blt.n	80145e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014582:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8014586:	4460      	add	r0, ip
 8014588:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801458c:	4461      	add	r1, ip
 801458e:	b200      	sxth	r0, r0
 8014590:	b209      	sxth	r1, r1
 8014592:	4288      	cmp	r0, r1
 8014594:	dc27      	bgt.n	80145e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014596:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801459a:	440a      	add	r2, r1
 801459c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80145a0:	440b      	add	r3, r1
 80145a2:	b212      	sxth	r2, r2
 80145a4:	b21b      	sxth	r3, r3
 80145a6:	429a      	cmp	r2, r3
 80145a8:	dc1d      	bgt.n	80145e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80145aa:	6823      	ldr	r3, [r4, #0]
 80145ac:	4620      	mov	r0, r4
 80145ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b0:	4798      	blx	r3
 80145b2:	4682      	mov	sl, r0
 80145b4:	6828      	ldr	r0, [r5, #0]
 80145b6:	6803      	ldr	r3, [r0, #0]
 80145b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ba:	4798      	blx	r3
 80145bc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80145c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80145c4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80145c8:	1a9b      	subs	r3, r3, r2
 80145ca:	b29b      	uxth	r3, r3
 80145cc:	b21c      	sxth	r4, r3
 80145ce:	2c00      	cmp	r4, #0
 80145d0:	dc0e      	bgt.n	80145f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80145d2:	bf1f      	itttt	ne
 80145d4:	f8ad 2020 	strhne.w	r2, [sp, #32]
 80145d8:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 80145dc:	189b      	addne	r3, r3, r2
 80145de:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 80145e2:	463c      	mov	r4, r7
 80145e4:	e00a      	b.n	80145fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 80145e6:	4b4e      	ldr	r3, [pc, #312]	; (8014720 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 80145e8:	4a47      	ldr	r2, [pc, #284]	; (8014708 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80145ea:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80145ee:	e75d      	b.n	80144ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80145f0:	ebab 0303 	sub.w	r3, fp, r3
 80145f4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80145f8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80145fc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8014600:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014604:	1a5b      	subs	r3, r3, r1
 8014606:	b29b      	uxth	r3, r3
 8014608:	b21a      	sxth	r2, r3
 801460a:	2a00      	cmp	r2, #0
 801460c:	dd4a      	ble.n	80146a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 801460e:	fb02 f20b 	mul.w	r2, r2, fp
 8014612:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8014616:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801461a:	1ad3      	subs	r3, r2, r3
 801461c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014620:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8014624:	2b00      	cmp	r3, #0
 8014626:	dd5d      	ble.n	80146e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014628:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801462c:	f1bc 0f00 	cmp.w	ip, #0
 8014630:	dd58      	ble.n	80146e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014632:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8014636:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801463a:	fb0a f801 	mul.w	r8, sl, r1
 801463e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8014642:	4480      	add	r8, r0
 8014644:	8830      	ldrh	r0, [r6, #0]
 8014646:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801464a:	42b3      	cmp	r3, r6
 801464c:	bfa8      	it	ge
 801464e:	4633      	movge	r3, r6
 8014650:	1a82      	subs	r2, r0, r2
 8014652:	4293      	cmp	r3, r2
 8014654:	bfa8      	it	ge
 8014656:	4613      	movge	r3, r2
 8014658:	4a30      	ldr	r2, [pc, #192]	; (801471c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801465a:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801465e:	8812      	ldrh	r2, [r2, #0]
 8014660:	4566      	cmp	r6, ip
 8014662:	eba2 0101 	sub.w	r1, r2, r1
 8014666:	bfa8      	it	ge
 8014668:	4666      	movge	r6, ip
 801466a:	428e      	cmp	r6, r1
 801466c:	4632      	mov	r2, r6
 801466e:	bfa8      	it	ge
 8014670:	460a      	movge	r2, r1
 8014672:	4298      	cmp	r0, r3
 8014674:	9202      	str	r2, [sp, #8]
 8014676:	d01e      	beq.n	80146b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	9303      	str	r3, [sp, #12]
 801467c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014680:	f04f 0900 	mov.w	r9, #0
 8014684:	9b02      	ldr	r3, [sp, #8]
 8014686:	454b      	cmp	r3, r9
 8014688:	dd2c      	ble.n	80146e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801468a:	6828      	ldr	r0, [r5, #0]
 801468c:	6803      	ldr	r3, [r0, #0]
 801468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014690:	4642      	mov	r2, r8
 8014692:	461e      	mov	r6, r3
 8014694:	4621      	mov	r1, r4
 8014696:	9b03      	ldr	r3, [sp, #12]
 8014698:	47b0      	blx	r6
 801469a:	44d0      	add	r8, sl
 801469c:	445c      	add	r4, fp
 801469e:	f109 0901 	add.w	r9, r9, #1
 80146a2:	e7ef      	b.n	8014684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 80146a4:	bf1f      	itttt	ne
 80146a6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80146aa:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 80146ae:	189b      	addne	r3, r3, r2
 80146b0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80146b4:	e7b4      	b.n	8014620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 80146b6:	4558      	cmp	r0, fp
 80146b8:	d1de      	bne.n	8014678 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 80146ba:	6828      	ldr	r0, [r5, #0]
 80146bc:	6803      	ldr	r3, [r0, #0]
 80146be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146c0:	4798      	blx	r3
 80146c2:	07c3      	lsls	r3, r0, #31
 80146c4:	d512      	bpl.n	80146ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80146c6:	6828      	ldr	r0, [r5, #0]
 80146c8:	9b02      	ldr	r3, [sp, #8]
 80146ca:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80146ce:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80146d2:	6803      	ldr	r3, [r0, #0]
 80146d4:	f8cd b000 	str.w	fp, [sp]
 80146d8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80146da:	e899 0006 	ldmia.w	r9, {r1, r2}
 80146de:	4623      	mov	r3, r4
 80146e0:	47a8      	blx	r5
 80146e2:	4607      	mov	r7, r0
 80146e4:	4638      	mov	r0, r7
 80146e6:	b00f      	add	sp, #60	; 0x3c
 80146e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ec:	6828      	ldr	r0, [r5, #0]
 80146ee:	6803      	ldr	r3, [r0, #0]
 80146f0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80146f2:	9b02      	ldr	r3, [sp, #8]
 80146f4:	4642      	mov	r2, r8
 80146f6:	fb03 f30a 	mul.w	r3, r3, sl
 80146fa:	4621      	mov	r1, r4
 80146fc:	47a8      	blx	r5
 80146fe:	e7f1      	b.n	80146e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014700:	2002edcc 	.word	0x2002edcc
 8014704:	080207cf 	.word	0x080207cf
 8014708:	08021013 	.word	0x08021013
 801470c:	08020883 	.word	0x08020883
 8014710:	080208b5 	.word	0x080208b5
 8014714:	0802090a 	.word	0x0802090a
 8014718:	2002edc6 	.word	0x2002edc6
 801471c:	2002edc8 	.word	0x2002edc8
 8014720:	08020948 	.word	0x08020948

08014724 <_ZN8touchgfx8LCD16bppC1Ev>:
 8014724:	2200      	movs	r2, #0
 8014726:	4910      	ldr	r1, [pc, #64]	; (8014768 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8014728:	6042      	str	r2, [r0, #4]
 801472a:	6001      	str	r1, [r0, #0]
 801472c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8014730:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8014734:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014738:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801473c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8014740:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8014744:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8014748:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801474c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8014750:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8014754:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8014758:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801475c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8014760:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8014764:	4770      	bx	lr
 8014766:	bf00      	nop
 8014768:	08020c8c 	.word	0x08020c8c

0801476c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014770:	460c      	mov	r4, r1
 8014772:	b08d      	sub	sp, #52	; 0x34
 8014774:	4682      	mov	sl, r0
 8014776:	6808      	ldr	r0, [r1, #0]
 8014778:	6849      	ldr	r1, [r1, #4]
 801477a:	469b      	mov	fp, r3
 801477c:	ab08      	add	r3, sp, #32
 801477e:	c303      	stmia	r3!, {r0, r1}
 8014780:	6810      	ldr	r0, [r2, #0]
 8014782:	6851      	ldr	r1, [r2, #4]
 8014784:	ab0a      	add	r3, sp, #40	; 0x28
 8014786:	c303      	stmia	r3!, {r0, r1}
 8014788:	a808      	add	r0, sp, #32
 801478a:	f7fb f8c9 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801478e:	4621      	mov	r1, r4
 8014790:	a80a      	add	r0, sp, #40	; 0x28
 8014792:	f7fb f8ad 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014796:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801479a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801479e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80147a2:	4c60      	ldr	r4, [pc, #384]	; (8014924 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 80147a4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80147a8:	6820      	ldr	r0, [r4, #0]
 80147aa:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 80147ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80147b2:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80147b6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80147ba:	440a      	add	r2, r1
 80147bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80147c0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80147c4:	4413      	add	r3, r2
 80147c6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80147ca:	6803      	ldr	r3, [r0, #0]
 80147cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ce:	4798      	blx	r3
 80147d0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80147d4:	d119      	bne.n	801480a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80147d6:	f010 0f20 	tst.w	r0, #32
 80147da:	6820      	ldr	r0, [r4, #0]
 80147dc:	d018      	beq.n	8014810 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80147de:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80147e2:	6801      	ldr	r1, [r0, #0]
 80147e4:	9402      	str	r4, [sp, #8]
 80147e6:	fa1f f489 	uxth.w	r4, r9
 80147ea:	9401      	str	r4, [sp, #4]
 80147ec:	fa1f f488 	uxth.w	r4, r8
 80147f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80147f4:	9400      	str	r4, [sp, #0]
 80147f6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80147f8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80147fc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8014800:	4651      	mov	r1, sl
 8014802:	47a0      	blx	r4
 8014804:	b00d      	add	sp, #52	; 0x34
 8014806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801480a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801480e:	e7e4      	b.n	80147da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8014810:	6803      	ldr	r3, [r0, #0]
 8014812:	6a1b      	ldr	r3, [r3, #32]
 8014814:	4798      	blx	r3
 8014816:	4a44      	ldr	r2, [pc, #272]	; (8014928 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 8014818:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801481c:	8813      	ldrh	r3, [r2, #0]
 801481e:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8014822:	9207      	str	r2, [sp, #28]
 8014824:	fb04 1303 	mla	r3, r4, r3, r1
 8014828:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801482c:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8014830:	0099      	lsls	r1, r3, #2
 8014832:	005b      	lsls	r3, r3, #1
 8014834:	9106      	str	r1, [sp, #24]
 8014836:	9305      	str	r3, [sp, #20]
 8014838:	f04f 0c00 	mov.w	ip, #0
 801483c:	45cc      	cmp	ip, r9
 801483e:	da6b      	bge.n	8014918 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 8014840:	2300      	movs	r3, #0
 8014842:	4543      	cmp	r3, r8
 8014844:	da55      	bge.n	80148f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 8014846:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 801484a:	0e25      	lsrs	r5, r4, #24
 801484c:	d013      	beq.n	8014876 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801484e:	2dff      	cmp	r5, #255	; 0xff
 8014850:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8014854:	d111      	bne.n	801487a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8014856:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801485a:	d10e      	bne.n	801487a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801485c:	0962      	lsrs	r2, r4, #5
 801485e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8014862:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8014866:	f027 0707 	bic.w	r7, r7, #7
 801486a:	4317      	orrs	r7, r2
 801486c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014870:	433c      	orrs	r4, r7
 8014872:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8014876:	3301      	adds	r3, #1
 8014878:	e7e3      	b.n	8014842 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 801487a:	fb0b f505 	mul.w	r5, fp, r5
 801487e:	1c6a      	adds	r2, r5, #1
 8014880:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8014884:	eb02 2225 	add.w	r2, r2, r5, asr #8
 8014888:	1212      	asrs	r2, r2, #8
 801488a:	fa1f fe82 	uxth.w	lr, r2
 801488e:	120e      	asrs	r6, r1, #8
 8014890:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8014894:	43d2      	mvns	r2, r2
 8014896:	b2d2      	uxtb	r2, r2
 8014898:	fb15 f50e 	smulbb	r5, r5, lr
 801489c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80148a0:	fb06 5602 	mla	r6, r6, r2, r5
 80148a4:	b2e4      	uxtb	r4, r4
 80148a6:	10cd      	asrs	r5, r1, #3
 80148a8:	00c9      	lsls	r1, r1, #3
 80148aa:	b2c9      	uxtb	r1, r1
 80148ac:	fb14 f40e 	smulbb	r4, r4, lr
 80148b0:	fb01 4402 	mla	r4, r1, r2, r4
 80148b4:	b2ff      	uxtb	r7, r7
 80148b6:	b2b6      	uxth	r6, r6
 80148b8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80148bc:	b2a4      	uxth	r4, r4
 80148be:	fb17 f70e 	smulbb	r7, r7, lr
 80148c2:	fb05 7702 	mla	r7, r5, r2, r7
 80148c6:	1c72      	adds	r2, r6, #1
 80148c8:	1c65      	adds	r5, r4, #1
 80148ca:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80148ce:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 80148d2:	b2bf      	uxth	r7, r7
 80148d4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80148d8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80148dc:	432e      	orrs	r6, r5
 80148de:	1c7d      	adds	r5, r7, #1
 80148e0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80148e4:	097f      	lsrs	r7, r7, #5
 80148e6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80148ea:	433e      	orrs	r6, r7
 80148ec:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80148f0:	e7c1      	b.n	8014876 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80148f2:	9b07      	ldr	r3, [sp, #28]
 80148f4:	9a05      	ldr	r2, [sp, #20]
 80148f6:	881b      	ldrh	r3, [r3, #0]
 80148f8:	eba3 0308 	sub.w	r3, r3, r8
 80148fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014900:	4418      	add	r0, r3
 8014902:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8014906:	9a06      	ldr	r2, [sp, #24]
 8014908:	eba3 0308 	sub.w	r3, r3, r8
 801490c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014910:	449a      	add	sl, r3
 8014912:	f10c 0c01 	add.w	ip, ip, #1
 8014916:	e791      	b.n	801483c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8014918:	4b02      	ldr	r3, [pc, #8]	; (8014924 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801491a:	6818      	ldr	r0, [r3, #0]
 801491c:	6803      	ldr	r3, [r0, #0]
 801491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014920:	4798      	blx	r3
 8014922:	e76f      	b.n	8014804 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8014924:	2002edcc 	.word	0x2002edcc
 8014928:	2002edc6 	.word	0x2002edc6

0801492c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801492c:	b570      	push	{r4, r5, r6, lr}
 801492e:	9d04      	ldr	r5, [sp, #16]
 8014930:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8014934:	460c      	mov	r4, r1
 8014936:	4619      	mov	r1, r3
 8014938:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801493c:	2a0c      	cmp	r2, #12
 801493e:	d820      	bhi.n	8014982 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8014940:	e8df f002 	tbb	[pc, r2]
 8014944:	18121807 	.word	0x18121807
 8014948:	18181818 	.word	0x18181818
 801494c:	18181818 	.word	0x18181818
 8014950:	18          	.byte	0x18
 8014951:	00          	.byte	0x00
 8014952:	6802      	ldr	r2, [r0, #0]
 8014954:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8014958:	6916      	ldr	r6, [r2, #16]
 801495a:	462b      	mov	r3, r5
 801495c:	460a      	mov	r2, r1
 801495e:	46b4      	mov	ip, r6
 8014960:	4621      	mov	r1, r4
 8014962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014966:	4760      	bx	ip
 8014968:	462a      	mov	r2, r5
 801496a:	4620      	mov	r0, r4
 801496c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014970:	f7ff befc 	b.w	801476c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014974:	4b03      	ldr	r3, [pc, #12]	; (8014984 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8014976:	4a04      	ldr	r2, [pc, #16]	; (8014988 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8014978:	4804      	ldr	r0, [pc, #16]	; (801498c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801497a:	f240 21bb 	movw	r1, #699	; 0x2bb
 801497e:	f008 fb99 	bl	801d0b4 <__assert_func>
 8014982:	bd70      	pop	{r4, r5, r6, pc}
 8014984:	080209a8 	.word	0x080209a8
 8014988:	08021099 	.word	0x08021099
 801498c:	08020883 	.word	0x08020883

08014990 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8014990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014994:	b093      	sub	sp, #76	; 0x4c
 8014996:	880f      	ldrh	r7, [r1, #0]
 8014998:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801499c:	4681      	mov	r9, r0
 801499e:	4688      	mov	r8, r1
 80149a0:	4615      	mov	r5, r2
 80149a2:	b12f      	cbz	r7, 80149b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80149a4:	4b71      	ldr	r3, [pc, #452]	; (8014b6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80149a6:	4a72      	ldr	r2, [pc, #456]	; (8014b70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80149a8:	4872      	ldr	r0, [pc, #456]	; (8014b74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80149aa:	21ec      	movs	r1, #236	; 0xec
 80149ac:	f008 fb82 	bl	801d0b4 <__assert_func>
 80149b0:	6810      	ldr	r0, [r2, #0]
 80149b2:	6851      	ldr	r1, [r2, #4]
 80149b4:	ac0e      	add	r4, sp, #56	; 0x38
 80149b6:	c403      	stmia	r4!, {r0, r1}
 80149b8:	6818      	ldr	r0, [r3, #0]
 80149ba:	6859      	ldr	r1, [r3, #4]
 80149bc:	ac10      	add	r4, sp, #64	; 0x40
 80149be:	c403      	stmia	r4!, {r0, r1}
 80149c0:	a80e      	add	r0, sp, #56	; 0x38
 80149c2:	f7fa ffad 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80149c6:	4629      	mov	r1, r5
 80149c8:	a810      	add	r0, sp, #64	; 0x40
 80149ca:	f7fa ff91 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80149ce:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80149d2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80149d6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80149da:	4d67      	ldr	r5, [pc, #412]	; (8014b78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 80149dc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80149e0:	6828      	ldr	r0, [r5, #0]
 80149e2:	4c66      	ldr	r4, [pc, #408]	; (8014b7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 80149e4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80149e8:	4489      	add	r9, r1
 80149ea:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80149ee:	440a      	add	r2, r1
 80149f0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80149f4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80149f8:	4413      	add	r3, r2
 80149fa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80149fe:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8014a02:	930a      	str	r3, [sp, #40]	; 0x28
 8014a04:	6803      	ldr	r3, [r0, #0]
 8014a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a0a:	4798      	blx	r3
 8014a0c:	2801      	cmp	r0, #1
 8014a0e:	d11d      	bne.n	8014a4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 8014a10:	220b      	movs	r2, #11
 8014a12:	9708      	str	r7, [sp, #32]
 8014a14:	9207      	str	r2, [sp, #28]
 8014a16:	8822      	ldrh	r2, [r4, #0]
 8014a18:	f8cd a010 	str.w	sl, [sp, #16]
 8014a1c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8014a20:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8014a24:	9203      	str	r2, [sp, #12]
 8014a26:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8014a2a:	9202      	str	r2, [sp, #8]
 8014a2c:	fa1f f28b 	uxth.w	r2, fp
 8014a30:	9201      	str	r2, [sp, #4]
 8014a32:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014a36:	9200      	str	r2, [sp, #0]
 8014a38:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014a3c:	6828      	ldr	r0, [r5, #0]
 8014a3e:	4642      	mov	r2, r8
 8014a40:	4649      	mov	r1, r9
 8014a42:	f7fa f86b 	bl	800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014a46:	b013      	add	sp, #76	; 0x4c
 8014a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a4c:	6828      	ldr	r0, [r5, #0]
 8014a4e:	6803      	ldr	r3, [r0, #0]
 8014a50:	6a1b      	ldr	r3, [r3, #32]
 8014a52:	4798      	blx	r3
 8014a54:	8823      	ldrh	r3, [r4, #0]
 8014a56:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014a5a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014a5e:	fb01 2303 	mla	r3, r1, r3, r2
 8014a62:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014a66:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8014a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8014a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a74:	429f      	cmp	r7, r3
 8014a76:	da72      	bge.n	8014b5e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 8014a78:	2100      	movs	r1, #0
 8014a7a:	4559      	cmp	r1, fp
 8014a7c:	da5e      	bge.n	8014b3c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8014a7e:	f819 3001 	ldrb.w	r3, [r9, r1]
 8014a82:	2204      	movs	r2, #4
 8014a84:	fb12 2303 	smlabb	r3, r2, r3, r2
 8014a88:	f858 2003 	ldr.w	r2, [r8, r3]
 8014a8c:	0e15      	lsrs	r5, r2, #24
 8014a8e:	d013      	beq.n	8014ab8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8014a90:	2dff      	cmp	r5, #255	; 0xff
 8014a92:	ea4f 2412 	mov.w	r4, r2, lsr #8
 8014a96:	d111      	bne.n	8014abc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8014a98:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8014a9c:	d10e      	bne.n	8014abc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8014a9e:	0953      	lsrs	r3, r2, #5
 8014aa0:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8014aa4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014aa8:	f024 0407 	bic.w	r4, r4, #7
 8014aac:	431c      	orrs	r4, r3
 8014aae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8014ab2:	4314      	orrs	r4, r2
 8014ab4:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 8014ab8:	3101      	adds	r1, #1
 8014aba:	e7de      	b.n	8014a7a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8014abc:	fb0a f505 	mul.w	r5, sl, r5
 8014ac0:	1c6b      	adds	r3, r5, #1
 8014ac2:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8014ac6:	eb03 2325 	add.w	r3, r3, r5, asr #8
 8014aca:	121b      	asrs	r3, r3, #8
 8014acc:	fa1f fe83 	uxth.w	lr, r3
 8014ad0:	ea4f 262c 	mov.w	r6, ip, asr #8
 8014ad4:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8014ad8:	43db      	mvns	r3, r3
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	fb15 f50e 	smulbb	r5, r5, lr
 8014ae0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014ae4:	fb06 5603 	mla	r6, r6, r3, r5
 8014ae8:	b2d2      	uxtb	r2, r2
 8014aea:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8014aee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014af2:	fa5f fc8c 	uxtb.w	ip, ip
 8014af6:	fb12 f20e 	smulbb	r2, r2, lr
 8014afa:	fb0c 2203 	mla	r2, ip, r3, r2
 8014afe:	b2e4      	uxtb	r4, r4
 8014b00:	b2b6      	uxth	r6, r6
 8014b02:	fb14 f40e 	smulbb	r4, r4, lr
 8014b06:	b292      	uxth	r2, r2
 8014b08:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8014b0c:	fb05 4503 	mla	r5, r5, r3, r4
 8014b10:	1c73      	adds	r3, r6, #1
 8014b12:	1c54      	adds	r4, r2, #1
 8014b14:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8014b18:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8014b1c:	b2ad      	uxth	r5, r5
 8014b1e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8014b22:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8014b26:	4326      	orrs	r6, r4
 8014b28:	1c6c      	adds	r4, r5, #1
 8014b2a:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 8014b2e:	0964      	lsrs	r4, r4, #5
 8014b30:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8014b34:	4326      	orrs	r6, r4
 8014b36:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 8014b3a:	e7bd      	b.n	8014ab8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8014b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	eba3 030b 	sub.w	r3, r3, fp
 8014b46:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014b4a:	4418      	add	r0, r3
 8014b4c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8014b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b52:	eba3 030b 	sub.w	r3, r3, fp
 8014b56:	4413      	add	r3, r2
 8014b58:	4499      	add	r9, r3
 8014b5a:	3701      	adds	r7, #1
 8014b5c:	e789      	b.n	8014a72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8014b5e:	4b06      	ldr	r3, [pc, #24]	; (8014b78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8014b60:	6818      	ldr	r0, [r3, #0]
 8014b62:	6803      	ldr	r3, [r0, #0]
 8014b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b66:	4798      	blx	r3
 8014b68:	e76d      	b.n	8014a46 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 8014b6a:	bf00      	nop
 8014b6c:	0802077f 	.word	0x0802077f
 8014b70:	08020e6a 	.word	0x08020e6a
 8014b74:	08020883 	.word	0x08020883
 8014b78:	2002edcc 	.word	0x2002edcc
 8014b7c:	2002edc6 	.word	0x2002edc6

08014b80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	4614      	mov	r4, r2
 8014b86:	880a      	ldrh	r2, [r1, #0]
 8014b88:	b093      	sub	sp, #76	; 0x4c
 8014b8a:	2a02      	cmp	r2, #2
 8014b8c:	4606      	mov	r6, r0
 8014b8e:	4689      	mov	r9, r1
 8014b90:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8014b94:	d006      	beq.n	8014ba4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8014b96:	4b7a      	ldr	r3, [pc, #488]	; (8014d80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8014b98:	4a7a      	ldr	r2, [pc, #488]	; (8014d84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8014b9a:	487b      	ldr	r0, [pc, #492]	; (8014d88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 8014b9c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8014ba0:	f008 fa88 	bl	801d0b4 <__assert_func>
 8014ba4:	2f00      	cmp	r7, #0
 8014ba6:	d04b      	beq.n	8014c40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8014ba8:	6820      	ldr	r0, [r4, #0]
 8014baa:	6861      	ldr	r1, [r4, #4]
 8014bac:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8014d90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 8014bb0:	ad0e      	add	r5, sp, #56	; 0x38
 8014bb2:	c503      	stmia	r5!, {r0, r1}
 8014bb4:	6818      	ldr	r0, [r3, #0]
 8014bb6:	6859      	ldr	r1, [r3, #4]
 8014bb8:	ad10      	add	r5, sp, #64	; 0x40
 8014bba:	c503      	stmia	r5!, {r0, r1}
 8014bbc:	a80e      	add	r0, sp, #56	; 0x38
 8014bbe:	f7fa feaf 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014bc2:	4621      	mov	r1, r4
 8014bc4:	a810      	add	r0, sp, #64	; 0x40
 8014bc6:	f7fa fe93 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014bca:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014bce:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014bd2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8014bd6:	f8da 0000 	ldr.w	r0, [sl]
 8014bda:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8014bde:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 8014be2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014be6:	1874      	adds	r4, r6, r1
 8014be8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8014bec:	4e67      	ldr	r6, [pc, #412]	; (8014d8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 8014bee:	440a      	add	r2, r1
 8014bf0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014bf4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014bf8:	4413      	add	r3, r2
 8014bfa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014bfe:	6803      	ldr	r3, [r0, #0]
 8014c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c04:	4798      	blx	r3
 8014c06:	2801      	cmp	r0, #1
 8014c08:	d11d      	bne.n	8014c46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	210b      	movs	r1, #11
 8014c0e:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8014c12:	8831      	ldrh	r1, [r6, #0]
 8014c14:	9704      	str	r7, [sp, #16]
 8014c16:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8014c1a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8014c1e:	9203      	str	r2, [sp, #12]
 8014c20:	fa1f f288 	uxth.w	r2, r8
 8014c24:	9202      	str	r2, [sp, #8]
 8014c26:	b2ad      	uxth	r5, r5
 8014c28:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014c2c:	9200      	str	r2, [sp, #0]
 8014c2e:	9501      	str	r5, [sp, #4]
 8014c30:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014c34:	f8da 0000 	ldr.w	r0, [sl]
 8014c38:	464a      	mov	r2, r9
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	f7f9 ff6e 	bl	800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014c40:	b013      	add	sp, #76	; 0x4c
 8014c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c46:	f8da 0000 	ldr.w	r0, [sl]
 8014c4a:	6803      	ldr	r3, [r0, #0]
 8014c4c:	6a1b      	ldr	r3, [r3, #32]
 8014c4e:	4798      	blx	r3
 8014c50:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014c54:	8833      	ldrh	r3, [r6, #0]
 8014c56:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014c5a:	fb01 2303 	mla	r3, r1, r3, r2
 8014c5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014c62:	2fff      	cmp	r7, #255	; 0xff
 8014c64:	f109 0304 	add.w	r3, r9, #4
 8014c68:	930a      	str	r3, [sp, #40]	; 0x28
 8014c6a:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8014c6e:	d111      	bne.n	8014c94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 8014c70:	b212      	sxth	r2, r2
 8014c72:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8014c76:	2100      	movs	r1, #0
 8014c78:	4541      	cmp	r1, r8
 8014c7a:	da7a      	bge.n	8014d72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	42ab      	cmp	r3, r5
 8014c80:	da6b      	bge.n	8014d5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8014c82:	f814 c003 	ldrb.w	ip, [r4, r3]
 8014c86:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014c88:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 8014c8c:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 8014c90:	3301      	adds	r3, #1
 8014c92:	e7f4      	b.n	8014c7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 8014c94:	b213      	sxth	r3, r2
 8014c96:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8014c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8014ca0:	f04f 0900 	mov.w	r9, #0
 8014ca4:	b2ba      	uxth	r2, r7
 8014ca6:	fa1f fc8c 	uxth.w	ip, ip
 8014caa:	960d      	str	r6, [sp, #52]	; 0x34
 8014cac:	45c1      	cmp	r9, r8
 8014cae:	da60      	bge.n	8014d72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8014cb0:	46a3      	mov	fp, r4
 8014cb2:	4682      	mov	sl, r0
 8014cb4:	ebab 0304 	sub.w	r3, fp, r4
 8014cb8:	429d      	cmp	r5, r3
 8014cba:	dd3e      	ble.n	8014d3a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 8014cbc:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8014cc0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014cc2:	f8ba 1000 	ldrh.w	r1, [sl]
 8014cc6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8014cca:	120e      	asrs	r6, r1, #8
 8014ccc:	121f      	asrs	r7, r3, #8
 8014cce:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014cd2:	fb16 f60c 	smulbb	r6, r6, ip
 8014cd6:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 8014cda:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014cde:	00c9      	lsls	r1, r1, #3
 8014ce0:	fb07 6702 	mla	r7, r7, r2, r6
 8014ce4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8014ce8:	10de      	asrs	r6, r3, #3
 8014cea:	b2c9      	uxtb	r1, r1
 8014cec:	00db      	lsls	r3, r3, #3
 8014cee:	fb1e fe0c 	smulbb	lr, lr, ip
 8014cf2:	fb11 f10c 	smulbb	r1, r1, ip
 8014cf6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	b2bf      	uxth	r7, r7
 8014cfe:	fb06 e602 	mla	r6, r6, r2, lr
 8014d02:	fb03 1302 	mla	r3, r3, r2, r1
 8014d06:	b2b6      	uxth	r6, r6
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	1c79      	adds	r1, r7, #1
 8014d0c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8014d10:	f106 0e01 	add.w	lr, r6, #1
 8014d14:	1c59      	adds	r1, r3, #1
 8014d16:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8014d1a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8014d1e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014d22:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8014d26:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8014d2a:	430f      	orrs	r7, r1
 8014d2c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8014d30:	ea47 070e 	orr.w	r7, r7, lr
 8014d34:	f82a 7b02 	strh.w	r7, [sl], #2
 8014d38:	e7bc      	b.n	8014cb4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 8014d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d3e:	881b      	ldrh	r3, [r3, #0]
 8014d40:	1b5b      	subs	r3, r3, r5
 8014d42:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8014d46:	4418      	add	r0, r3
 8014d48:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8014d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d4e:	1b5b      	subs	r3, r3, r5
 8014d50:	440b      	add	r3, r1
 8014d52:	441c      	add	r4, r3
 8014d54:	f109 0901 	add.w	r9, r9, #1
 8014d58:	e7a8      	b.n	8014cac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 8014d5a:	8833      	ldrh	r3, [r6, #0]
 8014d5c:	1b5b      	subs	r3, r3, r5
 8014d5e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014d62:	4418      	add	r0, r3
 8014d64:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8014d68:	1b5b      	subs	r3, r3, r5
 8014d6a:	4413      	add	r3, r2
 8014d6c:	441c      	add	r4, r3
 8014d6e:	3101      	adds	r1, #1
 8014d70:	e782      	b.n	8014c78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8014d72:	4b07      	ldr	r3, [pc, #28]	; (8014d90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 8014d74:	6818      	ldr	r0, [r3, #0]
 8014d76:	6803      	ldr	r3, [r0, #0]
 8014d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7a:	4798      	blx	r3
 8014d7c:	e760      	b.n	8014c40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8014d7e:	bf00      	nop
 8014d80:	0802063d 	.word	0x0802063d
 8014d84:	08020cd4 	.word	0x08020cd4
 8014d88:	08020883 	.word	0x08020883
 8014d8c:	2002edc6 	.word	0x2002edc6
 8014d90:	2002edcc 	.word	0x2002edcc

08014d94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8014d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d98:	4616      	mov	r6, r2
 8014d9a:	880a      	ldrh	r2, [r1, #0]
 8014d9c:	b093      	sub	sp, #76	; 0x4c
 8014d9e:	2a01      	cmp	r2, #1
 8014da0:	4681      	mov	r9, r0
 8014da2:	4688      	mov	r8, r1
 8014da4:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8014da8:	d006      	beq.n	8014db8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8014daa:	4b6c      	ldr	r3, [pc, #432]	; (8014f5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8014dac:	4a6c      	ldr	r2, [pc, #432]	; (8014f60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8014dae:	486d      	ldr	r0, [pc, #436]	; (8014f64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8014db0:	f240 11a1 	movw	r1, #417	; 0x1a1
 8014db4:	f008 f97e 	bl	801d0b4 <__assert_func>
 8014db8:	f1ba 0f00 	cmp.w	sl, #0
 8014dbc:	d04a      	beq.n	8014e54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8014dbe:	6830      	ldr	r0, [r6, #0]
 8014dc0:	6871      	ldr	r1, [r6, #4]
 8014dc2:	4d69      	ldr	r5, [pc, #420]	; (8014f68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8014dc4:	ac0e      	add	r4, sp, #56	; 0x38
 8014dc6:	c403      	stmia	r4!, {r0, r1}
 8014dc8:	6818      	ldr	r0, [r3, #0]
 8014dca:	6859      	ldr	r1, [r3, #4]
 8014dcc:	ac10      	add	r4, sp, #64	; 0x40
 8014dce:	c403      	stmia	r4!, {r0, r1}
 8014dd0:	a80e      	add	r0, sp, #56	; 0x38
 8014dd2:	f7fa fda5 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014dd6:	4631      	mov	r1, r6
 8014dd8:	a810      	add	r0, sp, #64	; 0x40
 8014dda:	f7fa fd89 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014dde:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014de2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8014de6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8014dea:	6828      	ldr	r0, [r5, #0]
 8014dec:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8014df0:	4c5e      	ldr	r4, [pc, #376]	; (8014f6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8014df2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014df6:	4489      	add	r9, r1
 8014df8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8014dfc:	440a      	add	r2, r1
 8014dfe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014e02:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014e06:	4413      	add	r3, r2
 8014e08:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014e0c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8014e10:	930a      	str	r3, [sp, #40]	; 0x28
 8014e12:	6803      	ldr	r3, [r0, #0]
 8014e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e18:	4798      	blx	r3
 8014e1a:	2801      	cmp	r0, #1
 8014e1c:	d11d      	bne.n	8014e5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8014e1e:	220b      	movs	r2, #11
 8014e20:	2100      	movs	r1, #0
 8014e22:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8014e26:	8822      	ldrh	r2, [r4, #0]
 8014e28:	f8cd a010 	str.w	sl, [sp, #16]
 8014e2c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8014e30:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8014e34:	9203      	str	r2, [sp, #12]
 8014e36:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8014e3a:	9202      	str	r2, [sp, #8]
 8014e3c:	b2b6      	uxth	r6, r6
 8014e3e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014e42:	9200      	str	r2, [sp, #0]
 8014e44:	9601      	str	r6, [sp, #4]
 8014e46:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014e4a:	6828      	ldr	r0, [r5, #0]
 8014e4c:	4642      	mov	r2, r8
 8014e4e:	4649      	mov	r1, r9
 8014e50:	f7f9 fe64 	bl	800eb1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014e54:	b013      	add	sp, #76	; 0x4c
 8014e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5a:	6828      	ldr	r0, [r5, #0]
 8014e5c:	6803      	ldr	r3, [r0, #0]
 8014e5e:	6a1b      	ldr	r3, [r3, #32]
 8014e60:	4798      	blx	r3
 8014e62:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8014e66:	8823      	ldrh	r3, [r4, #0]
 8014e68:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014e6c:	940d      	str	r4, [sp, #52]	; 0x34
 8014e6e:	fb01 2303 	mla	r3, r1, r3, r2
 8014e72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014e76:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8014e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e7c:	ea6f 010a 	mvn.w	r1, sl
 8014e80:	005b      	lsls	r3, r3, #1
 8014e82:	930c      	str	r3, [sp, #48]	; 0x30
 8014e84:	f04f 0e00 	mov.w	lr, #0
 8014e88:	b2c9      	uxtb	r1, r1
 8014e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e8c:	459e      	cmp	lr, r3
 8014e8e:	da5f      	bge.n	8014f50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8014e90:	2700      	movs	r7, #0
 8014e92:	fa1f fb8a 	uxth.w	fp, sl
 8014e96:	42b7      	cmp	r7, r6
 8014e98:	da4a      	bge.n	8014f30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8014e9a:	f819 3007 	ldrb.w	r3, [r9, r7]
 8014e9e:	2203      	movs	r2, #3
 8014ea0:	2404      	movs	r4, #4
 8014ea2:	fb12 4303 	smlabb	r3, r2, r3, r4
 8014ea6:	eb08 0403 	add.w	r4, r8, r3
 8014eaa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8014eae:	78a2      	ldrb	r2, [r4, #2]
 8014eb0:	7865      	ldrb	r5, [r4, #1]
 8014eb2:	f818 c003 	ldrb.w	ip, [r8, r3]
 8014eb6:	d10c      	bne.n	8014ed2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 8014eb8:	4b2d      	ldr	r3, [pc, #180]	; (8014f70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8014eba:	00ed      	lsls	r5, r5, #3
 8014ebc:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8014ec0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014ec4:	432a      	orrs	r2, r5
 8014ec6:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 8014eca:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 8014ece:	3701      	adds	r7, #1
 8014ed0:	e7e1      	b.n	8014e96 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 8014ed2:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 8014ed6:	121c      	asrs	r4, r3, #8
 8014ed8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8014edc:	fb12 f20b 	smulbb	r2, r2, fp
 8014ee0:	fb04 2201 	mla	r2, r4, r1, r2
 8014ee4:	10dc      	asrs	r4, r3, #3
 8014ee6:	00db      	lsls	r3, r3, #3
 8014ee8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	fb15 f50b 	smulbb	r5, r5, fp
 8014ef2:	fb1c fc0b 	smulbb	ip, ip, fp
 8014ef6:	b292      	uxth	r2, r2
 8014ef8:	fb04 5501 	mla	r5, r4, r1, r5
 8014efc:	fb03 cc01 	mla	ip, r3, r1, ip
 8014f00:	b2ad      	uxth	r5, r5
 8014f02:	fa1f fc8c 	uxth.w	ip, ip
 8014f06:	1c53      	adds	r3, r2, #1
 8014f08:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8014f0c:	1c6c      	adds	r4, r5, #1
 8014f0e:	f10c 0301 	add.w	r3, ip, #1
 8014f12:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014f16:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 8014f1a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8014f1e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8014f22:	096d      	lsrs	r5, r5, #5
 8014f24:	ea42 020c 	orr.w	r2, r2, ip
 8014f28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014f2c:	432a      	orrs	r2, r5
 8014f2e:	e7cc      	b.n	8014eca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 8014f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f34:	881b      	ldrh	r3, [r3, #0]
 8014f36:	1b9b      	subs	r3, r3, r6
 8014f38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014f3c:	4418      	add	r0, r3
 8014f3e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8014f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f44:	1b9b      	subs	r3, r3, r6
 8014f46:	4413      	add	r3, r2
 8014f48:	4499      	add	r9, r3
 8014f4a:	f10e 0e01 	add.w	lr, lr, #1
 8014f4e:	e79c      	b.n	8014e8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 8014f50:	4b05      	ldr	r3, [pc, #20]	; (8014f68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8014f52:	6818      	ldr	r0, [r3, #0]
 8014f54:	6803      	ldr	r3, [r0, #0]
 8014f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f58:	4798      	blx	r3
 8014f5a:	e77b      	b.n	8014e54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8014f5c:	0802068b 	.word	0x0802068b
 8014f60:	08020d5d 	.word	0x08020d5d
 8014f64:	08020883 	.word	0x08020883
 8014f68:	2002edcc 	.word	0x2002edcc
 8014f6c:	2002edc6 	.word	0x2002edc6
 8014f70:	fffff800 	.word	0xfffff800

08014f74 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8014f74:	b430      	push	{r4, r5}
 8014f76:	780d      	ldrb	r5, [r1, #0]
 8014f78:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8014f7c:	2d01      	cmp	r5, #1
 8014f7e:	d00a      	beq.n	8014f96 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8014f80:	d305      	bcc.n	8014f8e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8014f82:	2d02      	cmp	r5, #2
 8014f84:	d10b      	bne.n	8014f9e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8014f86:	9402      	str	r4, [sp, #8]
 8014f88:	bc30      	pop	{r4, r5}
 8014f8a:	f7ff bdf9 	b.w	8014b80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8014f8e:	9402      	str	r4, [sp, #8]
 8014f90:	bc30      	pop	{r4, r5}
 8014f92:	f7ff bcfd 	b.w	8014990 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8014f96:	9402      	str	r4, [sp, #8]
 8014f98:	bc30      	pop	{r4, r5}
 8014f9a:	f7ff befb 	b.w	8014d94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8014f9e:	bc30      	pop	{r4, r5}
 8014fa0:	4770      	bx	lr
	...

08014fa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8014fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fa8:	4605      	mov	r5, r0
 8014faa:	b089      	sub	sp, #36	; 0x24
 8014fac:	6810      	ldr	r0, [r2, #0]
 8014fae:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8014fb2:	460c      	mov	r4, r1
 8014fb4:	6851      	ldr	r1, [r2, #4]
 8014fb6:	ae04      	add	r6, sp, #16
 8014fb8:	c603      	stmia	r6!, {r0, r1}
 8014fba:	6818      	ldr	r0, [r3, #0]
 8014fbc:	6859      	ldr	r1, [r3, #4]
 8014fbe:	ae06      	add	r6, sp, #24
 8014fc0:	4617      	mov	r7, r2
 8014fc2:	c603      	stmia	r6!, {r0, r1}
 8014fc4:	a804      	add	r0, sp, #16
 8014fc6:	f7fa fcab 	bl	800f920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014fca:	4639      	mov	r1, r7
 8014fcc:	a806      	add	r0, sp, #24
 8014fce:	f7fa fc8f 	bl	800f8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014fd2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8014fd6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014fda:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8014fde:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8014fe2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014fe6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8014fea:	440c      	add	r4, r1
 8014fec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014ff0:	440a      	add	r2, r1
 8014ff2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014ff6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015000:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015004:	9300      	str	r3, [sp, #0]
 8015006:	4b80      	ldr	r3, [pc, #512]	; (8015208 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 8015008:	6818      	ldr	r0, [r3, #0]
 801500a:	6803      	ldr	r3, [r0, #0]
 801500c:	6a1b      	ldr	r3, [r3, #32]
 801500e:	4798      	blx	r3
 8015010:	4b7e      	ldr	r3, [pc, #504]	; (801520c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 8015012:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8015016:	881a      	ldrh	r2, [r3, #0]
 8015018:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801501c:	fb06 1202 	mla	r2, r6, r2, r1
 8015020:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8015024:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015028:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 801502c:	b212      	sxth	r2, r2
 801502e:	d117      	bne.n	8015060 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 8015030:	9201      	str	r2, [sp, #4]
 8015032:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8015036:	f04f 0a00 	mov.w	sl, #0
 801503a:	9302      	str	r3, [sp, #8]
 801503c:	9b00      	ldr	r3, [sp, #0]
 801503e:	459a      	cmp	sl, r3
 8015040:	f280 80d9 	bge.w	80151f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8015044:	2100      	movs	r1, #0
 8015046:	4541      	cmp	r1, r8
 8015048:	f280 80c1 	bge.w	80151ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 801504c:	5c63      	ldrb	r3, [r4, r1]
 801504e:	b12b      	cbz	r3, 801505c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 8015050:	2bff      	cmp	r3, #255	; 0xff
 8015052:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 8015056:	d176      	bne.n	8015146 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 8015058:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 801505c:	3101      	adds	r1, #1
 801505e:	e7f2      	b.n	8015046 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 8015060:	9202      	str	r2, [sp, #8]
 8015062:	0052      	lsls	r2, r2, #1
 8015064:	9201      	str	r2, [sp, #4]
 8015066:	f04f 0b00 	mov.w	fp, #0
 801506a:	9303      	str	r3, [sp, #12]
 801506c:	9b00      	ldr	r3, [sp, #0]
 801506e:	459b      	cmp	fp, r3
 8015070:	f280 80c1 	bge.w	80151f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8015074:	f04f 0c00 	mov.w	ip, #0
 8015078:	45c4      	cmp	ip, r8
 801507a:	da4f      	bge.n	801511c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 801507c:	f814 300c 	ldrb.w	r3, [r4, ip]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d048      	beq.n	8015116 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8015084:	fb09 f303 	mul.w	r3, r9, r3
 8015088:	1c5a      	adds	r2, r3, #1
 801508a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801508e:	121b      	asrs	r3, r3, #8
 8015090:	d041      	beq.n	8015116 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8015092:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8015096:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 801509a:	b29e      	uxth	r6, r3
 801509c:	1211      	asrs	r1, r2, #8
 801509e:	43db      	mvns	r3, r3
 80150a0:	b2db      	uxtb	r3, r3
 80150a2:	ea4f 272e 	mov.w	r7, lr, asr #8
 80150a6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80150aa:	fb11 f103 	smulbb	r1, r1, r3
 80150ae:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80150b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80150b6:	00d2      	lsls	r2, r2, #3
 80150b8:	fb07 1706 	mla	r7, r7, r6, r1
 80150bc:	b2d2      	uxtb	r2, r2
 80150be:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80150c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80150c6:	fb12 f203 	smulbb	r2, r2, r3
 80150ca:	fa5f fe8e 	uxtb.w	lr, lr
 80150ce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80150d2:	fb0e 2206 	mla	r2, lr, r6, r2
 80150d6:	fb1a fa03 	smulbb	sl, sl, r3
 80150da:	b2bf      	uxth	r7, r7
 80150dc:	b292      	uxth	r2, r2
 80150de:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80150e2:	fb01 a106 	mla	r1, r1, r6, sl
 80150e6:	1c7b      	adds	r3, r7, #1
 80150e8:	f102 0a01 	add.w	sl, r2, #1
 80150ec:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80150f0:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 80150f4:	b289      	uxth	r1, r1
 80150f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80150fa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80150fe:	ea47 070a 	orr.w	r7, r7, sl
 8015102:	f101 0a01 	add.w	sl, r1, #1
 8015106:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801510a:	0949      	lsrs	r1, r1, #5
 801510c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8015110:	430f      	orrs	r7, r1
 8015112:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 8015116:	f10c 0c01 	add.w	ip, ip, #1
 801511a:	e7ad      	b.n	8015078 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 801511c:	9b03      	ldr	r3, [sp, #12]
 801511e:	9a01      	ldr	r2, [sp, #4]
 8015120:	881b      	ldrh	r3, [r3, #0]
 8015122:	eba3 0308 	sub.w	r3, r3, r8
 8015126:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801512a:	4418      	add	r0, r3
 801512c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015130:	eba3 0308 	sub.w	r3, r3, r8
 8015134:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8015138:	4415      	add	r5, r2
 801513a:	9a02      	ldr	r2, [sp, #8]
 801513c:	4413      	add	r3, r2
 801513e:	441c      	add	r4, r3
 8015140:	f10b 0b01 	add.w	fp, fp, #1
 8015144:	e792      	b.n	801506c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 8015146:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801514a:	b29f      	uxth	r7, r3
 801514c:	1216      	asrs	r6, r2, #8
 801514e:	43db      	mvns	r3, r3
 8015150:	b2db      	uxtb	r3, r3
 8015152:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015156:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801515a:	fb16 f603 	smulbb	r6, r6, r3
 801515e:	ea4f 09e2 	mov.w	r9, r2, asr #3
 8015162:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015166:	00d2      	lsls	r2, r2, #3
 8015168:	fb0c 6c07 	mla	ip, ip, r7, r6
 801516c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015170:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015174:	b2d2      	uxtb	r2, r2
 8015176:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801517a:	fa1f fc8c 	uxth.w	ip, ip
 801517e:	fb19 f903 	smulbb	r9, r9, r3
 8015182:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015186:	fa5f fe8e 	uxtb.w	lr, lr
 801518a:	fb12 f203 	smulbb	r2, r2, r3
 801518e:	fb06 9607 	mla	r6, r6, r7, r9
 8015192:	fb0e 2207 	mla	r2, lr, r7, r2
 8015196:	f10c 0901 	add.w	r9, ip, #1
 801519a:	b292      	uxth	r2, r2
 801519c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80151a0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80151a4:	f102 0c01 	add.w	ip, r2, #1
 80151a8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80151ac:	b2b6      	uxth	r6, r6
 80151ae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80151b2:	ea49 0c02 	orr.w	ip, r9, r2
 80151b6:	f106 0901 	add.w	r9, r6, #1
 80151ba:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80151be:	0976      	lsrs	r6, r6, #5
 80151c0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80151c4:	ea4c 0c06 	orr.w	ip, ip, r6
 80151c8:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 80151cc:	e746      	b.n	801505c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 80151ce:	9b02      	ldr	r3, [sp, #8]
 80151d0:	881b      	ldrh	r3, [r3, #0]
 80151d2:	eba3 0308 	sub.w	r3, r3, r8
 80151d6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80151da:	4418      	add	r0, r3
 80151dc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80151e0:	eba3 0308 	sub.w	r3, r3, r8
 80151e4:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 80151e8:	4415      	add	r5, r2
 80151ea:	9a01      	ldr	r2, [sp, #4]
 80151ec:	4413      	add	r3, r2
 80151ee:	441c      	add	r4, r3
 80151f0:	f10a 0a01 	add.w	sl, sl, #1
 80151f4:	e722      	b.n	801503c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 80151f6:	4b04      	ldr	r3, [pc, #16]	; (8015208 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 80151f8:	6818      	ldr	r0, [r3, #0]
 80151fa:	6803      	ldr	r3, [r0, #0]
 80151fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151fe:	4798      	blx	r3
 8015200:	b009      	add	sp, #36	; 0x24
 8015202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015206:	bf00      	nop
 8015208:	2002edcc 	.word	0x2002edcc
 801520c:	2002edc6 	.word	0x2002edc6

08015210 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8015210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015214:	b089      	sub	sp, #36	; 0x24
 8015216:	4682      	mov	sl, r0
 8015218:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801521c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801521e:	460d      	mov	r5, r1
 8015220:	4691      	mov	r9, r2
 8015222:	4698      	mov	r8, r3
 8015224:	b3ae      	cbz	r6, 8015292 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015226:	4608      	mov	r0, r1
 8015228:	f7fc fa8c 	bl	8011744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801522c:	4607      	mov	r7, r0
 801522e:	4628      	mov	r0, r5
 8015230:	f7fc fac2 	bl	80117b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015234:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015238:	4628      	mov	r0, r5
 801523a:	f8ad 9008 	strh.w	r9, [sp, #8]
 801523e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8015242:	f8ad 700c 	strh.w	r7, [sp, #12]
 8015246:	f7fc fc09 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801524a:	b178      	cbz	r0, 801526c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801524c:	4628      	mov	r0, r5
 801524e:	f7fc fc05 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015252:	2802      	cmp	r0, #2
 8015254:	d00a      	beq.n	801526c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015256:	4628      	mov	r0, r5
 8015258:	f7fc fc00 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801525c:	280b      	cmp	r0, #11
 801525e:	d005      	beq.n	801526c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015260:	4b69      	ldr	r3, [pc, #420]	; (8015408 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8015262:	4a6a      	ldr	r2, [pc, #424]	; (801540c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8015264:	486a      	ldr	r0, [pc, #424]	; (8015410 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8015266:	214f      	movs	r1, #79	; 0x4f
 8015268:	f007 ff24 	bl	801d0b4 <__assert_func>
 801526c:	4628      	mov	r0, r5
 801526e:	f7fc fb71 	bl	8011954 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015272:	4607      	mov	r7, r0
 8015274:	4628      	mov	r0, r5
 8015276:	f7fc fb9f 	bl	80119b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801527a:	4681      	mov	r9, r0
 801527c:	4628      	mov	r0, r5
 801527e:	f7fc fbed 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015282:	2802      	cmp	r0, #2
 8015284:	d108      	bne.n	8015298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8015286:	4633      	mov	r3, r6
 8015288:	4622      	mov	r2, r4
 801528a:	a902      	add	r1, sp, #8
 801528c:	4638      	mov	r0, r7
 801528e:	f7ff fa6d 	bl	801476c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015292:	b009      	add	sp, #36	; 0x24
 8015294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015298:	4628      	mov	r0, r5
 801529a:	f7fc fbdf 	bl	8011a5c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801529e:	280b      	cmp	r0, #11
 80152a0:	d107      	bne.n	80152b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80152a2:	9600      	str	r6, [sp, #0]
 80152a4:	4623      	mov	r3, r4
 80152a6:	aa02      	add	r2, sp, #8
 80152a8:	4649      	mov	r1, r9
 80152aa:	4638      	mov	r0, r7
 80152ac:	f7ff fe62 	bl	8014f74 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80152b0:	e7ef      	b.n	8015292 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80152b2:	4628      	mov	r0, r5
 80152b4:	f7fc fb14 	bl	80118e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80152b8:	b950      	cbnz	r0, 80152d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80152ba:	e9cd 6000 	strd	r6, r0, [sp]
 80152be:	f8da 3000 	ldr.w	r3, [sl]
 80152c2:	aa02      	add	r2, sp, #8
 80152c4:	691d      	ldr	r5, [r3, #16]
 80152c6:	4639      	mov	r1, r7
 80152c8:	4623      	mov	r3, r4
 80152ca:	4650      	mov	r0, sl
 80152cc:	47a8      	blx	r5
 80152ce:	e7e0      	b.n	8015292 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80152d0:	f10d 0818 	add.w	r8, sp, #24
 80152d4:	4629      	mov	r1, r5
 80152d6:	4640      	mov	r0, r8
 80152d8:	f7fc faa8 	bl	801182c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80152dc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80152e0:	ad04      	add	r5, sp, #16
 80152e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80152e6:	4628      	mov	r0, r5
 80152e8:	4621      	mov	r1, r4
 80152ea:	f7f8 ffc9 	bl	800e280 <_ZN8touchgfx4RectaNERKS0_>
 80152ee:	4628      	mov	r0, r5
 80152f0:	f7f9 f80a 	bl	800e308 <_ZNK8touchgfx4Rect7isEmptyEv>
 80152f4:	b138      	cbz	r0, 8015306 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80152f6:	9600      	str	r6, [sp, #0]
 80152f8:	4623      	mov	r3, r4
 80152fa:	aa02      	add	r2, sp, #8
 80152fc:	4649      	mov	r1, r9
 80152fe:	4638      	mov	r0, r7
 8015300:	f7ff fe50 	bl	8014fa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015304:	e7c5      	b.n	8015292 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015306:	e9cd 6000 	strd	r6, r0, [sp]
 801530a:	f8da 3000 	ldr.w	r3, [sl]
 801530e:	aa02      	add	r2, sp, #8
 8015310:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015314:	4639      	mov	r1, r7
 8015316:	462b      	mov	r3, r5
 8015318:	4650      	mov	r0, sl
 801531a:	47d8      	blx	fp
 801531c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015320:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015324:	4293      	cmp	r3, r2
 8015326:	dd13      	ble.n	8015350 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8015328:	f9b4 0000 	ldrsh.w	r0, [r4]
 801532c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015330:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015334:	1a9b      	subs	r3, r3, r2
 8015336:	f8ad 201a 	strh.w	r2, [sp, #26]
 801533a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801533e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015342:	9600      	str	r6, [sp, #0]
 8015344:	4643      	mov	r3, r8
 8015346:	aa02      	add	r2, sp, #8
 8015348:	4649      	mov	r1, r9
 801534a:	4638      	mov	r0, r7
 801534c:	f7ff fe2a 	bl	8014fa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015350:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8015354:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015358:	4293      	cmp	r3, r2
 801535a:	dd13      	ble.n	8015384 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801535c:	1a9b      	subs	r3, r3, r2
 801535e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8015362:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8015366:	f8ad 2018 	strh.w	r2, [sp, #24]
 801536a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801536e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015372:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015376:	9600      	str	r6, [sp, #0]
 8015378:	4643      	mov	r3, r8
 801537a:	aa02      	add	r2, sp, #8
 801537c:	4649      	mov	r1, r9
 801537e:	4638      	mov	r0, r7
 8015380:	f7ff fe10 	bl	8014fa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015384:	88a2      	ldrh	r2, [r4, #4]
 8015386:	8823      	ldrh	r3, [r4, #0]
 8015388:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801538c:	4413      	add	r3, r2
 801538e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015392:	440a      	add	r2, r1
 8015394:	b29b      	uxth	r3, r3
 8015396:	b292      	uxth	r2, r2
 8015398:	b211      	sxth	r1, r2
 801539a:	b218      	sxth	r0, r3
 801539c:	4288      	cmp	r0, r1
 801539e:	dd13      	ble.n	80153c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 80153a0:	1a9b      	subs	r3, r3, r2
 80153a2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80153a6:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80153aa:	f8ad 1018 	strh.w	r1, [sp, #24]
 80153ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80153b2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80153b6:	9600      	str	r6, [sp, #0]
 80153b8:	4643      	mov	r3, r8
 80153ba:	aa02      	add	r2, sp, #8
 80153bc:	4649      	mov	r1, r9
 80153be:	4638      	mov	r0, r7
 80153c0:	f8ad 501a 	strh.w	r5, [sp, #26]
 80153c4:	f7ff fdee 	bl	8014fa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80153c8:	88e2      	ldrh	r2, [r4, #6]
 80153ca:	8863      	ldrh	r3, [r4, #2]
 80153cc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80153d0:	4413      	add	r3, r2
 80153d2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80153d6:	440a      	add	r2, r1
 80153d8:	b29b      	uxth	r3, r3
 80153da:	b292      	uxth	r2, r2
 80153dc:	b211      	sxth	r1, r2
 80153de:	b218      	sxth	r0, r3
 80153e0:	4288      	cmp	r0, r1
 80153e2:	f77f af56 	ble.w	8015292 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80153e6:	f9b4 5000 	ldrsh.w	r5, [r4]
 80153ea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80153ee:	f8ad 5018 	strh.w	r5, [sp, #24]
 80153f2:	1a9b      	subs	r3, r3, r2
 80153f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80153f8:	f8ad 101a 	strh.w	r1, [sp, #26]
 80153fc:	f8ad 001c 	strh.w	r0, [sp, #28]
 8015400:	9600      	str	r6, [sp, #0]
 8015402:	4643      	mov	r3, r8
 8015404:	e779      	b.n	80152fa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8015406:	bf00      	nop
 8015408:	080206d9 	.word	0x080206d9
 801540c:	08020de6 	.word	0x08020de6
 8015410:	08020883 	.word	0x08020883

08015414 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8015414:	b508      	push	{r3, lr}
 8015416:	b180      	cbz	r0, 801543a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8015418:	2902      	cmp	r1, #2
 801541a:	d014      	beq.n	8015446 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801541c:	2903      	cmp	r1, #3
 801541e:	d01d      	beq.n	801545c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8015420:	2901      	cmp	r1, #1
 8015422:	d101      	bne.n	8015428 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8015424:	2001      	movs	r0, #1
 8015426:	bd08      	pop	{r3, pc}
 8015428:	4b0e      	ldr	r3, [pc, #56]	; (8015464 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801542a:	8818      	ldrh	r0, [r3, #0]
 801542c:	b990      	cbnz	r0, 8015454 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801542e:	4b0e      	ldr	r3, [pc, #56]	; (8015468 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8015430:	4a0e      	ldr	r2, [pc, #56]	; (801546c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8015432:	480f      	ldr	r0, [pc, #60]	; (8015470 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8015434:	21d7      	movs	r1, #215	; 0xd7
 8015436:	f007 fe3d 	bl	801d0b4 <__assert_func>
 801543a:	2902      	cmp	r1, #2
 801543c:	d00e      	beq.n	801545c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801543e:	2903      	cmp	r1, #3
 8015440:	d0f2      	beq.n	8015428 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8015442:	2901      	cmp	r1, #1
 8015444:	d1ee      	bne.n	8015424 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8015446:	4b07      	ldr	r3, [pc, #28]	; (8015464 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8015448:	8818      	ldrh	r0, [r3, #0]
 801544a:	2800      	cmp	r0, #0
 801544c:	d0ef      	beq.n	801542e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801544e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015452:	e7e8      	b.n	8015426 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015454:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015458:	4240      	negs	r0, r0
 801545a:	e7e4      	b.n	8015426 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801545c:	f04f 30ff 	mov.w	r0, #4294967295
 8015460:	e7e1      	b.n	8015426 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015462:	bf00      	nop
 8015464:	2002edc6 	.word	0x2002edc6
 8015468:	080209dd 	.word	0x080209dd
 801546c:	08020f63 	.word	0x08020f63
 8015470:	08020a1f 	.word	0x08020a1f

08015474 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8015474:	b508      	push	{r3, lr}
 8015476:	b180      	cbz	r0, 801549a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8015478:	2902      	cmp	r1, #2
 801547a:	d014      	beq.n	80154a6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 801547c:	2903      	cmp	r1, #3
 801547e:	d018      	beq.n	80154b2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015480:	2901      	cmp	r1, #1
 8015482:	d001      	beq.n	8015488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015484:	2001      	movs	r0, #1
 8015486:	e013      	b.n	80154b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015488:	4b0e      	ldr	r3, [pc, #56]	; (80154c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801548a:	8818      	ldrh	r0, [r3, #0]
 801548c:	b970      	cbnz	r0, 80154ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 801548e:	4b0e      	ldr	r3, [pc, #56]	; (80154c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8015490:	4a0e      	ldr	r2, [pc, #56]	; (80154cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8015492:	480f      	ldr	r0, [pc, #60]	; (80154d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8015494:	21d7      	movs	r1, #215	; 0xd7
 8015496:	f007 fe0d 	bl	801d0b4 <__assert_func>
 801549a:	2902      	cmp	r1, #2
 801549c:	d009      	beq.n	80154b2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 801549e:	2903      	cmp	r1, #3
 80154a0:	d0f0      	beq.n	8015484 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80154a2:	2901      	cmp	r1, #1
 80154a4:	d1f0      	bne.n	8015488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80154a6:	f04f 30ff 	mov.w	r0, #4294967295
 80154aa:	e001      	b.n	80154b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80154ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80154b0:	bd08      	pop	{r3, pc}
 80154b2:	4b04      	ldr	r3, [pc, #16]	; (80154c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80154b4:	8818      	ldrh	r0, [r3, #0]
 80154b6:	2800      	cmp	r0, #0
 80154b8:	d0e9      	beq.n	801548e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80154ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80154be:	4240      	negs	r0, r0
 80154c0:	e7f6      	b.n	80154b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80154c2:	bf00      	nop
 80154c4:	2002edc6 	.word	0x2002edc6
 80154c8:	080209dd 	.word	0x080209dd
 80154cc:	08020f63 	.word	0x08020f63
 80154d0:	08020a1f 	.word	0x08020a1f

080154d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80154d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d8:	b097      	sub	sp, #92	; 0x5c
 80154da:	9109      	str	r1, [sp, #36]	; 0x24
 80154dc:	a912      	add	r1, sp, #72	; 0x48
 80154de:	e881 000c 	stmia.w	r1, {r2, r3}
 80154e2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80154e6:	9306      	str	r3, [sp, #24]
 80154e8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80154ec:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80154f0:	930e      	str	r3, [sp, #56]	; 0x38
 80154f2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80154f6:	930a      	str	r3, [sp, #40]	; 0x28
 80154f8:	7b4b      	ldrb	r3, [r1, #13]
 80154fa:	798f      	ldrb	r7, [r1, #6]
 80154fc:	f9bd 4080 	ldrsh.w	r4, [sp, #128]	; 0x80
 8015500:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 8015504:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8015508:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801550c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8015510:	0158      	lsls	r0, r3, #5
 8015512:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015516:	4338      	orrs	r0, r7
 8015518:	9008      	str	r0, [sp, #32]
 801551a:	f000 8149 	beq.w	80157b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801551e:	011b      	lsls	r3, r3, #4
 8015520:	79c8      	ldrb	r0, [r1, #7]
 8015522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015526:	4303      	orrs	r3, r0
 8015528:	9307      	str	r3, [sp, #28]
 801552a:	f000 8141 	beq.w	80157b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801552e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8015532:	b29b      	uxth	r3, r3
 8015534:	2e00      	cmp	r6, #0
 8015536:	f000 80e5 	beq.w	8015704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x230>
 801553a:	1af6      	subs	r6, r6, r3
 801553c:	b2b6      	uxth	r6, r6
 801553e:	0433      	lsls	r3, r6, #16
 8015540:	d502      	bpl.n	8015548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8015542:	1ba4      	subs	r4, r4, r6
 8015544:	b224      	sxth	r4, r4
 8015546:	2600      	movs	r6, #0
 8015548:	f9b2 1000 	ldrsh.w	r1, [r2]
 801554c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8015550:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8015554:	428c      	cmp	r4, r1
 8015556:	b28b      	uxth	r3, r1
 8015558:	bfbf      	itttt	lt
 801555a:	18f6      	addlt	r6, r6, r3
 801555c:	1b34      	sublt	r4, r6, r4
 801555e:	b2a6      	uxthlt	r6, r4
 8015560:	460c      	movlt	r4, r1
 8015562:	8891      	ldrh	r1, [r2, #4]
 8015564:	440b      	add	r3, r1
 8015566:	b21b      	sxth	r3, r3
 8015568:	930d      	str	r3, [sp, #52]	; 0x34
 801556a:	88d3      	ldrh	r3, [r2, #6]
 801556c:	9a06      	ldr	r2, [sp, #24]
 801556e:	449a      	add	sl, r3
 8015570:	fa0f f38a 	sxth.w	r3, sl
 8015574:	930c      	str	r3, [sp, #48]	; 0x30
 8015576:	4bb5      	ldr	r3, [pc, #724]	; (801584c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8015578:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801557c:	f893 9000 	ldrb.w	r9, [r3]
 8015580:	f109 3cff 	add.w	ip, r9, #4294967295
 8015584:	f1dc 0300 	rsbs	r3, ip, #0
 8015588:	eb43 030c 	adc.w	r3, r3, ip
 801558c:	930b      	str	r3, [sp, #44]	; 0x2c
 801558e:	4621      	mov	r1, r4
 8015590:	465b      	mov	r3, fp
 8015592:	a812      	add	r0, sp, #72	; 0x48
 8015594:	f7fa f89d 	bl	800f6d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8015598:	4621      	mov	r1, r4
 801559a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801559e:	465b      	mov	r3, fp
 80155a0:	9a06      	ldr	r2, [sp, #24]
 80155a2:	a812      	add	r0, sp, #72	; 0x48
 80155a4:	f7fa f8ad 	bl	800f702 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80155a8:	a916      	add	r1, sp, #88	; 0x58
 80155aa:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80155ae:	a815      	add	r0, sp, #84	; 0x54
 80155b0:	f7fa f988 	bl	800f8c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80155b4:	f1bb 0f00 	cmp.w	fp, #0
 80155b8:	f040 80a7 	bne.w	801570a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x236>
 80155bc:	f1b9 0f01 	cmp.w	r9, #1
 80155c0:	f040 80ab 	bne.w	801571a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 80155c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f040 80f7 	bne.w	80157ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e6>
 80155cc:	4ba0      	ldr	r3, [pc, #640]	; (8015850 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80155ce:	6818      	ldr	r0, [r3, #0]
 80155d0:	6803      	ldr	r3, [r0, #0]
 80155d2:	6a1b      	ldr	r3, [r3, #32]
 80155d4:	4798      	blx	r3
 80155d6:	4a9f      	ldr	r2, [pc, #636]	; (8015854 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80155d8:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80155dc:	8811      	ldrh	r1, [r2, #0]
 80155de:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80155e2:	fb01 2303 	mla	r3, r1, r3, r2
 80155e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80155ea:	f04f 0901 	mov.w	r9, #1
 80155ee:	9307      	str	r3, [sp, #28]
 80155f0:	fa09 f308 	lsl.w	r3, r9, r8
 80155f4:	3b01      	subs	r3, #1
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	45c8      	cmp	r8, r9
 80155fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80155fc:	f000 80df 	beq.w	80157be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8015600:	f1b8 0f02 	cmp.w	r8, #2
 8015604:	f000 8153 	beq.w	80158ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3da>
 8015608:	f1b8 0f04 	cmp.w	r8, #4
 801560c:	f000 8146 	beq.w	801589c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c8>
 8015610:	b906      	cbnz	r6, 8015614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8015612:	b175      	cbz	r5, 8015632 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 8015614:	fb17 6305 	smlabb	r3, r7, r5, r6
 8015618:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801561a:	fb13 f308 	smulbb	r3, r3, r8
 801561e:	b29b      	uxth	r3, r3
 8015620:	ebaa 0a05 	sub.w	sl, sl, r5
 8015624:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8015628:	9226      	str	r2, [sp, #152]	; 0x98
 801562a:	fa1f fa8a 	uxth.w	sl, sl
 801562e:	f003 0507 	and.w	r5, r3, #7
 8015632:	4659      	mov	r1, fp
 8015634:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015636:	f7ff feed 	bl	8015414 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801563a:	4659      	mov	r1, fp
 801563c:	9010      	str	r0, [sp, #64]	; 0x40
 801563e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015640:	f7ff ff18 	bl	8015474 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8015644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015646:	9a06      	ldr	r2, [sp, #24]
 8015648:	1a9a      	subs	r2, r3, r2
 801564a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801564c:	1ba4      	subs	r4, r4, r6
 801564e:	1b1c      	subs	r4, r3, r4
 8015650:	9b08      	ldr	r3, [sp, #32]
 8015652:	4592      	cmp	sl, r2
 8015654:	bfa8      	it	ge
 8015656:	4692      	movge	sl, r2
 8015658:	429c      	cmp	r4, r3
 801565a:	bfd4      	ite	le
 801565c:	ebc6 0604 	rsble	r6, r6, r4
 8015660:	ebc6 0603 	rsbgt	r6, r6, r3
 8015664:	1bbf      	subs	r7, r7, r6
 8015666:	fb08 f307 	mul.w	r3, r8, r7
 801566a:	930b      	str	r3, [sp, #44]	; 0x2c
 801566c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015672:	1219      	asrs	r1, r3, #8
 8015674:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 8015678:	930c      	str	r3, [sp, #48]	; 0x30
 801567a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801567c:	f3c3 01cc 	ubfx	r1, r3, #3, #13
 8015680:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8015684:	930d      	str	r3, [sp, #52]	; 0x34
 8015686:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015688:	00d9      	lsls	r1, r3, #3
 801568a:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 801568e:	930e      	str	r3, [sp, #56]	; 0x38
 8015690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015692:	0059      	lsls	r1, r3, #1
 8015694:	fb03 0016 	mls	r0, r3, r6, r0
 8015698:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801569c:	434b      	muls	r3, r1
 801569e:	9106      	str	r1, [sp, #24]
 80156a0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80156a2:	412a      	asrs	r2, r5
 80156a4:	b289      	uxth	r1, r1
 80156a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80156aa:	b2d2      	uxtb	r2, r2
 80156ac:	9110      	str	r1, [sp, #64]	; 0x40
 80156ae:	9311      	str	r3, [sp, #68]	; 0x44
 80156b0:	f1ba 0f00 	cmp.w	sl, #0
 80156b4:	f340 80e4 	ble.w	8015880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80156b8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80156bc:	46b6      	mov	lr, r6
 80156be:	f1be 0f00 	cmp.w	lr, #0
 80156c2:	f340 80c9 	ble.w	8015858 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80156c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156c8:	4013      	ands	r3, r2
 80156ca:	d009      	beq.n	80156e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20c>
 80156cc:	fb13 f309 	smulbb	r3, r3, r9
 80156d0:	2bfe      	cmp	r3, #254	; 0xfe
 80156d2:	dd77      	ble.n	80157c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 80156d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80156d6:	29ff      	cmp	r1, #255	; 0xff
 80156d8:	d174      	bne.n	80157c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 80156da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80156dc:	f8ac 0000 	strh.w	r0, [ip]
 80156e0:	4445      	add	r5, r8
 80156e2:	b2ad      	uxth	r5, r5
 80156e4:	2d07      	cmp	r5, #7
 80156e6:	bf81      	itttt	hi
 80156e8:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80156ea:	785a      	ldrbhi	r2, [r3, #1]
 80156ec:	3301      	addhi	r3, #1
 80156ee:	9326      	strhi	r3, [sp, #152]	; 0x98
 80156f0:	9b06      	ldr	r3, [sp, #24]
 80156f2:	bf9a      	itte	ls
 80156f4:	fa42 f208 	asrls.w	r2, r2, r8
 80156f8:	b2d2      	uxtbls	r2, r2
 80156fa:	2500      	movhi	r5, #0
 80156fc:	449c      	add	ip, r3
 80156fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015702:	e7dc      	b.n	80156be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8015704:	441c      	add	r4, r3
 8015706:	b224      	sxth	r4, r4
 8015708:	e71e      	b.n	8015548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801570a:	f1bb 0f01 	cmp.w	fp, #1
 801570e:	f47f af59 	bne.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015712:	f1b9 0f01 	cmp.w	r9, #1
 8015716:	f47f af55 	bne.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801571a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8015850 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801571e:	f8d9 0000 	ldr.w	r0, [r9]
 8015722:	6803      	ldr	r3, [r0, #0]
 8015724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015726:	4798      	blx	r3
 8015728:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801572c:	464a      	mov	r2, r9
 801572e:	d006      	beq.n	801573e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8015730:	f1b8 0f04 	cmp.w	r8, #4
 8015734:	d13f      	bne.n	80157b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8015736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015738:	3300      	adds	r3, #0
 801573a:	bf18      	it	ne
 801573c:	2301      	movne	r3, #1
 801573e:	05c0      	lsls	r0, r0, #23
 8015740:	f140 80a7 	bpl.w	8015892 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8015744:	f1b8 0f08 	cmp.w	r8, #8
 8015748:	f040 80a3 	bne.w	8015892 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 801574c:	2b00      	cmp	r3, #0
 801574e:	bf0c      	ite	eq
 8015750:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8015754:	2180      	movne	r1, #128	; 0x80
 8015756:	2e00      	cmp	r6, #0
 8015758:	f47f af34 	bne.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801575c:	2d00      	cmp	r5, #0
 801575e:	f47f af31 	bne.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015762:	9b08      	ldr	r3, [sp, #32]
 8015764:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015766:	18e3      	adds	r3, r4, r3
 8015768:	4283      	cmp	r3, r0
 801576a:	f73f af2b 	bgt.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801576e:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8015772:	4403      	add	r3, r0
 8015774:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015776:	4283      	cmp	r3, r0
 8015778:	f73f af24 	bgt.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801577c:	6810      	ldr	r0, [r2, #0]
 801577e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8015782:	6804      	ldr	r4, [r0, #0]
 8015784:	9105      	str	r1, [sp, #20]
 8015786:	f1b8 0f08 	cmp.w	r8, #8
 801578a:	bf18      	it	ne
 801578c:	3701      	addne	r7, #1
 801578e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015790:	9104      	str	r1, [sp, #16]
 8015792:	bf18      	it	ne
 8015794:	f027 0701 	bicne.w	r7, r7, #1
 8015798:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801579a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801579e:	bf18      	it	ne
 80157a0:	b2bf      	uxthne	r7, r7
 80157a2:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80157a6:	e9cd 7a00 	strd	r7, sl, [sp]
 80157aa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80157ac:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80157ae:	47a0      	blx	r4
 80157b0:	b017      	add	sp, #92	; 0x5c
 80157b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157b6:	2300      	movs	r3, #0
 80157b8:	e7c1      	b.n	801573e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 80157ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157bc:	e70b      	b.n	80155d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80157be:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80157c2:	e725      	b.n	8015610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80157c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80157c6:	f8bc 4000 	ldrh.w	r4, [ip]
 80157ca:	fb11 f303 	smulbb	r3, r1, r3
 80157ce:	b29b      	uxth	r3, r3
 80157d0:	1c59      	adds	r1, r3, #1
 80157d2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80157d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80157da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157dc:	b29f      	uxth	r7, r3
 80157de:	1220      	asrs	r0, r4, #8
 80157e0:	43db      	mvns	r3, r3
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	fb11 f107 	smulbb	r1, r1, r7
 80157e8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80157ec:	fb00 1003 	mla	r0, r0, r3, r1
 80157f0:	b281      	uxth	r1, r0
 80157f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80157f4:	9108      	str	r1, [sp, #32]
 80157f6:	fb17 fb00 	smulbb	fp, r7, r0
 80157fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80157fc:	10e1      	asrs	r1, r4, #3
 80157fe:	00e4      	lsls	r4, r4, #3
 8015800:	fb17 f700 	smulbb	r7, r7, r0
 8015804:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8015808:	b2e4      	uxtb	r4, r4
 801580a:	fb01 b103 	mla	r1, r1, r3, fp
 801580e:	fb04 7703 	mla	r7, r4, r3, r7
 8015812:	9b08      	ldr	r3, [sp, #32]
 8015814:	9808      	ldr	r0, [sp, #32]
 8015816:	b2bf      	uxth	r7, r7
 8015818:	3301      	adds	r3, #1
 801581a:	f107 0b01 	add.w	fp, r7, #1
 801581e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015822:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8015826:	b289      	uxth	r1, r1
 8015828:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801582c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8015830:	ea40 000b 	orr.w	r0, r0, fp
 8015834:	f101 0b01 	add.w	fp, r1, #1
 8015838:	eb0b 2b11 	add.w	fp, fp, r1, lsr #8
 801583c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015840:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015844:	ea40 000b 	orr.w	r0, r0, fp
 8015848:	e748      	b.n	80156dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801584a:	bf00      	nop
 801584c:	2002edc4 	.word	0x2002edc4
 8015850:	2002edcc 	.word	0x2002edcc
 8015854:	2002edc6 	.word	0x2002edc6
 8015858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801585a:	b153      	cbz	r3, 8015872 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801585c:	441d      	add	r5, r3
 801585e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015860:	b2ad      	uxth	r5, r5
 8015862:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 8015866:	f005 0507 	and.w	r5, r5, #7
 801586a:	781a      	ldrb	r2, [r3, #0]
 801586c:	9326      	str	r3, [sp, #152]	; 0x98
 801586e:	412a      	asrs	r2, r5
 8015870:	b2d2      	uxtb	r2, r2
 8015872:	9b07      	ldr	r3, [sp, #28]
 8015874:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015876:	440b      	add	r3, r1
 8015878:	9307      	str	r3, [sp, #28]
 801587a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801587e:	e717      	b.n	80156b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1dc>
 8015880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015882:	2b00      	cmp	r3, #0
 8015884:	d194      	bne.n	80157b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8015886:	4b0b      	ldr	r3, [pc, #44]	; (80158b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>)
 8015888:	6818      	ldr	r0, [r3, #0]
 801588a:	6803      	ldr	r3, [r0, #0]
 801588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801588e:	4798      	blx	r3
 8015890:	e78e      	b.n	80157b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8015892:	2b00      	cmp	r3, #0
 8015894:	f43f ae96 	beq.w	80155c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015898:	2180      	movs	r1, #128	; 0x80
 801589a:	e75c      	b.n	8015756 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 801589c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801589e:	b11b      	cbz	r3, 80158a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 80158a0:	07fb      	lsls	r3, r7, #31
 80158a2:	d501      	bpl.n	80158a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 80158a4:	3701      	adds	r7, #1
 80158a6:	b2bf      	uxth	r7, r7
 80158a8:	f04f 0911 	mov.w	r9, #17
 80158ac:	e6b0      	b.n	8015610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80158ae:	f04f 0955 	mov.w	r9, #85	; 0x55
 80158b2:	e6ad      	b.n	8015610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80158b4:	2002edcc 	.word	0x2002edcc

080158b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80158b8:	b538      	push	{r3, r4, r5, lr}
 80158ba:	4c15      	ldr	r4, [pc, #84]	; (8015910 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80158bc:	7823      	ldrb	r3, [r4, #0]
 80158be:	f3bf 8f5b 	dmb	ish
 80158c2:	07da      	lsls	r2, r3, #31
 80158c4:	4605      	mov	r5, r0
 80158c6:	d40b      	bmi.n	80158e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80158c8:	4620      	mov	r0, r4
 80158ca:	f007 fbc9 	bl	801d060 <__cxa_guard_acquire>
 80158ce:	b138      	cbz	r0, 80158e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80158d0:	4620      	mov	r0, r4
 80158d2:	f007 fbd1 	bl	801d078 <__cxa_guard_release>
 80158d6:	4a0f      	ldr	r2, [pc, #60]	; (8015914 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80158d8:	490f      	ldr	r1, [pc, #60]	; (8015918 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80158da:	4810      	ldr	r0, [pc, #64]	; (801591c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80158dc:	f007 fbb6 	bl	801d04c <__aeabi_atexit>
 80158e0:	4c0f      	ldr	r4, [pc, #60]	; (8015920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80158e2:	7823      	ldrb	r3, [r4, #0]
 80158e4:	f3bf 8f5b 	dmb	ish
 80158e8:	07db      	lsls	r3, r3, #31
 80158ea:	d40b      	bmi.n	8015904 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80158ec:	4620      	mov	r0, r4
 80158ee:	f007 fbb7 	bl	801d060 <__cxa_guard_acquire>
 80158f2:	b138      	cbz	r0, 8015904 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80158f4:	4620      	mov	r0, r4
 80158f6:	f007 fbbf 	bl	801d078 <__cxa_guard_release>
 80158fa:	4a06      	ldr	r2, [pc, #24]	; (8015914 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80158fc:	4909      	ldr	r1, [pc, #36]	; (8015924 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80158fe:	480a      	ldr	r0, [pc, #40]	; (8015928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8015900:	f007 fba4 	bl	801d04c <__aeabi_atexit>
 8015904:	4b05      	ldr	r3, [pc, #20]	; (801591c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8015906:	612b      	str	r3, [r5, #16]
 8015908:	4b07      	ldr	r3, [pc, #28]	; (8015928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801590a:	616b      	str	r3, [r5, #20]
 801590c:	bd38      	pop	{r3, r4, r5, pc}
 801590e:	bf00      	nop
 8015910:	2002eeb8 	.word	0x2002eeb8
 8015914:	20000000 	.word	0x20000000
 8015918:	08013f73 	.word	0x08013f73
 801591c:	200000d0 	.word	0x200000d0
 8015920:	2002eebc 	.word	0x2002eebc
 8015924:	08013f71 	.word	0x08013f71
 8015928:	200000d4 	.word	0x200000d4

0801592c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801592c:	b538      	push	{r3, r4, r5, lr}
 801592e:	4c15      	ldr	r4, [pc, #84]	; (8015984 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8015930:	7823      	ldrb	r3, [r4, #0]
 8015932:	f3bf 8f5b 	dmb	ish
 8015936:	07da      	lsls	r2, r3, #31
 8015938:	4605      	mov	r5, r0
 801593a:	d40b      	bmi.n	8015954 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801593c:	4620      	mov	r0, r4
 801593e:	f007 fb8f 	bl	801d060 <__cxa_guard_acquire>
 8015942:	b138      	cbz	r0, 8015954 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8015944:	4620      	mov	r0, r4
 8015946:	f007 fb97 	bl	801d078 <__cxa_guard_release>
 801594a:	4a0f      	ldr	r2, [pc, #60]	; (8015988 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801594c:	490f      	ldr	r1, [pc, #60]	; (801598c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801594e:	4810      	ldr	r0, [pc, #64]	; (8015990 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8015950:	f007 fb7c 	bl	801d04c <__aeabi_atexit>
 8015954:	4c0f      	ldr	r4, [pc, #60]	; (8015994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8015956:	7823      	ldrb	r3, [r4, #0]
 8015958:	f3bf 8f5b 	dmb	ish
 801595c:	07db      	lsls	r3, r3, #31
 801595e:	d40b      	bmi.n	8015978 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8015960:	4620      	mov	r0, r4
 8015962:	f007 fb7d 	bl	801d060 <__cxa_guard_acquire>
 8015966:	b138      	cbz	r0, 8015978 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8015968:	4620      	mov	r0, r4
 801596a:	f007 fb85 	bl	801d078 <__cxa_guard_release>
 801596e:	4a06      	ldr	r2, [pc, #24]	; (8015988 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8015970:	4909      	ldr	r1, [pc, #36]	; (8015998 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8015972:	480a      	ldr	r0, [pc, #40]	; (801599c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8015974:	f007 fb6a 	bl	801d04c <__aeabi_atexit>
 8015978:	4b05      	ldr	r3, [pc, #20]	; (8015990 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801597a:	60ab      	str	r3, [r5, #8]
 801597c:	4b07      	ldr	r3, [pc, #28]	; (801599c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801597e:	60eb      	str	r3, [r5, #12]
 8015980:	bd38      	pop	{r3, r4, r5, pc}
 8015982:	bf00      	nop
 8015984:	2002ee90 	.word	0x2002ee90
 8015988:	20000000 	.word	0x20000000
 801598c:	08013f77 	.word	0x08013f77
 8015990:	200000a8 	.word	0x200000a8
 8015994:	2002ee94 	.word	0x2002ee94
 8015998:	08013f75 	.word	0x08013f75
 801599c:	200000ac 	.word	0x200000ac

080159a0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80159a0:	b510      	push	{r4, lr}
 80159a2:	4604      	mov	r4, r0
 80159a4:	f7ff ff88 	bl	80158b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80159a8:	4620      	mov	r0, r4
 80159aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159ae:	f7ff bfbd 	b.w	801592c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080159b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80159b4:	b538      	push	{r3, r4, r5, lr}
 80159b6:	4c15      	ldr	r4, [pc, #84]	; (8015a0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80159b8:	7823      	ldrb	r3, [r4, #0]
 80159ba:	f3bf 8f5b 	dmb	ish
 80159be:	07da      	lsls	r2, r3, #31
 80159c0:	4605      	mov	r5, r0
 80159c2:	d40b      	bmi.n	80159dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80159c4:	4620      	mov	r0, r4
 80159c6:	f007 fb4b 	bl	801d060 <__cxa_guard_acquire>
 80159ca:	b138      	cbz	r0, 80159dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80159cc:	4620      	mov	r0, r4
 80159ce:	f007 fb53 	bl	801d078 <__cxa_guard_release>
 80159d2:	4a0f      	ldr	r2, [pc, #60]	; (8015a10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80159d4:	490f      	ldr	r1, [pc, #60]	; (8015a14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80159d6:	4810      	ldr	r0, [pc, #64]	; (8015a18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80159d8:	f007 fb38 	bl	801d04c <__aeabi_atexit>
 80159dc:	4c0f      	ldr	r4, [pc, #60]	; (8015a1c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80159de:	7823      	ldrb	r3, [r4, #0]
 80159e0:	f3bf 8f5b 	dmb	ish
 80159e4:	07db      	lsls	r3, r3, #31
 80159e6:	d40b      	bmi.n	8015a00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80159e8:	4620      	mov	r0, r4
 80159ea:	f007 fb39 	bl	801d060 <__cxa_guard_acquire>
 80159ee:	b138      	cbz	r0, 8015a00 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80159f0:	4620      	mov	r0, r4
 80159f2:	f007 fb41 	bl	801d078 <__cxa_guard_release>
 80159f6:	4a06      	ldr	r2, [pc, #24]	; (8015a10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80159f8:	4909      	ldr	r1, [pc, #36]	; (8015a20 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80159fa:	480a      	ldr	r0, [pc, #40]	; (8015a24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80159fc:	f007 fb26 	bl	801d04c <__aeabi_atexit>
 8015a00:	4b05      	ldr	r3, [pc, #20]	; (8015a18 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8015a02:	622b      	str	r3, [r5, #32]
 8015a04:	4b07      	ldr	r3, [pc, #28]	; (8015a24 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8015a06:	626b      	str	r3, [r5, #36]	; 0x24
 8015a08:	bd38      	pop	{r3, r4, r5, pc}
 8015a0a:	bf00      	nop
 8015a0c:	2002eec0 	.word	0x2002eec0
 8015a10:	20000000 	.word	0x20000000
 8015a14:	08013f6b 	.word	0x08013f6b
 8015a18:	200000d8 	.word	0x200000d8
 8015a1c:	2002eec4 	.word	0x2002eec4
 8015a20:	08013f69 	.word	0x08013f69
 8015a24:	200000dc 	.word	0x200000dc

08015a28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8015a28:	b538      	push	{r3, r4, r5, lr}
 8015a2a:	4c15      	ldr	r4, [pc, #84]	; (8015a80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8015a2c:	7823      	ldrb	r3, [r4, #0]
 8015a2e:	f3bf 8f5b 	dmb	ish
 8015a32:	07da      	lsls	r2, r3, #31
 8015a34:	4605      	mov	r5, r0
 8015a36:	d40b      	bmi.n	8015a50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015a38:	4620      	mov	r0, r4
 8015a3a:	f007 fb11 	bl	801d060 <__cxa_guard_acquire>
 8015a3e:	b138      	cbz	r0, 8015a50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015a40:	4620      	mov	r0, r4
 8015a42:	f007 fb19 	bl	801d078 <__cxa_guard_release>
 8015a46:	4a0f      	ldr	r2, [pc, #60]	; (8015a84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015a48:	490f      	ldr	r1, [pc, #60]	; (8015a88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8015a4a:	4810      	ldr	r0, [pc, #64]	; (8015a8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015a4c:	f007 fafe 	bl	801d04c <__aeabi_atexit>
 8015a50:	4c0f      	ldr	r4, [pc, #60]	; (8015a90 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8015a52:	7823      	ldrb	r3, [r4, #0]
 8015a54:	f3bf 8f5b 	dmb	ish
 8015a58:	07db      	lsls	r3, r3, #31
 8015a5a:	d40b      	bmi.n	8015a74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	f007 faff 	bl	801d060 <__cxa_guard_acquire>
 8015a62:	b138      	cbz	r0, 8015a74 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015a64:	4620      	mov	r0, r4
 8015a66:	f007 fb07 	bl	801d078 <__cxa_guard_release>
 8015a6a:	4a06      	ldr	r2, [pc, #24]	; (8015a84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015a6c:	4909      	ldr	r1, [pc, #36]	; (8015a94 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8015a6e:	480a      	ldr	r0, [pc, #40]	; (8015a98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015a70:	f007 faec 	bl	801d04c <__aeabi_atexit>
 8015a74:	4b05      	ldr	r3, [pc, #20]	; (8015a8c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015a76:	61ab      	str	r3, [r5, #24]
 8015a78:	4b07      	ldr	r3, [pc, #28]	; (8015a98 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015a7a:	61eb      	str	r3, [r5, #28]
 8015a7c:	bd38      	pop	{r3, r4, r5, pc}
 8015a7e:	bf00      	nop
 8015a80:	2002ee98 	.word	0x2002ee98
 8015a84:	20000000 	.word	0x20000000
 8015a88:	08013f6f 	.word	0x08013f6f
 8015a8c:	200000b0 	.word	0x200000b0
 8015a90:	2002ee9c 	.word	0x2002ee9c
 8015a94:	08013f6d 	.word	0x08013f6d
 8015a98:	200000b4 	.word	0x200000b4

08015a9c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8015a9c:	b510      	push	{r4, lr}
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	f7ff ff88 	bl	80159b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aaa:	f7ff bfbd 	b.w	8015a28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08015ab0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8015ab0:	b538      	push	{r3, r4, r5, lr}
 8015ab2:	4c15      	ldr	r4, [pc, #84]	; (8015b08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8015ab4:	7823      	ldrb	r3, [r4, #0]
 8015ab6:	f3bf 8f5b 	dmb	ish
 8015aba:	07da      	lsls	r2, r3, #31
 8015abc:	4605      	mov	r5, r0
 8015abe:	d40b      	bmi.n	8015ad8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f007 facd 	bl	801d060 <__cxa_guard_acquire>
 8015ac6:	b138      	cbz	r0, 8015ad8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8015ac8:	4620      	mov	r0, r4
 8015aca:	f007 fad5 	bl	801d078 <__cxa_guard_release>
 8015ace:	4a0f      	ldr	r2, [pc, #60]	; (8015b0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015ad0:	490f      	ldr	r1, [pc, #60]	; (8015b10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8015ad2:	4810      	ldr	r0, [pc, #64]	; (8015b14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8015ad4:	f007 faba 	bl	801d04c <__aeabi_atexit>
 8015ad8:	4c0f      	ldr	r4, [pc, #60]	; (8015b18 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8015ada:	7823      	ldrb	r3, [r4, #0]
 8015adc:	f3bf 8f5b 	dmb	ish
 8015ae0:	07db      	lsls	r3, r3, #31
 8015ae2:	d40b      	bmi.n	8015afc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	f007 fabb 	bl	801d060 <__cxa_guard_acquire>
 8015aea:	b138      	cbz	r0, 8015afc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8015aec:	4620      	mov	r0, r4
 8015aee:	f007 fac3 	bl	801d078 <__cxa_guard_release>
 8015af2:	4a06      	ldr	r2, [pc, #24]	; (8015b0c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015af4:	4909      	ldr	r1, [pc, #36]	; (8015b1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8015af6:	480a      	ldr	r0, [pc, #40]	; (8015b20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015af8:	f007 faa8 	bl	801d04c <__aeabi_atexit>
 8015afc:	4b05      	ldr	r3, [pc, #20]	; (8015b14 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8015afe:	632b      	str	r3, [r5, #48]	; 0x30
 8015b00:	4b07      	ldr	r3, [pc, #28]	; (8015b20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015b02:	636b      	str	r3, [r5, #52]	; 0x34
 8015b04:	bd38      	pop	{r3, r4, r5, pc}
 8015b06:	bf00      	nop
 8015b08:	2002eed0 	.word	0x2002eed0
 8015b0c:	20000000 	.word	0x20000000
 8015b10:	08013f63 	.word	0x08013f63
 8015b14:	200000e8 	.word	0x200000e8
 8015b18:	2002eed4 	.word	0x2002eed4
 8015b1c:	08013f61 	.word	0x08013f61
 8015b20:	200000ec 	.word	0x200000ec

08015b24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8015b24:	b538      	push	{r3, r4, r5, lr}
 8015b26:	4c15      	ldr	r4, [pc, #84]	; (8015b7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8015b28:	7823      	ldrb	r3, [r4, #0]
 8015b2a:	f3bf 8f5b 	dmb	ish
 8015b2e:	07da      	lsls	r2, r3, #31
 8015b30:	4605      	mov	r5, r0
 8015b32:	d40b      	bmi.n	8015b4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015b34:	4620      	mov	r0, r4
 8015b36:	f007 fa93 	bl	801d060 <__cxa_guard_acquire>
 8015b3a:	b138      	cbz	r0, 8015b4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f007 fa9b 	bl	801d078 <__cxa_guard_release>
 8015b42:	4a0f      	ldr	r2, [pc, #60]	; (8015b80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015b44:	490f      	ldr	r1, [pc, #60]	; (8015b84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8015b46:	4810      	ldr	r0, [pc, #64]	; (8015b88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015b48:	f007 fa80 	bl	801d04c <__aeabi_atexit>
 8015b4c:	4c0f      	ldr	r4, [pc, #60]	; (8015b8c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8015b4e:	7823      	ldrb	r3, [r4, #0]
 8015b50:	f3bf 8f5b 	dmb	ish
 8015b54:	07db      	lsls	r3, r3, #31
 8015b56:	d40b      	bmi.n	8015b70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015b58:	4620      	mov	r0, r4
 8015b5a:	f007 fa81 	bl	801d060 <__cxa_guard_acquire>
 8015b5e:	b138      	cbz	r0, 8015b70 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015b60:	4620      	mov	r0, r4
 8015b62:	f007 fa89 	bl	801d078 <__cxa_guard_release>
 8015b66:	4a06      	ldr	r2, [pc, #24]	; (8015b80 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015b68:	4909      	ldr	r1, [pc, #36]	; (8015b90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8015b6a:	480a      	ldr	r0, [pc, #40]	; (8015b94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015b6c:	f007 fa6e 	bl	801d04c <__aeabi_atexit>
 8015b70:	4b05      	ldr	r3, [pc, #20]	; (8015b88 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015b72:	62ab      	str	r3, [r5, #40]	; 0x28
 8015b74:	4b07      	ldr	r3, [pc, #28]	; (8015b94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015b76:	62eb      	str	r3, [r5, #44]	; 0x2c
 8015b78:	bd38      	pop	{r3, r4, r5, pc}
 8015b7a:	bf00      	nop
 8015b7c:	2002eea0 	.word	0x2002eea0
 8015b80:	20000000 	.word	0x20000000
 8015b84:	08013f67 	.word	0x08013f67
 8015b88:	200000b8 	.word	0x200000b8
 8015b8c:	2002eea4 	.word	0x2002eea4
 8015b90:	08013f65 	.word	0x08013f65
 8015b94:	200000bc 	.word	0x200000bc

08015b98 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8015b98:	b510      	push	{r4, lr}
 8015b9a:	4604      	mov	r4, r0
 8015b9c:	f7ff ff88 	bl	8015ab0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ba6:	f7ff bfbd 	b.w	8015b24 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08015bac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8015bac:	b538      	push	{r3, r4, r5, lr}
 8015bae:	4c15      	ldr	r4, [pc, #84]	; (8015c04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8015bb0:	7823      	ldrb	r3, [r4, #0]
 8015bb2:	f3bf 8f5b 	dmb	ish
 8015bb6:	07da      	lsls	r2, r3, #31
 8015bb8:	4605      	mov	r5, r0
 8015bba:	d40b      	bmi.n	8015bd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	f007 fa4f 	bl	801d060 <__cxa_guard_acquire>
 8015bc2:	b138      	cbz	r0, 8015bd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f007 fa57 	bl	801d078 <__cxa_guard_release>
 8015bca:	4a0f      	ldr	r2, [pc, #60]	; (8015c08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8015bcc:	490f      	ldr	r1, [pc, #60]	; (8015c0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8015bce:	4810      	ldr	r0, [pc, #64]	; (8015c10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8015bd0:	f007 fa3c 	bl	801d04c <__aeabi_atexit>
 8015bd4:	4c0f      	ldr	r4, [pc, #60]	; (8015c14 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8015bd6:	7823      	ldrb	r3, [r4, #0]
 8015bd8:	f3bf 8f5b 	dmb	ish
 8015bdc:	07db      	lsls	r3, r3, #31
 8015bde:	d40b      	bmi.n	8015bf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8015be0:	4620      	mov	r0, r4
 8015be2:	f007 fa3d 	bl	801d060 <__cxa_guard_acquire>
 8015be6:	b138      	cbz	r0, 8015bf8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8015be8:	4620      	mov	r0, r4
 8015bea:	f007 fa45 	bl	801d078 <__cxa_guard_release>
 8015bee:	4a06      	ldr	r2, [pc, #24]	; (8015c08 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8015bf0:	4909      	ldr	r1, [pc, #36]	; (8015c18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8015bf2:	480a      	ldr	r0, [pc, #40]	; (8015c1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8015bf4:	f007 fa2a 	bl	801d04c <__aeabi_atexit>
 8015bf8:	4b05      	ldr	r3, [pc, #20]	; (8015c10 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8015bfa:	652b      	str	r3, [r5, #80]	; 0x50
 8015bfc:	4b07      	ldr	r3, [pc, #28]	; (8015c1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8015bfe:	656b      	str	r3, [r5, #84]	; 0x54
 8015c00:	bd38      	pop	{r3, r4, r5, pc}
 8015c02:	bf00      	nop
 8015c04:	2002eed8 	.word	0x2002eed8
 8015c08:	20000000 	.word	0x20000000
 8015c0c:	08013f53 	.word	0x08013f53
 8015c10:	200000f0 	.word	0x200000f0
 8015c14:	2002eedc 	.word	0x2002eedc
 8015c18:	08013f51 	.word	0x08013f51
 8015c1c:	200000f4 	.word	0x200000f4

08015c20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8015c20:	b538      	push	{r3, r4, r5, lr}
 8015c22:	4c15      	ldr	r4, [pc, #84]	; (8015c78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8015c24:	7823      	ldrb	r3, [r4, #0]
 8015c26:	f3bf 8f5b 	dmb	ish
 8015c2a:	07da      	lsls	r2, r3, #31
 8015c2c:	4605      	mov	r5, r0
 8015c2e:	d40b      	bmi.n	8015c48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8015c30:	4620      	mov	r0, r4
 8015c32:	f007 fa15 	bl	801d060 <__cxa_guard_acquire>
 8015c36:	b138      	cbz	r0, 8015c48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f007 fa1d 	bl	801d078 <__cxa_guard_release>
 8015c3e:	4a0f      	ldr	r2, [pc, #60]	; (8015c7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8015c40:	490f      	ldr	r1, [pc, #60]	; (8015c80 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8015c42:	4810      	ldr	r0, [pc, #64]	; (8015c84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8015c44:	f007 fa02 	bl	801d04c <__aeabi_atexit>
 8015c48:	4c0f      	ldr	r4, [pc, #60]	; (8015c88 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8015c4a:	7823      	ldrb	r3, [r4, #0]
 8015c4c:	f3bf 8f5b 	dmb	ish
 8015c50:	07db      	lsls	r3, r3, #31
 8015c52:	d40b      	bmi.n	8015c6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8015c54:	4620      	mov	r0, r4
 8015c56:	f007 fa03 	bl	801d060 <__cxa_guard_acquire>
 8015c5a:	b138      	cbz	r0, 8015c6c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8015c5c:	4620      	mov	r0, r4
 8015c5e:	f007 fa0b 	bl	801d078 <__cxa_guard_release>
 8015c62:	4a06      	ldr	r2, [pc, #24]	; (8015c7c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8015c64:	4909      	ldr	r1, [pc, #36]	; (8015c8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8015c66:	480a      	ldr	r0, [pc, #40]	; (8015c90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8015c68:	f007 f9f0 	bl	801d04c <__aeabi_atexit>
 8015c6c:	4b05      	ldr	r3, [pc, #20]	; (8015c84 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8015c6e:	64ab      	str	r3, [r5, #72]	; 0x48
 8015c70:	4b07      	ldr	r3, [pc, #28]	; (8015c90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8015c72:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015c74:	bd38      	pop	{r3, r4, r5, pc}
 8015c76:	bf00      	nop
 8015c78:	2002eee0 	.word	0x2002eee0
 8015c7c:	20000000 	.word	0x20000000
 8015c80:	08013f57 	.word	0x08013f57
 8015c84:	200000f8 	.word	0x200000f8
 8015c88:	2002eee4 	.word	0x2002eee4
 8015c8c:	08013f55 	.word	0x08013f55
 8015c90:	200000fc 	.word	0x200000fc

08015c94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8015c94:	b538      	push	{r3, r4, r5, lr}
 8015c96:	4c15      	ldr	r4, [pc, #84]	; (8015cec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8015c98:	7823      	ldrb	r3, [r4, #0]
 8015c9a:	f3bf 8f5b 	dmb	ish
 8015c9e:	07da      	lsls	r2, r3, #31
 8015ca0:	4605      	mov	r5, r0
 8015ca2:	d40b      	bmi.n	8015cbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	f007 f9db 	bl	801d060 <__cxa_guard_acquire>
 8015caa:	b138      	cbz	r0, 8015cbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8015cac:	4620      	mov	r0, r4
 8015cae:	f007 f9e3 	bl	801d078 <__cxa_guard_release>
 8015cb2:	4a0f      	ldr	r2, [pc, #60]	; (8015cf0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8015cb4:	490f      	ldr	r1, [pc, #60]	; (8015cf4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8015cb6:	4810      	ldr	r0, [pc, #64]	; (8015cf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8015cb8:	f007 f9c8 	bl	801d04c <__aeabi_atexit>
 8015cbc:	4c0f      	ldr	r4, [pc, #60]	; (8015cfc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8015cbe:	7823      	ldrb	r3, [r4, #0]
 8015cc0:	f3bf 8f5b 	dmb	ish
 8015cc4:	07db      	lsls	r3, r3, #31
 8015cc6:	d40b      	bmi.n	8015ce0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8015cc8:	4620      	mov	r0, r4
 8015cca:	f007 f9c9 	bl	801d060 <__cxa_guard_acquire>
 8015cce:	b138      	cbz	r0, 8015ce0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f007 f9d1 	bl	801d078 <__cxa_guard_release>
 8015cd6:	4a06      	ldr	r2, [pc, #24]	; (8015cf0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8015cd8:	4909      	ldr	r1, [pc, #36]	; (8015d00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8015cda:	480a      	ldr	r0, [pc, #40]	; (8015d04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8015cdc:	f007 f9b6 	bl	801d04c <__aeabi_atexit>
 8015ce0:	4b05      	ldr	r3, [pc, #20]	; (8015cf8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8015ce2:	642b      	str	r3, [r5, #64]	; 0x40
 8015ce4:	4b07      	ldr	r3, [pc, #28]	; (8015d04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8015ce6:	646b      	str	r3, [r5, #68]	; 0x44
 8015ce8:	bd38      	pop	{r3, r4, r5, pc}
 8015cea:	bf00      	nop
 8015cec:	2002eea8 	.word	0x2002eea8
 8015cf0:	20000000 	.word	0x20000000
 8015cf4:	08013f5b 	.word	0x08013f5b
 8015cf8:	200000c0 	.word	0x200000c0
 8015cfc:	2002eeac 	.word	0x2002eeac
 8015d00:	08013f59 	.word	0x08013f59
 8015d04:	200000c4 	.word	0x200000c4

08015d08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8015d08:	b538      	push	{r3, r4, r5, lr}
 8015d0a:	4c15      	ldr	r4, [pc, #84]	; (8015d60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8015d0c:	7823      	ldrb	r3, [r4, #0]
 8015d0e:	f3bf 8f5b 	dmb	ish
 8015d12:	07da      	lsls	r2, r3, #31
 8015d14:	4605      	mov	r5, r0
 8015d16:	d40b      	bmi.n	8015d30 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f007 f9a1 	bl	801d060 <__cxa_guard_acquire>
 8015d1e:	b138      	cbz	r0, 8015d30 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8015d20:	4620      	mov	r0, r4
 8015d22:	f007 f9a9 	bl	801d078 <__cxa_guard_release>
 8015d26:	4a0f      	ldr	r2, [pc, #60]	; (8015d64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8015d28:	490f      	ldr	r1, [pc, #60]	; (8015d68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8015d2a:	4810      	ldr	r0, [pc, #64]	; (8015d6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8015d2c:	f007 f98e 	bl	801d04c <__aeabi_atexit>
 8015d30:	4c0f      	ldr	r4, [pc, #60]	; (8015d70 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8015d32:	7823      	ldrb	r3, [r4, #0]
 8015d34:	f3bf 8f5b 	dmb	ish
 8015d38:	07db      	lsls	r3, r3, #31
 8015d3a:	d40b      	bmi.n	8015d54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	f007 f98f 	bl	801d060 <__cxa_guard_acquire>
 8015d42:	b138      	cbz	r0, 8015d54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8015d44:	4620      	mov	r0, r4
 8015d46:	f007 f997 	bl	801d078 <__cxa_guard_release>
 8015d4a:	4a06      	ldr	r2, [pc, #24]	; (8015d64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8015d4c:	4909      	ldr	r1, [pc, #36]	; (8015d74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8015d4e:	480a      	ldr	r0, [pc, #40]	; (8015d78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8015d50:	f007 f97c 	bl	801d04c <__aeabi_atexit>
 8015d54:	4b05      	ldr	r3, [pc, #20]	; (8015d6c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8015d56:	63ab      	str	r3, [r5, #56]	; 0x38
 8015d58:	4b07      	ldr	r3, [pc, #28]	; (8015d78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8015d5a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015d5c:	bd38      	pop	{r3, r4, r5, pc}
 8015d5e:	bf00      	nop
 8015d60:	2002eec8 	.word	0x2002eec8
 8015d64:	20000000 	.word	0x20000000
 8015d68:	08013f5f 	.word	0x08013f5f
 8015d6c:	200000e0 	.word	0x200000e0
 8015d70:	2002eecc 	.word	0x2002eecc
 8015d74:	08013f5d 	.word	0x08013f5d
 8015d78:	200000e4 	.word	0x200000e4

08015d7c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8015d7c:	b510      	push	{r4, lr}
 8015d7e:	4604      	mov	r4, r0
 8015d80:	f7ff ff14 	bl	8015bac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8015d84:	4620      	mov	r0, r4
 8015d86:	f7ff ff85 	bl	8015c94 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	f7ff ff48 	bl	8015c20 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8015d90:	4620      	mov	r0, r4
 8015d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d96:	f7ff bfb7 	b.w	8015d08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08015d9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4c15      	ldr	r4, [pc, #84]	; (8015df4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8015da0:	7823      	ldrb	r3, [r4, #0]
 8015da2:	f3bf 8f5b 	dmb	ish
 8015da6:	07da      	lsls	r2, r3, #31
 8015da8:	4605      	mov	r5, r0
 8015daa:	d40b      	bmi.n	8015dc4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8015dac:	4620      	mov	r0, r4
 8015dae:	f007 f957 	bl	801d060 <__cxa_guard_acquire>
 8015db2:	b138      	cbz	r0, 8015dc4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8015db4:	4620      	mov	r0, r4
 8015db6:	f007 f95f 	bl	801d078 <__cxa_guard_release>
 8015dba:	4a0f      	ldr	r2, [pc, #60]	; (8015df8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8015dbc:	490f      	ldr	r1, [pc, #60]	; (8015dfc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8015dbe:	4810      	ldr	r0, [pc, #64]	; (8015e00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8015dc0:	f007 f944 	bl	801d04c <__aeabi_atexit>
 8015dc4:	4c0f      	ldr	r4, [pc, #60]	; (8015e04 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8015dc6:	7823      	ldrb	r3, [r4, #0]
 8015dc8:	f3bf 8f5b 	dmb	ish
 8015dcc:	07db      	lsls	r3, r3, #31
 8015dce:	d40b      	bmi.n	8015de8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8015dd0:	4620      	mov	r0, r4
 8015dd2:	f007 f945 	bl	801d060 <__cxa_guard_acquire>
 8015dd6:	b138      	cbz	r0, 8015de8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8015dd8:	4620      	mov	r0, r4
 8015dda:	f007 f94d 	bl	801d078 <__cxa_guard_release>
 8015dde:	4a06      	ldr	r2, [pc, #24]	; (8015df8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8015de0:	4909      	ldr	r1, [pc, #36]	; (8015e08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8015de2:	480a      	ldr	r0, [pc, #40]	; (8015e0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8015de4:	f007 f932 	bl	801d04c <__aeabi_atexit>
 8015de8:	4b05      	ldr	r3, [pc, #20]	; (8015e00 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8015dea:	662b      	str	r3, [r5, #96]	; 0x60
 8015dec:	4b07      	ldr	r3, [pc, #28]	; (8015e0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8015dee:	666b      	str	r3, [r5, #100]	; 0x64
 8015df0:	bd38      	pop	{r3, r4, r5, pc}
 8015df2:	bf00      	nop
 8015df4:	2002eeb0 	.word	0x2002eeb0
 8015df8:	20000000 	.word	0x20000000
 8015dfc:	08013f4b 	.word	0x08013f4b
 8015e00:	200000c8 	.word	0x200000c8
 8015e04:	2002eeb4 	.word	0x2002eeb4
 8015e08:	08013f49 	.word	0x08013f49
 8015e0c:	200000cc 	.word	0x200000cc

08015e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8015e10:	b538      	push	{r3, r4, r5, lr}
 8015e12:	4c15      	ldr	r4, [pc, #84]	; (8015e68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8015e14:	7823      	ldrb	r3, [r4, #0]
 8015e16:	f3bf 8f5b 	dmb	ish
 8015e1a:	07da      	lsls	r2, r3, #31
 8015e1c:	4605      	mov	r5, r0
 8015e1e:	d40b      	bmi.n	8015e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015e20:	4620      	mov	r0, r4
 8015e22:	f007 f91d 	bl	801d060 <__cxa_guard_acquire>
 8015e26:	b138      	cbz	r0, 8015e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f007 f925 	bl	801d078 <__cxa_guard_release>
 8015e2e:	4a0f      	ldr	r2, [pc, #60]	; (8015e6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015e30:	490f      	ldr	r1, [pc, #60]	; (8015e70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8015e32:	4810      	ldr	r0, [pc, #64]	; (8015e74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015e34:	f007 f90a 	bl	801d04c <__aeabi_atexit>
 8015e38:	4c0f      	ldr	r4, [pc, #60]	; (8015e78 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8015e3a:	7823      	ldrb	r3, [r4, #0]
 8015e3c:	f3bf 8f5b 	dmb	ish
 8015e40:	07db      	lsls	r3, r3, #31
 8015e42:	d40b      	bmi.n	8015e5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015e44:	4620      	mov	r0, r4
 8015e46:	f007 f90b 	bl	801d060 <__cxa_guard_acquire>
 8015e4a:	b138      	cbz	r0, 8015e5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f007 f913 	bl	801d078 <__cxa_guard_release>
 8015e52:	4a06      	ldr	r2, [pc, #24]	; (8015e6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015e54:	4909      	ldr	r1, [pc, #36]	; (8015e7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8015e56:	480a      	ldr	r0, [pc, #40]	; (8015e80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015e58:	f007 f8f8 	bl	801d04c <__aeabi_atexit>
 8015e5c:	4b05      	ldr	r3, [pc, #20]	; (8015e74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015e5e:	65ab      	str	r3, [r5, #88]	; 0x58
 8015e60:	4b07      	ldr	r3, [pc, #28]	; (8015e80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015e62:	65eb      	str	r3, [r5, #92]	; 0x5c
 8015e64:	bd38      	pop	{r3, r4, r5, pc}
 8015e66:	bf00      	nop
 8015e68:	2002ee88 	.word	0x2002ee88
 8015e6c:	20000000 	.word	0x20000000
 8015e70:	08013f4f 	.word	0x08013f4f
 8015e74:	200000a0 	.word	0x200000a0
 8015e78:	2002ee8c 	.word	0x2002ee8c
 8015e7c:	08013f4d 	.word	0x08013f4d
 8015e80:	200000a4 	.word	0x200000a4

08015e84 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8015e84:	b510      	push	{r4, lr}
 8015e86:	4604      	mov	r4, r0
 8015e88:	f7ff ff88 	bl	8015d9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8015e8c:	4620      	mov	r0, r4
 8015e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e92:	f7ff bfbd 	b.w	8015e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08015e98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4c15      	ldr	r4, [pc, #84]	; (8015ef0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8015e9c:	7823      	ldrb	r3, [r4, #0]
 8015e9e:	f3bf 8f5b 	dmb	ish
 8015ea2:	07da      	lsls	r2, r3, #31
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	d40b      	bmi.n	8015ec0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f007 f8d9 	bl	801d060 <__cxa_guard_acquire>
 8015eae:	b138      	cbz	r0, 8015ec0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	f007 f8e1 	bl	801d078 <__cxa_guard_release>
 8015eb6:	4a0f      	ldr	r2, [pc, #60]	; (8015ef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8015eb8:	490f      	ldr	r1, [pc, #60]	; (8015ef8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8015eba:	4810      	ldr	r0, [pc, #64]	; (8015efc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8015ebc:	f007 f8c6 	bl	801d04c <__aeabi_atexit>
 8015ec0:	4c0f      	ldr	r4, [pc, #60]	; (8015f00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8015ec2:	7823      	ldrb	r3, [r4, #0]
 8015ec4:	f3bf 8f5b 	dmb	ish
 8015ec8:	07db      	lsls	r3, r3, #31
 8015eca:	d40b      	bmi.n	8015ee4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8015ecc:	4620      	mov	r0, r4
 8015ece:	f007 f8c7 	bl	801d060 <__cxa_guard_acquire>
 8015ed2:	b138      	cbz	r0, 8015ee4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	f007 f8cf 	bl	801d078 <__cxa_guard_release>
 8015eda:	4a06      	ldr	r2, [pc, #24]	; (8015ef4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8015edc:	4909      	ldr	r1, [pc, #36]	; (8015f04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8015ede:	480a      	ldr	r0, [pc, #40]	; (8015f08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8015ee0:	f007 f8b4 	bl	801d04c <__aeabi_atexit>
 8015ee4:	4b05      	ldr	r3, [pc, #20]	; (8015efc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8015ee6:	672b      	str	r3, [r5, #112]	; 0x70
 8015ee8:	4b07      	ldr	r3, [pc, #28]	; (8015f08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8015eea:	676b      	str	r3, [r5, #116]	; 0x74
 8015eec:	bd38      	pop	{r3, r4, r5, pc}
 8015eee:	bf00      	nop
 8015ef0:	2002ee80 	.word	0x2002ee80
 8015ef4:	20000000 	.word	0x20000000
 8015ef8:	08013f43 	.word	0x08013f43
 8015efc:	20000098 	.word	0x20000098
 8015f00:	2002ee84 	.word	0x2002ee84
 8015f04:	08013f41 	.word	0x08013f41
 8015f08:	2000009c 	.word	0x2000009c

08015f0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8015f0c:	b538      	push	{r3, r4, r5, lr}
 8015f0e:	4c15      	ldr	r4, [pc, #84]	; (8015f64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8015f10:	7823      	ldrb	r3, [r4, #0]
 8015f12:	f3bf 8f5b 	dmb	ish
 8015f16:	07da      	lsls	r2, r3, #31
 8015f18:	4605      	mov	r5, r0
 8015f1a:	d40b      	bmi.n	8015f34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	f007 f89f 	bl	801d060 <__cxa_guard_acquire>
 8015f22:	b138      	cbz	r0, 8015f34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015f24:	4620      	mov	r0, r4
 8015f26:	f007 f8a7 	bl	801d078 <__cxa_guard_release>
 8015f2a:	4a0f      	ldr	r2, [pc, #60]	; (8015f68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015f2c:	490f      	ldr	r1, [pc, #60]	; (8015f6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8015f2e:	4810      	ldr	r0, [pc, #64]	; (8015f70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015f30:	f007 f88c 	bl	801d04c <__aeabi_atexit>
 8015f34:	4c0f      	ldr	r4, [pc, #60]	; (8015f74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8015f36:	7823      	ldrb	r3, [r4, #0]
 8015f38:	f3bf 8f5b 	dmb	ish
 8015f3c:	07db      	lsls	r3, r3, #31
 8015f3e:	d40b      	bmi.n	8015f58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015f40:	4620      	mov	r0, r4
 8015f42:	f007 f88d 	bl	801d060 <__cxa_guard_acquire>
 8015f46:	b138      	cbz	r0, 8015f58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f007 f895 	bl	801d078 <__cxa_guard_release>
 8015f4e:	4a06      	ldr	r2, [pc, #24]	; (8015f68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015f50:	4909      	ldr	r1, [pc, #36]	; (8015f78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8015f52:	480a      	ldr	r0, [pc, #40]	; (8015f7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015f54:	f007 f87a 	bl	801d04c <__aeabi_atexit>
 8015f58:	4b05      	ldr	r3, [pc, #20]	; (8015f70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015f5a:	66ab      	str	r3, [r5, #104]	; 0x68
 8015f5c:	4b07      	ldr	r3, [pc, #28]	; (8015f7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015f5e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8015f60:	bd38      	pop	{r3, r4, r5, pc}
 8015f62:	bf00      	nop
 8015f64:	2002ee78 	.word	0x2002ee78
 8015f68:	20000000 	.word	0x20000000
 8015f6c:	08013f47 	.word	0x08013f47
 8015f70:	20000090 	.word	0x20000090
 8015f74:	2002ee7c 	.word	0x2002ee7c
 8015f78:	08013f45 	.word	0x08013f45
 8015f7c:	20000094 	.word	0x20000094

08015f80 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8015f80:	b510      	push	{r4, lr}
 8015f82:	4604      	mov	r4, r0
 8015f84:	f7ff ff88 	bl	8015e98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8015f88:	4620      	mov	r0, r4
 8015f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f8e:	f7ff bfbd 	b.w	8015f0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08015f92 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8015f92:	b510      	push	{r4, lr}
 8015f94:	4604      	mov	r4, r0
 8015f96:	f7ff fff3 	bl	8015f80 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f7ff ff72 	bl	8015e84 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	f7ff fdf9 	bl	8015b98 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	f7ff fcfa 	bl	80159a0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8015fac:	4620      	mov	r0, r4
 8015fae:	f7ff fd75 	bl	8015a9c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fb8:	f7ff bee0 	b.w	8015d7c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08015fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8015fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8015fc4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8015fc8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8015fcc:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8015fd0:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8015fd4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8015fd8:	8808      	ldrh	r0, [r1, #0]
 8015fda:	fb0e 4708 	mla	r7, lr, r8, r4
 8015fde:	f1be 0f00 	cmp.w	lr, #0
 8015fe2:	eb02 0a07 	add.w	sl, r2, r7
 8015fe6:	db37      	blt.n	8016058 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8015fe8:	45f3      	cmp	fp, lr
 8015fea:	dd35      	ble.n	8016058 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8015fec:	2c00      	cmp	r4, #0
 8015fee:	db31      	blt.n	8016054 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8015ff0:	45a0      	cmp	r8, r4
 8015ff2:	dd2f      	ble.n	8016054 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8015ff4:	5dd2      	ldrb	r2, [r2, r7]
 8015ff6:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8015ffa:	1c62      	adds	r2, r4, #1
 8015ffc:	d42f      	bmi.n	801605e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8015ffe:	4590      	cmp	r8, r2
 8016000:	dd2d      	ble.n	801605e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8016002:	b366      	cbz	r6, 801605e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8016004:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016008:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801600c:	f11e 0e01 	adds.w	lr, lr, #1
 8016010:	d429      	bmi.n	8016066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8016012:	45f3      	cmp	fp, lr
 8016014:	dd27      	ble.n	8016066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8016016:	f1bc 0f00 	cmp.w	ip, #0
 801601a:	f000 80a0 	beq.w	801615e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801601e:	2c00      	cmp	r4, #0
 8016020:	db1f      	blt.n	8016062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8016022:	45a0      	cmp	r8, r4
 8016024:	dd1d      	ble.n	8016062 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8016026:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801602a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801602e:	3401      	adds	r4, #1
 8016030:	d41c      	bmi.n	801606c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8016032:	45a0      	cmp	r8, r4
 8016034:	dd1a      	ble.n	801606c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8016036:	b1de      	cbz	r6, 8016070 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8016038:	44d0      	add	r8, sl
 801603a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801603e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8016042:	2e0f      	cmp	r6, #15
 8016044:	d915      	bls.n	8016072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8016046:	4b49      	ldr	r3, [pc, #292]	; (801616c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8016048:	4a49      	ldr	r2, [pc, #292]	; (8016170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801604a:	484a      	ldr	r0, [pc, #296]	; (8016174 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801604c:	f240 3155 	movw	r1, #853	; 0x355
 8016050:	f007 f830 	bl	801d0b4 <__assert_func>
 8016054:	4681      	mov	r9, r0
 8016056:	e7d0      	b.n	8015ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8016058:	4607      	mov	r7, r0
 801605a:	4681      	mov	r9, r0
 801605c:	e7d6      	b.n	801600c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801605e:	4607      	mov	r7, r0
 8016060:	e7d4      	b.n	801600c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8016062:	4686      	mov	lr, r0
 8016064:	e7e3      	b.n	801602e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8016066:	4603      	mov	r3, r0
 8016068:	4686      	mov	lr, r0
 801606a:	e7ea      	b.n	8016042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801606c:	4603      	mov	r3, r0
 801606e:	e7e8      	b.n	8016042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8016070:	4603      	mov	r3, r0
 8016072:	f1bc 0f0f 	cmp.w	ip, #15
 8016076:	d8e6      	bhi.n	8016046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8016078:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801607c:	fb16 f80c 	smulbb	r8, r6, ip
 8016080:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8016084:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8016088:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801608c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8016090:	ea44 0909 	orr.w	r9, r4, r9
 8016094:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016098:	f1cc 0410 	rsb	r4, ip, #16
 801609c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80160a0:	1ba4      	subs	r4, r4, r6
 80160a2:	041a      	lsls	r2, r3, #16
 80160a4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80160a8:	ea4a 0707 	orr.w	r7, sl, r7
 80160ac:	4377      	muls	r7, r6
 80160ae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80160b2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80160b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80160ba:	fb04 7409 	mla	r4, r4, r9, r7
 80160be:	4313      	orrs	r3, r2
 80160c0:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80160c4:	fb08 4303 	mla	r3, r8, r3, r4
 80160c8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80160cc:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 80160d0:	4322      	orrs	r2, r4
 80160d2:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80160d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80160da:	0d53      	lsrs	r3, r2, #21
 80160dc:	0952      	lsrs	r2, r2, #5
 80160de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80160e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80160e6:	431a      	orrs	r2, r3
 80160e8:	b293      	uxth	r3, r2
 80160ea:	b2af      	uxth	r7, r5
 80160ec:	1202      	asrs	r2, r0, #8
 80160ee:	43ed      	mvns	r5, r5
 80160f0:	b2ed      	uxtb	r5, r5
 80160f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80160f6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80160fa:	fb12 f205 	smulbb	r2, r2, r5
 80160fe:	10c6      	asrs	r6, r0, #3
 8016100:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016104:	fb0c 2c07 	mla	ip, ip, r7, r2
 8016108:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801610c:	10da      	asrs	r2, r3, #3
 801610e:	fb16 f605 	smulbb	r6, r6, r5
 8016112:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8016116:	fb02 6207 	mla	r2, r2, r7, r6
 801611a:	b296      	uxth	r6, r2
 801611c:	00c2      	lsls	r2, r0, #3
 801611e:	00dc      	lsls	r4, r3, #3
 8016120:	b2d2      	uxtb	r2, r2
 8016122:	b2e4      	uxtb	r4, r4
 8016124:	fb12 f205 	smulbb	r2, r2, r5
 8016128:	fb04 2207 	mla	r2, r4, r7, r2
 801612c:	fa1f fc8c 	uxth.w	ip, ip
 8016130:	b292      	uxth	r2, r2
 8016132:	f10c 0301 	add.w	r3, ip, #1
 8016136:	1c50      	adds	r0, r2, #1
 8016138:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801613c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016140:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016144:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8016148:	4313      	orrs	r3, r2
 801614a:	1c72      	adds	r2, r6, #1
 801614c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8016150:	0952      	lsrs	r2, r2, #5
 8016152:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016156:	4313      	orrs	r3, r2
 8016158:	800b      	strh	r3, [r1, #0]
 801615a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801615e:	2e0f      	cmp	r6, #15
 8016160:	f63f af71 	bhi.w	8016046 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8016164:	4603      	mov	r3, r0
 8016166:	4686      	mov	lr, r0
 8016168:	e786      	b.n	8016078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801616a:	bf00      	nop
 801616c:	08020997 	.word	0x08020997
 8016170:	08020f9e 	.word	0x08020f9e
 8016174:	08020a1f 	.word	0x08020a1f

08016178 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801617c:	ed2d 8b08 	vpush	{d8-d11}
 8016180:	b09b      	sub	sp, #108	; 0x6c
 8016182:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 8016186:	9309      	str	r3, [sp, #36]	; 0x24
 8016188:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801618c:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 801618e:	930a      	str	r3, [sp, #40]	; 0x28
 8016190:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8016194:	930e      	str	r3, [sp, #56]	; 0x38
 8016196:	910d      	str	r1, [sp, #52]	; 0x34
 8016198:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801619c:	9018      	str	r0, [sp, #96]	; 0x60
 801619e:	6870      	ldr	r0, [r6, #4]
 80161a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80161a2:	fb00 1303 	mla	r3, r0, r3, r1
 80161a6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80161a8:	6831      	ldr	r1, [r6, #0]
 80161aa:	6856      	ldr	r6, [r2, #4]
 80161ac:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 80161b0:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 80161b4:	6813      	ldr	r3, [r2, #0]
 80161b6:	930c      	str	r3, [sp, #48]	; 0x30
 80161b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161ba:	43db      	mvns	r3, r3
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	eeb0 aa40 	vmov.f32	s20, s0
 80161c2:	eef0 9a60 	vmov.f32	s19, s1
 80161c6:	eeb0 9a41 	vmov.f32	s18, s2
 80161ca:	eeb0 8a62 	vmov.f32	s16, s5
 80161ce:	eef0 8a43 	vmov.f32	s17, s6
 80161d2:	eef0 ba44 	vmov.f32	s23, s8
 80161d6:	eeb0 ba64 	vmov.f32	s22, s9
 80161da:	eef0 aa45 	vmov.f32	s21, s10
 80161de:	3604      	adds	r6, #4
 80161e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80161e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	dc03      	bgt.n	80161f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80161e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f340 8215 	ble.w	801661a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80161f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	f340 8102 	ble.w	80163fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80161f8:	ea5f 4229 	movs.w	r2, r9, asr #16
 80161fc:	ea4f 4328 	mov.w	r3, r8, asr #16
 8016200:	d42c      	bmi.n	801625c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8016202:	1c51      	adds	r1, r2, #1
 8016204:	428c      	cmp	r4, r1
 8016206:	dd2c      	ble.n	8016262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8016208:	2b00      	cmp	r3, #0
 801620a:	db2a      	blt.n	8016262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801620c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801620e:	1c59      	adds	r1, r3, #1
 8016210:	4288      	cmp	r0, r1
 8016212:	dd26      	ble.n	8016262 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8016214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016216:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016218:	3b01      	subs	r3, #1
 801621a:	fb02 9203 	mla	r2, r2, r3, r9
 801621e:	1412      	asrs	r2, r2, #16
 8016220:	d429      	bmi.n	8016276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8016222:	3201      	adds	r2, #1
 8016224:	4294      	cmp	r4, r2
 8016226:	dd26      	ble.n	8016276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8016228:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801622a:	fb02 8303 	mla	r3, r2, r3, r8
 801622e:	141b      	asrs	r3, r3, #16
 8016230:	d421      	bmi.n	8016276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8016232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016234:	3301      	adds	r3, #1
 8016236:	429a      	cmp	r2, r3
 8016238:	dd1d      	ble.n	8016276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801623a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801623e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8016242:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8016246:	9312      	str	r3, [sp, #72]	; 0x48
 8016248:	f1be 0f00 	cmp.w	lr, #0
 801624c:	f300 8138 	bgt.w	80164c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 8016250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016252:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8016256:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801625a:	e0d1      	b.n	8016400 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801625c:	1c51      	adds	r1, r2, #1
 801625e:	f040 80c3 	bne.w	80163e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016262:	42a2      	cmp	r2, r4
 8016264:	f280 80c0 	bge.w	80163e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016268:	1c5f      	adds	r7, r3, #1
 801626a:	f2c0 80bd 	blt.w	80163e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801626e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016270:	4293      	cmp	r3, r2
 8016272:	f280 80b9 	bge.w	80163e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016276:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801627a:	4657      	mov	r7, sl
 801627c:	f1bb 0f00 	cmp.w	fp, #0
 8016280:	dde6      	ble.n	8016250 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8016282:	ea5f 4229 	movs.w	r2, r9, asr #16
 8016286:	ea4f 4328 	mov.w	r3, r8, asr #16
 801628a:	f3c9 3003 	ubfx	r0, r9, #12, #4
 801628e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8016292:	f100 80fc 	bmi.w	801648e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 8016296:	f102 0c01 	add.w	ip, r2, #1
 801629a:	4564      	cmp	r4, ip
 801629c:	f340 80f9 	ble.w	8016492 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f2c0 80f6 	blt.w	8016492 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80162a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80162a8:	f103 0c01 	add.w	ip, r3, #1
 80162ac:	4565      	cmp	r5, ip
 80162ae:	f340 80f0 	ble.w	8016492 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80162b2:	fb03 2304 	mla	r3, r3, r4, r2
 80162b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80162b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80162ba:	441a      	add	r2, r3
 80162bc:	5ceb      	ldrb	r3, [r5, r3]
 80162be:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 80162c2:	2800      	cmp	r0, #0
 80162c4:	f000 80db 	beq.w	801647e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 80162c8:	7853      	ldrb	r3, [r2, #1]
 80162ca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80162ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80162d0:	b141      	cbz	r1, 80162e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80162d2:	1913      	adds	r3, r2, r4
 80162d4:	5d12      	ldrb	r2, [r2, r4]
 80162d6:	785b      	ldrb	r3, [r3, #1]
 80162d8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80162dc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80162e0:	9210      	str	r2, [sp, #64]	; 0x40
 80162e2:	9314      	str	r3, [sp, #80]	; 0x50
 80162e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80162e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80162e8:	fb10 f201 	smulbb	r2, r0, r1
 80162ec:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80162f0:	10d2      	asrs	r2, r2, #3
 80162f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80162f6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80162fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80162fe:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8016302:	930f      	str	r3, [sp, #60]	; 0x3c
 8016304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016306:	041b      	lsls	r3, r3, #16
 8016308:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801630c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016310:	432b      	orrs	r3, r5
 8016312:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016314:	4353      	muls	r3, r2
 8016316:	fb05 330c 	mla	r3, r5, ip, r3
 801631a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801631e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016322:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8016326:	ea4c 0e0e 	orr.w	lr, ip, lr
 801632a:	f1c1 0c10 	rsb	ip, r1, #16
 801632e:	ebac 0c00 	sub.w	ip, ip, r0
 8016332:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016336:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801633a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801633c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801633e:	0418      	lsls	r0, r3, #16
 8016340:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016344:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016348:	4318      	orrs	r0, r3
 801634a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801634e:	fb02 c200 	mla	r2, r2, r0, ip
 8016352:	0d53      	lsrs	r3, r2, #21
 8016354:	0952      	lsrs	r2, r2, #5
 8016356:	f8b7 c000 	ldrh.w	ip, [r7]
 801635a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801635e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016362:	431a      	orrs	r2, r3
 8016364:	b292      	uxth	r2, r2
 8016366:	ea4f 212c 	mov.w	r1, ip, asr #8
 801636a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801636e:	1210      	asrs	r0, r2, #8
 8016370:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016374:	fb11 f105 	smulbb	r1, r1, r5
 8016378:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801637c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016380:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016384:	fb00 1003 	mla	r0, r0, r3, r1
 8016388:	fa5f fc8c 	uxtb.w	ip, ip
 801638c:	10d1      	asrs	r1, r2, #3
 801638e:	00d2      	lsls	r2, r2, #3
 8016390:	fb1c fc05 	smulbb	ip, ip, r5
 8016394:	b2d2      	uxtb	r2, r2
 8016396:	fb02 c203 	mla	r2, r2, r3, ip
 801639a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801639e:	b280      	uxth	r0, r0
 80163a0:	b292      	uxth	r2, r2
 80163a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80163a6:	fb1e fe05 	smulbb	lr, lr, r5
 80163aa:	fb01 e103 	mla	r1, r1, r3, lr
 80163ae:	f102 0c01 	add.w	ip, r2, #1
 80163b2:	1c43      	adds	r3, r0, #1
 80163b4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80163b8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80163bc:	b289      	uxth	r1, r1
 80163be:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80163c2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80163c6:	4313      	orrs	r3, r2
 80163c8:	1c4a      	adds	r2, r1, #1
 80163ca:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80163ce:	0949      	lsrs	r1, r1, #5
 80163d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80163d4:	430b      	orrs	r3, r1
 80163d6:	803b      	strh	r3, [r7, #0]
 80163d8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80163da:	4499      	add	r9, r3
 80163dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80163de:	3702      	adds	r7, #2
 80163e0:	4498      	add	r8, r3
 80163e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80163e6:	e749      	b.n	801627c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80163e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80163ea:	4499      	add	r9, r3
 80163ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80163ee:	4498      	add	r8, r3
 80163f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163f2:	3b01      	subs	r3, #1
 80163f4:	9309      	str	r3, [sp, #36]	; 0x24
 80163f6:	f10a 0a02 	add.w	sl, sl, #2
 80163fa:	e6f9      	b.n	80161f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80163fc:	f47f af0a 	bne.w	8016214 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8016400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016402:	2b00      	cmp	r3, #0
 8016404:	f340 8109 	ble.w	801661a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8016408:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801640c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016410:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016414:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016416:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801641a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801641e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016422:	eef0 6a48 	vmov.f32	s13, s16
 8016426:	ee69 7a27 	vmul.f32	s15, s18, s15
 801642a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801642e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016432:	ee16 9a90 	vmov	r9, s13
 8016436:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801643a:	eef0 6a68 	vmov.f32	s13, s17
 801643e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016442:	ee18 2a10 	vmov	r2, s16
 8016446:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801644a:	fb92 f3f3 	sdiv	r3, r2, r3
 801644e:	ee18 2a90 	vmov	r2, s17
 8016452:	932f      	str	r3, [sp, #188]	; 0xbc
 8016454:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016456:	fb92 f3f3 	sdiv	r3, r2, r3
 801645a:	9330      	str	r3, [sp, #192]	; 0xc0
 801645c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801645e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016460:	3b01      	subs	r3, #1
 8016462:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016466:	930d      	str	r3, [sp, #52]	; 0x34
 8016468:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801646a:	bf08      	it	eq
 801646c:	4613      	moveq	r3, r2
 801646e:	ee16 8a90 	vmov	r8, s13
 8016472:	9309      	str	r3, [sp, #36]	; 0x24
 8016474:	eef0 8a67 	vmov.f32	s17, s15
 8016478:	eeb0 8a47 	vmov.f32	s16, s14
 801647c:	e6b1      	b.n	80161e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801647e:	2900      	cmp	r1, #0
 8016480:	f43f af30 	beq.w	80162e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8016484:	5d13      	ldrb	r3, [r2, r4]
 8016486:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801648a:	9310      	str	r3, [sp, #64]	; 0x40
 801648c:	e72a      	b.n	80162e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801648e:	1c55      	adds	r5, r2, #1
 8016490:	d1a2      	bne.n	80163d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016492:	4294      	cmp	r4, r2
 8016494:	dda0      	ble.n	80163d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016496:	1c5d      	adds	r5, r3, #1
 8016498:	db9e      	blt.n	80163d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801649a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801649c:	429d      	cmp	r5, r3
 801649e:	dd9b      	ble.n	80163d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80164a0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80164a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80164a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164a8:	9202      	str	r2, [sp, #8]
 80164aa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80164ae:	e9cd 4300 	strd	r4, r3, [sp]
 80164b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164b4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80164b6:	4633      	mov	r3, r6
 80164b8:	4639      	mov	r1, r7
 80164ba:	f7ff fd7f 	bl	8015fbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80164be:	e78b      	b.n	80163d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80164c0:	ea4f 4329 	mov.w	r3, r9, asr #16
 80164c4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80164c8:	fb04 3202 	mla	r2, r4, r2, r3
 80164cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80164ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164d0:	4413      	add	r3, r2
 80164d2:	5c8a      	ldrb	r2, [r1, r2]
 80164d4:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 80164d8:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80164dc:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 80164e0:	f1bc 0f00 	cmp.w	ip, #0
 80164e4:	f000 8091 	beq.w	801660a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 80164e8:	785a      	ldrb	r2, [r3, #1]
 80164ea:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80164ee:	9215      	str	r2, [sp, #84]	; 0x54
 80164f0:	b140      	cbz	r0, 8016504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 80164f2:	191a      	adds	r2, r3, r4
 80164f4:	5d1b      	ldrb	r3, [r3, r4]
 80164f6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80164fa:	9311      	str	r3, [sp, #68]	; 0x44
 80164fc:	7853      	ldrb	r3, [r2, #1]
 80164fe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016502:	9316      	str	r3, [sp, #88]	; 0x58
 8016504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016506:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016508:	fb1c f200 	smulbb	r2, ip, r0
 801650c:	041f      	lsls	r7, r3, #16
 801650e:	10d2      	asrs	r2, r2, #3
 8016510:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016514:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8016518:	431f      	orrs	r7, r3
 801651a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801651e:	9319      	str	r3, [sp, #100]	; 0x64
 8016520:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016522:	041b      	lsls	r3, r3, #16
 8016524:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8016528:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801652c:	ea43 030b 	orr.w	r3, r3, fp
 8016530:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8016532:	4353      	muls	r3, r2
 8016534:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8016538:	fb05 3707 	mla	r7, r5, r7, r3
 801653c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8016540:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8016544:	ea43 0b01 	orr.w	fp, r3, r1
 8016548:	f1c0 0110 	rsb	r1, r0, #16
 801654c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801654e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016550:	eba1 0c0c 	sub.w	ip, r1, ip
 8016554:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016558:	fb0c 770b 	mla	r7, ip, fp, r7
 801655c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016560:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8016564:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016568:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801656c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8016570:	fb02 770c 	mla	r7, r2, ip, r7
 8016574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016576:	0d79      	lsrs	r1, r7, #21
 8016578:	8812      	ldrh	r2, [r2, #0]
 801657a:	097f      	lsrs	r7, r7, #5
 801657c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016580:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8016584:	430f      	orrs	r7, r1
 8016586:	1211      	asrs	r1, r2, #8
 8016588:	b2bb      	uxth	r3, r7
 801658a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801658e:	fb11 f105 	smulbb	r1, r1, r5
 8016592:	1218      	asrs	r0, r3, #8
 8016594:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016596:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801659a:	fb00 1005 	mla	r0, r0, r5, r1
 801659e:	10d7      	asrs	r7, r2, #3
 80165a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80165a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80165a6:	fb17 f705 	smulbb	r7, r7, r5
 80165aa:	10d9      	asrs	r1, r3, #3
 80165ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80165ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80165b2:	fb01 7105 	mla	r1, r1, r5, r7
 80165b6:	00d2      	lsls	r2, r2, #3
 80165b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80165ba:	b2d2      	uxtb	r2, r2
 80165bc:	fb12 f205 	smulbb	r2, r2, r5
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	b280      	uxth	r0, r0
 80165c8:	fb03 2305 	mla	r3, r3, r5, r2
 80165cc:	b29b      	uxth	r3, r3
 80165ce:	b289      	uxth	r1, r1
 80165d0:	1c42      	adds	r2, r0, #1
 80165d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80165d6:	1c4f      	adds	r7, r1, #1
 80165d8:	1c5a      	adds	r2, r3, #1
 80165da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80165de:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80165e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80165e6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80165ea:	0949      	lsrs	r1, r1, #5
 80165ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165ee:	4310      	orrs	r0, r2
 80165f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80165f4:	4308      	orrs	r0, r1
 80165f6:	f823 0b02 	strh.w	r0, [r3], #2
 80165fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80165fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80165fe:	4499      	add	r9, r3
 8016600:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016602:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016606:	4498      	add	r8, r3
 8016608:	e61e      	b.n	8016248 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801660a:	2800      	cmp	r0, #0
 801660c:	f43f af7a 	beq.w	8016504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8016610:	5d1b      	ldrb	r3, [r3, r4]
 8016612:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016616:	9311      	str	r3, [sp, #68]	; 0x44
 8016618:	e774      	b.n	8016504 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801661a:	b01b      	add	sp, #108	; 0x6c
 801661c:	ecbd 8b08 	vpop	{d8-d11}
 8016620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016624 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8016624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016628:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801662c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8016630:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016634:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8016638:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801663c:	8808      	ldrh	r0, [r1, #0]
 801663e:	fb06 570e 	mla	r7, r6, lr, r5
 8016642:	2e00      	cmp	r6, #0
 8016644:	eb02 0807 	add.w	r8, r2, r7
 8016648:	db38      	blt.n	80166bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801664a:	45b1      	cmp	r9, r6
 801664c:	dd36      	ble.n	80166bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801664e:	2d00      	cmp	r5, #0
 8016650:	db32      	blt.n	80166b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8016652:	45ae      	cmp	lr, r5
 8016654:	dd30      	ble.n	80166b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8016656:	5dd2      	ldrb	r2, [r2, r7]
 8016658:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801665c:	1c6a      	adds	r2, r5, #1
 801665e:	d430      	bmi.n	80166c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016660:	4596      	cmp	lr, r2
 8016662:	dd2e      	ble.n	80166c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016664:	b36c      	cbz	r4, 80166c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016666:	f898 2001 	ldrb.w	r2, [r8, #1]
 801666a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801666e:	3601      	adds	r6, #1
 8016670:	d42b      	bmi.n	80166ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8016672:	45b1      	cmp	r9, r6
 8016674:	dd29      	ble.n	80166ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8016676:	f1bc 0f00 	cmp.w	ip, #0
 801667a:	d028      	beq.n	80166ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 801667c:	2d00      	cmp	r5, #0
 801667e:	db22      	blt.n	80166c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8016680:	45ae      	cmp	lr, r5
 8016682:	dd20      	ble.n	80166c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8016684:	f818 600e 	ldrb.w	r6, [r8, lr]
 8016688:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 801668c:	3501      	adds	r5, #1
 801668e:	d407      	bmi.n	80166a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016690:	45ae      	cmp	lr, r5
 8016692:	dd05      	ble.n	80166a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016694:	b134      	cbz	r4, 80166a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8016696:	44c6      	add	lr, r8
 8016698:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801669c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80166a0:	2c0f      	cmp	r4, #15
 80166a2:	d802      	bhi.n	80166aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80166a4:	f1bc 0f0f 	cmp.w	ip, #15
 80166a8:	d914      	bls.n	80166d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80166aa:	4b26      	ldr	r3, [pc, #152]	; (8016744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80166ac:	4a26      	ldr	r2, [pc, #152]	; (8016748 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80166ae:	4827      	ldr	r0, [pc, #156]	; (801674c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80166b0:	f240 3155 	movw	r1, #853	; 0x355
 80166b4:	f006 fcfe 	bl	801d0b4 <__assert_func>
 80166b8:	4607      	mov	r7, r0
 80166ba:	e7cf      	b.n	801665c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80166bc:	4602      	mov	r2, r0
 80166be:	4607      	mov	r7, r0
 80166c0:	e7d5      	b.n	801666e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80166c2:	4602      	mov	r2, r0
 80166c4:	e7d3      	b.n	801666e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80166c6:	4606      	mov	r6, r0
 80166c8:	e7e0      	b.n	801668c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80166ca:	4606      	mov	r6, r0
 80166cc:	e7e8      	b.n	80166a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80166ce:	2c0f      	cmp	r4, #15
 80166d0:	d8eb      	bhi.n	80166aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80166d2:	4606      	mov	r6, r0
 80166d4:	043d      	lsls	r5, r7, #16
 80166d6:	fb14 f30c 	smulbb	r3, r4, ip
 80166da:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80166de:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80166e2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80166e6:	10db      	asrs	r3, r3, #3
 80166e8:	432f      	orrs	r7, r5
 80166ea:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80166ee:	f1cc 0510 	rsb	r5, ip, #16
 80166f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80166f6:	1b2d      	subs	r5, r5, r4
 80166f8:	ea4e 0202 	orr.w	r2, lr, r2
 80166fc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8016700:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8016704:	4354      	muls	r4, r2
 8016706:	fb05 4507 	mla	r5, r5, r7, r4
 801670a:	0404      	lsls	r4, r0, #16
 801670c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8016710:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8016714:	4320      	orrs	r0, r4
 8016716:	fb03 5400 	mla	r4, r3, r0, r5
 801671a:	0430      	lsls	r0, r6, #16
 801671c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016720:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8016724:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8016728:	4330      	orrs	r0, r6
 801672a:	fb03 4000 	mla	r0, r3, r0, r4
 801672e:	0d43      	lsrs	r3, r0, #21
 8016730:	0940      	lsrs	r0, r0, #5
 8016732:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016736:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801673a:	4318      	orrs	r0, r3
 801673c:	8008      	strh	r0, [r1, #0]
 801673e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016742:	bf00      	nop
 8016744:	08020997 	.word	0x08020997
 8016748:	08020f9e 	.word	0x08020f9e
 801674c:	08020a1f 	.word	0x08020a1f

08016750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016754:	ed2d 8b0a 	vpush	{d8-d12}
 8016758:	b095      	sub	sp, #84	; 0x54
 801675a:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 801675e:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8016760:	9306      	str	r3, [sp, #24]
 8016762:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8016766:	9109      	str	r1, [sp, #36]	; 0x24
 8016768:	9307      	str	r3, [sp, #28]
 801676a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801676e:	9012      	str	r0, [sp, #72]	; 0x48
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	9211      	str	r2, [sp, #68]	; 0x44
 8016774:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8016776:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801677a:	fb00 1303 	mla	r3, r0, r3, r1
 801677e:	6839      	ldr	r1, [r7, #0]
 8016780:	6857      	ldr	r7, [r2, #4]
 8016782:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8016786:	6813      	ldr	r3, [r2, #0]
 8016788:	9308      	str	r3, [sp, #32]
 801678a:	eeb0 aa40 	vmov.f32	s20, s0
 801678e:	eef0 9a60 	vmov.f32	s19, s1
 8016792:	eeb0 9a41 	vmov.f32	s18, s2
 8016796:	eeb0 8a62 	vmov.f32	s16, s5
 801679a:	eef0 8a43 	vmov.f32	s17, s6
 801679e:	eeb0 ca44 	vmov.f32	s24, s8
 80167a2:	eef0 ba64 	vmov.f32	s23, s9
 80167a6:	eeb0 ba45 	vmov.f32	s22, s10
 80167aa:	3704      	adds	r7, #4
 80167ac:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80167b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	dc03      	bgt.n	80167be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80167b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	f340 819a 	ble.w	8016af2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 80167be:	9b06      	ldr	r3, [sp, #24]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f340 80c4 	ble.w	801694e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80167c6:	ea5f 4229 	movs.w	r2, r9, asr #16
 80167ca:	ea4f 4326 	mov.w	r3, r6, asr #16
 80167ce:	d429      	bmi.n	8016824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80167d0:	1c51      	adds	r1, r2, #1
 80167d2:	428c      	cmp	r4, r1
 80167d4:	dd29      	ble.n	801682a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	db27      	blt.n	801682a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80167da:	9807      	ldr	r0, [sp, #28]
 80167dc:	1c59      	adds	r1, r3, #1
 80167de:	4288      	cmp	r0, r1
 80167e0:	dd23      	ble.n	801682a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80167e2:	9b06      	ldr	r3, [sp, #24]
 80167e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80167e6:	3b01      	subs	r3, #1
 80167e8:	fb02 9203 	mla	r2, r2, r3, r9
 80167ec:	1412      	asrs	r2, r2, #16
 80167ee:	d425      	bmi.n	801683c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80167f0:	3201      	adds	r2, #1
 80167f2:	4294      	cmp	r4, r2
 80167f4:	dd22      	ble.n	801683c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80167f6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80167f8:	fb02 6303 	mla	r3, r2, r3, r6
 80167fc:	141b      	asrs	r3, r3, #16
 80167fe:	d41d      	bmi.n	801683c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016800:	9a07      	ldr	r2, [sp, #28]
 8016802:	3301      	adds	r3, #1
 8016804:	429a      	cmp	r2, r3
 8016806:	dd19      	ble.n	801683c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016808:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801680c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8016810:	f1b8 0f00 	cmp.w	r8, #0
 8016814:	f300 80f8 	bgt.w	8016a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8016818:	9b06      	ldr	r3, [sp, #24]
 801681a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801681e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8016822:	e096      	b.n	8016952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8016824:	1c51      	adds	r1, r2, #1
 8016826:	f040 8088 	bne.w	801693a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801682a:	42a2      	cmp	r2, r4
 801682c:	f280 8085 	bge.w	801693a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8016830:	1c5a      	adds	r2, r3, #1
 8016832:	f2c0 8082 	blt.w	801693a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8016836:	9a07      	ldr	r2, [sp, #28]
 8016838:	4293      	cmp	r3, r2
 801683a:	da7e      	bge.n	801693a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801683c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8016840:	46d0      	mov	r8, sl
 8016842:	f1bb 0f00 	cmp.w	fp, #0
 8016846:	dde7      	ble.n	8016818 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8016848:	ea5f 4229 	movs.w	r2, r9, asr #16
 801684c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016850:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8016854:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8016858:	f100 80c0 	bmi.w	80169dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801685c:	f102 0c01 	add.w	ip, r2, #1
 8016860:	4564      	cmp	r4, ip
 8016862:	f340 80bd 	ble.w	80169e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8016866:	2b00      	cmp	r3, #0
 8016868:	f2c0 80ba 	blt.w	80169e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801686c:	9d07      	ldr	r5, [sp, #28]
 801686e:	f103 0c01 	add.w	ip, r3, #1
 8016872:	4565      	cmp	r5, ip
 8016874:	f340 80b4 	ble.w	80169e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8016878:	fb03 2304 	mla	r3, r3, r4, r2
 801687c:	9d08      	ldr	r5, [sp, #32]
 801687e:	9a08      	ldr	r2, [sp, #32]
 8016880:	441a      	add	r2, r3
 8016882:	5ceb      	ldrb	r3, [r5, r3]
 8016884:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8016888:	2800      	cmp	r0, #0
 801688a:	f000 809f 	beq.w	80169cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 801688e:	7853      	ldrb	r3, [r2, #1]
 8016890:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016894:	930d      	str	r3, [sp, #52]	; 0x34
 8016896:	b141      	cbz	r1, 80168aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8016898:	1913      	adds	r3, r2, r4
 801689a:	5d12      	ldrb	r2, [r2, r4]
 801689c:	785b      	ldrb	r3, [r3, #1]
 801689e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80168a2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80168a6:	920a      	str	r2, [sp, #40]	; 0x28
 80168a8:	930e      	str	r3, [sp, #56]	; 0x38
 80168aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80168ae:	fb10 f201 	smulbb	r2, r0, r1
 80168b2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80168b6:	10d2      	asrs	r2, r2, #3
 80168b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80168bc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80168c0:	ea4c 0c03 	orr.w	ip, ip, r3
 80168c4:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 80168c8:	930c      	str	r3, [sp, #48]	; 0x30
 80168ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168cc:	041b      	lsls	r3, r3, #16
 80168ce:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80168d2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80168d6:	432b      	orrs	r3, r5
 80168d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80168da:	4353      	muls	r3, r2
 80168dc:	fb05 330c 	mla	r3, r5, ip, r3
 80168e0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80168e4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80168e8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80168ec:	ea4c 0e0e 	orr.w	lr, ip, lr
 80168f0:	f1c1 0c10 	rsb	ip, r1, #16
 80168f4:	ebac 0c00 	sub.w	ip, ip, r0
 80168f8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80168fc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8016900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016902:	0418      	lsls	r0, r3, #16
 8016904:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016908:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801690c:	4318      	orrs	r0, r3
 801690e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8016912:	fb02 c200 	mla	r2, r2, r0, ip
 8016916:	0d53      	lsrs	r3, r2, #21
 8016918:	0952      	lsrs	r2, r2, #5
 801691a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801691e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016922:	431a      	orrs	r2, r3
 8016924:	f8a8 2000 	strh.w	r2, [r8]
 8016928:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801692a:	4499      	add	r9, r3
 801692c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801692e:	f108 0802 	add.w	r8, r8, #2
 8016932:	441e      	add	r6, r3
 8016934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016938:	e783      	b.n	8016842 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801693a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801693c:	4499      	add	r9, r3
 801693e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016940:	441e      	add	r6, r3
 8016942:	9b06      	ldr	r3, [sp, #24]
 8016944:	3b01      	subs	r3, #1
 8016946:	9306      	str	r3, [sp, #24]
 8016948:	f10a 0a02 	add.w	sl, sl, #2
 801694c:	e737      	b.n	80167be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801694e:	f47f af48 	bne.w	80167e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8016952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016954:	2b00      	cmp	r3, #0
 8016956:	f340 80cc 	ble.w	8016af2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801695a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801695e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8016962:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8016966:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016968:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801696c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016970:	eef0 6a48 	vmov.f32	s13, s16
 8016974:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016978:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801697c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016980:	ee16 9a90 	vmov	r9, s13
 8016984:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016988:	eef0 6a68 	vmov.f32	s13, s17
 801698c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016990:	ee18 2a10 	vmov	r2, s16
 8016994:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016998:	fb92 f3f3 	sdiv	r3, r2, r3
 801699c:	ee18 2a90 	vmov	r2, s17
 80169a0:	932b      	str	r3, [sp, #172]	; 0xac
 80169a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80169a8:	932c      	str	r3, [sp, #176]	; 0xb0
 80169aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80169ae:	3b01      	subs	r3, #1
 80169b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169b4:	9309      	str	r3, [sp, #36]	; 0x24
 80169b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169b8:	bf08      	it	eq
 80169ba:	4613      	moveq	r3, r2
 80169bc:	ee16 6a90 	vmov	r6, s13
 80169c0:	9306      	str	r3, [sp, #24]
 80169c2:	eef0 8a67 	vmov.f32	s17, s15
 80169c6:	eeb0 8a47 	vmov.f32	s16, s14
 80169ca:	e6f1      	b.n	80167b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80169cc:	2900      	cmp	r1, #0
 80169ce:	f43f af6c 	beq.w	80168aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80169d2:	5d13      	ldrb	r3, [r2, r4]
 80169d4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80169d8:	930a      	str	r3, [sp, #40]	; 0x28
 80169da:	e766      	b.n	80168aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80169dc:	1c55      	adds	r5, r2, #1
 80169de:	d1a3      	bne.n	8016928 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80169e0:	4294      	cmp	r4, r2
 80169e2:	dda1      	ble.n	8016928 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80169e4:	1c5d      	adds	r5, r3, #1
 80169e6:	db9f      	blt.n	8016928 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80169e8:	9d07      	ldr	r5, [sp, #28]
 80169ea:	429d      	cmp	r5, r3
 80169ec:	dd9c      	ble.n	8016928 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80169ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80169f6:	e9cd 4500 	strd	r4, r5, [sp]
 80169fa:	463b      	mov	r3, r7
 80169fc:	9a08      	ldr	r2, [sp, #32]
 80169fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016a00:	4641      	mov	r1, r8
 8016a02:	f7ff fe0f 	bl	8016624 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8016a06:	e78f      	b.n	8016928 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8016a08:	ea4f 4329 	mov.w	r3, r9, asr #16
 8016a0c:	1432      	asrs	r2, r6, #16
 8016a0e:	fb04 3202 	mla	r2, r4, r2, r3
 8016a12:	9908      	ldr	r1, [sp, #32]
 8016a14:	9b08      	ldr	r3, [sp, #32]
 8016a16:	4413      	add	r3, r2
 8016a18:	5c8a      	ldrb	r2, [r1, r2]
 8016a1a:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8016a1e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8016a22:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8016a26:	f1be 0f00 	cmp.w	lr, #0
 8016a2a:	d05b      	beq.n	8016ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 8016a2c:	785a      	ldrb	r2, [r3, #1]
 8016a2e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8016a32:	920f      	str	r2, [sp, #60]	; 0x3c
 8016a34:	b140      	cbz	r0, 8016a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8016a36:	191a      	adds	r2, r3, r4
 8016a38:	5d1b      	ldrb	r3, [r3, r4]
 8016a3a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a40:	7853      	ldrb	r3, [r2, #1]
 8016a42:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016a46:	9310      	str	r3, [sp, #64]	; 0x40
 8016a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016a4c:	fb1e f200 	smulbb	r2, lr, r0
 8016a50:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016a54:	10d2      	asrs	r2, r2, #3
 8016a56:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016a5a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8016a62:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8016a66:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a6a:	041b      	lsls	r3, r3, #16
 8016a6c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8016a70:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016a74:	ea43 030b 	orr.w	r3, r3, fp
 8016a78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016a7a:	4353      	muls	r3, r2
 8016a7c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8016a80:	fb05 3c0c 	mla	ip, r5, ip, r3
 8016a84:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8016a88:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8016a8c:	ea43 0b01 	orr.w	fp, r3, r1
 8016a90:	f1c0 0110 	rsb	r1, r0, #16
 8016a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a96:	eba1 0e0e 	sub.w	lr, r1, lr
 8016a9a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8016a9e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8016aa2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8016aa6:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8016aaa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8016aae:	ea4b 0e0e 	orr.w	lr, fp, lr
 8016ab2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8016ab6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8016aba:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8016abe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016ac2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016ac6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8016aca:	ea43 0c0c 	orr.w	ip, r3, ip
 8016ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ad0:	f823 cb02 	strh.w	ip, [r3], #2
 8016ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8016ad6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016ad8:	4499      	add	r9, r3
 8016ada:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016adc:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ae0:	441e      	add	r6, r3
 8016ae2:	e695      	b.n	8016810 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d0af      	beq.n	8016a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8016ae8:	5d1b      	ldrb	r3, [r3, r4]
 8016aea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8016af0:	e7aa      	b.n	8016a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8016af2:	b015      	add	sp, #84	; 0x54
 8016af4:	ecbd 8b0a 	vpop	{d8-d12}
 8016af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016afc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8016afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	468b      	mov	fp, r1
 8016b02:	8809      	ldrh	r1, [r1, #0]
 8016b04:	b089      	sub	sp, #36	; 0x24
 8016b06:	10cd      	asrs	r5, r1, #3
 8016b08:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8016b0c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8016b10:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8016b14:	00c9      	lsls	r1, r1, #3
 8016b16:	9500      	str	r5, [sp, #0]
 8016b18:	b2c9      	uxtb	r1, r1
 8016b1a:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8016b1e:	9101      	str	r1, [sp, #4]
 8016b20:	9900      	ldr	r1, [sp, #0]
 8016b22:	9202      	str	r2, [sp, #8]
 8016b24:	fb04 650e 	mla	r5, r4, lr, r6
 8016b28:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8016b2c:	eb02 0805 	add.w	r8, r2, r5
 8016b30:	0209      	lsls	r1, r1, #8
 8016b32:	9a01      	ldr	r2, [sp, #4]
 8016b34:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8016b38:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8016b3c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8016b40:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8016b44:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8016b48:	4311      	orrs	r1, r2
 8016b4a:	2c00      	cmp	r4, #0
 8016b4c:	9107      	str	r1, [sp, #28]
 8016b4e:	db43      	blt.n	8016bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8016b50:	45a2      	cmp	sl, r4
 8016b52:	dd41      	ble.n	8016bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8016b54:	2e00      	cmp	r6, #0
 8016b56:	db3d      	blt.n	8016bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8016b58:	45b6      	cmp	lr, r6
 8016b5a:	dd3b      	ble.n	8016bd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8016b5c:	9a02      	ldr	r2, [sp, #8]
 8016b5e:	5d55      	ldrb	r5, [r2, r5]
 8016b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b64:	441d      	add	r5, r3
 8016b66:	1c72      	adds	r2, r6, #1
 8016b68:	d439      	bmi.n	8016bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8016b6a:	4596      	cmp	lr, r2
 8016b6c:	dd37      	ble.n	8016bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8016b6e:	2f00      	cmp	r7, #0
 8016b70:	d035      	beq.n	8016bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8016b72:	f898 1001 	ldrb.w	r1, [r8, #1]
 8016b76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016b7a:	4419      	add	r1, r3
 8016b7c:	3401      	adds	r4, #1
 8016b7e:	d432      	bmi.n	8016be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8016b80:	45a2      	cmp	sl, r4
 8016b82:	dd30      	ble.n	8016be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8016b84:	b378      	cbz	r0, 8016be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8016b86:	2e00      	cmp	r6, #0
 8016b88:	db2b      	blt.n	8016be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8016b8a:	45b6      	cmp	lr, r6
 8016b8c:	dd29      	ble.n	8016be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8016b8e:	f818 400e 	ldrb.w	r4, [r8, lr]
 8016b92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016b96:	441c      	add	r4, r3
 8016b98:	3601      	adds	r6, #1
 8016b9a:	d427      	bmi.n	8016bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8016b9c:	45b6      	cmp	lr, r6
 8016b9e:	dd25      	ble.n	8016bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8016ba0:	b327      	cbz	r7, 8016bec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8016ba2:	44c6      	add	lr, r8
 8016ba4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8016ba8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016bac:	4413      	add	r3, r2
 8016bae:	782a      	ldrb	r2, [r5, #0]
 8016bb0:	9202      	str	r2, [sp, #8]
 8016bb2:	780a      	ldrb	r2, [r1, #0]
 8016bb4:	9203      	str	r2, [sp, #12]
 8016bb6:	7822      	ldrb	r2, [r4, #0]
 8016bb8:	9204      	str	r2, [sp, #16]
 8016bba:	2f0f      	cmp	r7, #15
 8016bbc:	781a      	ldrb	r2, [r3, #0]
 8016bbe:	9205      	str	r2, [sp, #20]
 8016bc0:	d801      	bhi.n	8016bc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8016bc2:	280f      	cmp	r0, #15
 8016bc4:	d914      	bls.n	8016bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8016bc6:	4b3f      	ldr	r3, [pc, #252]	; (8016cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8016bc8:	4a3f      	ldr	r2, [pc, #252]	; (8016cc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8016bca:	4840      	ldr	r0, [pc, #256]	; (8016ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8016bcc:	f240 3173 	movw	r1, #883	; 0x373
 8016bd0:	f006 fa70 	bl	801d0b4 <__assert_func>
 8016bd4:	ad07      	add	r5, sp, #28
 8016bd6:	e7c6      	b.n	8016b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8016bd8:	a907      	add	r1, sp, #28
 8016bda:	460d      	mov	r5, r1
 8016bdc:	e7ce      	b.n	8016b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8016bde:	a907      	add	r1, sp, #28
 8016be0:	e7cc      	b.n	8016b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8016be2:	ac07      	add	r4, sp, #28
 8016be4:	e7d8      	b.n	8016b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8016be6:	ab07      	add	r3, sp, #28
 8016be8:	461c      	mov	r4, r3
 8016bea:	e7e0      	b.n	8016bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8016bec:	ab07      	add	r3, sp, #28
 8016bee:	e7de      	b.n	8016bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8016bf0:	b2ba      	uxth	r2, r7
 8016bf2:	b280      	uxth	r0, r0
 8016bf4:	fb02 fa00 	mul.w	sl, r2, r0
 8016bf8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8016bfc:	0112      	lsls	r2, r2, #4
 8016bfe:	b280      	uxth	r0, r0
 8016c00:	f891 8002 	ldrb.w	r8, [r1, #2]
 8016c04:	7849      	ldrb	r1, [r1, #1]
 8016c06:	78ae      	ldrb	r6, [r5, #2]
 8016c08:	786d      	ldrb	r5, [r5, #1]
 8016c0a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8016c0e:	eba2 020a 	sub.w	r2, r2, sl
 8016c12:	b292      	uxth	r2, r2
 8016c14:	ebae 0e00 	sub.w	lr, lr, r0
 8016c18:	fa1f fe8e 	uxth.w	lr, lr
 8016c1c:	4351      	muls	r1, r2
 8016c1e:	fb02 f808 	mul.w	r8, r2, r8
 8016c22:	fb0e 8806 	mla	r8, lr, r6, r8
 8016c26:	fb0e 1505 	mla	r5, lr, r5, r1
 8016c2a:	78a6      	ldrb	r6, [r4, #2]
 8016c2c:	7861      	ldrb	r1, [r4, #1]
 8016c2e:	fa1f f78c 	uxth.w	r7, ip
 8016c32:	fb00 8806 	mla	r8, r0, r6, r8
 8016c36:	fb00 5501 	mla	r5, r0, r1, r5
 8016c3a:	789e      	ldrb	r6, [r3, #2]
 8016c3c:	7859      	ldrb	r1, [r3, #1]
 8016c3e:	9b00      	ldr	r3, [sp, #0]
 8016c40:	ea6f 0c0c 	mvn.w	ip, ip
 8016c44:	fa5f fc8c 	uxtb.w	ip, ip
 8016c48:	fb0a 5101 	mla	r1, sl, r1, r5
 8016c4c:	fb13 f50c 	smulbb	r5, r3, ip
 8016c50:	9b03      	ldr	r3, [sp, #12]
 8016c52:	435a      	muls	r2, r3
 8016c54:	9b02      	ldr	r3, [sp, #8]
 8016c56:	fb0e 2203 	mla	r2, lr, r3, r2
 8016c5a:	9b04      	ldr	r3, [sp, #16]
 8016c5c:	fb00 2003 	mla	r0, r0, r3, r2
 8016c60:	9b05      	ldr	r3, [sp, #20]
 8016c62:	fb0a 8606 	mla	r6, sl, r6, r8
 8016c66:	fb0a 0a03 	mla	sl, sl, r3, r0
 8016c6a:	9b01      	ldr	r3, [sp, #4]
 8016c6c:	fb19 f90c 	smulbb	r9, r9, ip
 8016c70:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8016c74:	fb13 fc0c 	smulbb	ip, r3, ip
 8016c78:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8016c7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016c80:	fb06 9607 	mla	r6, r6, r7, r9
 8016c84:	fb01 5107 	mla	r1, r1, r7, r5
 8016c88:	fb0a c707 	mla	r7, sl, r7, ip
 8016c8c:	b2b6      	uxth	r6, r6
 8016c8e:	b289      	uxth	r1, r1
 8016c90:	b2bf      	uxth	r7, r7
 8016c92:	f106 0901 	add.w	r9, r6, #1
 8016c96:	f107 0c01 	add.w	ip, r7, #1
 8016c9a:	1c4d      	adds	r5, r1, #1
 8016c9c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8016ca0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8016ca4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8016ca8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8016cac:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8016cb0:	0949      	lsrs	r1, r1, #5
 8016cb2:	433e      	orrs	r6, r7
 8016cb4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016cb8:	430e      	orrs	r6, r1
 8016cba:	f8ab 6000 	strh.w	r6, [fp]
 8016cbe:	b009      	add	sp, #36	; 0x24
 8016cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc4:	08020997 	.word	0x08020997
 8016cc8:	08020ef5 	.word	0x08020ef5
 8016ccc:	08020a1f 	.word	0x08020a1f

08016cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd4:	ed2d 8b08 	vpush	{d8-d11}
 8016cd8:	b097      	sub	sp, #92	; 0x5c
 8016cda:	eeb0 aa40 	vmov.f32	s20, s0
 8016cde:	9309      	str	r3, [sp, #36]	; 0x24
 8016ce0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8016ce4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8016ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ce8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8016cec:	9310      	str	r3, [sp, #64]	; 0x40
 8016cee:	910f      	str	r1, [sp, #60]	; 0x3c
 8016cf0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8016cf4:	9015      	str	r0, [sp, #84]	; 0x54
 8016cf6:	6860      	ldr	r0, [r4, #4]
 8016cf8:	9213      	str	r2, [sp, #76]	; 0x4c
 8016cfa:	fb00 1303 	mla	r3, r0, r3, r1
 8016cfe:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8016d00:	6821      	ldr	r1, [r4, #0]
 8016d02:	6854      	ldr	r4, [r2, #4]
 8016d04:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 8016d08:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016d0c:	930a      	str	r3, [sp, #40]	; 0x28
 8016d0e:	6813      	ldr	r3, [r2, #0]
 8016d10:	930e      	str	r3, [sp, #56]	; 0x38
 8016d12:	1d23      	adds	r3, r4, #4
 8016d14:	9308      	str	r3, [sp, #32]
 8016d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d18:	43db      	mvns	r3, r3
 8016d1a:	b2db      	uxtb	r3, r3
 8016d1c:	eef0 9a60 	vmov.f32	s19, s1
 8016d20:	eeb0 9a41 	vmov.f32	s18, s2
 8016d24:	eeb0 8a62 	vmov.f32	s16, s5
 8016d28:	eef0 8a43 	vmov.f32	s17, s6
 8016d2c:	eef0 ba44 	vmov.f32	s23, s8
 8016d30:	eeb0 ba64 	vmov.f32	s22, s9
 8016d34:	eef0 aa45 	vmov.f32	s21, s10
 8016d38:	930c      	str	r3, [sp, #48]	; 0x30
 8016d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	dc03      	bgt.n	8016d48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8016d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	f340 825c 	ble.w	8017200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8016d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	f340 8127 	ble.w	8016f9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8016d50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016d52:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016d54:	1412      	asrs	r2, r2, #16
 8016d56:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016d5a:	d430      	bmi.n	8016dbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8016d5c:	1c51      	adds	r1, r2, #1
 8016d5e:	428d      	cmp	r5, r1
 8016d60:	dd30      	ble.n	8016dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	db2e      	blt.n	8016dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8016d66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016d68:	1c59      	adds	r1, r3, #1
 8016d6a:	4288      	cmp	r0, r1
 8016d6c:	dd2a      	ble.n	8016dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8016d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d70:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016d72:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016d74:	3b01      	subs	r3, #1
 8016d76:	fb02 1203 	mla	r2, r2, r3, r1
 8016d7a:	1412      	asrs	r2, r2, #16
 8016d7c:	d42c      	bmi.n	8016dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016d7e:	3201      	adds	r2, #1
 8016d80:	4295      	cmp	r5, r2
 8016d82:	dd29      	ble.n	8016dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016d84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016d86:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016d88:	fb02 1303 	mla	r3, r2, r3, r1
 8016d8c:	141b      	asrs	r3, r3, #16
 8016d8e:	d423      	bmi.n	8016dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d92:	3301      	adds	r3, #1
 8016d94:	429a      	cmp	r2, r3
 8016d96:	dd1f      	ble.n	8016dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8016d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d9a:	9311      	str	r3, [sp, #68]	; 0x44
 8016d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8016da0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016da4:	9312      	str	r3, [sp, #72]	; 0x48
 8016da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	f300 8161 	bgt.w	8017070 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8016dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016db2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016db6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016dba:	930a      	str	r3, [sp, #40]	; 0x28
 8016dbc:	e0f1      	b.n	8016fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8016dbe:	1c51      	adds	r1, r2, #1
 8016dc0:	f040 80de 	bne.w	8016f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dc4:	42aa      	cmp	r2, r5
 8016dc6:	f280 80db 	bge.w	8016f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dca:	1c5f      	adds	r7, r3, #1
 8016dcc:	f2c0 80d8 	blt.w	8016f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dd2:	4293      	cmp	r3, r2
 8016dd4:	f280 80d4 	bge.w	8016f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8016dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dda:	9311      	str	r3, [sp, #68]	; 0x44
 8016ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dde:	930d      	str	r3, [sp, #52]	; 0x34
 8016de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	dde3      	ble.n	8016dae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8016de6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016de8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8016dea:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016dec:	141a      	asrs	r2, r3, #16
 8016dee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016df0:	1400      	asrs	r0, r0, #16
 8016df2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016df6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8016dfa:	f100 8120 	bmi.w	801703e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 8016dfe:	1c46      	adds	r6, r0, #1
 8016e00:	42b5      	cmp	r5, r6
 8016e02:	f340 811e 	ble.w	8017042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8016e06:	2a00      	cmp	r2, #0
 8016e08:	f2c0 811b 	blt.w	8017042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8016e0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016e0e:	1c56      	adds	r6, r2, #1
 8016e10:	42b7      	cmp	r7, r6
 8016e12:	f340 8116 	ble.w	8017042 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8016e16:	fb02 0005 	mla	r0, r2, r5, r0
 8016e1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016e1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e1e:	9c08      	ldr	r4, [sp, #32]
 8016e20:	4402      	add	r2, r0
 8016e22:	5c30      	ldrb	r0, [r6, r0]
 8016e24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016e28:	9014      	str	r0, [sp, #80]	; 0x50
 8016e2a:	1826      	adds	r6, r4, r0
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	f000 80f7 	beq.w	8017020 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8016e32:	f892 e001 	ldrb.w	lr, [r2, #1]
 8016e36:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016e3a:	44a6      	add	lr, r4
 8016e3c:	2900      	cmp	r1, #0
 8016e3e:	f000 80f8 	beq.w	8017032 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8016e42:	1950      	adds	r0, r2, r5
 8016e44:	5d52      	ldrb	r2, [r2, r5]
 8016e46:	7840      	ldrb	r0, [r0, #1]
 8016e48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016e4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016e50:	4422      	add	r2, r4
 8016e52:	4420      	add	r0, r4
 8016e54:	b29b      	uxth	r3, r3
 8016e56:	b289      	uxth	r1, r1
 8016e58:	fb03 fa01 	mul.w	sl, r3, r1
 8016e5c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8016e60:	011b      	lsls	r3, r3, #4
 8016e62:	b289      	uxth	r1, r1
 8016e64:	f89e c002 	ldrb.w	ip, [lr, #2]
 8016e68:	f896 b002 	ldrb.w	fp, [r6, #2]
 8016e6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016e6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016e70:	f8b7 8000 	ldrh.w	r8, [r7]
 8016e74:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8016e78:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8016e7c:	eba3 030a 	sub.w	r3, r3, sl
 8016e80:	b29b      	uxth	r3, r3
 8016e82:	eba9 0901 	sub.w	r9, r9, r1
 8016e86:	fa1f f989 	uxth.w	r9, r9
 8016e8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8016e8e:	fb09 cc0b 	mla	ip, r9, fp, ip
 8016e92:	f892 b002 	ldrb.w	fp, [r2, #2]
 8016e96:	fb01 cc0b 	mla	ip, r1, fp, ip
 8016e9a:	f890 b002 	ldrb.w	fp, [r0, #2]
 8016e9e:	fb0a cc0b 	mla	ip, sl, fp, ip
 8016ea2:	ea4f 2b28 	mov.w	fp, r8, asr #8
 8016ea6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8016eaa:	fb1b fb04 	smulbb	fp, fp, r4
 8016eae:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016eb2:	fb0c bc07 	mla	ip, ip, r7, fp
 8016eb6:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016eba:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8016ebe:	f89e e000 	ldrb.w	lr, [lr]
 8016ec2:	435e      	muls	r6, r3
 8016ec4:	fb09 660b 	mla	r6, r9, fp, r6
 8016ec8:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016ecc:	fb01 660b 	mla	r6, r1, fp, r6
 8016ed0:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016ed4:	fb0a 660b 	mla	r6, sl, fp, r6
 8016ed8:	ea4f 0be8 	mov.w	fp, r8, asr #3
 8016edc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8016ee0:	fb1b fb04 	smulbb	fp, fp, r4
 8016ee4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8016ee8:	fb06 b607 	mla	r6, r6, r7, fp
 8016eec:	b2b4      	uxth	r4, r6
 8016eee:	9412      	str	r4, [sp, #72]	; 0x48
 8016ef0:	9e08      	ldr	r6, [sp, #32]
 8016ef2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016ef4:	f816 b004 	ldrb.w	fp, [r6, r4]
 8016ef8:	fb03 f30e 	mul.w	r3, r3, lr
 8016efc:	f892 e000 	ldrb.w	lr, [r2]
 8016f00:	fb09 330b 	mla	r3, r9, fp, r3
 8016f04:	fb01 330e 	mla	r3, r1, lr, r3
 8016f08:	f890 e000 	ldrb.w	lr, [r0]
 8016f0c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016f10:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8016f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f16:	fa5f f888 	uxtb.w	r8, r8
 8016f1a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8016f1e:	fb18 f803 	smulbb	r8, r8, r3
 8016f22:	fb0e 8807 	mla	r8, lr, r7, r8
 8016f26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f28:	fa1f fc8c 	uxth.w	ip, ip
 8016f2c:	fa1f f888 	uxth.w	r8, r8
 8016f30:	f103 0b01 	add.w	fp, r3, #1
 8016f34:	f10c 0201 	add.w	r2, ip, #1
 8016f38:	f108 0e01 	add.w	lr, r8, #1
 8016f3c:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 8016f40:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8016f44:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 8016f48:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016f4c:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 8016f50:	0976      	lsrs	r6, r6, #5
 8016f52:	ea4c 0c08 	orr.w	ip, ip, r8
 8016f56:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f5c:	ea4c 0606 	orr.w	r6, ip, r6
 8016f60:	801e      	strh	r6, [r3, #0]
 8016f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f64:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016f66:	3302      	adds	r3, #2
 8016f68:	930d      	str	r3, [sp, #52]	; 0x34
 8016f6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016f6c:	4413      	add	r3, r2
 8016f6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8016f70:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016f72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f74:	4413      	add	r3, r2
 8016f76:	932a      	str	r3, [sp, #168]	; 0xa8
 8016f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	9311      	str	r3, [sp, #68]	; 0x44
 8016f7e:	e72f      	b.n	8016de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8016f80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016f82:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016f84:	4413      	add	r3, r2
 8016f86:	9329      	str	r3, [sp, #164]	; 0xa4
 8016f88:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016f8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016f8c:	4413      	add	r3, r2
 8016f8e:	932a      	str	r3, [sp, #168]	; 0xa8
 8016f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f92:	3b01      	subs	r3, #1
 8016f94:	9309      	str	r3, [sp, #36]	; 0x24
 8016f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f98:	3302      	adds	r3, #2
 8016f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f9c:	e6d4      	b.n	8016d48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8016f9e:	f47f aee6 	bne.w	8016d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8016fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f340 812b 	ble.w	8017200 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8016faa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016fb2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016fb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016fb8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016fbc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016fc0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016fc4:	eef0 6a48 	vmov.f32	s13, s16
 8016fc8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016fcc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fd0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016fd4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8016fd8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016fdc:	eef0 6a68 	vmov.f32	s13, s17
 8016fe0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016fe4:	ee18 2a10 	vmov	r2, s16
 8016fe8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016fec:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ff0:	ee18 2a90 	vmov	r2, s17
 8016ff4:	932b      	str	r3, [sp, #172]	; 0xac
 8016ff6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016ff8:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ffc:	932c      	str	r3, [sp, #176]	; 0xb0
 8016ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017000:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017002:	3b01      	subs	r3, #1
 8017004:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017008:	930f      	str	r3, [sp, #60]	; 0x3c
 801700a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801700c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8017010:	bf08      	it	eq
 8017012:	4613      	moveq	r3, r2
 8017014:	9309      	str	r3, [sp, #36]	; 0x24
 8017016:	eef0 8a67 	vmov.f32	s17, s15
 801701a:	eeb0 8a47 	vmov.f32	s16, s14
 801701e:	e68c      	b.n	8016d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8017020:	b151      	cbz	r1, 8017038 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8017022:	5d52      	ldrb	r2, [r2, r5]
 8017024:	9808      	ldr	r0, [sp, #32]
 8017026:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801702a:	4402      	add	r2, r0
 801702c:	4630      	mov	r0, r6
 801702e:	46b6      	mov	lr, r6
 8017030:	e710      	b.n	8016e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8017032:	4630      	mov	r0, r6
 8017034:	4632      	mov	r2, r6
 8017036:	e70d      	b.n	8016e54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8017038:	4630      	mov	r0, r6
 801703a:	4632      	mov	r2, r6
 801703c:	e7f7      	b.n	801702e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 801703e:	1c46      	adds	r6, r0, #1
 8017040:	d18f      	bne.n	8016f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017042:	4285      	cmp	r5, r0
 8017044:	dd8d      	ble.n	8016f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017046:	1c54      	adds	r4, r2, #1
 8017048:	db8b      	blt.n	8016f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801704a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801704c:	4294      	cmp	r4, r2
 801704e:	dd88      	ble.n	8016f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017050:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8017054:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017058:	9002      	str	r0, [sp, #8]
 801705a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801705e:	e9cd 5300 	strd	r5, r3, [sp]
 8017062:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8017066:	9b08      	ldr	r3, [sp, #32]
 8017068:	9815      	ldr	r0, [sp, #84]	; 0x54
 801706a:	f7ff fd47 	bl	8016afc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801706e:	e778      	b.n	8016f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017070:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8017072:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017074:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017076:	1410      	asrs	r0, r2, #16
 8017078:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801707c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801707e:	1412      	asrs	r2, r2, #16
 8017080:	fb05 2000 	mla	r0, r5, r0, r2
 8017084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017086:	f814 a000 	ldrb.w	sl, [r4, r0]
 801708a:	4402      	add	r2, r0
 801708c:	9808      	ldr	r0, [sp, #32]
 801708e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8017092:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017096:	eb00 060a 	add.w	r6, r0, sl
 801709a:	2b00      	cmp	r3, #0
 801709c:	f000 80a1 	beq.w	80171e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 80170a0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80170a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80170a8:	4484      	add	ip, r0
 80170aa:	2900      	cmp	r1, #0
 80170ac:	f000 80a2 	beq.w	80171f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 80170b0:	1950      	adds	r0, r2, r5
 80170b2:	5d52      	ldrb	r2, [r2, r5]
 80170b4:	7840      	ldrb	r0, [r0, #1]
 80170b6:	9c08      	ldr	r4, [sp, #32]
 80170b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80170bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80170c0:	4422      	add	r2, r4
 80170c2:	4420      	add	r0, r4
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	b289      	uxth	r1, r1
 80170c8:	fb03 f901 	mul.w	r9, r3, r1
 80170cc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80170d0:	011b      	lsls	r3, r3, #4
 80170d2:	b289      	uxth	r1, r1
 80170d4:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80170d8:	f896 b002 	ldrb.w	fp, [r6, #2]
 80170dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80170de:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80170e2:	eba3 0309 	sub.w	r3, r3, r9
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	eba8 0801 	sub.w	r8, r8, r1
 80170ec:	fa1f f888 	uxth.w	r8, r8
 80170f0:	435f      	muls	r7, r3
 80170f2:	fb08 770b 	mla	r7, r8, fp, r7
 80170f6:	f892 b002 	ldrb.w	fp, [r2, #2]
 80170fa:	f8b4 e000 	ldrh.w	lr, [r4]
 80170fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017100:	fb01 770b 	mla	r7, r1, fp, r7
 8017104:	f890 b002 	ldrb.w	fp, [r0, #2]
 8017108:	fb09 770b 	mla	r7, r9, fp, r7
 801710c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8017110:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8017114:	fb1b fb04 	smulbb	fp, fp, r4
 8017118:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801711a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801711e:	fb07 b704 	mla	r7, r7, r4, fp
 8017122:	f896 b001 	ldrb.w	fp, [r6, #1]
 8017126:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801712a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801712c:	f89c c000 	ldrb.w	ip, [ip]
 8017130:	435e      	muls	r6, r3
 8017132:	fb08 660b 	mla	r6, r8, fp, r6
 8017136:	f892 b001 	ldrb.w	fp, [r2, #1]
 801713a:	fb01 660b 	mla	r6, r1, fp, r6
 801713e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017142:	fb09 660b 	mla	r6, r9, fp, r6
 8017146:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801714a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801714e:	fb1b fb04 	smulbb	fp, fp, r4
 8017152:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017154:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8017158:	fb06 b604 	mla	r6, r6, r4, fp
 801715c:	9c08      	ldr	r4, [sp, #32]
 801715e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8017162:	fb03 f30c 	mul.w	r3, r3, ip
 8017166:	f892 c000 	ldrb.w	ip, [r2]
 801716a:	fb08 330a 	mla	r3, r8, sl, r3
 801716e:	fb01 330c 	mla	r3, r1, ip, r3
 8017172:	f890 c000 	ldrb.w	ip, [r0]
 8017176:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801717a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801717e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017180:	fa5f fe8e 	uxtb.w	lr, lr
 8017184:	fb1e fe03 	smulbb	lr, lr, r3
 8017188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801718a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801718e:	fb0c ec03 	mla	ip, ip, r3, lr
 8017192:	b2bf      	uxth	r7, r7
 8017194:	b2b6      	uxth	r6, r6
 8017196:	fa1f fc8c 	uxth.w	ip, ip
 801719a:	1c7b      	adds	r3, r7, #1
 801719c:	f10c 0201 	add.w	r2, ip, #1
 80171a0:	f106 0b01 	add.w	fp, r6, #1
 80171a4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80171a8:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80171ac:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 80171b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80171b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80171b8:	0976      	lsrs	r6, r6, #5
 80171ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171bc:	4317      	orrs	r7, r2
 80171be:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80171c2:	4337      	orrs	r7, r6
 80171c4:	f823 7b02 	strh.w	r7, [r3], #2
 80171c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80171ca:	930d      	str	r3, [sp, #52]	; 0x34
 80171cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80171ce:	4413      	add	r3, r2
 80171d0:	9329      	str	r3, [sp, #164]	; 0xa4
 80171d2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80171d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80171d6:	4413      	add	r3, r2
 80171d8:	932a      	str	r3, [sp, #168]	; 0xa8
 80171da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171dc:	3b01      	subs	r3, #1
 80171de:	9311      	str	r3, [sp, #68]	; 0x44
 80171e0:	e5e1      	b.n	8016da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80171e2:	b151      	cbz	r1, 80171fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 80171e4:	5d52      	ldrb	r2, [r2, r5]
 80171e6:	9808      	ldr	r0, [sp, #32]
 80171e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80171ec:	4402      	add	r2, r0
 80171ee:	4630      	mov	r0, r6
 80171f0:	46b4      	mov	ip, r6
 80171f2:	e767      	b.n	80170c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 80171f4:	4630      	mov	r0, r6
 80171f6:	4632      	mov	r2, r6
 80171f8:	e764      	b.n	80170c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 80171fa:	4630      	mov	r0, r6
 80171fc:	4632      	mov	r2, r6
 80171fe:	e7f7      	b.n	80171f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 8017200:	b017      	add	sp, #92	; 0x5c
 8017202:	ecbd 8b08 	vpop	{d8-d11}
 8017206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801720c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017210:	880e      	ldrh	r6, [r1, #0]
 8017212:	b085      	sub	sp, #20
 8017214:	0230      	lsls	r0, r6, #8
 8017216:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801721a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801721e:	0170      	lsls	r0, r6, #5
 8017220:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8017224:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017228:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801722c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8017230:	00f6      	lsls	r6, r6, #3
 8017232:	ea4b 0000 	orr.w	r0, fp, r0
 8017236:	b2f6      	uxtb	r6, r6
 8017238:	4691      	mov	r9, r2
 801723a:	fb05 7a0c 	mla	sl, r5, ip, r7
 801723e:	4306      	orrs	r6, r0
 8017240:	2d00      	cmp	r5, #0
 8017242:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8017246:	9603      	str	r6, [sp, #12]
 8017248:	eb09 0e0a 	add.w	lr, r9, sl
 801724c:	db42      	blt.n	80172d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801724e:	45a8      	cmp	r8, r5
 8017250:	dd40      	ble.n	80172d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8017252:	2f00      	cmp	r7, #0
 8017254:	db3c      	blt.n	80172d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8017256:	45bc      	cmp	ip, r7
 8017258:	dd3a      	ble.n	80172d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801725a:	f819 600a 	ldrb.w	r6, [r9, sl]
 801725e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017262:	441e      	add	r6, r3
 8017264:	1c78      	adds	r0, r7, #1
 8017266:	d438      	bmi.n	80172da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8017268:	4584      	cmp	ip, r0
 801726a:	dd36      	ble.n	80172da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801726c:	b3aa      	cbz	r2, 80172da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801726e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8017272:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017276:	4418      	add	r0, r3
 8017278:	3501      	adds	r5, #1
 801727a:	d432      	bmi.n	80172e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801727c:	45a8      	cmp	r8, r5
 801727e:	dd30      	ble.n	80172e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8017280:	b37c      	cbz	r4, 80172e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8017282:	2f00      	cmp	r7, #0
 8017284:	db2b      	blt.n	80172de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8017286:	45bc      	cmp	ip, r7
 8017288:	dd29      	ble.n	80172de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801728a:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801728e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017292:	441d      	add	r5, r3
 8017294:	3701      	adds	r7, #1
 8017296:	d427      	bmi.n	80172e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8017298:	45bc      	cmp	ip, r7
 801729a:	dd25      	ble.n	80172e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801729c:	b322      	cbz	r2, 80172e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801729e:	44f4      	add	ip, lr
 80172a0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80172a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80172a8:	443b      	add	r3, r7
 80172aa:	781f      	ldrb	r7, [r3, #0]
 80172ac:	f896 a000 	ldrb.w	sl, [r6]
 80172b0:	f890 b000 	ldrb.w	fp, [r0]
 80172b4:	f895 9000 	ldrb.w	r9, [r5]
 80172b8:	9700      	str	r7, [sp, #0]
 80172ba:	2a0f      	cmp	r2, #15
 80172bc:	d801      	bhi.n	80172c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 80172be:	2c0f      	cmp	r4, #15
 80172c0:	d914      	bls.n	80172ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 80172c2:	4b2c      	ldr	r3, [pc, #176]	; (8017374 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 80172c4:	4a2c      	ldr	r2, [pc, #176]	; (8017378 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80172c6:	482d      	ldr	r0, [pc, #180]	; (801737c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80172c8:	f240 3173 	movw	r1, #883	; 0x373
 80172cc:	f005 fef2 	bl	801d0b4 <__assert_func>
 80172d0:	ae03      	add	r6, sp, #12
 80172d2:	e7c7      	b.n	8017264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 80172d4:	a803      	add	r0, sp, #12
 80172d6:	4606      	mov	r6, r0
 80172d8:	e7ce      	b.n	8017278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80172da:	a803      	add	r0, sp, #12
 80172dc:	e7cc      	b.n	8017278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 80172de:	ad03      	add	r5, sp, #12
 80172e0:	e7d8      	b.n	8017294 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 80172e2:	ab03      	add	r3, sp, #12
 80172e4:	461d      	mov	r5, r3
 80172e6:	e7e0      	b.n	80172aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80172e8:	ab03      	add	r3, sp, #12
 80172ea:	e7de      	b.n	80172aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 80172ec:	b292      	uxth	r2, r2
 80172ee:	b2a4      	uxth	r4, r4
 80172f0:	fb02 f804 	mul.w	r8, r2, r4
 80172f4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80172f8:	0112      	lsls	r2, r2, #4
 80172fa:	b2a4      	uxth	r4, r4
 80172fc:	f890 e002 	ldrb.w	lr, [r0, #2]
 8017300:	78b7      	ldrb	r7, [r6, #2]
 8017302:	7840      	ldrb	r0, [r0, #1]
 8017304:	7876      	ldrb	r6, [r6, #1]
 8017306:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801730a:	eba2 0208 	sub.w	r2, r2, r8
 801730e:	b292      	uxth	r2, r2
 8017310:	ebac 0c04 	sub.w	ip, ip, r4
 8017314:	fa1f fc8c 	uxth.w	ip, ip
 8017318:	fb02 fe0e 	mul.w	lr, r2, lr
 801731c:	fb0c ee07 	mla	lr, ip, r7, lr
 8017320:	78af      	ldrb	r7, [r5, #2]
 8017322:	fb04 ee07 	mla	lr, r4, r7, lr
 8017326:	789f      	ldrb	r7, [r3, #2]
 8017328:	785b      	ldrb	r3, [r3, #1]
 801732a:	fb08 e707 	mla	r7, r8, r7, lr
 801732e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017332:	fb02 fe0b 	mul.w	lr, r2, fp
 8017336:	4342      	muls	r2, r0
 8017338:	7868      	ldrb	r0, [r5, #1]
 801733a:	9701      	str	r7, [sp, #4]
 801733c:	fb0c ee0a 	mla	lr, ip, sl, lr
 8017340:	9f00      	ldr	r7, [sp, #0]
 8017342:	fb0c 2206 	mla	r2, ip, r6, r2
 8017346:	fb04 ee09 	mla	lr, r4, r9, lr
 801734a:	fb04 2400 	mla	r4, r4, r0, r2
 801734e:	fb08 ee07 	mla	lr, r8, r7, lr
 8017352:	9f01      	ldr	r7, [sp, #4]
 8017354:	fb08 4803 	mla	r8, r8, r3, r4
 8017358:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801735c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017360:	ea47 070e 	orr.w	r7, r7, lr
 8017364:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017368:	ea47 0708 	orr.w	r7, r7, r8
 801736c:	800f      	strh	r7, [r1, #0]
 801736e:	b005      	add	sp, #20
 8017370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017374:	08020997 	.word	0x08020997
 8017378:	08020ef5 	.word	0x08020ef5
 801737c:	08020a1f 	.word	0x08020a1f

08017380 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017384:	ed2d 8b0a 	vpush	{d8-d12}
 8017388:	b091      	sub	sp, #68	; 0x44
 801738a:	eeb0 aa40 	vmov.f32	s20, s0
 801738e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8017390:	9307      	str	r3, [sp, #28]
 8017392:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8017396:	910c      	str	r1, [sp, #48]	; 0x30
 8017398:	9309      	str	r3, [sp, #36]	; 0x24
 801739a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801739e:	900f      	str	r0, [sp, #60]	; 0x3c
 80173a0:	6860      	ldr	r0, [r4, #4]
 80173a2:	920e      	str	r2, [sp, #56]	; 0x38
 80173a4:	fb00 1303 	mla	r3, r0, r3, r1
 80173a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80173aa:	6821      	ldr	r1, [r4, #0]
 80173ac:	6854      	ldr	r4, [r2, #4]
 80173ae:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 80173b2:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 80173b6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80173ba:	9308      	str	r3, [sp, #32]
 80173bc:	6813      	ldr	r3, [r2, #0]
 80173be:	930a      	str	r3, [sp, #40]	; 0x28
 80173c0:	eef0 9a60 	vmov.f32	s19, s1
 80173c4:	eeb0 9a41 	vmov.f32	s18, s2
 80173c8:	eeb0 8a62 	vmov.f32	s16, s5
 80173cc:	eef0 8a43 	vmov.f32	s17, s6
 80173d0:	eeb0 ca44 	vmov.f32	s24, s8
 80173d4:	eef0 ba64 	vmov.f32	s23, s9
 80173d8:	eeb0 ba45 	vmov.f32	s22, s10
 80173dc:	3404      	adds	r4, #4
 80173de:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80173e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	dc03      	bgt.n	80173f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80173e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	f340 81cb 	ble.w	8017786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80173f0:	9b07      	ldr	r3, [sp, #28]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	f340 80dd 	ble.w	80175b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 80173f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80173fa:	1412      	asrs	r2, r2, #16
 80173fc:	ea4f 432b 	mov.w	r3, fp, asr #16
 8017400:	d42c      	bmi.n	801745c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8017402:	1c51      	adds	r1, r2, #1
 8017404:	428d      	cmp	r5, r1
 8017406:	dd2c      	ble.n	8017462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8017408:	2b00      	cmp	r3, #0
 801740a:	db2a      	blt.n	8017462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801740c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801740e:	1c59      	adds	r1, r3, #1
 8017410:	4288      	cmp	r0, r1
 8017412:	dd26      	ble.n	8017462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8017414:	9b07      	ldr	r3, [sp, #28]
 8017416:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017418:	9925      	ldr	r1, [sp, #148]	; 0x94
 801741a:	3b01      	subs	r3, #1
 801741c:	fb02 1203 	mla	r2, r2, r3, r1
 8017420:	1412      	asrs	r2, r2, #16
 8017422:	d428      	bmi.n	8017476 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8017424:	3201      	adds	r2, #1
 8017426:	4295      	cmp	r5, r2
 8017428:	dd25      	ble.n	8017476 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801742a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801742c:	fb02 b303 	mla	r3, r2, r3, fp
 8017430:	141b      	asrs	r3, r3, #16
 8017432:	d420      	bmi.n	8017476 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8017434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017436:	3301      	adds	r3, #1
 8017438:	429a      	cmp	r2, r3
 801743a:	dd1c      	ble.n	8017476 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801743c:	9b07      	ldr	r3, [sp, #28]
 801743e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017440:	9b08      	ldr	r3, [sp, #32]
 8017442:	930d      	str	r3, [sp, #52]	; 0x34
 8017444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017446:	2b00      	cmp	r3, #0
 8017448:	f300 8116 	bgt.w	8017678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801744c:	9b07      	ldr	r3, [sp, #28]
 801744e:	9a08      	ldr	r2, [sp, #32]
 8017450:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017454:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017458:	9308      	str	r3, [sp, #32]
 801745a:	e0ac      	b.n	80175b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801745c:	1c51      	adds	r1, r2, #1
 801745e:	f040 809b 	bne.w	8017598 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017462:	42aa      	cmp	r2, r5
 8017464:	f280 8098 	bge.w	8017598 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017468:	1c5a      	adds	r2, r3, #1
 801746a:	f2c0 8095 	blt.w	8017598 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801746e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017470:	4293      	cmp	r3, r2
 8017472:	f280 8091 	bge.w	8017598 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017476:	9b07      	ldr	r3, [sp, #28]
 8017478:	930d      	str	r3, [sp, #52]	; 0x34
 801747a:	9b08      	ldr	r3, [sp, #32]
 801747c:	930b      	str	r3, [sp, #44]	; 0x2c
 801747e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017480:	2b00      	cmp	r3, #0
 8017482:	dde3      	ble.n	801744c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8017484:	9825      	ldr	r0, [sp, #148]	; 0x94
 8017486:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017488:	1400      	asrs	r0, r0, #16
 801748a:	ea4f 422b 	mov.w	r2, fp, asr #16
 801748e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017492:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8017496:	f100 80d9 	bmi.w	801764c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801749a:	1c46      	adds	r6, r0, #1
 801749c:	42b5      	cmp	r5, r6
 801749e:	f340 80d7 	ble.w	8017650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80174a2:	2a00      	cmp	r2, #0
 80174a4:	f2c0 80d4 	blt.w	8017650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80174a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80174aa:	1c56      	adds	r6, r2, #1
 80174ac:	42b7      	cmp	r7, r6
 80174ae:	f340 80cf 	ble.w	8017650 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80174b2:	fb02 0005 	mla	r0, r2, r5, r0
 80174b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80174b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174ba:	4402      	add	r2, r0
 80174bc:	5c30      	ldrb	r0, [r6, r0]
 80174be:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80174c2:	eb04 0c08 	add.w	ip, r4, r8
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	f000 80b2 	beq.w	8017630 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80174cc:	7856      	ldrb	r6, [r2, #1]
 80174ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80174d2:	4426      	add	r6, r4
 80174d4:	2900      	cmp	r1, #0
 80174d6:	f000 80b3 	beq.w	8017640 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 80174da:	1950      	adds	r0, r2, r5
 80174dc:	5d52      	ldrb	r2, [r2, r5]
 80174de:	7840      	ldrb	r0, [r0, #1]
 80174e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80174e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80174e8:	4422      	add	r2, r4
 80174ea:	4420      	add	r0, r4
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	b289      	uxth	r1, r1
 80174f0:	fb03 f901 	mul.w	r9, r3, r1
 80174f4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80174f8:	011b      	lsls	r3, r3, #4
 80174fa:	b289      	uxth	r1, r1
 80174fc:	78b7      	ldrb	r7, [r6, #2]
 80174fe:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017502:	f89c c001 	ldrb.w	ip, [ip, #1]
 8017506:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801750a:	eba3 0309 	sub.w	r3, r3, r9
 801750e:	b29b      	uxth	r3, r3
 8017510:	ebae 0e01 	sub.w	lr, lr, r1
 8017514:	fa1f fe8e 	uxth.w	lr, lr
 8017518:	435f      	muls	r7, r3
 801751a:	fb0e 770a 	mla	r7, lr, sl, r7
 801751e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8017522:	fb01 770a 	mla	r7, r1, sl, r7
 8017526:	f890 a002 	ldrb.w	sl, [r0, #2]
 801752a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801752e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017532:	f896 8000 	ldrb.w	r8, [r6]
 8017536:	7876      	ldrb	r6, [r6, #1]
 8017538:	fb03 f808 	mul.w	r8, r3, r8
 801753c:	fb0e 8807 	mla	r8, lr, r7, r8
 8017540:	7817      	ldrb	r7, [r2, #0]
 8017542:	fb01 8807 	mla	r8, r1, r7, r8
 8017546:	7807      	ldrb	r7, [r0, #0]
 8017548:	fb09 8707 	mla	r7, r9, r7, r8
 801754c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017550:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017554:	ea4a 0707 	orr.w	r7, sl, r7
 8017558:	4373      	muls	r3, r6
 801755a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801755e:	fb0e 330c 	mla	r3, lr, ip, r3
 8017562:	fb01 310a 	mla	r1, r1, sl, r3
 8017566:	f890 a001 	ldrb.w	sl, [r0, #1]
 801756a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801756c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8017570:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017574:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017578:	ea47 070a 	orr.w	r7, r7, sl
 801757c:	801f      	strh	r7, [r3, #0]
 801757e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017580:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017582:	3302      	adds	r3, #2
 8017584:	930b      	str	r3, [sp, #44]	; 0x2c
 8017586:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017588:	4413      	add	r3, r2
 801758a:	9325      	str	r3, [sp, #148]	; 0x94
 801758c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801758e:	449b      	add	fp, r3
 8017590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017592:	3b01      	subs	r3, #1
 8017594:	930d      	str	r3, [sp, #52]	; 0x34
 8017596:	e772      	b.n	801747e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017598:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801759a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801759c:	4413      	add	r3, r2
 801759e:	9325      	str	r3, [sp, #148]	; 0x94
 80175a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80175a2:	449b      	add	fp, r3
 80175a4:	9b07      	ldr	r3, [sp, #28]
 80175a6:	3b01      	subs	r3, #1
 80175a8:	9307      	str	r3, [sp, #28]
 80175aa:	9b08      	ldr	r3, [sp, #32]
 80175ac:	3302      	adds	r3, #2
 80175ae:	9308      	str	r3, [sp, #32]
 80175b0:	e71e      	b.n	80173f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80175b2:	f47f af2f 	bne.w	8017414 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80175b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	f340 80e4 	ble.w	8017786 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80175be:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80175c2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80175c6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80175ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175cc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80175d0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80175d4:	eef0 6a48 	vmov.f32	s13, s16
 80175d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80175dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80175e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80175e4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80175e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80175ec:	eef0 6a68 	vmov.f32	s13, s17
 80175f0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80175f4:	ee18 2a10 	vmov	r2, s16
 80175f8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80175fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017600:	ee18 2a90 	vmov	r2, s17
 8017604:	9327      	str	r3, [sp, #156]	; 0x9c
 8017606:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017608:	fb92 f3f3 	sdiv	r3, r2, r3
 801760c:	9328      	str	r3, [sp, #160]	; 0xa0
 801760e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017612:	3b01      	subs	r3, #1
 8017614:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017618:	930c      	str	r3, [sp, #48]	; 0x30
 801761a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801761c:	bf08      	it	eq
 801761e:	4613      	moveq	r3, r2
 8017620:	ee16 ba90 	vmov	fp, s13
 8017624:	9307      	str	r3, [sp, #28]
 8017626:	eef0 8a67 	vmov.f32	s17, s15
 801762a:	eeb0 8a47 	vmov.f32	s16, s14
 801762e:	e6d8      	b.n	80173e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8017630:	b149      	cbz	r1, 8017646 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8017632:	5d52      	ldrb	r2, [r2, r5]
 8017634:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017638:	4422      	add	r2, r4
 801763a:	4660      	mov	r0, ip
 801763c:	4666      	mov	r6, ip
 801763e:	e755      	b.n	80174ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8017640:	4660      	mov	r0, ip
 8017642:	4662      	mov	r2, ip
 8017644:	e752      	b.n	80174ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8017646:	4660      	mov	r0, ip
 8017648:	4662      	mov	r2, ip
 801764a:	e7f7      	b.n	801763c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801764c:	1c47      	adds	r7, r0, #1
 801764e:	d196      	bne.n	801757e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017650:	4285      	cmp	r5, r0
 8017652:	dd94      	ble.n	801757e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017654:	1c56      	adds	r6, r2, #1
 8017656:	db92      	blt.n	801757e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017658:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801765a:	4296      	cmp	r6, r2
 801765c:	dd8f      	ble.n	801757e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801765e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017662:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8017666:	e9cd 5600 	strd	r5, r6, [sp]
 801766a:	4623      	mov	r3, r4
 801766c:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 8017670:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017672:	f7ff fdcb 	bl	801720c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8017676:	e782      	b.n	801757e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017678:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801767a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801767c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801767e:	1412      	asrs	r2, r2, #16
 8017680:	ea4f 402b 	mov.w	r0, fp, asr #16
 8017684:	fb05 2000 	mla	r0, r5, r0, r2
 8017688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801768a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801768e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017692:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017696:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801769a:	4402      	add	r2, r0
 801769c:	eb04 0c08 	add.w	ip, r4, r8
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d062      	beq.n	801776a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 80176a4:	7856      	ldrb	r6, [r2, #1]
 80176a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80176aa:	4426      	add	r6, r4
 80176ac:	2900      	cmp	r1, #0
 80176ae:	d064      	beq.n	801777a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 80176b0:	1950      	adds	r0, r2, r5
 80176b2:	5d52      	ldrb	r2, [r2, r5]
 80176b4:	7840      	ldrb	r0, [r0, #1]
 80176b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80176be:	4422      	add	r2, r4
 80176c0:	4420      	add	r0, r4
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	b289      	uxth	r1, r1
 80176c6:	fb03 f901 	mul.w	r9, r3, r1
 80176ca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80176ce:	011b      	lsls	r3, r3, #4
 80176d0:	b289      	uxth	r1, r1
 80176d2:	78b7      	ldrb	r7, [r6, #2]
 80176d4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80176d8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80176dc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80176e0:	eba3 0309 	sub.w	r3, r3, r9
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	ebae 0e01 	sub.w	lr, lr, r1
 80176ea:	fa1f fe8e 	uxth.w	lr, lr
 80176ee:	435f      	muls	r7, r3
 80176f0:	fb0e 770a 	mla	r7, lr, sl, r7
 80176f4:	f892 a002 	ldrb.w	sl, [r2, #2]
 80176f8:	fb01 770a 	mla	r7, r1, sl, r7
 80176fc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017700:	fb09 7a0a 	mla	sl, r9, sl, r7
 8017704:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017708:	f896 8000 	ldrb.w	r8, [r6]
 801770c:	7876      	ldrb	r6, [r6, #1]
 801770e:	fb03 f808 	mul.w	r8, r3, r8
 8017712:	fb0e 8807 	mla	r8, lr, r7, r8
 8017716:	7817      	ldrb	r7, [r2, #0]
 8017718:	fb01 8807 	mla	r8, r1, r7, r8
 801771c:	7807      	ldrb	r7, [r0, #0]
 801771e:	fb09 8707 	mla	r7, r9, r7, r8
 8017722:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017726:	4373      	muls	r3, r6
 8017728:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801772c:	7856      	ldrb	r6, [r2, #1]
 801772e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017730:	ea4a 0707 	orr.w	r7, sl, r7
 8017734:	fb0e 330c 	mla	r3, lr, ip, r3
 8017738:	f890 a001 	ldrb.w	sl, [r0, #1]
 801773c:	fb01 3306 	mla	r3, r1, r6, r3
 8017740:	fb09 3a0a 	mla	sl, r9, sl, r3
 8017744:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801774a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801774e:	ea47 070a 	orr.w	r7, r7, sl
 8017752:	f823 7b02 	strh.w	r7, [r3], #2
 8017756:	930d      	str	r3, [sp, #52]	; 0x34
 8017758:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801775a:	4413      	add	r3, r2
 801775c:	9325      	str	r3, [sp, #148]	; 0x94
 801775e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017760:	449b      	add	fp, r3
 8017762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017764:	3b01      	subs	r3, #1
 8017766:	930b      	str	r3, [sp, #44]	; 0x2c
 8017768:	e66c      	b.n	8017444 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801776a:	b149      	cbz	r1, 8017780 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 801776c:	5d52      	ldrb	r2, [r2, r5]
 801776e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017772:	4422      	add	r2, r4
 8017774:	4660      	mov	r0, ip
 8017776:	4666      	mov	r6, ip
 8017778:	e7a3      	b.n	80176c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801777a:	4660      	mov	r0, ip
 801777c:	4662      	mov	r2, ip
 801777e:	e7a0      	b.n	80176c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8017780:	4660      	mov	r0, ip
 8017782:	4662      	mov	r2, ip
 8017784:	e7f7      	b.n	8017776 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8017786:	b011      	add	sp, #68	; 0x44
 8017788:	ecbd 8b0a 	vpop	{d8-d12}
 801778c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8017790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017794:	8808      	ldrh	r0, [r1, #0]
 8017796:	b085      	sub	sp, #20
 8017798:	1206      	asrs	r6, r0, #8
 801779a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801779e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80177a2:	9600      	str	r6, [sp, #0]
 80177a4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80177a8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80177ac:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80177b0:	10c6      	asrs	r6, r0, #3
 80177b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80177b6:	9601      	str	r6, [sp, #4]
 80177b8:	00c0      	lsls	r0, r0, #3
 80177ba:	fb04 560c 	mla	r6, r4, ip, r5
 80177be:	b2c0      	uxtb	r0, r0
 80177c0:	4692      	mov	sl, r2
 80177c2:	eb02 0e06 	add.w	lr, r2, r6
 80177c6:	9a00      	ldr	r2, [sp, #0]
 80177c8:	9002      	str	r0, [sp, #8]
 80177ca:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80177ce:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80177d2:	9a01      	ldr	r2, [sp, #4]
 80177d4:	2c00      	cmp	r4, #0
 80177d6:	4698      	mov	r8, r3
 80177d8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80177dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80177e0:	db3e      	blt.n	8017860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80177e2:	45a1      	cmp	r9, r4
 80177e4:	dd3c      	ble.n	8017860 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 80177e6:	2d00      	cmp	r5, #0
 80177e8:	db38      	blt.n	801785c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80177ea:	45ac      	cmp	ip, r5
 80177ec:	dd36      	ble.n	801785c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 80177ee:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80177f2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80177f6:	1c6e      	adds	r6, r5, #1
 80177f8:	d435      	bmi.n	8017866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 80177fa:	45b4      	cmp	ip, r6
 80177fc:	dd33      	ble.n	8017866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 80177fe:	b393      	cbz	r3, 8017866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8017800:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8017804:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8017808:	3401      	adds	r4, #1
 801780a:	d430      	bmi.n	801786e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801780c:	45a1      	cmp	r9, r4
 801780e:	dd2e      	ble.n	801786e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8017810:	b36f      	cbz	r7, 801786e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8017812:	2d00      	cmp	r5, #0
 8017814:	db29      	blt.n	801786a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8017816:	45ac      	cmp	ip, r5
 8017818:	dd27      	ble.n	801786a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801781a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801781e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8017822:	3501      	adds	r5, #1
 8017824:	d407      	bmi.n	8017836 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8017826:	45ac      	cmp	ip, r5
 8017828:	dd05      	ble.n	8017836 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801782a:	b123      	cbz	r3, 8017836 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801782c:	44f4      	add	ip, lr
 801782e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017832:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8017836:	2b0f      	cmp	r3, #15
 8017838:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801783c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017840:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017844:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8017848:	d801      	bhi.n	801784e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801784a:	2f0f      	cmp	r7, #15
 801784c:	d911      	bls.n	8017872 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 801784e:	4b7f      	ldr	r3, [pc, #508]	; (8017a4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 8017850:	4a7f      	ldr	r2, [pc, #508]	; (8017a50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 8017852:	4880      	ldr	r0, [pc, #512]	; (8017a54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8017854:	f240 3173 	movw	r1, #883	; 0x373
 8017858:	f005 fc2c 	bl	801d0b4 <__assert_func>
 801785c:	4602      	mov	r2, r0
 801785e:	e7ca      	b.n	80177f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8017860:	4606      	mov	r6, r0
 8017862:	4602      	mov	r2, r0
 8017864:	e7d0      	b.n	8017808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 8017866:	4606      	mov	r6, r0
 8017868:	e7ce      	b.n	8017808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801786a:	4604      	mov	r4, r0
 801786c:	e7d9      	b.n	8017822 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 801786e:	4604      	mov	r4, r0
 8017870:	e7e1      	b.n	8017836 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8017872:	b29b      	uxth	r3, r3
 8017874:	b2bf      	uxth	r7, r7
 8017876:	fb03 fe07 	mul.w	lr, r3, r7
 801787a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801787e:	011b      	lsls	r3, r3, #4
 8017880:	eba3 0c0e 	sub.w	ip, r3, lr
 8017884:	b2bf      	uxth	r7, r7
 8017886:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801788a:	fa1f fc8c 	uxth.w	ip, ip
 801788e:	1bed      	subs	r5, r5, r7
 8017890:	b2ad      	uxth	r5, r5
 8017892:	fb0c f30a 	mul.w	r3, ip, sl
 8017896:	fb05 330b 	mla	r3, r5, fp, r3
 801789a:	fb07 3309 	mla	r3, r7, r9, r3
 801789e:	fb0e 3308 	mla	r3, lr, r8, r3
 80178a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80178a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80178aa:	9303      	str	r3, [sp, #12]
 80178ac:	d018      	beq.n	80178e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 80178ae:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80178b2:	fb0b f303 	mul.w	r3, fp, r3
 80178b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80178ba:	fb0b fb02 	mul.w	fp, fp, r2
 80178be:	0a1a      	lsrs	r2, r3, #8
 80178c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80178c4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80178c8:	441a      	add	r2, r3
 80178ca:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80178ce:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80178d2:	0a12      	lsrs	r2, r2, #8
 80178d4:	0a1b      	lsrs	r3, r3, #8
 80178d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80178da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80178de:	431a      	orrs	r2, r3
 80178e0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80178e4:	d019      	beq.n	801791a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 80178e6:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80178ea:	fb0a fb0b 	mul.w	fp, sl, fp
 80178ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80178f2:	fb0a fa06 	mul.w	sl, sl, r6
 80178f6:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80178fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80178fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017902:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8017906:	445e      	add	r6, fp
 8017908:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801790c:	0a36      	lsrs	r6, r6, #8
 801790e:	0a1b      	lsrs	r3, r3, #8
 8017910:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017918:	431e      	orrs	r6, r3
 801791a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801791e:	d019      	beq.n	8017954 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 8017920:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8017924:	fb09 fa0a 	mul.w	sl, r9, sl
 8017928:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801792c:	fb09 f904 	mul.w	r9, r9, r4
 8017930:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8017934:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017938:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801793c:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8017940:	4454      	add	r4, sl
 8017942:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8017946:	0a24      	lsrs	r4, r4, #8
 8017948:	0a1b      	lsrs	r3, r3, #8
 801794a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801794e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017952:	431c      	orrs	r4, r3
 8017954:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017958:	d019      	beq.n	801798e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 801795a:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801795e:	fb08 f909 	mul.w	r9, r8, r9
 8017962:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017966:	fb08 f800 	mul.w	r8, r8, r0
 801796a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801796e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017972:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8017976:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801797a:	4448      	add	r0, r9
 801797c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8017980:	0a00      	lsrs	r0, r0, #8
 8017982:	0a1b      	lsrs	r3, r3, #8
 8017984:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017988:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801798c:	4318      	orrs	r0, r3
 801798e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8017992:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8017996:	fb0c f808 	mul.w	r8, ip, r8
 801799a:	fb05 8803 	mla	r8, r5, r3, r8
 801799e:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80179a2:	fb07 8803 	mla	r8, r7, r3, r8
 80179a6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80179aa:	fb0e 8303 	mla	r3, lr, r3, r8
 80179ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80179b2:	fb0c f606 	mul.w	r6, ip, r6
 80179b6:	0a1b      	lsrs	r3, r3, #8
 80179b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80179bc:	fb05 6202 	mla	r2, r5, r2, r6
 80179c0:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80179c4:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80179c8:	fb07 2703 	mla	r7, r7, r3, r2
 80179cc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80179d0:	b295      	uxth	r5, r2
 80179d2:	9a03      	ldr	r2, [sp, #12]
 80179d4:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80179d8:	436a      	muls	r2, r5
 80179da:	fb0e 7303 	mla	r3, lr, r3, r7
 80179de:	1c50      	adds	r0, r2, #1
 80179e0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80179e4:	0a1b      	lsrs	r3, r3, #8
 80179e6:	9a00      	ldr	r2, [sp, #0]
 80179e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80179ec:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80179f0:	ea48 0303 	orr.w	r3, r8, r3
 80179f4:	b2c0      	uxtb	r0, r0
 80179f6:	fb12 f200 	smulbb	r2, r2, r0
 80179fa:	0c1e      	lsrs	r6, r3, #16
 80179fc:	fb06 2605 	mla	r6, r6, r5, r2
 8017a00:	9a01      	ldr	r2, [sp, #4]
 8017a02:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8017a06:	fb12 f200 	smulbb	r2, r2, r0
 8017a0a:	fb04 2205 	mla	r2, r4, r5, r2
 8017a0e:	b294      	uxth	r4, r2
 8017a10:	9a02      	ldr	r2, [sp, #8]
 8017a12:	b2db      	uxtb	r3, r3
 8017a14:	fb12 f200 	smulbb	r2, r2, r0
 8017a18:	fb03 2205 	mla	r2, r3, r5, r2
 8017a1c:	b2b6      	uxth	r6, r6
 8017a1e:	b292      	uxth	r2, r2
 8017a20:	1c73      	adds	r3, r6, #1
 8017a22:	1c50      	adds	r0, r2, #1
 8017a24:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8017a28:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017a2c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017a30:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8017a34:	4313      	orrs	r3, r2
 8017a36:	1c62      	adds	r2, r4, #1
 8017a38:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8017a3c:	0952      	lsrs	r2, r2, #5
 8017a3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017a42:	4313      	orrs	r3, r2
 8017a44:	800b      	strh	r3, [r1, #0]
 8017a46:	b005      	add	sp, #20
 8017a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4c:	08020997 	.word	0x08020997
 8017a50:	08020ef5 	.word	0x08020ef5
 8017a54:	08020a1f 	.word	0x08020a1f

08017a58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5c:	ed2d 8b08 	vpush	{d8-d11}
 8017a60:	b09b      	sub	sp, #108	; 0x6c
 8017a62:	eeb0 aa40 	vmov.f32	s20, s0
 8017a66:	9309      	str	r3, [sp, #36]	; 0x24
 8017a68:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8017a6c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8017a6e:	9311      	str	r3, [sp, #68]	; 0x44
 8017a70:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8017a74:	9114      	str	r1, [sp, #80]	; 0x50
 8017a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8017a78:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8017a7c:	9019      	str	r0, [sp, #100]	; 0x64
 8017a7e:	6868      	ldr	r0, [r5, #4]
 8017a80:	9218      	str	r2, [sp, #96]	; 0x60
 8017a82:	fb00 1303 	mla	r3, r0, r3, r1
 8017a86:	6829      	ldr	r1, [r5, #0]
 8017a88:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8017a8a:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8017a8e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017a92:	930c      	str	r3, [sp, #48]	; 0x30
 8017a94:	6813      	ldr	r3, [r2, #0]
 8017a96:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a98:	6853      	ldr	r3, [r2, #4]
 8017a9a:	3304      	adds	r3, #4
 8017a9c:	eef0 9a60 	vmov.f32	s19, s1
 8017aa0:	eeb0 9a41 	vmov.f32	s18, s2
 8017aa4:	eeb0 8a62 	vmov.f32	s16, s5
 8017aa8:	eef0 8a43 	vmov.f32	s17, s6
 8017aac:	eef0 ba44 	vmov.f32	s23, s8
 8017ab0:	eeb0 ba64 	vmov.f32	s22, s9
 8017ab4:	eef0 aa45 	vmov.f32	s21, s10
 8017ab8:	9308      	str	r3, [sp, #32]
 8017aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	dc03      	bgt.n	8017ac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8017ac0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	f340 8363 	ble.w	801818e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8017ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	f340 81ad 	ble.w	8017e2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 8017ad0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017ad2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017ad4:	1412      	asrs	r2, r2, #16
 8017ad6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017ada:	d42f      	bmi.n	8017b3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8017adc:	1c51      	adds	r1, r2, #1
 8017ade:	428c      	cmp	r4, r1
 8017ae0:	dd2f      	ble.n	8017b42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	db2d      	blt.n	8017b42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8017ae6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017ae8:	1c59      	adds	r1, r3, #1
 8017aea:	4288      	cmp	r0, r1
 8017aec:	dd29      	ble.n	8017b42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8017aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017af2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017af4:	3b01      	subs	r3, #1
 8017af6:	fb02 1203 	mla	r2, r2, r3, r1
 8017afa:	1412      	asrs	r2, r2, #16
 8017afc:	d42b      	bmi.n	8017b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017afe:	3201      	adds	r2, #1
 8017b00:	4294      	cmp	r4, r2
 8017b02:	dd28      	ble.n	8017b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017b04:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017b06:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8017b08:	fb02 1303 	mla	r3, r2, r3, r1
 8017b0c:	141b      	asrs	r3, r3, #16
 8017b0e:	d422      	bmi.n	8017b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017b10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b12:	3301      	adds	r3, #1
 8017b14:	429a      	cmp	r2, r3
 8017b16:	dd1e      	ble.n	8017b56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017b1e:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8017b22:	9312      	str	r3, [sp, #72]	; 0x48
 8017b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	f300 81ea 	bgt.w	8017f00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 8017b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017b38:	930c      	str	r3, [sp, #48]	; 0x30
 8017b3a:	e178      	b.n	8017e2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 8017b3c:	1c51      	adds	r1, r2, #1
 8017b3e:	f040 8165 	bne.w	8017e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8017b42:	42a2      	cmp	r2, r4
 8017b44:	f280 8162 	bge.w	8017e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8017b48:	1c5f      	adds	r7, r3, #1
 8017b4a:	f2c0 815f 	blt.w	8017e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8017b4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b50:	4293      	cmp	r3, r2
 8017b52:	f280 815b 	bge.w	8017e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8017b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b58:	9316      	str	r3, [sp, #88]	; 0x58
 8017b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b5c:	9312      	str	r3, [sp, #72]	; 0x48
 8017b5e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8017b62:	9315      	str	r3, [sp, #84]	; 0x54
 8017b64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	dde0      	ble.n	8017b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8017b6a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017b6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017b6e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8017b72:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017b74:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017b78:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017b7a:	1412      	asrs	r2, r2, #16
 8017b7c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8017b80:	f100 81a5 	bmi.w	8017ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 8017b84:	1c55      	adds	r5, r2, #1
 8017b86:	42ac      	cmp	r4, r5
 8017b88:	f340 81a3 	ble.w	8017ed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	f2c0 81a0 	blt.w	8017ed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8017b92:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8017b94:	1c5d      	adds	r5, r3, #1
 8017b96:	42af      	cmp	r7, r5
 8017b98:	f340 819b 	ble.w	8017ed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8017b9c:	fb03 2304 	mla	r3, r3, r4, r2
 8017ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ba2:	18d5      	adds	r5, r2, r3
 8017ba4:	5cd3      	ldrb	r3, [r2, r3]
 8017ba6:	9a08      	ldr	r2, [sp, #32]
 8017ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bac:	0e1f      	lsrs	r7, r3, #24
 8017bae:	2800      	cmp	r0, #0
 8017bb0:	f000 817c 	beq.w	8017eac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8017bb4:	786a      	ldrb	r2, [r5, #1]
 8017bb6:	9e08      	ldr	r6, [sp, #32]
 8017bb8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8017bbc:	920d      	str	r2, [sp, #52]	; 0x34
 8017bbe:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8017bc2:	2900      	cmp	r1, #0
 8017bc4:	f000 817d 	beq.w	8017ec2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 8017bc8:	192a      	adds	r2, r5, r4
 8017bca:	5d2d      	ldrb	r5, [r5, r4]
 8017bcc:	7852      	ldrb	r2, [r2, #1]
 8017bce:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8017bd2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8017bd6:	950a      	str	r5, [sp, #40]	; 0x28
 8017bd8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8017bdc:	920e      	str	r2, [sp, #56]	; 0x38
 8017bde:	0e15      	lsrs	r5, r2, #24
 8017be0:	b280      	uxth	r0, r0
 8017be2:	b289      	uxth	r1, r1
 8017be4:	fb00 fa01 	mul.w	sl, r0, r1
 8017be8:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8017bec:	0100      	lsls	r0, r0, #4
 8017bee:	eba0 080a 	sub.w	r8, r0, sl
 8017bf2:	b289      	uxth	r1, r1
 8017bf4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8017bf8:	fa1f f888 	uxth.w	r8, r8
 8017bfc:	1a52      	subs	r2, r2, r1
 8017bfe:	b292      	uxth	r2, r2
 8017c00:	fb08 f00e 	mul.w	r0, r8, lr
 8017c04:	fb02 0007 	mla	r0, r2, r7, r0
 8017c08:	fb01 0009 	mla	r0, r1, r9, r0
 8017c0c:	fb0a 0005 	mla	r0, sl, r5, r0
 8017c10:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017c14:	2800      	cmp	r0, #0
 8017c16:	f000 80ea 	beq.w	8017dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8017c1a:	2fff      	cmp	r7, #255	; 0xff
 8017c1c:	d01a      	beq.n	8017c54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 8017c1e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017c22:	fb07 fc0c 	mul.w	ip, r7, ip
 8017c26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017c2a:	435f      	muls	r7, r3
 8017c2c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8017c30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017c34:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017c38:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8017c3c:	4463      	add	r3, ip
 8017c3e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8017c42:	0a1b      	lsrs	r3, r3, #8
 8017c44:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017c48:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017c4c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017c50:	ea43 030b 	orr.w	r3, r3, fp
 8017c54:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017c58:	d01e      	beq.n	8017c98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8017c5a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017c5c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8017c60:	fb0e fb0b 	mul.w	fp, lr, fp
 8017c64:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8017c68:	fb0e fe07 	mul.w	lr, lr, r7
 8017c6c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017c70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017c74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017c78:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8017c7c:	44dc      	add	ip, fp
 8017c7e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8017c82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017c86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017c8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017c8e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017c92:	ea4c 060e 	orr.w	r6, ip, lr
 8017c96:	960d      	str	r6, [sp, #52]	; 0x34
 8017c98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017c9c:	d01e      	beq.n	8017cdc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8017c9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017ca0:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8017ca4:	fb09 fe0e 	mul.w	lr, r9, lr
 8017ca8:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8017cac:	fb09 f907 	mul.w	r9, r9, r7
 8017cb0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017cb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017cb8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017cbc:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8017cc0:	44f4      	add	ip, lr
 8017cc2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017cc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017cca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017cce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017cd2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017cd6:	ea4c 0609 	orr.w	r6, ip, r9
 8017cda:	960a      	str	r6, [sp, #40]	; 0x28
 8017cdc:	2dff      	cmp	r5, #255	; 0xff
 8017cde:	d01c      	beq.n	8017d1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8017ce0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017ce2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8017ce6:	fb05 fe0e 	mul.w	lr, r5, lr
 8017cea:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8017cee:	437d      	muls	r5, r7
 8017cf0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8017cf4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017cf8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8017cfc:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8017d00:	44f4      	add	ip, lr
 8017d02:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8017d06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d0a:	0a2d      	lsrs	r5, r5, #8
 8017d0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d10:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017d14:	ea4c 0505 	orr.w	r5, ip, r5
 8017d18:	950e      	str	r5, [sp, #56]	; 0x38
 8017d1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017d1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017d1e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017d22:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8017d26:	fb08 f505 	mul.w	r5, r8, r5
 8017d2a:	fb02 5507 	mla	r5, r2, r7, r5
 8017d2e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8017d32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017d34:	fb01 5507 	mla	r5, r1, r7, r5
 8017d38:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8017d3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017d3e:	fb0a 5507 	mla	r5, sl, r7, r5
 8017d42:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8017d46:	fb08 f807 	mul.w	r8, r8, r7
 8017d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017d4e:	fb02 8303 	mla	r3, r2, r3, r8
 8017d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d54:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8017d56:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8017d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d5c:	fb01 330c 	mla	r3, r1, ip, r3
 8017d60:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8017d64:	fb0a 3a01 	mla	sl, sl, r1, r3
 8017d68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017d6c:	881f      	ldrh	r7, [r3, #0]
 8017d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d70:	0a2d      	lsrs	r5, r5, #8
 8017d72:	4343      	muls	r3, r0
 8017d74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017d78:	1c58      	adds	r0, r3, #1
 8017d7a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017d7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017d82:	ea45 050a 	orr.w	r5, r5, sl
 8017d86:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017d8a:	0c29      	lsrs	r1, r5, #16
 8017d8c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017d90:	123b      	asrs	r3, r7, #8
 8017d92:	b2c0      	uxtb	r0, r0
 8017d94:	fb11 f102 	smulbb	r1, r1, r2
 8017d98:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017d9c:	fb03 1300 	mla	r3, r3, r0, r1
 8017da0:	b299      	uxth	r1, r3
 8017da2:	10fa      	asrs	r2, r7, #3
 8017da4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8017da8:	fb13 f306 	smulbb	r3, r3, r6
 8017dac:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017db0:	fb02 3200 	mla	r2, r2, r0, r3
 8017db4:	b2ed      	uxtb	r5, r5
 8017db6:	00fb      	lsls	r3, r7, #3
 8017db8:	b2db      	uxtb	r3, r3
 8017dba:	fb15 f506 	smulbb	r5, r5, r6
 8017dbe:	fb03 5500 	mla	r5, r3, r0, r5
 8017dc2:	b292      	uxth	r2, r2
 8017dc4:	b2ad      	uxth	r5, r5
 8017dc6:	1c4b      	adds	r3, r1, #1
 8017dc8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017dcc:	1c68      	adds	r0, r5, #1
 8017dce:	1c51      	adds	r1, r2, #1
 8017dd0:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8017dd4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8017dd8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8017ddc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017de0:	0952      	lsrs	r2, r2, #5
 8017de2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017de6:	432b      	orrs	r3, r5
 8017de8:	4313      	orrs	r3, r2
 8017dea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017dec:	8013      	strh	r3, [r2, #0]
 8017dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017df0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017df2:	3302      	adds	r3, #2
 8017df4:	9312      	str	r3, [sp, #72]	; 0x48
 8017df6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017df8:	4413      	add	r3, r2
 8017dfa:	932d      	str	r3, [sp, #180]	; 0xb4
 8017dfc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017dfe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017e00:	4413      	add	r3, r2
 8017e02:	932e      	str	r3, [sp, #184]	; 0xb8
 8017e04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017e06:	3b01      	subs	r3, #1
 8017e08:	9316      	str	r3, [sp, #88]	; 0x58
 8017e0a:	e6ab      	b.n	8017b64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8017e0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017e0e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017e10:	4413      	add	r3, r2
 8017e12:	932d      	str	r3, [sp, #180]	; 0xb4
 8017e14:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8017e16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017e18:	4413      	add	r3, r2
 8017e1a:	932e      	str	r3, [sp, #184]	; 0xb8
 8017e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e1e:	3b01      	subs	r3, #1
 8017e20:	9309      	str	r3, [sp, #36]	; 0x24
 8017e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e24:	3302      	adds	r3, #2
 8017e26:	930c      	str	r3, [sp, #48]	; 0x30
 8017e28:	e64e      	b.n	8017ac8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8017e2a:	f47f ae60 	bne.w	8017aee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8017e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	f340 81ac 	ble.w	801818e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8017e36:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e3e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017e42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e44:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017e48:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017e4c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017e50:	eef0 6a48 	vmov.f32	s13, s16
 8017e54:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017e58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e5c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017e60:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8017e64:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017e68:	eef0 6a68 	vmov.f32	s13, s17
 8017e6c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017e70:	ee18 2a10 	vmov	r2, s16
 8017e74:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017e78:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e7c:	ee18 2a90 	vmov	r2, s17
 8017e80:	932f      	str	r3, [sp, #188]	; 0xbc
 8017e82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e84:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e88:	9330      	str	r3, [sp, #192]	; 0xc0
 8017e8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017e8e:	3b01      	subs	r3, #1
 8017e90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e94:	9314      	str	r3, [sp, #80]	; 0x50
 8017e96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e98:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8017e9c:	bf08      	it	eq
 8017e9e:	4613      	moveq	r3, r2
 8017ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea2:	eef0 8a67 	vmov.f32	s17, s15
 8017ea6:	eeb0 8a47 	vmov.f32	s16, s14
 8017eaa:	e606      	b.n	8017aba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8017eac:	b161      	cbz	r1, 8017ec8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 8017eae:	5d2a      	ldrb	r2, [r5, r4]
 8017eb0:	9d08      	ldr	r5, [sp, #32]
 8017eb2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8017eb6:	920a      	str	r2, [sp, #40]	; 0x28
 8017eb8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8017ebc:	25ff      	movs	r5, #255	; 0xff
 8017ebe:	46ae      	mov	lr, r5
 8017ec0:	e68e      	b.n	8017be0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8017ec2:	25ff      	movs	r5, #255	; 0xff
 8017ec4:	46a9      	mov	r9, r5
 8017ec6:	e68b      	b.n	8017be0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8017ec8:	25ff      	movs	r5, #255	; 0xff
 8017eca:	46a9      	mov	r9, r5
 8017ecc:	e7f7      	b.n	8017ebe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8017ece:	1c56      	adds	r6, r2, #1
 8017ed0:	d18d      	bne.n	8017dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8017ed2:	4294      	cmp	r4, r2
 8017ed4:	dd8b      	ble.n	8017dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8017ed6:	1c5d      	adds	r5, r3, #1
 8017ed8:	db89      	blt.n	8017dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8017eda:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017edc:	429d      	cmp	r5, r3
 8017ede:	dd86      	ble.n	8017dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8017ee0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8017ee4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8017ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ee8:	9202      	str	r2, [sp, #8]
 8017eea:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8017eee:	e9cd 4300 	strd	r4, r3, [sp]
 8017ef2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8017ef6:	9b08      	ldr	r3, [sp, #32]
 8017ef8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8017efa:	f7ff fc49 	bl	8017790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8017efe:	e776      	b.n	8017dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8017f00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017f02:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017f04:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8017f08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017f0a:	1412      	asrs	r2, r2, #16
 8017f0c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8017f10:	141b      	asrs	r3, r3, #16
 8017f12:	fb04 2303 	mla	r3, r4, r3, r2
 8017f16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f18:	18d5      	adds	r5, r2, r3
 8017f1a:	5cd3      	ldrb	r3, [r2, r3]
 8017f1c:	9a08      	ldr	r2, [sp, #32]
 8017f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f22:	0e1e      	lsrs	r6, r3, #24
 8017f24:	2900      	cmp	r1, #0
 8017f26:	f000 8121 	beq.w	801816c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8017f2a:	786a      	ldrb	r2, [r5, #1]
 8017f2c:	9f08      	ldr	r7, [sp, #32]
 8017f2e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8017f32:	920f      	str	r2, [sp, #60]	; 0x3c
 8017f34:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	f000 8122 	beq.w	8018182 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 8017f3e:	192a      	adds	r2, r5, r4
 8017f40:	5d2d      	ldrb	r5, [r5, r4]
 8017f42:	7852      	ldrb	r2, [r2, #1]
 8017f44:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017f48:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8017f4c:	950b      	str	r5, [sp, #44]	; 0x2c
 8017f4e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8017f52:	9210      	str	r2, [sp, #64]	; 0x40
 8017f54:	0e15      	lsrs	r5, r2, #24
 8017f56:	b289      	uxth	r1, r1
 8017f58:	b280      	uxth	r0, r0
 8017f5a:	fb01 f900 	mul.w	r9, r1, r0
 8017f5e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017f62:	0109      	lsls	r1, r1, #4
 8017f64:	eba1 0e09 	sub.w	lr, r1, r9
 8017f68:	b280      	uxth	r0, r0
 8017f6a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8017f6e:	fa1f fe8e 	uxth.w	lr, lr
 8017f72:	1a12      	subs	r2, r2, r0
 8017f74:	b292      	uxth	r2, r2
 8017f76:	fb0e f10c 	mul.w	r1, lr, ip
 8017f7a:	fb02 1106 	mla	r1, r2, r6, r1
 8017f7e:	fb00 1108 	mla	r1, r0, r8, r1
 8017f82:	fb09 1105 	mla	r1, r9, r5, r1
 8017f86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017f8a:	2900      	cmp	r1, #0
 8017f8c:	f000 80e0 	beq.w	8018150 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 8017f90:	2eff      	cmp	r6, #255	; 0xff
 8017f92:	d016      	beq.n	8017fc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 8017f94:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8017f98:	4377      	muls	r7, r6
 8017f9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017f9e:	435e      	muls	r6, r3
 8017fa0:	0a3b      	lsrs	r3, r7, #8
 8017fa2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fa6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017faa:	443b      	add	r3, r7
 8017fac:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8017fb0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8017fb4:	0a1b      	lsrs	r3, r3, #8
 8017fb6:	0a3f      	lsrs	r7, r7, #8
 8017fb8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fbc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017fc0:	433b      	orrs	r3, r7
 8017fc2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017fc6:	d01d      	beq.n	8018004 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 8017fc8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8017fca:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8017fcc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017fd0:	fb0c f606 	mul.w	r6, ip, r6
 8017fd4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017fd8:	fb0c fc07 	mul.w	ip, ip, r7
 8017fdc:	0a37      	lsrs	r7, r6, #8
 8017fde:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017fe2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8017fe6:	4437      	add	r7, r6
 8017fe8:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8017fec:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8017ff0:	0a3f      	lsrs	r7, r7, #8
 8017ff2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ff6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017ffa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017ffe:	ea47 060c 	orr.w	r6, r7, ip
 8018002:	960f      	str	r6, [sp, #60]	; 0x3c
 8018004:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018008:	d01d      	beq.n	8018046 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 801800a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801800c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018010:	fb08 fc0c 	mul.w	ip, r8, ip
 8018014:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018018:	fb08 f806 	mul.w	r8, r8, r6
 801801c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8018020:	f508 7680 	add.w	r6, r8, #256	; 0x100
 8018024:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018028:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801802c:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 8018030:	4467      	add	r7, ip
 8018032:	0a3f      	lsrs	r7, r7, #8
 8018034:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018038:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801803c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018040:	ea47 0608 	orr.w	r6, r7, r8
 8018044:	960b      	str	r6, [sp, #44]	; 0x2c
 8018046:	2dff      	cmp	r5, #255	; 0xff
 8018048:	d01a      	beq.n	8018080 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801804a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801804c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018050:	fb05 fc0c 	mul.w	ip, r5, ip
 8018054:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018058:	4375      	muls	r5, r6
 801805a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801805e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018062:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018066:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801806a:	4467      	add	r7, ip
 801806c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8018070:	0a3f      	lsrs	r7, r7, #8
 8018072:	0a2d      	lsrs	r5, r5, #8
 8018074:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018078:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801807c:	433d      	orrs	r5, r7
 801807e:	9510      	str	r5, [sp, #64]	; 0x40
 8018080:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018082:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018086:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801808a:	fb0e f505 	mul.w	r5, lr, r5
 801808e:	fb02 5506 	mla	r5, r2, r6, r5
 8018092:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018094:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018098:	fb00 5506 	mla	r5, r0, r6, r5
 801809c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801809e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80180a2:	fb09 5506 	mla	r5, r9, r6, r5
 80180a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80180a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80180ac:	fb0e fe06 	mul.w	lr, lr, r6
 80180b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80180b4:	fb02 e303 	mla	r3, r2, r3, lr
 80180b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80180ba:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80180be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80180c0:	fb00 3307 	mla	r3, r0, r7, r3
 80180c4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80180c8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80180cc:	fb01 f10b 	mul.w	r1, r1, fp
 80180d0:	0a2d      	lsrs	r5, r5, #8
 80180d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80180d6:	f8ba 0000 	ldrh.w	r0, [sl]
 80180da:	1c4b      	adds	r3, r1, #1
 80180dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80180e0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80180e4:	ea45 050c 	orr.w	r5, r5, ip
 80180e8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80180ec:	1202      	asrs	r2, r0, #8
 80180ee:	0c2b      	lsrs	r3, r5, #16
 80180f0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80180f4:	b2c9      	uxtb	r1, r1
 80180f6:	fb13 f30b 	smulbb	r3, r3, fp
 80180fa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80180fe:	fb02 3201 	mla	r2, r2, r1, r3
 8018102:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8018106:	10c3      	asrs	r3, r0, #3
 8018108:	b2ed      	uxtb	r5, r5
 801810a:	00c0      	lsls	r0, r0, #3
 801810c:	b2c0      	uxtb	r0, r0
 801810e:	fb15 f50b 	smulbb	r5, r5, fp
 8018112:	fb00 5001 	mla	r0, r0, r1, r5
 8018116:	b292      	uxth	r2, r2
 8018118:	fb16 f60b 	smulbb	r6, r6, fp
 801811c:	b280      	uxth	r0, r0
 801811e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8018122:	fb03 6301 	mla	r3, r3, r1, r6
 8018126:	1c51      	adds	r1, r2, #1
 8018128:	1c46      	adds	r6, r0, #1
 801812a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801812e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8018132:	b29b      	uxth	r3, r3
 8018134:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8018138:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801813c:	4332      	orrs	r2, r6
 801813e:	1c5e      	adds	r6, r3, #1
 8018140:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018144:	095b      	lsrs	r3, r3, #5
 8018146:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801814a:	431a      	orrs	r2, r3
 801814c:	f8aa 2000 	strh.w	r2, [sl]
 8018150:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018152:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018154:	4413      	add	r3, r2
 8018156:	932d      	str	r3, [sp, #180]	; 0xb4
 8018158:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801815a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801815c:	4413      	add	r3, r2
 801815e:	932e      	str	r3, [sp, #184]	; 0xb8
 8018160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018162:	3b01      	subs	r3, #1
 8018164:	f10a 0a02 	add.w	sl, sl, #2
 8018168:	9312      	str	r3, [sp, #72]	; 0x48
 801816a:	e4db      	b.n	8017b24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801816c:	b160      	cbz	r0, 8018188 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801816e:	5d2a      	ldrb	r2, [r5, r4]
 8018170:	9d08      	ldr	r5, [sp, #32]
 8018172:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018176:	920b      	str	r2, [sp, #44]	; 0x2c
 8018178:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801817c:	25ff      	movs	r5, #255	; 0xff
 801817e:	46ac      	mov	ip, r5
 8018180:	e6e9      	b.n	8017f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 8018182:	25ff      	movs	r5, #255	; 0xff
 8018184:	46a8      	mov	r8, r5
 8018186:	e6e6      	b.n	8017f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 8018188:	25ff      	movs	r5, #255	; 0xff
 801818a:	46a8      	mov	r8, r5
 801818c:	e7f7      	b.n	801817e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 801818e:	b01b      	add	sp, #108	; 0x6c
 8018190:	ecbd 8b08 	vpop	{d8-d11}
 8018194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018198 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8018198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801819c:	8808      	ldrh	r0, [r1, #0]
 801819e:	b085      	sub	sp, #20
 80181a0:	1206      	asrs	r6, r0, #8
 80181a2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80181a6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80181aa:	9600      	str	r6, [sp, #0]
 80181ac:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80181b0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80181b4:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80181b8:	10c6      	asrs	r6, r0, #3
 80181ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80181be:	9601      	str	r6, [sp, #4]
 80181c0:	00c0      	lsls	r0, r0, #3
 80181c2:	fb04 560c 	mla	r6, r4, ip, r5
 80181c6:	b2c0      	uxtb	r0, r0
 80181c8:	4692      	mov	sl, r2
 80181ca:	eb02 0e06 	add.w	lr, r2, r6
 80181ce:	9a00      	ldr	r2, [sp, #0]
 80181d0:	9002      	str	r0, [sp, #8]
 80181d2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80181d6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80181da:	9a01      	ldr	r2, [sp, #4]
 80181dc:	2c00      	cmp	r4, #0
 80181de:	4698      	mov	r8, r3
 80181e0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80181e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80181e8:	db3e      	blt.n	8018268 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80181ea:	45a1      	cmp	r9, r4
 80181ec:	dd3c      	ble.n	8018268 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80181ee:	2d00      	cmp	r5, #0
 80181f0:	db38      	blt.n	8018264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80181f2:	45ac      	cmp	ip, r5
 80181f4:	dd36      	ble.n	8018264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80181f6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80181fa:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80181fe:	1c6e      	adds	r6, r5, #1
 8018200:	d435      	bmi.n	801826e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8018202:	45b4      	cmp	ip, r6
 8018204:	dd33      	ble.n	801826e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8018206:	b393      	cbz	r3, 801826e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8018208:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801820c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8018210:	3401      	adds	r4, #1
 8018212:	d430      	bmi.n	8018276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 8018214:	45a1      	cmp	r9, r4
 8018216:	dd2e      	ble.n	8018276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 8018218:	b36f      	cbz	r7, 8018276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801821a:	2d00      	cmp	r5, #0
 801821c:	db29      	blt.n	8018272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801821e:	45ac      	cmp	ip, r5
 8018220:	dd27      	ble.n	8018272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8018222:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8018226:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801822a:	3501      	adds	r5, #1
 801822c:	d407      	bmi.n	801823e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801822e:	45ac      	cmp	ip, r5
 8018230:	dd05      	ble.n	801823e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8018232:	b123      	cbz	r3, 801823e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8018234:	44f4      	add	ip, lr
 8018236:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801823a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801823e:	2b0f      	cmp	r3, #15
 8018240:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018244:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018248:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801824c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8018250:	d801      	bhi.n	8018256 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8018252:	2f0f      	cmp	r7, #15
 8018254:	d911      	bls.n	801827a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8018256:	4b79      	ldr	r3, [pc, #484]	; (801843c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 8018258:	4a79      	ldr	r2, [pc, #484]	; (8018440 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801825a:	487a      	ldr	r0, [pc, #488]	; (8018444 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801825c:	f240 3173 	movw	r1, #883	; 0x373
 8018260:	f004 ff28 	bl	801d0b4 <__assert_func>
 8018264:	4602      	mov	r2, r0
 8018266:	e7ca      	b.n	80181fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8018268:	4606      	mov	r6, r0
 801826a:	4602      	mov	r2, r0
 801826c:	e7d0      	b.n	8018210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801826e:	4606      	mov	r6, r0
 8018270:	e7ce      	b.n	8018210 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 8018272:	4604      	mov	r4, r0
 8018274:	e7d9      	b.n	801822a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 8018276:	4604      	mov	r4, r0
 8018278:	e7e1      	b.n	801823e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801827a:	b29b      	uxth	r3, r3
 801827c:	b2bf      	uxth	r7, r7
 801827e:	fb03 fe07 	mul.w	lr, r3, r7
 8018282:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018286:	011b      	lsls	r3, r3, #4
 8018288:	eba3 0c0e 	sub.w	ip, r3, lr
 801828c:	b2bf      	uxth	r7, r7
 801828e:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8018292:	fa1f fc8c 	uxth.w	ip, ip
 8018296:	1bed      	subs	r5, r5, r7
 8018298:	b2ad      	uxth	r5, r5
 801829a:	fb0c f30a 	mul.w	r3, ip, sl
 801829e:	fb05 330b 	mla	r3, r5, fp, r3
 80182a2:	fb07 3309 	mla	r3, r7, r9, r3
 80182a6:	fb0e 3308 	mla	r3, lr, r8, r3
 80182aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80182ae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80182b2:	9303      	str	r3, [sp, #12]
 80182b4:	d018      	beq.n	80182e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 80182b6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80182ba:	fb0b f303 	mul.w	r3, fp, r3
 80182be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80182c2:	fb0b fb02 	mul.w	fp, fp, r2
 80182c6:	0a1a      	lsrs	r2, r3, #8
 80182c8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80182cc:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80182d0:	441a      	add	r2, r3
 80182d2:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80182d6:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80182da:	0a12      	lsrs	r2, r2, #8
 80182dc:	0a1b      	lsrs	r3, r3, #8
 80182de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80182e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80182e6:	431a      	orrs	r2, r3
 80182e8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80182ec:	d019      	beq.n	8018322 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 80182ee:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80182f2:	fb0a fb0b 	mul.w	fp, sl, fp
 80182f6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80182fa:	fb0a fa06 	mul.w	sl, sl, r6
 80182fe:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8018302:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018306:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801830a:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801830e:	445e      	add	r6, fp
 8018310:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8018314:	0a36      	lsrs	r6, r6, #8
 8018316:	0a1b      	lsrs	r3, r3, #8
 8018318:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801831c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018320:	431e      	orrs	r6, r3
 8018322:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018326:	d019      	beq.n	801835c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8018328:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801832c:	fb09 fa0a 	mul.w	sl, r9, sl
 8018330:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018334:	fb09 f904 	mul.w	r9, r9, r4
 8018338:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801833c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018340:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018344:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8018348:	4454      	add	r4, sl
 801834a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801834e:	0a24      	lsrs	r4, r4, #8
 8018350:	0a1b      	lsrs	r3, r3, #8
 8018352:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801835a:	431c      	orrs	r4, r3
 801835c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018360:	d019      	beq.n	8018396 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 8018362:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8018366:	fb08 f909 	mul.w	r9, r8, r9
 801836a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801836e:	fb08 f800 	mul.w	r8, r8, r0
 8018372:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8018376:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801837a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801837e:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8018382:	4448      	add	r0, r9
 8018384:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8018388:	0a00      	lsrs	r0, r0, #8
 801838a:	0a1b      	lsrs	r3, r3, #8
 801838c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018394:	4318      	orrs	r0, r3
 8018396:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801839a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801839e:	fb0c f808 	mul.w	r8, ip, r8
 80183a2:	fb05 8803 	mla	r8, r5, r3, r8
 80183a6:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80183aa:	fb07 8803 	mla	r8, r7, r3, r8
 80183ae:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80183b2:	fb0e 8303 	mla	r3, lr, r3, r8
 80183b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80183ba:	0a1b      	lsrs	r3, r3, #8
 80183bc:	fb0c f606 	mul.w	r6, ip, r6
 80183c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80183c4:	fb05 6202 	mla	r2, r5, r2, r6
 80183c8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80183cc:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80183d0:	fb07 2703 	mla	r7, r7, r3, r2
 80183d4:	9a03      	ldr	r2, [sp, #12]
 80183d6:	9c02      	ldr	r4, [sp, #8]
 80183d8:	9d01      	ldr	r5, [sp, #4]
 80183da:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80183de:	fb0e 7303 	mla	r3, lr, r3, r7
 80183e2:	43d0      	mvns	r0, r2
 80183e4:	9a00      	ldr	r2, [sp, #0]
 80183e6:	b2c0      	uxtb	r0, r0
 80183e8:	0a1b      	lsrs	r3, r3, #8
 80183ea:	4342      	muls	r2, r0
 80183ec:	4344      	muls	r4, r0
 80183ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80183f2:	ea48 0303 	orr.w	r3, r8, r3
 80183f6:	4345      	muls	r5, r0
 80183f8:	4620      	mov	r0, r4
 80183fa:	1c54      	adds	r4, r2, #1
 80183fc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018400:	0c1a      	lsrs	r2, r3, #16
 8018402:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8018406:	4a10      	ldr	r2, [pc, #64]	; (8018448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8018408:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 801840c:	1c44      	adds	r4, r0, #1
 801840e:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8018412:	b2d8      	uxtb	r0, r3
 8018414:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8018418:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801841c:	1c68      	adds	r0, r5, #1
 801841e:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8018422:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018426:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801842a:	00db      	lsls	r3, r3, #3
 801842c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018430:	4313      	orrs	r3, r2
 8018432:	800b      	strh	r3, [r1, #0]
 8018434:	b005      	add	sp, #20
 8018436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801843a:	bf00      	nop
 801843c:	08020997 	.word	0x08020997
 8018440:	08020ef5 	.word	0x08020ef5
 8018444:	08020a1f 	.word	0x08020a1f
 8018448:	fffff800 	.word	0xfffff800

0801844c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018450:	ed2d 8b08 	vpush	{d8-d11}
 8018454:	b097      	sub	sp, #92	; 0x5c
 8018456:	eeb0 aa40 	vmov.f32	s20, s0
 801845a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801845c:	9307      	str	r3, [sp, #28]
 801845e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8018462:	9112      	str	r1, [sp, #72]	; 0x48
 8018464:	930f      	str	r3, [sp, #60]	; 0x3c
 8018466:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801846a:	9015      	str	r0, [sp, #84]	; 0x54
 801846c:	6868      	ldr	r0, [r5, #4]
 801846e:	9214      	str	r2, [sp, #80]	; 0x50
 8018470:	fb00 1303 	mla	r3, r0, r3, r1
 8018474:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018476:	6829      	ldr	r1, [r5, #0]
 8018478:	6855      	ldr	r5, [r2, #4]
 801847a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801847e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018482:	930a      	str	r3, [sp, #40]	; 0x28
 8018484:	6813      	ldr	r3, [r2, #0]
 8018486:	9311      	str	r3, [sp, #68]	; 0x44
 8018488:	eef0 9a60 	vmov.f32	s19, s1
 801848c:	eeb0 9a41 	vmov.f32	s18, s2
 8018490:	eeb0 8a62 	vmov.f32	s16, s5
 8018494:	eef0 8a43 	vmov.f32	s17, s6
 8018498:	eef0 ba44 	vmov.f32	s23, s8
 801849c:	eeb0 ba64 	vmov.f32	s22, s9
 80184a0:	eef0 aa45 	vmov.f32	s21, s10
 80184a4:	3504      	adds	r5, #4
 80184a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	dc03      	bgt.n	80184b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80184ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	f340 834d 	ble.w	8018b4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 80184b4:	9b07      	ldr	r3, [sp, #28]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	f340 819c 	ble.w	80187f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 80184bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80184be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80184c0:	1412      	asrs	r2, r2, #16
 80184c2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80184c6:	d42d      	bmi.n	8018524 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80184c8:	1c51      	adds	r1, r2, #1
 80184ca:	428c      	cmp	r4, r1
 80184cc:	dd2d      	ble.n	801852a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	db2b      	blt.n	801852a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80184d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80184d4:	1c59      	adds	r1, r3, #1
 80184d6:	4288      	cmp	r0, r1
 80184d8:	dd27      	ble.n	801852a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80184da:	9b07      	ldr	r3, [sp, #28]
 80184dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80184e0:	3b01      	subs	r3, #1
 80184e2:	fb02 1203 	mla	r2, r2, r3, r1
 80184e6:	1412      	asrs	r2, r2, #16
 80184e8:	d429      	bmi.n	801853e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80184ea:	3201      	adds	r2, #1
 80184ec:	4294      	cmp	r4, r2
 80184ee:	dd26      	ble.n	801853e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80184f0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80184f2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80184f4:	fb02 1303 	mla	r3, r2, r3, r1
 80184f8:	141b      	asrs	r3, r3, #16
 80184fa:	d420      	bmi.n	801853e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80184fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80184fe:	3301      	adds	r3, #1
 8018500:	429a      	cmp	r2, r3
 8018502:	dd1c      	ble.n	801853e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018504:	9b07      	ldr	r3, [sp, #28]
 8018506:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801850a:	9310      	str	r3, [sp, #64]	; 0x40
 801850c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801850e:	2b00      	cmp	r3, #0
 8018510:	f300 81da 	bgt.w	80188c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8018514:	9b07      	ldr	r3, [sp, #28]
 8018516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801851c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018520:	930a      	str	r3, [sp, #40]	; 0x28
 8018522:	e169      	b.n	80187f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8018524:	1c51      	adds	r1, r2, #1
 8018526:	f040 8156 	bne.w	80187d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801852a:	42a2      	cmp	r2, r4
 801852c:	f280 8153 	bge.w	80187d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8018530:	1c5a      	adds	r2, r3, #1
 8018532:	f2c0 8150 	blt.w	80187d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8018536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018538:	4293      	cmp	r3, r2
 801853a:	f280 814c 	bge.w	80187d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801853e:	9b07      	ldr	r3, [sp, #28]
 8018540:	9313      	str	r3, [sp, #76]	; 0x4c
 8018542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018544:	9310      	str	r3, [sp, #64]	; 0x40
 8018546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018548:	2b00      	cmp	r3, #0
 801854a:	dde3      	ble.n	8018514 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801854c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801854e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018550:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018554:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018556:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801855a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801855c:	1412      	asrs	r2, r2, #16
 801855e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018562:	f100 8198 	bmi.w	8018896 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 8018566:	1c56      	adds	r6, r2, #1
 8018568:	42b4      	cmp	r4, r6
 801856a:	f340 8196 	ble.w	801889a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801856e:	2b00      	cmp	r3, #0
 8018570:	f2c0 8193 	blt.w	801889a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8018574:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018576:	1c5e      	adds	r6, r3, #1
 8018578:	42b7      	cmp	r7, r6
 801857a:	f340 818e 	ble.w	801889a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801857e:	fb03 2304 	mla	r3, r3, r4, r2
 8018582:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018584:	18d6      	adds	r6, r2, r3
 8018586:	5cd3      	ldrb	r3, [r2, r3]
 8018588:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801858c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018590:	2900      	cmp	r1, #0
 8018592:	f000 8170 	beq.w	8018876 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8018596:	7872      	ldrb	r2, [r6, #1]
 8018598:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801859c:	920b      	str	r2, [sp, #44]	; 0x2c
 801859e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80185a2:	2800      	cmp	r0, #0
 80185a4:	f000 8171 	beq.w	801888a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 80185a8:	1932      	adds	r2, r6, r4
 80185aa:	5d36      	ldrb	r6, [r6, r4]
 80185ac:	7852      	ldrb	r2, [r2, #1]
 80185ae:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80185b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80185b6:	9608      	str	r6, [sp, #32]
 80185b8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80185bc:	920c      	str	r2, [sp, #48]	; 0x30
 80185be:	0e16      	lsrs	r6, r2, #24
 80185c0:	b289      	uxth	r1, r1
 80185c2:	b280      	uxth	r0, r0
 80185c4:	fb01 fb00 	mul.w	fp, r1, r0
 80185c8:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80185cc:	0109      	lsls	r1, r1, #4
 80185ce:	eba1 090b 	sub.w	r9, r1, fp
 80185d2:	b280      	uxth	r0, r0
 80185d4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80185d8:	fa1f f989 	uxth.w	r9, r9
 80185dc:	1a12      	subs	r2, r2, r0
 80185de:	b292      	uxth	r2, r2
 80185e0:	fb09 f108 	mul.w	r1, r9, r8
 80185e4:	fb02 110c 	mla	r1, r2, ip, r1
 80185e8:	fb00 110a 	mla	r1, r0, sl, r1
 80185ec:	fb0b 1106 	mla	r1, fp, r6, r1
 80185f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80185f4:	2900      	cmp	r1, #0
 80185f6:	f000 80df 	beq.w	80187b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80185fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80185fe:	d01b      	beq.n	8018638 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 8018600:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018604:	fb0c fe0e 	mul.w	lr, ip, lr
 8018608:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801860c:	fb0c fc03 	mul.w	ip, ip, r3
 8018610:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8018614:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018618:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801861c:	4473      	add	r3, lr
 801861e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8018622:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8018626:	0a1b      	lsrs	r3, r3, #8
 8018628:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801862c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018630:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018634:	ea43 030e 	orr.w	r3, r3, lr
 8018638:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801863c:	d01e      	beq.n	801867c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801863e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018640:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8018644:	fb08 fc0c 	mul.w	ip, r8, ip
 8018648:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801864c:	fb08 f80e 	mul.w	r8, r8, lr
 8018650:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018658:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801865c:	44e6      	add	lr, ip
 801865e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8018662:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8018666:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801866a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801866e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018672:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018676:	ea4e 0708 	orr.w	r7, lr, r8
 801867a:	970b      	str	r7, [sp, #44]	; 0x2c
 801867c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018680:	d01e      	beq.n	80186c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018682:	9f08      	ldr	r7, [sp, #32]
 8018684:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8018688:	fb0a f808 	mul.w	r8, sl, r8
 801868c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8018690:	fb0a fa0c 	mul.w	sl, sl, ip
 8018694:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8018698:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801869c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80186a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80186a4:	44c6      	add	lr, r8
 80186a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80186aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80186ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80186b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80186ba:	ea4e 070a 	orr.w	r7, lr, sl
 80186be:	9708      	str	r7, [sp, #32]
 80186c0:	2eff      	cmp	r6, #255	; 0xff
 80186c2:	d01d      	beq.n	8018700 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80186c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80186c6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80186ca:	fb06 f808 	mul.w	r8, r6, r8
 80186ce:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80186d2:	fb06 f60c 	mul.w	r6, r6, ip
 80186d6:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80186da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186de:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80186e2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80186e6:	44c6      	add	lr, r8
 80186e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80186ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80186f0:	0a36      	lsrs	r6, r6, #8
 80186f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80186f6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80186fa:	ea4e 0606 	orr.w	r6, lr, r6
 80186fe:	960c      	str	r6, [sp, #48]	; 0x30
 8018700:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018702:	9f08      	ldr	r7, [sp, #32]
 8018704:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018708:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801870c:	fb09 f606 	mul.w	r6, r9, r6
 8018710:	fb02 660c 	mla	r6, r2, ip, r6
 8018714:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8018718:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801871a:	fb00 660c 	mla	r6, r0, ip, r6
 801871e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8018722:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018724:	fb0b 660c 	mla	r6, fp, ip, r6
 8018728:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801872c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018730:	fb09 f90c 	mul.w	r9, r9, ip
 8018734:	fb02 9303 	mla	r3, r2, r3, r9
 8018738:	9a08      	ldr	r2, [sp, #32]
 801873a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801873e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018740:	fb00 330e 	mla	r3, r0, lr, r3
 8018744:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018748:	fb0b 3b00 	mla	fp, fp, r0, r3
 801874c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801874e:	881b      	ldrh	r3, [r3, #0]
 8018750:	43c9      	mvns	r1, r1
 8018752:	1218      	asrs	r0, r3, #8
 8018754:	b2c9      	uxtb	r1, r1
 8018756:	10da      	asrs	r2, r3, #3
 8018758:	0a36      	lsrs	r6, r6, #8
 801875a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801875e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018762:	00db      	lsls	r3, r3, #3
 8018764:	4348      	muls	r0, r1
 8018766:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801876a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801876e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018772:	b2db      	uxtb	r3, r3
 8018774:	434b      	muls	r3, r1
 8018776:	ea46 060b 	orr.w	r6, r6, fp
 801877a:	434a      	muls	r2, r1
 801877c:	1c41      	adds	r1, r0, #1
 801877e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8018782:	0c30      	lsrs	r0, r6, #16
 8018784:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8018788:	494e      	ldr	r1, [pc, #312]	; (80188c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 801878a:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801878e:	1c59      	adds	r1, r3, #1
 8018790:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018794:	b2f3      	uxtb	r3, r6
 8018796:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801879a:	1c51      	adds	r1, r2, #1
 801879c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80187a0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80187a4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80187a8:	00f6      	lsls	r6, r6, #3
 80187aa:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 80187ae:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80187b2:	431e      	orrs	r6, r3
 80187b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187b6:	801e      	strh	r6, [r3, #0]
 80187b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187ba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80187bc:	3302      	adds	r3, #2
 80187be:	9310      	str	r3, [sp, #64]	; 0x40
 80187c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80187c2:	4413      	add	r3, r2
 80187c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80187c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80187c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80187ca:	4413      	add	r3, r2
 80187cc:	932a      	str	r3, [sp, #168]	; 0xa8
 80187ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80187d0:	3b01      	subs	r3, #1
 80187d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80187d4:	e6b7      	b.n	8018546 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80187d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80187d8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80187da:	4413      	add	r3, r2
 80187dc:	9329      	str	r3, [sp, #164]	; 0xa4
 80187de:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80187e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80187e2:	4413      	add	r3, r2
 80187e4:	932a      	str	r3, [sp, #168]	; 0xa8
 80187e6:	9b07      	ldr	r3, [sp, #28]
 80187e8:	3b01      	subs	r3, #1
 80187ea:	9307      	str	r3, [sp, #28]
 80187ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187ee:	3302      	adds	r3, #2
 80187f0:	930a      	str	r3, [sp, #40]	; 0x28
 80187f2:	e65f      	b.n	80184b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80187f4:	f47f ae71 	bne.w	80184da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80187f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	f340 81a7 	ble.w	8018b4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8018800:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018808:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801880c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801880e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018812:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018816:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801881a:	eef0 6a48 	vmov.f32	s13, s16
 801881e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018822:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018826:	ee37 8a48 	vsub.f32	s16, s14, s16
 801882a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801882e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018832:	eef0 6a68 	vmov.f32	s13, s17
 8018836:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801883a:	ee18 2a10 	vmov	r2, s16
 801883e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018842:	fb92 f3f3 	sdiv	r3, r2, r3
 8018846:	ee18 2a90 	vmov	r2, s17
 801884a:	932b      	str	r3, [sp, #172]	; 0xac
 801884c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801884e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018852:	932c      	str	r3, [sp, #176]	; 0xb0
 8018854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018856:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018858:	3b01      	subs	r3, #1
 801885a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801885e:	9312      	str	r3, [sp, #72]	; 0x48
 8018860:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018862:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8018866:	bf08      	it	eq
 8018868:	4613      	moveq	r3, r2
 801886a:	9307      	str	r3, [sp, #28]
 801886c:	eef0 8a67 	vmov.f32	s17, s15
 8018870:	eeb0 8a47 	vmov.f32	s16, s14
 8018874:	e617      	b.n	80184a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8018876:	b158      	cbz	r0, 8018890 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 8018878:	5d32      	ldrb	r2, [r6, r4]
 801887a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801887e:	9208      	str	r2, [sp, #32]
 8018880:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8018884:	26ff      	movs	r6, #255	; 0xff
 8018886:	46b0      	mov	r8, r6
 8018888:	e69a      	b.n	80185c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801888a:	26ff      	movs	r6, #255	; 0xff
 801888c:	46b2      	mov	sl, r6
 801888e:	e697      	b.n	80185c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8018890:	26ff      	movs	r6, #255	; 0xff
 8018892:	46b2      	mov	sl, r6
 8018894:	e7f7      	b.n	8018886 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8018896:	1c57      	adds	r7, r2, #1
 8018898:	d18e      	bne.n	80187b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801889a:	4294      	cmp	r4, r2
 801889c:	dd8c      	ble.n	80187b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801889e:	1c5e      	adds	r6, r3, #1
 80188a0:	db8a      	blt.n	80187b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80188a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80188a4:	429e      	cmp	r6, r3
 80188a6:	dd87      	ble.n	80187b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80188a8:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80188ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80188b0:	e9cd 4600 	strd	r4, r6, [sp]
 80188b4:	462b      	mov	r3, r5
 80188b6:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 80188ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80188bc:	f7ff fc6c 	bl	8018198 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80188c0:	e77a      	b.n	80187b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 80188c2:	bf00      	nop
 80188c4:	fffff800 	.word	0xfffff800
 80188c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80188ca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80188cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80188d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80188d2:	1409      	asrs	r1, r1, #16
 80188d4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80188d8:	141b      	asrs	r3, r3, #16
 80188da:	fb04 1303 	mla	r3, r4, r3, r1
 80188de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80188e0:	18ce      	adds	r6, r1, r3
 80188e2:	5ccb      	ldrb	r3, [r1, r3]
 80188e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80188e8:	0e1f      	lsrs	r7, r3, #24
 80188ea:	2a00      	cmp	r2, #0
 80188ec:	f000 811f 	beq.w	8018b2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 80188f0:	7871      	ldrb	r1, [r6, #1]
 80188f2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80188f6:	910d      	str	r1, [sp, #52]	; 0x34
 80188f8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80188fc:	2800      	cmp	r0, #0
 80188fe:	f000 8120 	beq.w	8018b42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8018902:	1931      	adds	r1, r6, r4
 8018904:	5d36      	ldrb	r6, [r6, r4]
 8018906:	7849      	ldrb	r1, [r1, #1]
 8018908:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801890c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8018910:	9609      	str	r6, [sp, #36]	; 0x24
 8018912:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8018916:	910e      	str	r1, [sp, #56]	; 0x38
 8018918:	0e0e      	lsrs	r6, r1, #24
 801891a:	b292      	uxth	r2, r2
 801891c:	b280      	uxth	r0, r0
 801891e:	fb02 fa00 	mul.w	sl, r2, r0
 8018922:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8018926:	0112      	lsls	r2, r2, #4
 8018928:	eba2 080a 	sub.w	r8, r2, sl
 801892c:	b280      	uxth	r0, r0
 801892e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8018932:	fa1f f888 	uxth.w	r8, r8
 8018936:	1a09      	subs	r1, r1, r0
 8018938:	b289      	uxth	r1, r1
 801893a:	fb08 f20e 	mul.w	r2, r8, lr
 801893e:	fb01 2207 	mla	r2, r1, r7, r2
 8018942:	fb00 2209 	mla	r2, r0, r9, r2
 8018946:	fb0a 2206 	mla	r2, sl, r6, r2
 801894a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801894e:	9213      	str	r2, [sp, #76]	; 0x4c
 8018950:	2a00      	cmp	r2, #0
 8018952:	f000 80de 	beq.w	8018b12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 8018956:	2fff      	cmp	r7, #255	; 0xff
 8018958:	d01a      	beq.n	8018990 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 801895a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801895e:	fb07 fc0c 	mul.w	ip, r7, ip
 8018962:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018966:	435f      	muls	r7, r3
 8018968:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801896c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018970:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018974:	4463      	add	r3, ip
 8018976:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801897a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801897e:	0a1b      	lsrs	r3, r3, #8
 8018980:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018984:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018988:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801898c:	ea43 030c 	orr.w	r3, r3, ip
 8018990:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018994:	d01f      	beq.n	80189d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 8018996:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801899a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801899e:	fb0e f707 	mul.w	r7, lr, r7
 80189a2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80189a6:	fb0e fe0c 	mul.w	lr, lr, ip
 80189aa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80189ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80189b6:	44bc      	add	ip, r7
 80189b8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80189bc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80189c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80189c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80189c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189cc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80189d0:	ea4c 020e 	orr.w	r2, ip, lr
 80189d4:	920d      	str	r2, [sp, #52]	; 0x34
 80189d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80189da:	d01e      	beq.n	8018a1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 80189dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80189de:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80189e2:	fb09 fe0e 	mul.w	lr, r9, lr
 80189e6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80189ea:	fb09 f907 	mul.w	r9, r9, r7
 80189ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80189f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189f6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80189fa:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80189fe:	44f4      	add	ip, lr
 8018a00:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018a04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018a08:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018a0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018a10:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018a14:	ea4c 0209 	orr.w	r2, ip, r9
 8018a18:	9209      	str	r2, [sp, #36]	; 0x24
 8018a1a:	2eff      	cmp	r6, #255	; 0xff
 8018a1c:	d01c      	beq.n	8018a58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 8018a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a20:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8018a24:	fb06 fe0e 	mul.w	lr, r6, lr
 8018a28:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8018a2c:	437e      	muls	r6, r7
 8018a2e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8018a32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018a36:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8018a3a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8018a3e:	44f4      	add	ip, lr
 8018a40:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8018a44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018a48:	0a36      	lsrs	r6, r6, #8
 8018a4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018a4e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018a52:	ea4c 0206 	orr.w	r2, ip, r6
 8018a56:	920e      	str	r2, [sp, #56]	; 0x38
 8018a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a5a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8018a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a60:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8018a64:	fb08 f606 	mul.w	r6, r8, r6
 8018a68:	fb01 6607 	mla	r6, r1, r7, r6
 8018a6c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8018a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a72:	fb00 6607 	mla	r6, r0, r7, r6
 8018a76:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8018a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018a7c:	fb0a 6607 	mla	r6, sl, r7, r6
 8018a80:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8018a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a86:	fb08 f807 	mul.w	r8, r8, r7
 8018a8a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018a8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a94:	fb01 8303 	mla	r3, r1, r3, r8
 8018a98:	fb00 330c 	mla	r3, r0, ip, r3
 8018a9c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8018aa0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8018aa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018aa6:	f8bb 3000 	ldrh.w	r3, [fp]
 8018aaa:	43d2      	mvns	r2, r2
 8018aac:	1218      	asrs	r0, r3, #8
 8018aae:	b2d2      	uxtb	r2, r2
 8018ab0:	0a36      	lsrs	r6, r6, #8
 8018ab2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018ab6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018aba:	4350      	muls	r0, r2
 8018abc:	10d9      	asrs	r1, r3, #3
 8018abe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018ac2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018ac6:	00db      	lsls	r3, r3, #3
 8018ac8:	ea46 060e 	orr.w	r6, r6, lr
 8018acc:	1c47      	adds	r7, r0, #1
 8018ace:	b2db      	uxtb	r3, r3
 8018ad0:	4353      	muls	r3, r2
 8018ad2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8018ad6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8018ada:	0c37      	lsrs	r7, r6, #16
 8018adc:	4351      	muls	r1, r2
 8018ade:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8018ae2:	4a1d      	ldr	r2, [pc, #116]	; (8018b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 8018ae4:	1c5f      	adds	r7, r3, #1
 8018ae6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8018aea:	b2f7      	uxtb	r7, r6
 8018aec:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8018af0:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8018af4:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8018af8:	1c4b      	adds	r3, r1, #1
 8018afa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018afe:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018b02:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8018b06:	00f6      	lsls	r6, r6, #3
 8018b08:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018b0c:	4330      	orrs	r0, r6
 8018b0e:	f8ab 0000 	strh.w	r0, [fp]
 8018b12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018b14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018b16:	4413      	add	r3, r2
 8018b18:	9329      	str	r3, [sp, #164]	; 0xa4
 8018b1a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018b1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018b1e:	4413      	add	r3, r2
 8018b20:	932a      	str	r3, [sp, #168]	; 0xa8
 8018b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b24:	3b01      	subs	r3, #1
 8018b26:	f10b 0b02 	add.w	fp, fp, #2
 8018b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8018b2c:	e4ee      	b.n	801850c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8018b2e:	b158      	cbz	r0, 8018b48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 8018b30:	5d31      	ldrb	r1, [r6, r4]
 8018b32:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8018b36:	9109      	str	r1, [sp, #36]	; 0x24
 8018b38:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8018b3c:	26ff      	movs	r6, #255	; 0xff
 8018b3e:	46b6      	mov	lr, r6
 8018b40:	e6eb      	b.n	801891a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8018b42:	26ff      	movs	r6, #255	; 0xff
 8018b44:	46b1      	mov	r9, r6
 8018b46:	e6e8      	b.n	801891a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8018b48:	26ff      	movs	r6, #255	; 0xff
 8018b4a:	46b1      	mov	r9, r6
 8018b4c:	e7f7      	b.n	8018b3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 8018b4e:	b017      	add	sp, #92	; 0x5c
 8018b50:	ecbd 8b08 	vpop	{d8-d11}
 8018b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b58:	fffff800 	.word	0xfffff800

08018b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8018b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b60:	b087      	sub	sp, #28
 8018b62:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8018b66:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8018b6a:	9105      	str	r1, [sp, #20]
 8018b6c:	fb00 e604 	mla	r6, r0, r4, lr
 8018b70:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8018b74:	9102      	str	r1, [sp, #8]
 8018b76:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 8018b7a:	9103      	str	r1, [sp, #12]
 8018b7c:	9905      	ldr	r1, [sp, #20]
 8018b7e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8018b82:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018b86:	8809      	ldrh	r1, [r1, #0]
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	eb03 0a06 	add.w	sl, r3, r6
 8018b8e:	f2c0 80ca 	blt.w	8018d26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8018b92:	4287      	cmp	r7, r0
 8018b94:	f340 80c7 	ble.w	8018d26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8018b98:	f1be 0f00 	cmp.w	lr, #0
 8018b9c:	f2c0 80bf 	blt.w	8018d1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8018ba0:	4574      	cmp	r4, lr
 8018ba2:	f340 80bc 	ble.w	8018d1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8018ba6:	f813 c006 	ldrb.w	ip, [r3, r6]
 8018baa:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 8018bae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018bb2:	d01c      	beq.n	8018bee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 8018bb4:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8018bb8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8018bbc:	4372      	muls	r2, r6
 8018bbe:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8018bc2:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8018bc6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018bca:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8018bce:	fb0c f609 	mul.w	r6, ip, r9
 8018bd2:	eb03 0902 	add.w	r9, r3, r2
 8018bd6:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 8018bda:	f106 0820 	add.w	r8, r6, #32
 8018bde:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8018be2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018be6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8018bea:	ea49 0908 	orr.w	r9, r9, r8
 8018bee:	fa1f f989 	uxth.w	r9, r9
 8018bf2:	f11e 0301 	adds.w	r3, lr, #1
 8018bf6:	f100 809b 	bmi.w	8018d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8018bfa:	429c      	cmp	r4, r3
 8018bfc:	f340 8098 	ble.w	8018d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8018c00:	2d00      	cmp	r5, #0
 8018c02:	f000 8095 	beq.w	8018d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8018c06:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8018c0a:	9b03      	ldr	r3, [sp, #12]
 8018c0c:	2eff      	cmp	r6, #255	; 0xff
 8018c0e:	885b      	ldrh	r3, [r3, #2]
 8018c10:	d01b      	beq.n	8018c4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 8018c12:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8018c16:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8018c1a:	fb08 f202 	mul.w	r2, r8, r2
 8018c1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018c22:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8018c26:	fb06 f803 	mul.w	r8, r6, r3
 8018c2a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8018c2e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8018c32:	441a      	add	r2, r3
 8018c34:	f108 0320 	add.w	r3, r8, #32
 8018c38:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8018c3c:	0a1b      	lsrs	r3, r3, #8
 8018c3e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8018c42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018c46:	ea4b 0303 	orr.w	r3, fp, r3
 8018c4a:	b29b      	uxth	r3, r3
 8018c4c:	9301      	str	r3, [sp, #4]
 8018c4e:	3001      	adds	r0, #1
 8018c50:	d474      	bmi.n	8018d3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8018c52:	4287      	cmp	r7, r0
 8018c54:	dd72      	ble.n	8018d3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8018c56:	9a02      	ldr	r2, [sp, #8]
 8018c58:	2a00      	cmp	r2, #0
 8018c5a:	f000 8121 	beq.w	8018ea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 8018c5e:	f1be 0f00 	cmp.w	lr, #0
 8018c62:	db68      	blt.n	8018d36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8018c64:	4574      	cmp	r4, lr
 8018c66:	dd66      	ble.n	8018d36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8018c68:	f81a 7004 	ldrb.w	r7, [sl, r4]
 8018c6c:	9a03      	ldr	r2, [sp, #12]
 8018c6e:	2fff      	cmp	r7, #255	; 0xff
 8018c70:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8018c74:	d01c      	beq.n	8018cb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 8018c76:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8018c7a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8018c7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018c82:	fb07 fb00 	mul.w	fp, r7, r0
 8018c86:	fb08 f802 	mul.w	r8, r8, r2
 8018c8a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8018c8e:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8018c92:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8018c96:	4490      	add	r8, r2
 8018c98:	f10b 0220 	add.w	r2, fp, #32
 8018c9c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8018ca0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018ca4:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8018ca8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018cac:	ea40 000b 	orr.w	r0, r0, fp
 8018cb0:	b280      	uxth	r0, r0
 8018cb2:	f11e 0e01 	adds.w	lr, lr, #1
 8018cb6:	d446      	bmi.n	8018d46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8018cb8:	4574      	cmp	r4, lr
 8018cba:	dd44      	ble.n	8018d46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8018cbc:	2d00      	cmp	r5, #0
 8018cbe:	d045      	beq.n	8018d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 8018cc0:	1c62      	adds	r2, r4, #1
 8018cc2:	9b03      	ldr	r3, [sp, #12]
 8018cc4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8018cc8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8018ccc:	2cff      	cmp	r4, #255	; 0xff
 8018cce:	d01c      	beq.n	8018d0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 8018cd0:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8018cd4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8018cd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8018cdc:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8018ce0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018ce4:	fb04 f802 	mul.w	r8, r4, r2
 8018ce8:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 8018cec:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8018cf0:	4472      	add	r2, lr
 8018cf2:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8018cf6:	f108 0a20 	add.w	sl, r8, #32
 8018cfa:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 8018cfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018d02:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018d06:	ea42 020a 	orr.w	r2, r2, sl
 8018d0a:	b292      	uxth	r2, r2
 8018d0c:	2d0f      	cmp	r5, #15
 8018d0e:	d91f      	bls.n	8018d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 8018d10:	4b67      	ldr	r3, [pc, #412]	; (8018eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 8018d12:	4a68      	ldr	r2, [pc, #416]	; (8018eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 8018d14:	4868      	ldr	r0, [pc, #416]	; (8018eb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 8018d16:	f240 3173 	movw	r1, #883	; 0x373
 8018d1a:	f004 f9cb 	bl	801d0b4 <__assert_func>
 8018d1e:	4689      	mov	r9, r1
 8018d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018d24:	e765      	b.n	8018bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 8018d26:	26ff      	movs	r6, #255	; 0xff
 8018d28:	9101      	str	r1, [sp, #4]
 8018d2a:	4689      	mov	r9, r1
 8018d2c:	46b4      	mov	ip, r6
 8018d2e:	e78e      	b.n	8018c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8018d30:	9101      	str	r1, [sp, #4]
 8018d32:	26ff      	movs	r6, #255	; 0xff
 8018d34:	e78b      	b.n	8018c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 8018d36:	4608      	mov	r0, r1
 8018d38:	27ff      	movs	r7, #255	; 0xff
 8018d3a:	e7ba      	b.n	8018cb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 8018d3c:	24ff      	movs	r4, #255	; 0xff
 8018d3e:	460a      	mov	r2, r1
 8018d40:	4608      	mov	r0, r1
 8018d42:	4627      	mov	r7, r4
 8018d44:	e7e2      	b.n	8018d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8018d46:	460a      	mov	r2, r1
 8018d48:	24ff      	movs	r4, #255	; 0xff
 8018d4a:	e7df      	b.n	8018d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8018d4c:	460a      	mov	r2, r1
 8018d4e:	24ff      	movs	r4, #255	; 0xff
 8018d50:	9b02      	ldr	r3, [sp, #8]
 8018d52:	2b0f      	cmp	r3, #15
 8018d54:	d8dc      	bhi.n	8018d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8018d56:	f8bd e008 	ldrh.w	lr, [sp, #8]
 8018d5a:	fa1f f885 	uxth.w	r8, r5
 8018d5e:	fb08 fa0e 	mul.w	sl, r8, lr
 8018d62:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8018d66:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 8018d6a:	9303      	str	r3, [sp, #12]
 8018d6c:	fa1f f38e 	uxth.w	r3, lr
 8018d70:	9304      	str	r3, [sp, #16]
 8018d72:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8018d76:	9b02      	ldr	r3, [sp, #8]
 8018d78:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8018d7c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8018d80:	fb15 fe03 	smulbb	lr, r5, r3
 8018d84:	ea48 0809 	orr.w	r8, r8, r9
 8018d88:	f1c3 0910 	rsb	r9, r3, #16
 8018d8c:	9b01      	ldr	r3, [sp, #4]
 8018d8e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8018d92:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8018d96:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8018d9a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018d9e:	eba9 0905 	sub.w	r9, r9, r5
 8018da2:	ea4b 0303 	orr.w	r3, fp, r3
 8018da6:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 8018daa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8018dae:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8018db2:	436b      	muls	r3, r5
 8018db4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8018db8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018dbc:	ea4b 0202 	orr.w	r2, fp, r2
 8018dc0:	fb09 3308 	mla	r3, r9, r8, r3
 8018dc4:	fb0e 3302 	mla	r3, lr, r2, r3
 8018dc8:	0402      	lsls	r2, r0, #16
 8018dca:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8018dce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018dd2:	4310      	orrs	r0, r2
 8018dd4:	9a02      	ldr	r2, [sp, #8]
 8018dd6:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 8018dda:	fb0e 3e00 	mla	lr, lr, r0, r3
 8018dde:	9803      	ldr	r0, [sp, #12]
 8018de0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8018de4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8018de8:	9804      	ldr	r0, [sp, #16]
 8018dea:	1a2d      	subs	r5, r5, r0
 8018dec:	9803      	ldr	r0, [sp, #12]
 8018dee:	eba0 000a 	sub.w	r0, r0, sl
 8018df2:	b280      	uxth	r0, r0
 8018df4:	b2ad      	uxth	r5, r5
 8018df6:	4346      	muls	r6, r0
 8018df8:	9804      	ldr	r0, [sp, #16]
 8018dfa:	fb0c 6605 	mla	r6, ip, r5, r6
 8018dfe:	fb00 6707 	mla	r7, r0, r7, r6
 8018e02:	fb0a 7404 	mla	r4, sl, r4, r7
 8018e06:	b292      	uxth	r2, r2
 8018e08:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018e0c:	4354      	muls	r4, r2
 8018e0e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8018e12:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8018e16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018e1a:	f104 0a01 	add.w	sl, r4, #1
 8018e1e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8018e22:	ea43 0e0e 	orr.w	lr, r3, lr
 8018e26:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018e2a:	fa1f f38e 	uxth.w	r3, lr
 8018e2e:	1208      	asrs	r0, r1, #8
 8018e30:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 8018e34:	b2e4      	uxtb	r4, r4
 8018e36:	121d      	asrs	r5, r3, #8
 8018e38:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018e3c:	fb10 f004 	smulbb	r0, r0, r4
 8018e40:	10ce      	asrs	r6, r1, #3
 8018e42:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018e46:	00c9      	lsls	r1, r1, #3
 8018e48:	fb05 0502 	mla	r5, r5, r2, r0
 8018e4c:	b2c9      	uxtb	r1, r1
 8018e4e:	10d8      	asrs	r0, r3, #3
 8018e50:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018e54:	00db      	lsls	r3, r3, #3
 8018e56:	fb16 f604 	smulbb	r6, r6, r4
 8018e5a:	b2db      	uxtb	r3, r3
 8018e5c:	fb11 f404 	smulbb	r4, r1, r4
 8018e60:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018e64:	fb00 6002 	mla	r0, r0, r2, r6
 8018e68:	fb03 4202 	mla	r2, r3, r2, r4
 8018e6c:	b2ad      	uxth	r5, r5
 8018e6e:	b292      	uxth	r2, r2
 8018e70:	1c6b      	adds	r3, r5, #1
 8018e72:	1c51      	adds	r1, r2, #1
 8018e74:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8018e78:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018e7c:	b280      	uxth	r0, r0
 8018e7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018e82:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8018e86:	4313      	orrs	r3, r2
 8018e88:	1c42      	adds	r2, r0, #1
 8018e8a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018e8e:	0940      	lsrs	r0, r0, #5
 8018e90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018e94:	9a05      	ldr	r2, [sp, #20]
 8018e96:	4303      	orrs	r3, r0
 8018e98:	8013      	strh	r3, [r2, #0]
 8018e9a:	b007      	add	sp, #28
 8018e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ea0:	2d0f      	cmp	r5, #15
 8018ea2:	f63f af35 	bhi.w	8018d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8018ea6:	24ff      	movs	r4, #255	; 0xff
 8018ea8:	460a      	mov	r2, r1
 8018eaa:	4608      	mov	r0, r1
 8018eac:	4627      	mov	r7, r4
 8018eae:	e752      	b.n	8018d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 8018eb0:	08020997 	.word	0x08020997
 8018eb4:	08020ef5 	.word	0x08020ef5
 8018eb8:	08020a1f 	.word	0x08020a1f

08018ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec0:	ed2d 8b08 	vpush	{d8-d11}
 8018ec4:	b099      	sub	sp, #100	; 0x64
 8018ec6:	eeb0 aa40 	vmov.f32	s20, s0
 8018eca:	9308      	str	r3, [sp, #32]
 8018ecc:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8018ed0:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8018ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ed4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8018ed8:	9314      	str	r3, [sp, #80]	; 0x50
 8018eda:	9113      	str	r1, [sp, #76]	; 0x4c
 8018edc:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8018ee0:	9017      	str	r0, [sp, #92]	; 0x5c
 8018ee2:	6870      	ldr	r0, [r6, #4]
 8018ee4:	9216      	str	r2, [sp, #88]	; 0x58
 8018ee6:	fb00 1303 	mla	r3, r0, r3, r1
 8018eea:	6831      	ldr	r1, [r6, #0]
 8018eec:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8018eee:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 8018ef2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ef8:	6813      	ldr	r3, [r2, #0]
 8018efa:	930c      	str	r3, [sp, #48]	; 0x30
 8018efc:	6853      	ldr	r3, [r2, #4]
 8018efe:	930d      	str	r3, [sp, #52]	; 0x34
 8018f00:	006b      	lsls	r3, r5, #1
 8018f02:	9312      	str	r3, [sp, #72]	; 0x48
 8018f04:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018f08:	930a      	str	r3, [sp, #40]	; 0x28
 8018f0a:	eef0 9a60 	vmov.f32	s19, s1
 8018f0e:	eeb0 9a41 	vmov.f32	s18, s2
 8018f12:	eeb0 8a62 	vmov.f32	s16, s5
 8018f16:	eef0 8a43 	vmov.f32	s17, s6
 8018f1a:	eef0 ba44 	vmov.f32	s23, s8
 8018f1e:	eeb0 ba64 	vmov.f32	s22, s9
 8018f22:	eef0 aa45 	vmov.f32	s21, s10
 8018f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	dc03      	bgt.n	8018f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8018f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	f340 83bf 	ble.w	80196b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8018f34:	9b08      	ldr	r3, [sp, #32]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	f340 81cb 	ble.w	80192d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 8018f3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018f3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018f40:	1412      	asrs	r2, r2, #16
 8018f42:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018f46:	d42f      	bmi.n	8018fa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8018f48:	1c51      	adds	r1, r2, #1
 8018f4a:	428d      	cmp	r5, r1
 8018f4c:	dd2f      	ble.n	8018fae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	db2d      	blt.n	8018fae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018f52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018f54:	1c59      	adds	r1, r3, #1
 8018f56:	4288      	cmp	r0, r1
 8018f58:	dd29      	ble.n	8018fae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018f5a:	9b08      	ldr	r3, [sp, #32]
 8018f5c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018f5e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018f60:	3b01      	subs	r3, #1
 8018f62:	fb02 1203 	mla	r2, r2, r3, r1
 8018f66:	1412      	asrs	r2, r2, #16
 8018f68:	d42b      	bmi.n	8018fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8018f6a:	3201      	adds	r2, #1
 8018f6c:	4295      	cmp	r5, r2
 8018f6e:	dd28      	ble.n	8018fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8018f70:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8018f72:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018f74:	fb02 1303 	mla	r3, r2, r3, r1
 8018f78:	141b      	asrs	r3, r3, #16
 8018f7a:	d422      	bmi.n	8018fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8018f7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f7e:	3301      	adds	r3, #1
 8018f80:	429a      	cmp	r2, r3
 8018f82:	dd1e      	ble.n	8018fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8018f84:	9b08      	ldr	r3, [sp, #32]
 8018f86:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8018f8a:	9315      	str	r3, [sp, #84]	; 0x54
 8018f8c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8018f90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	f300 8217 	bgt.w	80193c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 8018f98:	9b08      	ldr	r3, [sp, #32]
 8018f9a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fa0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8018fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8018fa6:	e196      	b.n	80192d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 8018fa8:	1c57      	adds	r7, r2, #1
 8018faa:	f040 8183 	bne.w	80192b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018fae:	42aa      	cmp	r2, r5
 8018fb0:	f280 8180 	bge.w	80192b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018fb4:	1c5e      	adds	r6, r3, #1
 8018fb6:	f2c0 817d 	blt.w	80192b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018fbc:	4293      	cmp	r3, r2
 8018fbe:	f280 8179 	bge.w	80192b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8018fc2:	9b08      	ldr	r3, [sp, #32]
 8018fc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018fc6:	9315      	str	r3, [sp, #84]	; 0x54
 8018fc8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8018fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	dde2      	ble.n	8018f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8018fd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018fd4:	1419      	asrs	r1, r3, #16
 8018fd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018fd8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018fdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018fde:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8018fe2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018fe4:	141b      	asrs	r3, r3, #16
 8018fe6:	f100 81d3 	bmi.w	8019390 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8018fea:	1c58      	adds	r0, r3, #1
 8018fec:	4285      	cmp	r5, r0
 8018fee:	f340 81d1 	ble.w	8019394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8018ff2:	2900      	cmp	r1, #0
 8018ff4:	f2c0 81ce 	blt.w	8019394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8018ff8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018ffa:	1c48      	adds	r0, r1, #1
 8018ffc:	4284      	cmp	r4, r0
 8018ffe:	f340 81c9 	ble.w	8019394 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 8019002:	fb01 3105 	mla	r1, r1, r5, r3
 8019006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019008:	fa1f fe82 	uxth.w	lr, r2
 801900c:	eb03 0a01 	add.w	sl, r3, r1
 8019010:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8019014:	f813 9001 	ldrb.w	r9, [r3, r1]
 8019018:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801901c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8019020:	b29b      	uxth	r3, r3
 8019022:	f1bc 0f00 	cmp.w	ip, #0
 8019026:	f000 8195 	beq.w	8019354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 801902a:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801902e:	940e      	str	r4, [sp, #56]	; 0x38
 8019030:	eb0a 0b05 	add.w	fp, sl, r5
 8019034:	fa1f fa8c 	uxth.w	sl, ip
 8019038:	fb0a fe0e 	mul.w	lr, sl, lr
 801903c:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8019040:	fa1f fa8a 	uxth.w	sl, sl
 8019044:	eba0 000e 	sub.w	r0, r0, lr
 8019048:	eba3 030a 	sub.w	r3, r3, sl
 801904c:	b280      	uxth	r0, r0
 801904e:	fb08 f000 	mul.w	r0, r8, r0
 8019052:	b29b      	uxth	r3, r3
 8019054:	fb09 0303 	mla	r3, r9, r3, r0
 8019058:	980e      	ldr	r0, [sp, #56]	; 0x38
 801905a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801905e:	940f      	str	r4, [sp, #60]	; 0x3c
 8019060:	fb0a 3300 	mla	r3, sl, r0, r3
 8019064:	fb0e 3304 	mla	r3, lr, r4, r3
 8019068:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801906c:	2b00      	cmp	r3, #0
 801906e:	f000 8114 	beq.w	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019072:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019074:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019076:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801907a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801907e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8019082:	f000 816c 	beq.w	801935e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8019086:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801908a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801908e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019092:	fb09 f101 	mul.w	r1, r9, r1
 8019096:	fb0a fe0e 	mul.w	lr, sl, lr
 801909a:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801909e:	f101 0b20 	add.w	fp, r1, #32
 80190a2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80190a6:	44ce      	add	lr, r9
 80190a8:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 80190ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80190b0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80190b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80190b8:	ea4e 0909 	orr.w	r9, lr, r9
 80190bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80190c0:	8841      	ldrh	r1, [r0, #2]
 80190c2:	d019      	beq.n	80190f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80190c4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80190c8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80190cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80190d0:	fb0a fe0e 	mul.w	lr, sl, lr
 80190d4:	fb08 f801 	mul.w	r8, r8, r1
 80190d8:	f108 0b20 	add.w	fp, r8, #32
 80190dc:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 80190e0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80190e4:	448e      	add	lr, r1
 80190e6:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 80190ea:	0a09      	lsrs	r1, r1, #8
 80190ec:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 80190f0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80190f4:	ea4a 0101 	orr.w	r1, sl, r1
 80190f8:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80190fc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019100:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019104:	ea4e 0909 	orr.w	r9, lr, r9
 8019108:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801910c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019110:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019114:	ea4e 0e01 	orr.w	lr, lr, r1
 8019118:	f1bc 0f00 	cmp.w	ip, #0
 801911c:	f000 8121 	beq.w	8019362 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8019120:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019122:	eb00 0801 	add.w	r8, r0, r1
 8019126:	5a41      	ldrh	r1, [r0, r1]
 8019128:	980e      	ldr	r0, [sp, #56]	; 0x38
 801912a:	28ff      	cmp	r0, #255	; 0xff
 801912c:	d019      	beq.n	8019162 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801912e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019130:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8019134:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019138:	fb04 fb01 	mul.w	fp, r4, r1
 801913c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019140:	fb0a fa00 	mul.w	sl, sl, r0
 8019144:	f10b 0020 	add.w	r0, fp, #32
 8019148:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801914c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019150:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019154:	4451      	add	r1, sl
 8019156:	0a00      	lsrs	r0, r0, #8
 8019158:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801915c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019160:	4301      	orrs	r1, r0
 8019162:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019164:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8019168:	2cff      	cmp	r4, #255	; 0xff
 801916a:	d01a      	beq.n	80191a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 801916c:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8019170:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019174:	fb04 fb00 	mul.w	fp, r4, r0
 8019178:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801917c:	fb0a fa08 	mul.w	sl, sl, r8
 8019180:	f10b 0820 	add.w	r8, fp, #32
 8019184:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8019188:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801918c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019190:	4450      	add	r0, sl
 8019192:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019196:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801919a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801919e:	ea40 0008 	orr.w	r0, r0, r8
 80191a2:	fb1c f802 	smulbb	r8, ip, r2
 80191a6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80191aa:	f1cc 0a10 	rsb	sl, ip, #16
 80191ae:	ebaa 0a02 	sub.w	sl, sl, r2
 80191b2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80191b6:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 80191ba:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 80191be:	fb0e f202 	mul.w	r2, lr, r2
 80191c2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80191c6:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 80191ca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80191ce:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 80191d2:	fb09 220a 	mla	r2, r9, sl, r2
 80191d6:	ea4b 0101 	orr.w	r1, fp, r1
 80191da:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80191de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80191e2:	fb0c 2201 	mla	r2, ip, r1, r2
 80191e6:	ea4e 0000 	orr.w	r0, lr, r0
 80191ea:	fb08 2800 	mla	r8, r8, r0, r2
 80191ee:	ea4f 5258 	mov.w	r2, r8, lsr #21
 80191f2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80191f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80191fa:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80191fe:	ea42 0808 	orr.w	r8, r2, r8
 8019202:	fa1f f288 	uxth.w	r2, r8
 8019206:	2bff      	cmp	r3, #255	; 0xff
 8019208:	d103      	bne.n	8019212 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801920a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801920c:	29ff      	cmp	r1, #255	; 0xff
 801920e:	f000 80bd 	beq.w	801938c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 8019212:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019214:	f8b7 c000 	ldrh.w	ip, [r7]
 8019218:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801921a:	434b      	muls	r3, r1
 801921c:	f103 0e01 	add.w	lr, r3, #1
 8019220:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 8019224:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 8019228:	ea4f 202c 	mov.w	r0, ip, asr #8
 801922c:	fa5f fe8e 	uxtb.w	lr, lr
 8019230:	1213      	asrs	r3, r2, #8
 8019232:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019236:	fb10 f00e 	smulbb	r0, r0, lr
 801923a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801923e:	fb03 0301 	mla	r3, r3, r1, r0
 8019242:	b298      	uxth	r0, r3
 8019244:	ea4f 03ec 	mov.w	r3, ip, asr #3
 8019248:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801924c:	10d1      	asrs	r1, r2, #3
 801924e:	fa5f fc8c 	uxtb.w	ip, ip
 8019252:	00d2      	lsls	r2, r2, #3
 8019254:	fb1c fc0e 	smulbb	ip, ip, lr
 8019258:	b2d2      	uxtb	r2, r2
 801925a:	fb02 c204 	mla	r2, r2, r4, ip
 801925e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019262:	fb13 f30e 	smulbb	r3, r3, lr
 8019266:	b292      	uxth	r2, r2
 8019268:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801926c:	fb01 3104 	mla	r1, r1, r4, r3
 8019270:	f102 0c01 	add.w	ip, r2, #1
 8019274:	1c43      	adds	r3, r0, #1
 8019276:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801927a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801927e:	b289      	uxth	r1, r1
 8019280:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019284:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8019288:	4313      	orrs	r3, r2
 801928a:	1c4a      	adds	r2, r1, #1
 801928c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8019290:	0949      	lsrs	r1, r1, #5
 8019292:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019296:	430b      	orrs	r3, r1
 8019298:	803b      	strh	r3, [r7, #0]
 801929a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801929c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801929e:	4413      	add	r3, r2
 80192a0:	932b      	str	r3, [sp, #172]	; 0xac
 80192a2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80192a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80192a6:	441a      	add	r2, r3
 80192a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192aa:	922c      	str	r2, [sp, #176]	; 0xb0
 80192ac:	3b01      	subs	r3, #1
 80192ae:	3702      	adds	r7, #2
 80192b0:	9315      	str	r3, [sp, #84]	; 0x54
 80192b2:	e68b      	b.n	8018fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80192b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80192b6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80192b8:	4413      	add	r3, r2
 80192ba:	932b      	str	r3, [sp, #172]	; 0xac
 80192bc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80192be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80192c0:	441a      	add	r2, r3
 80192c2:	9b08      	ldr	r3, [sp, #32]
 80192c4:	922c      	str	r2, [sp, #176]	; 0xb0
 80192c6:	3b01      	subs	r3, #1
 80192c8:	9308      	str	r3, [sp, #32]
 80192ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192cc:	3302      	adds	r3, #2
 80192ce:	9309      	str	r3, [sp, #36]	; 0x24
 80192d0:	e630      	b.n	8018f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80192d2:	f47f ae42 	bne.w	8018f5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80192d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80192d8:	2b00      	cmp	r3, #0
 80192da:	f340 81ea 	ble.w	80196b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 80192de:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80192e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80192e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80192ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80192ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80192f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80192f4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80192f8:	eef0 6a48 	vmov.f32	s13, s16
 80192fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019300:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019304:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019308:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801930c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019310:	eef0 6a68 	vmov.f32	s13, s17
 8019314:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019318:	ee18 2a10 	vmov	r2, s16
 801931c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019320:	fb92 f3f3 	sdiv	r3, r2, r3
 8019324:	ee18 2a90 	vmov	r2, s17
 8019328:	932d      	str	r3, [sp, #180]	; 0xb4
 801932a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801932c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019330:	932e      	str	r3, [sp, #184]	; 0xb8
 8019332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019334:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019336:	3b01      	subs	r3, #1
 8019338:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801933c:	9313      	str	r3, [sp, #76]	; 0x4c
 801933e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019340:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8019344:	bf08      	it	eq
 8019346:	4613      	moveq	r3, r2
 8019348:	9308      	str	r3, [sp, #32]
 801934a:	eef0 8a67 	vmov.f32	s17, s15
 801934e:	eeb0 8a47 	vmov.f32	s16, s14
 8019352:	e5e8      	b.n	8018f26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019354:	fb08 f000 	mul.w	r0, r8, r0
 8019358:	fb09 0303 	mla	r3, r9, r3, r0
 801935c:	e684      	b.n	8019068 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 801935e:	4689      	mov	r9, r1
 8019360:	e6ac      	b.n	80190bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8019362:	f1c2 0010 	rsb	r0, r2, #16
 8019366:	fb0e f202 	mul.w	r2, lr, r2
 801936a:	fb09 2900 	mla	r9, r9, r0, r2
 801936e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019372:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8019376:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801937a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801937e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019382:	ea42 0909 	orr.w	r9, r2, r9
 8019386:	fa1f f289 	uxth.w	r2, r9
 801938a:	e73c      	b.n	8019206 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801938c:	803a      	strh	r2, [r7, #0]
 801938e:	e784      	b.n	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019390:	1c5c      	adds	r4, r3, #1
 8019392:	d182      	bne.n	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019394:	429d      	cmp	r5, r3
 8019396:	dd80      	ble.n	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019398:	1c48      	adds	r0, r1, #1
 801939a:	f6ff af7e 	blt.w	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801939e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80193a0:	4288      	cmp	r0, r1
 80193a2:	f77f af7a 	ble.w	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80193a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80193a8:	9302      	str	r3, [sp, #8]
 80193aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193ac:	e9cd 1203 	strd	r1, r2, [sp, #12]
 80193b0:	e9cd c005 	strd	ip, r0, [sp, #20]
 80193b4:	e9cd 5300 	strd	r5, r3, [sp]
 80193b8:	4639      	mov	r1, r7
 80193ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80193be:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80193c0:	f7ff fbcc 	bl	8018b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80193c4:	e769      	b.n	801929a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 80193c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80193c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80193cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80193ce:	141f      	asrs	r7, r3, #16
 80193d0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80193d4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80193d6:	141b      	asrs	r3, r3, #16
 80193d8:	fb05 3707 	mla	r7, r5, r7, r3
 80193dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193de:	fa1f fc82 	uxth.w	ip, r2
 80193e2:	eb03 0a07 	add.w	sl, r3, r7
 80193e6:	ea4f 110c 	mov.w	r1, ip, lsl #4
 80193ea:	f813 9007 	ldrb.w	r9, [r3, r7]
 80193ee:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80193f2:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	2800      	cmp	r0, #0
 80193fa:	f000 813f 	beq.w	801967c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 80193fe:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8019402:	9410      	str	r4, [sp, #64]	; 0x40
 8019404:	eb0a 0b05 	add.w	fp, sl, r5
 8019408:	fa1f fa80 	uxth.w	sl, r0
 801940c:	fb0a fc0c 	mul.w	ip, sl, ip
 8019410:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8019414:	fa1f fa8a 	uxth.w	sl, sl
 8019418:	eba1 010c 	sub.w	r1, r1, ip
 801941c:	eba3 030a 	sub.w	r3, r3, sl
 8019420:	b289      	uxth	r1, r1
 8019422:	fb08 f101 	mul.w	r1, r8, r1
 8019426:	b29b      	uxth	r3, r3
 8019428:	fb09 1303 	mla	r3, r9, r3, r1
 801942c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801942e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8019432:	9411      	str	r4, [sp, #68]	; 0x44
 8019434:	fb0a 3301 	mla	r3, sl, r1, r3
 8019438:	fb0c 3304 	mla	r3, ip, r4, r3
 801943c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019440:	2b00      	cmp	r3, #0
 8019442:	f000 810d 	beq.w	8019660 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8019446:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019448:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801944a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801944e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8019452:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8019456:	f000 8116 	beq.w	8019686 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 801945a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801945e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8019462:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019466:	fb09 f707 	mul.w	r7, r9, r7
 801946a:	fb0a fc0c 	mul.w	ip, sl, ip
 801946e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8019472:	f107 0b20 	add.w	fp, r7, #32
 8019476:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801947a:	44cc      	add	ip, r9
 801947c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8019480:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019484:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019488:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801948c:	ea4c 0909 	orr.w	r9, ip, r9
 8019490:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019494:	884f      	ldrh	r7, [r1, #2]
 8019496:	d019      	beq.n	80194cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 8019498:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801949c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80194a0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80194a4:	fb08 f807 	mul.w	r8, r8, r7
 80194a8:	fb0a fc0c 	mul.w	ip, sl, ip
 80194ac:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80194b0:	f108 0b20 	add.w	fp, r8, #32
 80194b4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80194b8:	44bc      	add	ip, r7
 80194ba:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80194be:	0a3f      	lsrs	r7, r7, #8
 80194c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80194c4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80194c8:	ea4c 0707 	orr.w	r7, ip, r7
 80194cc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80194d0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80194d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80194d8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80194dc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80194e0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80194e4:	ea4c 0909 	orr.w	r9, ip, r9
 80194e8:	ea4a 0707 	orr.w	r7, sl, r7
 80194ec:	2800      	cmp	r0, #0
 80194ee:	f000 80cc 	beq.w	801968a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 80194f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80194f4:	eb01 0c04 	add.w	ip, r1, r4
 80194f8:	f831 8004 	ldrh.w	r8, [r1, r4]
 80194fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80194fe:	29ff      	cmp	r1, #255	; 0xff
 8019500:	d01a      	beq.n	8019538 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 8019502:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019504:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8019508:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801950c:	fb04 fb08 	mul.w	fp, r4, r8
 8019510:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019514:	fb0a fa01 	mul.w	sl, sl, r1
 8019518:	f10b 0120 	add.w	r1, fp, #32
 801951c:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8019520:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8019524:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019528:	44d0      	add	r8, sl
 801952a:	0a09      	lsrs	r1, r1, #8
 801952c:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8019530:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019534:	ea48 0801 	orr.w	r8, r8, r1
 8019538:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801953a:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801953e:	2cff      	cmp	r4, #255	; 0xff
 8019540:	d01a      	beq.n	8019578 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8019542:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 8019546:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801954a:	fb04 fb01 	mul.w	fp, r4, r1
 801954e:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019552:	fb0a fa0c 	mul.w	sl, sl, ip
 8019556:	f10b 0c20 	add.w	ip, fp, #32
 801955a:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801955e:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8019562:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019566:	4451      	add	r1, sl
 8019568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801956c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8019570:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8019574:	ea41 010c 	orr.w	r1, r1, ip
 8019578:	fb10 fc02 	smulbb	ip, r0, r2
 801957c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8019580:	f1c0 0a10 	rsb	sl, r0, #16
 8019584:	ebaa 0a02 	sub.w	sl, sl, r2
 8019588:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801958c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8019590:	437a      	muls	r2, r7
 8019592:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 8019596:	040f      	lsls	r7, r1, #16
 8019598:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801959c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80195a0:	fb09 220a 	mla	r2, r9, sl, r2
 80195a4:	ea4b 0808 	orr.w	r8, fp, r8
 80195a8:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 80195ac:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80195b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80195b4:	fb00 2208 	mla	r2, r0, r8, r2
 80195b8:	4339      	orrs	r1, r7
 80195ba:	fb0c 2201 	mla	r2, ip, r1, r2
 80195be:	ea4f 5952 	mov.w	r9, r2, lsr #21
 80195c2:	0952      	lsrs	r2, r2, #5
 80195c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80195c8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80195cc:	ea49 0202 	orr.w	r2, r9, r2
 80195d0:	2bff      	cmp	r3, #255	; 0xff
 80195d2:	b292      	uxth	r2, r2
 80195d4:	d102      	bne.n	80195dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 80195d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80195d8:	29ff      	cmp	r1, #255	; 0xff
 80195da:	d067      	beq.n	80196ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 80195dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80195de:	f8be 0000 	ldrh.w	r0, [lr]
 80195e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80195e4:	434b      	muls	r3, r1
 80195e6:	1c59      	adds	r1, r3, #1
 80195e8:	eb01 2323 	add.w	r3, r1, r3, asr #8
 80195ec:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80195f0:	1201      	asrs	r1, r0, #8
 80195f2:	b2db      	uxtb	r3, r3
 80195f4:	1217      	asrs	r7, r2, #8
 80195f6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80195fa:	fb11 f103 	smulbb	r1, r1, r3
 80195fe:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 8019602:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019606:	00c0      	lsls	r0, r0, #3
 8019608:	fb07 1704 	mla	r7, r7, r4, r1
 801960c:	b2c0      	uxtb	r0, r0
 801960e:	10d1      	asrs	r1, r2, #3
 8019610:	00d2      	lsls	r2, r2, #3
 8019612:	fb10 f003 	smulbb	r0, r0, r3
 8019616:	b2d2      	uxtb	r2, r2
 8019618:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801961c:	fb02 0204 	mla	r2, r2, r4, r0
 8019620:	fb1c fc03 	smulbb	ip, ip, r3
 8019624:	b2bf      	uxth	r7, r7
 8019626:	b292      	uxth	r2, r2
 8019628:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801962c:	fb01 c104 	mla	r1, r1, r4, ip
 8019630:	1c7b      	adds	r3, r7, #1
 8019632:	f102 0c01 	add.w	ip, r2, #1
 8019636:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801963a:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801963e:	b289      	uxth	r1, r1
 8019640:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019644:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019648:	ea47 070c 	orr.w	r7, r7, ip
 801964c:	f101 0c01 	add.w	ip, r1, #1
 8019650:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8019654:	0949      	lsrs	r1, r1, #5
 8019656:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801965a:	430f      	orrs	r7, r1
 801965c:	f8ae 7000 	strh.w	r7, [lr]
 8019660:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019662:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019664:	4413      	add	r3, r2
 8019666:	932b      	str	r3, [sp, #172]	; 0xac
 8019668:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801966a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801966c:	441a      	add	r2, r3
 801966e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019670:	922c      	str	r2, [sp, #176]	; 0xb0
 8019672:	3b01      	subs	r3, #1
 8019674:	f10e 0e02 	add.w	lr, lr, #2
 8019678:	9315      	str	r3, [sp, #84]	; 0x54
 801967a:	e489      	b.n	8018f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801967c:	fb08 f101 	mul.w	r1, r8, r1
 8019680:	fb09 1303 	mla	r3, r9, r3, r1
 8019684:	e6da      	b.n	801943c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 8019686:	46b9      	mov	r9, r7
 8019688:	e702      	b.n	8019490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 801968a:	f1c2 0110 	rsb	r1, r2, #16
 801968e:	437a      	muls	r2, r7
 8019690:	fb09 2901 	mla	r9, r9, r1, r2
 8019694:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019698:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801969c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80196a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80196a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80196a8:	4302      	orrs	r2, r0
 80196aa:	e791      	b.n	80195d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 80196ac:	f8ae 2000 	strh.w	r2, [lr]
 80196b0:	e7d6      	b.n	8019660 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 80196b2:	b019      	add	sp, #100	; 0x64
 80196b4:	ecbd 8b08 	vpop	{d8-d11}
 80196b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80196bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c0:	b087      	sub	sp, #28
 80196c2:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 80196c6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 80196ca:	9105      	str	r1, [sp, #20]
 80196cc:	fb00 e604 	mla	r6, r0, r4, lr
 80196d0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 80196d4:	9102      	str	r1, [sp, #8]
 80196d6:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 80196da:	9103      	str	r1, [sp, #12]
 80196dc:	9905      	ldr	r1, [sp, #20]
 80196de:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 80196e2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80196e6:	8809      	ldrh	r1, [r1, #0]
 80196e8:	2800      	cmp	r0, #0
 80196ea:	eb02 0a06 	add.w	sl, r2, r6
 80196ee:	f2c0 80ca 	blt.w	8019886 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 80196f2:	4287      	cmp	r7, r0
 80196f4:	f340 80c7 	ble.w	8019886 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 80196f8:	f1be 0f00 	cmp.w	lr, #0
 80196fc:	f2c0 80bf 	blt.w	801987e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8019700:	4574      	cmp	r4, lr
 8019702:	f340 80bc 	ble.w	801987e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8019706:	f812 c006 	ldrb.w	ip, [r2, r6]
 801970a:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 801970e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019712:	d01c      	beq.n	801974e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 8019714:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8019718:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801971c:	4372      	muls	r2, r6
 801971e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8019722:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8019726:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801972a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801972e:	fb0c f609 	mul.w	r6, ip, r9
 8019732:	eb03 0902 	add.w	r9, r3, r2
 8019736:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801973a:	f106 0820 	add.w	r8, r6, #32
 801973e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019742:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019746:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801974a:	ea49 0908 	orr.w	r9, r9, r8
 801974e:	fa1f f989 	uxth.w	r9, r9
 8019752:	f11e 0301 	adds.w	r3, lr, #1
 8019756:	f100 809b 	bmi.w	8019890 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801975a:	429c      	cmp	r4, r3
 801975c:	f340 8098 	ble.w	8019890 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8019760:	2d00      	cmp	r5, #0
 8019762:	f000 8095 	beq.w	8019890 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8019766:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801976a:	9b03      	ldr	r3, [sp, #12]
 801976c:	2eff      	cmp	r6, #255	; 0xff
 801976e:	885b      	ldrh	r3, [r3, #2]
 8019770:	d01b      	beq.n	80197aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 8019772:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8019776:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801977a:	fb08 f202 	mul.w	r2, r8, r2
 801977e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019782:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019786:	fb06 f803 	mul.w	r8, r6, r3
 801978a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801978e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019792:	441a      	add	r2, r3
 8019794:	f108 0320 	add.w	r3, r8, #32
 8019798:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801979c:	0a1b      	lsrs	r3, r3, #8
 801979e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80197a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80197a6:	ea4b 0303 	orr.w	r3, fp, r3
 80197aa:	b29b      	uxth	r3, r3
 80197ac:	9301      	str	r3, [sp, #4]
 80197ae:	3001      	adds	r0, #1
 80197b0:	d474      	bmi.n	801989c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80197b2:	4287      	cmp	r7, r0
 80197b4:	dd72      	ble.n	801989c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80197b6:	9a02      	ldr	r2, [sp, #8]
 80197b8:	2a00      	cmp	r2, #0
 80197ba:	f000 8111 	beq.w	80199e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 80197be:	f1be 0f00 	cmp.w	lr, #0
 80197c2:	db68      	blt.n	8019896 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 80197c4:	4574      	cmp	r4, lr
 80197c6:	dd66      	ble.n	8019896 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 80197c8:	f81a 7004 	ldrb.w	r7, [sl, r4]
 80197cc:	9a03      	ldr	r2, [sp, #12]
 80197ce:	2fff      	cmp	r7, #255	; 0xff
 80197d0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80197d4:	d01c      	beq.n	8019810 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 80197d6:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 80197da:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80197de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80197e2:	fb07 fb00 	mul.w	fp, r7, r0
 80197e6:	fb08 f802 	mul.w	r8, r8, r2
 80197ea:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80197ee:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 80197f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80197f6:	4490      	add	r8, r2
 80197f8:	f10b 0220 	add.w	r2, fp, #32
 80197fc:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8019800:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019804:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8019808:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801980c:	ea40 000b 	orr.w	r0, r0, fp
 8019810:	b280      	uxth	r0, r0
 8019812:	f11e 0e01 	adds.w	lr, lr, #1
 8019816:	d446      	bmi.n	80198a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8019818:	4574      	cmp	r4, lr
 801981a:	dd44      	ble.n	80198a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801981c:	2d00      	cmp	r5, #0
 801981e:	d045      	beq.n	80198ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 8019820:	1c62      	adds	r2, r4, #1
 8019822:	9b03      	ldr	r3, [sp, #12]
 8019824:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8019828:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801982c:	2cff      	cmp	r4, #255	; 0xff
 801982e:	d01c      	beq.n	801986a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 8019830:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8019834:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019838:	fb08 fe0e 	mul.w	lr, r8, lr
 801983c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 8019840:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019844:	fb04 f802 	mul.w	r8, r4, r2
 8019848:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801984c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8019850:	4472      	add	r2, lr
 8019852:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 8019856:	f108 0a20 	add.w	sl, r8, #32
 801985a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801985e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019862:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019866:	ea42 020a 	orr.w	r2, r2, sl
 801986a:	b292      	uxth	r2, r2
 801986c:	2d0f      	cmp	r5, #15
 801986e:	d91f      	bls.n	80198b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 8019870:	4b5f      	ldr	r3, [pc, #380]	; (80199f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 8019872:	4a60      	ldr	r2, [pc, #384]	; (80199f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 8019874:	4860      	ldr	r0, [pc, #384]	; (80199f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 8019876:	f240 3173 	movw	r1, #883	; 0x373
 801987a:	f003 fc1b 	bl	801d0b4 <__assert_func>
 801987e:	4689      	mov	r9, r1
 8019880:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019884:	e765      	b.n	8019752 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 8019886:	26ff      	movs	r6, #255	; 0xff
 8019888:	9101      	str	r1, [sp, #4]
 801988a:	4689      	mov	r9, r1
 801988c:	46b4      	mov	ip, r6
 801988e:	e78e      	b.n	80197ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 8019890:	9101      	str	r1, [sp, #4]
 8019892:	26ff      	movs	r6, #255	; 0xff
 8019894:	e78b      	b.n	80197ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 8019896:	4608      	mov	r0, r1
 8019898:	27ff      	movs	r7, #255	; 0xff
 801989a:	e7ba      	b.n	8019812 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 801989c:	24ff      	movs	r4, #255	; 0xff
 801989e:	460a      	mov	r2, r1
 80198a0:	4608      	mov	r0, r1
 80198a2:	4627      	mov	r7, r4
 80198a4:	e7e2      	b.n	801986c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80198a6:	460a      	mov	r2, r1
 80198a8:	24ff      	movs	r4, #255	; 0xff
 80198aa:	e7df      	b.n	801986c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80198ac:	460a      	mov	r2, r1
 80198ae:	24ff      	movs	r4, #255	; 0xff
 80198b0:	9b02      	ldr	r3, [sp, #8]
 80198b2:	2b0f      	cmp	r3, #15
 80198b4:	d8dc      	bhi.n	8019870 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 80198b6:	f8bd e008 	ldrh.w	lr, [sp, #8]
 80198ba:	fa1f f885 	uxth.w	r8, r5
 80198be:	fb08 fa0e 	mul.w	sl, r8, lr
 80198c2:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80198c6:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 80198ca:	9303      	str	r3, [sp, #12]
 80198cc:	fa1f f38e 	uxth.w	r3, lr
 80198d0:	9304      	str	r3, [sp, #16]
 80198d2:	ea4f 4809 	mov.w	r8, r9, lsl #16
 80198d6:	9b02      	ldr	r3, [sp, #8]
 80198d8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80198dc:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 80198e0:	fb15 fe03 	smulbb	lr, r5, r3
 80198e4:	ea48 0809 	orr.w	r8, r8, r9
 80198e8:	f1c3 0910 	rsb	r9, r3, #16
 80198ec:	9b01      	ldr	r3, [sp, #4]
 80198ee:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80198f2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80198f6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80198fa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80198fe:	eba9 0905 	sub.w	r9, r9, r5
 8019902:	ea4b 0303 	orr.w	r3, fp, r3
 8019906:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801990a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801990e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8019912:	436b      	muls	r3, r5
 8019914:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019918:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801991c:	ea4b 0202 	orr.w	r2, fp, r2
 8019920:	fb09 3308 	mla	r3, r9, r8, r3
 8019924:	fb0e 3302 	mla	r3, lr, r2, r3
 8019928:	0402      	lsls	r2, r0, #16
 801992a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801992e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019932:	4310      	orrs	r0, r2
 8019934:	9a02      	ldr	r2, [sp, #8]
 8019936:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801993a:	9a03      	ldr	r2, [sp, #12]
 801993c:	fb0e 3e00 	mla	lr, lr, r0, r3
 8019940:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8019944:	9a04      	ldr	r2, [sp, #16]
 8019946:	1a80      	subs	r0, r0, r2
 8019948:	9a03      	ldr	r2, [sp, #12]
 801994a:	eba2 020a 	sub.w	r2, r2, sl
 801994e:	b292      	uxth	r2, r2
 8019950:	b280      	uxth	r0, r0
 8019952:	4356      	muls	r6, r2
 8019954:	9a04      	ldr	r2, [sp, #16]
 8019956:	fb0c 6600 	mla	r6, ip, r0, r6
 801995a:	fb02 6707 	mla	r7, r2, r7, r6
 801995e:	fb0a 7404 	mla	r4, sl, r4, r7
 8019962:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8019966:	1208      	asrs	r0, r1, #8
 8019968:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801996c:	ea6f 2424 	mvn.w	r4, r4, asr #8
 8019970:	b2e4      	uxtb	r4, r4
 8019972:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019976:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801997a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801997e:	4360      	muls	r0, r4
 8019980:	ea43 0e0e 	orr.w	lr, r3, lr
 8019984:	fa1f f38e 	uxth.w	r3, lr
 8019988:	1c42      	adds	r2, r0, #1
 801998a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801998e:	1218      	asrs	r0, r3, #8
 8019990:	10cd      	asrs	r5, r1, #3
 8019992:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019996:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801999a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801999e:	4a17      	ldr	r2, [pc, #92]	; (80199fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 80199a0:	4365      	muls	r5, r4
 80199a2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80199a6:	1c6a      	adds	r2, r5, #1
 80199a8:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80199ac:	00c9      	lsls	r1, r1, #3
 80199ae:	10da      	asrs	r2, r3, #3
 80199b0:	b2c9      	uxtb	r1, r1
 80199b2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80199b6:	434c      	muls	r4, r1
 80199b8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 80199bc:	1c61      	adds	r1, r4, #1
 80199be:	00d2      	lsls	r2, r2, #3
 80199c0:	00db      	lsls	r3, r3, #3
 80199c2:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 80199c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80199ca:	b2db      	uxtb	r3, r3
 80199cc:	4302      	orrs	r2, r0
 80199ce:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80199d2:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80199d6:	9a05      	ldr	r2, [sp, #20]
 80199d8:	8013      	strh	r3, [r2, #0]
 80199da:	b007      	add	sp, #28
 80199dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e0:	2d0f      	cmp	r5, #15
 80199e2:	f63f af45 	bhi.w	8019870 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 80199e6:	24ff      	movs	r4, #255	; 0xff
 80199e8:	460a      	mov	r2, r1
 80199ea:	4608      	mov	r0, r1
 80199ec:	4627      	mov	r7, r4
 80199ee:	e762      	b.n	80198b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 80199f0:	08020997 	.word	0x08020997
 80199f4:	08020ef5 	.word	0x08020ef5
 80199f8:	08020a1f 	.word	0x08020a1f
 80199fc:	fffff800 	.word	0xfffff800

08019a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a04:	ed2d 8b08 	vpush	{d8-d11}
 8019a08:	b095      	sub	sp, #84	; 0x54
 8019a0a:	eeb0 aa40 	vmov.f32	s20, s0
 8019a0e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8019a10:	9306      	str	r3, [sp, #24]
 8019a12:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8019a16:	9110      	str	r1, [sp, #64]	; 0x40
 8019a18:	9308      	str	r3, [sp, #32]
 8019a1a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8019a1e:	9013      	str	r0, [sp, #76]	; 0x4c
 8019a20:	6870      	ldr	r0, [r6, #4]
 8019a22:	9212      	str	r2, [sp, #72]	; 0x48
 8019a24:	fb00 1303 	mla	r3, r0, r3, r1
 8019a28:	6831      	ldr	r1, [r6, #0]
 8019a2a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8019a2c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8019a30:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8019a34:	9307      	str	r3, [sp, #28]
 8019a36:	6813      	ldr	r3, [r2, #0]
 8019a38:	9309      	str	r3, [sp, #36]	; 0x24
 8019a3a:	6853      	ldr	r3, [r2, #4]
 8019a3c:	930a      	str	r3, [sp, #40]	; 0x28
 8019a3e:	006b      	lsls	r3, r5, #1
 8019a40:	eef0 9a60 	vmov.f32	s19, s1
 8019a44:	eeb0 9a41 	vmov.f32	s18, s2
 8019a48:	eeb0 8a62 	vmov.f32	s16, s5
 8019a4c:	eef0 8a43 	vmov.f32	s17, s6
 8019a50:	eef0 ba44 	vmov.f32	s23, s8
 8019a54:	eeb0 ba64 	vmov.f32	s22, s9
 8019a58:	eef0 aa45 	vmov.f32	s21, s10
 8019a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	dc03      	bgt.n	8019a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8019a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	f340 83a3 	ble.w	801a1b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8019a6c:	9b06      	ldr	r3, [sp, #24]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	f340 81bc 	ble.w	8019dec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 8019a74:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8019a76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019a78:	1412      	asrs	r2, r2, #16
 8019a7a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019a7e:	d42f      	bmi.n	8019ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8019a80:	1c51      	adds	r1, r2, #1
 8019a82:	428d      	cmp	r5, r1
 8019a84:	dd2f      	ble.n	8019ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	db2d      	blt.n	8019ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8019a8a:	9808      	ldr	r0, [sp, #32]
 8019a8c:	1c59      	adds	r1, r3, #1
 8019a8e:	4288      	cmp	r0, r1
 8019a90:	dd29      	ble.n	8019ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8019a92:	9b06      	ldr	r3, [sp, #24]
 8019a94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019a96:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019a98:	3b01      	subs	r3, #1
 8019a9a:	fb02 1203 	mla	r2, r2, r3, r1
 8019a9e:	1412      	asrs	r2, r2, #16
 8019aa0:	d42b      	bmi.n	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8019aa2:	3201      	adds	r2, #1
 8019aa4:	4295      	cmp	r5, r2
 8019aa6:	dd28      	ble.n	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8019aa8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019aaa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019aac:	fb02 1303 	mla	r3, r2, r3, r1
 8019ab0:	141b      	asrs	r3, r3, #16
 8019ab2:	d422      	bmi.n	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8019ab4:	9a08      	ldr	r2, [sp, #32]
 8019ab6:	3301      	adds	r3, #1
 8019ab8:	429a      	cmp	r2, r3
 8019aba:	dd1e      	ble.n	8019afa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8019abc:	9b06      	ldr	r3, [sp, #24]
 8019abe:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8019ac2:	9311      	str	r3, [sp, #68]	; 0x44
 8019ac4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8019ac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	f300 8208 	bgt.w	8019ee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 8019ad0:	9b06      	ldr	r3, [sp, #24]
 8019ad2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019ad6:	9b07      	ldr	r3, [sp, #28]
 8019ad8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8019adc:	9307      	str	r3, [sp, #28]
 8019ade:	e187      	b.n	8019df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 8019ae0:	1c57      	adds	r7, r2, #1
 8019ae2:	f040 8174 	bne.w	8019dce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8019ae6:	42aa      	cmp	r2, r5
 8019ae8:	f280 8171 	bge.w	8019dce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8019aec:	1c5e      	adds	r6, r3, #1
 8019aee:	f2c0 816e 	blt.w	8019dce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8019af2:	9a08      	ldr	r2, [sp, #32]
 8019af4:	4293      	cmp	r3, r2
 8019af6:	f280 816a 	bge.w	8019dce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 8019afa:	9b06      	ldr	r3, [sp, #24]
 8019afc:	9f07      	ldr	r7, [sp, #28]
 8019afe:	9311      	str	r3, [sp, #68]	; 0x44
 8019b00:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8019b04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	dde2      	ble.n	8019ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8019b0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b0c:	1419      	asrs	r1, r3, #16
 8019b0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019b10:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019b14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b16:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8019b1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019b1c:	141b      	asrs	r3, r3, #16
 8019b1e:	f100 81c4 	bmi.w	8019eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 8019b22:	1c58      	adds	r0, r3, #1
 8019b24:	4285      	cmp	r5, r0
 8019b26:	f340 81c2 	ble.w	8019eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8019b2a:	2900      	cmp	r1, #0
 8019b2c:	f2c0 81bf 	blt.w	8019eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8019b30:	9c08      	ldr	r4, [sp, #32]
 8019b32:	1c48      	adds	r0, r1, #1
 8019b34:	4284      	cmp	r4, r0
 8019b36:	f340 81ba 	ble.w	8019eae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8019b3a:	fb01 3105 	mla	r1, r1, r5, r3
 8019b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b40:	fa1f fe82 	uxth.w	lr, r2
 8019b44:	eb03 0a01 	add.w	sl, r3, r1
 8019b48:	ea4f 100e 	mov.w	r0, lr, lsl #4
 8019b4c:	f813 9001 	ldrb.w	r9, [r3, r1]
 8019b50:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019b54:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8019b58:	b29b      	uxth	r3, r3
 8019b5a:	f1bc 0f00 	cmp.w	ip, #0
 8019b5e:	f000 8186 	beq.w	8019e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 8019b62:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8019b66:	940b      	str	r4, [sp, #44]	; 0x2c
 8019b68:	eb0a 0b05 	add.w	fp, sl, r5
 8019b6c:	fa1f fa8c 	uxth.w	sl, ip
 8019b70:	fb0a fe0e 	mul.w	lr, sl, lr
 8019b74:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8019b78:	fa1f fa8a 	uxth.w	sl, sl
 8019b7c:	eba0 000e 	sub.w	r0, r0, lr
 8019b80:	eba3 030a 	sub.w	r3, r3, sl
 8019b84:	b280      	uxth	r0, r0
 8019b86:	fb08 f000 	mul.w	r0, r8, r0
 8019b8a:	b29b      	uxth	r3, r3
 8019b8c:	fb09 0303 	mla	r3, r9, r3, r0
 8019b90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019b92:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8019b96:	940c      	str	r4, [sp, #48]	; 0x30
 8019b98:	fb0a 3300 	mla	r3, sl, r0, r3
 8019b9c:	fb0e 3304 	mla	r3, lr, r4, r3
 8019ba0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	f000 8105 	beq.w	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019baa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019bae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019bb2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019bb6:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8019bba:	f000 815d 	beq.w	8019e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 8019bbe:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8019bc2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8019bc6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019bca:	fb09 f101 	mul.w	r1, r9, r1
 8019bce:	fb0a fe0e 	mul.w	lr, sl, lr
 8019bd2:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8019bd6:	f101 0b20 	add.w	fp, r1, #32
 8019bda:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8019bde:	44ce      	add	lr, r9
 8019be0:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 8019be4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019be8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8019bec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019bf0:	ea4e 0909 	orr.w	r9, lr, r9
 8019bf4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019bf8:	8841      	ldrh	r1, [r0, #2]
 8019bfa:	d019      	beq.n	8019c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 8019bfc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8019c00:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8019c04:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019c08:	fb0a fe0e 	mul.w	lr, sl, lr
 8019c0c:	fb08 f801 	mul.w	r8, r8, r1
 8019c10:	f108 0b20 	add.w	fp, r8, #32
 8019c14:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 8019c18:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8019c1c:	448e      	add	lr, r1
 8019c1e:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 8019c22:	0a09      	lsrs	r1, r1, #8
 8019c24:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 8019c28:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019c2c:	ea4a 0101 	orr.w	r1, sl, r1
 8019c30:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8019c34:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019c38:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019c3c:	ea4e 0909 	orr.w	r9, lr, r9
 8019c40:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 8019c44:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019c48:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019c4c:	ea4e 0e01 	orr.w	lr, lr, r1
 8019c50:	f1bc 0f00 	cmp.w	ip, #0
 8019c54:	f000 8112 	beq.w	8019e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8019c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019c5a:	eb00 0801 	add.w	r8, r0, r1
 8019c5e:	5a41      	ldrh	r1, [r0, r1]
 8019c60:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019c62:	28ff      	cmp	r0, #255	; 0xff
 8019c64:	d019      	beq.n	8019c9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8019c66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019c68:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8019c6c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019c70:	fb04 fb01 	mul.w	fp, r4, r1
 8019c74:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019c78:	fb0a fa00 	mul.w	sl, sl, r0
 8019c7c:	f10b 0020 	add.w	r0, fp, #32
 8019c80:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8019c84:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019c88:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019c8c:	4451      	add	r1, sl
 8019c8e:	0a00      	lsrs	r0, r0, #8
 8019c90:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8019c94:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019c98:	4301      	orrs	r1, r0
 8019c9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019c9c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8019ca0:	2cff      	cmp	r4, #255	; 0xff
 8019ca2:	d01a      	beq.n	8019cda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8019ca4:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8019ca8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019cac:	fb04 fb00 	mul.w	fp, r4, r0
 8019cb0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019cb4:	fb0a fa08 	mul.w	sl, sl, r8
 8019cb8:	f10b 0820 	add.w	r8, fp, #32
 8019cbc:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8019cc0:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 8019cc4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019cc8:	4450      	add	r0, sl
 8019cca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019cce:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8019cd2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019cd6:	ea40 0008 	orr.w	r0, r0, r8
 8019cda:	fb1c f802 	smulbb	r8, ip, r2
 8019cde:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8019ce2:	f1cc 0a10 	rsb	sl, ip, #16
 8019ce6:	ebaa 0a02 	sub.w	sl, sl, r2
 8019cea:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8019cee:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 8019cf2:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8019cf6:	fb0e f202 	mul.w	r2, lr, r2
 8019cfa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019cfe:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 8019d02:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019d06:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8019d0a:	fb09 220a 	mla	r2, r9, sl, r2
 8019d0e:	ea4b 0101 	orr.w	r1, fp, r1
 8019d12:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019d16:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019d1a:	fb0c 2201 	mla	r2, ip, r1, r2
 8019d1e:	ea4e 0000 	orr.w	r0, lr, r0
 8019d22:	fb08 2800 	mla	r8, r8, r0, r2
 8019d26:	ea4f 5258 	mov.w	r2, r8, lsr #21
 8019d2a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019d2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019d32:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8019d36:	ea42 0808 	orr.w	r8, r2, r8
 8019d3a:	fa1f f288 	uxth.w	r2, r8
 8019d3e:	2bff      	cmp	r3, #255	; 0xff
 8019d40:	f000 80b1 	beq.w	8019ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 8019d44:	f8b7 8000 	ldrh.w	r8, [r7]
 8019d48:	43db      	mvns	r3, r3
 8019d4a:	ea4f 2028 	mov.w	r0, r8, asr #8
 8019d4e:	fa5f fe83 	uxtb.w	lr, r3
 8019d52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019d56:	fb00 f00e 	mul.w	r0, r0, lr
 8019d5a:	1c41      	adds	r1, r0, #1
 8019d5c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8019d60:	1210      	asrs	r0, r2, #8
 8019d62:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019d66:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019d6a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8019d6e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019d72:	495a      	ldr	r1, [pc, #360]	; (8019edc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 8019d74:	fb0c fc0e 	mul.w	ip, ip, lr
 8019d78:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8019d7c:	f10c 0101 	add.w	r1, ip, #1
 8019d80:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8019d84:	10d1      	asrs	r1, r2, #3
 8019d86:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019d8a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8019d8e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8019d92:	b2db      	uxtb	r3, r3
 8019d94:	00c9      	lsls	r1, r1, #3
 8019d96:	fb03 f30e 	mul.w	r3, r3, lr
 8019d9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019d9e:	4301      	orrs	r1, r0
 8019da0:	1c58      	adds	r0, r3, #1
 8019da2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019da6:	00d3      	lsls	r3, r2, #3
 8019da8:	b2db      	uxtb	r3, r3
 8019daa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019dae:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8019db2:	803b      	strh	r3, [r7, #0]
 8019db4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019db6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019db8:	4413      	add	r3, r2
 8019dba:	9327      	str	r3, [sp, #156]	; 0x9c
 8019dbc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019dbe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019dc0:	441a      	add	r2, r3
 8019dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019dc4:	9228      	str	r2, [sp, #160]	; 0xa0
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	3702      	adds	r7, #2
 8019dca:	9311      	str	r3, [sp, #68]	; 0x44
 8019dcc:	e69a      	b.n	8019b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8019dce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019dd0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019dd2:	4413      	add	r3, r2
 8019dd4:	9327      	str	r3, [sp, #156]	; 0x9c
 8019dd6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019dd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019dda:	441a      	add	r2, r3
 8019ddc:	9b06      	ldr	r3, [sp, #24]
 8019dde:	9228      	str	r2, [sp, #160]	; 0xa0
 8019de0:	3b01      	subs	r3, #1
 8019de2:	9306      	str	r3, [sp, #24]
 8019de4:	9b07      	ldr	r3, [sp, #28]
 8019de6:	3302      	adds	r3, #2
 8019de8:	9307      	str	r3, [sp, #28]
 8019dea:	e63f      	b.n	8019a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8019dec:	f47f ae51 	bne.w	8019a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	f340 81dd 	ble.w	801a1b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 8019df8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019e00:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019e04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019e06:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019e0a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019e0e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019e12:	eef0 6a48 	vmov.f32	s13, s16
 8019e16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019e1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e1e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019e22:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8019e26:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019e2a:	eef0 6a68 	vmov.f32	s13, s17
 8019e2e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019e32:	ee18 2a10 	vmov	r2, s16
 8019e36:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e3e:	ee18 2a90 	vmov	r2, s17
 8019e42:	9329      	str	r3, [sp, #164]	; 0xa4
 8019e44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e4a:	932a      	str	r3, [sp, #168]	; 0xa8
 8019e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e50:	3b01      	subs	r3, #1
 8019e52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019e56:	9310      	str	r3, [sp, #64]	; 0x40
 8019e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019e5a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8019e5e:	bf08      	it	eq
 8019e60:	4613      	moveq	r3, r2
 8019e62:	9306      	str	r3, [sp, #24]
 8019e64:	eef0 8a67 	vmov.f32	s17, s15
 8019e68:	eeb0 8a47 	vmov.f32	s16, s14
 8019e6c:	e5f7      	b.n	8019a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8019e6e:	fb08 f000 	mul.w	r0, r8, r0
 8019e72:	fb09 0303 	mla	r3, r9, r3, r0
 8019e76:	e693      	b.n	8019ba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 8019e78:	4689      	mov	r9, r1
 8019e7a:	e6bb      	b.n	8019bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 8019e7c:	f1c2 0010 	rsb	r0, r2, #16
 8019e80:	fb0e f202 	mul.w	r2, lr, r2
 8019e84:	fb09 2900 	mla	r9, r9, r0, r2
 8019e88:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019e8c:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8019e90:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019e94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019e98:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019e9c:	ea42 0909 	orr.w	r9, r2, r9
 8019ea0:	fa1f f289 	uxth.w	r2, r9
 8019ea4:	e74b      	b.n	8019d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8019ea6:	803a      	strh	r2, [r7, #0]
 8019ea8:	e784      	b.n	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019eaa:	1c5c      	adds	r4, r3, #1
 8019eac:	d182      	bne.n	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019eae:	429d      	cmp	r5, r3
 8019eb0:	dd80      	ble.n	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019eb2:	1c48      	adds	r0, r1, #1
 8019eb4:	f6ff af7e 	blt.w	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019eb8:	9808      	ldr	r0, [sp, #32]
 8019eba:	4288      	cmp	r0, r1
 8019ebc:	f77f af7a 	ble.w	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019ec0:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8019ec4:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8019ec8:	e9cd 5000 	strd	r5, r0, [sp]
 8019ecc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8019ed0:	4639      	mov	r1, r7
 8019ed2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019ed4:	f7ff fbf2 	bl	80196bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8019ed8:	e76c      	b.n	8019db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8019eda:	bf00      	nop
 8019edc:	fffff800 	.word	0xfffff800
 8019ee0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019ee2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019ee6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019ee8:	141f      	asrs	r7, r3, #16
 8019eea:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8019eee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019ef0:	141b      	asrs	r3, r3, #16
 8019ef2:	fb05 3707 	mla	r7, r5, r7, r3
 8019ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ef8:	fa1f fc82 	uxth.w	ip, r2
 8019efc:	eb03 0a07 	add.w	sl, r3, r7
 8019f00:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8019f04:	f813 9007 	ldrb.w	r9, [r3, r7]
 8019f08:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019f0c:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	2800      	cmp	r0, #0
 8019f14:	f000 8132 	beq.w	801a17c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 8019f18:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8019f1c:	940d      	str	r4, [sp, #52]	; 0x34
 8019f1e:	eb0a 0b05 	add.w	fp, sl, r5
 8019f22:	fa1f fa80 	uxth.w	sl, r0
 8019f26:	fb0a fc0c 	mul.w	ip, sl, ip
 8019f2a:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8019f2e:	fa1f fa8a 	uxth.w	sl, sl
 8019f32:	eba1 010c 	sub.w	r1, r1, ip
 8019f36:	eba3 030a 	sub.w	r3, r3, sl
 8019f3a:	b289      	uxth	r1, r1
 8019f3c:	fb08 f101 	mul.w	r1, r8, r1
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	fb09 1303 	mla	r3, r9, r3, r1
 8019f46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019f48:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8019f4c:	940e      	str	r4, [sp, #56]	; 0x38
 8019f4e:	fb0a 3301 	mla	r3, sl, r1, r3
 8019f52:	fb0c 3304 	mla	r3, ip, r4, r3
 8019f56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	f000 8100 	beq.w	801a160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 8019f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f62:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019f64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019f68:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8019f6c:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8019f70:	f000 8109 	beq.w	801a186 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 8019f74:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019f78:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8019f7c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019f80:	fb09 f707 	mul.w	r7, r9, r7
 8019f84:	fb0a fc0c 	mul.w	ip, sl, ip
 8019f88:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8019f8c:	f107 0b20 	add.w	fp, r7, #32
 8019f90:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019f94:	44cc      	add	ip, r9
 8019f96:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8019f9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019f9e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019fa2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019fa6:	ea4c 0909 	orr.w	r9, ip, r9
 8019faa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019fae:	884f      	ldrh	r7, [r1, #2]
 8019fb0:	d019      	beq.n	8019fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 8019fb2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019fb6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8019fba:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019fbe:	fb08 f807 	mul.w	r8, r8, r7
 8019fc2:	fb0a fc0c 	mul.w	ip, sl, ip
 8019fc6:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8019fca:	f108 0b20 	add.w	fp, r8, #32
 8019fce:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019fd2:	44bc      	add	ip, r7
 8019fd4:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8019fd8:	0a3f      	lsrs	r7, r7, #8
 8019fda:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019fde:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019fe2:	ea4c 0707 	orr.w	r7, ip, r7
 8019fe6:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8019fea:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8019fee:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8019ff2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019ff6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019ffa:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8019ffe:	ea4c 0909 	orr.w	r9, ip, r9
 801a002:	ea4a 0707 	orr.w	r7, sl, r7
 801a006:	2800      	cmp	r0, #0
 801a008:	f000 80bf 	beq.w	801a18a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 801a00c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a00e:	eb01 0c04 	add.w	ip, r1, r4
 801a012:	f831 8004 	ldrh.w	r8, [r1, r4]
 801a016:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a018:	29ff      	cmp	r1, #255	; 0xff
 801a01a:	d01a      	beq.n	801a052 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 801a01c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a01e:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801a022:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a026:	fb04 fb08 	mul.w	fp, r4, r8
 801a02a:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a02e:	fb0a fa01 	mul.w	sl, sl, r1
 801a032:	f10b 0120 	add.w	r1, fp, #32
 801a036:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801a03a:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801a03e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a042:	44d0      	add	r8, sl
 801a044:	0a09      	lsrs	r1, r1, #8
 801a046:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801a04a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a04e:	ea48 0801 	orr.w	r8, r8, r1
 801a052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a054:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801a058:	2cff      	cmp	r4, #255	; 0xff
 801a05a:	d01a      	beq.n	801a092 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 801a05c:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801a060:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a064:	fb04 fb01 	mul.w	fp, r4, r1
 801a068:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a06c:	fb0a fa0c 	mul.w	sl, sl, ip
 801a070:	f10b 0c20 	add.w	ip, fp, #32
 801a074:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801a078:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801a07c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a080:	4451      	add	r1, sl
 801a082:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a086:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801a08a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a08e:	ea41 010c 	orr.w	r1, r1, ip
 801a092:	fb10 fc02 	smulbb	ip, r0, r2
 801a096:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801a09a:	f1c0 0a10 	rsb	sl, r0, #16
 801a09e:	ebaa 0a02 	sub.w	sl, sl, r2
 801a0a2:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801a0a6:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801a0aa:	437a      	muls	r2, r7
 801a0ac:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801a0b0:	040f      	lsls	r7, r1, #16
 801a0b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a0b6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801a0ba:	fb09 220a 	mla	r2, r9, sl, r2
 801a0be:	ea4b 0808 	orr.w	r8, fp, r8
 801a0c2:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801a0c6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801a0ca:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a0ce:	fb00 2208 	mla	r2, r0, r8, r2
 801a0d2:	4339      	orrs	r1, r7
 801a0d4:	fb0c 2201 	mla	r2, ip, r1, r2
 801a0d8:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801a0dc:	0952      	lsrs	r2, r2, #5
 801a0de:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a0e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a0e6:	ea49 0202 	orr.w	r2, r9, r2
 801a0ea:	2bff      	cmp	r3, #255	; 0xff
 801a0ec:	b292      	uxth	r2, r2
 801a0ee:	d05d      	beq.n	801a1ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 801a0f0:	f8be 8000 	ldrh.w	r8, [lr]
 801a0f4:	4c31      	ldr	r4, [pc, #196]	; (801a1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 801a0f6:	43db      	mvns	r3, r3
 801a0f8:	ea4f 2028 	mov.w	r0, r8, asr #8
 801a0fc:	fa5f fc83 	uxtb.w	ip, r3
 801a100:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a104:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a108:	fb00 f00c 	mul.w	r0, r0, ip
 801a10c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a110:	fb07 f10c 	mul.w	r1, r7, ip
 801a114:	1c47      	adds	r7, r0, #1
 801a116:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801a11a:	1217      	asrs	r7, r2, #8
 801a11c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a120:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801a124:	1c4f      	adds	r7, r1, #1
 801a126:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801a12a:	10d1      	asrs	r1, r2, #3
 801a12c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a130:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a134:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801a138:	b2db      	uxtb	r3, r3
 801a13a:	00c9      	lsls	r1, r1, #3
 801a13c:	fb03 f30c 	mul.w	r3, r3, ip
 801a140:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a144:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801a148:	4308      	orrs	r0, r1
 801a14a:	00d2      	lsls	r2, r2, #3
 801a14c:	1c59      	adds	r1, r3, #1
 801a14e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a152:	b2d2      	uxtb	r2, r2
 801a154:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a158:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801a15c:	f8ae 0000 	strh.w	r0, [lr]
 801a160:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a162:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a164:	4413      	add	r3, r2
 801a166:	9327      	str	r3, [sp, #156]	; 0x9c
 801a168:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a16a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a16c:	441a      	add	r2, r3
 801a16e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a170:	9228      	str	r2, [sp, #160]	; 0xa0
 801a172:	3b01      	subs	r3, #1
 801a174:	f10e 0e02 	add.w	lr, lr, #2
 801a178:	9311      	str	r3, [sp, #68]	; 0x44
 801a17a:	e4a5      	b.n	8019ac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a17c:	fb08 f101 	mul.w	r1, r8, r1
 801a180:	fb09 1303 	mla	r3, r9, r3, r1
 801a184:	e6e7      	b.n	8019f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801a186:	46b9      	mov	r9, r7
 801a188:	e70f      	b.n	8019faa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 801a18a:	f1c2 0110 	rsb	r1, r2, #16
 801a18e:	437a      	muls	r2, r7
 801a190:	fb09 2901 	mla	r9, r9, r1, r2
 801a194:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a198:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801a19c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801a1a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a1a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a1a8:	4302      	orrs	r2, r0
 801a1aa:	e79e      	b.n	801a0ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801a1ac:	f8ae 2000 	strh.w	r2, [lr]
 801a1b0:	e7d6      	b.n	801a160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801a1b2:	b015      	add	sp, #84	; 0x54
 801a1b4:	ecbd 8b08 	vpop	{d8-d11}
 801a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1bc:	fffff800 	.word	0xfffff800

0801a1c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801a1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c4:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801a1c8:	fb0c 4e03 	mla	lr, ip, r3, r4
 801a1cc:	f1bc 0f00 	cmp.w	ip, #0
 801a1d0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801a1d4:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801a1d8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801a1dc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801a1e0:	8808      	ldrh	r0, [r1, #0]
 801a1e2:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801a1e6:	db2f      	blt.n	801a248 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801a1e8:	45e2      	cmp	sl, ip
 801a1ea:	dd2d      	ble.n	801a248 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801a1ec:	2c00      	cmp	r4, #0
 801a1ee:	db29      	blt.n	801a244 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801a1f0:	42a3      	cmp	r3, r4
 801a1f2:	dd27      	ble.n	801a244 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801a1f4:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801a1f8:	1c62      	adds	r2, r4, #1
 801a1fa:	d428      	bmi.n	801a24e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a1fc:	4293      	cmp	r3, r2
 801a1fe:	dd26      	ble.n	801a24e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a200:	b32f      	cbz	r7, 801a24e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a202:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801a206:	f11c 0c01 	adds.w	ip, ip, #1
 801a20a:	d424      	bmi.n	801a256 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801a20c:	45e2      	cmp	sl, ip
 801a20e:	dd22      	ble.n	801a256 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801a210:	2e00      	cmp	r6, #0
 801a212:	f000 809c 	beq.w	801a34e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 801a216:	2c00      	cmp	r4, #0
 801a218:	db1b      	blt.n	801a252 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801a21a:	42a3      	cmp	r3, r4
 801a21c:	dd19      	ble.n	801a252 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801a21e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801a222:	3401      	adds	r4, #1
 801a224:	d41a      	bmi.n	801a25c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801a226:	42a3      	cmp	r3, r4
 801a228:	dd18      	ble.n	801a25c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801a22a:	b1cf      	cbz	r7, 801a260 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801a22c:	3301      	adds	r3, #1
 801a22e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801a232:	2f0f      	cmp	r7, #15
 801a234:	d915      	bls.n	801a262 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801a236:	4b49      	ldr	r3, [pc, #292]	; (801a35c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801a238:	4a49      	ldr	r2, [pc, #292]	; (801a360 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801a23a:	484a      	ldr	r0, [pc, #296]	; (801a364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801a23c:	f240 3155 	movw	r1, #853	; 0x355
 801a240:	f002 ff38 	bl	801d0b4 <__assert_func>
 801a244:	4681      	mov	r9, r0
 801a246:	e7d7      	b.n	801a1f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801a248:	4686      	mov	lr, r0
 801a24a:	4681      	mov	r9, r0
 801a24c:	e7db      	b.n	801a206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801a24e:	4686      	mov	lr, r0
 801a250:	e7d9      	b.n	801a206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801a252:	4684      	mov	ip, r0
 801a254:	e7e5      	b.n	801a222 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801a256:	4603      	mov	r3, r0
 801a258:	4684      	mov	ip, r0
 801a25a:	e7ea      	b.n	801a232 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801a25c:	4603      	mov	r3, r0
 801a25e:	e7e8      	b.n	801a232 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801a260:	4603      	mov	r3, r0
 801a262:	2e0f      	cmp	r6, #15
 801a264:	d8e7      	bhi.n	801a236 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801a266:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801a26a:	fb17 f806 	smulbb	r8, r7, r6
 801a26e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801a272:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801a276:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a27a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801a27e:	ea44 0909 	orr.w	r9, r4, r9
 801a282:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a286:	f1c6 0410 	rsb	r4, r6, #16
 801a28a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a28e:	1be4      	subs	r4, r4, r7
 801a290:	041a      	lsls	r2, r3, #16
 801a292:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801a296:	ea4a 0e0e 	orr.w	lr, sl, lr
 801a29a:	fb07 fe0e 	mul.w	lr, r7, lr
 801a29e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a2a2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801a2a6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a2aa:	fb04 e409 	mla	r4, r4, r9, lr
 801a2ae:	4313      	orrs	r3, r2
 801a2b0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801a2b4:	fb08 4303 	mla	r3, r8, r3, r4
 801a2b8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a2bc:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801a2c0:	4322      	orrs	r2, r4
 801a2c2:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801a2c6:	fb06 3202 	mla	r2, r6, r2, r3
 801a2ca:	0d53      	lsrs	r3, r2, #21
 801a2cc:	0952      	lsrs	r2, r2, #5
 801a2ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a2d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a2d6:	431a      	orrs	r2, r3
 801a2d8:	b293      	uxth	r3, r2
 801a2da:	b2af      	uxth	r7, r5
 801a2dc:	1202      	asrs	r2, r0, #8
 801a2de:	43ed      	mvns	r5, r5
 801a2e0:	b2ed      	uxtb	r5, r5
 801a2e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a2e6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801a2ea:	fb12 f205 	smulbb	r2, r2, r5
 801a2ee:	10c6      	asrs	r6, r0, #3
 801a2f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a2f4:	fb0c 2c07 	mla	ip, ip, r7, r2
 801a2f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a2fc:	10da      	asrs	r2, r3, #3
 801a2fe:	fb16 f605 	smulbb	r6, r6, r5
 801a302:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a306:	fb02 6207 	mla	r2, r2, r7, r6
 801a30a:	b296      	uxth	r6, r2
 801a30c:	00c2      	lsls	r2, r0, #3
 801a30e:	00dc      	lsls	r4, r3, #3
 801a310:	b2d2      	uxtb	r2, r2
 801a312:	b2e4      	uxtb	r4, r4
 801a314:	fb12 f205 	smulbb	r2, r2, r5
 801a318:	fb04 2207 	mla	r2, r4, r7, r2
 801a31c:	fa1f fc8c 	uxth.w	ip, ip
 801a320:	b292      	uxth	r2, r2
 801a322:	f10c 0301 	add.w	r3, ip, #1
 801a326:	1c50      	adds	r0, r2, #1
 801a328:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801a32c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a330:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a334:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801a338:	4313      	orrs	r3, r2
 801a33a:	1c72      	adds	r2, r6, #1
 801a33c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801a340:	0952      	lsrs	r2, r2, #5
 801a342:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a346:	4313      	orrs	r3, r2
 801a348:	800b      	strh	r3, [r1, #0]
 801a34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a34e:	2f0f      	cmp	r7, #15
 801a350:	f63f af71 	bhi.w	801a236 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801a354:	4603      	mov	r3, r0
 801a356:	4684      	mov	ip, r0
 801a358:	e785      	b.n	801a266 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801a35a:	bf00      	nop
 801a35c:	08020997 	.word	0x08020997
 801a360:	08020f9e 	.word	0x08020f9e
 801a364:	08020a1f 	.word	0x08020a1f

0801a368 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a36c:	ed2d 8b08 	vpush	{d8-d11}
 801a370:	b095      	sub	sp, #84	; 0x54
 801a372:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801a376:	9306      	str	r3, [sp, #24]
 801a378:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801a37c:	9212      	str	r2, [sp, #72]	; 0x48
 801a37e:	9307      	str	r3, [sp, #28]
 801a380:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a382:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a386:	930c      	str	r3, [sp, #48]	; 0x30
 801a388:	910b      	str	r1, [sp, #44]	; 0x2c
 801a38a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801a38e:	9013      	str	r0, [sp, #76]	; 0x4c
 801a390:	6850      	ldr	r0, [r2, #4]
 801a392:	6812      	ldr	r2, [r2, #0]
 801a394:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 801a398:	fb00 1303 	mla	r3, r0, r3, r1
 801a39c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801a3a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	9309      	str	r3, [sp, #36]	; 0x24
 801a3a6:	007b      	lsls	r3, r7, #1
 801a3a8:	930a      	str	r3, [sp, #40]	; 0x28
 801a3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3ac:	43db      	mvns	r3, r3
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	eeb0 aa40 	vmov.f32	s20, s0
 801a3b4:	eef0 9a60 	vmov.f32	s19, s1
 801a3b8:	eeb0 9a41 	vmov.f32	s18, s2
 801a3bc:	eeb0 8a62 	vmov.f32	s16, s5
 801a3c0:	eef0 8a43 	vmov.f32	s17, s6
 801a3c4:	eef0 ba44 	vmov.f32	s23, s8
 801a3c8:	eeb0 ba64 	vmov.f32	s22, s9
 801a3cc:	eef0 aa45 	vmov.f32	s21, s10
 801a3d0:	9308      	str	r3, [sp, #32]
 801a3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	dc03      	bgt.n	801a3e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a3d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	f340 81f3 	ble.w	801a7c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801a3e0:	9b06      	ldr	r3, [sp, #24]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	f340 80fa 	ble.w	801a5dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801a3e8:	1422      	asrs	r2, r4, #16
 801a3ea:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a3ee:	d42b      	bmi.n	801a448 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801a3f0:	1c51      	adds	r1, r2, #1
 801a3f2:	428f      	cmp	r7, r1
 801a3f4:	dd2b      	ble.n	801a44e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	db29      	blt.n	801a44e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801a3fa:	9807      	ldr	r0, [sp, #28]
 801a3fc:	1c59      	adds	r1, r3, #1
 801a3fe:	4288      	cmp	r0, r1
 801a400:	dd25      	ble.n	801a44e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801a402:	9b06      	ldr	r3, [sp, #24]
 801a404:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a406:	3b01      	subs	r3, #1
 801a408:	fb02 4203 	mla	r2, r2, r3, r4
 801a40c:	1412      	asrs	r2, r2, #16
 801a40e:	d428      	bmi.n	801a462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a410:	3201      	adds	r2, #1
 801a412:	4297      	cmp	r7, r2
 801a414:	dd25      	ble.n	801a462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a416:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a418:	fb02 6303 	mla	r3, r2, r3, r6
 801a41c:	141b      	asrs	r3, r3, #16
 801a41e:	d420      	bmi.n	801a462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a420:	9a07      	ldr	r2, [sp, #28]
 801a422:	3301      	adds	r3, #1
 801a424:	429a      	cmp	r2, r3
 801a426:	dd1c      	ble.n	801a462 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a428:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a42c:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801a430:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a434:	f1b8 0f00 	cmp.w	r8, #0
 801a438:	f300 8129 	bgt.w	801a68e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 801a43c:	9b06      	ldr	r3, [sp, #24]
 801a43e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801a442:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801a446:	e0cb      	b.n	801a5e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801a448:	1c51      	adds	r1, r2, #1
 801a44a:	f040 80bd 	bne.w	801a5c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801a44e:	42ba      	cmp	r2, r7
 801a450:	f280 80ba 	bge.w	801a5c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801a454:	1c5a      	adds	r2, r3, #1
 801a456:	f2c0 80b7 	blt.w	801a5c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801a45a:	9a07      	ldr	r2, [sp, #28]
 801a45c:	4293      	cmp	r3, r2
 801a45e:	f280 80b3 	bge.w	801a5c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801a462:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a466:	46c8      	mov	r8, r9
 801a468:	f1bb 0f00 	cmp.w	fp, #0
 801a46c:	dde6      	ble.n	801a43c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801a46e:	1421      	asrs	r1, r4, #16
 801a470:	ea4f 4226 	mov.w	r2, r6, asr #16
 801a474:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a478:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a47c:	f100 80ef 	bmi.w	801a65e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801a480:	f101 0c01 	add.w	ip, r1, #1
 801a484:	4567      	cmp	r7, ip
 801a486:	f340 80ec 	ble.w	801a662 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801a48a:	2a00      	cmp	r2, #0
 801a48c:	f2c0 80e9 	blt.w	801a662 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801a490:	9d07      	ldr	r5, [sp, #28]
 801a492:	f102 0c01 	add.w	ip, r2, #1
 801a496:	4565      	cmp	r5, ip
 801a498:	f340 80e3 	ble.w	801a662 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801a49c:	fb02 1207 	mla	r2, r2, r7, r1
 801a4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a4a2:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801a4a6:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801a4aa:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801a4ae:	b138      	cbz	r0, 801a4c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 801a4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a4b4:	4472      	add	r2, lr
 801a4b6:	f83e 5005 	ldrh.w	r5, [lr, r5]
 801a4ba:	8852      	ldrh	r2, [r2, #2]
 801a4bc:	950e      	str	r5, [sp, #56]	; 0x38
 801a4be:	920f      	str	r2, [sp, #60]	; 0x3c
 801a4c0:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801a4c4:	fb13 f200 	smulbb	r2, r3, r0
 801a4c8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a4cc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801a4d0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a4d4:	10d2      	asrs	r2, r2, #3
 801a4d6:	ea4e 0c0c 	orr.w	ip, lr, ip
 801a4da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a4de:	f1c0 0e10 	rsb	lr, r0, #16
 801a4e2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a4e6:	ebae 0e03 	sub.w	lr, lr, r3
 801a4ea:	ea4a 0101 	orr.w	r1, sl, r1
 801a4ee:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801a4f2:	4359      	muls	r1, r3
 801a4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a4f6:	9d08      	ldr	r5, [sp, #32]
 801a4f8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801a4fc:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801a500:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801a504:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a508:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a50c:	ea4c 0c03 	orr.w	ip, ip, r3
 801a510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a512:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a514:	041b      	lsls	r3, r3, #16
 801a516:	fb02 ec0c 	mla	ip, r2, ip, lr
 801a51a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a51e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801a522:	ea43 030e 	orr.w	r3, r3, lr
 801a526:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801a52a:	fb02 c203 	mla	r2, r2, r3, ip
 801a52e:	0d53      	lsrs	r3, r2, #21
 801a530:	0952      	lsrs	r2, r2, #5
 801a532:	f8b8 c000 	ldrh.w	ip, [r8]
 801a536:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a53a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a53e:	431a      	orrs	r2, r3
 801a540:	b292      	uxth	r2, r2
 801a542:	ea4f 212c 	mov.w	r1, ip, asr #8
 801a546:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a54a:	1210      	asrs	r0, r2, #8
 801a54c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a550:	fb11 f105 	smulbb	r1, r1, r5
 801a554:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801a558:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a55c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a560:	fb00 1003 	mla	r0, r0, r3, r1
 801a564:	fa5f fc8c 	uxtb.w	ip, ip
 801a568:	10d1      	asrs	r1, r2, #3
 801a56a:	00d2      	lsls	r2, r2, #3
 801a56c:	fb1c fc05 	smulbb	ip, ip, r5
 801a570:	b2d2      	uxtb	r2, r2
 801a572:	fb02 c203 	mla	r2, r2, r3, ip
 801a576:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801a57a:	b280      	uxth	r0, r0
 801a57c:	b292      	uxth	r2, r2
 801a57e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a582:	fb1e fe05 	smulbb	lr, lr, r5
 801a586:	fb01 e103 	mla	r1, r1, r3, lr
 801a58a:	f102 0c01 	add.w	ip, r2, #1
 801a58e:	1c43      	adds	r3, r0, #1
 801a590:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a594:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a598:	b289      	uxth	r1, r1
 801a59a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a59e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801a5a2:	4313      	orrs	r3, r2
 801a5a4:	1c4a      	adds	r2, r1, #1
 801a5a6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a5aa:	0949      	lsrs	r1, r1, #5
 801a5ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a5b0:	430b      	orrs	r3, r1
 801a5b2:	f8a8 3000 	strh.w	r3, [r8]
 801a5b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a5b8:	441c      	add	r4, r3
 801a5ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a5bc:	f108 0802 	add.w	r8, r8, #2
 801a5c0:	441e      	add	r6, r3
 801a5c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a5c6:	e74f      	b.n	801a468 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801a5c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a5ca:	441c      	add	r4, r3
 801a5cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a5ce:	441e      	add	r6, r3
 801a5d0:	9b06      	ldr	r3, [sp, #24]
 801a5d2:	3b01      	subs	r3, #1
 801a5d4:	9306      	str	r3, [sp, #24]
 801a5d6:	f109 0902 	add.w	r9, r9, #2
 801a5da:	e701      	b.n	801a3e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a5dc:	f47f af11 	bne.w	801a402 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801a5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	f340 80ef 	ble.w	801a7c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801a5e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a5f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a5f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a5f6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a5fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a5fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a602:	eef0 6a48 	vmov.f32	s13, s16
 801a606:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a60a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a60e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a612:	ee16 4a90 	vmov	r4, s13
 801a616:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a61a:	eef0 6a68 	vmov.f32	s13, s17
 801a61e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a622:	ee18 2a10 	vmov	r2, s16
 801a626:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a62a:	fb92 f3f3 	sdiv	r3, r2, r3
 801a62e:	ee18 2a90 	vmov	r2, s17
 801a632:	9329      	str	r3, [sp, #164]	; 0xa4
 801a634:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a636:	fb92 f3f3 	sdiv	r3, r2, r3
 801a63a:	932a      	str	r3, [sp, #168]	; 0xa8
 801a63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a63e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a640:	3b01      	subs	r3, #1
 801a642:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a646:	930b      	str	r3, [sp, #44]	; 0x2c
 801a648:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a64a:	bf08      	it	eq
 801a64c:	4613      	moveq	r3, r2
 801a64e:	ee16 6a90 	vmov	r6, s13
 801a652:	9306      	str	r3, [sp, #24]
 801a654:	eef0 8a67 	vmov.f32	s17, s15
 801a658:	eeb0 8a47 	vmov.f32	s16, s14
 801a65c:	e6b9      	b.n	801a3d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a65e:	1c4d      	adds	r5, r1, #1
 801a660:	d1a9      	bne.n	801a5b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801a662:	428f      	cmp	r7, r1
 801a664:	dda7      	ble.n	801a5b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801a666:	1c55      	adds	r5, r2, #1
 801a668:	dba5      	blt.n	801a5b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801a66a:	9d07      	ldr	r5, [sp, #28]
 801a66c:	4295      	cmp	r5, r2
 801a66e:	dda2      	ble.n	801a5b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801a670:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a672:	9101      	str	r1, [sp, #4]
 801a674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a678:	9b07      	ldr	r3, [sp, #28]
 801a67a:	9300      	str	r3, [sp, #0]
 801a67c:	e9cd 0504 	strd	r0, r5, [sp, #16]
 801a680:	463b      	mov	r3, r7
 801a682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a684:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a686:	4641      	mov	r1, r8
 801a688:	f7ff fd9a 	bl	801a1c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801a68c:	e793      	b.n	801a5b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801a68e:	1422      	asrs	r2, r4, #16
 801a690:	1431      	asrs	r1, r6, #16
 801a692:	fb07 2101 	mla	r1, r7, r1, r2
 801a696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a69a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801a69e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801a6a2:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801a6a6:	8851      	ldrh	r1, [r2, #2]
 801a6a8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a6ac:	f1be 0f00 	cmp.w	lr, #0
 801a6b0:	d006      	beq.n	801a6c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801a6b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a6b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a6b6:	1810      	adds	r0, r2, r0
 801a6b8:	5b52      	ldrh	r2, [r2, r5]
 801a6ba:	9210      	str	r2, [sp, #64]	; 0x40
 801a6bc:	8842      	ldrh	r2, [r0, #2]
 801a6be:	9211      	str	r2, [sp, #68]	; 0x44
 801a6c0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801a6c4:	fb13 f20e 	smulbb	r2, r3, lr
 801a6c8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a6cc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a6d0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801a6d4:	10d2      	asrs	r2, r2, #3
 801a6d6:	ea40 000c 	orr.w	r0, r0, ip
 801a6da:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a6de:	f1ce 0c10 	rsb	ip, lr, #16
 801a6e2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a6e6:	ebac 0c03 	sub.w	ip, ip, r3
 801a6ea:	ea4b 0101 	orr.w	r1, fp, r1
 801a6ee:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801a6f2:	4359      	muls	r1, r3
 801a6f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a6f6:	9d08      	ldr	r5, [sp, #32]
 801a6f8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801a6fc:	fb0c 1c00 	mla	ip, ip, r0, r1
 801a700:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801a704:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801a708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a70a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a70e:	ea4b 0000 	orr.w	r0, fp, r0
 801a712:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801a716:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a71a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a71e:	fb02 c000 	mla	r0, r2, r0, ip
 801a722:	ea4b 0b03 	orr.w	fp, fp, r3
 801a726:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801a72a:	fb02 0b0b 	mla	fp, r2, fp, r0
 801a72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a730:	ea4f 515b 	mov.w	r1, fp, lsr #21
 801a734:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801a738:	8812      	ldrh	r2, [r2, #0]
 801a73a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a73e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801a742:	ea41 0b0b 	orr.w	fp, r1, fp
 801a746:	fa1f f38b 	uxth.w	r3, fp
 801a74a:	1211      	asrs	r1, r2, #8
 801a74c:	1218      	asrs	r0, r3, #8
 801a74e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a752:	fb11 f105 	smulbb	r1, r1, r5
 801a756:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801a75a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a75e:	00d2      	lsls	r2, r2, #3
 801a760:	fb00 100a 	mla	r0, r0, sl, r1
 801a764:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a768:	10d9      	asrs	r1, r3, #3
 801a76a:	b2d2      	uxtb	r2, r2
 801a76c:	00db      	lsls	r3, r3, #3
 801a76e:	fb1c fc05 	smulbb	ip, ip, r5
 801a772:	fb12 f205 	smulbb	r2, r2, r5
 801a776:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a77a:	b2db      	uxtb	r3, r3
 801a77c:	b280      	uxth	r0, r0
 801a77e:	fb01 c10a 	mla	r1, r1, sl, ip
 801a782:	fb03 230a 	mla	r3, r3, sl, r2
 801a786:	b29b      	uxth	r3, r3
 801a788:	b289      	uxth	r1, r1
 801a78a:	1c42      	adds	r2, r0, #1
 801a78c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a790:	f101 0c01 	add.w	ip, r1, #1
 801a794:	1c5a      	adds	r2, r3, #1
 801a796:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a79a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801a79e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a7a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a7a6:	0949      	lsrs	r1, r1, #5
 801a7a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7aa:	4310      	orrs	r0, r2
 801a7ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a7b0:	4308      	orrs	r0, r1
 801a7b2:	f823 0b02 	strh.w	r0, [r3], #2
 801a7b6:	930d      	str	r3, [sp, #52]	; 0x34
 801a7b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a7ba:	441c      	add	r4, r3
 801a7bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a7be:	f108 38ff 	add.w	r8, r8, #4294967295
 801a7c2:	441e      	add	r6, r3
 801a7c4:	e636      	b.n	801a434 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801a7c6:	b015      	add	sp, #84	; 0x54
 801a7c8:	ecbd 8b08 	vpop	{d8-d11}
 801a7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7d4:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801a7d8:	fb06 5c03 	mla	ip, r6, r3, r5
 801a7dc:	2e00      	cmp	r6, #0
 801a7de:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 801a7e2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801a7e6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801a7ea:	8808      	ldrh	r0, [r1, #0]
 801a7ec:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801a7f0:	db2e      	blt.n	801a850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801a7f2:	45b0      	cmp	r8, r6
 801a7f4:	dd2c      	ble.n	801a850 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801a7f6:	2d00      	cmp	r5, #0
 801a7f8:	db28      	blt.n	801a84c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801a7fa:	42ab      	cmp	r3, r5
 801a7fc:	dd26      	ble.n	801a84c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801a7fe:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 801a802:	1c6a      	adds	r2, r5, #1
 801a804:	d427      	bmi.n	801a856 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801a806:	4293      	cmp	r3, r2
 801a808:	dd25      	ble.n	801a856 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801a80a:	b324      	cbz	r4, 801a856 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801a80c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801a810:	3601      	adds	r6, #1
 801a812:	d424      	bmi.n	801a85e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801a814:	45b0      	cmp	r8, r6
 801a816:	dd22      	ble.n	801a85e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801a818:	b31f      	cbz	r7, 801a862 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 801a81a:	2d00      	cmp	r5, #0
 801a81c:	db1d      	blt.n	801a85a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801a81e:	42ab      	cmp	r3, r5
 801a820:	dd1b      	ble.n	801a85a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801a822:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 801a826:	3501      	adds	r5, #1
 801a828:	d405      	bmi.n	801a836 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801a82a:	42ab      	cmp	r3, r5
 801a82c:	dd03      	ble.n	801a836 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801a82e:	b124      	cbz	r4, 801a83a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 801a830:	3301      	adds	r3, #1
 801a832:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 801a836:	2c0f      	cmp	r4, #15
 801a838:	d801      	bhi.n	801a83e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801a83a:	2f0f      	cmp	r7, #15
 801a83c:	d914      	bls.n	801a868 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 801a83e:	4b27      	ldr	r3, [pc, #156]	; (801a8dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 801a840:	4a27      	ldr	r2, [pc, #156]	; (801a8e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801a842:	4828      	ldr	r0, [pc, #160]	; (801a8e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801a844:	f240 3155 	movw	r1, #853	; 0x355
 801a848:	f002 fc34 	bl	801d0b4 <__assert_func>
 801a84c:	4684      	mov	ip, r0
 801a84e:	e7d8      	b.n	801a802 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 801a850:	4602      	mov	r2, r0
 801a852:	4684      	mov	ip, r0
 801a854:	e7dc      	b.n	801a810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801a856:	4602      	mov	r2, r0
 801a858:	e7da      	b.n	801a810 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801a85a:	4606      	mov	r6, r0
 801a85c:	e7e3      	b.n	801a826 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 801a85e:	4606      	mov	r6, r0
 801a860:	e7e9      	b.n	801a836 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801a862:	2c0f      	cmp	r4, #15
 801a864:	d8eb      	bhi.n	801a83e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801a866:	4606      	mov	r6, r0
 801a868:	ea4f 450c 	mov.w	r5, ip, lsl #16
 801a86c:	fb14 f307 	smulbb	r3, r4, r7
 801a870:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801a874:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801a878:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a87c:	10db      	asrs	r3, r3, #3
 801a87e:	ea45 0c0c 	orr.w	ip, r5, ip
 801a882:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a886:	f1c7 0510 	rsb	r5, r7, #16
 801a88a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a88e:	1b2d      	subs	r5, r5, r4
 801a890:	ea4e 0202 	orr.w	r2, lr, r2
 801a894:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801a898:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801a89c:	4354      	muls	r4, r2
 801a89e:	fb05 450c 	mla	r5, r5, ip, r4
 801a8a2:	0404      	lsls	r4, r0, #16
 801a8a4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801a8a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a8ac:	4320      	orrs	r0, r4
 801a8ae:	fb03 5400 	mla	r4, r3, r0, r5
 801a8b2:	0430      	lsls	r0, r6, #16
 801a8b4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801a8b8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801a8bc:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801a8c0:	4330      	orrs	r0, r6
 801a8c2:	fb07 4000 	mla	r0, r7, r0, r4
 801a8c6:	0d43      	lsrs	r3, r0, #21
 801a8c8:	0940      	lsrs	r0, r0, #5
 801a8ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a8ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a8d2:	4318      	orrs	r0, r3
 801a8d4:	8008      	strh	r0, [r1, #0]
 801a8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8da:	bf00      	nop
 801a8dc:	08020997 	.word	0x08020997
 801a8e0:	08020f9e 	.word	0x08020f9e
 801a8e4:	08020a1f 	.word	0x08020a1f

0801a8e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8ec:	ed2d 8b0a 	vpush	{d8-d12}
 801a8f0:	b093      	sub	sp, #76	; 0x4c
 801a8f2:	461d      	mov	r5, r3
 801a8f4:	9210      	str	r2, [sp, #64]	; 0x40
 801a8f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a8f8:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 801a8fc:	9208      	str	r2, [sp, #32]
 801a8fe:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 801a902:	910b      	str	r1, [sp, #44]	; 0x2c
 801a904:	6859      	ldr	r1, [r3, #4]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 801a90c:	9011      	str	r0, [sp, #68]	; 0x44
 801a90e:	fb01 2707 	mla	r7, r1, r7, r2
 801a912:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801a916:	9307      	str	r3, [sp, #28]
 801a918:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a91a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	9309      	str	r3, [sp, #36]	; 0x24
 801a922:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a926:	eeb0 aa40 	vmov.f32	s20, s0
 801a92a:	eef0 9a60 	vmov.f32	s19, s1
 801a92e:	eeb0 9a41 	vmov.f32	s18, s2
 801a932:	eeb0 8a62 	vmov.f32	s16, s5
 801a936:	eef0 8a43 	vmov.f32	s17, s6
 801a93a:	eeb0 ca44 	vmov.f32	s24, s8
 801a93e:	eef0 ba64 	vmov.f32	s23, s9
 801a942:	eeb0 ba45 	vmov.f32	s22, s10
 801a946:	930a      	str	r3, [sp, #40]	; 0x28
 801a948:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801a94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a94e:	2b00      	cmp	r3, #0
 801a950:	dc03      	bgt.n	801a95a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801a952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a954:	2b00      	cmp	r3, #0
 801a956:	f340 816c 	ble.w	801ac32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801a95a:	2d00      	cmp	r5, #0
 801a95c:	f340 80b6 	ble.w	801aacc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801a960:	1422      	asrs	r2, r4, #16
 801a962:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a966:	d428      	bmi.n	801a9ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801a968:	1c51      	adds	r1, r2, #1
 801a96a:	4588      	cmp	r8, r1
 801a96c:	dd27      	ble.n	801a9be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801a96e:	2b00      	cmp	r3, #0
 801a970:	db25      	blt.n	801a9be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801a972:	9808      	ldr	r0, [sp, #32]
 801a974:	1c59      	adds	r1, r3, #1
 801a976:	4288      	cmp	r0, r1
 801a978:	dd21      	ble.n	801a9be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801a97a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a97c:	1e6b      	subs	r3, r5, #1
 801a97e:	fb02 4203 	mla	r2, r2, r3, r4
 801a982:	1412      	asrs	r2, r2, #16
 801a984:	d422      	bmi.n	801a9cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a986:	3201      	adds	r2, #1
 801a988:	4590      	cmp	r8, r2
 801a98a:	dd1f      	ble.n	801a9cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a98c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a98e:	fb02 6303 	mla	r3, r2, r3, r6
 801a992:	141b      	asrs	r3, r3, #16
 801a994:	d41a      	bmi.n	801a9cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a996:	9a08      	ldr	r2, [sp, #32]
 801a998:	3301      	adds	r3, #1
 801a99a:	429a      	cmp	r2, r3
 801a99c:	dd16      	ble.n	801a9cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a99e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a9a2:	46a9      	mov	r9, r5
 801a9a4:	f1b9 0f00 	cmp.w	r9, #0
 801a9a8:	f300 80e4 	bgt.w	801ab74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801a9ac:	9b07      	ldr	r3, [sp, #28]
 801a9ae:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a9b2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801a9b6:	9307      	str	r3, [sp, #28]
 801a9b8:	e08a      	b.n	801aad0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801a9ba:	1c51      	adds	r1, r2, #1
 801a9bc:	d17d      	bne.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801a9be:	4542      	cmp	r2, r8
 801a9c0:	da7b      	bge.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801a9c2:	1c5a      	adds	r2, r3, #1
 801a9c4:	db79      	blt.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801a9c6:	9a08      	ldr	r2, [sp, #32]
 801a9c8:	4293      	cmp	r3, r2
 801a9ca:	da76      	bge.n	801aaba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801a9cc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801a9d0:	46aa      	mov	sl, r5
 801a9d2:	f1ba 0f00 	cmp.w	sl, #0
 801a9d6:	dde9      	ble.n	801a9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801a9d8:	1421      	asrs	r1, r4, #16
 801a9da:	ea4f 4226 	mov.w	r2, r6, asr #16
 801a9de:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a9e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a9e6:	f100 80b0 	bmi.w	801ab4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801a9ea:	f101 0c01 	add.w	ip, r1, #1
 801a9ee:	45e0      	cmp	r8, ip
 801a9f0:	f340 80ad 	ble.w	801ab4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801a9f4:	2a00      	cmp	r2, #0
 801a9f6:	f2c0 80aa 	blt.w	801ab4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801a9fa:	9f08      	ldr	r7, [sp, #32]
 801a9fc:	f102 0c01 	add.w	ip, r2, #1
 801aa00:	4567      	cmp	r7, ip
 801aa02:	f340 80a4 	ble.w	801ab4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801aa06:	fb02 1208 	mla	r2, r2, r8, r1
 801aa0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa0c:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801aa10:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801aa14:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801aa18:	b138      	cbz	r0, 801aa2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801aa1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801aa1e:	4472      	add	r2, lr
 801aa20:	f83e 7007 	ldrh.w	r7, [lr, r7]
 801aa24:	8852      	ldrh	r2, [r2, #2]
 801aa26:	970c      	str	r7, [sp, #48]	; 0x30
 801aa28:	920d      	str	r2, [sp, #52]	; 0x34
 801aa2a:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801aa2e:	fb13 f200 	smulbb	r2, r3, r0
 801aa32:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801aa36:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801aa3a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801aa3e:	10d2      	asrs	r2, r2, #3
 801aa40:	ea4e 0c0c 	orr.w	ip, lr, ip
 801aa44:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801aa48:	f1c0 0e10 	rsb	lr, r0, #16
 801aa4c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801aa50:	ebae 0e03 	sub.w	lr, lr, r3
 801aa54:	ea4b 0101 	orr.w	r1, fp, r1
 801aa58:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801aa5c:	4359      	muls	r1, r3
 801aa5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa60:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801aa64:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801aa68:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801aa6c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801aa70:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801aa74:	ea4c 0c03 	orr.w	ip, ip, r3
 801aa78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa7c:	041b      	lsls	r3, r3, #16
 801aa7e:	fb02 ec0c 	mla	ip, r2, ip, lr
 801aa82:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801aa86:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801aa8a:	ea43 030e 	orr.w	r3, r3, lr
 801aa8e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801aa92:	fb02 c203 	mla	r2, r2, r3, ip
 801aa96:	0d53      	lsrs	r3, r2, #21
 801aa98:	0952      	lsrs	r2, r2, #5
 801aa9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aa9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801aaa2:	431a      	orrs	r2, r3
 801aaa4:	f8a9 2000 	strh.w	r2, [r9]
 801aaa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aaaa:	441c      	add	r4, r3
 801aaac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aaae:	f109 0902 	add.w	r9, r9, #2
 801aab2:	441e      	add	r6, r3
 801aab4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aab8:	e78b      	b.n	801a9d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801aaba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aabc:	441c      	add	r4, r3
 801aabe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aac0:	441e      	add	r6, r3
 801aac2:	9b07      	ldr	r3, [sp, #28]
 801aac4:	3302      	adds	r3, #2
 801aac6:	3d01      	subs	r5, #1
 801aac8:	9307      	str	r3, [sp, #28]
 801aaca:	e746      	b.n	801a95a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801aacc:	f47f af55 	bne.w	801a97a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801aad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	f340 80ad 	ble.w	801ac32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801aad8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801aadc:	ee79 9aab 	vadd.f32	s19, s19, s23
 801aae0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801aae4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801aae6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801aaea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801aaee:	eef0 6a48 	vmov.f32	s13, s16
 801aaf2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801aaf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aafa:	ee37 8a48 	vsub.f32	s16, s14, s16
 801aafe:	ee16 4a90 	vmov	r4, s13
 801ab02:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ab06:	eef0 6a68 	vmov.f32	s13, s17
 801ab0a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ab0e:	ee18 2a10 	vmov	r2, s16
 801ab12:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ab16:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab1a:	ee18 2a90 	vmov	r2, s17
 801ab1e:	9329      	str	r3, [sp, #164]	; 0xa4
 801ab20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ab22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab26:	932a      	str	r3, [sp, #168]	; 0xa8
 801ab28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab2c:	3b01      	subs	r3, #1
 801ab2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab32:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ab36:	ee16 6a90 	vmov	r6, s13
 801ab3a:	bf14      	ite	ne
 801ab3c:	461d      	movne	r5, r3
 801ab3e:	4615      	moveq	r5, r2
 801ab40:	eef0 8a67 	vmov.f32	s17, s15
 801ab44:	eeb0 8a47 	vmov.f32	s16, s14
 801ab48:	e700      	b.n	801a94c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ab4a:	1c4f      	adds	r7, r1, #1
 801ab4c:	d1ac      	bne.n	801aaa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ab4e:	4588      	cmp	r8, r1
 801ab50:	ddaa      	ble.n	801aaa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ab52:	1c57      	adds	r7, r2, #1
 801ab54:	dba8      	blt.n	801aaa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ab56:	9f08      	ldr	r7, [sp, #32]
 801ab58:	4297      	cmp	r7, r2
 801ab5a:	dda5      	ble.n	801aaa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ab5c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801ab60:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801ab64:	9700      	str	r7, [sp, #0]
 801ab66:	4643      	mov	r3, r8
 801ab68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ab6c:	4649      	mov	r1, r9
 801ab6e:	f7ff fe2f 	bl	801a7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801ab72:	e799      	b.n	801aaa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ab74:	1422      	asrs	r2, r4, #16
 801ab76:	1431      	asrs	r1, r6, #16
 801ab78:	fb08 2101 	mla	r1, r8, r1, r2
 801ab7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab80:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801ab84:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801ab88:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801ab8c:	8851      	ldrh	r1, [r2, #2]
 801ab8e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ab92:	f1be 0f00 	cmp.w	lr, #0
 801ab96:	d006      	beq.n	801aba6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801ab98:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ab9a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ab9c:	1810      	adds	r0, r2, r0
 801ab9e:	5bd2      	ldrh	r2, [r2, r7]
 801aba0:	920e      	str	r2, [sp, #56]	; 0x38
 801aba2:	8842      	ldrh	r2, [r0, #2]
 801aba4:	920f      	str	r2, [sp, #60]	; 0x3c
 801aba6:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801abaa:	fb13 f20e 	smulbb	r2, r3, lr
 801abae:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801abb2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801abb6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801abba:	10d2      	asrs	r2, r2, #3
 801abbc:	ea40 000c 	orr.w	r0, r0, ip
 801abc0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801abc4:	f1ce 0c10 	rsb	ip, lr, #16
 801abc8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801abcc:	ebac 0c03 	sub.w	ip, ip, r3
 801abd0:	ea4a 0101 	orr.w	r1, sl, r1
 801abd4:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801abd8:	4359      	muls	r1, r3
 801abda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801abdc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801abe0:	fb0c 1c00 	mla	ip, ip, r0, r1
 801abe4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801abe8:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801abec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abee:	990e      	ldr	r1, [sp, #56]	; 0x38
 801abf0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801abf4:	041b      	lsls	r3, r3, #16
 801abf6:	ea4a 0000 	orr.w	r0, sl, r0
 801abfa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801abfe:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 801ac02:	fb02 c000 	mla	r0, r2, r0, ip
 801ac06:	ea43 0a0a 	orr.w	sl, r3, sl
 801ac0a:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801ac0e:	fb02 000a 	mla	r0, r2, sl, r0
 801ac12:	0d43      	lsrs	r3, r0, #21
 801ac14:	0940      	lsrs	r0, r0, #5
 801ac16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ac1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ac1e:	4318      	orrs	r0, r3
 801ac20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ac22:	f82b 0b02 	strh.w	r0, [fp], #2
 801ac26:	441c      	add	r4, r3
 801ac28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ac2a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ac2e:	441e      	add	r6, r3
 801ac30:	e6b8      	b.n	801a9a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 801ac32:	b013      	add	sp, #76	; 0x4c
 801ac34:	ecbd 8b0a 	vpop	{d8-d12}
 801ac38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac40:	8808      	ldrh	r0, [r1, #0]
 801ac42:	b085      	sub	sp, #20
 801ac44:	1206      	asrs	r6, r0, #8
 801ac46:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801ac4a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ac4e:	9600      	str	r6, [sp, #0]
 801ac50:	10c6      	asrs	r6, r0, #3
 801ac52:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac56:	9601      	str	r6, [sp, #4]
 801ac58:	00c0      	lsls	r0, r0, #3
 801ac5a:	fb04 c603 	mla	r6, r4, r3, ip
 801ac5e:	b2c0      	uxtb	r0, r0
 801ac60:	4691      	mov	r9, r2
 801ac62:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801ac66:	9a00      	ldr	r2, [sp, #0]
 801ac68:	9002      	str	r0, [sp, #8]
 801ac6a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ac6e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801ac72:	9a01      	ldr	r2, [sp, #4]
 801ac74:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801ac78:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801ac7c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801ac80:	2c00      	cmp	r4, #0
 801ac82:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ac86:	db3a      	blt.n	801acfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801ac88:	45a0      	cmp	r8, r4
 801ac8a:	dd38      	ble.n	801acfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801ac8c:	f1bc 0f00 	cmp.w	ip, #0
 801ac90:	db33      	blt.n	801acfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801ac92:	4563      	cmp	r3, ip
 801ac94:	dd31      	ble.n	801acfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801ac96:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801ac9a:	f11c 0601 	adds.w	r6, ip, #1
 801ac9e:	d431      	bmi.n	801ad04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801aca0:	42b3      	cmp	r3, r6
 801aca2:	dd2f      	ble.n	801ad04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801aca4:	b375      	cbz	r5, 801ad04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801aca6:	f8de 6004 	ldr.w	r6, [lr, #4]
 801acaa:	3401      	adds	r4, #1
 801acac:	d42e      	bmi.n	801ad0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801acae:	45a0      	cmp	r8, r4
 801acb0:	dd2c      	ble.n	801ad0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801acb2:	b35f      	cbz	r7, 801ad0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801acb4:	f1bc 0f00 	cmp.w	ip, #0
 801acb8:	db26      	blt.n	801ad08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801acba:	4563      	cmp	r3, ip
 801acbc:	dd24      	ble.n	801ad08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801acbe:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801acc2:	f11c 0c01 	adds.w	ip, ip, #1
 801acc6:	d405      	bmi.n	801acd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801acc8:	4563      	cmp	r3, ip
 801acca:	dd03      	ble.n	801acd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801accc:	b115      	cbz	r5, 801acd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801acce:	3301      	adds	r3, #1
 801acd0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801acd4:	2d0f      	cmp	r5, #15
 801acd6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801acda:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801acde:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ace2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ace6:	d801      	bhi.n	801acec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 801ace8:	2f0f      	cmp	r7, #15
 801acea:	d911      	bls.n	801ad10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 801acec:	4b82      	ldr	r3, [pc, #520]	; (801aef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 801acee:	4a83      	ldr	r2, [pc, #524]	; (801aefc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 801acf0:	4883      	ldr	r0, [pc, #524]	; (801af00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 801acf2:	f240 3173 	movw	r1, #883	; 0x373
 801acf6:	f002 f9dd 	bl	801d0b4 <__assert_func>
 801acfa:	4602      	mov	r2, r0
 801acfc:	e7cd      	b.n	801ac9a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801acfe:	4606      	mov	r6, r0
 801ad00:	4602      	mov	r2, r0
 801ad02:	e7d2      	b.n	801acaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801ad04:	4606      	mov	r6, r0
 801ad06:	e7d0      	b.n	801acaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801ad08:	4604      	mov	r4, r0
 801ad0a:	e7da      	b.n	801acc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 801ad0c:	4604      	mov	r4, r0
 801ad0e:	e7e1      	b.n	801acd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801ad10:	b2ab      	uxth	r3, r5
 801ad12:	b2bf      	uxth	r7, r7
 801ad14:	fb03 fe07 	mul.w	lr, r3, r7
 801ad18:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ad1c:	011b      	lsls	r3, r3, #4
 801ad1e:	eba3 0c0e 	sub.w	ip, r3, lr
 801ad22:	b2bf      	uxth	r7, r7
 801ad24:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801ad28:	fa1f fc8c 	uxth.w	ip, ip
 801ad2c:	1bed      	subs	r5, r5, r7
 801ad2e:	b2ad      	uxth	r5, r5
 801ad30:	fb0c f30a 	mul.w	r3, ip, sl
 801ad34:	fb05 330b 	mla	r3, r5, fp, r3
 801ad38:	fb07 3309 	mla	r3, r7, r9, r3
 801ad3c:	fb0e 3308 	mla	r3, lr, r8, r3
 801ad40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ad44:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ad48:	9303      	str	r3, [sp, #12]
 801ad4a:	d018      	beq.n	801ad7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 801ad4c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ad50:	fb0b f303 	mul.w	r3, fp, r3
 801ad54:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ad58:	fb0b fb02 	mul.w	fp, fp, r2
 801ad5c:	0a1a      	lsrs	r2, r3, #8
 801ad5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ad62:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801ad66:	441a      	add	r2, r3
 801ad68:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801ad6c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801ad70:	0a12      	lsrs	r2, r2, #8
 801ad72:	0a1b      	lsrs	r3, r3, #8
 801ad74:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ad78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ad7c:	431a      	orrs	r2, r3
 801ad7e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ad82:	d019      	beq.n	801adb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 801ad84:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ad88:	fb0a fb0b 	mul.w	fp, sl, fp
 801ad8c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ad90:	fb0a fa06 	mul.w	sl, sl, r6
 801ad94:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801ad98:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ad9c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ada0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801ada4:	445e      	add	r6, fp
 801ada6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801adaa:	0a36      	lsrs	r6, r6, #8
 801adac:	0a1b      	lsrs	r3, r3, #8
 801adae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801adb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801adb6:	431e      	orrs	r6, r3
 801adb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801adbc:	d019      	beq.n	801adf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 801adbe:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801adc2:	fb09 fa0a 	mul.w	sl, r9, sl
 801adc6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801adca:	fb09 f904 	mul.w	r9, r9, r4
 801adce:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801add2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801add6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801adda:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801adde:	4454      	add	r4, sl
 801ade0:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801ade4:	0a24      	lsrs	r4, r4, #8
 801ade6:	0a1b      	lsrs	r3, r3, #8
 801ade8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801adec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801adf0:	431c      	orrs	r4, r3
 801adf2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801adf6:	d019      	beq.n	801ae2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 801adf8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801adfc:	fb08 f909 	mul.w	r9, r8, r9
 801ae00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ae04:	fb08 f800 	mul.w	r8, r8, r0
 801ae08:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801ae0c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ae10:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801ae14:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801ae18:	4448      	add	r0, r9
 801ae1a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801ae1e:	0a00      	lsrs	r0, r0, #8
 801ae20:	0a1b      	lsrs	r3, r3, #8
 801ae22:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801ae26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ae2a:	4318      	orrs	r0, r3
 801ae2c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801ae30:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ae34:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ae38:	fb0c f808 	mul.w	r8, ip, r8
 801ae3c:	fb0c f606 	mul.w	r6, ip, r6
 801ae40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ae44:	fb05 6202 	mla	r2, r5, r2, r6
 801ae48:	fb05 8803 	mla	r8, r5, r3, r8
 801ae4c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801ae50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ae54:	fb07 8803 	mla	r8, r7, r3, r8
 801ae58:	fb07 2704 	mla	r7, r7, r4, r2
 801ae5c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801ae60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ae64:	fb0e 8303 	mla	r3, lr, r3, r8
 801ae68:	fb0e 7e00 	mla	lr, lr, r0, r7
 801ae6c:	0a1b      	lsrs	r3, r3, #8
 801ae6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ae72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ae76:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ae7a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ae7e:	ea43 0e0e 	orr.w	lr, r3, lr
 801ae82:	9b03      	ldr	r3, [sp, #12]
 801ae84:	b2a4      	uxth	r4, r4
 801ae86:	4363      	muls	r3, r4
 801ae88:	1c5a      	adds	r2, r3, #1
 801ae8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ae8e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ae92:	9b00      	ldr	r3, [sp, #0]
 801ae94:	b2d2      	uxtb	r2, r2
 801ae96:	ea4f 451e 	mov.w	r5, lr, lsr #16
 801ae9a:	fb13 f302 	smulbb	r3, r3, r2
 801ae9e:	fb05 3304 	mla	r3, r5, r4, r3
 801aea2:	b29d      	uxth	r5, r3
 801aea4:	9b01      	ldr	r3, [sp, #4]
 801aea6:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801aeaa:	fb13 f302 	smulbb	r3, r3, r2
 801aeae:	fb00 3004 	mla	r0, r0, r4, r3
 801aeb2:	9b02      	ldr	r3, [sp, #8]
 801aeb4:	fa5f fe8e 	uxtb.w	lr, lr
 801aeb8:	fb13 f202 	smulbb	r2, r3, r2
 801aebc:	fb0e 2e04 	mla	lr, lr, r4, r2
 801aec0:	fa1f fe8e 	uxth.w	lr, lr
 801aec4:	b280      	uxth	r0, r0
 801aec6:	f10e 0201 	add.w	r2, lr, #1
 801aeca:	1c6b      	adds	r3, r5, #1
 801aecc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801aed0:	1c42      	adds	r2, r0, #1
 801aed2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801aed6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801aeda:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801aede:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801aee2:	0952      	lsrs	r2, r2, #5
 801aee4:	ea43 030e 	orr.w	r3, r3, lr
 801aee8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aeec:	4313      	orrs	r3, r2
 801aeee:	800b      	strh	r3, [r1, #0]
 801aef0:	b005      	add	sp, #20
 801aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aef6:	bf00      	nop
 801aef8:	08020997 	.word	0x08020997
 801aefc:	08020ef5 	.word	0x08020ef5
 801af00:	08020a1f 	.word	0x08020a1f

0801af04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801af04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af08:	ed2d 8b08 	vpush	{d8-d11}
 801af0c:	b099      	sub	sp, #100	; 0x64
 801af0e:	eeb0 aa40 	vmov.f32	s20, s0
 801af12:	9306      	str	r3, [sp, #24]
 801af14:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801af18:	9307      	str	r3, [sp, #28]
 801af1a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801af1e:	9216      	str	r2, [sp, #88]	; 0x58
 801af20:	9310      	str	r3, [sp, #64]	; 0x40
 801af22:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801af24:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801af28:	9113      	str	r1, [sp, #76]	; 0x4c
 801af2a:	9315      	str	r3, [sp, #84]	; 0x54
 801af2c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801af30:	9017      	str	r0, [sp, #92]	; 0x5c
 801af32:	6850      	ldr	r0, [r2, #4]
 801af34:	6812      	ldr	r2, [r2, #0]
 801af36:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801af38:	fb00 1303 	mla	r3, r0, r3, r1
 801af3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801af40:	930a      	str	r3, [sp, #40]	; 0x28
 801af42:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	9312      	str	r3, [sp, #72]	; 0x48
 801af48:	9b07      	ldr	r3, [sp, #28]
 801af4a:	009b      	lsls	r3, r3, #2
 801af4c:	eef0 9a60 	vmov.f32	s19, s1
 801af50:	eeb0 9a41 	vmov.f32	s18, s2
 801af54:	eeb0 8a62 	vmov.f32	s16, s5
 801af58:	eef0 8a43 	vmov.f32	s17, s6
 801af5c:	eef0 ba44 	vmov.f32	s23, s8
 801af60:	eeb0 ba64 	vmov.f32	s22, s9
 801af64:	eef0 aa45 	vmov.f32	s21, s10
 801af68:	930e      	str	r3, [sp, #56]	; 0x38
 801af6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	dc03      	bgt.n	801af78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801af70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801af72:	2b00      	cmp	r3, #0
 801af74:	f340 8352 	ble.w	801b61c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801af78:	9b06      	ldr	r3, [sp, #24]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	f340 81a8 	ble.w	801b2d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 801af80:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801af82:	1412      	asrs	r2, r2, #16
 801af84:	ea4f 4324 	mov.w	r3, r4, asr #16
 801af88:	d430      	bmi.n	801afec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801af8a:	9807      	ldr	r0, [sp, #28]
 801af8c:	1c51      	adds	r1, r2, #1
 801af8e:	4288      	cmp	r0, r1
 801af90:	dd2f      	ble.n	801aff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801af92:	2b00      	cmp	r3, #0
 801af94:	db2d      	blt.n	801aff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801af96:	9810      	ldr	r0, [sp, #64]	; 0x40
 801af98:	1c59      	adds	r1, r3, #1
 801af9a:	4288      	cmp	r0, r1
 801af9c:	dd29      	ble.n	801aff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801af9e:	9b06      	ldr	r3, [sp, #24]
 801afa0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801afa2:	992b      	ldr	r1, [sp, #172]	; 0xac
 801afa4:	3b01      	subs	r3, #1
 801afa6:	fb02 1203 	mla	r2, r2, r3, r1
 801afaa:	1412      	asrs	r2, r2, #16
 801afac:	d42c      	bmi.n	801b008 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801afae:	9907      	ldr	r1, [sp, #28]
 801afb0:	3201      	adds	r2, #1
 801afb2:	4291      	cmp	r1, r2
 801afb4:	dd28      	ble.n	801b008 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801afb6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801afb8:	fb02 4303 	mla	r3, r2, r3, r4
 801afbc:	141b      	asrs	r3, r3, #16
 801afbe:	d423      	bmi.n	801b008 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801afc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801afc2:	3301      	adds	r3, #1
 801afc4:	429a      	cmp	r2, r3
 801afc6:	dd1f      	ble.n	801b008 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801afc8:	9b06      	ldr	r3, [sp, #24]
 801afca:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801afce:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801afd2:	9311      	str	r3, [sp, #68]	; 0x44
 801afd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	f300 81e3 	bgt.w	801b3a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 801afdc:	9b06      	ldr	r3, [sp, #24]
 801afde:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801afe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afe4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801afe8:	930a      	str	r3, [sp, #40]	; 0x28
 801afea:	e173      	b.n	801b2d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801afec:	1c51      	adds	r1, r2, #1
 801afee:	f040 8162 	bne.w	801b2b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801aff2:	9907      	ldr	r1, [sp, #28]
 801aff4:	428a      	cmp	r2, r1
 801aff6:	f280 815e 	bge.w	801b2b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801affa:	1c5f      	adds	r7, r3, #1
 801affc:	f2c0 815b 	blt.w	801b2b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801b000:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b002:	4293      	cmp	r3, r2
 801b004:	f280 8157 	bge.w	801b2b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801b008:	9b06      	ldr	r3, [sp, #24]
 801b00a:	9314      	str	r3, [sp, #80]	; 0x50
 801b00c:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801b010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b012:	9311      	str	r3, [sp, #68]	; 0x44
 801b014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b016:	2b00      	cmp	r3, #0
 801b018:	dde0      	ble.n	801afdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b01a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b01c:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801b020:	1412      	asrs	r2, r2, #16
 801b022:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b026:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b02a:	f100 81a1 	bmi.w	801b370 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 801b02e:	9e07      	ldr	r6, [sp, #28]
 801b030:	1c55      	adds	r5, r2, #1
 801b032:	42ae      	cmp	r6, r5
 801b034:	f340 819e 	ble.w	801b374 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801b038:	2b00      	cmp	r3, #0
 801b03a:	f2c0 819b 	blt.w	801b374 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801b03e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b040:	1c5d      	adds	r5, r3, #1
 801b042:	42ae      	cmp	r6, r5
 801b044:	f340 8196 	ble.w	801b374 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801b048:	9d07      	ldr	r5, [sp, #28]
 801b04a:	fb03 2305 	mla	r3, r3, r5, r2
 801b04e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b050:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b058:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b05c:	2800      	cmp	r0, #0
 801b05e:	f000 8178 	beq.w	801b352 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801b062:	686a      	ldr	r2, [r5, #4]
 801b064:	920b      	str	r2, [sp, #44]	; 0x2c
 801b066:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b06a:	2900      	cmp	r1, #0
 801b06c:	f000 817a 	beq.w	801b364 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801b070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b072:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b074:	18aa      	adds	r2, r5, r2
 801b076:	59ad      	ldr	r5, [r5, r6]
 801b078:	6852      	ldr	r2, [r2, #4]
 801b07a:	9508      	str	r5, [sp, #32]
 801b07c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801b080:	920c      	str	r2, [sp, #48]	; 0x30
 801b082:	0e15      	lsrs	r5, r2, #24
 801b084:	b280      	uxth	r0, r0
 801b086:	b289      	uxth	r1, r1
 801b088:	fb00 fb01 	mul.w	fp, r0, r1
 801b08c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801b090:	0100      	lsls	r0, r0, #4
 801b092:	eba0 090b 	sub.w	r9, r0, fp
 801b096:	b289      	uxth	r1, r1
 801b098:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801b09c:	fa1f f989 	uxth.w	r9, r9
 801b0a0:	1a52      	subs	r2, r2, r1
 801b0a2:	b292      	uxth	r2, r2
 801b0a4:	fb09 f008 	mul.w	r0, r9, r8
 801b0a8:	fb02 000c 	mla	r0, r2, ip, r0
 801b0ac:	fb01 000a 	mla	r0, r1, sl, r0
 801b0b0:	fb0b 0005 	mla	r0, fp, r5, r0
 801b0b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	f000 80ef 	beq.w	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b0be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b0c2:	d01b      	beq.n	801b0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 801b0c4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b0c8:	fb0c fe0e 	mul.w	lr, ip, lr
 801b0cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b0d0:	fb0c fc03 	mul.w	ip, ip, r3
 801b0d4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801b0d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b0dc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b0e0:	4473      	add	r3, lr
 801b0e2:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801b0e6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801b0ea:	0a1b      	lsrs	r3, r3, #8
 801b0ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b0f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b0f4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b0f8:	ea43 030e 	orr.w	r3, r3, lr
 801b0fc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b100:	d01e      	beq.n	801b140 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801b102:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b104:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b108:	fb08 fc0c 	mul.w	ip, r8, ip
 801b10c:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 801b110:	fb08 f80e 	mul.w	r8, r8, lr
 801b114:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b118:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b11c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b120:	44e6      	add	lr, ip
 801b122:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801b126:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801b12a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b12e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b132:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b136:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b13a:	ea4e 0608 	orr.w	r6, lr, r8
 801b13e:	960b      	str	r6, [sp, #44]	; 0x2c
 801b140:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b144:	d01e      	beq.n	801b184 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801b146:	9e08      	ldr	r6, [sp, #32]
 801b148:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b14c:	fb0a f808 	mul.w	r8, sl, r8
 801b150:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801b154:	fb0a fa0c 	mul.w	sl, sl, ip
 801b158:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b15c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b160:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b164:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b168:	44c6      	add	lr, r8
 801b16a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b16e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b172:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b176:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b17a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b17e:	ea4e 060a 	orr.w	r6, lr, sl
 801b182:	9608      	str	r6, [sp, #32]
 801b184:	2dff      	cmp	r5, #255	; 0xff
 801b186:	d01d      	beq.n	801b1c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801b188:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b18a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b18e:	fb05 f808 	mul.w	r8, r5, r8
 801b192:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801b196:	fb05 f50c 	mul.w	r5, r5, ip
 801b19a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b19e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b1a2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b1a6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801b1aa:	44c6      	add	lr, r8
 801b1ac:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b1b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b1b4:	0a2d      	lsrs	r5, r5, #8
 801b1b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b1ba:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b1be:	ea4e 0505 	orr.w	r5, lr, r5
 801b1c2:	950c      	str	r5, [sp, #48]	; 0x30
 801b1c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b1c6:	9e08      	ldr	r6, [sp, #32]
 801b1c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b1cc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b1d0:	fb09 f505 	mul.w	r5, r9, r5
 801b1d4:	fb02 550c 	mla	r5, r2, ip, r5
 801b1d8:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b1dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b1de:	fb01 550c 	mla	r5, r1, ip, r5
 801b1e2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b1e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b1e8:	fb0b 550c 	mla	r5, fp, ip, r5
 801b1ec:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801b1f0:	fb09 f90c 	mul.w	r9, r9, ip
 801b1f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b1f8:	fb02 9303 	mla	r3, r2, r3, r9
 801b1fc:	9a08      	ldr	r2, [sp, #32]
 801b1fe:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801b202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b204:	fb01 330e 	mla	r3, r1, lr, r3
 801b208:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801b20c:	fb0b 3b01 	mla	fp, fp, r1, r3
 801b210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b212:	0a2d      	lsrs	r5, r5, #8
 801b214:	f8b3 c000 	ldrh.w	ip, [r3]
 801b218:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801b21c:	fb00 f307 	mul.w	r3, r0, r7
 801b220:	1c58      	adds	r0, r3, #1
 801b222:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b226:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801b22a:	ea45 050b 	orr.w	r5, r5, fp
 801b22e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b232:	0c29      	lsrs	r1, r5, #16
 801b234:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b238:	ea4f 232c 	mov.w	r3, ip, asr #8
 801b23c:	b2c0      	uxtb	r0, r0
 801b23e:	fb11 f107 	smulbb	r1, r1, r7
 801b242:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b246:	fb03 1300 	mla	r3, r3, r0, r1
 801b24a:	b299      	uxth	r1, r3
 801b24c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801b250:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b254:	fb13 f307 	smulbb	r3, r3, r7
 801b258:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b25c:	fb02 3200 	mla	r2, r2, r0, r3
 801b260:	b2ed      	uxtb	r5, r5
 801b262:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801b266:	b2db      	uxtb	r3, r3
 801b268:	fb15 f507 	smulbb	r5, r5, r7
 801b26c:	fb03 5500 	mla	r5, r3, r0, r5
 801b270:	b292      	uxth	r2, r2
 801b272:	b2ad      	uxth	r5, r5
 801b274:	1c4b      	adds	r3, r1, #1
 801b276:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b27a:	1c68      	adds	r0, r5, #1
 801b27c:	1c51      	adds	r1, r2, #1
 801b27e:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801b282:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b286:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b28a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b28e:	0952      	lsrs	r2, r2, #5
 801b290:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b294:	432b      	orrs	r3, r5
 801b296:	4313      	orrs	r3, r2
 801b298:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b29a:	8013      	strh	r3, [r2, #0]
 801b29c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b29e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b2a0:	3302      	adds	r3, #2
 801b2a2:	9311      	str	r3, [sp, #68]	; 0x44
 801b2a4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b2a6:	4413      	add	r3, r2
 801b2a8:	932b      	str	r3, [sp, #172]	; 0xac
 801b2aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b2ac:	441c      	add	r4, r3
 801b2ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b2b0:	3b01      	subs	r3, #1
 801b2b2:	9314      	str	r3, [sp, #80]	; 0x50
 801b2b4:	e6ae      	b.n	801b014 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801b2b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b2b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b2ba:	4413      	add	r3, r2
 801b2bc:	932b      	str	r3, [sp, #172]	; 0xac
 801b2be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b2c0:	441c      	add	r4, r3
 801b2c2:	9b06      	ldr	r3, [sp, #24]
 801b2c4:	3b01      	subs	r3, #1
 801b2c6:	9306      	str	r3, [sp, #24]
 801b2c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2ca:	3302      	adds	r3, #2
 801b2cc:	930a      	str	r3, [sp, #40]	; 0x28
 801b2ce:	e653      	b.n	801af78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b2d0:	f47f ae65 	bne.w	801af9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801b2d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	f340 81a0 	ble.w	801b61c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801b2dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b2e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2e4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b2e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b2ea:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b2ee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b2f2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b2f6:	eef0 6a48 	vmov.f32	s13, s16
 801b2fa:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b2fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b302:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b306:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801b30a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b30e:	eef0 6a68 	vmov.f32	s13, s17
 801b312:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b316:	ee18 2a10 	vmov	r2, s16
 801b31a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b31e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b322:	ee18 2a90 	vmov	r2, s17
 801b326:	932d      	str	r3, [sp, #180]	; 0xb4
 801b328:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b32a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b32e:	932e      	str	r3, [sp, #184]	; 0xb8
 801b330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b332:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b334:	3b01      	subs	r3, #1
 801b336:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b33a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b33c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b33e:	bf08      	it	eq
 801b340:	4613      	moveq	r3, r2
 801b342:	ee16 4a90 	vmov	r4, s13
 801b346:	9306      	str	r3, [sp, #24]
 801b348:	eef0 8a67 	vmov.f32	s17, s15
 801b34c:	eeb0 8a47 	vmov.f32	s16, s14
 801b350:	e60b      	b.n	801af6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b352:	b151      	cbz	r1, 801b36a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801b354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b356:	58aa      	ldr	r2, [r5, r2]
 801b358:	9208      	str	r2, [sp, #32]
 801b35a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801b35e:	25ff      	movs	r5, #255	; 0xff
 801b360:	46a8      	mov	r8, r5
 801b362:	e68f      	b.n	801b084 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801b364:	25ff      	movs	r5, #255	; 0xff
 801b366:	46aa      	mov	sl, r5
 801b368:	e68c      	b.n	801b084 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801b36a:	25ff      	movs	r5, #255	; 0xff
 801b36c:	46aa      	mov	sl, r5
 801b36e:	e7f7      	b.n	801b360 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801b370:	1c56      	adds	r6, r2, #1
 801b372:	d193      	bne.n	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b374:	9d07      	ldr	r5, [sp, #28]
 801b376:	4295      	cmp	r5, r2
 801b378:	dd90      	ble.n	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b37a:	1c5d      	adds	r5, r3, #1
 801b37c:	db8e      	blt.n	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b37e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b380:	429d      	cmp	r5, r3
 801b382:	dd8b      	ble.n	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b384:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801b386:	9201      	str	r2, [sp, #4]
 801b388:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801b38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b38e:	9300      	str	r3, [sp, #0]
 801b390:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801b394:	9b07      	ldr	r3, [sp, #28]
 801b396:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b398:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 801b39c:	f7ff fc4e 	bl	801ac3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801b3a0:	e77c      	b.n	801b29c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b3a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b3a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b3a6:	9d07      	ldr	r5, [sp, #28]
 801b3a8:	1412      	asrs	r2, r2, #16
 801b3aa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801b3ae:	1423      	asrs	r3, r4, #16
 801b3b0:	fb05 2303 	mla	r3, r5, r3, r2
 801b3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b3b6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b3be:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801b3c2:	0e1e      	lsrs	r6, r3, #24
 801b3c4:	2900      	cmp	r1, #0
 801b3c6:	f000 811a 	beq.w	801b5fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 801b3ca:	686a      	ldr	r2, [r5, #4]
 801b3cc:	920d      	str	r2, [sp, #52]	; 0x34
 801b3ce:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801b3d2:	2800      	cmp	r0, #0
 801b3d4:	f000 811c 	beq.w	801b610 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 801b3d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b3da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801b3dc:	18aa      	adds	r2, r5, r2
 801b3de:	59ed      	ldr	r5, [r5, r7]
 801b3e0:	6852      	ldr	r2, [r2, #4]
 801b3e2:	9509      	str	r5, [sp, #36]	; 0x24
 801b3e4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801b3e8:	920f      	str	r2, [sp, #60]	; 0x3c
 801b3ea:	0e15      	lsrs	r5, r2, #24
 801b3ec:	b289      	uxth	r1, r1
 801b3ee:	b280      	uxth	r0, r0
 801b3f0:	fb01 f900 	mul.w	r9, r1, r0
 801b3f4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b3f8:	0109      	lsls	r1, r1, #4
 801b3fa:	eba1 0e09 	sub.w	lr, r1, r9
 801b3fe:	b280      	uxth	r0, r0
 801b400:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801b404:	fa1f fe8e 	uxth.w	lr, lr
 801b408:	1a12      	subs	r2, r2, r0
 801b40a:	b292      	uxth	r2, r2
 801b40c:	fb0e f10c 	mul.w	r1, lr, ip
 801b410:	fb02 1106 	mla	r1, r2, r6, r1
 801b414:	fb00 1108 	mla	r1, r0, r8, r1
 801b418:	fb09 1105 	mla	r1, r9, r5, r1
 801b41c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b420:	2900      	cmp	r1, #0
 801b422:	f000 80e0 	beq.w	801b5e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 801b426:	2eff      	cmp	r6, #255	; 0xff
 801b428:	d016      	beq.n	801b458 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 801b42a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801b42e:	4377      	muls	r7, r6
 801b430:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b434:	435e      	muls	r6, r3
 801b436:	0a3b      	lsrs	r3, r7, #8
 801b438:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b43c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b440:	443b      	add	r3, r7
 801b442:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801b446:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801b44a:	0a1b      	lsrs	r3, r3, #8
 801b44c:	0a3f      	lsrs	r7, r7, #8
 801b44e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b452:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b456:	433b      	orrs	r3, r7
 801b458:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b45c:	d01d      	beq.n	801b49a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801b45e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801b460:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b462:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b466:	fb0c f606 	mul.w	r6, ip, r6
 801b46a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b46e:	fb0c fc07 	mul.w	ip, ip, r7
 801b472:	0a37      	lsrs	r7, r6, #8
 801b474:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b478:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b47c:	4437      	add	r7, r6
 801b47e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801b482:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801b486:	0a3f      	lsrs	r7, r7, #8
 801b488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b48c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b490:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b494:	ea47 060c 	orr.w	r6, r7, ip
 801b498:	960d      	str	r6, [sp, #52]	; 0x34
 801b49a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b49e:	d01d      	beq.n	801b4dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 801b4a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b4a2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b4a6:	fb08 fc0c 	mul.w	ip, r8, ip
 801b4aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b4ae:	fb08 f806 	mul.w	r8, r8, r6
 801b4b2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801b4b6:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801b4ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b4be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b4c2:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801b4c6:	4467      	add	r7, ip
 801b4c8:	0a3f      	lsrs	r7, r7, #8
 801b4ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b4ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b4d2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b4d6:	ea47 0608 	orr.w	r6, r7, r8
 801b4da:	9609      	str	r6, [sp, #36]	; 0x24
 801b4dc:	2dff      	cmp	r5, #255	; 0xff
 801b4de:	d01a      	beq.n	801b516 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 801b4e0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b4e2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b4e6:	fb05 fc0c 	mul.w	ip, r5, ip
 801b4ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b4ee:	4375      	muls	r5, r6
 801b4f0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801b4f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b4f8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b4fc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801b500:	4467      	add	r7, ip
 801b502:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b506:	0a3f      	lsrs	r7, r7, #8
 801b508:	0a2d      	lsrs	r5, r5, #8
 801b50a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b50e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b512:	433d      	orrs	r5, r7
 801b514:	950f      	str	r5, [sp, #60]	; 0x3c
 801b516:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b518:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b51c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801b520:	fb0e f505 	mul.w	r5, lr, r5
 801b524:	fb02 5506 	mla	r5, r2, r6, r5
 801b528:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b52a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b52e:	fb00 5506 	mla	r5, r0, r6, r5
 801b532:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b534:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b538:	fb09 5506 	mla	r5, r9, r6, r5
 801b53c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801b53e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b542:	fb0e fe06 	mul.w	lr, lr, r6
 801b546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b54a:	fb02 e303 	mla	r3, r2, r3, lr
 801b54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b550:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801b554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b556:	fb00 3307 	mla	r3, r0, r7, r3
 801b55a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b55e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b562:	fb01 f10b 	mul.w	r1, r1, fp
 801b566:	0a2d      	lsrs	r5, r5, #8
 801b568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b56c:	f8ba 0000 	ldrh.w	r0, [sl]
 801b570:	1c4b      	adds	r3, r1, #1
 801b572:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b576:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b57a:	ea45 050c 	orr.w	r5, r5, ip
 801b57e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b582:	1202      	asrs	r2, r0, #8
 801b584:	0c2b      	lsrs	r3, r5, #16
 801b586:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b58a:	b2c9      	uxtb	r1, r1
 801b58c:	fb13 f30b 	smulbb	r3, r3, fp
 801b590:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b594:	fb02 3201 	mla	r2, r2, r1, r3
 801b598:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801b59c:	10c3      	asrs	r3, r0, #3
 801b59e:	b2ed      	uxtb	r5, r5
 801b5a0:	00c0      	lsls	r0, r0, #3
 801b5a2:	b2c0      	uxtb	r0, r0
 801b5a4:	fb15 f50b 	smulbb	r5, r5, fp
 801b5a8:	fb00 5001 	mla	r0, r0, r1, r5
 801b5ac:	b292      	uxth	r2, r2
 801b5ae:	fb16 f60b 	smulbb	r6, r6, fp
 801b5b2:	b280      	uxth	r0, r0
 801b5b4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801b5b8:	fb03 6301 	mla	r3, r3, r1, r6
 801b5bc:	1c51      	adds	r1, r2, #1
 801b5be:	1c46      	adds	r6, r0, #1
 801b5c0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b5c4:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801b5c8:	b29b      	uxth	r3, r3
 801b5ca:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b5ce:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801b5d2:	4332      	orrs	r2, r6
 801b5d4:	1c5e      	adds	r6, r3, #1
 801b5d6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b5da:	095b      	lsrs	r3, r3, #5
 801b5dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b5e0:	431a      	orrs	r2, r3
 801b5e2:	f8aa 2000 	strh.w	r2, [sl]
 801b5e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b5e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b5ea:	4413      	add	r3, r2
 801b5ec:	932b      	str	r3, [sp, #172]	; 0xac
 801b5ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b5f0:	441c      	add	r4, r3
 801b5f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b5f4:	3b01      	subs	r3, #1
 801b5f6:	f10a 0a02 	add.w	sl, sl, #2
 801b5fa:	9311      	str	r3, [sp, #68]	; 0x44
 801b5fc:	e4ea      	b.n	801afd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801b5fe:	b150      	cbz	r0, 801b616 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 801b600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b602:	58aa      	ldr	r2, [r5, r2]
 801b604:	9209      	str	r2, [sp, #36]	; 0x24
 801b606:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b60a:	25ff      	movs	r5, #255	; 0xff
 801b60c:	46ac      	mov	ip, r5
 801b60e:	e6ed      	b.n	801b3ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801b610:	25ff      	movs	r5, #255	; 0xff
 801b612:	46a8      	mov	r8, r5
 801b614:	e6ea      	b.n	801b3ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801b616:	25ff      	movs	r5, #255	; 0xff
 801b618:	46a8      	mov	r8, r5
 801b61a:	e7f7      	b.n	801b60c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801b61c:	b019      	add	sp, #100	; 0x64
 801b61e:	ecbd 8b08 	vpop	{d8-d11}
 801b622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b628 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b62c:	8808      	ldrh	r0, [r1, #0]
 801b62e:	b085      	sub	sp, #20
 801b630:	1206      	asrs	r6, r0, #8
 801b632:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801b636:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b63a:	9600      	str	r6, [sp, #0]
 801b63c:	10c6      	asrs	r6, r0, #3
 801b63e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b642:	9601      	str	r6, [sp, #4]
 801b644:	00c0      	lsls	r0, r0, #3
 801b646:	fb04 c603 	mla	r6, r4, r3, ip
 801b64a:	b2c0      	uxtb	r0, r0
 801b64c:	4691      	mov	r9, r2
 801b64e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801b652:	9a00      	ldr	r2, [sp, #0]
 801b654:	9002      	str	r0, [sp, #8]
 801b656:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801b65a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801b65e:	9a01      	ldr	r2, [sp, #4]
 801b660:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801b664:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801b668:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801b66c:	2c00      	cmp	r4, #0
 801b66e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801b672:	db3a      	blt.n	801b6ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801b674:	45a0      	cmp	r8, r4
 801b676:	dd38      	ble.n	801b6ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801b678:	f1bc 0f00 	cmp.w	ip, #0
 801b67c:	db33      	blt.n	801b6e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801b67e:	4563      	cmp	r3, ip
 801b680:	dd31      	ble.n	801b6e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801b682:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801b686:	f11c 0601 	adds.w	r6, ip, #1
 801b68a:	d431      	bmi.n	801b6f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801b68c:	42b3      	cmp	r3, r6
 801b68e:	dd2f      	ble.n	801b6f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801b690:	b375      	cbz	r5, 801b6f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801b692:	f8de 6004 	ldr.w	r6, [lr, #4]
 801b696:	3401      	adds	r4, #1
 801b698:	d42e      	bmi.n	801b6f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801b69a:	45a0      	cmp	r8, r4
 801b69c:	dd2c      	ble.n	801b6f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801b69e:	b35f      	cbz	r7, 801b6f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801b6a0:	f1bc 0f00 	cmp.w	ip, #0
 801b6a4:	db26      	blt.n	801b6f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801b6a6:	4563      	cmp	r3, ip
 801b6a8:	dd24      	ble.n	801b6f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801b6aa:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801b6ae:	f11c 0c01 	adds.w	ip, ip, #1
 801b6b2:	d405      	bmi.n	801b6c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801b6b4:	4563      	cmp	r3, ip
 801b6b6:	dd03      	ble.n	801b6c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801b6b8:	b115      	cbz	r5, 801b6c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801b6ba:	3301      	adds	r3, #1
 801b6bc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801b6c0:	2d0f      	cmp	r5, #15
 801b6c2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801b6c6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b6ca:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b6ce:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801b6d2:	d801      	bhi.n	801b6d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 801b6d4:	2f0f      	cmp	r7, #15
 801b6d6:	d911      	bls.n	801b6fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 801b6d8:	4b7b      	ldr	r3, [pc, #492]	; (801b8c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 801b6da:	4a7c      	ldr	r2, [pc, #496]	; (801b8cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 801b6dc:	487c      	ldr	r0, [pc, #496]	; (801b8d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 801b6de:	f240 3173 	movw	r1, #883	; 0x373
 801b6e2:	f001 fce7 	bl	801d0b4 <__assert_func>
 801b6e6:	4602      	mov	r2, r0
 801b6e8:	e7cd      	b.n	801b686 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801b6ea:	4606      	mov	r6, r0
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	e7d2      	b.n	801b696 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801b6f0:	4606      	mov	r6, r0
 801b6f2:	e7d0      	b.n	801b696 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801b6f4:	4604      	mov	r4, r0
 801b6f6:	e7da      	b.n	801b6ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 801b6f8:	4604      	mov	r4, r0
 801b6fa:	e7e1      	b.n	801b6c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801b6fc:	b2ab      	uxth	r3, r5
 801b6fe:	b2bf      	uxth	r7, r7
 801b700:	fb03 fe07 	mul.w	lr, r3, r7
 801b704:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801b708:	011b      	lsls	r3, r3, #4
 801b70a:	eba3 0c0e 	sub.w	ip, r3, lr
 801b70e:	b2bf      	uxth	r7, r7
 801b710:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801b714:	fa1f fc8c 	uxth.w	ip, ip
 801b718:	1bed      	subs	r5, r5, r7
 801b71a:	b2ad      	uxth	r5, r5
 801b71c:	fb0c f30a 	mul.w	r3, ip, sl
 801b720:	fb05 330b 	mla	r3, r5, fp, r3
 801b724:	fb07 3309 	mla	r3, r7, r9, r3
 801b728:	fb0e 3308 	mla	r3, lr, r8, r3
 801b72c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b730:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b734:	9303      	str	r3, [sp, #12]
 801b736:	d018      	beq.n	801b76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 801b738:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b73c:	fb0b f303 	mul.w	r3, fp, r3
 801b740:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b744:	fb0b fb02 	mul.w	fp, fp, r2
 801b748:	0a1a      	lsrs	r2, r3, #8
 801b74a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b74e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801b752:	441a      	add	r2, r3
 801b754:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801b758:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801b75c:	0a12      	lsrs	r2, r2, #8
 801b75e:	0a1b      	lsrs	r3, r3, #8
 801b760:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b764:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b768:	431a      	orrs	r2, r3
 801b76a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b76e:	d019      	beq.n	801b7a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 801b770:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801b774:	fb0a fb0b 	mul.w	fp, sl, fp
 801b778:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b77c:	fb0a fa06 	mul.w	sl, sl, r6
 801b780:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801b784:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b788:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b78c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801b790:	445e      	add	r6, fp
 801b792:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b796:	0a36      	lsrs	r6, r6, #8
 801b798:	0a1b      	lsrs	r3, r3, #8
 801b79a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b79e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b7a2:	431e      	orrs	r6, r3
 801b7a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b7a8:	d019      	beq.n	801b7de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 801b7aa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801b7ae:	fb09 fa0a 	mul.w	sl, r9, sl
 801b7b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b7b6:	fb09 f904 	mul.w	r9, r9, r4
 801b7ba:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801b7be:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b7c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b7c6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801b7ca:	4454      	add	r4, sl
 801b7cc:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801b7d0:	0a24      	lsrs	r4, r4, #8
 801b7d2:	0a1b      	lsrs	r3, r3, #8
 801b7d4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b7d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b7dc:	431c      	orrs	r4, r3
 801b7de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b7e2:	d019      	beq.n	801b818 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 801b7e4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801b7e8:	fb08 f909 	mul.w	r9, r8, r9
 801b7ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b7f0:	fb08 f800 	mul.w	r8, r8, r0
 801b7f4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801b7f8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b7fc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801b800:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801b804:	4448      	add	r0, r9
 801b806:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801b80a:	0a00      	lsrs	r0, r0, #8
 801b80c:	0a1b      	lsrs	r3, r3, #8
 801b80e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b816:	4318      	orrs	r0, r3
 801b818:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b81c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b820:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b824:	fb0c f808 	mul.w	r8, ip, r8
 801b828:	fb0c f606 	mul.w	r6, ip, r6
 801b82c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b830:	fb05 8803 	mla	r8, r5, r3, r8
 801b834:	fb05 6202 	mla	r2, r5, r2, r6
 801b838:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801b83c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b840:	fb07 8803 	mla	r8, r7, r3, r8
 801b844:	fb07 2704 	mla	r7, r7, r4, r2
 801b848:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801b84c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b850:	fb0e 8303 	mla	r3, lr, r3, r8
 801b854:	fb0e 7e00 	mla	lr, lr, r0, r7
 801b858:	0a1b      	lsrs	r3, r3, #8
 801b85a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b85e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b862:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b866:	ea43 0e0e 	orr.w	lr, r3, lr
 801b86a:	9b03      	ldr	r3, [sp, #12]
 801b86c:	9800      	ldr	r0, [sp, #0]
 801b86e:	9c01      	ldr	r4, [sp, #4]
 801b870:	9a02      	ldr	r2, [sp, #8]
 801b872:	43db      	mvns	r3, r3
 801b874:	b2db      	uxtb	r3, r3
 801b876:	4358      	muls	r0, r3
 801b878:	435c      	muls	r4, r3
 801b87a:	435a      	muls	r2, r3
 801b87c:	1c43      	adds	r3, r0, #1
 801b87e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b882:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801b886:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b88a:	4b12      	ldr	r3, [pc, #72]	; (801b8d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 801b88c:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 801b890:	1c50      	adds	r0, r2, #1
 801b892:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801b896:	fa5f f28e 	uxtb.w	r2, lr
 801b89a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801b89e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801b8a2:	1c62      	adds	r2, r4, #1
 801b8a4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b8a8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801b8ac:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801b8b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b8b4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801b8b8:	ea43 0e0e 	orr.w	lr, r3, lr
 801b8bc:	f8a1 e000 	strh.w	lr, [r1]
 801b8c0:	b005      	add	sp, #20
 801b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8c6:	bf00      	nop
 801b8c8:	08020997 	.word	0x08020997
 801b8cc:	08020ef5 	.word	0x08020ef5
 801b8d0:	08020a1f 	.word	0x08020a1f
 801b8d4:	fffff800 	.word	0xfffff800

0801b8d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8dc:	ed2d 8b08 	vpush	{d8-d11}
 801b8e0:	b097      	sub	sp, #92	; 0x5c
 801b8e2:	eeb0 aa40 	vmov.f32	s20, s0
 801b8e6:	9306      	str	r3, [sp, #24]
 801b8e8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801b8ec:	9307      	str	r3, [sp, #28]
 801b8ee:	9214      	str	r2, [sp, #80]	; 0x50
 801b8f0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801b8f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b8f6:	9112      	str	r1, [sp, #72]	; 0x48
 801b8f8:	9310      	str	r3, [sp, #64]	; 0x40
 801b8fa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801b8fe:	9015      	str	r0, [sp, #84]	; 0x54
 801b900:	6850      	ldr	r0, [r2, #4]
 801b902:	6812      	ldr	r2, [r2, #0]
 801b904:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801b906:	fb00 1303 	mla	r3, r0, r3, r1
 801b90a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b90e:	930a      	str	r3, [sp, #40]	; 0x28
 801b910:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	9311      	str	r3, [sp, #68]	; 0x44
 801b916:	9b07      	ldr	r3, [sp, #28]
 801b918:	009b      	lsls	r3, r3, #2
 801b91a:	eef0 9a60 	vmov.f32	s19, s1
 801b91e:	eeb0 9a41 	vmov.f32	s18, s2
 801b922:	eeb0 8a62 	vmov.f32	s16, s5
 801b926:	eef0 8a43 	vmov.f32	s17, s6
 801b92a:	eef0 ba44 	vmov.f32	s23, s8
 801b92e:	eeb0 ba64 	vmov.f32	s22, s9
 801b932:	eef0 aa45 	vmov.f32	s21, s10
 801b936:	930e      	str	r3, [sp, #56]	; 0x38
 801b938:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	dc03      	bgt.n	801b946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b93e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b940:	2b00      	cmp	r3, #0
 801b942:	f340 8361 	ble.w	801c008 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801b946:	9b06      	ldr	r3, [sp, #24]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f340 819b 	ble.w	801bc84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801b94e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b950:	1412      	asrs	r2, r2, #16
 801b952:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b956:	d42e      	bmi.n	801b9b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b958:	9807      	ldr	r0, [sp, #28]
 801b95a:	1c51      	adds	r1, r2, #1
 801b95c:	4288      	cmp	r0, r1
 801b95e:	dd2d      	ble.n	801b9bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b960:	2b00      	cmp	r3, #0
 801b962:	db2b      	blt.n	801b9bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b964:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b966:	1c59      	adds	r1, r3, #1
 801b968:	4288      	cmp	r0, r1
 801b96a:	dd27      	ble.n	801b9bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b96c:	9b06      	ldr	r3, [sp, #24]
 801b96e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b970:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b972:	3b01      	subs	r3, #1
 801b974:	fb02 1203 	mla	r2, r2, r3, r1
 801b978:	1412      	asrs	r2, r2, #16
 801b97a:	d42a      	bmi.n	801b9d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b97c:	9907      	ldr	r1, [sp, #28]
 801b97e:	3201      	adds	r2, #1
 801b980:	4291      	cmp	r1, r2
 801b982:	dd26      	ble.n	801b9d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b984:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b986:	fb02 5303 	mla	r3, r2, r3, r5
 801b98a:	141b      	asrs	r3, r3, #16
 801b98c:	d421      	bmi.n	801b9d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b98e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b990:	3301      	adds	r3, #1
 801b992:	429a      	cmp	r2, r3
 801b994:	dd1d      	ble.n	801b9d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b996:	9b06      	ldr	r3, [sp, #24]
 801b998:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b99c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b99e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	f300 81e3 	bgt.w	801bd6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801b9a6:	9b06      	ldr	r3, [sp, #24]
 801b9a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9ae:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801b9b2:	930a      	str	r3, [sp, #40]	; 0x28
 801b9b4:	e168      	b.n	801bc88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801b9b6:	1c51      	adds	r1, r2, #1
 801b9b8:	f040 8157 	bne.w	801bc6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801b9bc:	9907      	ldr	r1, [sp, #28]
 801b9be:	428a      	cmp	r2, r1
 801b9c0:	f280 8153 	bge.w	801bc6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801b9c4:	1c5f      	adds	r7, r3, #1
 801b9c6:	f2c0 8150 	blt.w	801bc6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801b9ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b9cc:	4293      	cmp	r3, r2
 801b9ce:	f280 814c 	bge.w	801bc6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801b9d2:	9b06      	ldr	r3, [sp, #24]
 801b9d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b9d6:	9313      	str	r3, [sp, #76]	; 0x4c
 801b9d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	dde3      	ble.n	801b9a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801b9de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b9e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b9e2:	1409      	asrs	r1, r1, #16
 801b9e4:	ea4f 4325 	mov.w	r3, r5, asr #16
 801b9e8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801b9ec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b9f0:	f100 81a3 	bmi.w	801bd3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801b9f4:	9c07      	ldr	r4, [sp, #28]
 801b9f6:	1c4e      	adds	r6, r1, #1
 801b9f8:	42b4      	cmp	r4, r6
 801b9fa:	f340 81a0 	ble.w	801bd3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	f2c0 819d 	blt.w	801bd3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ba04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ba06:	1c5e      	adds	r6, r3, #1
 801ba08:	42b4      	cmp	r4, r6
 801ba0a:	f340 8198 	ble.w	801bd3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ba0e:	9c07      	ldr	r4, [sp, #28]
 801ba10:	fb03 1304 	mla	r3, r3, r4, r1
 801ba14:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ba16:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801ba1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ba1e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ba22:	2a00      	cmp	r2, #0
 801ba24:	f000 816f 	beq.w	801bd06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801ba28:	6871      	ldr	r1, [r6, #4]
 801ba2a:	910b      	str	r1, [sp, #44]	; 0x2c
 801ba2c:	ea4f 6811 	mov.w	r8, r1, lsr #24
 801ba30:	2800      	cmp	r0, #0
 801ba32:	f000 8171 	beq.w	801bd18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801ba36:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ba38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ba3a:	1871      	adds	r1, r6, r1
 801ba3c:	5934      	ldr	r4, [r6, r4]
 801ba3e:	6849      	ldr	r1, [r1, #4]
 801ba40:	9408      	str	r4, [sp, #32]
 801ba42:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801ba46:	910c      	str	r1, [sp, #48]	; 0x30
 801ba48:	0e0e      	lsrs	r6, r1, #24
 801ba4a:	b292      	uxth	r2, r2
 801ba4c:	b280      	uxth	r0, r0
 801ba4e:	fb02 fb00 	mul.w	fp, r2, r0
 801ba52:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801ba56:	0112      	lsls	r2, r2, #4
 801ba58:	eba2 090b 	sub.w	r9, r2, fp
 801ba5c:	b280      	uxth	r0, r0
 801ba5e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ba62:	fa1f f989 	uxth.w	r9, r9
 801ba66:	1a09      	subs	r1, r1, r0
 801ba68:	b289      	uxth	r1, r1
 801ba6a:	fb09 f208 	mul.w	r2, r9, r8
 801ba6e:	fb01 220c 	mla	r2, r1, ip, r2
 801ba72:	fb00 220a 	mla	r2, r0, sl, r2
 801ba76:	fb0b 2206 	mla	r2, fp, r6, r2
 801ba7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ba7e:	2a00      	cmp	r2, #0
 801ba80:	f000 80e8 	beq.w	801bc54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ba84:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ba88:	d01b      	beq.n	801bac2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801ba8a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ba8e:	fb0c fe0e 	mul.w	lr, ip, lr
 801ba92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ba96:	fb0c fc03 	mul.w	ip, ip, r3
 801ba9a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801ba9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801baa2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801baa6:	4473      	add	r3, lr
 801baa8:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801baac:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801bab0:	0a1b      	lsrs	r3, r3, #8
 801bab2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bab6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801baba:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801babe:	ea43 030e 	orr.w	r3, r3, lr
 801bac2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bac6:	d01e      	beq.n	801bb06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801bac8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801baca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bace:	fb08 fc0c 	mul.w	ip, r8, ip
 801bad2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bad6:	fb08 f80e 	mul.w	r8, r8, lr
 801bada:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bade:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bae2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bae6:	44e6      	add	lr, ip
 801bae8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801baec:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801baf0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801baf4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801baf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bafc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801bb00:	ea4e 0408 	orr.w	r4, lr, r8
 801bb04:	940b      	str	r4, [sp, #44]	; 0x2c
 801bb06:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bb0a:	d01e      	beq.n	801bb4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bb0c:	9c08      	ldr	r4, [sp, #32]
 801bb0e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801bb12:	fb0a f808 	mul.w	r8, sl, r8
 801bb16:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801bb1a:	fb0a fa0c 	mul.w	sl, sl, ip
 801bb1e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801bb22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb26:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801bb2a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bb2e:	44c6      	add	lr, r8
 801bb30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bb34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bb44:	ea4e 040a 	orr.w	r4, lr, sl
 801bb48:	9408      	str	r4, [sp, #32]
 801bb4a:	2eff      	cmp	r6, #255	; 0xff
 801bb4c:	d01d      	beq.n	801bb8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801bb4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bb50:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801bb54:	fb06 f808 	mul.w	r8, r6, r8
 801bb58:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801bb5c:	fb06 f60c 	mul.w	r6, r6, ip
 801bb60:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801bb64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb68:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801bb6c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801bb70:	44c6      	add	lr, r8
 801bb72:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801bb76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb7a:	0a36      	lsrs	r6, r6, #8
 801bb7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bb84:	ea4e 0406 	orr.w	r4, lr, r6
 801bb88:	940c      	str	r4, [sp, #48]	; 0x30
 801bb8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bb8c:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801bb90:	9c08      	ldr	r4, [sp, #32]
 801bb92:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801bb96:	fb09 f606 	mul.w	r6, r9, r6
 801bb9a:	fb01 660c 	mla	r6, r1, ip, r6
 801bb9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bba2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bba4:	fb00 660c 	mla	r6, r0, ip, r6
 801bba8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bbac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bbae:	fb0b 660c 	mla	r6, fp, ip, r6
 801bbb2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801bbb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bbba:	fb09 f90c 	mul.w	r9, r9, ip
 801bbbe:	fb01 9303 	mla	r3, r1, r3, r9
 801bbc2:	9908      	ldr	r1, [sp, #32]
 801bbc4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801bbc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bbca:	fb00 330e 	mla	r3, r0, lr, r3
 801bbce:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801bbd2:	fb0b 3b00 	mla	fp, fp, r0, r3
 801bbd6:	0a36      	lsrs	r6, r6, #8
 801bbd8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bbdc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bbe0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bbe4:	ea46 060b 	orr.w	r6, r6, fp
 801bbe8:	2aff      	cmp	r2, #255	; 0xff
 801bbea:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801bbee:	f000 8099 	beq.w	801bd24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801bbf2:	8839      	ldrh	r1, [r7, #0]
 801bbf4:	43d2      	mvns	r2, r2
 801bbf6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801bbfa:	fa5f fe82 	uxtb.w	lr, r2
 801bbfe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801bc02:	fb0c fc0e 	mul.w	ip, ip, lr
 801bc06:	10c8      	asrs	r0, r1, #3
 801bc08:	00ca      	lsls	r2, r1, #3
 801bc0a:	f10c 0101 	add.w	r1, ip, #1
 801bc0e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801bc12:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 801bc16:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801bc1a:	b2d2      	uxtb	r2, r2
 801bc1c:	4952      	ldr	r1, [pc, #328]	; (801bd68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 801bc1e:	fb02 f20e 	mul.w	r2, r2, lr
 801bc22:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801bc26:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bc2a:	1c51      	adds	r1, r2, #1
 801bc2c:	fb00 f00e 	mul.w	r0, r0, lr
 801bc30:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bc34:	b2f6      	uxtb	r6, r6
 801bc36:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801bc3a:	1c42      	adds	r2, r0, #1
 801bc3c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bc40:	b2db      	uxtb	r3, r3
 801bc42:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801bc46:	00db      	lsls	r3, r3, #3
 801bc48:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 801bc4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bc50:	431e      	orrs	r6, r3
 801bc52:	803e      	strh	r6, [r7, #0]
 801bc54:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bc56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801bc58:	441a      	add	r2, r3
 801bc5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bc5c:	9229      	str	r2, [sp, #164]	; 0xa4
 801bc5e:	441d      	add	r5, r3
 801bc60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bc62:	3b01      	subs	r3, #1
 801bc64:	3702      	adds	r7, #2
 801bc66:	9313      	str	r3, [sp, #76]	; 0x4c
 801bc68:	e6b6      	b.n	801b9d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801bc6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bc6c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801bc6e:	441a      	add	r2, r3
 801bc70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bc72:	9229      	str	r2, [sp, #164]	; 0xa4
 801bc74:	441d      	add	r5, r3
 801bc76:	9b06      	ldr	r3, [sp, #24]
 801bc78:	3b01      	subs	r3, #1
 801bc7a:	9306      	str	r3, [sp, #24]
 801bc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc7e:	3302      	adds	r3, #2
 801bc80:	930a      	str	r3, [sp, #40]	; 0x28
 801bc82:	e660      	b.n	801b946 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bc84:	f47f ae72 	bne.w	801b96c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801bc88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	f340 81bc 	ble.w	801c008 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801bc90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801bc94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801bc9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc9e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801bca2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bca6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bcaa:	eef0 6a48 	vmov.f32	s13, s16
 801bcae:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bcb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bcb6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bcba:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801bcbe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bcc2:	eef0 6a68 	vmov.f32	s13, s17
 801bcc6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bcca:	ee18 2a10 	vmov	r2, s16
 801bcce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bcd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcd6:	ee18 2a90 	vmov	r2, s17
 801bcda:	932b      	str	r3, [sp, #172]	; 0xac
 801bcdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bcde:	fb92 f3f3 	sdiv	r3, r2, r3
 801bce2:	932c      	str	r3, [sp, #176]	; 0xb0
 801bce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bce8:	3b01      	subs	r3, #1
 801bcea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bcee:	9312      	str	r3, [sp, #72]	; 0x48
 801bcf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bcf2:	bf08      	it	eq
 801bcf4:	4613      	moveq	r3, r2
 801bcf6:	ee16 5a90 	vmov	r5, s13
 801bcfa:	9306      	str	r3, [sp, #24]
 801bcfc:	eef0 8a67 	vmov.f32	s17, s15
 801bd00:	eeb0 8a47 	vmov.f32	s16, s14
 801bd04:	e618      	b.n	801b938 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bd06:	b150      	cbz	r0, 801bd1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801bd08:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bd0a:	5871      	ldr	r1, [r6, r1]
 801bd0c:	9108      	str	r1, [sp, #32]
 801bd0e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801bd12:	26ff      	movs	r6, #255	; 0xff
 801bd14:	46b0      	mov	r8, r6
 801bd16:	e698      	b.n	801ba4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801bd18:	26ff      	movs	r6, #255	; 0xff
 801bd1a:	46b2      	mov	sl, r6
 801bd1c:	e695      	b.n	801ba4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801bd1e:	26ff      	movs	r6, #255	; 0xff
 801bd20:	46b2      	mov	sl, r6
 801bd22:	e7f7      	b.n	801bd14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801bd24:	0972      	lsrs	r2, r6, #5
 801bd26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801bd2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bd2e:	f023 0307 	bic.w	r3, r3, #7
 801bd32:	4313      	orrs	r3, r2
 801bd34:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bd38:	e78a      	b.n	801bc50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 801bd3a:	1c4e      	adds	r6, r1, #1
 801bd3c:	d18a      	bne.n	801bc54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801bd3e:	9c07      	ldr	r4, [sp, #28]
 801bd40:	428c      	cmp	r4, r1
 801bd42:	dd87      	ble.n	801bc54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801bd44:	1c5c      	adds	r4, r3, #1
 801bd46:	db85      	blt.n	801bc54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801bd48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801bd4a:	429c      	cmp	r4, r3
 801bd4c:	dd82      	ble.n	801bc54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801bd4e:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801bd52:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801bd56:	9400      	str	r4, [sp, #0]
 801bd58:	9b07      	ldr	r3, [sp, #28]
 801bd5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bd5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801bd5e:	4639      	mov	r1, r7
 801bd60:	f7ff fc62 	bl	801b628 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801bd64:	e776      	b.n	801bc54 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801bd66:	bf00      	nop
 801bd68:	fffff800 	.word	0xfffff800
 801bd6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bd6e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801bd70:	9c07      	ldr	r4, [sp, #28]
 801bd72:	1409      	asrs	r1, r1, #16
 801bd74:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bd78:	142b      	asrs	r3, r5, #16
 801bd7a:	fb04 1303 	mla	r3, r4, r3, r1
 801bd7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd80:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801bd84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801bd88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bd8c:	0e1f      	lsrs	r7, r3, #24
 801bd8e:	2a00      	cmp	r2, #0
 801bd90:	f000 811d 	beq.w	801bfce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801bd94:	6871      	ldr	r1, [r6, #4]
 801bd96:	910d      	str	r1, [sp, #52]	; 0x34
 801bd98:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801bd9c:	2800      	cmp	r0, #0
 801bd9e:	f000 811f 	beq.w	801bfe0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801bda2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bda4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bda6:	1871      	adds	r1, r6, r1
 801bda8:	5934      	ldr	r4, [r6, r4]
 801bdaa:	6849      	ldr	r1, [r1, #4]
 801bdac:	9409      	str	r4, [sp, #36]	; 0x24
 801bdae:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801bdb2:	910f      	str	r1, [sp, #60]	; 0x3c
 801bdb4:	0e0e      	lsrs	r6, r1, #24
 801bdb6:	b292      	uxth	r2, r2
 801bdb8:	b280      	uxth	r0, r0
 801bdba:	fb02 fb00 	mul.w	fp, r2, r0
 801bdbe:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801bdc2:	0112      	lsls	r2, r2, #4
 801bdc4:	eba2 080b 	sub.w	r8, r2, fp
 801bdc8:	b280      	uxth	r0, r0
 801bdca:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801bdce:	fa1f f888 	uxth.w	r8, r8
 801bdd2:	1a09      	subs	r1, r1, r0
 801bdd4:	b289      	uxth	r1, r1
 801bdd6:	fb08 f20e 	mul.w	r2, r8, lr
 801bdda:	fb01 2207 	mla	r2, r1, r7, r2
 801bdde:	fb00 2209 	mla	r2, r0, r9, r2
 801bde2:	fb0b 2206 	mla	r2, fp, r6, r2
 801bde6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801bdea:	2a00      	cmp	r2, #0
 801bdec:	f000 80e3 	beq.w	801bfb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801bdf0:	2fff      	cmp	r7, #255	; 0xff
 801bdf2:	d01a      	beq.n	801be2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 801bdf4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801bdf8:	fb07 fc0c 	mul.w	ip, r7, ip
 801bdfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801be00:	435f      	muls	r7, r3
 801be02:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801be06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801be0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801be0e:	4463      	add	r3, ip
 801be10:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801be14:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801be18:	0a1b      	lsrs	r3, r3, #8
 801be1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801be22:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801be26:	ea43 030c 	orr.w	r3, r3, ip
 801be2a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801be2e:	d01e      	beq.n	801be6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801be30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801be32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801be36:	fb0e f707 	mul.w	r7, lr, r7
 801be3a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801be3e:	fb0e fe0c 	mul.w	lr, lr, ip
 801be42:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801be46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801be4a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801be4e:	44bc      	add	ip, r7
 801be50:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801be54:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801be58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801be64:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801be68:	ea4c 040e 	orr.w	r4, ip, lr
 801be6c:	940d      	str	r4, [sp, #52]	; 0x34
 801be6e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801be72:	d01e      	beq.n	801beb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801be74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801be76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801be7a:	fb09 fe0e 	mul.w	lr, r9, lr
 801be7e:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801be82:	fb09 f907 	mul.w	r9, r9, r7
 801be86:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801be8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801be8e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801be92:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801be96:	44f4      	add	ip, lr
 801be98:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801be9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bea0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bea4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bea8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801beac:	ea4c 0409 	orr.w	r4, ip, r9
 801beb0:	9409      	str	r4, [sp, #36]	; 0x24
 801beb2:	2eff      	cmp	r6, #255	; 0xff
 801beb4:	d01c      	beq.n	801bef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 801beb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801beb8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bebc:	fb06 fe0e 	mul.w	lr, r6, lr
 801bec0:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801bec4:	437e      	muls	r6, r7
 801bec6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801beca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bece:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801bed2:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801bed6:	44f4      	add	ip, lr
 801bed8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801bedc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bee0:	0a36      	lsrs	r6, r6, #8
 801bee2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bee6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801beea:	ea4c 0406 	orr.w	r4, ip, r6
 801beee:	940f      	str	r4, [sp, #60]	; 0x3c
 801bef0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bef2:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801bef6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bef8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801befc:	fb08 f606 	mul.w	r6, r8, r6
 801bf00:	fb01 6607 	mla	r6, r1, r7, r6
 801bf04:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bf08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bf0a:	fb00 6607 	mla	r6, r0, r7, r6
 801bf0e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bf12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf14:	fb0b 6607 	mla	r6, fp, r7, r6
 801bf18:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801bf1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf20:	fb08 f807 	mul.w	r8, r8, r7
 801bf24:	fb01 8303 	mla	r3, r1, r3, r8
 801bf28:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bf2a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801bf2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bf30:	fb00 330c 	mla	r3, r0, ip, r3
 801bf34:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801bf38:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801bf3c:	0a36      	lsrs	r6, r6, #8
 801bf3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf42:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf46:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bf4a:	ea46 060e 	orr.w	r6, r6, lr
 801bf4e:	2aff      	cmp	r2, #255	; 0xff
 801bf50:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801bf54:	d04a      	beq.n	801bfec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801bf56:	f8ba 1000 	ldrh.w	r1, [sl]
 801bf5a:	43d2      	mvns	r2, r2
 801bf5c:	120f      	asrs	r7, r1, #8
 801bf5e:	fa5f fc82 	uxtb.w	ip, r2
 801bf62:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bf66:	fb07 f70c 	mul.w	r7, r7, ip
 801bf6a:	10c8      	asrs	r0, r1, #3
 801bf6c:	00ca      	lsls	r2, r1, #3
 801bf6e:	1c79      	adds	r1, r7, #1
 801bf70:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801bf74:	0c37      	lsrs	r7, r6, #16
 801bf76:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801bf7a:	b2d2      	uxtb	r2, r2
 801bf7c:	4925      	ldr	r1, [pc, #148]	; (801c014 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 801bf7e:	fb02 f20c 	mul.w	r2, r2, ip
 801bf82:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 801bf86:	1c51      	adds	r1, r2, #1
 801bf88:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bf8c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bf90:	b2f6      	uxtb	r6, r6
 801bf92:	fb00 f00c 	mul.w	r0, r0, ip
 801bf96:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801bf9a:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 801bf9e:	1c46      	adds	r6, r0, #1
 801bfa0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801bfa4:	b2de      	uxtb	r6, r3
 801bfa6:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801bfaa:	00f6      	lsls	r6, r6, #3
 801bfac:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bfb0:	4337      	orrs	r7, r6
 801bfb2:	f8aa 7000 	strh.w	r7, [sl]
 801bfb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bfb8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801bfba:	441a      	add	r2, r3
 801bfbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bfbe:	9229      	str	r2, [sp, #164]	; 0xa4
 801bfc0:	441d      	add	r5, r3
 801bfc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bfc4:	3b01      	subs	r3, #1
 801bfc6:	f10a 0a02 	add.w	sl, sl, #2
 801bfca:	9313      	str	r3, [sp, #76]	; 0x4c
 801bfcc:	e4e7      	b.n	801b99e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 801bfce:	b150      	cbz	r0, 801bfe6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 801bfd0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bfd2:	5871      	ldr	r1, [r6, r1]
 801bfd4:	9109      	str	r1, [sp, #36]	; 0x24
 801bfd6:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801bfda:	26ff      	movs	r6, #255	; 0xff
 801bfdc:	46b6      	mov	lr, r6
 801bfde:	e6ea      	b.n	801bdb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801bfe0:	26ff      	movs	r6, #255	; 0xff
 801bfe2:	46b1      	mov	r9, r6
 801bfe4:	e6e7      	b.n	801bdb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801bfe6:	26ff      	movs	r6, #255	; 0xff
 801bfe8:	46b1      	mov	r9, r6
 801bfea:	e7f7      	b.n	801bfdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 801bfec:	0972      	lsrs	r2, r6, #5
 801bfee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801bff2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bff6:	f023 0307 	bic.w	r3, r3, #7
 801bffa:	4313      	orrs	r3, r2
 801bffc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c000:	431e      	orrs	r6, r3
 801c002:	f8aa 6000 	strh.w	r6, [sl]
 801c006:	e7d6      	b.n	801bfb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801c008:	b017      	add	sp, #92	; 0x5c
 801c00a:	ecbd 8b08 	vpop	{d8-d11}
 801c00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c012:	bf00      	nop
 801c014:	fffff800 	.word	0xfffff800

0801c018 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801c018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c01c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801c020:	2c00      	cmp	r4, #0
 801c022:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c026:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c02a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801c02e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c032:	fb04 ce03 	mla	lr, r4, r3, ip
 801c036:	db60      	blt.n	801c0fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801c038:	45a1      	cmp	r9, r4
 801c03a:	dd5e      	ble.n	801c0fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801c03c:	f1bc 0f00 	cmp.w	ip, #0
 801c040:	db59      	blt.n	801c0f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801c042:	45e0      	cmp	r8, ip
 801c044:	dd57      	ble.n	801c0f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801c046:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801c04a:	f01e 0f01 	tst.w	lr, #1
 801c04e:	5c16      	ldrb	r6, [r2, r0]
 801c050:	bf0c      	ite	eq
 801c052:	f006 060f 	andeq.w	r6, r6, #15
 801c056:	1136      	asrne	r6, r6, #4
 801c058:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c05c:	b2f6      	uxtb	r6, r6
 801c05e:	f11c 0001 	adds.w	r0, ip, #1
 801c062:	d44d      	bmi.n	801c100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801c064:	4580      	cmp	r8, r0
 801c066:	dd4b      	ble.n	801c100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801c068:	2d00      	cmp	r5, #0
 801c06a:	d04b      	beq.n	801c104 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 801c06c:	f10e 0a01 	add.w	sl, lr, #1
 801c070:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801c074:	f01a 0f01 	tst.w	sl, #1
 801c078:	5c10      	ldrb	r0, [r2, r0]
 801c07a:	bf0c      	ite	eq
 801c07c:	f000 000f 	andeq.w	r0, r0, #15
 801c080:	1100      	asrne	r0, r0, #4
 801c082:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c086:	b2c0      	uxtb	r0, r0
 801c088:	3401      	adds	r4, #1
 801c08a:	d43f      	bmi.n	801c10c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801c08c:	45a1      	cmp	r9, r4
 801c08e:	dd3d      	ble.n	801c10c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801c090:	2f00      	cmp	r7, #0
 801c092:	f000 80a0 	beq.w	801c1d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1be>
 801c096:	f1bc 0f00 	cmp.w	ip, #0
 801c09a:	db35      	blt.n	801c108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801c09c:	45e0      	cmp	r8, ip
 801c09e:	dd33      	ble.n	801c108 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801c0a0:	eb03 090e 	add.w	r9, r3, lr
 801c0a4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801c0a8:	f019 0f01 	tst.w	r9, #1
 801c0ac:	5d14      	ldrb	r4, [r2, r4]
 801c0ae:	bf0c      	ite	eq
 801c0b0:	f004 040f 	andeq.w	r4, r4, #15
 801c0b4:	1124      	asrne	r4, r4, #4
 801c0b6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c0ba:	b2e4      	uxtb	r4, r4
 801c0bc:	f11c 0c01 	adds.w	ip, ip, #1
 801c0c0:	d427      	bmi.n	801c112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801c0c2:	45e0      	cmp	r8, ip
 801c0c4:	dd25      	ble.n	801c112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801c0c6:	b335      	cbz	r5, 801c116 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 801c0c8:	3301      	adds	r3, #1
 801c0ca:	449e      	add	lr, r3
 801c0cc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c0d0:	f01e 0f01 	tst.w	lr, #1
 801c0d4:	5cd2      	ldrb	r2, [r2, r3]
 801c0d6:	bf0c      	ite	eq
 801c0d8:	f002 020f 	andeq.w	r2, r2, #15
 801c0dc:	1112      	asrne	r2, r2, #4
 801c0de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c0e2:	b2d3      	uxtb	r3, r2
 801c0e4:	2d0f      	cmp	r5, #15
 801c0e6:	d917      	bls.n	801c118 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 801c0e8:	4b3d      	ldr	r3, [pc, #244]	; (801c1e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801c0ea:	4a3e      	ldr	r2, [pc, #248]	; (801c1e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801c0ec:	483e      	ldr	r0, [pc, #248]	; (801c1e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 801c0ee:	f240 3173 	movw	r1, #883	; 0x373
 801c0f2:	f000 ffdf 	bl	801d0b4 <__assert_func>
 801c0f6:	2600      	movs	r6, #0
 801c0f8:	e7b1      	b.n	801c05e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 801c0fa:	2000      	movs	r0, #0
 801c0fc:	4606      	mov	r6, r0
 801c0fe:	e7c3      	b.n	801c088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c100:	2000      	movs	r0, #0
 801c102:	e7c1      	b.n	801c088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c104:	4628      	mov	r0, r5
 801c106:	e7bf      	b.n	801c088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c108:	2400      	movs	r4, #0
 801c10a:	e7d7      	b.n	801c0bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 801c10c:	2300      	movs	r3, #0
 801c10e:	461c      	mov	r4, r3
 801c110:	e7e8      	b.n	801c0e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801c112:	2300      	movs	r3, #0
 801c114:	e7e6      	b.n	801c0e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801c116:	462b      	mov	r3, r5
 801c118:	2f0f      	cmp	r7, #15
 801c11a:	d8e5      	bhi.n	801c0e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801c11c:	b2ad      	uxth	r5, r5
 801c11e:	b2bf      	uxth	r7, r7
 801c120:	fb05 fc07 	mul.w	ip, r5, r7
 801c124:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801c128:	012d      	lsls	r5, r5, #4
 801c12a:	b2bf      	uxth	r7, r7
 801c12c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801c130:	eba5 050c 	sub.w	r5, r5, ip
 801c134:	1bd2      	subs	r2, r2, r7
 801c136:	b2ad      	uxth	r5, r5
 801c138:	b292      	uxth	r2, r2
 801c13a:	4368      	muls	r0, r5
 801c13c:	fb06 0002 	mla	r0, r6, r2, r0
 801c140:	fb07 0404 	mla	r4, r7, r4, r0
 801c144:	fb0c 4303 	mla	r3, ip, r3, r4
 801c148:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d040      	beq.n	801c1d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 801c150:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801c154:	4a25      	ldr	r2, [pc, #148]	; (801c1ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d4>)
 801c156:	4343      	muls	r3, r0
 801c158:	1c58      	adds	r0, r3, #1
 801c15a:	6816      	ldr	r6, [r2, #0]
 801c15c:	880a      	ldrh	r2, [r1, #0]
 801c15e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c162:	1200      	asrs	r0, r0, #8
 801c164:	b284      	uxth	r4, r0
 801c166:	1215      	asrs	r5, r2, #8
 801c168:	43c0      	mvns	r0, r0
 801c16a:	b2c3      	uxtb	r3, r0
 801c16c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c170:	1230      	asrs	r0, r6, #8
 801c172:	fb15 f503 	smulbb	r5, r5, r3
 801c176:	10d7      	asrs	r7, r2, #3
 801c178:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c17c:	fb00 5004 	mla	r0, r0, r4, r5
 801c180:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c184:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801c188:	00d2      	lsls	r2, r2, #3
 801c18a:	fb17 f703 	smulbb	r7, r7, r3
 801c18e:	b2d2      	uxtb	r2, r2
 801c190:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c194:	00f6      	lsls	r6, r6, #3
 801c196:	fb05 7504 	mla	r5, r5, r4, r7
 801c19a:	fb12 f303 	smulbb	r3, r2, r3
 801c19e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c1a2:	fb06 3304 	mla	r3, r6, r4, r3
 801c1a6:	b2ad      	uxth	r5, r5
 801c1a8:	b29a      	uxth	r2, r3
 801c1aa:	b280      	uxth	r0, r0
 801c1ac:	1c6b      	adds	r3, r5, #1
 801c1ae:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801c1b2:	1c44      	adds	r4, r0, #1
 801c1b4:	095b      	lsrs	r3, r3, #5
 801c1b6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c1ba:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c1be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c1c2:	4303      	orrs	r3, r0
 801c1c4:	1c50      	adds	r0, r2, #1
 801c1c6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c1ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c1ce:	4313      	orrs	r3, r2
 801c1d0:	800b      	strh	r3, [r1, #0]
 801c1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1d6:	2d0f      	cmp	r5, #15
 801c1d8:	d886      	bhi.n	801c0e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801c1da:	463b      	mov	r3, r7
 801c1dc:	463c      	mov	r4, r7
 801c1de:	e79d      	b.n	801c11c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 801c1e0:	08020997 	.word	0x08020997
 801c1e4:	08020ef5 	.word	0x08020ef5
 801c1e8:	08020a1f 	.word	0x08020a1f
 801c1ec:	2002edd4 	.word	0x2002edd4

0801c1f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1f4:	ed2d 8b08 	vpush	{d8-d11}
 801c1f8:	b099      	sub	sp, #100	; 0x64
 801c1fa:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 801c1fe:	9309      	str	r3, [sp, #36]	; 0x24
 801c200:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801c204:	930a      	str	r3, [sp, #40]	; 0x28
 801c206:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801c20a:	9216      	str	r2, [sp, #88]	; 0x58
 801c20c:	930b      	str	r3, [sp, #44]	; 0x2c
 801c20e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c210:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801c214:	910f      	str	r1, [sp, #60]	; 0x3c
 801c216:	9310      	str	r3, [sp, #64]	; 0x40
 801c218:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c21c:	9017      	str	r0, [sp, #92]	; 0x5c
 801c21e:	6850      	ldr	r0, [r2, #4]
 801c220:	6812      	ldr	r2, [r2, #0]
 801c222:	fb00 1303 	mla	r3, r0, r3, r1
 801c226:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 801c22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c22c:	3301      	adds	r3, #1
 801c22e:	f023 0301 	bic.w	r3, r3, #1
 801c232:	930c      	str	r3, [sp, #48]	; 0x30
 801c234:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c236:	681f      	ldr	r7, [r3, #0]
 801c238:	eeb0 aa40 	vmov.f32	s20, s0
 801c23c:	eef0 9a60 	vmov.f32	s19, s1
 801c240:	eeb0 9a41 	vmov.f32	s18, s2
 801c244:	eeb0 8a62 	vmov.f32	s16, s5
 801c248:	eef0 8a43 	vmov.f32	s17, s6
 801c24c:	eef0 ba44 	vmov.f32	s23, s8
 801c250:	eeb0 ba64 	vmov.f32	s22, s9
 801c254:	eef0 aa45 	vmov.f32	s21, s10
 801c258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	dc03      	bgt.n	801c266 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801c25e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c260:	2b00      	cmp	r3, #0
 801c262:	f340 826b 	ble.w	801c73c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c268:	2b00      	cmp	r3, #0
 801c26a:	f340 811f 	ble.w	801c4ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801c26e:	1422      	asrs	r2, r4, #16
 801c270:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c274:	d42d      	bmi.n	801c2d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801c276:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c278:	1c51      	adds	r1, r2, #1
 801c27a:	4288      	cmp	r0, r1
 801c27c:	dd2c      	ble.n	801c2d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c27e:	2b00      	cmp	r3, #0
 801c280:	db2a      	blt.n	801c2d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c282:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c284:	1c59      	adds	r1, r3, #1
 801c286:	4288      	cmp	r0, r1
 801c288:	dd26      	ble.n	801c2d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c28c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c28e:	3b01      	subs	r3, #1
 801c290:	fb02 4203 	mla	r2, r2, r3, r4
 801c294:	1412      	asrs	r2, r2, #16
 801c296:	d42a      	bmi.n	801c2ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c298:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c29a:	3201      	adds	r2, #1
 801c29c:	4291      	cmp	r1, r2
 801c29e:	dd26      	ble.n	801c2ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c2a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c2a2:	fb02 6303 	mla	r3, r2, r3, r6
 801c2a6:	141b      	asrs	r3, r3, #16
 801c2a8:	d421      	bmi.n	801c2ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c2ac:	3301      	adds	r3, #1
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	dd1d      	ble.n	801c2ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801c2b2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c2b6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c2ba:	9311      	str	r3, [sp, #68]	; 0x44
 801c2bc:	46d1      	mov	r9, sl
 801c2be:	f1bb 0f00 	cmp.w	fp, #0
 801c2c2:	f300 8163 	bgt.w	801c58c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39c>
 801c2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2c8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c2cc:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801c2d0:	e0ee      	b.n	801c4b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801c2d2:	1c51      	adds	r1, r2, #1
 801c2d4:	f040 80e0 	bne.w	801c498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801c2d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c2da:	4291      	cmp	r1, r2
 801c2dc:	f340 80dc 	ble.w	801c498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801c2e0:	1c5a      	adds	r2, r3, #1
 801c2e2:	f2c0 80d9 	blt.w	801c498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801c2e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c2e8:	4293      	cmp	r3, r2
 801c2ea:	f280 80d5 	bge.w	801c498 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801c2ee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c2f2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c2f6:	9311      	str	r3, [sp, #68]	; 0x44
 801c2f8:	46d0      	mov	r8, sl
 801c2fa:	f1b9 0f00 	cmp.w	r9, #0
 801c2fe:	dde2      	ble.n	801c2c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801c300:	1420      	asrs	r0, r4, #16
 801c302:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c306:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c30a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c30e:	f100 8122 	bmi.w	801c556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 801c312:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c314:	f100 0c01 	add.w	ip, r0, #1
 801c318:	4565      	cmp	r5, ip
 801c31a:	f340 811e 	ble.w	801c55a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801c31e:	2b00      	cmp	r3, #0
 801c320:	f2c0 811b 	blt.w	801c55a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801c324:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c326:	f103 0c01 	add.w	ip, r3, #1
 801c32a:	4565      	cmp	r5, ip
 801c32c:	f340 8115 	ble.w	801c55a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801c330:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c332:	fb03 0305 	mla	r3, r3, r5, r0
 801c336:	0858      	lsrs	r0, r3, #1
 801c338:	07dd      	lsls	r5, r3, #31
 801c33a:	5c38      	ldrb	r0, [r7, r0]
 801c33c:	bf54      	ite	pl
 801c33e:	f000 000f 	andpl.w	r0, r0, #15
 801c342:	1100      	asrmi	r0, r0, #4
 801c344:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c348:	b2c0      	uxtb	r0, r0
 801c34a:	2a00      	cmp	r2, #0
 801c34c:	f000 80ef 	beq.w	801c52e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801c350:	f103 0e01 	add.w	lr, r3, #1
 801c354:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801c358:	f01e 0f01 	tst.w	lr, #1
 801c35c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c360:	bf0c      	ite	eq
 801c362:	f00c 0c0f 	andeq.w	ip, ip, #15
 801c366:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801c36a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c36e:	fa5f f58c 	uxtb.w	r5, ip
 801c372:	9512      	str	r5, [sp, #72]	; 0x48
 801c374:	b1f9      	cbz	r1, 801c3b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801c376:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c378:	442b      	add	r3, r5
 801c37a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c37e:	07dd      	lsls	r5, r3, #31
 801c380:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c384:	bf54      	ite	pl
 801c386:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c38a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c38e:	3301      	adds	r3, #1
 801c390:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c394:	fa5f f58c 	uxtb.w	r5, ip
 801c398:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c39c:	950d      	str	r5, [sp, #52]	; 0x34
 801c39e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c3a2:	07dd      	lsls	r5, r3, #31
 801c3a4:	bf54      	ite	pl
 801c3a6:	f00c 030f 	andpl.w	r3, ip, #15
 801c3aa:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801c3ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c3b2:	b2db      	uxtb	r3, r3
 801c3b4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c3b6:	b292      	uxth	r2, r2
 801c3b8:	b289      	uxth	r1, r1
 801c3ba:	fb02 f301 	mul.w	r3, r2, r1
 801c3be:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801c3c2:	0112      	lsls	r2, r2, #4
 801c3c4:	b289      	uxth	r1, r1
 801c3c6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801c3ca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c3cc:	1ad2      	subs	r2, r2, r3
 801c3ce:	ebac 0c01 	sub.w	ip, ip, r1
 801c3d2:	b292      	uxth	r2, r2
 801c3d4:	436a      	muls	r2, r5
 801c3d6:	fa1f fc8c 	uxth.w	ip, ip
 801c3da:	fb00 200c 	mla	r0, r0, ip, r2
 801c3de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3e0:	fb01 0102 	mla	r1, r1, r2, r0
 801c3e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c3e6:	fb03 1302 	mla	r3, r3, r2, r1
 801c3ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d049      	beq.n	801c486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801c3f2:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c3f4:	4ac5      	ldr	r2, [pc, #788]	; (801c70c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801c3f6:	4dc6      	ldr	r5, [pc, #792]	; (801c710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801c3f8:	f8d2 e000 	ldr.w	lr, [r2]
 801c3fc:	f8b8 2000 	ldrh.w	r2, [r8]
 801c400:	434b      	muls	r3, r1
 801c402:	1c59      	adds	r1, r3, #1
 801c404:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c408:	121b      	asrs	r3, r3, #8
 801c40a:	b299      	uxth	r1, r3
 801c40c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c410:	43db      	mvns	r3, r3
 801c412:	b2db      	uxtb	r3, r3
 801c414:	ea4f 202e 	mov.w	r0, lr, asr #8
 801c418:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c41c:	fb1c fc03 	smulbb	ip, ip, r3
 801c420:	ea4f 0be2 	mov.w	fp, r2, asr #3
 801c424:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c428:	fb00 c001 	mla	r0, r0, r1, ip
 801c42c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801c430:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801c434:	fb1b fb03 	smulbb	fp, fp, r3
 801c438:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c43c:	00d2      	lsls	r2, r2, #3
 801c43e:	fb0c bc01 	mla	ip, ip, r1, fp
 801c442:	b2d2      	uxtb	r2, r2
 801c444:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801c448:	fb12 f303 	smulbb	r3, r2, r3
 801c44c:	fa1f fc8c 	uxth.w	ip, ip
 801c450:	fa5f fe8e 	uxtb.w	lr, lr
 801c454:	b280      	uxth	r0, r0
 801c456:	fb0e 3101 	mla	r1, lr, r1, r3
 801c45a:	f10c 0201 	add.w	r2, ip, #1
 801c45e:	b289      	uxth	r1, r1
 801c460:	1c43      	adds	r3, r0, #1
 801c462:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801c466:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c46a:	0952      	lsrs	r2, r2, #5
 801c46c:	1c4b      	adds	r3, r1, #1
 801c46e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c472:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c476:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c47a:	4310      	orrs	r0, r2
 801c47c:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801c480:	4308      	orrs	r0, r1
 801c482:	f8a8 0000 	strh.w	r0, [r8]
 801c486:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c488:	441c      	add	r4, r3
 801c48a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c48c:	f108 0802 	add.w	r8, r8, #2
 801c490:	441e      	add	r6, r3
 801c492:	f109 39ff 	add.w	r9, r9, #4294967295
 801c496:	e730      	b.n	801c2fa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801c498:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c49a:	441c      	add	r4, r3
 801c49c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c49e:	441e      	add	r6, r3
 801c4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4a2:	3b01      	subs	r3, #1
 801c4a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4a6:	f10a 0a02 	add.w	sl, sl, #2
 801c4aa:	e6dc      	b.n	801c266 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801c4ac:	f47f aeed 	bne.w	801c28a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801c4b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	f340 8142 	ble.w	801c73c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801c4b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c4bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c4c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c4c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c4c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c4ca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c4ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c4d2:	eef0 6a48 	vmov.f32	s13, s16
 801c4d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c4da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4de:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c4e2:	ee16 4a90 	vmov	r4, s13
 801c4e6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c4ea:	eef0 6a68 	vmov.f32	s13, s17
 801c4ee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c4f2:	ee18 2a10 	vmov	r2, s16
 801c4f6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c4fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801c4fe:	ee18 2a90 	vmov	r2, s17
 801c502:	932d      	str	r3, [sp, #180]	; 0xb4
 801c504:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c506:	fb92 f3f3 	sdiv	r3, r2, r3
 801c50a:	932e      	str	r3, [sp, #184]	; 0xb8
 801c50c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c50e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c510:	3b01      	subs	r3, #1
 801c512:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c516:	930f      	str	r3, [sp, #60]	; 0x3c
 801c518:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c51a:	bf08      	it	eq
 801c51c:	4613      	moveq	r3, r2
 801c51e:	ee16 6a90 	vmov	r6, s13
 801c522:	9309      	str	r3, [sp, #36]	; 0x24
 801c524:	eef0 8a67 	vmov.f32	s17, s15
 801c528:	eeb0 8a47 	vmov.f32	s16, s14
 801c52c:	e694      	b.n	801c258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c52e:	2900      	cmp	r1, #0
 801c530:	f43f af41 	beq.w	801c3b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801c534:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c536:	442b      	add	r3, r5
 801c538:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c53c:	07db      	lsls	r3, r3, #31
 801c53e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c542:	bf54      	ite	pl
 801c544:	f00c 030f 	andpl.w	r3, ip, #15
 801c548:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801c54c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c550:	b2db      	uxtb	r3, r3
 801c552:	930d      	str	r3, [sp, #52]	; 0x34
 801c554:	e72f      	b.n	801c3b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801c556:	1c45      	adds	r5, r0, #1
 801c558:	d195      	bne.n	801c486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801c55a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c55c:	4285      	cmp	r5, r0
 801c55e:	dd92      	ble.n	801c486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801c560:	1c5d      	adds	r5, r3, #1
 801c562:	db90      	blt.n	801c486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801c564:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c566:	429d      	cmp	r5, r3
 801c568:	dd8d      	ble.n	801c486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801c56a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801c56e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c572:	9301      	str	r3, [sp, #4]
 801c574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c576:	9002      	str	r0, [sp, #8]
 801c578:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801c57c:	9300      	str	r3, [sp, #0]
 801c57e:	463a      	mov	r2, r7
 801c580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c582:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c584:	4641      	mov	r1, r8
 801c586:	f7ff fd47 	bl	801c018 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801c58a:	e77c      	b.n	801c486 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801c58c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c58e:	1422      	asrs	r2, r4, #16
 801c590:	1433      	asrs	r3, r6, #16
 801c592:	fb05 2303 	mla	r3, r5, r3, r2
 801c596:	085a      	lsrs	r2, r3, #1
 801c598:	07dd      	lsls	r5, r3, #31
 801c59a:	5cba      	ldrb	r2, [r7, r2]
 801c59c:	bf54      	ite	pl
 801c59e:	f002 020f 	andpl.w	r2, r2, #15
 801c5a2:	1112      	asrmi	r2, r2, #4
 801c5a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c5a8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801c5ac:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c5b0:	b2d2      	uxtb	r2, r2
 801c5b2:	2900      	cmp	r1, #0
 801c5b4:	f000 80ae 	beq.w	801c714 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801c5b8:	f103 0e01 	add.w	lr, r3, #1
 801c5bc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801c5c0:	f01e 0f01 	tst.w	lr, #1
 801c5c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c5c8:	bf0c      	ite	eq
 801c5ca:	f00c 0c0f 	andeq.w	ip, ip, #15
 801c5ce:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801c5d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c5d6:	fa5f f58c 	uxtb.w	r5, ip
 801c5da:	9514      	str	r5, [sp, #80]	; 0x50
 801c5dc:	b300      	cbz	r0, 801c620 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801c5de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c5e0:	442b      	add	r3, r5
 801c5e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c5e6:	07dd      	lsls	r5, r3, #31
 801c5e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c5ec:	bf54      	ite	pl
 801c5ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c5f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c5f6:	3301      	adds	r3, #1
 801c5f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c5fc:	fa5f f58c 	uxtb.w	r5, ip
 801c600:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c604:	950e      	str	r5, [sp, #56]	; 0x38
 801c606:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c60a:	07dd      	lsls	r5, r3, #31
 801c60c:	bf54      	ite	pl
 801c60e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c612:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c616:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c61a:	fa5f f38c 	uxtb.w	r3, ip
 801c61e:	9315      	str	r3, [sp, #84]	; 0x54
 801c620:	b289      	uxth	r1, r1
 801c622:	b280      	uxth	r0, r0
 801c624:	fb01 f300 	mul.w	r3, r1, r0
 801c628:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801c62c:	0109      	lsls	r1, r1, #4
 801c62e:	b280      	uxth	r0, r0
 801c630:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801c634:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c636:	1ac9      	subs	r1, r1, r3
 801c638:	ebac 0c00 	sub.w	ip, ip, r0
 801c63c:	b289      	uxth	r1, r1
 801c63e:	4369      	muls	r1, r5
 801c640:	fa1f fc8c 	uxth.w	ip, ip
 801c644:	fb02 120c 	mla	r2, r2, ip, r1
 801c648:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c64a:	fb00 2001 	mla	r0, r0, r1, r2
 801c64e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c650:	fb03 0302 	mla	r3, r3, r2, r0
 801c654:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d04d      	beq.n	801c6f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x508>
 801c65c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c65e:	4a2b      	ldr	r2, [pc, #172]	; (801c70c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801c660:	4d2b      	ldr	r5, [pc, #172]	; (801c710 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801c662:	f8d2 e000 	ldr.w	lr, [r2]
 801c666:	f8b9 2000 	ldrh.w	r2, [r9]
 801c66a:	434b      	muls	r3, r1
 801c66c:	1c59      	adds	r1, r3, #1
 801c66e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c672:	121b      	asrs	r3, r3, #8
 801c674:	b299      	uxth	r1, r3
 801c676:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c67a:	43db      	mvns	r3, r3
 801c67c:	b2db      	uxtb	r3, r3
 801c67e:	ea4f 202e 	mov.w	r0, lr, asr #8
 801c682:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c686:	fb1c fc03 	smulbb	ip, ip, r3
 801c68a:	ea4f 08e2 	mov.w	r8, r2, asr #3
 801c68e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c692:	fb00 c001 	mla	r0, r0, r1, ip
 801c696:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801c69a:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801c69e:	fb18 f803 	smulbb	r8, r8, r3
 801c6a2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c6a6:	00d2      	lsls	r2, r2, #3
 801c6a8:	fb0c 8c01 	mla	ip, ip, r1, r8
 801c6ac:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801c6b0:	b2d2      	uxtb	r2, r2
 801c6b2:	fa1f fc8c 	uxth.w	ip, ip
 801c6b6:	fa5f fe8e 	uxtb.w	lr, lr
 801c6ba:	fb12 f203 	smulbb	r2, r2, r3
 801c6be:	b280      	uxth	r0, r0
 801c6c0:	fb0e 2201 	mla	r2, lr, r1, r2
 801c6c4:	f10c 0801 	add.w	r8, ip, #1
 801c6c8:	b292      	uxth	r2, r2
 801c6ca:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801c6ce:	f100 0801 	add.w	r8, r0, #1
 801c6d2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c6d6:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801c6da:	1c51      	adds	r1, r2, #1
 801c6dc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801c6e0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c6e4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c6e8:	ea4c 0c00 	orr.w	ip, ip, r0
 801c6ec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c6f0:	ea4c 0c02 	orr.w	ip, ip, r2
 801c6f4:	f8a9 c000 	strh.w	ip, [r9]
 801c6f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c6fa:	441c      	add	r4, r3
 801c6fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c6fe:	f109 0902 	add.w	r9, r9, #2
 801c702:	441e      	add	r6, r3
 801c704:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c708:	e5d9      	b.n	801c2be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801c70a:	bf00      	nop
 801c70c:	2002edd4 	.word	0x2002edd4
 801c710:	0007fff8 	.word	0x0007fff8
 801c714:	2800      	cmp	r0, #0
 801c716:	d083      	beq.n	801c620 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801c718:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c71a:	442b      	add	r3, r5
 801c71c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c720:	07db      	lsls	r3, r3, #31
 801c722:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c726:	bf54      	ite	pl
 801c728:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c72c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c730:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c734:	fa5f f38c 	uxtb.w	r3, ip
 801c738:	930e      	str	r3, [sp, #56]	; 0x38
 801c73a:	e771      	b.n	801c620 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801c73c:	b019      	add	sp, #100	; 0x64
 801c73e:	ecbd 8b08 	vpop	{d8-d11}
 801c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c746:	bf00      	nop

0801c748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801c748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c74c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801c750:	2c00      	cmp	r4, #0
 801c752:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c756:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c75a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801c75e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c762:	fb04 ce03 	mla	lr, r4, r3, ip
 801c766:	db60      	blt.n	801c82a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801c768:	45a1      	cmp	r9, r4
 801c76a:	dd5e      	ble.n	801c82a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801c76c:	f1bc 0f00 	cmp.w	ip, #0
 801c770:	db59      	blt.n	801c826 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801c772:	45e0      	cmp	r8, ip
 801c774:	dd57      	ble.n	801c826 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801c776:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801c77a:	f01e 0f01 	tst.w	lr, #1
 801c77e:	5c16      	ldrb	r6, [r2, r0]
 801c780:	bf0c      	ite	eq
 801c782:	f006 060f 	andeq.w	r6, r6, #15
 801c786:	1136      	asrne	r6, r6, #4
 801c788:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c78c:	b2f6      	uxtb	r6, r6
 801c78e:	f11c 0001 	adds.w	r0, ip, #1
 801c792:	d44d      	bmi.n	801c830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801c794:	4580      	cmp	r8, r0
 801c796:	dd4b      	ble.n	801c830 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801c798:	2d00      	cmp	r5, #0
 801c79a:	d04b      	beq.n	801c834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801c79c:	f10e 0a01 	add.w	sl, lr, #1
 801c7a0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801c7a4:	f01a 0f01 	tst.w	sl, #1
 801c7a8:	5c10      	ldrb	r0, [r2, r0]
 801c7aa:	bf0c      	ite	eq
 801c7ac:	f000 000f 	andeq.w	r0, r0, #15
 801c7b0:	1100      	asrne	r0, r0, #4
 801c7b2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c7b6:	b2c0      	uxtb	r0, r0
 801c7b8:	3401      	adds	r4, #1
 801c7ba:	d43f      	bmi.n	801c83c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801c7bc:	45a1      	cmp	r9, r4
 801c7be:	dd3d      	ble.n	801c83c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801c7c0:	2f00      	cmp	r7, #0
 801c7c2:	f000 8099 	beq.w	801c8f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>
 801c7c6:	f1bc 0f00 	cmp.w	ip, #0
 801c7ca:	db35      	blt.n	801c838 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801c7cc:	45e0      	cmp	r8, ip
 801c7ce:	dd33      	ble.n	801c838 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801c7d0:	eb03 090e 	add.w	r9, r3, lr
 801c7d4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801c7d8:	f019 0f01 	tst.w	r9, #1
 801c7dc:	5d14      	ldrb	r4, [r2, r4]
 801c7de:	bf0c      	ite	eq
 801c7e0:	f004 040f 	andeq.w	r4, r4, #15
 801c7e4:	1124      	asrne	r4, r4, #4
 801c7e6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c7ea:	b2e4      	uxtb	r4, r4
 801c7ec:	f11c 0c01 	adds.w	ip, ip, #1
 801c7f0:	d427      	bmi.n	801c842 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801c7f2:	45e0      	cmp	r8, ip
 801c7f4:	dd25      	ble.n	801c842 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801c7f6:	b335      	cbz	r5, 801c846 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801c7f8:	3301      	adds	r3, #1
 801c7fa:	449e      	add	lr, r3
 801c7fc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c800:	f01e 0f01 	tst.w	lr, #1
 801c804:	5cd2      	ldrb	r2, [r2, r3]
 801c806:	bf0c      	ite	eq
 801c808:	f002 020f 	andeq.w	r2, r2, #15
 801c80c:	1112      	asrne	r2, r2, #4
 801c80e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c812:	b2d3      	uxtb	r3, r2
 801c814:	2d0f      	cmp	r5, #15
 801c816:	d917      	bls.n	801c848 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801c818:	4b3a      	ldr	r3, [pc, #232]	; (801c904 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801c81a:	4a3b      	ldr	r2, [pc, #236]	; (801c908 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 801c81c:	483b      	ldr	r0, [pc, #236]	; (801c90c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 801c81e:	f240 3173 	movw	r1, #883	; 0x373
 801c822:	f000 fc47 	bl	801d0b4 <__assert_func>
 801c826:	2600      	movs	r6, #0
 801c828:	e7b1      	b.n	801c78e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801c82a:	2000      	movs	r0, #0
 801c82c:	4606      	mov	r6, r0
 801c82e:	e7c3      	b.n	801c7b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801c830:	2000      	movs	r0, #0
 801c832:	e7c1      	b.n	801c7b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801c834:	4628      	mov	r0, r5
 801c836:	e7bf      	b.n	801c7b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801c838:	2400      	movs	r4, #0
 801c83a:	e7d7      	b.n	801c7ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801c83c:	2300      	movs	r3, #0
 801c83e:	461c      	mov	r4, r3
 801c840:	e7e8      	b.n	801c814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801c842:	2300      	movs	r3, #0
 801c844:	e7e6      	b.n	801c814 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801c846:	462b      	mov	r3, r5
 801c848:	2f0f      	cmp	r7, #15
 801c84a:	d8e5      	bhi.n	801c818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801c84c:	b2ad      	uxth	r5, r5
 801c84e:	b2bf      	uxth	r7, r7
 801c850:	fb05 fc07 	mul.w	ip, r5, r7
 801c854:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801c858:	012d      	lsls	r5, r5, #4
 801c85a:	b2bf      	uxth	r7, r7
 801c85c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801c860:	eba5 050c 	sub.w	r5, r5, ip
 801c864:	1bd2      	subs	r2, r2, r7
 801c866:	b2ad      	uxth	r5, r5
 801c868:	b292      	uxth	r2, r2
 801c86a:	4368      	muls	r0, r5
 801c86c:	fb06 0002 	mla	r0, r6, r2, r0
 801c870:	fb07 0404 	mla	r4, r7, r4, r0
 801c874:	fb0c 4303 	mla	r3, ip, r3, r4
 801c878:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d039      	beq.n	801c8f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 801c880:	4a23      	ldr	r2, [pc, #140]	; (801c910 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c8>)
 801c882:	6816      	ldr	r6, [r2, #0]
 801c884:	880a      	ldrh	r2, [r1, #0]
 801c886:	b298      	uxth	r0, r3
 801c888:	1215      	asrs	r5, r2, #8
 801c88a:	43db      	mvns	r3, r3
 801c88c:	b2db      	uxtb	r3, r3
 801c88e:	1234      	asrs	r4, r6, #8
 801c890:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c894:	fb15 f503 	smulbb	r5, r5, r3
 801c898:	10d7      	asrs	r7, r2, #3
 801c89a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c89e:	fb04 5400 	mla	r4, r4, r0, r5
 801c8a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c8a6:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801c8aa:	fb17 f703 	smulbb	r7, r7, r3
 801c8ae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c8b2:	00d2      	lsls	r2, r2, #3
 801c8b4:	fb05 7500 	mla	r5, r5, r0, r7
 801c8b8:	b2d2      	uxtb	r2, r2
 801c8ba:	00f6      	lsls	r6, r6, #3
 801c8bc:	fb12 f303 	smulbb	r3, r2, r3
 801c8c0:	b2ad      	uxth	r5, r5
 801c8c2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c8c6:	b2a4      	uxth	r4, r4
 801c8c8:	fb06 3000 	mla	r0, r6, r0, r3
 801c8cc:	1c6b      	adds	r3, r5, #1
 801c8ce:	b280      	uxth	r0, r0
 801c8d0:	1c62      	adds	r2, r4, #1
 801c8d2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801c8d6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801c8da:	095b      	lsrs	r3, r3, #5
 801c8dc:	1c42      	adds	r2, r0, #1
 801c8de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c8e2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c8e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c8ea:	4323      	orrs	r3, r4
 801c8ec:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801c8f0:	4303      	orrs	r3, r0
 801c8f2:	800b      	strh	r3, [r1, #0]
 801c8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8f8:	2d0f      	cmp	r5, #15
 801c8fa:	d88d      	bhi.n	801c818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801c8fc:	463b      	mov	r3, r7
 801c8fe:	463c      	mov	r4, r7
 801c900:	e7a4      	b.n	801c84c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801c902:	bf00      	nop
 801c904:	08020997 	.word	0x08020997
 801c908:	08020ef5 	.word	0x08020ef5
 801c90c:	08020a1f 	.word	0x08020a1f
 801c910:	2002edd4 	.word	0x2002edd4

0801c914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c918:	ed2d 8b08 	vpush	{d8-d11}
 801c91c:	b095      	sub	sp, #84	; 0x54
 801c91e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801c922:	9306      	str	r3, [sp, #24]
 801c924:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801c928:	9307      	str	r3, [sp, #28]
 801c92a:	920d      	str	r2, [sp, #52]	; 0x34
 801c92c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801c930:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c932:	910a      	str	r1, [sp, #40]	; 0x28
 801c934:	9308      	str	r3, [sp, #32]
 801c936:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c93a:	9013      	str	r0, [sp, #76]	; 0x4c
 801c93c:	6850      	ldr	r0, [r2, #4]
 801c93e:	6812      	ldr	r2, [r2, #0]
 801c940:	fb00 1303 	mla	r3, r0, r3, r1
 801c944:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801c948:	9b07      	ldr	r3, [sp, #28]
 801c94a:	3301      	adds	r3, #1
 801c94c:	f023 0301 	bic.w	r3, r3, #1
 801c950:	9309      	str	r3, [sp, #36]	; 0x24
 801c952:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c954:	681f      	ldr	r7, [r3, #0]
 801c956:	eeb0 aa40 	vmov.f32	s20, s0
 801c95a:	eef0 9a60 	vmov.f32	s19, s1
 801c95e:	eeb0 9a41 	vmov.f32	s18, s2
 801c962:	eeb0 8a62 	vmov.f32	s16, s5
 801c966:	eef0 8a43 	vmov.f32	s17, s6
 801c96a:	eef0 ba44 	vmov.f32	s23, s8
 801c96e:	eeb0 ba64 	vmov.f32	s22, s9
 801c972:	eef0 aa45 	vmov.f32	s21, s10
 801c976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c978:	2b00      	cmp	r3, #0
 801c97a:	dc03      	bgt.n	801c984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c97c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c97e:	2b00      	cmp	r3, #0
 801c980:	f340 8260 	ble.w	801ce44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801c984:	9b06      	ldr	r3, [sp, #24]
 801c986:	2b00      	cmp	r3, #0
 801c988:	f340 811c 	ble.w	801cbc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801c98c:	1422      	asrs	r2, r4, #16
 801c98e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c992:	d42d      	bmi.n	801c9f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801c994:	9807      	ldr	r0, [sp, #28]
 801c996:	1c51      	adds	r1, r2, #1
 801c998:	4288      	cmp	r0, r1
 801c99a:	dd2c      	ble.n	801c9f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	db2a      	blt.n	801c9f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801c9a0:	9808      	ldr	r0, [sp, #32]
 801c9a2:	1c59      	adds	r1, r3, #1
 801c9a4:	4288      	cmp	r0, r1
 801c9a6:	dd26      	ble.n	801c9f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801c9a8:	9b06      	ldr	r3, [sp, #24]
 801c9aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c9ac:	3b01      	subs	r3, #1
 801c9ae:	fb02 4203 	mla	r2, r2, r3, r4
 801c9b2:	1412      	asrs	r2, r2, #16
 801c9b4:	d42a      	bmi.n	801ca0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c9b6:	9907      	ldr	r1, [sp, #28]
 801c9b8:	3201      	adds	r2, #1
 801c9ba:	4291      	cmp	r1, r2
 801c9bc:	dd26      	ble.n	801ca0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c9be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c9c0:	fb02 6303 	mla	r3, r2, r3, r6
 801c9c4:	141b      	asrs	r3, r3, #16
 801c9c6:	d421      	bmi.n	801ca0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c9c8:	9a08      	ldr	r2, [sp, #32]
 801c9ca:	3301      	adds	r3, #1
 801c9cc:	429a      	cmp	r2, r3
 801c9ce:	dd1d      	ble.n	801ca0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801c9d0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801c9d4:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c9d8:	930e      	str	r3, [sp, #56]	; 0x38
 801c9da:	46d8      	mov	r8, fp
 801c9dc:	f1ba 0f00 	cmp.w	sl, #0
 801c9e0:	f300 8164 	bgt.w	801ccac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c9e4:	9b06      	ldr	r3, [sp, #24]
 801c9e6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801c9ea:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 801c9ee:	e0eb      	b.n	801cbc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801c9f0:	1c51      	adds	r1, r2, #1
 801c9f2:	f040 80dd 	bne.w	801cbb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801c9f6:	9907      	ldr	r1, [sp, #28]
 801c9f8:	4291      	cmp	r1, r2
 801c9fa:	f340 80d9 	ble.w	801cbb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801c9fe:	1c5a      	adds	r2, r3, #1
 801ca00:	f2c0 80d6 	blt.w	801cbb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801ca04:	9a08      	ldr	r2, [sp, #32]
 801ca06:	4293      	cmp	r3, r2
 801ca08:	f280 80d2 	bge.w	801cbb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801ca0c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801ca10:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801ca14:	46d8      	mov	r8, fp
 801ca16:	f1b9 0f00 	cmp.w	r9, #0
 801ca1a:	dde3      	ble.n	801c9e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ca1c:	1420      	asrs	r0, r4, #16
 801ca1e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ca22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ca26:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ca2a:	f100 8127 	bmi.w	801cc7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801ca2e:	9d07      	ldr	r5, [sp, #28]
 801ca30:	f100 0c01 	add.w	ip, r0, #1
 801ca34:	4565      	cmp	r5, ip
 801ca36:	f340 8123 	ble.w	801cc80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f2c0 8120 	blt.w	801cc80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ca40:	9d08      	ldr	r5, [sp, #32]
 801ca42:	f103 0c01 	add.w	ip, r3, #1
 801ca46:	4565      	cmp	r5, ip
 801ca48:	f340 811a 	ble.w	801cc80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801ca4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ca4e:	fb03 0305 	mla	r3, r3, r5, r0
 801ca52:	0858      	lsrs	r0, r3, #1
 801ca54:	07dd      	lsls	r5, r3, #31
 801ca56:	5c38      	ldrb	r0, [r7, r0]
 801ca58:	bf54      	ite	pl
 801ca5a:	f000 000f 	andpl.w	r0, r0, #15
 801ca5e:	1100      	asrmi	r0, r0, #4
 801ca60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ca64:	b2c0      	uxtb	r0, r0
 801ca66:	2a00      	cmp	r2, #0
 801ca68:	f000 80ed 	beq.w	801cc46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x332>
 801ca6c:	f103 0e01 	add.w	lr, r3, #1
 801ca70:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801ca74:	f01e 0f01 	tst.w	lr, #1
 801ca78:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ca7c:	bf0c      	ite	eq
 801ca7e:	f00c 0c0f 	andeq.w	ip, ip, #15
 801ca82:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ca86:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ca8a:	fa5f fc8c 	uxtb.w	ip, ip
 801ca8e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801ca92:	b1f9      	cbz	r1, 801cad4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ca94:	4453      	add	r3, sl
 801ca96:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ca9a:	07dd      	lsls	r5, r3, #31
 801ca9c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801caa0:	bf54      	ite	pl
 801caa2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801caa6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801caaa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801caae:	3301      	adds	r3, #1
 801cab0:	fa5f fc8c 	uxtb.w	ip, ip
 801cab4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801cab8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cabc:	07dd      	lsls	r5, r3, #31
 801cabe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cac2:	bf54      	ite	pl
 801cac4:	f00c 030f 	andpl.w	r3, ip, #15
 801cac8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801cacc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cad0:	b2db      	uxtb	r3, r3
 801cad2:	9310      	str	r3, [sp, #64]	; 0x40
 801cad4:	b292      	uxth	r2, r2
 801cad6:	b289      	uxth	r1, r1
 801cad8:	fb02 f301 	mul.w	r3, r2, r1
 801cadc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801cae0:	0112      	lsls	r2, r2, #4
 801cae2:	b289      	uxth	r1, r1
 801cae4:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801cae8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801caea:	1ad2      	subs	r2, r2, r3
 801caec:	ebac 0c01 	sub.w	ip, ip, r1
 801caf0:	b292      	uxth	r2, r2
 801caf2:	436a      	muls	r2, r5
 801caf4:	fa1f fc8c 	uxth.w	ip, ip
 801caf8:	fb00 200c 	mla	r0, r0, ip, r2
 801cafc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cafe:	fb01 0102 	mla	r1, r1, r2, r0
 801cb02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb04:	fb03 1302 	mla	r3, r3, r2, r1
 801cb08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d046      	beq.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801cb10:	4ac7      	ldr	r2, [pc, #796]	; (801ce30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801cb12:	49c8      	ldr	r1, [pc, #800]	; (801ce34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801cb14:	6812      	ldr	r2, [r2, #0]
 801cb16:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801cb1a:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801cb1e:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801cb22:	b2d2      	uxtb	r2, r2
 801cb24:	2bff      	cmp	r3, #255	; 0xff
 801cb26:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801cb2a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cb2e:	4615      	mov	r5, r2
 801cb30:	f000 809c 	beq.w	801cc6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801cb34:	f8b8 0000 	ldrh.w	r0, [r8]
 801cb38:	b29a      	uxth	r2, r3
 801cb3a:	1201      	asrs	r1, r0, #8
 801cb3c:	43db      	mvns	r3, r3
 801cb3e:	b2db      	uxtb	r3, r3
 801cb40:	fb1e fe02 	smulbb	lr, lr, r2
 801cb44:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cb48:	fb01 e103 	mla	r1, r1, r3, lr
 801cb4c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801cb50:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801cb54:	fb1c fc02 	smulbb	ip, ip, r2
 801cb58:	fb0e cc03 	mla	ip, lr, r3, ip
 801cb5c:	00c0      	lsls	r0, r0, #3
 801cb5e:	fa1f fc8c 	uxth.w	ip, ip
 801cb62:	fb15 f202 	smulbb	r2, r5, r2
 801cb66:	b2c0      	uxtb	r0, r0
 801cb68:	b289      	uxth	r1, r1
 801cb6a:	fb00 2303 	mla	r3, r0, r3, r2
 801cb6e:	f10c 0e01 	add.w	lr, ip, #1
 801cb72:	b29b      	uxth	r3, r3
 801cb74:	1c4a      	adds	r2, r1, #1
 801cb76:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cb7a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cb7e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cb82:	1c5a      	adds	r2, r3, #1
 801cb84:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801cb88:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801cb8c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cb90:	ea4c 0101 	orr.w	r1, ip, r1
 801cb94:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801cb98:	4319      	orrs	r1, r3
 801cb9a:	f8a8 1000 	strh.w	r1, [r8]
 801cb9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cba0:	441c      	add	r4, r3
 801cba2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cba4:	f108 0802 	add.w	r8, r8, #2
 801cba8:	441e      	add	r6, r3
 801cbaa:	f109 39ff 	add.w	r9, r9, #4294967295
 801cbae:	e732      	b.n	801ca16 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801cbb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cbb2:	441c      	add	r4, r3
 801cbb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cbb6:	441e      	add	r6, r3
 801cbb8:	9b06      	ldr	r3, [sp, #24]
 801cbba:	3b01      	subs	r3, #1
 801cbbc:	9306      	str	r3, [sp, #24]
 801cbbe:	f10b 0b02 	add.w	fp, fp, #2
 801cbc2:	e6df      	b.n	801c984 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801cbc4:	f47f aef0 	bne.w	801c9a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801cbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	f340 813a 	ble.w	801ce44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801cbd0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cbd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cbd8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cbdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cbde:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cbe2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cbe6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cbea:	eef0 6a48 	vmov.f32	s13, s16
 801cbee:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cbf2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbf6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cbfa:	ee16 4a90 	vmov	r4, s13
 801cbfe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cc02:	eef0 6a68 	vmov.f32	s13, s17
 801cc06:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cc0a:	ee18 2a10 	vmov	r2, s16
 801cc0e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cc12:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc16:	ee18 2a90 	vmov	r2, s17
 801cc1a:	9329      	str	r3, [sp, #164]	; 0xa4
 801cc1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cc1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc22:	932a      	str	r3, [sp, #168]	; 0xa8
 801cc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc28:	3b01      	subs	r3, #1
 801cc2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc2e:	930a      	str	r3, [sp, #40]	; 0x28
 801cc30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cc32:	bf08      	it	eq
 801cc34:	4613      	moveq	r3, r2
 801cc36:	ee16 6a90 	vmov	r6, s13
 801cc3a:	9306      	str	r3, [sp, #24]
 801cc3c:	eef0 8a67 	vmov.f32	s17, s15
 801cc40:	eeb0 8a47 	vmov.f32	s16, s14
 801cc44:	e697      	b.n	801c976 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801cc46:	2900      	cmp	r1, #0
 801cc48:	f43f af44 	beq.w	801cad4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801cc4c:	4453      	add	r3, sl
 801cc4e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cc52:	07db      	lsls	r3, r3, #31
 801cc54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cc58:	bf54      	ite	pl
 801cc5a:	f00c 030f 	andpl.w	r3, ip, #15
 801cc5e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801cc62:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cc66:	b2db      	uxtb	r3, r3
 801cc68:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc6a:	e733      	b.n	801cad4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801cc6c:	08d2      	lsrs	r2, r2, #3
 801cc6e:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801cc72:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801cc76:	f8a8 c000 	strh.w	ip, [r8]
 801cc7a:	e790      	b.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801cc7c:	1c45      	adds	r5, r0, #1
 801cc7e:	d18e      	bne.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801cc80:	9d07      	ldr	r5, [sp, #28]
 801cc82:	4285      	cmp	r5, r0
 801cc84:	dd8b      	ble.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801cc86:	1c5d      	adds	r5, r3, #1
 801cc88:	db89      	blt.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801cc8a:	9d08      	ldr	r5, [sp, #32]
 801cc8c:	429d      	cmp	r5, r3
 801cc8e:	dd86      	ble.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801cc90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801cc94:	9b07      	ldr	r3, [sp, #28]
 801cc96:	9300      	str	r3, [sp, #0]
 801cc98:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801cc9c:	9501      	str	r5, [sp, #4]
 801cc9e:	4653      	mov	r3, sl
 801cca0:	463a      	mov	r2, r7
 801cca2:	4641      	mov	r1, r8
 801cca4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cca6:	f7ff fd4f 	bl	801c748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801ccaa:	e778      	b.n	801cb9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801ccac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ccae:	1422      	asrs	r2, r4, #16
 801ccb0:	1433      	asrs	r3, r6, #16
 801ccb2:	fb01 2303 	mla	r3, r1, r3, r2
 801ccb6:	085a      	lsrs	r2, r3, #1
 801ccb8:	07d9      	lsls	r1, r3, #31
 801ccba:	5cba      	ldrb	r2, [r7, r2]
 801ccbc:	bf54      	ite	pl
 801ccbe:	f002 020f 	andpl.w	r2, r2, #15
 801ccc2:	1112      	asrmi	r2, r2, #4
 801ccc4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ccc8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801cccc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ccd0:	b2d2      	uxtb	r2, r2
 801ccd2:	2800      	cmp	r0, #0
 801ccd4:	f000 809b 	beq.w	801ce0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fa>
 801ccd8:	f103 0e01 	add.w	lr, r3, #1
 801ccdc:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801cce0:	f01e 0f01 	tst.w	lr, #1
 801cce4:	5c79      	ldrb	r1, [r7, r1]
 801cce6:	bf0c      	ite	eq
 801cce8:	f001 010f 	andeq.w	r1, r1, #15
 801ccec:	1109      	asrne	r1, r1, #4
 801ccee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ccf2:	b2c9      	uxtb	r1, r1
 801ccf4:	9111      	str	r1, [sp, #68]	; 0x44
 801ccf6:	f1bc 0f00 	cmp.w	ip, #0
 801ccfa:	d018      	beq.n	801cd2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801ccfc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ccfe:	440b      	add	r3, r1
 801cd00:	0859      	lsrs	r1, r3, #1
 801cd02:	07dd      	lsls	r5, r3, #31
 801cd04:	5c79      	ldrb	r1, [r7, r1]
 801cd06:	bf54      	ite	pl
 801cd08:	f001 010f 	andpl.w	r1, r1, #15
 801cd0c:	1109      	asrmi	r1, r1, #4
 801cd0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cd12:	b2c9      	uxtb	r1, r1
 801cd14:	3301      	adds	r3, #1
 801cd16:	910c      	str	r1, [sp, #48]	; 0x30
 801cd18:	0859      	lsrs	r1, r3, #1
 801cd1a:	07dd      	lsls	r5, r3, #31
 801cd1c:	5c79      	ldrb	r1, [r7, r1]
 801cd1e:	bf54      	ite	pl
 801cd20:	f001 010f 	andpl.w	r1, r1, #15
 801cd24:	1109      	asrmi	r1, r1, #4
 801cd26:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cd2a:	b2c9      	uxtb	r1, r1
 801cd2c:	9112      	str	r1, [sp, #72]	; 0x48
 801cd2e:	b280      	uxth	r0, r0
 801cd30:	fa1f fc8c 	uxth.w	ip, ip
 801cd34:	fb00 f30c 	mul.w	r3, r0, ip
 801cd38:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801cd3c:	0100      	lsls	r0, r0, #4
 801cd3e:	fa1f fc8c 	uxth.w	ip, ip
 801cd42:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801cd46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cd48:	1ac0      	subs	r0, r0, r3
 801cd4a:	eba1 010c 	sub.w	r1, r1, ip
 801cd4e:	b280      	uxth	r0, r0
 801cd50:	b289      	uxth	r1, r1
 801cd52:	4368      	muls	r0, r5
 801cd54:	fb02 0201 	mla	r2, r2, r1, r0
 801cd58:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cd5a:	fb0c 2c01 	mla	ip, ip, r1, r2
 801cd5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd60:	fb03 c302 	mla	r3, r3, r2, ip
 801cd64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d047      	beq.n	801cdfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801cd6c:	4a30      	ldr	r2, [pc, #192]	; (801ce30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801cd6e:	4931      	ldr	r1, [pc, #196]	; (801ce34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801cd70:	6812      	ldr	r2, [r2, #0]
 801cd72:	2bff      	cmp	r3, #255	; 0xff
 801cd74:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801cd78:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801cd7c:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801cd80:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801cd84:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cd88:	b2d2      	uxtb	r2, r2
 801cd8a:	d055      	beq.n	801ce38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801cd8c:	f8b8 0000 	ldrh.w	r0, [r8]
 801cd90:	fa1f f983 	uxth.w	r9, r3
 801cd94:	1201      	asrs	r1, r0, #8
 801cd96:	43db      	mvns	r3, r3
 801cd98:	b2db      	uxtb	r3, r3
 801cd9a:	fb1e fe09 	smulbb	lr, lr, r9
 801cd9e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cda2:	fb01 e103 	mla	r1, r1, r3, lr
 801cda6:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801cdaa:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801cdae:	fb1c fc09 	smulbb	ip, ip, r9
 801cdb2:	fb0e cc03 	mla	ip, lr, r3, ip
 801cdb6:	00c0      	lsls	r0, r0, #3
 801cdb8:	fa1f fc8c 	uxth.w	ip, ip
 801cdbc:	b2c0      	uxtb	r0, r0
 801cdbe:	fb12 f209 	smulbb	r2, r2, r9
 801cdc2:	b289      	uxth	r1, r1
 801cdc4:	fb00 2203 	mla	r2, r0, r3, r2
 801cdc8:	f10c 0e01 	add.w	lr, ip, #1
 801cdcc:	b292      	uxth	r2, r2
 801cdce:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cdd2:	f101 0e01 	add.w	lr, r1, #1
 801cdd6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cdda:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801cdde:	1c53      	adds	r3, r2, #1
 801cde0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801cde4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801cde8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cdec:	ea4c 0c01 	orr.w	ip, ip, r1
 801cdf0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cdf4:	ea4c 0c02 	orr.w	ip, ip, r2
 801cdf8:	f8a8 c000 	strh.w	ip, [r8]
 801cdfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cdfe:	441c      	add	r4, r3
 801ce00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ce02:	f108 0802 	add.w	r8, r8, #2
 801ce06:	441e      	add	r6, r3
 801ce08:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ce0c:	e5e6      	b.n	801c9dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801ce0e:	f1bc 0f00 	cmp.w	ip, #0
 801ce12:	d08c      	beq.n	801cd2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801ce14:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ce16:	440b      	add	r3, r1
 801ce18:	0859      	lsrs	r1, r3, #1
 801ce1a:	07db      	lsls	r3, r3, #31
 801ce1c:	5c79      	ldrb	r1, [r7, r1]
 801ce1e:	bf54      	ite	pl
 801ce20:	f001 010f 	andpl.w	r1, r1, #15
 801ce24:	1109      	asrmi	r1, r1, #4
 801ce26:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ce2a:	b2c9      	uxtb	r1, r1
 801ce2c:	910c      	str	r1, [sp, #48]	; 0x30
 801ce2e:	e77e      	b.n	801cd2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801ce30:	2002edd4 	.word	0x2002edd4
 801ce34:	0007fff8 	.word	0x0007fff8
 801ce38:	08d2      	lsrs	r2, r2, #3
 801ce3a:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801ce3e:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801ce42:	e7d9      	b.n	801cdf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e4>
 801ce44:	b015      	add	sp, #84	; 0x54
 801ce46:	ecbd 8b08 	vpop	{d8-d11}
 801ce4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce4e:	bf00      	nop

0801ce50 <CRC_Lock>:
 801ce50:	b530      	push	{r4, r5, lr}
 801ce52:	4a1d      	ldr	r2, [pc, #116]	; (801cec8 <CRC_Lock+0x78>)
 801ce54:	6813      	ldr	r3, [r2, #0]
 801ce56:	f023 0301 	bic.w	r3, r3, #1
 801ce5a:	6013      	str	r3, [r2, #0]
 801ce5c:	4b1b      	ldr	r3, [pc, #108]	; (801cecc <CRC_Lock+0x7c>)
 801ce5e:	681a      	ldr	r2, [r3, #0]
 801ce60:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ce64:	4022      	ands	r2, r4
 801ce66:	f24c 2540 	movw	r5, #49728	; 0xc240
 801ce6a:	42aa      	cmp	r2, r5
 801ce6c:	d005      	beq.n	801ce7a <CRC_Lock+0x2a>
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	f24c 2270 	movw	r2, #49776	; 0xc270
 801ce74:	4023      	ands	r3, r4
 801ce76:	4293      	cmp	r3, r2
 801ce78:	d11d      	bne.n	801ceb6 <CRC_Lock+0x66>
 801ce7a:	4b15      	ldr	r3, [pc, #84]	; (801ced0 <CRC_Lock+0x80>)
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	b9d3      	cbnz	r3, 801ceb6 <CRC_Lock+0x66>
 801ce80:	4a14      	ldr	r2, [pc, #80]	; (801ced4 <CRC_Lock+0x84>)
 801ce82:	6813      	ldr	r3, [r2, #0]
 801ce84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce88:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ce8c:	d006      	beq.n	801ce9c <CRC_Lock+0x4c>
 801ce8e:	6813      	ldr	r3, [r2, #0]
 801ce90:	f240 4283 	movw	r2, #1155	; 0x483
 801ce94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ce98:	4293      	cmp	r3, r2
 801ce9a:	d10c      	bne.n	801ceb6 <CRC_Lock+0x66>
 801ce9c:	4b0e      	ldr	r3, [pc, #56]	; (801ced8 <CRC_Lock+0x88>)
 801ce9e:	2201      	movs	r2, #1
 801cea0:	601a      	str	r2, [r3, #0]
 801cea2:	681a      	ldr	r2, [r3, #0]
 801cea4:	2a00      	cmp	r2, #0
 801cea6:	d1fc      	bne.n	801cea2 <CRC_Lock+0x52>
 801cea8:	4b0c      	ldr	r3, [pc, #48]	; (801cedc <CRC_Lock+0x8c>)
 801ceaa:	6018      	str	r0, [r3, #0]
 801ceac:	6818      	ldr	r0, [r3, #0]
 801ceae:	1a43      	subs	r3, r0, r1
 801ceb0:	4258      	negs	r0, r3
 801ceb2:	4158      	adcs	r0, r3
 801ceb4:	bd30      	pop	{r4, r5, pc}
 801ceb6:	4b0a      	ldr	r3, [pc, #40]	; (801cee0 <CRC_Lock+0x90>)
 801ceb8:	2201      	movs	r2, #1
 801ceba:	601a      	str	r2, [r3, #0]
 801cebc:	681a      	ldr	r2, [r3, #0]
 801cebe:	2a00      	cmp	r2, #0
 801cec0:	d1fc      	bne.n	801cebc <CRC_Lock+0x6c>
 801cec2:	4b08      	ldr	r3, [pc, #32]	; (801cee4 <CRC_Lock+0x94>)
 801cec4:	e7f1      	b.n	801ceaa <CRC_Lock+0x5a>
 801cec6:	bf00      	nop
 801cec8:	e0002000 	.word	0xe0002000
 801cecc:	e000ed00 	.word	0xe000ed00
 801ced0:	e0042000 	.word	0xe0042000
 801ced4:	5c001000 	.word	0x5c001000
 801ced8:	58024c08 	.word	0x58024c08
 801cedc:	58024c00 	.word	0x58024c00
 801cee0:	40023008 	.word	0x40023008
 801cee4:	40023000 	.word	0x40023000

0801cee8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801cee8:	6101      	str	r1, [r0, #16]
 801ceea:	4770      	bx	lr

0801ceec <_ZN8touchgfx8Gestures4tickEv>:
 801ceec:	7b83      	ldrb	r3, [r0, #14]
 801ceee:	b14b      	cbz	r3, 801cf04 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801cef0:	8903      	ldrh	r3, [r0, #8]
 801cef2:	3301      	adds	r3, #1
 801cef4:	b29b      	uxth	r3, r3
 801cef6:	2b07      	cmp	r3, #7
 801cef8:	8103      	strh	r3, [r0, #8]
 801cefa:	bf81      	itttt	hi
 801cefc:	2300      	movhi	r3, #0
 801cefe:	8143      	strhhi	r3, [r0, #10]
 801cf00:	8183      	strhhi	r3, [r0, #12]
 801cf02:	7383      	strbhi	r3, [r0, #14]
 801cf04:	4770      	bx	lr
	...

0801cf08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801cf08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801cf0c:	4604      	mov	r4, r0
 801cf0e:	8880      	ldrh	r0, [r0, #4]
 801cf10:	f8ad 0006 	strh.w	r0, [sp, #6]
 801cf14:	4698      	mov	r8, r3
 801cf16:	eba8 0000 	sub.w	r0, r8, r0
 801cf1a:	4b1c      	ldr	r3, [pc, #112]	; (801cf8c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801cf1c:	9300      	str	r3, [sp, #0]
 801cf1e:	b280      	uxth	r0, r0
 801cf20:	2300      	movs	r3, #0
 801cf22:	f88d 3004 	strb.w	r3, [sp, #4]
 801cf26:	b203      	sxth	r3, r0
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	bfb8      	it	lt
 801cf2c:	4240      	neglt	r0, r0
 801cf2e:	4617      	mov	r7, r2
 801cf30:	8aa2      	ldrh	r2, [r4, #20]
 801cf32:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801cf36:	f8ad 800a 	strh.w	r8, [sp, #10]
 801cf3a:	bfb8      	it	lt
 801cf3c:	b203      	sxthlt	r3, r0
 801cf3e:	460e      	mov	r6, r1
 801cf40:	4293      	cmp	r3, r2
 801cf42:	88e1      	ldrh	r1, [r4, #6]
 801cf44:	f8ad 1008 	strh.w	r1, [sp, #8]
 801cf48:	f8ad 500c 	strh.w	r5, [sp, #12]
 801cf4c:	dc08      	bgt.n	801cf60 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801cf4e:	1a69      	subs	r1, r5, r1
 801cf50:	b289      	uxth	r1, r1
 801cf52:	b20b      	sxth	r3, r1
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	bfbc      	itt	lt
 801cf58:	4249      	neglt	r1, r1
 801cf5a:	b20b      	sxthlt	r3, r1
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	da13      	bge.n	801cf88 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801cf60:	6920      	ldr	r0, [r4, #16]
 801cf62:	6803      	ldr	r3, [r0, #0]
 801cf64:	4669      	mov	r1, sp
 801cf66:	685b      	ldr	r3, [r3, #4]
 801cf68:	4798      	blx	r3
 801cf6a:	eba8 0606 	sub.w	r6, r8, r6
 801cf6e:	2300      	movs	r3, #0
 801cf70:	1bef      	subs	r7, r5, r7
 801cf72:	2001      	movs	r0, #1
 801cf74:	8123      	strh	r3, [r4, #8]
 801cf76:	8166      	strh	r6, [r4, #10]
 801cf78:	81a7      	strh	r7, [r4, #12]
 801cf7a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801cf7e:	80e5      	strh	r5, [r4, #6]
 801cf80:	73a0      	strb	r0, [r4, #14]
 801cf82:	b004      	add	sp, #16
 801cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf88:	2000      	movs	r0, #0
 801cf8a:	e7fa      	b.n	801cf82 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801cf8c:	0801fcd4 	.word	0x0801fcd4

0801cf90 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801cf90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf92:	461e      	mov	r6, r3
 801cf94:	1e4b      	subs	r3, r1, #1
 801cf96:	2b01      	cmp	r3, #1
 801cf98:	b085      	sub	sp, #20
 801cf9a:	4604      	mov	r4, r0
 801cf9c:	460d      	mov	r5, r1
 801cf9e:	4617      	mov	r7, r2
 801cfa0:	d84b      	bhi.n	801d03a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801cfa2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cfa6:	1cd3      	adds	r3, r2, #3
 801cfa8:	b29b      	uxth	r3, r3
 801cfaa:	2b06      	cmp	r3, #6
 801cfac:	d916      	bls.n	801cfdc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801cfae:	f8df c098 	ldr.w	ip, [pc, #152]	; 801d048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801cfb2:	f8cd c004 	str.w	ip, [sp, #4]
 801cfb6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cfba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cfbe:	6900      	ldr	r0, [r0, #16]
 801cfc0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801cfc4:	f04f 0c00 	mov.w	ip, #0
 801cfc8:	f88d c008 	strb.w	ip, [sp, #8]
 801cfcc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801cfd0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cfd4:	6803      	ldr	r3, [r0, #0]
 801cfd6:	a901      	add	r1, sp, #4
 801cfd8:	689b      	ldr	r3, [r3, #8]
 801cfda:	4798      	blx	r3
 801cfdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cfe0:	1cd3      	adds	r3, r2, #3
 801cfe2:	b29b      	uxth	r3, r3
 801cfe4:	2b06      	cmp	r3, #6
 801cfe6:	d916      	bls.n	801d016 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801cfe8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801d048 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801cfec:	f8cd c004 	str.w	ip, [sp, #4]
 801cff0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cff4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cff8:	6920      	ldr	r0, [r4, #16]
 801cffa:	f8ad 100c 	strh.w	r1, [sp, #12]
 801cffe:	f04f 0c01 	mov.w	ip, #1
 801d002:	f88d c008 	strb.w	ip, [sp, #8]
 801d006:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d00a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d00e:	6803      	ldr	r3, [r0, #0]
 801d010:	a901      	add	r1, sp, #4
 801d012:	689b      	ldr	r3, [r3, #8]
 801d014:	4798      	blx	r3
 801d016:	4b0b      	ldr	r3, [pc, #44]	; (801d044 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 801d018:	9301      	str	r3, [sp, #4]
 801d01a:	6920      	ldr	r0, [r4, #16]
 801d01c:	f88d 5008 	strb.w	r5, [sp, #8]
 801d020:	2300      	movs	r3, #0
 801d022:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d026:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d02a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d02e:	6803      	ldr	r3, [r0, #0]
 801d030:	a901      	add	r1, sp, #4
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	4798      	blx	r3
 801d036:	b005      	add	sp, #20
 801d038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d03a:	2900      	cmp	r1, #0
 801d03c:	d1eb      	bne.n	801d016 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d03e:	80a2      	strh	r2, [r4, #4]
 801d040:	80c6      	strh	r6, [r0, #6]
 801d042:	e7e8      	b.n	801d016 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d044:	0801fcc0 	.word	0x0801fcc0
 801d048:	0801fce8 	.word	0x0801fce8

0801d04c <__aeabi_atexit>:
 801d04c:	460b      	mov	r3, r1
 801d04e:	4601      	mov	r1, r0
 801d050:	4618      	mov	r0, r3
 801d052:	f000 b853 	b.w	801d0fc <__cxa_atexit>

0801d056 <__cxa_pure_virtual>:
 801d056:	b508      	push	{r3, lr}
 801d058:	f000 f820 	bl	801d09c <_ZSt9terminatev>

0801d05c <_ZdlPvj>:
 801d05c:	f000 b80f 	b.w	801d07e <_ZdlPv>

0801d060 <__cxa_guard_acquire>:
 801d060:	6803      	ldr	r3, [r0, #0]
 801d062:	07db      	lsls	r3, r3, #31
 801d064:	d406      	bmi.n	801d074 <__cxa_guard_acquire+0x14>
 801d066:	7843      	ldrb	r3, [r0, #1]
 801d068:	b103      	cbz	r3, 801d06c <__cxa_guard_acquire+0xc>
 801d06a:	deff      	udf	#255	; 0xff
 801d06c:	2301      	movs	r3, #1
 801d06e:	7043      	strb	r3, [r0, #1]
 801d070:	4618      	mov	r0, r3
 801d072:	4770      	bx	lr
 801d074:	2000      	movs	r0, #0
 801d076:	4770      	bx	lr

0801d078 <__cxa_guard_release>:
 801d078:	2301      	movs	r3, #1
 801d07a:	6003      	str	r3, [r0, #0]
 801d07c:	4770      	bx	lr

0801d07e <_ZdlPv>:
 801d07e:	f000 b88f 	b.w	801d1a0 <free>

0801d082 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d082:	b508      	push	{r3, lr}
 801d084:	4780      	blx	r0
 801d086:	f000 f80e 	bl	801d0a6 <abort>
	...

0801d08c <_ZSt13get_terminatev>:
 801d08c:	4b02      	ldr	r3, [pc, #8]	; (801d098 <_ZSt13get_terminatev+0xc>)
 801d08e:	6818      	ldr	r0, [r3, #0]
 801d090:	f3bf 8f5b 	dmb	ish
 801d094:	4770      	bx	lr
 801d096:	bf00      	nop
 801d098:	20000100 	.word	0x20000100

0801d09c <_ZSt9terminatev>:
 801d09c:	b508      	push	{r3, lr}
 801d09e:	f7ff fff5 	bl	801d08c <_ZSt13get_terminatev>
 801d0a2:	f7ff ffee 	bl	801d082 <_ZN10__cxxabiv111__terminateEPFvvE>

0801d0a6 <abort>:
 801d0a6:	b508      	push	{r3, lr}
 801d0a8:	2006      	movs	r0, #6
 801d0aa:	f000 fc3d 	bl	801d928 <raise>
 801d0ae:	2001      	movs	r0, #1
 801d0b0:	f7e4 fa4e 	bl	8001550 <_exit>

0801d0b4 <__assert_func>:
 801d0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d0b6:	461c      	mov	r4, r3
 801d0b8:	4b09      	ldr	r3, [pc, #36]	; (801d0e0 <__assert_func+0x2c>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	4605      	mov	r5, r0
 801d0be:	68d8      	ldr	r0, [r3, #12]
 801d0c0:	b152      	cbz	r2, 801d0d8 <__assert_func+0x24>
 801d0c2:	4b08      	ldr	r3, [pc, #32]	; (801d0e4 <__assert_func+0x30>)
 801d0c4:	9100      	str	r1, [sp, #0]
 801d0c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d0ca:	4907      	ldr	r1, [pc, #28]	; (801d0e8 <__assert_func+0x34>)
 801d0cc:	462b      	mov	r3, r5
 801d0ce:	4622      	mov	r2, r4
 801d0d0:	f000 f828 	bl	801d124 <fiprintf>
 801d0d4:	f7ff ffe7 	bl	801d0a6 <abort>
 801d0d8:	4b04      	ldr	r3, [pc, #16]	; (801d0ec <__assert_func+0x38>)
 801d0da:	461a      	mov	r2, r3
 801d0dc:	e7f2      	b.n	801d0c4 <__assert_func+0x10>
 801d0de:	bf00      	nop
 801d0e0:	20000104 	.word	0x20000104
 801d0e4:	08021130 	.word	0x08021130
 801d0e8:	0802113d 	.word	0x0802113d
 801d0ec:	0802116b 	.word	0x0802116b

0801d0f0 <atexit>:
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	4601      	mov	r1, r0
 801d0f4:	461a      	mov	r2, r3
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f000 bcf2 	b.w	801dae0 <__register_exitproc>

0801d0fc <__cxa_atexit>:
 801d0fc:	b510      	push	{r4, lr}
 801d0fe:	4c05      	ldr	r4, [pc, #20]	; (801d114 <__cxa_atexit+0x18>)
 801d100:	4613      	mov	r3, r2
 801d102:	b12c      	cbz	r4, 801d110 <__cxa_atexit+0x14>
 801d104:	460a      	mov	r2, r1
 801d106:	4601      	mov	r1, r0
 801d108:	2002      	movs	r0, #2
 801d10a:	f000 fce9 	bl	801dae0 <__register_exitproc>
 801d10e:	bd10      	pop	{r4, pc}
 801d110:	4620      	mov	r0, r4
 801d112:	e7fc      	b.n	801d10e <__cxa_atexit+0x12>
 801d114:	0801dae1 	.word	0x0801dae1

0801d118 <__errno>:
 801d118:	4b01      	ldr	r3, [pc, #4]	; (801d120 <__errno+0x8>)
 801d11a:	6818      	ldr	r0, [r3, #0]
 801d11c:	4770      	bx	lr
 801d11e:	bf00      	nop
 801d120:	20000104 	.word	0x20000104

0801d124 <fiprintf>:
 801d124:	b40e      	push	{r1, r2, r3}
 801d126:	b503      	push	{r0, r1, lr}
 801d128:	4601      	mov	r1, r0
 801d12a:	ab03      	add	r3, sp, #12
 801d12c:	4805      	ldr	r0, [pc, #20]	; (801d144 <fiprintf+0x20>)
 801d12e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d132:	6800      	ldr	r0, [r0, #0]
 801d134:	9301      	str	r3, [sp, #4]
 801d136:	f000 f921 	bl	801d37c <_vfiprintf_r>
 801d13a:	b002      	add	sp, #8
 801d13c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d140:	b003      	add	sp, #12
 801d142:	4770      	bx	lr
 801d144:	20000104 	.word	0x20000104

0801d148 <__libc_init_array>:
 801d148:	b570      	push	{r4, r5, r6, lr}
 801d14a:	4e0d      	ldr	r6, [pc, #52]	; (801d180 <__libc_init_array+0x38>)
 801d14c:	4c0d      	ldr	r4, [pc, #52]	; (801d184 <__libc_init_array+0x3c>)
 801d14e:	1ba4      	subs	r4, r4, r6
 801d150:	10a4      	asrs	r4, r4, #2
 801d152:	2500      	movs	r5, #0
 801d154:	42a5      	cmp	r5, r4
 801d156:	d109      	bne.n	801d16c <__libc_init_array+0x24>
 801d158:	4e0b      	ldr	r6, [pc, #44]	; (801d188 <__libc_init_array+0x40>)
 801d15a:	4c0c      	ldr	r4, [pc, #48]	; (801d18c <__libc_init_array+0x44>)
 801d15c:	f000 ffb0 	bl	801e0c0 <_init>
 801d160:	1ba4      	subs	r4, r4, r6
 801d162:	10a4      	asrs	r4, r4, #2
 801d164:	2500      	movs	r5, #0
 801d166:	42a5      	cmp	r5, r4
 801d168:	d105      	bne.n	801d176 <__libc_init_array+0x2e>
 801d16a:	bd70      	pop	{r4, r5, r6, pc}
 801d16c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d170:	4798      	blx	r3
 801d172:	3501      	adds	r5, #1
 801d174:	e7ee      	b.n	801d154 <__libc_init_array+0xc>
 801d176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d17a:	4798      	blx	r3
 801d17c:	3501      	adds	r5, #1
 801d17e:	e7f2      	b.n	801d166 <__libc_init_array+0x1e>
 801d180:	080503d0 	.word	0x080503d0
 801d184:	080503d0 	.word	0x080503d0
 801d188:	080503d0 	.word	0x080503d0
 801d18c:	080503e4 	.word	0x080503e4

0801d190 <malloc>:
 801d190:	4b02      	ldr	r3, [pc, #8]	; (801d19c <malloc+0xc>)
 801d192:	4601      	mov	r1, r0
 801d194:	6818      	ldr	r0, [r3, #0]
 801d196:	f000 b86d 	b.w	801d274 <_malloc_r>
 801d19a:	bf00      	nop
 801d19c:	20000104 	.word	0x20000104

0801d1a0 <free>:
 801d1a0:	4b02      	ldr	r3, [pc, #8]	; (801d1ac <free+0xc>)
 801d1a2:	4601      	mov	r1, r0
 801d1a4:	6818      	ldr	r0, [r3, #0]
 801d1a6:	f000 b817 	b.w	801d1d8 <_free_r>
 801d1aa:	bf00      	nop
 801d1ac:	20000104 	.word	0x20000104

0801d1b0 <memcpy>:
 801d1b0:	b510      	push	{r4, lr}
 801d1b2:	1e43      	subs	r3, r0, #1
 801d1b4:	440a      	add	r2, r1
 801d1b6:	4291      	cmp	r1, r2
 801d1b8:	d100      	bne.n	801d1bc <memcpy+0xc>
 801d1ba:	bd10      	pop	{r4, pc}
 801d1bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d1c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d1c4:	e7f7      	b.n	801d1b6 <memcpy+0x6>

0801d1c6 <memset>:
 801d1c6:	4402      	add	r2, r0
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	4293      	cmp	r3, r2
 801d1cc:	d100      	bne.n	801d1d0 <memset+0xa>
 801d1ce:	4770      	bx	lr
 801d1d0:	f803 1b01 	strb.w	r1, [r3], #1
 801d1d4:	e7f9      	b.n	801d1ca <memset+0x4>
	...

0801d1d8 <_free_r>:
 801d1d8:	b538      	push	{r3, r4, r5, lr}
 801d1da:	4605      	mov	r5, r0
 801d1dc:	2900      	cmp	r1, #0
 801d1de:	d045      	beq.n	801d26c <_free_r+0x94>
 801d1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d1e4:	1f0c      	subs	r4, r1, #4
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	bfb8      	it	lt
 801d1ea:	18e4      	addlt	r4, r4, r3
 801d1ec:	f000 feba 	bl	801df64 <__malloc_lock>
 801d1f0:	4a1f      	ldr	r2, [pc, #124]	; (801d270 <_free_r+0x98>)
 801d1f2:	6813      	ldr	r3, [r2, #0]
 801d1f4:	4610      	mov	r0, r2
 801d1f6:	b933      	cbnz	r3, 801d206 <_free_r+0x2e>
 801d1f8:	6063      	str	r3, [r4, #4]
 801d1fa:	6014      	str	r4, [r2, #0]
 801d1fc:	4628      	mov	r0, r5
 801d1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d202:	f000 beb0 	b.w	801df66 <__malloc_unlock>
 801d206:	42a3      	cmp	r3, r4
 801d208:	d90c      	bls.n	801d224 <_free_r+0x4c>
 801d20a:	6821      	ldr	r1, [r4, #0]
 801d20c:	1862      	adds	r2, r4, r1
 801d20e:	4293      	cmp	r3, r2
 801d210:	bf04      	itt	eq
 801d212:	681a      	ldreq	r2, [r3, #0]
 801d214:	685b      	ldreq	r3, [r3, #4]
 801d216:	6063      	str	r3, [r4, #4]
 801d218:	bf04      	itt	eq
 801d21a:	1852      	addeq	r2, r2, r1
 801d21c:	6022      	streq	r2, [r4, #0]
 801d21e:	6004      	str	r4, [r0, #0]
 801d220:	e7ec      	b.n	801d1fc <_free_r+0x24>
 801d222:	4613      	mov	r3, r2
 801d224:	685a      	ldr	r2, [r3, #4]
 801d226:	b10a      	cbz	r2, 801d22c <_free_r+0x54>
 801d228:	42a2      	cmp	r2, r4
 801d22a:	d9fa      	bls.n	801d222 <_free_r+0x4a>
 801d22c:	6819      	ldr	r1, [r3, #0]
 801d22e:	1858      	adds	r0, r3, r1
 801d230:	42a0      	cmp	r0, r4
 801d232:	d10b      	bne.n	801d24c <_free_r+0x74>
 801d234:	6820      	ldr	r0, [r4, #0]
 801d236:	4401      	add	r1, r0
 801d238:	1858      	adds	r0, r3, r1
 801d23a:	4282      	cmp	r2, r0
 801d23c:	6019      	str	r1, [r3, #0]
 801d23e:	d1dd      	bne.n	801d1fc <_free_r+0x24>
 801d240:	6810      	ldr	r0, [r2, #0]
 801d242:	6852      	ldr	r2, [r2, #4]
 801d244:	605a      	str	r2, [r3, #4]
 801d246:	4401      	add	r1, r0
 801d248:	6019      	str	r1, [r3, #0]
 801d24a:	e7d7      	b.n	801d1fc <_free_r+0x24>
 801d24c:	d902      	bls.n	801d254 <_free_r+0x7c>
 801d24e:	230c      	movs	r3, #12
 801d250:	602b      	str	r3, [r5, #0]
 801d252:	e7d3      	b.n	801d1fc <_free_r+0x24>
 801d254:	6820      	ldr	r0, [r4, #0]
 801d256:	1821      	adds	r1, r4, r0
 801d258:	428a      	cmp	r2, r1
 801d25a:	bf04      	itt	eq
 801d25c:	6811      	ldreq	r1, [r2, #0]
 801d25e:	6852      	ldreq	r2, [r2, #4]
 801d260:	6062      	str	r2, [r4, #4]
 801d262:	bf04      	itt	eq
 801d264:	1809      	addeq	r1, r1, r0
 801d266:	6021      	streq	r1, [r4, #0]
 801d268:	605c      	str	r4, [r3, #4]
 801d26a:	e7c7      	b.n	801d1fc <_free_r+0x24>
 801d26c:	bd38      	pop	{r3, r4, r5, pc}
 801d26e:	bf00      	nop
 801d270:	2002eee8 	.word	0x2002eee8

0801d274 <_malloc_r>:
 801d274:	b570      	push	{r4, r5, r6, lr}
 801d276:	1ccd      	adds	r5, r1, #3
 801d278:	f025 0503 	bic.w	r5, r5, #3
 801d27c:	3508      	adds	r5, #8
 801d27e:	2d0c      	cmp	r5, #12
 801d280:	bf38      	it	cc
 801d282:	250c      	movcc	r5, #12
 801d284:	2d00      	cmp	r5, #0
 801d286:	4606      	mov	r6, r0
 801d288:	db01      	blt.n	801d28e <_malloc_r+0x1a>
 801d28a:	42a9      	cmp	r1, r5
 801d28c:	d903      	bls.n	801d296 <_malloc_r+0x22>
 801d28e:	230c      	movs	r3, #12
 801d290:	6033      	str	r3, [r6, #0]
 801d292:	2000      	movs	r0, #0
 801d294:	bd70      	pop	{r4, r5, r6, pc}
 801d296:	f000 fe65 	bl	801df64 <__malloc_lock>
 801d29a:	4a21      	ldr	r2, [pc, #132]	; (801d320 <_malloc_r+0xac>)
 801d29c:	6814      	ldr	r4, [r2, #0]
 801d29e:	4621      	mov	r1, r4
 801d2a0:	b991      	cbnz	r1, 801d2c8 <_malloc_r+0x54>
 801d2a2:	4c20      	ldr	r4, [pc, #128]	; (801d324 <_malloc_r+0xb0>)
 801d2a4:	6823      	ldr	r3, [r4, #0]
 801d2a6:	b91b      	cbnz	r3, 801d2b0 <_malloc_r+0x3c>
 801d2a8:	4630      	mov	r0, r6
 801d2aa:	f000 fb05 	bl	801d8b8 <_sbrk_r>
 801d2ae:	6020      	str	r0, [r4, #0]
 801d2b0:	4629      	mov	r1, r5
 801d2b2:	4630      	mov	r0, r6
 801d2b4:	f000 fb00 	bl	801d8b8 <_sbrk_r>
 801d2b8:	1c43      	adds	r3, r0, #1
 801d2ba:	d124      	bne.n	801d306 <_malloc_r+0x92>
 801d2bc:	230c      	movs	r3, #12
 801d2be:	6033      	str	r3, [r6, #0]
 801d2c0:	4630      	mov	r0, r6
 801d2c2:	f000 fe50 	bl	801df66 <__malloc_unlock>
 801d2c6:	e7e4      	b.n	801d292 <_malloc_r+0x1e>
 801d2c8:	680b      	ldr	r3, [r1, #0]
 801d2ca:	1b5b      	subs	r3, r3, r5
 801d2cc:	d418      	bmi.n	801d300 <_malloc_r+0x8c>
 801d2ce:	2b0b      	cmp	r3, #11
 801d2d0:	d90f      	bls.n	801d2f2 <_malloc_r+0x7e>
 801d2d2:	600b      	str	r3, [r1, #0]
 801d2d4:	50cd      	str	r5, [r1, r3]
 801d2d6:	18cc      	adds	r4, r1, r3
 801d2d8:	4630      	mov	r0, r6
 801d2da:	f000 fe44 	bl	801df66 <__malloc_unlock>
 801d2de:	f104 000b 	add.w	r0, r4, #11
 801d2e2:	1d23      	adds	r3, r4, #4
 801d2e4:	f020 0007 	bic.w	r0, r0, #7
 801d2e8:	1ac3      	subs	r3, r0, r3
 801d2ea:	d0d3      	beq.n	801d294 <_malloc_r+0x20>
 801d2ec:	425a      	negs	r2, r3
 801d2ee:	50e2      	str	r2, [r4, r3]
 801d2f0:	e7d0      	b.n	801d294 <_malloc_r+0x20>
 801d2f2:	428c      	cmp	r4, r1
 801d2f4:	684b      	ldr	r3, [r1, #4]
 801d2f6:	bf16      	itet	ne
 801d2f8:	6063      	strne	r3, [r4, #4]
 801d2fa:	6013      	streq	r3, [r2, #0]
 801d2fc:	460c      	movne	r4, r1
 801d2fe:	e7eb      	b.n	801d2d8 <_malloc_r+0x64>
 801d300:	460c      	mov	r4, r1
 801d302:	6849      	ldr	r1, [r1, #4]
 801d304:	e7cc      	b.n	801d2a0 <_malloc_r+0x2c>
 801d306:	1cc4      	adds	r4, r0, #3
 801d308:	f024 0403 	bic.w	r4, r4, #3
 801d30c:	42a0      	cmp	r0, r4
 801d30e:	d005      	beq.n	801d31c <_malloc_r+0xa8>
 801d310:	1a21      	subs	r1, r4, r0
 801d312:	4630      	mov	r0, r6
 801d314:	f000 fad0 	bl	801d8b8 <_sbrk_r>
 801d318:	3001      	adds	r0, #1
 801d31a:	d0cf      	beq.n	801d2bc <_malloc_r+0x48>
 801d31c:	6025      	str	r5, [r4, #0]
 801d31e:	e7db      	b.n	801d2d8 <_malloc_r+0x64>
 801d320:	2002eee8 	.word	0x2002eee8
 801d324:	2002eeec 	.word	0x2002eeec

0801d328 <__sfputc_r>:
 801d328:	6893      	ldr	r3, [r2, #8]
 801d32a:	3b01      	subs	r3, #1
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	b410      	push	{r4}
 801d330:	6093      	str	r3, [r2, #8]
 801d332:	da08      	bge.n	801d346 <__sfputc_r+0x1e>
 801d334:	6994      	ldr	r4, [r2, #24]
 801d336:	42a3      	cmp	r3, r4
 801d338:	db01      	blt.n	801d33e <__sfputc_r+0x16>
 801d33a:	290a      	cmp	r1, #10
 801d33c:	d103      	bne.n	801d346 <__sfputc_r+0x1e>
 801d33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d342:	f000 bb0d 	b.w	801d960 <__swbuf_r>
 801d346:	6813      	ldr	r3, [r2, #0]
 801d348:	1c58      	adds	r0, r3, #1
 801d34a:	6010      	str	r0, [r2, #0]
 801d34c:	7019      	strb	r1, [r3, #0]
 801d34e:	4608      	mov	r0, r1
 801d350:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d354:	4770      	bx	lr

0801d356 <__sfputs_r>:
 801d356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d358:	4606      	mov	r6, r0
 801d35a:	460f      	mov	r7, r1
 801d35c:	4614      	mov	r4, r2
 801d35e:	18d5      	adds	r5, r2, r3
 801d360:	42ac      	cmp	r4, r5
 801d362:	d101      	bne.n	801d368 <__sfputs_r+0x12>
 801d364:	2000      	movs	r0, #0
 801d366:	e007      	b.n	801d378 <__sfputs_r+0x22>
 801d368:	463a      	mov	r2, r7
 801d36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d36e:	4630      	mov	r0, r6
 801d370:	f7ff ffda 	bl	801d328 <__sfputc_r>
 801d374:	1c43      	adds	r3, r0, #1
 801d376:	d1f3      	bne.n	801d360 <__sfputs_r+0xa>
 801d378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d37c <_vfiprintf_r>:
 801d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d380:	460c      	mov	r4, r1
 801d382:	b09d      	sub	sp, #116	; 0x74
 801d384:	4617      	mov	r7, r2
 801d386:	461d      	mov	r5, r3
 801d388:	4606      	mov	r6, r0
 801d38a:	b118      	cbz	r0, 801d394 <_vfiprintf_r+0x18>
 801d38c:	6983      	ldr	r3, [r0, #24]
 801d38e:	b90b      	cbnz	r3, 801d394 <_vfiprintf_r+0x18>
 801d390:	f000 fcfa 	bl	801dd88 <__sinit>
 801d394:	4b7c      	ldr	r3, [pc, #496]	; (801d588 <_vfiprintf_r+0x20c>)
 801d396:	429c      	cmp	r4, r3
 801d398:	d158      	bne.n	801d44c <_vfiprintf_r+0xd0>
 801d39a:	6874      	ldr	r4, [r6, #4]
 801d39c:	89a3      	ldrh	r3, [r4, #12]
 801d39e:	0718      	lsls	r0, r3, #28
 801d3a0:	d55e      	bpl.n	801d460 <_vfiprintf_r+0xe4>
 801d3a2:	6923      	ldr	r3, [r4, #16]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d05b      	beq.n	801d460 <_vfiprintf_r+0xe4>
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	9309      	str	r3, [sp, #36]	; 0x24
 801d3ac:	2320      	movs	r3, #32
 801d3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d3b2:	2330      	movs	r3, #48	; 0x30
 801d3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d3b8:	9503      	str	r5, [sp, #12]
 801d3ba:	f04f 0b01 	mov.w	fp, #1
 801d3be:	46b8      	mov	r8, r7
 801d3c0:	4645      	mov	r5, r8
 801d3c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d3c6:	b10b      	cbz	r3, 801d3cc <_vfiprintf_r+0x50>
 801d3c8:	2b25      	cmp	r3, #37	; 0x25
 801d3ca:	d154      	bne.n	801d476 <_vfiprintf_r+0xfa>
 801d3cc:	ebb8 0a07 	subs.w	sl, r8, r7
 801d3d0:	d00b      	beq.n	801d3ea <_vfiprintf_r+0x6e>
 801d3d2:	4653      	mov	r3, sl
 801d3d4:	463a      	mov	r2, r7
 801d3d6:	4621      	mov	r1, r4
 801d3d8:	4630      	mov	r0, r6
 801d3da:	f7ff ffbc 	bl	801d356 <__sfputs_r>
 801d3de:	3001      	adds	r0, #1
 801d3e0:	f000 80c2 	beq.w	801d568 <_vfiprintf_r+0x1ec>
 801d3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3e6:	4453      	add	r3, sl
 801d3e8:	9309      	str	r3, [sp, #36]	; 0x24
 801d3ea:	f898 3000 	ldrb.w	r3, [r8]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	f000 80ba 	beq.w	801d568 <_vfiprintf_r+0x1ec>
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	f04f 32ff 	mov.w	r2, #4294967295
 801d3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d3fe:	9304      	str	r3, [sp, #16]
 801d400:	9307      	str	r3, [sp, #28]
 801d402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d406:	931a      	str	r3, [sp, #104]	; 0x68
 801d408:	46a8      	mov	r8, r5
 801d40a:	2205      	movs	r2, #5
 801d40c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801d410:	485e      	ldr	r0, [pc, #376]	; (801d58c <_vfiprintf_r+0x210>)
 801d412:	f7e2 feed 	bl	80001f0 <memchr>
 801d416:	9b04      	ldr	r3, [sp, #16]
 801d418:	bb78      	cbnz	r0, 801d47a <_vfiprintf_r+0xfe>
 801d41a:	06d9      	lsls	r1, r3, #27
 801d41c:	bf44      	itt	mi
 801d41e:	2220      	movmi	r2, #32
 801d420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d424:	071a      	lsls	r2, r3, #28
 801d426:	bf44      	itt	mi
 801d428:	222b      	movmi	r2, #43	; 0x2b
 801d42a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d42e:	782a      	ldrb	r2, [r5, #0]
 801d430:	2a2a      	cmp	r2, #42	; 0x2a
 801d432:	d02a      	beq.n	801d48a <_vfiprintf_r+0x10e>
 801d434:	9a07      	ldr	r2, [sp, #28]
 801d436:	46a8      	mov	r8, r5
 801d438:	2000      	movs	r0, #0
 801d43a:	250a      	movs	r5, #10
 801d43c:	4641      	mov	r1, r8
 801d43e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d442:	3b30      	subs	r3, #48	; 0x30
 801d444:	2b09      	cmp	r3, #9
 801d446:	d969      	bls.n	801d51c <_vfiprintf_r+0x1a0>
 801d448:	b360      	cbz	r0, 801d4a4 <_vfiprintf_r+0x128>
 801d44a:	e024      	b.n	801d496 <_vfiprintf_r+0x11a>
 801d44c:	4b50      	ldr	r3, [pc, #320]	; (801d590 <_vfiprintf_r+0x214>)
 801d44e:	429c      	cmp	r4, r3
 801d450:	d101      	bne.n	801d456 <_vfiprintf_r+0xda>
 801d452:	68b4      	ldr	r4, [r6, #8]
 801d454:	e7a2      	b.n	801d39c <_vfiprintf_r+0x20>
 801d456:	4b4f      	ldr	r3, [pc, #316]	; (801d594 <_vfiprintf_r+0x218>)
 801d458:	429c      	cmp	r4, r3
 801d45a:	bf08      	it	eq
 801d45c:	68f4      	ldreq	r4, [r6, #12]
 801d45e:	e79d      	b.n	801d39c <_vfiprintf_r+0x20>
 801d460:	4621      	mov	r1, r4
 801d462:	4630      	mov	r0, r6
 801d464:	f000 face 	bl	801da04 <__swsetup_r>
 801d468:	2800      	cmp	r0, #0
 801d46a:	d09d      	beq.n	801d3a8 <_vfiprintf_r+0x2c>
 801d46c:	f04f 30ff 	mov.w	r0, #4294967295
 801d470:	b01d      	add	sp, #116	; 0x74
 801d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d476:	46a8      	mov	r8, r5
 801d478:	e7a2      	b.n	801d3c0 <_vfiprintf_r+0x44>
 801d47a:	4a44      	ldr	r2, [pc, #272]	; (801d58c <_vfiprintf_r+0x210>)
 801d47c:	1a80      	subs	r0, r0, r2
 801d47e:	fa0b f000 	lsl.w	r0, fp, r0
 801d482:	4318      	orrs	r0, r3
 801d484:	9004      	str	r0, [sp, #16]
 801d486:	4645      	mov	r5, r8
 801d488:	e7be      	b.n	801d408 <_vfiprintf_r+0x8c>
 801d48a:	9a03      	ldr	r2, [sp, #12]
 801d48c:	1d11      	adds	r1, r2, #4
 801d48e:	6812      	ldr	r2, [r2, #0]
 801d490:	9103      	str	r1, [sp, #12]
 801d492:	2a00      	cmp	r2, #0
 801d494:	db01      	blt.n	801d49a <_vfiprintf_r+0x11e>
 801d496:	9207      	str	r2, [sp, #28]
 801d498:	e004      	b.n	801d4a4 <_vfiprintf_r+0x128>
 801d49a:	4252      	negs	r2, r2
 801d49c:	f043 0302 	orr.w	r3, r3, #2
 801d4a0:	9207      	str	r2, [sp, #28]
 801d4a2:	9304      	str	r3, [sp, #16]
 801d4a4:	f898 3000 	ldrb.w	r3, [r8]
 801d4a8:	2b2e      	cmp	r3, #46	; 0x2e
 801d4aa:	d10e      	bne.n	801d4ca <_vfiprintf_r+0x14e>
 801d4ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d4b0:	2b2a      	cmp	r3, #42	; 0x2a
 801d4b2:	d138      	bne.n	801d526 <_vfiprintf_r+0x1aa>
 801d4b4:	9b03      	ldr	r3, [sp, #12]
 801d4b6:	1d1a      	adds	r2, r3, #4
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	9203      	str	r2, [sp, #12]
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	bfb8      	it	lt
 801d4c0:	f04f 33ff 	movlt.w	r3, #4294967295
 801d4c4:	f108 0802 	add.w	r8, r8, #2
 801d4c8:	9305      	str	r3, [sp, #20]
 801d4ca:	4d33      	ldr	r5, [pc, #204]	; (801d598 <_vfiprintf_r+0x21c>)
 801d4cc:	f898 1000 	ldrb.w	r1, [r8]
 801d4d0:	2203      	movs	r2, #3
 801d4d2:	4628      	mov	r0, r5
 801d4d4:	f7e2 fe8c 	bl	80001f0 <memchr>
 801d4d8:	b140      	cbz	r0, 801d4ec <_vfiprintf_r+0x170>
 801d4da:	2340      	movs	r3, #64	; 0x40
 801d4dc:	1b40      	subs	r0, r0, r5
 801d4de:	fa03 f000 	lsl.w	r0, r3, r0
 801d4e2:	9b04      	ldr	r3, [sp, #16]
 801d4e4:	4303      	orrs	r3, r0
 801d4e6:	f108 0801 	add.w	r8, r8, #1
 801d4ea:	9304      	str	r3, [sp, #16]
 801d4ec:	f898 1000 	ldrb.w	r1, [r8]
 801d4f0:	482a      	ldr	r0, [pc, #168]	; (801d59c <_vfiprintf_r+0x220>)
 801d4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d4f6:	2206      	movs	r2, #6
 801d4f8:	f108 0701 	add.w	r7, r8, #1
 801d4fc:	f7e2 fe78 	bl	80001f0 <memchr>
 801d500:	2800      	cmp	r0, #0
 801d502:	d037      	beq.n	801d574 <_vfiprintf_r+0x1f8>
 801d504:	4b26      	ldr	r3, [pc, #152]	; (801d5a0 <_vfiprintf_r+0x224>)
 801d506:	bb1b      	cbnz	r3, 801d550 <_vfiprintf_r+0x1d4>
 801d508:	9b03      	ldr	r3, [sp, #12]
 801d50a:	3307      	adds	r3, #7
 801d50c:	f023 0307 	bic.w	r3, r3, #7
 801d510:	3308      	adds	r3, #8
 801d512:	9303      	str	r3, [sp, #12]
 801d514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d516:	444b      	add	r3, r9
 801d518:	9309      	str	r3, [sp, #36]	; 0x24
 801d51a:	e750      	b.n	801d3be <_vfiprintf_r+0x42>
 801d51c:	fb05 3202 	mla	r2, r5, r2, r3
 801d520:	2001      	movs	r0, #1
 801d522:	4688      	mov	r8, r1
 801d524:	e78a      	b.n	801d43c <_vfiprintf_r+0xc0>
 801d526:	2300      	movs	r3, #0
 801d528:	f108 0801 	add.w	r8, r8, #1
 801d52c:	9305      	str	r3, [sp, #20]
 801d52e:	4619      	mov	r1, r3
 801d530:	250a      	movs	r5, #10
 801d532:	4640      	mov	r0, r8
 801d534:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d538:	3a30      	subs	r2, #48	; 0x30
 801d53a:	2a09      	cmp	r2, #9
 801d53c:	d903      	bls.n	801d546 <_vfiprintf_r+0x1ca>
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d0c3      	beq.n	801d4ca <_vfiprintf_r+0x14e>
 801d542:	9105      	str	r1, [sp, #20]
 801d544:	e7c1      	b.n	801d4ca <_vfiprintf_r+0x14e>
 801d546:	fb05 2101 	mla	r1, r5, r1, r2
 801d54a:	2301      	movs	r3, #1
 801d54c:	4680      	mov	r8, r0
 801d54e:	e7f0      	b.n	801d532 <_vfiprintf_r+0x1b6>
 801d550:	ab03      	add	r3, sp, #12
 801d552:	9300      	str	r3, [sp, #0]
 801d554:	4622      	mov	r2, r4
 801d556:	4b13      	ldr	r3, [pc, #76]	; (801d5a4 <_vfiprintf_r+0x228>)
 801d558:	a904      	add	r1, sp, #16
 801d55a:	4630      	mov	r0, r6
 801d55c:	f3af 8000 	nop.w
 801d560:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d564:	4681      	mov	r9, r0
 801d566:	d1d5      	bne.n	801d514 <_vfiprintf_r+0x198>
 801d568:	89a3      	ldrh	r3, [r4, #12]
 801d56a:	065b      	lsls	r3, r3, #25
 801d56c:	f53f af7e 	bmi.w	801d46c <_vfiprintf_r+0xf0>
 801d570:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d572:	e77d      	b.n	801d470 <_vfiprintf_r+0xf4>
 801d574:	ab03      	add	r3, sp, #12
 801d576:	9300      	str	r3, [sp, #0]
 801d578:	4622      	mov	r2, r4
 801d57a:	4b0a      	ldr	r3, [pc, #40]	; (801d5a4 <_vfiprintf_r+0x228>)
 801d57c:	a904      	add	r1, sp, #16
 801d57e:	4630      	mov	r0, r6
 801d580:	f000 f888 	bl	801d694 <_printf_i>
 801d584:	e7ec      	b.n	801d560 <_vfiprintf_r+0x1e4>
 801d586:	bf00      	nop
 801d588:	080211c8 	.word	0x080211c8
 801d58c:	08021170 	.word	0x08021170
 801d590:	080211e8 	.word	0x080211e8
 801d594:	080211a8 	.word	0x080211a8
 801d598:	08021176 	.word	0x08021176
 801d59c:	0802117a 	.word	0x0802117a
 801d5a0:	00000000 	.word	0x00000000
 801d5a4:	0801d357 	.word	0x0801d357

0801d5a8 <_printf_common>:
 801d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5ac:	4691      	mov	r9, r2
 801d5ae:	461f      	mov	r7, r3
 801d5b0:	688a      	ldr	r2, [r1, #8]
 801d5b2:	690b      	ldr	r3, [r1, #16]
 801d5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d5b8:	4293      	cmp	r3, r2
 801d5ba:	bfb8      	it	lt
 801d5bc:	4613      	movlt	r3, r2
 801d5be:	f8c9 3000 	str.w	r3, [r9]
 801d5c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d5c6:	4606      	mov	r6, r0
 801d5c8:	460c      	mov	r4, r1
 801d5ca:	b112      	cbz	r2, 801d5d2 <_printf_common+0x2a>
 801d5cc:	3301      	adds	r3, #1
 801d5ce:	f8c9 3000 	str.w	r3, [r9]
 801d5d2:	6823      	ldr	r3, [r4, #0]
 801d5d4:	0699      	lsls	r1, r3, #26
 801d5d6:	bf42      	ittt	mi
 801d5d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 801d5dc:	3302      	addmi	r3, #2
 801d5de:	f8c9 3000 	strmi.w	r3, [r9]
 801d5e2:	6825      	ldr	r5, [r4, #0]
 801d5e4:	f015 0506 	ands.w	r5, r5, #6
 801d5e8:	d107      	bne.n	801d5fa <_printf_common+0x52>
 801d5ea:	f104 0a19 	add.w	sl, r4, #25
 801d5ee:	68e3      	ldr	r3, [r4, #12]
 801d5f0:	f8d9 2000 	ldr.w	r2, [r9]
 801d5f4:	1a9b      	subs	r3, r3, r2
 801d5f6:	42ab      	cmp	r3, r5
 801d5f8:	dc28      	bgt.n	801d64c <_printf_common+0xa4>
 801d5fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801d5fe:	6822      	ldr	r2, [r4, #0]
 801d600:	3300      	adds	r3, #0
 801d602:	bf18      	it	ne
 801d604:	2301      	movne	r3, #1
 801d606:	0692      	lsls	r2, r2, #26
 801d608:	d42d      	bmi.n	801d666 <_printf_common+0xbe>
 801d60a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d60e:	4639      	mov	r1, r7
 801d610:	4630      	mov	r0, r6
 801d612:	47c0      	blx	r8
 801d614:	3001      	adds	r0, #1
 801d616:	d020      	beq.n	801d65a <_printf_common+0xb2>
 801d618:	6823      	ldr	r3, [r4, #0]
 801d61a:	68e5      	ldr	r5, [r4, #12]
 801d61c:	f8d9 2000 	ldr.w	r2, [r9]
 801d620:	f003 0306 	and.w	r3, r3, #6
 801d624:	2b04      	cmp	r3, #4
 801d626:	bf08      	it	eq
 801d628:	1aad      	subeq	r5, r5, r2
 801d62a:	68a3      	ldr	r3, [r4, #8]
 801d62c:	6922      	ldr	r2, [r4, #16]
 801d62e:	bf0c      	ite	eq
 801d630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d634:	2500      	movne	r5, #0
 801d636:	4293      	cmp	r3, r2
 801d638:	bfc4      	itt	gt
 801d63a:	1a9b      	subgt	r3, r3, r2
 801d63c:	18ed      	addgt	r5, r5, r3
 801d63e:	f04f 0900 	mov.w	r9, #0
 801d642:	341a      	adds	r4, #26
 801d644:	454d      	cmp	r5, r9
 801d646:	d11a      	bne.n	801d67e <_printf_common+0xd6>
 801d648:	2000      	movs	r0, #0
 801d64a:	e008      	b.n	801d65e <_printf_common+0xb6>
 801d64c:	2301      	movs	r3, #1
 801d64e:	4652      	mov	r2, sl
 801d650:	4639      	mov	r1, r7
 801d652:	4630      	mov	r0, r6
 801d654:	47c0      	blx	r8
 801d656:	3001      	adds	r0, #1
 801d658:	d103      	bne.n	801d662 <_printf_common+0xba>
 801d65a:	f04f 30ff 	mov.w	r0, #4294967295
 801d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d662:	3501      	adds	r5, #1
 801d664:	e7c3      	b.n	801d5ee <_printf_common+0x46>
 801d666:	18e1      	adds	r1, r4, r3
 801d668:	1c5a      	adds	r2, r3, #1
 801d66a:	2030      	movs	r0, #48	; 0x30
 801d66c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d670:	4422      	add	r2, r4
 801d672:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d676:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d67a:	3302      	adds	r3, #2
 801d67c:	e7c5      	b.n	801d60a <_printf_common+0x62>
 801d67e:	2301      	movs	r3, #1
 801d680:	4622      	mov	r2, r4
 801d682:	4639      	mov	r1, r7
 801d684:	4630      	mov	r0, r6
 801d686:	47c0      	blx	r8
 801d688:	3001      	adds	r0, #1
 801d68a:	d0e6      	beq.n	801d65a <_printf_common+0xb2>
 801d68c:	f109 0901 	add.w	r9, r9, #1
 801d690:	e7d8      	b.n	801d644 <_printf_common+0x9c>
	...

0801d694 <_printf_i>:
 801d694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d698:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801d69c:	460c      	mov	r4, r1
 801d69e:	7e09      	ldrb	r1, [r1, #24]
 801d6a0:	b085      	sub	sp, #20
 801d6a2:	296e      	cmp	r1, #110	; 0x6e
 801d6a4:	4617      	mov	r7, r2
 801d6a6:	4606      	mov	r6, r0
 801d6a8:	4698      	mov	r8, r3
 801d6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d6ac:	f000 80b3 	beq.w	801d816 <_printf_i+0x182>
 801d6b0:	d822      	bhi.n	801d6f8 <_printf_i+0x64>
 801d6b2:	2963      	cmp	r1, #99	; 0x63
 801d6b4:	d036      	beq.n	801d724 <_printf_i+0x90>
 801d6b6:	d80a      	bhi.n	801d6ce <_printf_i+0x3a>
 801d6b8:	2900      	cmp	r1, #0
 801d6ba:	f000 80b9 	beq.w	801d830 <_printf_i+0x19c>
 801d6be:	2958      	cmp	r1, #88	; 0x58
 801d6c0:	f000 8083 	beq.w	801d7ca <_printf_i+0x136>
 801d6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d6c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801d6cc:	e032      	b.n	801d734 <_printf_i+0xa0>
 801d6ce:	2964      	cmp	r1, #100	; 0x64
 801d6d0:	d001      	beq.n	801d6d6 <_printf_i+0x42>
 801d6d2:	2969      	cmp	r1, #105	; 0x69
 801d6d4:	d1f6      	bne.n	801d6c4 <_printf_i+0x30>
 801d6d6:	6820      	ldr	r0, [r4, #0]
 801d6d8:	6813      	ldr	r3, [r2, #0]
 801d6da:	0605      	lsls	r5, r0, #24
 801d6dc:	f103 0104 	add.w	r1, r3, #4
 801d6e0:	d52a      	bpl.n	801d738 <_printf_i+0xa4>
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	6011      	str	r1, [r2, #0]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	da03      	bge.n	801d6f2 <_printf_i+0x5e>
 801d6ea:	222d      	movs	r2, #45	; 0x2d
 801d6ec:	425b      	negs	r3, r3
 801d6ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d6f2:	486f      	ldr	r0, [pc, #444]	; (801d8b0 <_printf_i+0x21c>)
 801d6f4:	220a      	movs	r2, #10
 801d6f6:	e039      	b.n	801d76c <_printf_i+0xd8>
 801d6f8:	2973      	cmp	r1, #115	; 0x73
 801d6fa:	f000 809d 	beq.w	801d838 <_printf_i+0x1a4>
 801d6fe:	d808      	bhi.n	801d712 <_printf_i+0x7e>
 801d700:	296f      	cmp	r1, #111	; 0x6f
 801d702:	d020      	beq.n	801d746 <_printf_i+0xb2>
 801d704:	2970      	cmp	r1, #112	; 0x70
 801d706:	d1dd      	bne.n	801d6c4 <_printf_i+0x30>
 801d708:	6823      	ldr	r3, [r4, #0]
 801d70a:	f043 0320 	orr.w	r3, r3, #32
 801d70e:	6023      	str	r3, [r4, #0]
 801d710:	e003      	b.n	801d71a <_printf_i+0x86>
 801d712:	2975      	cmp	r1, #117	; 0x75
 801d714:	d017      	beq.n	801d746 <_printf_i+0xb2>
 801d716:	2978      	cmp	r1, #120	; 0x78
 801d718:	d1d4      	bne.n	801d6c4 <_printf_i+0x30>
 801d71a:	2378      	movs	r3, #120	; 0x78
 801d71c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d720:	4864      	ldr	r0, [pc, #400]	; (801d8b4 <_printf_i+0x220>)
 801d722:	e055      	b.n	801d7d0 <_printf_i+0x13c>
 801d724:	6813      	ldr	r3, [r2, #0]
 801d726:	1d19      	adds	r1, r3, #4
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	6011      	str	r1, [r2, #0]
 801d72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d734:	2301      	movs	r3, #1
 801d736:	e08c      	b.n	801d852 <_printf_i+0x1be>
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	6011      	str	r1, [r2, #0]
 801d73c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d740:	bf18      	it	ne
 801d742:	b21b      	sxthne	r3, r3
 801d744:	e7cf      	b.n	801d6e6 <_printf_i+0x52>
 801d746:	6813      	ldr	r3, [r2, #0]
 801d748:	6825      	ldr	r5, [r4, #0]
 801d74a:	1d18      	adds	r0, r3, #4
 801d74c:	6010      	str	r0, [r2, #0]
 801d74e:	0628      	lsls	r0, r5, #24
 801d750:	d501      	bpl.n	801d756 <_printf_i+0xc2>
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	e002      	b.n	801d75c <_printf_i+0xc8>
 801d756:	0668      	lsls	r0, r5, #25
 801d758:	d5fb      	bpl.n	801d752 <_printf_i+0xbe>
 801d75a:	881b      	ldrh	r3, [r3, #0]
 801d75c:	4854      	ldr	r0, [pc, #336]	; (801d8b0 <_printf_i+0x21c>)
 801d75e:	296f      	cmp	r1, #111	; 0x6f
 801d760:	bf14      	ite	ne
 801d762:	220a      	movne	r2, #10
 801d764:	2208      	moveq	r2, #8
 801d766:	2100      	movs	r1, #0
 801d768:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d76c:	6865      	ldr	r5, [r4, #4]
 801d76e:	60a5      	str	r5, [r4, #8]
 801d770:	2d00      	cmp	r5, #0
 801d772:	f2c0 8095 	blt.w	801d8a0 <_printf_i+0x20c>
 801d776:	6821      	ldr	r1, [r4, #0]
 801d778:	f021 0104 	bic.w	r1, r1, #4
 801d77c:	6021      	str	r1, [r4, #0]
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d13d      	bne.n	801d7fe <_printf_i+0x16a>
 801d782:	2d00      	cmp	r5, #0
 801d784:	f040 808e 	bne.w	801d8a4 <_printf_i+0x210>
 801d788:	4665      	mov	r5, ip
 801d78a:	2a08      	cmp	r2, #8
 801d78c:	d10b      	bne.n	801d7a6 <_printf_i+0x112>
 801d78e:	6823      	ldr	r3, [r4, #0]
 801d790:	07db      	lsls	r3, r3, #31
 801d792:	d508      	bpl.n	801d7a6 <_printf_i+0x112>
 801d794:	6923      	ldr	r3, [r4, #16]
 801d796:	6862      	ldr	r2, [r4, #4]
 801d798:	429a      	cmp	r2, r3
 801d79a:	bfde      	ittt	le
 801d79c:	2330      	movle	r3, #48	; 0x30
 801d79e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d7a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d7a6:	ebac 0305 	sub.w	r3, ip, r5
 801d7aa:	6123      	str	r3, [r4, #16]
 801d7ac:	f8cd 8000 	str.w	r8, [sp]
 801d7b0:	463b      	mov	r3, r7
 801d7b2:	aa03      	add	r2, sp, #12
 801d7b4:	4621      	mov	r1, r4
 801d7b6:	4630      	mov	r0, r6
 801d7b8:	f7ff fef6 	bl	801d5a8 <_printf_common>
 801d7bc:	3001      	adds	r0, #1
 801d7be:	d14d      	bne.n	801d85c <_printf_i+0x1c8>
 801d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7c4:	b005      	add	sp, #20
 801d7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7ca:	4839      	ldr	r0, [pc, #228]	; (801d8b0 <_printf_i+0x21c>)
 801d7cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801d7d0:	6813      	ldr	r3, [r2, #0]
 801d7d2:	6821      	ldr	r1, [r4, #0]
 801d7d4:	1d1d      	adds	r5, r3, #4
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	6015      	str	r5, [r2, #0]
 801d7da:	060a      	lsls	r2, r1, #24
 801d7dc:	d50b      	bpl.n	801d7f6 <_printf_i+0x162>
 801d7de:	07ca      	lsls	r2, r1, #31
 801d7e0:	bf44      	itt	mi
 801d7e2:	f041 0120 	orrmi.w	r1, r1, #32
 801d7e6:	6021      	strmi	r1, [r4, #0]
 801d7e8:	b91b      	cbnz	r3, 801d7f2 <_printf_i+0x15e>
 801d7ea:	6822      	ldr	r2, [r4, #0]
 801d7ec:	f022 0220 	bic.w	r2, r2, #32
 801d7f0:	6022      	str	r2, [r4, #0]
 801d7f2:	2210      	movs	r2, #16
 801d7f4:	e7b7      	b.n	801d766 <_printf_i+0xd2>
 801d7f6:	064d      	lsls	r5, r1, #25
 801d7f8:	bf48      	it	mi
 801d7fa:	b29b      	uxthmi	r3, r3
 801d7fc:	e7ef      	b.n	801d7de <_printf_i+0x14a>
 801d7fe:	4665      	mov	r5, ip
 801d800:	fbb3 f1f2 	udiv	r1, r3, r2
 801d804:	fb02 3311 	mls	r3, r2, r1, r3
 801d808:	5cc3      	ldrb	r3, [r0, r3]
 801d80a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801d80e:	460b      	mov	r3, r1
 801d810:	2900      	cmp	r1, #0
 801d812:	d1f5      	bne.n	801d800 <_printf_i+0x16c>
 801d814:	e7b9      	b.n	801d78a <_printf_i+0xf6>
 801d816:	6813      	ldr	r3, [r2, #0]
 801d818:	6825      	ldr	r5, [r4, #0]
 801d81a:	6961      	ldr	r1, [r4, #20]
 801d81c:	1d18      	adds	r0, r3, #4
 801d81e:	6010      	str	r0, [r2, #0]
 801d820:	0628      	lsls	r0, r5, #24
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	d501      	bpl.n	801d82a <_printf_i+0x196>
 801d826:	6019      	str	r1, [r3, #0]
 801d828:	e002      	b.n	801d830 <_printf_i+0x19c>
 801d82a:	066a      	lsls	r2, r5, #25
 801d82c:	d5fb      	bpl.n	801d826 <_printf_i+0x192>
 801d82e:	8019      	strh	r1, [r3, #0]
 801d830:	2300      	movs	r3, #0
 801d832:	6123      	str	r3, [r4, #16]
 801d834:	4665      	mov	r5, ip
 801d836:	e7b9      	b.n	801d7ac <_printf_i+0x118>
 801d838:	6813      	ldr	r3, [r2, #0]
 801d83a:	1d19      	adds	r1, r3, #4
 801d83c:	6011      	str	r1, [r2, #0]
 801d83e:	681d      	ldr	r5, [r3, #0]
 801d840:	6862      	ldr	r2, [r4, #4]
 801d842:	2100      	movs	r1, #0
 801d844:	4628      	mov	r0, r5
 801d846:	f7e2 fcd3 	bl	80001f0 <memchr>
 801d84a:	b108      	cbz	r0, 801d850 <_printf_i+0x1bc>
 801d84c:	1b40      	subs	r0, r0, r5
 801d84e:	6060      	str	r0, [r4, #4]
 801d850:	6863      	ldr	r3, [r4, #4]
 801d852:	6123      	str	r3, [r4, #16]
 801d854:	2300      	movs	r3, #0
 801d856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d85a:	e7a7      	b.n	801d7ac <_printf_i+0x118>
 801d85c:	6923      	ldr	r3, [r4, #16]
 801d85e:	462a      	mov	r2, r5
 801d860:	4639      	mov	r1, r7
 801d862:	4630      	mov	r0, r6
 801d864:	47c0      	blx	r8
 801d866:	3001      	adds	r0, #1
 801d868:	d0aa      	beq.n	801d7c0 <_printf_i+0x12c>
 801d86a:	6823      	ldr	r3, [r4, #0]
 801d86c:	079b      	lsls	r3, r3, #30
 801d86e:	d413      	bmi.n	801d898 <_printf_i+0x204>
 801d870:	68e0      	ldr	r0, [r4, #12]
 801d872:	9b03      	ldr	r3, [sp, #12]
 801d874:	4298      	cmp	r0, r3
 801d876:	bfb8      	it	lt
 801d878:	4618      	movlt	r0, r3
 801d87a:	e7a3      	b.n	801d7c4 <_printf_i+0x130>
 801d87c:	2301      	movs	r3, #1
 801d87e:	464a      	mov	r2, r9
 801d880:	4639      	mov	r1, r7
 801d882:	4630      	mov	r0, r6
 801d884:	47c0      	blx	r8
 801d886:	3001      	adds	r0, #1
 801d888:	d09a      	beq.n	801d7c0 <_printf_i+0x12c>
 801d88a:	3501      	adds	r5, #1
 801d88c:	68e3      	ldr	r3, [r4, #12]
 801d88e:	9a03      	ldr	r2, [sp, #12]
 801d890:	1a9b      	subs	r3, r3, r2
 801d892:	42ab      	cmp	r3, r5
 801d894:	dcf2      	bgt.n	801d87c <_printf_i+0x1e8>
 801d896:	e7eb      	b.n	801d870 <_printf_i+0x1dc>
 801d898:	2500      	movs	r5, #0
 801d89a:	f104 0919 	add.w	r9, r4, #25
 801d89e:	e7f5      	b.n	801d88c <_printf_i+0x1f8>
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d1ac      	bne.n	801d7fe <_printf_i+0x16a>
 801d8a4:	7803      	ldrb	r3, [r0, #0]
 801d8a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d8aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d8ae:	e76c      	b.n	801d78a <_printf_i+0xf6>
 801d8b0:	08021181 	.word	0x08021181
 801d8b4:	08021192 	.word	0x08021192

0801d8b8 <_sbrk_r>:
 801d8b8:	b538      	push	{r3, r4, r5, lr}
 801d8ba:	4c06      	ldr	r4, [pc, #24]	; (801d8d4 <_sbrk_r+0x1c>)
 801d8bc:	2300      	movs	r3, #0
 801d8be:	4605      	mov	r5, r0
 801d8c0:	4608      	mov	r0, r1
 801d8c2:	6023      	str	r3, [r4, #0]
 801d8c4:	f7e3 febc 	bl	8001640 <_sbrk>
 801d8c8:	1c43      	adds	r3, r0, #1
 801d8ca:	d102      	bne.n	801d8d2 <_sbrk_r+0x1a>
 801d8cc:	6823      	ldr	r3, [r4, #0]
 801d8ce:	b103      	cbz	r3, 801d8d2 <_sbrk_r+0x1a>
 801d8d0:	602b      	str	r3, [r5, #0]
 801d8d2:	bd38      	pop	{r3, r4, r5, pc}
 801d8d4:	2002f378 	.word	0x2002f378

0801d8d8 <_raise_r>:
 801d8d8:	291f      	cmp	r1, #31
 801d8da:	b538      	push	{r3, r4, r5, lr}
 801d8dc:	4604      	mov	r4, r0
 801d8de:	460d      	mov	r5, r1
 801d8e0:	d904      	bls.n	801d8ec <_raise_r+0x14>
 801d8e2:	2316      	movs	r3, #22
 801d8e4:	6003      	str	r3, [r0, #0]
 801d8e6:	f04f 30ff 	mov.w	r0, #4294967295
 801d8ea:	bd38      	pop	{r3, r4, r5, pc}
 801d8ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d8ee:	b112      	cbz	r2, 801d8f6 <_raise_r+0x1e>
 801d8f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d8f4:	b94b      	cbnz	r3, 801d90a <_raise_r+0x32>
 801d8f6:	4620      	mov	r0, r4
 801d8f8:	f000 f830 	bl	801d95c <_getpid_r>
 801d8fc:	462a      	mov	r2, r5
 801d8fe:	4601      	mov	r1, r0
 801d900:	4620      	mov	r0, r4
 801d902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d906:	f000 b817 	b.w	801d938 <_kill_r>
 801d90a:	2b01      	cmp	r3, #1
 801d90c:	d00a      	beq.n	801d924 <_raise_r+0x4c>
 801d90e:	1c59      	adds	r1, r3, #1
 801d910:	d103      	bne.n	801d91a <_raise_r+0x42>
 801d912:	2316      	movs	r3, #22
 801d914:	6003      	str	r3, [r0, #0]
 801d916:	2001      	movs	r0, #1
 801d918:	e7e7      	b.n	801d8ea <_raise_r+0x12>
 801d91a:	2400      	movs	r4, #0
 801d91c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d920:	4628      	mov	r0, r5
 801d922:	4798      	blx	r3
 801d924:	2000      	movs	r0, #0
 801d926:	e7e0      	b.n	801d8ea <_raise_r+0x12>

0801d928 <raise>:
 801d928:	4b02      	ldr	r3, [pc, #8]	; (801d934 <raise+0xc>)
 801d92a:	4601      	mov	r1, r0
 801d92c:	6818      	ldr	r0, [r3, #0]
 801d92e:	f7ff bfd3 	b.w	801d8d8 <_raise_r>
 801d932:	bf00      	nop
 801d934:	20000104 	.word	0x20000104

0801d938 <_kill_r>:
 801d938:	b538      	push	{r3, r4, r5, lr}
 801d93a:	4c07      	ldr	r4, [pc, #28]	; (801d958 <_kill_r+0x20>)
 801d93c:	2300      	movs	r3, #0
 801d93e:	4605      	mov	r5, r0
 801d940:	4608      	mov	r0, r1
 801d942:	4611      	mov	r1, r2
 801d944:	6023      	str	r3, [r4, #0]
 801d946:	f7e3 fdf3 	bl	8001530 <_kill>
 801d94a:	1c43      	adds	r3, r0, #1
 801d94c:	d102      	bne.n	801d954 <_kill_r+0x1c>
 801d94e:	6823      	ldr	r3, [r4, #0]
 801d950:	b103      	cbz	r3, 801d954 <_kill_r+0x1c>
 801d952:	602b      	str	r3, [r5, #0]
 801d954:	bd38      	pop	{r3, r4, r5, pc}
 801d956:	bf00      	nop
 801d958:	2002f378 	.word	0x2002f378

0801d95c <_getpid_r>:
 801d95c:	f7e3 bde0 	b.w	8001520 <_getpid>

0801d960 <__swbuf_r>:
 801d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d962:	460e      	mov	r6, r1
 801d964:	4614      	mov	r4, r2
 801d966:	4605      	mov	r5, r0
 801d968:	b118      	cbz	r0, 801d972 <__swbuf_r+0x12>
 801d96a:	6983      	ldr	r3, [r0, #24]
 801d96c:	b90b      	cbnz	r3, 801d972 <__swbuf_r+0x12>
 801d96e:	f000 fa0b 	bl	801dd88 <__sinit>
 801d972:	4b21      	ldr	r3, [pc, #132]	; (801d9f8 <__swbuf_r+0x98>)
 801d974:	429c      	cmp	r4, r3
 801d976:	d12a      	bne.n	801d9ce <__swbuf_r+0x6e>
 801d978:	686c      	ldr	r4, [r5, #4]
 801d97a:	69a3      	ldr	r3, [r4, #24]
 801d97c:	60a3      	str	r3, [r4, #8]
 801d97e:	89a3      	ldrh	r3, [r4, #12]
 801d980:	071a      	lsls	r2, r3, #28
 801d982:	d52e      	bpl.n	801d9e2 <__swbuf_r+0x82>
 801d984:	6923      	ldr	r3, [r4, #16]
 801d986:	b363      	cbz	r3, 801d9e2 <__swbuf_r+0x82>
 801d988:	6923      	ldr	r3, [r4, #16]
 801d98a:	6820      	ldr	r0, [r4, #0]
 801d98c:	1ac0      	subs	r0, r0, r3
 801d98e:	6963      	ldr	r3, [r4, #20]
 801d990:	b2f6      	uxtb	r6, r6
 801d992:	4283      	cmp	r3, r0
 801d994:	4637      	mov	r7, r6
 801d996:	dc04      	bgt.n	801d9a2 <__swbuf_r+0x42>
 801d998:	4621      	mov	r1, r4
 801d99a:	4628      	mov	r0, r5
 801d99c:	f000 f98a 	bl	801dcb4 <_fflush_r>
 801d9a0:	bb28      	cbnz	r0, 801d9ee <__swbuf_r+0x8e>
 801d9a2:	68a3      	ldr	r3, [r4, #8]
 801d9a4:	3b01      	subs	r3, #1
 801d9a6:	60a3      	str	r3, [r4, #8]
 801d9a8:	6823      	ldr	r3, [r4, #0]
 801d9aa:	1c5a      	adds	r2, r3, #1
 801d9ac:	6022      	str	r2, [r4, #0]
 801d9ae:	701e      	strb	r6, [r3, #0]
 801d9b0:	6963      	ldr	r3, [r4, #20]
 801d9b2:	3001      	adds	r0, #1
 801d9b4:	4283      	cmp	r3, r0
 801d9b6:	d004      	beq.n	801d9c2 <__swbuf_r+0x62>
 801d9b8:	89a3      	ldrh	r3, [r4, #12]
 801d9ba:	07db      	lsls	r3, r3, #31
 801d9bc:	d519      	bpl.n	801d9f2 <__swbuf_r+0x92>
 801d9be:	2e0a      	cmp	r6, #10
 801d9c0:	d117      	bne.n	801d9f2 <__swbuf_r+0x92>
 801d9c2:	4621      	mov	r1, r4
 801d9c4:	4628      	mov	r0, r5
 801d9c6:	f000 f975 	bl	801dcb4 <_fflush_r>
 801d9ca:	b190      	cbz	r0, 801d9f2 <__swbuf_r+0x92>
 801d9cc:	e00f      	b.n	801d9ee <__swbuf_r+0x8e>
 801d9ce:	4b0b      	ldr	r3, [pc, #44]	; (801d9fc <__swbuf_r+0x9c>)
 801d9d0:	429c      	cmp	r4, r3
 801d9d2:	d101      	bne.n	801d9d8 <__swbuf_r+0x78>
 801d9d4:	68ac      	ldr	r4, [r5, #8]
 801d9d6:	e7d0      	b.n	801d97a <__swbuf_r+0x1a>
 801d9d8:	4b09      	ldr	r3, [pc, #36]	; (801da00 <__swbuf_r+0xa0>)
 801d9da:	429c      	cmp	r4, r3
 801d9dc:	bf08      	it	eq
 801d9de:	68ec      	ldreq	r4, [r5, #12]
 801d9e0:	e7cb      	b.n	801d97a <__swbuf_r+0x1a>
 801d9e2:	4621      	mov	r1, r4
 801d9e4:	4628      	mov	r0, r5
 801d9e6:	f000 f80d 	bl	801da04 <__swsetup_r>
 801d9ea:	2800      	cmp	r0, #0
 801d9ec:	d0cc      	beq.n	801d988 <__swbuf_r+0x28>
 801d9ee:	f04f 37ff 	mov.w	r7, #4294967295
 801d9f2:	4638      	mov	r0, r7
 801d9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9f6:	bf00      	nop
 801d9f8:	080211c8 	.word	0x080211c8
 801d9fc:	080211e8 	.word	0x080211e8
 801da00:	080211a8 	.word	0x080211a8

0801da04 <__swsetup_r>:
 801da04:	4b32      	ldr	r3, [pc, #200]	; (801dad0 <__swsetup_r+0xcc>)
 801da06:	b570      	push	{r4, r5, r6, lr}
 801da08:	681d      	ldr	r5, [r3, #0]
 801da0a:	4606      	mov	r6, r0
 801da0c:	460c      	mov	r4, r1
 801da0e:	b125      	cbz	r5, 801da1a <__swsetup_r+0x16>
 801da10:	69ab      	ldr	r3, [r5, #24]
 801da12:	b913      	cbnz	r3, 801da1a <__swsetup_r+0x16>
 801da14:	4628      	mov	r0, r5
 801da16:	f000 f9b7 	bl	801dd88 <__sinit>
 801da1a:	4b2e      	ldr	r3, [pc, #184]	; (801dad4 <__swsetup_r+0xd0>)
 801da1c:	429c      	cmp	r4, r3
 801da1e:	d10f      	bne.n	801da40 <__swsetup_r+0x3c>
 801da20:	686c      	ldr	r4, [r5, #4]
 801da22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da26:	b29a      	uxth	r2, r3
 801da28:	0715      	lsls	r5, r2, #28
 801da2a:	d42c      	bmi.n	801da86 <__swsetup_r+0x82>
 801da2c:	06d0      	lsls	r0, r2, #27
 801da2e:	d411      	bmi.n	801da54 <__swsetup_r+0x50>
 801da30:	2209      	movs	r2, #9
 801da32:	6032      	str	r2, [r6, #0]
 801da34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da38:	81a3      	strh	r3, [r4, #12]
 801da3a:	f04f 30ff 	mov.w	r0, #4294967295
 801da3e:	e03e      	b.n	801dabe <__swsetup_r+0xba>
 801da40:	4b25      	ldr	r3, [pc, #148]	; (801dad8 <__swsetup_r+0xd4>)
 801da42:	429c      	cmp	r4, r3
 801da44:	d101      	bne.n	801da4a <__swsetup_r+0x46>
 801da46:	68ac      	ldr	r4, [r5, #8]
 801da48:	e7eb      	b.n	801da22 <__swsetup_r+0x1e>
 801da4a:	4b24      	ldr	r3, [pc, #144]	; (801dadc <__swsetup_r+0xd8>)
 801da4c:	429c      	cmp	r4, r3
 801da4e:	bf08      	it	eq
 801da50:	68ec      	ldreq	r4, [r5, #12]
 801da52:	e7e6      	b.n	801da22 <__swsetup_r+0x1e>
 801da54:	0751      	lsls	r1, r2, #29
 801da56:	d512      	bpl.n	801da7e <__swsetup_r+0x7a>
 801da58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da5a:	b141      	cbz	r1, 801da6e <__swsetup_r+0x6a>
 801da5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da60:	4299      	cmp	r1, r3
 801da62:	d002      	beq.n	801da6a <__swsetup_r+0x66>
 801da64:	4630      	mov	r0, r6
 801da66:	f7ff fbb7 	bl	801d1d8 <_free_r>
 801da6a:	2300      	movs	r3, #0
 801da6c:	6363      	str	r3, [r4, #52]	; 0x34
 801da6e:	89a3      	ldrh	r3, [r4, #12]
 801da70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801da74:	81a3      	strh	r3, [r4, #12]
 801da76:	2300      	movs	r3, #0
 801da78:	6063      	str	r3, [r4, #4]
 801da7a:	6923      	ldr	r3, [r4, #16]
 801da7c:	6023      	str	r3, [r4, #0]
 801da7e:	89a3      	ldrh	r3, [r4, #12]
 801da80:	f043 0308 	orr.w	r3, r3, #8
 801da84:	81a3      	strh	r3, [r4, #12]
 801da86:	6923      	ldr	r3, [r4, #16]
 801da88:	b94b      	cbnz	r3, 801da9e <__swsetup_r+0x9a>
 801da8a:	89a3      	ldrh	r3, [r4, #12]
 801da8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801da90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801da94:	d003      	beq.n	801da9e <__swsetup_r+0x9a>
 801da96:	4621      	mov	r1, r4
 801da98:	4630      	mov	r0, r6
 801da9a:	f000 fa23 	bl	801dee4 <__smakebuf_r>
 801da9e:	89a2      	ldrh	r2, [r4, #12]
 801daa0:	f012 0301 	ands.w	r3, r2, #1
 801daa4:	d00c      	beq.n	801dac0 <__swsetup_r+0xbc>
 801daa6:	2300      	movs	r3, #0
 801daa8:	60a3      	str	r3, [r4, #8]
 801daaa:	6963      	ldr	r3, [r4, #20]
 801daac:	425b      	negs	r3, r3
 801daae:	61a3      	str	r3, [r4, #24]
 801dab0:	6923      	ldr	r3, [r4, #16]
 801dab2:	b953      	cbnz	r3, 801daca <__swsetup_r+0xc6>
 801dab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dab8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801dabc:	d1ba      	bne.n	801da34 <__swsetup_r+0x30>
 801dabe:	bd70      	pop	{r4, r5, r6, pc}
 801dac0:	0792      	lsls	r2, r2, #30
 801dac2:	bf58      	it	pl
 801dac4:	6963      	ldrpl	r3, [r4, #20]
 801dac6:	60a3      	str	r3, [r4, #8]
 801dac8:	e7f2      	b.n	801dab0 <__swsetup_r+0xac>
 801daca:	2000      	movs	r0, #0
 801dacc:	e7f7      	b.n	801dabe <__swsetup_r+0xba>
 801dace:	bf00      	nop
 801dad0:	20000104 	.word	0x20000104
 801dad4:	080211c8 	.word	0x080211c8
 801dad8:	080211e8 	.word	0x080211e8
 801dadc:	080211a8 	.word	0x080211a8

0801dae0 <__register_exitproc>:
 801dae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dae4:	4d2c      	ldr	r5, [pc, #176]	; (801db98 <__register_exitproc+0xb8>)
 801dae6:	682c      	ldr	r4, [r5, #0]
 801dae8:	4607      	mov	r7, r0
 801daea:	460e      	mov	r6, r1
 801daec:	4691      	mov	r9, r2
 801daee:	4698      	mov	r8, r3
 801daf0:	b934      	cbnz	r4, 801db00 <__register_exitproc+0x20>
 801daf2:	4b2a      	ldr	r3, [pc, #168]	; (801db9c <__register_exitproc+0xbc>)
 801daf4:	4c2a      	ldr	r4, [pc, #168]	; (801dba0 <__register_exitproc+0xc0>)
 801daf6:	602c      	str	r4, [r5, #0]
 801daf8:	b113      	cbz	r3, 801db00 <__register_exitproc+0x20>
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801db00:	6863      	ldr	r3, [r4, #4]
 801db02:	2b1f      	cmp	r3, #31
 801db04:	dd3d      	ble.n	801db82 <__register_exitproc+0xa2>
 801db06:	4b27      	ldr	r3, [pc, #156]	; (801dba4 <__register_exitproc+0xc4>)
 801db08:	b91b      	cbnz	r3, 801db12 <__register_exitproc+0x32>
 801db0a:	f04f 30ff 	mov.w	r0, #4294967295
 801db0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db12:	208c      	movs	r0, #140	; 0x8c
 801db14:	f7ff fb3c 	bl	801d190 <malloc>
 801db18:	4604      	mov	r4, r0
 801db1a:	2800      	cmp	r0, #0
 801db1c:	d0f5      	beq.n	801db0a <__register_exitproc+0x2a>
 801db1e:	2300      	movs	r3, #0
 801db20:	682a      	ldr	r2, [r5, #0]
 801db22:	6002      	str	r2, [r0, #0]
 801db24:	6043      	str	r3, [r0, #4]
 801db26:	6028      	str	r0, [r5, #0]
 801db28:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801db2c:	b30f      	cbz	r7, 801db72 <__register_exitproc+0x92>
 801db2e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801db32:	f7ff fb2d 	bl	801d190 <malloc>
 801db36:	2800      	cmp	r0, #0
 801db38:	d0e7      	beq.n	801db0a <__register_exitproc+0x2a>
 801db3a:	2300      	movs	r3, #0
 801db3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801db40:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801db44:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801db48:	6862      	ldr	r2, [r4, #4]
 801db4a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801db4e:	2301      	movs	r3, #1
 801db50:	4093      	lsls	r3, r2
 801db52:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801db56:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801db5a:	431a      	orrs	r2, r3
 801db5c:	2f02      	cmp	r7, #2
 801db5e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801db62:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801db66:	bf02      	ittt	eq
 801db68:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801db6c:	4313      	orreq	r3, r2
 801db6e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801db72:	6863      	ldr	r3, [r4, #4]
 801db74:	1c5a      	adds	r2, r3, #1
 801db76:	3302      	adds	r3, #2
 801db78:	6062      	str	r2, [r4, #4]
 801db7a:	2000      	movs	r0, #0
 801db7c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801db80:	e7c5      	b.n	801db0e <__register_exitproc+0x2e>
 801db82:	2f00      	cmp	r7, #0
 801db84:	d0f5      	beq.n	801db72 <__register_exitproc+0x92>
 801db86:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801db8a:	2800      	cmp	r0, #0
 801db8c:	d1dc      	bne.n	801db48 <__register_exitproc+0x68>
 801db8e:	4b05      	ldr	r3, [pc, #20]	; (801dba4 <__register_exitproc+0xc4>)
 801db90:	2b00      	cmp	r3, #0
 801db92:	d0ba      	beq.n	801db0a <__register_exitproc+0x2a>
 801db94:	e7cb      	b.n	801db2e <__register_exitproc+0x4e>
 801db96:	bf00      	nop
 801db98:	2002f084 	.word	0x2002f084
 801db9c:	080211a4 	.word	0x080211a4
 801dba0:	2002eff8 	.word	0x2002eff8
 801dba4:	0801d191 	.word	0x0801d191

0801dba8 <__sflush_r>:
 801dba8:	898a      	ldrh	r2, [r1, #12]
 801dbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbae:	4605      	mov	r5, r0
 801dbb0:	0710      	lsls	r0, r2, #28
 801dbb2:	460c      	mov	r4, r1
 801dbb4:	d458      	bmi.n	801dc68 <__sflush_r+0xc0>
 801dbb6:	684b      	ldr	r3, [r1, #4]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	dc05      	bgt.n	801dbc8 <__sflush_r+0x20>
 801dbbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	dc02      	bgt.n	801dbc8 <__sflush_r+0x20>
 801dbc2:	2000      	movs	r0, #0
 801dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbca:	2e00      	cmp	r6, #0
 801dbcc:	d0f9      	beq.n	801dbc2 <__sflush_r+0x1a>
 801dbce:	2300      	movs	r3, #0
 801dbd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbd4:	682f      	ldr	r7, [r5, #0]
 801dbd6:	6a21      	ldr	r1, [r4, #32]
 801dbd8:	602b      	str	r3, [r5, #0]
 801dbda:	d032      	beq.n	801dc42 <__sflush_r+0x9a>
 801dbdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbde:	89a3      	ldrh	r3, [r4, #12]
 801dbe0:	075a      	lsls	r2, r3, #29
 801dbe2:	d505      	bpl.n	801dbf0 <__sflush_r+0x48>
 801dbe4:	6863      	ldr	r3, [r4, #4]
 801dbe6:	1ac0      	subs	r0, r0, r3
 801dbe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbea:	b10b      	cbz	r3, 801dbf0 <__sflush_r+0x48>
 801dbec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dbee:	1ac0      	subs	r0, r0, r3
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	4602      	mov	r2, r0
 801dbf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbf6:	6a21      	ldr	r1, [r4, #32]
 801dbf8:	4628      	mov	r0, r5
 801dbfa:	47b0      	blx	r6
 801dbfc:	1c43      	adds	r3, r0, #1
 801dbfe:	89a3      	ldrh	r3, [r4, #12]
 801dc00:	d106      	bne.n	801dc10 <__sflush_r+0x68>
 801dc02:	6829      	ldr	r1, [r5, #0]
 801dc04:	291d      	cmp	r1, #29
 801dc06:	d848      	bhi.n	801dc9a <__sflush_r+0xf2>
 801dc08:	4a29      	ldr	r2, [pc, #164]	; (801dcb0 <__sflush_r+0x108>)
 801dc0a:	40ca      	lsrs	r2, r1
 801dc0c:	07d6      	lsls	r6, r2, #31
 801dc0e:	d544      	bpl.n	801dc9a <__sflush_r+0xf2>
 801dc10:	2200      	movs	r2, #0
 801dc12:	6062      	str	r2, [r4, #4]
 801dc14:	04d9      	lsls	r1, r3, #19
 801dc16:	6922      	ldr	r2, [r4, #16]
 801dc18:	6022      	str	r2, [r4, #0]
 801dc1a:	d504      	bpl.n	801dc26 <__sflush_r+0x7e>
 801dc1c:	1c42      	adds	r2, r0, #1
 801dc1e:	d101      	bne.n	801dc24 <__sflush_r+0x7c>
 801dc20:	682b      	ldr	r3, [r5, #0]
 801dc22:	b903      	cbnz	r3, 801dc26 <__sflush_r+0x7e>
 801dc24:	6560      	str	r0, [r4, #84]	; 0x54
 801dc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc28:	602f      	str	r7, [r5, #0]
 801dc2a:	2900      	cmp	r1, #0
 801dc2c:	d0c9      	beq.n	801dbc2 <__sflush_r+0x1a>
 801dc2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc32:	4299      	cmp	r1, r3
 801dc34:	d002      	beq.n	801dc3c <__sflush_r+0x94>
 801dc36:	4628      	mov	r0, r5
 801dc38:	f7ff face 	bl	801d1d8 <_free_r>
 801dc3c:	2000      	movs	r0, #0
 801dc3e:	6360      	str	r0, [r4, #52]	; 0x34
 801dc40:	e7c0      	b.n	801dbc4 <__sflush_r+0x1c>
 801dc42:	2301      	movs	r3, #1
 801dc44:	4628      	mov	r0, r5
 801dc46:	47b0      	blx	r6
 801dc48:	1c41      	adds	r1, r0, #1
 801dc4a:	d1c8      	bne.n	801dbde <__sflush_r+0x36>
 801dc4c:	682b      	ldr	r3, [r5, #0]
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d0c5      	beq.n	801dbde <__sflush_r+0x36>
 801dc52:	2b1d      	cmp	r3, #29
 801dc54:	d001      	beq.n	801dc5a <__sflush_r+0xb2>
 801dc56:	2b16      	cmp	r3, #22
 801dc58:	d101      	bne.n	801dc5e <__sflush_r+0xb6>
 801dc5a:	602f      	str	r7, [r5, #0]
 801dc5c:	e7b1      	b.n	801dbc2 <__sflush_r+0x1a>
 801dc5e:	89a3      	ldrh	r3, [r4, #12]
 801dc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc64:	81a3      	strh	r3, [r4, #12]
 801dc66:	e7ad      	b.n	801dbc4 <__sflush_r+0x1c>
 801dc68:	690f      	ldr	r7, [r1, #16]
 801dc6a:	2f00      	cmp	r7, #0
 801dc6c:	d0a9      	beq.n	801dbc2 <__sflush_r+0x1a>
 801dc6e:	0793      	lsls	r3, r2, #30
 801dc70:	680e      	ldr	r6, [r1, #0]
 801dc72:	bf08      	it	eq
 801dc74:	694b      	ldreq	r3, [r1, #20]
 801dc76:	600f      	str	r7, [r1, #0]
 801dc78:	bf18      	it	ne
 801dc7a:	2300      	movne	r3, #0
 801dc7c:	eba6 0807 	sub.w	r8, r6, r7
 801dc80:	608b      	str	r3, [r1, #8]
 801dc82:	f1b8 0f00 	cmp.w	r8, #0
 801dc86:	dd9c      	ble.n	801dbc2 <__sflush_r+0x1a>
 801dc88:	4643      	mov	r3, r8
 801dc8a:	463a      	mov	r2, r7
 801dc8c:	6a21      	ldr	r1, [r4, #32]
 801dc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc90:	4628      	mov	r0, r5
 801dc92:	47b0      	blx	r6
 801dc94:	2800      	cmp	r0, #0
 801dc96:	dc06      	bgt.n	801dca6 <__sflush_r+0xfe>
 801dc98:	89a3      	ldrh	r3, [r4, #12]
 801dc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc9e:	81a3      	strh	r3, [r4, #12]
 801dca0:	f04f 30ff 	mov.w	r0, #4294967295
 801dca4:	e78e      	b.n	801dbc4 <__sflush_r+0x1c>
 801dca6:	4407      	add	r7, r0
 801dca8:	eba8 0800 	sub.w	r8, r8, r0
 801dcac:	e7e9      	b.n	801dc82 <__sflush_r+0xda>
 801dcae:	bf00      	nop
 801dcb0:	20400001 	.word	0x20400001

0801dcb4 <_fflush_r>:
 801dcb4:	b538      	push	{r3, r4, r5, lr}
 801dcb6:	690b      	ldr	r3, [r1, #16]
 801dcb8:	4605      	mov	r5, r0
 801dcba:	460c      	mov	r4, r1
 801dcbc:	b1db      	cbz	r3, 801dcf6 <_fflush_r+0x42>
 801dcbe:	b118      	cbz	r0, 801dcc8 <_fflush_r+0x14>
 801dcc0:	6983      	ldr	r3, [r0, #24]
 801dcc2:	b90b      	cbnz	r3, 801dcc8 <_fflush_r+0x14>
 801dcc4:	f000 f860 	bl	801dd88 <__sinit>
 801dcc8:	4b0c      	ldr	r3, [pc, #48]	; (801dcfc <_fflush_r+0x48>)
 801dcca:	429c      	cmp	r4, r3
 801dccc:	d109      	bne.n	801dce2 <_fflush_r+0x2e>
 801dcce:	686c      	ldr	r4, [r5, #4]
 801dcd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcd4:	b17b      	cbz	r3, 801dcf6 <_fflush_r+0x42>
 801dcd6:	4621      	mov	r1, r4
 801dcd8:	4628      	mov	r0, r5
 801dcda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcde:	f7ff bf63 	b.w	801dba8 <__sflush_r>
 801dce2:	4b07      	ldr	r3, [pc, #28]	; (801dd00 <_fflush_r+0x4c>)
 801dce4:	429c      	cmp	r4, r3
 801dce6:	d101      	bne.n	801dcec <_fflush_r+0x38>
 801dce8:	68ac      	ldr	r4, [r5, #8]
 801dcea:	e7f1      	b.n	801dcd0 <_fflush_r+0x1c>
 801dcec:	4b05      	ldr	r3, [pc, #20]	; (801dd04 <_fflush_r+0x50>)
 801dcee:	429c      	cmp	r4, r3
 801dcf0:	bf08      	it	eq
 801dcf2:	68ec      	ldreq	r4, [r5, #12]
 801dcf4:	e7ec      	b.n	801dcd0 <_fflush_r+0x1c>
 801dcf6:	2000      	movs	r0, #0
 801dcf8:	bd38      	pop	{r3, r4, r5, pc}
 801dcfa:	bf00      	nop
 801dcfc:	080211c8 	.word	0x080211c8
 801dd00:	080211e8 	.word	0x080211e8
 801dd04:	080211a8 	.word	0x080211a8

0801dd08 <std>:
 801dd08:	2300      	movs	r3, #0
 801dd0a:	b510      	push	{r4, lr}
 801dd0c:	4604      	mov	r4, r0
 801dd0e:	e9c0 3300 	strd	r3, r3, [r0]
 801dd12:	6083      	str	r3, [r0, #8]
 801dd14:	8181      	strh	r1, [r0, #12]
 801dd16:	6643      	str	r3, [r0, #100]	; 0x64
 801dd18:	81c2      	strh	r2, [r0, #14]
 801dd1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd1e:	6183      	str	r3, [r0, #24]
 801dd20:	4619      	mov	r1, r3
 801dd22:	2208      	movs	r2, #8
 801dd24:	305c      	adds	r0, #92	; 0x5c
 801dd26:	f7ff fa4e 	bl	801d1c6 <memset>
 801dd2a:	4b05      	ldr	r3, [pc, #20]	; (801dd40 <std+0x38>)
 801dd2c:	6263      	str	r3, [r4, #36]	; 0x24
 801dd2e:	4b05      	ldr	r3, [pc, #20]	; (801dd44 <std+0x3c>)
 801dd30:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd32:	4b05      	ldr	r3, [pc, #20]	; (801dd48 <std+0x40>)
 801dd34:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd36:	4b05      	ldr	r3, [pc, #20]	; (801dd4c <std+0x44>)
 801dd38:	6224      	str	r4, [r4, #32]
 801dd3a:	6323      	str	r3, [r4, #48]	; 0x30
 801dd3c:	bd10      	pop	{r4, pc}
 801dd3e:	bf00      	nop
 801dd40:	0801df69 	.word	0x0801df69
 801dd44:	0801df8b 	.word	0x0801df8b
 801dd48:	0801dfc3 	.word	0x0801dfc3
 801dd4c:	0801dfe7 	.word	0x0801dfe7

0801dd50 <_cleanup_r>:
 801dd50:	4901      	ldr	r1, [pc, #4]	; (801dd58 <_cleanup_r+0x8>)
 801dd52:	f000 b885 	b.w	801de60 <_fwalk_reent>
 801dd56:	bf00      	nop
 801dd58:	0801dcb5 	.word	0x0801dcb5

0801dd5c <__sfmoreglue>:
 801dd5c:	b570      	push	{r4, r5, r6, lr}
 801dd5e:	1e4a      	subs	r2, r1, #1
 801dd60:	2568      	movs	r5, #104	; 0x68
 801dd62:	4355      	muls	r5, r2
 801dd64:	460e      	mov	r6, r1
 801dd66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dd6a:	f7ff fa83 	bl	801d274 <_malloc_r>
 801dd6e:	4604      	mov	r4, r0
 801dd70:	b140      	cbz	r0, 801dd84 <__sfmoreglue+0x28>
 801dd72:	2100      	movs	r1, #0
 801dd74:	e9c0 1600 	strd	r1, r6, [r0]
 801dd78:	300c      	adds	r0, #12
 801dd7a:	60a0      	str	r0, [r4, #8]
 801dd7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dd80:	f7ff fa21 	bl	801d1c6 <memset>
 801dd84:	4620      	mov	r0, r4
 801dd86:	bd70      	pop	{r4, r5, r6, pc}

0801dd88 <__sinit>:
 801dd88:	6983      	ldr	r3, [r0, #24]
 801dd8a:	b510      	push	{r4, lr}
 801dd8c:	4604      	mov	r4, r0
 801dd8e:	bb33      	cbnz	r3, 801ddde <__sinit+0x56>
 801dd90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801dd94:	6503      	str	r3, [r0, #80]	; 0x50
 801dd96:	4b12      	ldr	r3, [pc, #72]	; (801dde0 <__sinit+0x58>)
 801dd98:	4a12      	ldr	r2, [pc, #72]	; (801dde4 <__sinit+0x5c>)
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	6282      	str	r2, [r0, #40]	; 0x28
 801dd9e:	4298      	cmp	r0, r3
 801dda0:	bf04      	itt	eq
 801dda2:	2301      	moveq	r3, #1
 801dda4:	6183      	streq	r3, [r0, #24]
 801dda6:	f000 f81f 	bl	801dde8 <__sfp>
 801ddaa:	6060      	str	r0, [r4, #4]
 801ddac:	4620      	mov	r0, r4
 801ddae:	f000 f81b 	bl	801dde8 <__sfp>
 801ddb2:	60a0      	str	r0, [r4, #8]
 801ddb4:	4620      	mov	r0, r4
 801ddb6:	f000 f817 	bl	801dde8 <__sfp>
 801ddba:	2200      	movs	r2, #0
 801ddbc:	60e0      	str	r0, [r4, #12]
 801ddbe:	2104      	movs	r1, #4
 801ddc0:	6860      	ldr	r0, [r4, #4]
 801ddc2:	f7ff ffa1 	bl	801dd08 <std>
 801ddc6:	2201      	movs	r2, #1
 801ddc8:	2109      	movs	r1, #9
 801ddca:	68a0      	ldr	r0, [r4, #8]
 801ddcc:	f7ff ff9c 	bl	801dd08 <std>
 801ddd0:	2202      	movs	r2, #2
 801ddd2:	2112      	movs	r1, #18
 801ddd4:	68e0      	ldr	r0, [r4, #12]
 801ddd6:	f7ff ff97 	bl	801dd08 <std>
 801ddda:	2301      	movs	r3, #1
 801dddc:	61a3      	str	r3, [r4, #24]
 801ddde:	bd10      	pop	{r4, pc}
 801dde0:	0802116c 	.word	0x0802116c
 801dde4:	0801dd51 	.word	0x0801dd51

0801dde8 <__sfp>:
 801dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddea:	4b1b      	ldr	r3, [pc, #108]	; (801de58 <__sfp+0x70>)
 801ddec:	681e      	ldr	r6, [r3, #0]
 801ddee:	69b3      	ldr	r3, [r6, #24]
 801ddf0:	4607      	mov	r7, r0
 801ddf2:	b913      	cbnz	r3, 801ddfa <__sfp+0x12>
 801ddf4:	4630      	mov	r0, r6
 801ddf6:	f7ff ffc7 	bl	801dd88 <__sinit>
 801ddfa:	3648      	adds	r6, #72	; 0x48
 801ddfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de00:	3b01      	subs	r3, #1
 801de02:	d503      	bpl.n	801de0c <__sfp+0x24>
 801de04:	6833      	ldr	r3, [r6, #0]
 801de06:	b133      	cbz	r3, 801de16 <__sfp+0x2e>
 801de08:	6836      	ldr	r6, [r6, #0]
 801de0a:	e7f7      	b.n	801ddfc <__sfp+0x14>
 801de0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801de10:	b16d      	cbz	r5, 801de2e <__sfp+0x46>
 801de12:	3468      	adds	r4, #104	; 0x68
 801de14:	e7f4      	b.n	801de00 <__sfp+0x18>
 801de16:	2104      	movs	r1, #4
 801de18:	4638      	mov	r0, r7
 801de1a:	f7ff ff9f 	bl	801dd5c <__sfmoreglue>
 801de1e:	6030      	str	r0, [r6, #0]
 801de20:	2800      	cmp	r0, #0
 801de22:	d1f1      	bne.n	801de08 <__sfp+0x20>
 801de24:	230c      	movs	r3, #12
 801de26:	603b      	str	r3, [r7, #0]
 801de28:	4604      	mov	r4, r0
 801de2a:	4620      	mov	r0, r4
 801de2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801de2e:	4b0b      	ldr	r3, [pc, #44]	; (801de5c <__sfp+0x74>)
 801de30:	6665      	str	r5, [r4, #100]	; 0x64
 801de32:	e9c4 5500 	strd	r5, r5, [r4]
 801de36:	60a5      	str	r5, [r4, #8]
 801de38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801de3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801de40:	2208      	movs	r2, #8
 801de42:	4629      	mov	r1, r5
 801de44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801de48:	f7ff f9bd 	bl	801d1c6 <memset>
 801de4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801de50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801de54:	e7e9      	b.n	801de2a <__sfp+0x42>
 801de56:	bf00      	nop
 801de58:	0802116c 	.word	0x0802116c
 801de5c:	ffff0001 	.word	0xffff0001

0801de60 <_fwalk_reent>:
 801de60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de64:	4680      	mov	r8, r0
 801de66:	4689      	mov	r9, r1
 801de68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801de6c:	2600      	movs	r6, #0
 801de6e:	b914      	cbnz	r4, 801de76 <_fwalk_reent+0x16>
 801de70:	4630      	mov	r0, r6
 801de72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801de7a:	3f01      	subs	r7, #1
 801de7c:	d501      	bpl.n	801de82 <_fwalk_reent+0x22>
 801de7e:	6824      	ldr	r4, [r4, #0]
 801de80:	e7f5      	b.n	801de6e <_fwalk_reent+0xe>
 801de82:	89ab      	ldrh	r3, [r5, #12]
 801de84:	2b01      	cmp	r3, #1
 801de86:	d907      	bls.n	801de98 <_fwalk_reent+0x38>
 801de88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801de8c:	3301      	adds	r3, #1
 801de8e:	d003      	beq.n	801de98 <_fwalk_reent+0x38>
 801de90:	4629      	mov	r1, r5
 801de92:	4640      	mov	r0, r8
 801de94:	47c8      	blx	r9
 801de96:	4306      	orrs	r6, r0
 801de98:	3568      	adds	r5, #104	; 0x68
 801de9a:	e7ee      	b.n	801de7a <_fwalk_reent+0x1a>

0801de9c <__swhatbuf_r>:
 801de9c:	b570      	push	{r4, r5, r6, lr}
 801de9e:	460e      	mov	r6, r1
 801dea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dea4:	2900      	cmp	r1, #0
 801dea6:	b096      	sub	sp, #88	; 0x58
 801dea8:	4614      	mov	r4, r2
 801deaa:	461d      	mov	r5, r3
 801deac:	da07      	bge.n	801debe <__swhatbuf_r+0x22>
 801deae:	2300      	movs	r3, #0
 801deb0:	602b      	str	r3, [r5, #0]
 801deb2:	89b3      	ldrh	r3, [r6, #12]
 801deb4:	061a      	lsls	r2, r3, #24
 801deb6:	d410      	bmi.n	801deda <__swhatbuf_r+0x3e>
 801deb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801debc:	e00e      	b.n	801dedc <__swhatbuf_r+0x40>
 801debe:	466a      	mov	r2, sp
 801dec0:	f000 f8b8 	bl	801e034 <_fstat_r>
 801dec4:	2800      	cmp	r0, #0
 801dec6:	dbf2      	blt.n	801deae <__swhatbuf_r+0x12>
 801dec8:	9a01      	ldr	r2, [sp, #4]
 801deca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ded2:	425a      	negs	r2, r3
 801ded4:	415a      	adcs	r2, r3
 801ded6:	602a      	str	r2, [r5, #0]
 801ded8:	e7ee      	b.n	801deb8 <__swhatbuf_r+0x1c>
 801deda:	2340      	movs	r3, #64	; 0x40
 801dedc:	2000      	movs	r0, #0
 801dede:	6023      	str	r3, [r4, #0]
 801dee0:	b016      	add	sp, #88	; 0x58
 801dee2:	bd70      	pop	{r4, r5, r6, pc}

0801dee4 <__smakebuf_r>:
 801dee4:	898b      	ldrh	r3, [r1, #12]
 801dee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dee8:	079d      	lsls	r5, r3, #30
 801deea:	4606      	mov	r6, r0
 801deec:	460c      	mov	r4, r1
 801deee:	d507      	bpl.n	801df00 <__smakebuf_r+0x1c>
 801def0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801def4:	6023      	str	r3, [r4, #0]
 801def6:	6123      	str	r3, [r4, #16]
 801def8:	2301      	movs	r3, #1
 801defa:	6163      	str	r3, [r4, #20]
 801defc:	b002      	add	sp, #8
 801defe:	bd70      	pop	{r4, r5, r6, pc}
 801df00:	ab01      	add	r3, sp, #4
 801df02:	466a      	mov	r2, sp
 801df04:	f7ff ffca 	bl	801de9c <__swhatbuf_r>
 801df08:	9900      	ldr	r1, [sp, #0]
 801df0a:	4605      	mov	r5, r0
 801df0c:	4630      	mov	r0, r6
 801df0e:	f7ff f9b1 	bl	801d274 <_malloc_r>
 801df12:	b948      	cbnz	r0, 801df28 <__smakebuf_r+0x44>
 801df14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df18:	059a      	lsls	r2, r3, #22
 801df1a:	d4ef      	bmi.n	801defc <__smakebuf_r+0x18>
 801df1c:	f023 0303 	bic.w	r3, r3, #3
 801df20:	f043 0302 	orr.w	r3, r3, #2
 801df24:	81a3      	strh	r3, [r4, #12]
 801df26:	e7e3      	b.n	801def0 <__smakebuf_r+0xc>
 801df28:	4b0d      	ldr	r3, [pc, #52]	; (801df60 <__smakebuf_r+0x7c>)
 801df2a:	62b3      	str	r3, [r6, #40]	; 0x28
 801df2c:	89a3      	ldrh	r3, [r4, #12]
 801df2e:	6020      	str	r0, [r4, #0]
 801df30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801df34:	81a3      	strh	r3, [r4, #12]
 801df36:	9b00      	ldr	r3, [sp, #0]
 801df38:	6163      	str	r3, [r4, #20]
 801df3a:	9b01      	ldr	r3, [sp, #4]
 801df3c:	6120      	str	r0, [r4, #16]
 801df3e:	b15b      	cbz	r3, 801df58 <__smakebuf_r+0x74>
 801df40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df44:	4630      	mov	r0, r6
 801df46:	f000 f887 	bl	801e058 <_isatty_r>
 801df4a:	b128      	cbz	r0, 801df58 <__smakebuf_r+0x74>
 801df4c:	89a3      	ldrh	r3, [r4, #12]
 801df4e:	f023 0303 	bic.w	r3, r3, #3
 801df52:	f043 0301 	orr.w	r3, r3, #1
 801df56:	81a3      	strh	r3, [r4, #12]
 801df58:	89a3      	ldrh	r3, [r4, #12]
 801df5a:	431d      	orrs	r5, r3
 801df5c:	81a5      	strh	r5, [r4, #12]
 801df5e:	e7cd      	b.n	801defc <__smakebuf_r+0x18>
 801df60:	0801dd51 	.word	0x0801dd51

0801df64 <__malloc_lock>:
 801df64:	4770      	bx	lr

0801df66 <__malloc_unlock>:
 801df66:	4770      	bx	lr

0801df68 <__sread>:
 801df68:	b510      	push	{r4, lr}
 801df6a:	460c      	mov	r4, r1
 801df6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df70:	f000 f894 	bl	801e09c <_read_r>
 801df74:	2800      	cmp	r0, #0
 801df76:	bfab      	itete	ge
 801df78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801df7a:	89a3      	ldrhlt	r3, [r4, #12]
 801df7c:	181b      	addge	r3, r3, r0
 801df7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801df82:	bfac      	ite	ge
 801df84:	6563      	strge	r3, [r4, #84]	; 0x54
 801df86:	81a3      	strhlt	r3, [r4, #12]
 801df88:	bd10      	pop	{r4, pc}

0801df8a <__swrite>:
 801df8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df8e:	461f      	mov	r7, r3
 801df90:	898b      	ldrh	r3, [r1, #12]
 801df92:	05db      	lsls	r3, r3, #23
 801df94:	4605      	mov	r5, r0
 801df96:	460c      	mov	r4, r1
 801df98:	4616      	mov	r6, r2
 801df9a:	d505      	bpl.n	801dfa8 <__swrite+0x1e>
 801df9c:	2302      	movs	r3, #2
 801df9e:	2200      	movs	r2, #0
 801dfa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfa4:	f000 f868 	bl	801e078 <_lseek_r>
 801dfa8:	89a3      	ldrh	r3, [r4, #12]
 801dfaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dfae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dfb2:	81a3      	strh	r3, [r4, #12]
 801dfb4:	4632      	mov	r2, r6
 801dfb6:	463b      	mov	r3, r7
 801dfb8:	4628      	mov	r0, r5
 801dfba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dfbe:	f000 b817 	b.w	801dff0 <_write_r>

0801dfc2 <__sseek>:
 801dfc2:	b510      	push	{r4, lr}
 801dfc4:	460c      	mov	r4, r1
 801dfc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfca:	f000 f855 	bl	801e078 <_lseek_r>
 801dfce:	1c43      	adds	r3, r0, #1
 801dfd0:	89a3      	ldrh	r3, [r4, #12]
 801dfd2:	bf15      	itete	ne
 801dfd4:	6560      	strne	r0, [r4, #84]	; 0x54
 801dfd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dfda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dfde:	81a3      	strheq	r3, [r4, #12]
 801dfe0:	bf18      	it	ne
 801dfe2:	81a3      	strhne	r3, [r4, #12]
 801dfe4:	bd10      	pop	{r4, pc}

0801dfe6 <__sclose>:
 801dfe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfea:	f000 b813 	b.w	801e014 <_close_r>
	...

0801dff0 <_write_r>:
 801dff0:	b538      	push	{r3, r4, r5, lr}
 801dff2:	4c07      	ldr	r4, [pc, #28]	; (801e010 <_write_r+0x20>)
 801dff4:	4605      	mov	r5, r0
 801dff6:	4608      	mov	r0, r1
 801dff8:	4611      	mov	r1, r2
 801dffa:	2200      	movs	r2, #0
 801dffc:	6022      	str	r2, [r4, #0]
 801dffe:	461a      	mov	r2, r3
 801e000:	f7e3 facd 	bl	800159e <_write>
 801e004:	1c43      	adds	r3, r0, #1
 801e006:	d102      	bne.n	801e00e <_write_r+0x1e>
 801e008:	6823      	ldr	r3, [r4, #0]
 801e00a:	b103      	cbz	r3, 801e00e <_write_r+0x1e>
 801e00c:	602b      	str	r3, [r5, #0]
 801e00e:	bd38      	pop	{r3, r4, r5, pc}
 801e010:	2002f378 	.word	0x2002f378

0801e014 <_close_r>:
 801e014:	b538      	push	{r3, r4, r5, lr}
 801e016:	4c06      	ldr	r4, [pc, #24]	; (801e030 <_close_r+0x1c>)
 801e018:	2300      	movs	r3, #0
 801e01a:	4605      	mov	r5, r0
 801e01c:	4608      	mov	r0, r1
 801e01e:	6023      	str	r3, [r4, #0]
 801e020:	f7e3 fad9 	bl	80015d6 <_close>
 801e024:	1c43      	adds	r3, r0, #1
 801e026:	d102      	bne.n	801e02e <_close_r+0x1a>
 801e028:	6823      	ldr	r3, [r4, #0]
 801e02a:	b103      	cbz	r3, 801e02e <_close_r+0x1a>
 801e02c:	602b      	str	r3, [r5, #0]
 801e02e:	bd38      	pop	{r3, r4, r5, pc}
 801e030:	2002f378 	.word	0x2002f378

0801e034 <_fstat_r>:
 801e034:	b538      	push	{r3, r4, r5, lr}
 801e036:	4c07      	ldr	r4, [pc, #28]	; (801e054 <_fstat_r+0x20>)
 801e038:	2300      	movs	r3, #0
 801e03a:	4605      	mov	r5, r0
 801e03c:	4608      	mov	r0, r1
 801e03e:	4611      	mov	r1, r2
 801e040:	6023      	str	r3, [r4, #0]
 801e042:	f7e3 fad4 	bl	80015ee <_fstat>
 801e046:	1c43      	adds	r3, r0, #1
 801e048:	d102      	bne.n	801e050 <_fstat_r+0x1c>
 801e04a:	6823      	ldr	r3, [r4, #0]
 801e04c:	b103      	cbz	r3, 801e050 <_fstat_r+0x1c>
 801e04e:	602b      	str	r3, [r5, #0]
 801e050:	bd38      	pop	{r3, r4, r5, pc}
 801e052:	bf00      	nop
 801e054:	2002f378 	.word	0x2002f378

0801e058 <_isatty_r>:
 801e058:	b538      	push	{r3, r4, r5, lr}
 801e05a:	4c06      	ldr	r4, [pc, #24]	; (801e074 <_isatty_r+0x1c>)
 801e05c:	2300      	movs	r3, #0
 801e05e:	4605      	mov	r5, r0
 801e060:	4608      	mov	r0, r1
 801e062:	6023      	str	r3, [r4, #0]
 801e064:	f7e3 fad3 	bl	800160e <_isatty>
 801e068:	1c43      	adds	r3, r0, #1
 801e06a:	d102      	bne.n	801e072 <_isatty_r+0x1a>
 801e06c:	6823      	ldr	r3, [r4, #0]
 801e06e:	b103      	cbz	r3, 801e072 <_isatty_r+0x1a>
 801e070:	602b      	str	r3, [r5, #0]
 801e072:	bd38      	pop	{r3, r4, r5, pc}
 801e074:	2002f378 	.word	0x2002f378

0801e078 <_lseek_r>:
 801e078:	b538      	push	{r3, r4, r5, lr}
 801e07a:	4c07      	ldr	r4, [pc, #28]	; (801e098 <_lseek_r+0x20>)
 801e07c:	4605      	mov	r5, r0
 801e07e:	4608      	mov	r0, r1
 801e080:	4611      	mov	r1, r2
 801e082:	2200      	movs	r2, #0
 801e084:	6022      	str	r2, [r4, #0]
 801e086:	461a      	mov	r2, r3
 801e088:	f7e3 facc 	bl	8001624 <_lseek>
 801e08c:	1c43      	adds	r3, r0, #1
 801e08e:	d102      	bne.n	801e096 <_lseek_r+0x1e>
 801e090:	6823      	ldr	r3, [r4, #0]
 801e092:	b103      	cbz	r3, 801e096 <_lseek_r+0x1e>
 801e094:	602b      	str	r3, [r5, #0]
 801e096:	bd38      	pop	{r3, r4, r5, pc}
 801e098:	2002f378 	.word	0x2002f378

0801e09c <_read_r>:
 801e09c:	b538      	push	{r3, r4, r5, lr}
 801e09e:	4c07      	ldr	r4, [pc, #28]	; (801e0bc <_read_r+0x20>)
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	4608      	mov	r0, r1
 801e0a4:	4611      	mov	r1, r2
 801e0a6:	2200      	movs	r2, #0
 801e0a8:	6022      	str	r2, [r4, #0]
 801e0aa:	461a      	mov	r2, r3
 801e0ac:	f7e3 fa5a 	bl	8001564 <_read>
 801e0b0:	1c43      	adds	r3, r0, #1
 801e0b2:	d102      	bne.n	801e0ba <_read_r+0x1e>
 801e0b4:	6823      	ldr	r3, [r4, #0]
 801e0b6:	b103      	cbz	r3, 801e0ba <_read_r+0x1e>
 801e0b8:	602b      	str	r3, [r5, #0]
 801e0ba:	bd38      	pop	{r3, r4, r5, pc}
 801e0bc:	2002f378 	.word	0x2002f378

0801e0c0 <_init>:
 801e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0c2:	bf00      	nop
 801e0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0c6:	bc08      	pop	{r3}
 801e0c8:	469e      	mov	lr, r3
 801e0ca:	4770      	bx	lr

0801e0cc <_fini>:
 801e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ce:	bf00      	nop
 801e0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0d2:	bc08      	pop	{r3}
 801e0d4:	469e      	mov	lr, r3
 801e0d6:	4770      	bx	lr
