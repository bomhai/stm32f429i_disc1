
touchgfx_02_OneWildcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f258  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003680  0801f408  0801f408  0002f408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000230e  08022a88  08022a88  00032a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 0002f000  08024d98  08024d98  00034d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  08053d98  08053d98  00063d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08053da8  08053da8  00095970  2**0
                  CONTENTS
  7 .ARM          00000008  08053da8  08053da8  00063da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08053db0  08053db0  00095970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08053db0  08053db0  00063db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08053dc4  08053dc4  00063dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000170  20000000  08053dcc  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_Framebuffer 00025800  20000170  08053f3c  00070170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00009ab8  20025970  0807973c  00095970  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  2002f428  0807973c  0009f428  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00095970  2**0
                  CONTENTS, READONLY
 16 .debug_info   0004b6f1  00000000  00000000  000959a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000cb85  00000000  00000000  000e1091  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000035a8  00000000  00000000  000edc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000030d0  00000000  00000000  000f11c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00032bce  00000000  00000000  000f4290  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00033127  00000000  00000000  00126e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000ffbb7  00000000  00000000  00159f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  00259b3c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000e618  00000000  00000000  00259c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20025970 	.word	0x20025970
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f3f0 	.word	0x0801f3f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20025974 	.word	0x20025974
 80001ec:	0801f3f0 	.word	0x0801f3f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_CRC_Init+0x20>)
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_CRC_Init+0x24>)
 8000598:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_CRC_Init+0x20>)
 800059c:	f002 fba8 	bl	8002cf0 <HAL_CRC_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005a6:	f000 fe51 	bl	800124c <Error_Handler>
  }

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2002f134 	.word	0x2002f134
 80005b4:	40023000 	.word	0x40023000

080005b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_CRC_MspInit+0x3c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10d      	bne.n	80005e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <HAL_CRC_MspInit+0x40>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023000 	.word	0x40023000
 80005f8:	40023800 	.word	0x40023800

080005fc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <MX_DMA2D_Init+0x60>)
 8000604:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800060e:	2202      	movs	r2, #2
 8000610:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800061a:	2200      	movs	r2, #0
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000620:	2202      	movs	r2, #2
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_DMA2D_Init+0x5c>)
 800062c:	2200      	movs	r2, #0
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000632:	f002 fb79 	bl	8002d28 <HAL_DMA2D_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800063c:	f000 fe06 	bl	800124c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000640:	2101      	movs	r1, #1
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_DMA2D_Init+0x5c>)
 8000644:	f002 fe3a 	bl	80032bc <HAL_DMA2D_ConfigLayer>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800064e:	f000 fdfd 	bl	800124c <Error_Handler>
  }

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2002f13c 	.word	0x2002f13c
 800065c:	4002b000 	.word	0x4002b000

08000660 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_DMA2D_MspInit+0x48>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d115      	bne.n	800069e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 800067c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_DMA2D_MspInit+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2105      	movs	r1, #5
 8000692:	205a      	movs	r0, #90	; 0x5a
 8000694:	f002 faf4 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000698:	205a      	movs	r0, #90	; 0x5a
 800069a:	f002 fb0d 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	4002b000 	.word	0x4002b000
 80006ac:	40023800 	.word	0x40023800

080006b0 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_DMA2D_MspDeInit+0x2c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d108      	bne.n	80006d4 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_DMA2D_MspDeInit+0x30>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_DMA2D_MspDeInit+0x30>)
 80006c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt Deinit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80006ce:	205a      	movs	r0, #90	; 0x5a
 80006d0:	f002 fb00 	bl	8002cd4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
} 
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	4002b000 	.word	0x4002b000
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_FMC_Init+0x98>)
 80006fe:	4a20      	ldr	r2, [pc, #128]	; (8000780 <MX_FMC_Init+0x9c>)
 8000700:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_FMC_Init+0x98>)
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_FMC_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_FMC_Init+0x98>)
 8000710:	2204      	movs	r2, #4
 8000712:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_FMC_Init+0x98>)
 8000716:	2210      	movs	r2, #16
 8000718:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_FMC_Init+0x98>)
 800071c:	2240      	movs	r2, #64	; 0x40
 800071e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_FMC_Init+0x98>)
 8000722:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000726:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_FMC_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_FMC_Init+0x98>)
 8000730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000734:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_FMC_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_FMC_Init+0x98>)
 800073e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000754:	2303      	movs	r3, #3
 8000756:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_FMC_Init+0x98>)
 8000766:	f005 fbf5 	bl	8005f54 <HAL_SDRAM_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000770:	f000 fd6c 	bl	800124c <Error_Handler>
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2002f17c 	.word	0x2002f17c
 8000780:	a0000140 	.word	0xa0000140

08000784 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000798:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <HAL_FMC_MspInit+0x104>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d16f      	bne.n	8000880 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <HAL_FMC_MspInit+0x104>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <HAL_FMC_MspInit+0x108>)
 80007ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ae:	4a37      	ldr	r2, [pc, #220]	; (800088c <HAL_FMC_MspInit+0x108>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6393      	str	r3, [r2, #56]	; 0x38
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <HAL_FMC_MspInit+0x108>)
 80007b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80007c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007c6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	482c      	ldr	r0, [pc, #176]	; (8000890 <HAL_FMC_MspInit+0x10c>)
 80007de:	f002 fe9b 	bl	8003518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f2:	230c      	movs	r3, #12
 80007f4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4826      	ldr	r0, [pc, #152]	; (8000894 <HAL_FMC_MspInit+0x110>)
 80007fc:	f002 fe8c 	bl	8003518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8000800:	f248 1333 	movw	r3, #33075	; 0x8133
 8000804:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000812:	230c      	movs	r3, #12
 8000814:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <HAL_FMC_MspInit+0x114>)
 800081c:	f002 fe7c 	bl	8003518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8000820:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000824:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <HAL_FMC_MspInit+0x118>)
 800083c:	f002 fe6c 	bl	8003518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8000840:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000844:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000852:	230c      	movs	r3, #12
 8000854:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <HAL_FMC_MspInit+0x11c>)
 800085c:	f002 fe5c 	bl	8003518 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000860:	2360      	movs	r3, #96	; 0x60
 8000862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000870:	230c      	movs	r3, #12
 8000872:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <HAL_FMC_MspInit+0x120>)
 800087a:	f002 fe4d 	bl	8003518 <HAL_GPIO_Init>
 800087e:	e000      	b.n	8000882 <HAL_FMC_MspInit+0xfe>
    return;
 8000880:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2002598c 	.word	0x2002598c
 800088c:	40023800 	.word	0x40023800
 8000890:	40021400 	.word	0x40021400
 8000894:	40020800 	.word	0x40020800
 8000898:	40021800 	.word	0x40021800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40020400 	.word	0x40020400

080008a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008b0:	f7ff ff68 	bl	8000784 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <vApplicationGetIdleTaskMemory+0x2c>)
 8000900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <vApplicationGetIdleTaskMemory+0x30>)
 8000906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20025990 	.word	0x20025990
 8000920:	200259f0 	.word	0x200259f0

08000924 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_FREERTOS_Init+0x58>)
 800092c:	f107 041c 	add.w	r4, r7, #28
 8000930:	461d      	mov	r5, r3
 8000932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000936:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800093a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fa80 	bl	8007e4a <osThreadCreate>
 800094a:	4602      	mov	r2, r0
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_FREERTOS_Init+0x5c>)
 800094e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(touchTask, TouchGFX_Task, osPriorityNormal, 0, 4086);
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_FREERTOS_Init+0x60>)
 8000952:	463c      	mov	r4, r7
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchGFXTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8000962:	463b      	mov	r3, r7
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f007 fa6f 	bl	8007e4a <osThreadCreate>
 800096c:	4602      	mov	r2, r0
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_FREERTOS_Init+0x64>)
 8000970:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 8000972:	bf00      	nop
 8000974:	3738      	adds	r7, #56	; 0x38
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	0801f414 	.word	0x0801f414
 8000980:	2002f1b0 	.word	0x2002f1b0
 8000984:	0801f43c 	.word	0x0801f43c
 8000988:	2002f1b4 	.word	0x2002f1b4

0800098c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
		osDelay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f007 faa4 	bl	8007ee2 <osDelay>
 800099a:	e7fb      	b.n	8000994 <StartDefaultTask+0x8>

0800099c <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
 80009b6:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a88      	ldr	r2, [pc, #544]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b86      	ldr	r3, [pc, #536]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	623b      	str	r3, [r7, #32]
 80009cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
 80009d2:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a81      	ldr	r2, [pc, #516]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b7f      	ldr	r3, [pc, #508]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b7b      	ldr	r3, [pc, #492]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a7a      	ldr	r2, [pc, #488]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b78      	ldr	r3, [pc, #480]	; (8000bdc <MX_GPIO_Init+0x240>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	4b74      	ldr	r3, [pc, #464]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a73      	ldr	r2, [pc, #460]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b6d      	ldr	r3, [pc, #436]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a6c      	ldr	r2, [pc, #432]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b6a      	ldr	r3, [pc, #424]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a65      	ldr	r2, [pc, #404]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b63      	ldr	r3, [pc, #396]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b5f      	ldr	r3, [pc, #380]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a5e      	ldr	r2, [pc, #376]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b5c      	ldr	r3, [pc, #368]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a57      	ldr	r2, [pc, #348]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b55      	ldr	r3, [pc, #340]	; (8000bdc <MX_GPIO_Init+0x240>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2116      	movs	r1, #22
 8000a96:	4852      	ldr	r0, [pc, #328]	; (8000be0 <MX_GPIO_Init+0x244>)
 8000a98:	f002 fff2 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4850      	ldr	r0, [pc, #320]	; (8000be4 <MX_GPIO_Init+0x248>)
 8000aa2:	f002 ffed 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000aac:	484e      	ldr	r0, [pc, #312]	; (8000be8 <MX_GPIO_Init+0x24c>)
 8000aae:	f002 ffe7 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ab8:	484c      	ldr	r0, [pc, #304]	; (8000bec <MX_GPIO_Init+0x250>)
 8000aba:	f002 ffe1 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000abe:	2316      	movs	r3, #22
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4842      	ldr	r0, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x244>)
 8000ad6:	f002 fd1f 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000ada:	f248 0307 	movw	r3, #32775	; 0x8007
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae0:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x254>)
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483d      	ldr	r0, [pc, #244]	; (8000be4 <MX_GPIO_Init+0x248>)
 8000af0:	f002 fd12 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4836      	ldr	r0, [pc, #216]	; (8000be4 <MX_GPIO_Init+0x248>)
 8000b0c:	f002 fd04 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b10:	2320      	movs	r3, #32
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b14:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <MX_GPIO_Init+0x254>)
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	482f      	ldr	r0, [pc, #188]	; (8000be0 <MX_GPIO_Init+0x244>)
 8000b24:	f002 fcf8 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0x258>)
 8000b3c:	f002 fcec 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000b40:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000b52:	230c      	movs	r3, #12
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4825      	ldr	r0, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0x258>)
 8000b5e:	f002 fcdb 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0x258>)
 8000b78:	f002 fcce 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4815      	ldr	r0, [pc, #84]	; (8000be8 <MX_GPIO_Init+0x24c>)
 8000b92:	f002 fcc1 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_GPIO_Init+0x24c>)
 8000bb0:	f002 fcb2 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bb4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_GPIO_Init+0x250>)
 8000bce:	f002 fca3 	bl	8003518 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021800 	.word	0x40021800
 8000bf0:	10120000 	.word	0x10120000
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_I2C3_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <MX_I2C3_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c36:	f002 ff3d 	bl	8003ab4 <HAL_I2C_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c40:	f000 fb04 	bl	800124c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c48:	f003 ff21 	bl	8004a8e <HAL_I2CEx_ConfigAnalogFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c52:	f000 fafb 	bl	800124c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_I2C3_Init+0x74>)
 8000c5a:	f003 ff54 	bl	8004b06 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000c64:	f000 faf2 	bl	800124c <Error_Handler>
  }

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2002f1b8 	.word	0x2002f1b8
 8000c70:	40005c00 	.word	0x40005c00
 8000c74:	000186a0 	.word	0x000186a0

08000c78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <HAL_I2C_MspInit+0xc4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d14b      	bne.n	8000d32 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd8:	2312      	movs	r3, #18
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4815      	ldr	r0, [pc, #84]	; (8000d44 <HAL_I2C_MspInit+0xcc>)
 8000cf0:	f002 fc12 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d06:	2304      	movs	r3, #4
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <HAL_I2C_MspInit+0xd0>)
 8000d12:	f002 fc01 	bl	8003518 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_I2C_MspInit+0xc8>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40005c00 	.word	0x40005c00
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_I2C_MspDeInit+0x3c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10f      	bne.n	8000d7e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_I2C_MspDeInit+0x40>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_I2C_MspDeInit+0x40>)
 8000d64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <HAL_I2C_MspDeInit+0x44>)
 8000d70:	f002 fd7c 	bl	800386c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <HAL_I2C_MspDeInit+0x48>)
 8000d7a:	f002 fd77 	bl	800386c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40005c00 	.word	0x40005c00
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020000 	.word	0x40020000

08000d98 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2234      	movs	r2, #52	; 0x34
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f01d fba6 	bl	801e4f6 <memset>

  hltdc.Instance = LTDC;
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dac:	4a39      	ldr	r2, [pc, #228]	; (8000e94 <MX_LTDC_Init+0xfc>)
 8000dae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dc2:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000dc8:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dca:	2209      	movs	r2, #9
 8000dcc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dd6:	221d      	movs	r2, #29
 8000dd8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000de0:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000de2:	f240 120d 	movw	r2, #269	; 0x10d
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000de8:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dea:	f240 1243 	movw	r2, #323	; 0x143
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000df2:	f240 1217 	movw	r2, #279	; 0x117
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000df8:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000dfa:	f240 1247 	movw	r2, #327	; 0x147
 8000dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e18:	481d      	ldr	r0, [pc, #116]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000e1a:	f003 feb3 	bl	8004b84 <HAL_LTDC_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e24:	f000 fa12 	bl	800124c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000e2c:	23f0      	movs	r3, #240	; 0xf0
 8000e2e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000e34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e38:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e3e:	23ff      	movs	r3, #255	; 0xff
 8000e40:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e4c:	2305      	movs	r3, #5
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e50:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000e56:	23f0      	movs	r3, #240	; 0xf0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000e5a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_LTDC_Init+0xf8>)
 8000e7a:	f004 f80b 	bl	8004e94 <HAL_LTDC_ConfigLayer>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000e84:	f000 f9e2 	bl	800124c <Error_Handler>
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2002f20c 	.word	0x2002f20c
 8000e94:	40016800 	.word	0x40016800

08000e98 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a7b      	ldr	r2, [pc, #492]	; (80010a4 <HAL_LTDC_MspInit+0x20c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	f040 80f0 	bne.w	800109c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
 8000ec0:	4b79      	ldr	r3, [pc, #484]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	4a78      	ldr	r2, [pc, #480]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eca:	6453      	str	r3, [r2, #68]	; 0x44
 8000ecc:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	4b72      	ldr	r3, [pc, #456]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a71      	ldr	r2, [pc, #452]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000ee2:	f043 0320 	orr.w	r3, r3, #32
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b6f      	ldr	r3, [pc, #444]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a6a      	ldr	r2, [pc, #424]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	4b64      	ldr	r3, [pc, #400]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a63      	ldr	r2, [pc, #396]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	4a5c      	ldr	r2, [pc, #368]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3c:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a55      	ldr	r2, [pc, #340]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b53      	ldr	r3, [pc, #332]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <HAL_LTDC_MspInit+0x210>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f92:	230e      	movs	r3, #14
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4843      	ldr	r0, [pc, #268]	; (80010ac <HAL_LTDC_MspInit+0x214>)
 8000f9e:	f002 fabb 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8000fa2:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb4:	230e      	movs	r3, #14
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	483c      	ldr	r0, [pc, #240]	; (80010b0 <HAL_LTDC_MspInit+0x218>)
 8000fc0:	f002 faaa 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fd4:	2309      	movs	r3, #9
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4835      	ldr	r0, [pc, #212]	; (80010b4 <HAL_LTDC_MspInit+0x21c>)
 8000fe0:	f002 fa9a 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fe4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff6:	230e      	movs	r3, #14
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <HAL_LTDC_MspInit+0x21c>)
 8001002:	f002 fa89 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001006:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001018:	230e      	movs	r3, #14
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	4825      	ldr	r0, [pc, #148]	; (80010b8 <HAL_LTDC_MspInit+0x220>)
 8001024:	f002 fa78 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001028:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103a:	230e      	movs	r3, #14
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	481d      	ldr	r0, [pc, #116]	; (80010bc <HAL_LTDC_MspInit+0x224>)
 8001046:	f002 fa67 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800104a:	2348      	movs	r3, #72	; 0x48
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105a:	230e      	movs	r3, #14
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4816      	ldr	r0, [pc, #88]	; (80010c0 <HAL_LTDC_MspInit+0x228>)
 8001066:	f002 fa57 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800106a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800107c:	2309      	movs	r3, #9
 800107e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <HAL_LTDC_MspInit+0x220>)
 8001088:	f002 fa46 	bl	8003518 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2105      	movs	r1, #5
 8001090:	2058      	movs	r0, #88	; 0x58
 8001092:	f001 fdf5 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001096:	2058      	movs	r0, #88	; 0x58
 8001098:	f001 fe0e 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40016800 	.word	0x40016800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f001 fc9c 	bl	8002a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f828 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f7ff fc64 	bl	800099c <MX_GPIO_Init>
  MX_CRC_Init();
 80010d4:	f7ff fa5c 	bl	8000590 <MX_CRC_Init>
  MX_DMA2D_Init();
 80010d8:	f7ff fa90 	bl	80005fc <MX_DMA2D_Init>
  MX_FMC_Init();
 80010dc:	f7ff fb02 	bl	80006e4 <MX_FMC_Init>
  MX_I2C3_Init();
 80010e0:	f7ff fd8a 	bl	8000bf8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80010e4:	f7ff fe58 	bl	8000d98 <MX_LTDC_Init>
  MX_SPI5_Init();
 80010e8:	f000 f8b8 	bl	800125c <MX_SPI5_Init>
  MX_TIM1_Init();
 80010ec:	f000 fae2 	bl	80016b4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010f0:	f000 fb52 	bl	8001798 <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 80010f4:	f009 f9e6 	bl	800a4c4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  LcdDrv = &ili9341_drv;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <main+0x54>)
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <main+0x58>)
 80010fc:	601a      	str	r2, [r3, #0]
  LcdDrv->Init();
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <main+0x54>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <main+0x54>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800110e:	f7ff fc09 	bl	8000924 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001112:	f006 fe93 	bl	8007e3c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001116:	e7fe      	b.n	8001116 <main+0x52>
 8001118:	20025bf0 	.word	0x20025bf0
 800111c:	20000008 	.word	0x20000008

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0a0      	sub	sp, #128	; 0x80
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800112a:	2230      	movs	r2, #48	; 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f01d f9e1 	bl	801e4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2230      	movs	r2, #48	; 0x30
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f01d f9d2 	bl	801e4f6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <SystemClock_Config+0x100>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <SystemClock_Config+0x100>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <SystemClock_Config+0x100>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <SystemClock_Config+0x104>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <SystemClock_Config+0x104>)
 8001178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <SystemClock_Config+0x104>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118a:	2301      	movs	r3, #1
 800118c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800119e:	2304      	movs	r3, #4
 80011a0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a2:	23a8      	movs	r3, #168	; 0xa8
 80011a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011aa:	2307      	movs	r3, #7
 80011ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 f87c 	bl	80052b0 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011be:	f000 f845 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011de:	2105      	movs	r1, #5
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fad5 	bl	8005790 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80011ec:	f000 f82e 	bl	800124c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011f0:	2308      	movs	r3, #8
 80011f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 80011f4:	233c      	movs	r3, #60	; 0x3c
 80011f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80011f8:	2305      	movs	r3, #5
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80011fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fce6 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001212:	f000 f81b 	bl	800124c <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3780      	adds	r7, #128	; 0x80
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123a:	f001 fc05 	bl	8002a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40001000 	.word	0x40001000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <MX_SPI5_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_SPI5_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001290:	2218      	movs	r2, #24
 8001292:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_SPI5_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI5_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_SPI5_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI5_Init+0x64>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_SPI5_Init+0x64>)
 80012ae:	f004 fe85 	bl	8005fbc <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80012b8:	f7ff ffc8 	bl	800124c <Error_Handler>
  }

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2002f2b4 	.word	0x2002f2b4
 80012c4:	40015000 	.word	0x40015000

080012c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_SPI_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12c      	bne.n	8001344 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_SPI_MspInit+0x88>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_SPI_MspInit+0x88>)
 80012f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_SPI_MspInit+0x88>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_SPI_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_SPI_MspInit+0x88>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_SPI_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0320 	and.w	r3, r3, #32
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001322:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001334:	2305      	movs	r3, #5
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_SPI_MspInit+0x8c>)
 8001340:	f002 f8ea 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40015000 	.word	0x40015000
 8001350:	40023800 	.word	0x40023800
 8001354:	40021400 	.word	0x40021400

08001358 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_SPI_MspDeInit+0x30>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10a      	bne.n	8001380 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_SPI_MspDeInit+0x34>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_SPI_MspDeInit+0x34>)
 8001370:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001376:	f44f 7160 	mov.w	r1, #896	; 0x380
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <HAL_SPI_MspDeInit+0x38>)
 800137c:	f002 fa76 	bl	800386c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40015000 	.word	0x40015000
 800138c:	40023800 	.word	0x40023800
 8001390:	40021400 	.word	0x40021400

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_MspInit+0x54>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_MspInit+0x54>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x54>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_MspInit+0x54>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_MspInit+0x54>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_MspInit+0x54>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	210f      	movs	r1, #15
 80013d6:	f06f 0001 	mvn.w	r0, #1
 80013da:	f001 fc51 	bl	8002c80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	2036      	movs	r0, #54	; 0x36
 8001402:	f001 fc3d 	bl	8002c80 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001406:	2036      	movs	r0, #54	; 0x36
 8001408:	f001 fc56 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <HAL_InitTick+0xa4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_InitTick+0xa4>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_InitTick+0xa4>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001428:	f107 0210 	add.w	r2, r7, #16
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fb9e 	bl	8005b74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001438:	f004 fb74 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 800143c:	4603      	mov	r3, r0
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_InitTick+0xa8>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	3b01      	subs	r3, #1
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_InitTick+0xac>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <HAL_InitTick+0xb0>)
 8001454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_InitTick+0xac>)
 8001458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_InitTick+0xac>)
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_InitTick+0xac>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_InitTick+0xac>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <HAL_InitTick+0xac>)
 8001472:	f005 fb2d 	bl	8006ad0 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_InitTick+0xac>)
 800147e:	f005 fb52 	bl	8006b26 <HAL_TIM_Base_Start_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	431bde83 	.word	0x431bde83
 8001498:	2002f30c 	.word	0x2002f30c
 800149c:	40001000 	.word	0x40001000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM6_DAC_IRQHandler+0x10>)
 80014da:	f005 fb48 	bl	8006b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2002f30c 	.word	0x2002f30c

080014e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <LTDC_IRQHandler+0x10>)
 80014ee:	f003 fc19 	bl	8004d24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2002f20c 	.word	0x2002f20c

080014fc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DMA2D_IRQHandler+0x10>)
 8001502:	f001 fdca 	bl	800309a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2002f13c 	.word	0x2002f13c

08001510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	return 1;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_kill>:

int _kill(int pid, int sig)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800152a:	f01c ff8d 	bl	801e448 <__errno>
 800152e:	4602      	mov	r2, r0
 8001530:	2316      	movs	r3, #22
 8001532:	6013      	str	r3, [r2, #0]
	return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_exit>:

void _exit (int status)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ffe7 	bl	8001520 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001552:	e7fe      	b.n	8001552 <_exit+0x12>

08001554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e00a      	b.n	800157c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001566:	f3af 8000 	nop.w
 800156a:	4601      	mov	r1, r0
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	b2ca      	uxtb	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf0      	blt.n	8001566 <_read+0x12>
	}

return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e009      	b.n	80015b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f967 	bl	800187c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbf1      	blt.n	80015a0 <_write+0x12>
	}
	return len;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_close>:

int _close(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ee:	605a      	str	r2, [r3, #4]
	return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	return 0;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x50>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x16>
		heap_end = &end;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <_sbrk+0x50>)
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <_sbrk+0x54>)
 8001644:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <_sbrk+0x50>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <_sbrk+0x50>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	466a      	mov	r2, sp
 8001656:	4293      	cmp	r3, r2
 8001658:	d907      	bls.n	800166a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800165a:	f01c fef5 	bl	801e448 <__errno>
 800165e:	4602      	mov	r2, r0
 8001660:	230c      	movs	r3, #12
 8001662:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	e006      	b.n	8001678 <_sbrk+0x48>
	}

	heap_end += incr;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <_sbrk+0x50>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a03      	ldr	r2, [pc, #12]	; (8001680 <_sbrk+0x50>)
 8001674:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20025bf4 	.word	0x20025bf4
 8001684:	2002f428 	.word	0x2002f428

08001688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <SystemInit+0x28>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <SystemInit+0x28>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SystemInit+0x28>)
 800169e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a2:	609a      	str	r2, [r3, #8]
#endif
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_TIM1_Init+0x98>)
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <MX_TIM1_Init+0x9c>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM1_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_TIM1_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM1_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_TIM1_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_TIM1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_TIM1_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016fa:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_TIM1_Init+0x98>)
 80016fc:	f005 f9e8 	bl	8006ad0 <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001706:	f7ff fda1 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_TIM1_Init+0x98>)
 8001718:	f005 fb31 	bl	8006d7e <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001722:	f7ff fd93 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_TIM1_Init+0x98>)
 8001734:	f005 fd3c 	bl	80071b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800173e:	f7ff fd85 	bl	800124c <Error_Handler>
  }

}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2002f34c 	.word	0x2002f34c
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_TIM_Base_MspInit+0x3c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10d      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_TIM_Base_MspInit+0x40>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x40>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_TIM_Base_MspInit+0x40>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40010000 	.word	0x40010000
 8001794:	40023800 	.word	0x40023800

08001798 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_USART1_UART_Init+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART1_UART_Init+0x4c>)
 80017d0:	f005 fd7e 	bl	80072d0 <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017da:	f7ff fd37 	bl	800124c <Error_Handler>
  }

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2002f38c 	.word	0x2002f38c
 80017e8:	40011000 	.word	0x40011000

080017ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_UART_MspInit+0x84>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12c      	bne.n	8001868 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001818:	f043 0310 	orr.w	r3, r3, #16
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_UART_MspInit+0x88>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_UART_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001846:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001858:	2307      	movs	r3, #7
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_UART_MspInit+0x8c>)
 8001864:	f001 fe58 	bl	8003518 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40011000 	.word	0x40011000
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001884:	1d39      	adds	r1, r7, #4
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	2201      	movs	r2, #1
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <__io_putchar+0x20>)
 800188e:	f005 fd6c 	bl	800736a <HAL_UART_Transmit>
  return ch;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2002f38c 	.word	0x2002f38c

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018a6:	e003      	b.n	80018b0 <LoopCopyDataInit>

080018a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ae:	3104      	adds	r1, #4

080018b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018b8:	d3f6      	bcc.n	80018a8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018bc:	e002      	b.n	80018c4 <LoopFillZerobss>

080018be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c0:	f842 3b04 	str.w	r3, [r2], #4

080018c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018c8:	d3f9      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ca:	f7ff fedd 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f01c fdd3 	bl	801e478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fbf7 	bl	80010c4 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018d8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018dc:	08053dcc 	.word	0x08053dcc
  ldr  r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e4:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 80018e8:	20025970 	.word	0x20025970
  ldr  r3, = _ebss
 80018ec:	2002f428 	.word	0x2002f428

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>

080018f2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018f6:	f000 fe4b 	bl	8002590 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018fa:	20ca      	movs	r0, #202	; 0xca
 80018fc:	f000 f95d 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001900:	20c3      	movs	r0, #195	; 0xc3
 8001902:	f000 f967 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001906:	2008      	movs	r0, #8
 8001908:	f000 f964 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800190c:	2050      	movs	r0, #80	; 0x50
 800190e:	f000 f961 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001912:	20cf      	movs	r0, #207	; 0xcf
 8001914:	f000 f951 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001918:	2000      	movs	r0, #0
 800191a:	f000 f95b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800191e:	20c1      	movs	r0, #193	; 0xc1
 8001920:	f000 f958 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001924:	2030      	movs	r0, #48	; 0x30
 8001926:	f000 f955 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800192a:	20ed      	movs	r0, #237	; 0xed
 800192c:	f000 f945 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001930:	2064      	movs	r0, #100	; 0x64
 8001932:	f000 f94f 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001936:	2003      	movs	r0, #3
 8001938:	f000 f94c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800193c:	2012      	movs	r0, #18
 800193e:	f000 f949 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001942:	2081      	movs	r0, #129	; 0x81
 8001944:	f000 f946 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001948:	20e8      	movs	r0, #232	; 0xe8
 800194a:	f000 f936 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800194e:	2085      	movs	r0, #133	; 0x85
 8001950:	f000 f940 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 f93d 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 f93a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001960:	20cb      	movs	r0, #203	; 0xcb
 8001962:	f000 f92a 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001966:	2039      	movs	r0, #57	; 0x39
 8001968:	f000 f934 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800196c:	202c      	movs	r0, #44	; 0x2c
 800196e:	f000 f931 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f92e 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001978:	2034      	movs	r0, #52	; 0x34
 800197a:	f000 f92b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800197e:	2002      	movs	r0, #2
 8001980:	f000 f928 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001984:	20f7      	movs	r0, #247	; 0xf7
 8001986:	f000 f918 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800198a:	2020      	movs	r0, #32
 800198c:	f000 f922 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001990:	20ea      	movs	r0, #234	; 0xea
 8001992:	f000 f912 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f91c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800199c:	2000      	movs	r0, #0
 800199e:	f000 f919 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80019a2:	20b1      	movs	r0, #177	; 0xb1
 80019a4:	f000 f909 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f913 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019ae:	201b      	movs	r0, #27
 80019b0:	f000 f910 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80019b4:	20b6      	movs	r0, #182	; 0xb6
 80019b6:	f000 f900 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80019ba:	200a      	movs	r0, #10
 80019bc:	f000 f90a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80019c0:	20a2      	movs	r0, #162	; 0xa2
 80019c2:	f000 f907 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80019c6:	20c0      	movs	r0, #192	; 0xc0
 80019c8:	f000 f8f7 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019cc:	2010      	movs	r0, #16
 80019ce:	f000 f901 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80019d2:	20c1      	movs	r0, #193	; 0xc1
 80019d4:	f000 f8f1 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019d8:	2010      	movs	r0, #16
 80019da:	f000 f8fb 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80019de:	20c5      	movs	r0, #197	; 0xc5
 80019e0:	f000 f8eb 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80019e4:	2045      	movs	r0, #69	; 0x45
 80019e6:	f000 f8f5 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019ea:	2015      	movs	r0, #21
 80019ec:	f000 f8f2 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019f0:	20c7      	movs	r0, #199	; 0xc7
 80019f2:	f000 f8e2 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019f6:	2090      	movs	r0, #144	; 0x90
 80019f8:	f000 f8ec 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019fc:	2036      	movs	r0, #54	; 0x36
 80019fe:	f000 f8dc 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f000 f8e6 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001a08:	20f2      	movs	r0, #242	; 0xf2
 8001a0a:	f000 f8d6 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f8e0 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001a14:	20b0      	movs	r0, #176	; 0xb0
 8001a16:	f000 f8d0 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001a1a:	20c2      	movs	r0, #194	; 0xc2
 8001a1c:	f000 f8da 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a20:	20b6      	movs	r0, #182	; 0xb6
 8001a22:	f000 f8ca 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a26:	200a      	movs	r0, #10
 8001a28:	f000 f8d4 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a2c:	20a7      	movs	r0, #167	; 0xa7
 8001a2e:	f000 f8d1 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a32:	2027      	movs	r0, #39	; 0x27
 8001a34:	f000 f8ce 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a38:	2004      	movs	r0, #4
 8001a3a:	f000 f8cb 	bl	8001bd4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a3e:	202a      	movs	r0, #42	; 0x2a
 8001a40:	f000 f8bb 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 f8c5 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f8c2 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f8bf 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a56:	20ef      	movs	r0, #239	; 0xef
 8001a58:	f000 f8bc 	bl	8001bd4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a5c:	202b      	movs	r0, #43	; 0x2b
 8001a5e:	f000 f8ac 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f8b6 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f8b3 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 f8b0 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a74:	203f      	movs	r0, #63	; 0x3f
 8001a76:	f000 f8ad 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a7a:	20f6      	movs	r0, #246	; 0xf6
 8001a7c:	f000 f89d 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f000 f8a7 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f8a4 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	f000 f8a1 	bl	8001bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a92:	202c      	movs	r0, #44	; 0x2c
 8001a94:	f000 f891 	bl	8001bba <ili9341_WriteReg>
  LCD_Delay(200);
 8001a98:	20c8      	movs	r0, #200	; 0xc8
 8001a9a:	f000 fe67 	bl	800276c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a9e:	2026      	movs	r0, #38	; 0x26
 8001aa0:	f000 f88b 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f000 f895 	bl	8001bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001aaa:	20e0      	movs	r0, #224	; 0xe0
 8001aac:	f000 f885 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ab0:	200f      	movs	r0, #15
 8001ab2:	f000 f88f 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001ab6:	2029      	movs	r0, #41	; 0x29
 8001ab8:	f000 f88c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001abc:	2024      	movs	r0, #36	; 0x24
 8001abe:	f000 f889 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ac2:	200c      	movs	r0, #12
 8001ac4:	f000 f886 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ac8:	200e      	movs	r0, #14
 8001aca:	f000 f883 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ace:	2009      	movs	r0, #9
 8001ad0:	f000 f880 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ad4:	204e      	movs	r0, #78	; 0x4e
 8001ad6:	f000 f87d 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001ada:	2078      	movs	r0, #120	; 0x78
 8001adc:	f000 f87a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ae0:	203c      	movs	r0, #60	; 0x3c
 8001ae2:	f000 f877 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ae6:	2009      	movs	r0, #9
 8001ae8:	f000 f874 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001aec:	2013      	movs	r0, #19
 8001aee:	f000 f871 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001af2:	2005      	movs	r0, #5
 8001af4:	f000 f86e 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001af8:	2017      	movs	r0, #23
 8001afa:	f000 f86b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001afe:	2011      	movs	r0, #17
 8001b00:	f000 f868 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f865 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001b0a:	20e1      	movs	r0, #225	; 0xe1
 8001b0c:	f000 f855 	bl	8001bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f000 f85f 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001b16:	2016      	movs	r0, #22
 8001b18:	f000 f85c 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b1c:	201b      	movs	r0, #27
 8001b1e:	f000 f859 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b22:	2004      	movs	r0, #4
 8001b24:	f000 f856 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b28:	2011      	movs	r0, #17
 8001b2a:	f000 f853 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f000 f850 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b34:	2031      	movs	r0, #49	; 0x31
 8001b36:	f000 f84d 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b3a:	2033      	movs	r0, #51	; 0x33
 8001b3c:	f000 f84a 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b40:	2042      	movs	r0, #66	; 0x42
 8001b42:	f000 f847 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b46:	2005      	movs	r0, #5
 8001b48:	f000 f844 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b4c:	200c      	movs	r0, #12
 8001b4e:	f000 f841 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f000 f83e 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b58:	2028      	movs	r0, #40	; 0x28
 8001b5a:	f000 f83b 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b5e:	202f      	movs	r0, #47	; 0x2f
 8001b60:	f000 f838 	bl	8001bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b64:	200f      	movs	r0, #15
 8001b66:	f000 f835 	bl	8001bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b6a:	2011      	movs	r0, #17
 8001b6c:	f000 f825 	bl	8001bba <ili9341_WriteReg>
  LCD_Delay(200);
 8001b70:	20c8      	movs	r0, #200	; 0xc8
 8001b72:	f000 fdfb 	bl	800276c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b76:	2029      	movs	r0, #41	; 0x29
 8001b78:	f000 f81f 	bl	8001bba <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b7c:	202c      	movs	r0, #44	; 0x2c
 8001b7e:	f000 f81c 	bl	8001bba <ili9341_WriteReg>
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b8a:	f000 fd01 	bl	8002590 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b8e:	2103      	movs	r1, #3
 8001b90:	20d3      	movs	r0, #211	; 0xd3
 8001b92:	f000 f82c 	bl	8001bee <ili9341_ReadData>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b29b      	uxth	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001ba2:	2029      	movs	r0, #41	; 0x29
 8001ba4:	f000 f809 	bl	8001bba <ili9341_WriteReg>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001bb0:	2028      	movs	r0, #40	; 0x28
 8001bb2:	f000 f802 	bl	8001bba <ili9341_WriteReg>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd7c 	bl	80026c4 <LCD_IO_WriteReg>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fd4d 	bl	8002680 <LCD_IO_WriteData>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460a      	mov	r2, r1
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001bfe:	797a      	ldrb	r2, [r7, #5]
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd7f 	bl	8002708 <LCD_IO_ReadData>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001c18:	23f0      	movs	r3, #240	; 0xf0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c28:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fa59 	bl	80020fc <stmpe811_GetInstance>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d112      	bne.n	8001c7a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f000 fa51 	bl	80020fc <stmpe811_GetInstance>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d80a      	bhi.n	8001c7a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	b2d1      	uxtb	r1, r2
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <stmpe811_Init+0x4c>)
 8001c6c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001c6e:	f000 fd88 	bl	8002782 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f807 	bl	8001c88 <stmpe811_Reset>
    }
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20025bf8 	.word	0x20025bf8

08001c88 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2202      	movs	r2, #2
 8001c98:	2103      	movs	r1, #3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd7d 	bl	800279a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f000 fdb7 	bl	8002814 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	2103      	movs	r1, #3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fd73 	bl	800279a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f000 fdad 	bl	8002814 <IOE_Delay>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001cc2:	b590      	push	{r4, r7, lr}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001ccc:	f000 fd59 	bl	8002782 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fd72 	bl	80027c0 <IOE_Read>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fd69 	bl	80027c0 <IOE_Read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	b29b      	uxth	r3, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2109      	movs	r1, #9
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fd53 	bl	80027c0 <IOE_Read>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	2109      	movs	r1, #9
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fd33 	bl	800279a <IOE_Write>
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2109      	movs	r1, #9
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fd35 	bl	80027c0 <IOE_Read>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	2109      	movs	r1, #9
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fd15 	bl	800279a <IOE_Write>
    
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	80fb      	strh	r3, [r7, #6]
 8001d84:	4613      	mov	r3, r2
 8001d86:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	210a      	movs	r1, #10
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fd14 	bl	80027c0 <IOE_Read>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	797b      	ldrb	r3, [r7, #5]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	210a      	movs	r1, #10
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fcf4 	bl	800279a <IOE_Write>
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	80fb      	strh	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	210a      	movs	r1, #10
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fcf3 	bl	80027c0 <IOE_Read>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001dde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4013      	ands	r3, r2
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	210a      	movs	r1, #10
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fcce 	bl	800279a <IOE_Write>
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460a      	mov	r2, r1
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	210b      	movs	r1, #11
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fccf 	bl	80027c0 <IOE_Read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	797b      	ldrb	r3, [r7, #5]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	80fb      	strh	r3, [r7, #6]
 8001e40:	4613      	mov	r3, r2
 8001e42:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	797a      	ldrb	r2, [r7, #5]
 8001e4a:	210b      	movs	r1, #11
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fca4 	bl	800279a <IOE_Write>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	6039      	str	r1, [r7, #0]
 8001e64:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2117      	movs	r1, #23
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fca5 	bl	80027c0 <IOE_Read>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	b25a      	sxtb	r2, r3
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4013      	ands	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	2117      	movs	r1, #23
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fc80 	bl	800279a <IOE_Write>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fc84 	bl	80027c0 <IOE_Read>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fc64 	bl	800279a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	21f0      	movs	r1, #240	; 0xf0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ffbf 	bl	8001e5a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	2104      	movs	r1, #4
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fc54 	bl	800279a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2249      	movs	r2, #73	; 0x49
 8001ef8:	2120      	movs	r1, #32
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fc4d 	bl	800279a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001f00:	2002      	movs	r0, #2
 8001f02:	f000 fc87 	bl	8002814 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2121      	movs	r1, #33	; 0x21
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fc43 	bl	800279a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	229a      	movs	r2, #154	; 0x9a
 8001f1a:	2141      	movs	r1, #65	; 0x41
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fc3c 	bl	800279a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2201      	movs	r2, #1
 8001f28:	214a      	movs	r1, #74	; 0x4a
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fc35 	bl	800279a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2201      	movs	r2, #1
 8001f36:	214b      	movs	r1, #75	; 0x4b
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fc2e 	bl	800279a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	214b      	movs	r1, #75	; 0x4b
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc27 	bl	800279a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2201      	movs	r2, #1
 8001f52:	2156      	movs	r1, #86	; 0x56
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fc20 	bl	800279a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2158      	movs	r1, #88	; 0x58
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fc19 	bl	800279a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fc12 	bl	800279a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	210b      	movs	r1, #11
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fc0b 	bl	800279a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001f84:	2002      	movs	r0, #2
 8001f86:	f000 fc45 	bl	8002814 <IOE_Delay>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fc0a 	bl	80027c0 <IOE_Read>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	bf0c      	ite	eq
 8001fb6:	2301      	moveq	r3, #1
 8001fb8:	2300      	movne	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00b      	beq.n	8001fdc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	214c      	movs	r1, #76	; 0x4c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbf8 	bl	80027c0 <IOE_Read>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d010      	beq.n	8001ff8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e00d      	b.n	8001ff8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	214b      	movs	r1, #75	; 0x4b
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fbd8 	bl	800279a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	214b      	movs	r1, #75	; 0x4b
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fbd1 	bl	800279a <IOE_Write>
  }
  
  return ret;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	b2d8      	uxtb	r0, r3
 8002014:	f107 0210 	add.w	r2, r7, #16
 8002018:	2304      	movs	r3, #4
 800201a:	21d7      	movs	r1, #215	; 0xd7
 800201c:	f000 fbe3 	bl	80027e6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002020:	7c3b      	ldrb	r3, [r7, #16]
 8002022:	061a      	lsls	r2, r3, #24
 8002024:	7c7b      	ldrb	r3, [r7, #17]
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	431a      	orrs	r2, r3
 800202a:	7cbb      	ldrb	r3, [r7, #18]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	4313      	orrs	r3, r2
 8002030:	7cfa      	ldrb	r2, [r7, #19]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0d1b      	lsrs	r3, r3, #20
 800203a:	b29a      	uxth	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2201      	movs	r2, #1
 8002056:	214b      	movs	r1, #75	; 0x4b
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fb9e 	bl	800279a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2200      	movs	r2, #0
 8002064:	214b      	movs	r1, #75	; 0x4b
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fb97 	bl	800279a <IOE_Write>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800207e:	f000 fb86 	bl	800278e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	211f      	movs	r1, #31
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fe76 	bl	8001d78 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fe36 	bl	8001d00 <stmpe811_EnableGlobalIT>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fe47 	bl	8001d3c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	211f      	movs	r1, #31
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fe81 	bl	8001dba <stmpe811_DisableITSource>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	211f      	movs	r1, #31
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fe99 	bl	8001e06 <stmpe811_ReadGITStatus>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	211f      	movs	r1, #31
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fea1 	bl	8001e34 <stmpe811_ClearGlobalIT>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e00b      	b.n	8002128 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <stmpe811_GetInstance+0x40>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	b29b      	uxth	r3, r3
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	429a      	cmp	r2, r3
 800211c:	d101      	bne.n	8002122 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	e006      	b.n	8002130 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	3301      	adds	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d9f0      	bls.n	8002110 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800212e:	23ff      	movs	r3, #255	; 0xff
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	20025bf8 	.word	0x20025bf8

08002140 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a33      	ldr	r2, [pc, #204]	; (800221c <I2Cx_MspInit+0xdc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d15f      	bne.n	8002212 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a31      	ldr	r2, [pc, #196]	; (8002220 <I2Cx_MspInit+0xe0>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <I2Cx_MspInit+0xe0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002190:	2312      	movs	r3, #18
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800219c:	2304      	movs	r3, #4
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	481f      	ldr	r0, [pc, #124]	; (8002224 <I2Cx_MspInit+0xe4>)
 80021a8:	f001 f9b6 	bl	8003518 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80021ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	481b      	ldr	r0, [pc, #108]	; (8002228 <I2Cx_MspInit+0xe8>)
 80021ba:	f001 f9ad 	bl	8003518 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021e4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <I2Cx_MspInit+0xe0>)
 80021ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021f0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	210f      	movs	r1, #15
 80021f6:	2048      	movs	r0, #72	; 0x48
 80021f8:	f000 fd42 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80021fc:	2048      	movs	r0, #72	; 0x48
 80021fe:	f000 fd5b 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	210f      	movs	r1, #15
 8002206:	2049      	movs	r0, #73	; 0x49
 8002208:	f000 fd3a 	bl	8002c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800220c:	2049      	movs	r0, #73	; 0x49
 800220e:	f000 fd53 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40005c00 	.word	0x40005c00
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020800 	.word	0x40020800

0800222c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002230:	4814      	ldr	r0, [pc, #80]	; (8002284 <I2Cx_Init+0x58>)
 8002232:	f002 f8c7 	bl	80043c4 <HAL_I2C_GetState>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d121      	bne.n	8002280 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <I2Cx_Init+0x58>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <I2Cx_Init+0x5c>)
 8002240:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <I2Cx_Init+0x58>)
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <I2Cx_Init+0x60>)
 8002246:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <I2Cx_Init+0x58>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <I2Cx_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <I2Cx_Init+0x58>)
 8002256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800225a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <I2Cx_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <I2Cx_Init+0x58>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <I2Cx_Init+0x58>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <I2Cx_Init+0x58>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <I2Cx_Init+0x58>)
 8002276:	f7ff ff63 	bl	8002140 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800227a:	4802      	ldr	r0, [pc, #8]	; (8002284 <I2Cx_Init+0x58>)
 800227c:	f001 fc1a 	bl	8003ab4 <HAL_I2C_Init>
  }
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2002f3cc 	.word	0x2002f3cc
 8002288:	40005c00 	.word	0x40005c00
 800228c:	000186a0 	.word	0x000186a0

08002290 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <I2Cx_ITConfig+0x58>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <I2Cx_ITConfig+0x58>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <I2Cx_ITConfig+0x58>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80022b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <I2Cx_ITConfig+0x5c>)
 80022c2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <I2Cx_ITConfig+0x60>)
 80022ca:	f001 f925 	bl	8003518 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80022ce:	2200      	movs	r2, #0
 80022d0:	210f      	movs	r1, #15
 80022d2:	2028      	movs	r0, #40	; 0x28
 80022d4:	f000 fcd4 	bl	8002c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80022d8:	2028      	movs	r0, #40	; 0x28
 80022da:	f000 fced 	bl	8002cb8 <HAL_NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	10210000 	.word	0x10210000
 80022f0:	40020000 	.word	0x40020000

080022f4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	460b      	mov	r3, r1
 8002300:	71bb      	strb	r3, [r7, #6]
 8002302:	4613      	mov	r3, r2
 8002304:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	b299      	uxth	r1, r3
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <I2Cx_WriteData+0x4c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	2301      	movs	r3, #1
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	1d7b      	adds	r3, r7, #5
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <I2Cx_WriteData+0x50>)
 8002324:	f001 fd2e 	bl	8003d84 <HAL_I2C_Mem_Write>
 8002328:	4603      	mov	r3, r0
 800232a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002332:	f000 f863 	bl	80023fc <I2Cx_Error>
  }        
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000068 	.word	0x20000068
 8002344:	2002f3cc 	.word	0x2002f3cc

08002348 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af04      	add	r7, sp, #16
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	4613      	mov	r3, r2
 8002356:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	b299      	uxth	r1, r3
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	b29a      	uxth	r2, r3
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <I2Cx_ReadData+0x50>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	9302      	str	r3, [sp, #8]
 800236e:	2301      	movs	r3, #1
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f107 030e 	add.w	r3, r7, #14
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2301      	movs	r3, #1
 800237a:	4808      	ldr	r0, [pc, #32]	; (800239c <I2Cx_ReadData+0x54>)
 800237c:	f001 fdfc 	bl	8003f78 <HAL_I2C_Mem_Read>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800238a:	f000 f837 	bl	80023fc <I2Cx_Error>
  
  }
  return value;
 800238e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000068 	.word	0x20000068
 800239c:	2002f3cc 	.word	0x2002f3cc

080023a0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	603a      	str	r2, [r7, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
 80023ae:	460b      	mov	r3, r1
 80023b0:	71bb      	strb	r3, [r7, #6]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	b299      	uxth	r1, r3
 80023be:	79bb      	ldrb	r3, [r7, #6]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <I2Cx_ReadBuffer+0x54>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2301      	movs	r3, #1
 80023d2:	4809      	ldr	r0, [pc, #36]	; (80023f8 <I2Cx_ReadBuffer+0x58>)
 80023d4:	f001 fdd0 	bl	8003f78 <HAL_I2C_Mem_Read>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e002      	b.n	80023ec <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80023e6:	f000 f809 	bl	80023fc <I2Cx_Error>

    return 1;
 80023ea:	2301      	movs	r3, #1
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000068 	.word	0x20000068
 80023f8:	2002f3cc 	.word	0x2002f3cc

080023fc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <I2Cx_Error+0x14>)
 8002402:	f001 fc8f 	bl	8003d24 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002406:	f7ff ff11 	bl	800222c <I2Cx_Init>
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2002f3cc 	.word	0x2002f3cc

08002414 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002418:	4819      	ldr	r0, [pc, #100]	; (8002480 <SPIx_Init+0x6c>)
 800241a:	f004 fa3a 	bl	8006892 <HAL_SPI_GetState>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d12b      	bne.n	800247c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002424:	4b16      	ldr	r3, [pc, #88]	; (8002480 <SPIx_Init+0x6c>)
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <SPIx_Init+0x70>)
 8002428:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <SPIx_Init+0x6c>)
 800242c:	2218      	movs	r2, #24
 800242e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <SPIx_Init+0x6c>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <SPIx_Init+0x6c>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <SPIx_Init+0x6c>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <SPIx_Init+0x6c>)
 8002444:	2200      	movs	r2, #0
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <SPIx_Init+0x6c>)
 800244a:	2207      	movs	r2, #7
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <SPIx_Init+0x6c>)
 8002450:	2200      	movs	r2, #0
 8002452:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <SPIx_Init+0x6c>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <SPIx_Init+0x6c>)
 800245c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002460:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <SPIx_Init+0x6c>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SPIx_Init+0x6c>)
 800246a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800246e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <SPIx_Init+0x6c>)
 8002472:	f000 f853 	bl	800251c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002476:	4802      	ldr	r0, [pc, #8]	; (8002480 <SPIx_Init+0x6c>)
 8002478:	f003 fda0 	bl	8005fbc <HAL_SPI_Init>
  } 
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20025bfc 	.word	0x20025bfc
 8002484:	40015000 	.word	0x40015000

08002488 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <SPIx_Read+0x38>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f107 0108 	add.w	r1, r7, #8
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <SPIx_Read+0x3c>)
 80024a4:	f003 ff4a 	bl	800633c <HAL_SPI_Receive>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024b2:	f000 f827 	bl	8002504 <SPIx_Error>
  }
  
  return readvalue;
 80024b6:	68bb      	ldr	r3, [r7, #8]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000006c 	.word	0x2000006c
 80024c4:	20025bfc 	.word	0x20025bfc

080024c8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <SPIx_Write+0x34>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1db9      	adds	r1, r7, #6
 80024dc:	2201      	movs	r2, #1
 80024de:	4808      	ldr	r0, [pc, #32]	; (8002500 <SPIx_Write+0x38>)
 80024e0:	f003 fdf8 	bl	80060d4 <HAL_SPI_Transmit>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024ee:	f000 f809 	bl	8002504 <SPIx_Error>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000006c 	.word	0x2000006c
 8002500:	20025bfc 	.word	0x20025bfc

08002504 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <SPIx_Error+0x14>)
 800250a:	f003 fdbb 	bl	8006084 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800250e:	f7ff ff81 	bl	8002414 <SPIx_Init>
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20025bfc 	.word	0x20025bfc

0800251c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <SPIx_MspInit+0x6c>)
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	4a16      	ldr	r2, [pc, #88]	; (8002588 <SPIx_MspInit+0x6c>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002532:	6453      	str	r3, [r2, #68]	; 0x44
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <SPIx_MspInit+0x6c>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <SPIx_MspInit+0x6c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <SPIx_MspInit+0x6c>)
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	6313      	str	r3, [r2, #48]	; 0x30
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <SPIx_MspInit+0x6c>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800255c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002566:	2302      	movs	r3, #2
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800256a:	2301      	movs	r3, #1
 800256c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800256e:	2305      	movs	r3, #5
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <SPIx_MspInit+0x70>)
 800257a:	f000 ffcd 	bl	8003518 <HAL_GPIO_Init>
}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40021400 	.word	0x40021400

08002590 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <LCD_IO_Init+0xe0>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d164      	bne.n	8002668 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <LCD_IO_Init+0xe0>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <LCD_IO_Init+0xe4>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <LCD_IO_Init+0xe4>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6313      	str	r3, [r2, #48]	; 0x30
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <LCD_IO_Init+0xe4>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4619      	mov	r1, r3
 80025d8:	4827      	ldr	r0, [pc, #156]	; (8002678 <LCD_IO_Init+0xe8>)
 80025da:	f000 ff9d 	bl	8003518 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <LCD_IO_Init+0xe4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <LCD_IO_Init+0xe4>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <LCD_IO_Init+0xe4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002600:	2301      	movs	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4619      	mov	r1, r3
 8002612:	4819      	ldr	r0, [pc, #100]	; (8002678 <LCD_IO_Init+0xe8>)
 8002614:	f000 ff80 	bl	8003518 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <LCD_IO_Init+0xe4>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <LCD_IO_Init+0xe4>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <LCD_IO_Init+0xe4>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002634:	2304      	movs	r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4619      	mov	r1, r3
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <LCD_IO_Init+0xec>)
 800264c:	f000 ff64 	bl	8003518 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002650:	2200      	movs	r2, #0
 8002652:	2104      	movs	r1, #4
 8002654:	4809      	ldr	r0, [pc, #36]	; (800267c <LCD_IO_Init+0xec>)
 8002656:	f001 fa13 	bl	8003a80 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800265a:	2201      	movs	r2, #1
 800265c:	2104      	movs	r1, #4
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <LCD_IO_Init+0xec>)
 8002660:	f001 fa0e 	bl	8003a80 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002664:	f7ff fed6 	bl	8002414 <SPIx_Init>
  }
}
 8002668:	bf00      	nop
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20025c54 	.word	0x20025c54
 8002674:	40023800 	.word	0x40023800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40020800 	.word	0x40020800

08002680 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800268a:	2201      	movs	r2, #1
 800268c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <LCD_IO_WriteData+0x3c>)
 8002692:	f001 f9f5 	bl	8003a80 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <LCD_IO_WriteData+0x40>)
 800269c:	f001 f9f0 	bl	8003a80 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff10 	bl	80024c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026a8:	2201      	movs	r2, #1
 80026aa:	2104      	movs	r1, #4
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <LCD_IO_WriteData+0x40>)
 80026ae:	f001 f9e7 	bl	8003a80 <HAL_GPIO_WritePin>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40020800 	.word	0x40020800

080026c4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <LCD_IO_WriteReg+0x3c>)
 80026d6:	f001 f9d3 	bl	8003a80 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80026da:	2200      	movs	r2, #0
 80026dc:	2104      	movs	r1, #4
 80026de:	4809      	ldr	r0, [pc, #36]	; (8002704 <LCD_IO_WriteReg+0x40>)
 80026e0:	f001 f9ce 	bl	8003a80 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff feed 	bl	80024c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026ee:	2201      	movs	r2, #1
 80026f0:	2104      	movs	r1, #4
 80026f2:	4804      	ldr	r0, [pc, #16]	; (8002704 <LCD_IO_WriteReg+0x40>)
 80026f4:	f001 f9c4 	bl	8003a80 <HAL_GPIO_WritePin>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40020800 	.word	0x40020800

08002708 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	80fb      	strh	r3, [r7, #6]
 8002714:	4613      	mov	r3, r2
 8002716:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800271c:	2200      	movs	r2, #0
 800271e:	2104      	movs	r1, #4
 8002720:	4810      	ldr	r0, [pc, #64]	; (8002764 <LCD_IO_ReadData+0x5c>)
 8002722:	f001 f9ad 	bl	8003a80 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800272c:	480e      	ldr	r0, [pc, #56]	; (8002768 <LCD_IO_ReadData+0x60>)
 800272e:	f001 f9a7 	bl	8003a80 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fec7 	bl	80024c8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800273a:	797b      	ldrb	r3, [r7, #5]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fea3 	bl	8002488 <SPIx_Read>
 8002742:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002744:	2201      	movs	r2, #1
 8002746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <LCD_IO_ReadData+0x60>)
 800274c:	f001 f998 	bl	8003a80 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002750:	2201      	movs	r2, #1
 8002752:	2104      	movs	r1, #4
 8002754:	4803      	ldr	r0, [pc, #12]	; (8002764 <LCD_IO_ReadData+0x5c>)
 8002756:	f001 f993 	bl	8003a80 <HAL_GPIO_WritePin>
  
  return readvalue;
 800275a:	68fb      	ldr	r3, [r7, #12]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00

0800276c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f987 	bl	8002a88 <HAL_Delay>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002786:	f7ff fd51 	bl	800222c <I2Cx_Init>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}

0800278e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002792:	f7ff fd7d 	bl	8002290 <I2Cx_ITConfig>
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}

0800279a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	460b      	mov	r3, r1
 80027a6:	71bb      	strb	r3, [r7, #6]
 80027a8:	4613      	mov	r3, r2
 80027aa:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80027ac:	797a      	ldrb	r2, [r7, #5]
 80027ae:	79b9      	ldrb	r1, [r7, #6]
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fd9e 	bl	80022f4 <I2Cx_WriteData>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80027d0:	79ba      	ldrb	r2, [r7, #6]
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fdb6 	bl	8002348 <I2Cx_ReadData>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	603a      	str	r2, [r7, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	460b      	mov	r3, r1
 80027f6:	71bb      	strb	r3, [r7, #6]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	79b9      	ldrb	r1, [r7, #6]
 8002800:	79f8      	ldrb	r0, [r7, #7]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	f7ff fdcc 	bl	80023a0 <I2Cx_ReadBuffer>
 8002808:	4603      	mov	r3, r0
 800280a:	b29b      	uxth	r3, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f933 	bl	8002a88 <HAL_Delay>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	460a      	mov	r2, r1
 8002836:	80fb      	strh	r3, [r7, #6]
 8002838:	4613      	mov	r3, r2
 800283a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <BSP_TS_Init+0x64>)
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <BSP_TS_Init+0x68>)
 8002848:	88bb      	ldrh	r3, [r7, #4]
 800284a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <BSP_TS_Init+0x6c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2082      	movs	r0, #130	; 0x82
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
 8002858:	f640 0311 	movw	r3, #2065	; 0x811
 800285c:	429a      	cmp	r2, r3
 800285e:	d104      	bne.n	800286a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <BSP_TS_Init+0x70>)
 8002862:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <BSP_TS_Init+0x6c>)
 8002864:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <BSP_TS_Init+0x70>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2082      	movs	r0, #130	; 0x82
 8002878:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <BSP_TS_Init+0x70>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2082      	movs	r0, #130	; 0x82
 8002882:	4798      	blx	r3
  }

  return ret;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20025c5c 	.word	0x20025c5c
 8002894:	20025c5e 	.word	0x20025c5e
 8002898:	20000040 	.word	0x20000040
 800289c:	20025c58 	.word	0x20025c58

080028a0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80028a8:	4b4f      	ldr	r3, [pc, #316]	; (80029e8 <BSP_TS_GetState+0x148>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2082      	movs	r0, #130	; 0x82
 80028b0:	4798      	blx	r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 808d 	beq.w	80029de <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80028c4:	4b48      	ldr	r3, [pc, #288]	; (80029e8 <BSP_TS_GetState+0x148>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f107 020c 	add.w	r2, r7, #12
 80028ce:	f107 010e 	add.w	r1, r7, #14
 80028d2:	2082      	movs	r0, #130	; 0x82
 80028d4:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80028d6:	89bb      	ldrh	r3, [r7, #12]
 80028d8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028dc:	b29b      	uxth	r3, r3
 80028de:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80028e0:	89bb      	ldrh	r3, [r7, #12]
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <BSP_TS_GetState+0x14c>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80028ec:	8abb      	ldrh	r3, [r7, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	82bb      	strh	r3, [r7, #20]
 80028f6:	e008      	b.n	800290a <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <BSP_TS_GetState+0x150>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	8aba      	ldrh	r2, [r7, #20]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d903      	bls.n	800290a <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <BSP_TS_GetState+0x150>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	3b01      	subs	r3, #1
 8002908:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800290a:	8abb      	ldrh	r3, [r7, #20]
 800290c:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002914:	4293      	cmp	r3, r2
 8002916:	d806      	bhi.n	8002926 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800291e:	330e      	adds	r3, #14
 8002920:	b29b      	uxth	r3, r3
 8002922:	81fb      	strh	r3, [r7, #14]
 8002924:	e005      	b.n	8002932 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8002926:	89fb      	ldrh	r3, [r7, #14]
 8002928:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800292c:	3308      	adds	r3, #8
 800292e:	b29b      	uxth	r3, r3
 8002930:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <BSP_TS_GetState+0x154>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800293e:	8afb      	ldrh	r3, [r7, #22]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	82fb      	strh	r3, [r7, #22]
 8002948:	e008      	b.n	800295c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <BSP_TS_GetState+0x158>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	8afa      	ldrh	r2, [r7, #22]
 8002950:	429a      	cmp	r2, r3
 8002952:	d903      	bls.n	800295c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <BSP_TS_GetState+0x158>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	3b01      	subs	r3, #1
 800295a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800295c:	8afb      	ldrh	r3, [r7, #22]
 800295e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	461a      	mov	r2, r3
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <BSP_TS_GetState+0x15c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d906      	bls.n	800297a <BSP_TS_GetState+0xda>
 800296c:	89fa      	ldrh	r2, [r7, #14]
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <BSP_TS_GetState+0x15c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	b29b      	uxth	r3, r3
 8002978:	e005      	b.n	8002986 <BSP_TS_GetState+0xe6>
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <BSP_TS_GetState+0x15c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	b29a      	uxth	r2, r3
 8002980:	89fb      	ldrh	r3, [r7, #14]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	b29b      	uxth	r3, r3
 8002986:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8002988:	89bb      	ldrh	r3, [r7, #12]
 800298a:	461a      	mov	r2, r3
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <BSP_TS_GetState+0x160>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d906      	bls.n	80029a2 <BSP_TS_GetState+0x102>
 8002994:	89ba      	ldrh	r2, [r7, #12]
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <BSP_TS_GetState+0x160>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	b29b      	uxth	r3, r3
 80029a0:	e005      	b.n	80029ae <BSP_TS_GetState+0x10e>
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <BSP_TS_GetState+0x160>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	89bb      	ldrh	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80029b0:	8a7a      	ldrh	r2, [r7, #18]
 80029b2:	8a3b      	ldrh	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	dd07      	ble.n	80029ca <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <BSP_TS_GetState+0x15c>)
 80029c0:	601a      	str	r2, [r3, #0]
      _y = y; 
 80029c2:	89bb      	ldrh	r3, [r7, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <BSP_TS_GetState+0x160>)
 80029c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <BSP_TS_GetState+0x15c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <BSP_TS_GetState+0x160>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	809a      	strh	r2, [r3, #4]
  }
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20025c58 	.word	0x20025c58
 80029ec:	ba2e8ba3 	.word	0xba2e8ba3
 80029f0:	20025c5e 	.word	0x20025c5e
 80029f4:	88888889 	.word	0x88888889
 80029f8:	20025c5c 	.word	0x20025c5c
 80029fc:	20025c60 	.word	0x20025c60
 8002a00:	20025c64 	.word	0x20025c64

08002a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_Init+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_Init+0x40>)
 8002a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_Init+0x40>)
 8002a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_Init+0x40>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a2c:	2003      	movs	r0, #3
 8002a2e:	f000 f91c 	bl	8002c6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe fcda 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a38:	f7fe fcac 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_IncTick+0x20>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_IncTick+0x24>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_IncTick+0x24>)
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000074 	.word	0x20000074
 8002a6c:	2002f420 	.word	0x2002f420

08002a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return uwTick;
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_GetTick+0x14>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2002f420 	.word	0x2002f420

08002a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff ffee 	bl	8002a70 <HAL_GetTick>
 8002a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d005      	beq.n	8002aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <HAL_Delay+0x40>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aae:	bf00      	nop
 8002ab0:	f7ff ffde 	bl	8002a70 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d8f7      	bhi.n	8002ab0 <HAL_Delay+0x28>
  {
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000074 	.word	0x20000074

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db10      	blt.n	8002ba0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4909      	ldr	r1, [pc, #36]	; (8002bac <__NVIC_DisableIRQ+0x40>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	3320      	adds	r3, #32
 8002b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ff2a 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c92:	f7ff ff3f 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	6978      	ldr	r0, [r7, #20]
 8002c9e:	f7ff ffb1 	bl	8002c04 <NVIC_EncodePriority>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff80 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cb0:	bf00      	nop
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff32 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff42 	bl	8002b6c <__NVIC_DisableIRQ>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00e      	b.n	8002d20 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	795b      	ldrb	r3, [r3, #5]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fc50 	bl	80005b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e03b      	b.n	8002db2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fd fc86 	bl	8000660 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	f023 0107 	bic.w	r1, r3, #7
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68d1      	ldr	r1, [r2, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e05f      	b.n	8002e8e <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002dce:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_DMA2D_DeInit+0xdc>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02e      	beq.n	8002e38 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8c1 	bl	8002f70 <HAL_DMA2D_Abort>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d021      	beq.n	8002e38 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e04a      	b.n	8002e8e <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d108      	bne.n	8002e18 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002e06:	2100      	movs	r1, #0
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f8f7 	bl	8002ffc <HAL_DMA2D_CLUTLoading_Abort>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e03a      	b.n	8002e8e <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d108      	bne.n	8002e38 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002e26:	2101      	movs	r1, #1
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f8e7 	bl	8002ffc <HAL_DMA2D_CLUTLoading_Abort>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e02a      	b.n	8002e8e <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2200      	movs	r2, #0
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fd fc1d 	bl	80006b0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_DMA2D_Start_IT+0x1c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e020      	b.n	8002efa <HAL_DMA2D_Start_IT+0x5e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fa84 	bl	80033e0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af02      	add	r7, sp, #8
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e024      	b.n	8002f68 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa4d 	bl	80033e0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002f54:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0205 	bic.w	r2, r3, #5
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0204 	orr.w	r2, r2, #4
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f8c:	f7ff fd70 	bl	8002a70 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f92:	e017      	b.n	8002fc4 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002f94:	f7ff fd6c 	bl	8002a70 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa2:	d90f      	bls.n	8002fc4 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e017      	b.n	8002ff4 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e0      	bne.n	8002f94 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0204 	orr.w	r2, r2, #4
 800301c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d103      	bne.n	800302c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	331c      	adds	r3, #28
 800302a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800302c:	f7ff fd20 	bl	8002a70 <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003032:	e017      	b.n	8003064 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003034:	f7ff fd1c 	bl	8002a70 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003042:	d90f      	bls.n	8003064 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e016      	b.n	8003092 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e1      	bne.n	8003034 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800307e:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d026      	beq.n	800310a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d021      	beq.n	800310a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2204      	movs	r2, #4
 80030ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d026      	beq.n	8003162 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d021      	beq.n	8003162 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2220      	movs	r2, #32
 8003134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	f043 0202 	orr.w	r2, r3, #2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2204      	movs	r2, #4
 8003146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d026      	beq.n	80031ba <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	2b00      	cmp	r3, #0
 8003174:	d021      	beq.n	80031ba <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003184:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2208      	movs	r2, #8
 800318c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	f043 0204 	orr.w	r2, r3, #4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2204      	movs	r2, #4
 80031e4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f853 	bl	8003292 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d024      	beq.n	8003240 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01f      	beq.n	8003240 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2202      	movs	r2, #2
 8003216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01f      	beq.n	800328a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01a      	beq.n	800328a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2210      	movs	r2, #16
 800326a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f80e 	bl	80032a6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_DMA2D_ConfigLayer+0x20>
 80032d8:	2302      	movs	r3, #2
 80032da:	e079      	b.n	80033d0 <HAL_DMA2D_ConfigLayer+0x114>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	3318      	adds	r3, #24
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003306:	4b35      	ldr	r3, [pc, #212]	; (80033dc <HAL_DMA2D_ConfigLayer+0x120>)
 8003308:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b0a      	cmp	r3, #10
 8003310:	d003      	beq.n	800331a <HAL_DMA2D_ConfigLayer+0x5e>
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b09      	cmp	r3, #9
 8003318:	d107      	bne.n	800332a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e005      	b.n	8003336 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	061b      	lsls	r3, r3, #24
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d120      	bne.n	800337e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	ea02 0103 	and.w	r1, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	430a      	orrs	r2, r1
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b0a      	cmp	r3, #10
 8003364:	d003      	beq.n	800336e <HAL_DMA2D_ConfigLayer+0xb2>
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b09      	cmp	r3, #9
 800336c:	d127      	bne.n	80033be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
 800337c:	e01f      	b.n	80033be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	ea02 0103 	and.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	430a      	orrs	r2, r1
 8003394:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b0a      	cmp	r3, #10
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d106      	bne.n	80033be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80033bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	ff03000f 	.word	0xff03000f

080033e0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b08b      	sub	sp, #44	; 0x2c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	041a      	lsls	r2, r3, #16
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003418:	d174      	bne.n	8003504 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003420:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003428:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003430:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	431a      	orrs	r2, r3
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e053      	b.n	80034fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d106      	bne.n	8003468 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4313      	orrs	r3, r2
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	e048      	b.n	80034fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d111      	bne.n	8003494 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	0cdb      	lsrs	r3, r3, #19
 8003474:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	0a9b      	lsrs	r3, r3, #10
 800347a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	08db      	lsrs	r3, r3, #3
 8003480:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	02db      	lsls	r3, r3, #11
 800348a:	4313      	orrs	r3, r2
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
 8003492:	e032      	b.n	80034fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d117      	bne.n	80034cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	0fdb      	lsrs	r3, r3, #31
 80034a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	0cdb      	lsrs	r3, r3, #19
 80034a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	0adb      	lsrs	r3, r3, #11
 80034ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	431a      	orrs	r2, r3
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	03db      	lsls	r3, r3, #15
 80034c2:	4313      	orrs	r3, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e016      	b.n	80034fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	0f1b      	lsrs	r3, r3, #28
 80034d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	0d1b      	lsrs	r3, r3, #20
 80034d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	0b1b      	lsrs	r3, r3, #12
 80034dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	011a      	lsls	r2, r3, #4
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	431a      	orrs	r2, r3
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	031b      	lsls	r3, r3, #12
 80034f2:	4313      	orrs	r3, r2
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003502:	e003      	b.n	800350c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	bf00      	nop
 800350e:	372c      	adds	r7, #44	; 0x2c
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e177      	b.n	8003824 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003534:	2201      	movs	r2, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 8166 	bne.w	800381e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00b      	beq.n	8003572 <HAL_GPIO_Init+0x5a>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d007      	beq.n	8003572 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003566:	2b11      	cmp	r3, #17
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b12      	cmp	r3, #18
 8003570:	d130      	bne.n	80035d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0xfc>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b12      	cmp	r3, #18
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80c0 	beq.w	800381e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_GPIO_Init+0x320>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a64      	ldr	r2, [pc, #400]	; (8003838 <HAL_GPIO_Init+0x320>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44
 80036ae:	4b62      	ldr	r3, [pc, #392]	; (8003838 <HAL_GPIO_Init+0x320>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ba:	4a60      	ldr	r2, [pc, #384]	; (800383c <HAL_GPIO_Init+0x324>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_GPIO_Init+0x328>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d037      	beq.n	8003756 <HAL_GPIO_Init+0x23e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a56      	ldr	r2, [pc, #344]	; (8003844 <HAL_GPIO_Init+0x32c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_GPIO_Init+0x23a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a55      	ldr	r2, [pc, #340]	; (8003848 <HAL_GPIO_Init+0x330>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <HAL_GPIO_Init+0x236>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a54      	ldr	r2, [pc, #336]	; (800384c <HAL_GPIO_Init+0x334>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d025      	beq.n	800374a <HAL_GPIO_Init+0x232>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a53      	ldr	r2, [pc, #332]	; (8003850 <HAL_GPIO_Init+0x338>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_GPIO_Init+0x22e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_GPIO_Init+0x33c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_Init+0x22a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a51      	ldr	r2, [pc, #324]	; (8003858 <HAL_GPIO_Init+0x340>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_Init+0x226>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a50      	ldr	r2, [pc, #320]	; (800385c <HAL_GPIO_Init+0x344>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_GPIO_Init+0x222>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4f      	ldr	r2, [pc, #316]	; (8003860 <HAL_GPIO_Init+0x348>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_Init+0x21e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4e      	ldr	r2, [pc, #312]	; (8003864 <HAL_GPIO_Init+0x34c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_GPIO_Init+0x21a>
 800372e:	2309      	movs	r3, #9
 8003730:	e012      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003732:	230a      	movs	r3, #10
 8003734:	e010      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003736:	2308      	movs	r3, #8
 8003738:	e00e      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800373a:	2307      	movs	r3, #7
 800373c:	e00c      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800373e:	2306      	movs	r3, #6
 8003740:	e00a      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003742:	2305      	movs	r3, #5
 8003744:	e008      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003746:	2304      	movs	r3, #4
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800374a:	2303      	movs	r3, #3
 800374c:	e004      	b.n	8003758 <HAL_GPIO_Init+0x240>
 800374e:	2302      	movs	r3, #2
 8003750:	e002      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_GPIO_Init+0x240>
 8003756:	2300      	movs	r3, #0
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	f002 0203 	and.w	r2, r2, #3
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	4093      	lsls	r3, r2
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003768:	4934      	ldr	r1, [pc, #208]	; (800383c <HAL_GPIO_Init+0x324>)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003776:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <HAL_GPIO_Init+0x350>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800379a:	4a33      	ldr	r2, [pc, #204]	; (8003868 <HAL_GPIO_Init+0x350>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037a0:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_GPIO_Init+0x350>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_GPIO_Init+0x350>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ca:	4b27      	ldr	r3, [pc, #156]	; (8003868 <HAL_GPIO_Init+0x350>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ee:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <HAL_GPIO_Init+0x350>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <HAL_GPIO_Init+0x350>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003818:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_GPIO_Init+0x350>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3301      	adds	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b0f      	cmp	r3, #15
 8003828:	f67f ae84 	bls.w	8003534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800382c:	bf00      	nop
 800382e:	3724      	adds	r7, #36	; 0x24
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40023800 	.word	0x40023800
 800383c:	40013800 	.word	0x40013800
 8003840:	40020000 	.word	0x40020000
 8003844:	40020400 	.word	0x40020400
 8003848:	40020800 	.word	0x40020800
 800384c:	40020c00 	.word	0x40020c00
 8003850:	40021000 	.word	0x40021000
 8003854:	40021400 	.word	0x40021400
 8003858:	40021800 	.word	0x40021800
 800385c:	40021c00 	.word	0x40021c00
 8003860:	40022000 	.word	0x40022000
 8003864:	40022400 	.word	0x40022400
 8003868:	40013c00 	.word	0x40013c00

0800386c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e0d9      	b.n	8003a3c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003888:	2201      	movs	r2, #1
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	f040 80c9 	bne.w	8003a36 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038a4:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <HAL_GPIO_DeInit+0x1e4>)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	220f      	movs	r2, #15
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a62      	ldr	r2, [pc, #392]	; (8003a54 <HAL_GPIO_DeInit+0x1e8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d037      	beq.n	800393e <HAL_GPIO_DeInit+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a61      	ldr	r2, [pc, #388]	; (8003a58 <HAL_GPIO_DeInit+0x1ec>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_GPIO_DeInit+0xce>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a60      	ldr	r2, [pc, #384]	; (8003a5c <HAL_GPIO_DeInit+0x1f0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <HAL_GPIO_DeInit+0xca>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a5f      	ldr	r2, [pc, #380]	; (8003a60 <HAL_GPIO_DeInit+0x1f4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d025      	beq.n	8003932 <HAL_GPIO_DeInit+0xc6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a5e      	ldr	r2, [pc, #376]	; (8003a64 <HAL_GPIO_DeInit+0x1f8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <HAL_GPIO_DeInit+0xc2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_GPIO_DeInit+0x1fc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_GPIO_DeInit+0xbe>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a5c      	ldr	r2, [pc, #368]	; (8003a6c <HAL_GPIO_DeInit+0x200>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_DeInit+0xba>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a5b      	ldr	r2, [pc, #364]	; (8003a70 <HAL_GPIO_DeInit+0x204>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_DeInit+0xb6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_GPIO_DeInit+0x208>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_DeInit+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a59      	ldr	r2, [pc, #356]	; (8003a78 <HAL_GPIO_DeInit+0x20c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_DeInit+0xae>
 8003916:	2309      	movs	r3, #9
 8003918:	e012      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 800391a:	230a      	movs	r3, #10
 800391c:	e010      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 800391e:	2308      	movs	r3, #8
 8003920:	e00e      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 8003922:	2307      	movs	r3, #7
 8003924:	e00c      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 8003926:	2306      	movs	r3, #6
 8003928:	e00a      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 800392a:	2305      	movs	r3, #5
 800392c:	e008      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 800392e:	2304      	movs	r3, #4
 8003930:	e006      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 8003932:	2303      	movs	r3, #3
 8003934:	e004      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 8003936:	2302      	movs	r3, #2
 8003938:	e002      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_GPIO_DeInit+0xd4>
 800393e:	2300      	movs	r3, #0
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	f002 0203 	and.w	r2, r2, #3
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	4093      	lsls	r3, r2
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	d132      	bne.n	80039b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	4948      	ldr	r1, [pc, #288]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 800395a:	4013      	ands	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	4945      	ldr	r1, [pc, #276]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 8003968:	4013      	ands	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800396c:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	4941      	ldr	r1, [pc, #260]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 8003976:	4013      	ands	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800397a:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	43db      	mvns	r3, r3
 8003982:	493e      	ldr	r1, [pc, #248]	; (8003a7c <HAL_GPIO_DeInit+0x210>)
 8003984:	4013      	ands	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	220f      	movs	r2, #15
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HAL_GPIO_DeInit+0x1e4>)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	4829      	ldr	r0, [pc, #164]	; (8003a50 <HAL_GPIO_DeInit+0x1e4>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	400a      	ands	r2, r1
 80039b0:	3302      	adds	r3, #2
 80039b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2103      	movs	r1, #3
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	08da      	lsrs	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3208      	adds	r2, #8
 80039d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	08d2      	lsrs	r2, r2, #3
 80039ec:	4019      	ands	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3208      	adds	r2, #8
 80039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2103      	movs	r1, #3
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	2101      	movs	r1, #1
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2103      	movs	r1, #3
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	401a      	ands	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	f67f af22 	bls.w	8003888 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40021400 	.word	0x40021400
 8003a6c:	40021800 	.word	0x40021800
 8003a70:	40021c00 	.word	0x40021c00
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40022400 	.word	0x40022400
 8003a7c:	40013c00 	.word	0x40013c00

08003a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a9c:	e003      	b.n	8003aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	041a      	lsls	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e11f      	b.n	8003d06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd f8cc 	bl	8000c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b18:	f002 f804 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4a7b      	ldr	r2, [pc, #492]	; (8003d10 <HAL_I2C_Init+0x25c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d807      	bhi.n	8003b38 <HAL_I2C_Init+0x84>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a7a      	ldr	r2, [pc, #488]	; (8003d14 <HAL_I2C_Init+0x260>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bf94      	ite	ls
 8003b30:	2301      	movls	r3, #1
 8003b32:	2300      	movhi	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e006      	b.n	8003b46 <HAL_I2C_Init+0x92>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <HAL_I2C_Init+0x264>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	bf94      	ite	ls
 8003b40:	2301      	movls	r3, #1
 8003b42:	2300      	movhi	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0db      	b.n	8003d06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a72      	ldr	r2, [pc, #456]	; (8003d1c <HAL_I2C_Init+0x268>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	0c9b      	lsrs	r3, r3, #18
 8003b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a64      	ldr	r2, [pc, #400]	; (8003d10 <HAL_I2C_Init+0x25c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d802      	bhi.n	8003b88 <HAL_I2C_Init+0xd4>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3301      	adds	r3, #1
 8003b86:	e009      	b.n	8003b9c <HAL_I2C_Init+0xe8>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	4a63      	ldr	r2, [pc, #396]	; (8003d20 <HAL_I2C_Init+0x26c>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4956      	ldr	r1, [pc, #344]	; (8003d10 <HAL_I2C_Init+0x25c>)
 8003bb8:	428b      	cmp	r3, r1
 8003bba:	d80d      	bhi.n	8003bd8 <HAL_I2C_Init+0x124>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1e59      	subs	r1, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	bf38      	it	cc
 8003bd4:	2304      	movcc	r3, #4
 8003bd6:	e04f      	b.n	8003c78 <HAL_I2C_Init+0x1c4>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d111      	bne.n	8003c04 <HAL_I2C_Init+0x150>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e012      	b.n	8003c2a <HAL_I2C_Init+0x176>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Init+0x17e>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e022      	b.n	8003c78 <HAL_I2C_Init+0x1c4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <HAL_I2C_Init+0x1a4>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1e58      	subs	r0, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	440b      	add	r3, r1
 8003c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	e00f      	b.n	8003c78 <HAL_I2C_Init+0x1c4>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	0099      	lsls	r1, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	6809      	ldr	r1, [r1, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6911      	ldr	r1, [r2, #16]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68d2      	ldr	r2, [r2, #12]
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	000186a0 	.word	0x000186a0
 8003d14:	001e847f 	.word	0x001e847f
 8003d18:	003d08ff 	.word	0x003d08ff
 8003d1c:	431bde83 	.word	0x431bde83
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e021      	b.n	8003d7a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	; 0x24
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc fffc 	bl	8000d4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	460b      	mov	r3, r1
 8003d98:	813b      	strh	r3, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d9e:	f7fe fe67 	bl	8002a70 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	f040 80d9 	bne.w	8003f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2319      	movs	r3, #25
 8003db8:	2201      	movs	r2, #1
 8003dba:	496d      	ldr	r1, [pc, #436]	; (8003f70 <HAL_I2C_Mem_Write+0x1ec>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fc89 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0cc      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Mem_Write+0x56>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0c5      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2221      	movs	r2, #33	; 0x21
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a4d      	ldr	r2, [pc, #308]	; (8003f74 <HAL_I2C_Mem_Write+0x1f0>)
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e42:	88f8      	ldrh	r0, [r7, #6]
 8003e44:	893a      	ldrh	r2, [r7, #8]
 8003e46:	8979      	ldrh	r1, [r7, #10]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fac4 	bl	80043e0 <I2C_RequestMemoryWrite>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d052      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e081      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fd0a 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d107      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06b      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_I2C_Mem_Write+0x180>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d017      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1aa      	bne.n	8003e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fcf6 	bl	8004902 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e016      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	00100002 	.word	0x00100002
 8003f74:	ffff0000 	.word	0xffff0000

08003f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	4608      	mov	r0, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	817b      	strh	r3, [r7, #10]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	813b      	strh	r3, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f92:	f7fe fd6d 	bl	8002a70 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	f040 8208 	bne.w	80043b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2319      	movs	r3, #25
 8003fac:	2201      	movs	r2, #1
 8003fae:	497b      	ldr	r1, [pc, #492]	; (800419c <HAL_I2C_Mem_Read+0x224>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fb8f 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e1fb      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_I2C_Mem_Read+0x56>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e1f4      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d007      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2222      	movs	r2, #34	; 0x22
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2240      	movs	r2, #64	; 0x40
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a5b      	ldr	r2, [pc, #364]	; (80041a0 <HAL_I2C_Mem_Read+0x228>)
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004036:	88f8      	ldrh	r0, [r7, #6]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4603      	mov	r3, r0
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fa5e 	bl	8004508 <I2C_RequestMemoryRead>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1b0      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d113      	bne.n	8004086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e184      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11b      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e164      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d11b      	bne.n	8004106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	e144      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800411c:	e138      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	2b03      	cmp	r3, #3
 8004124:	f200 80f1 	bhi.w	800430a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b01      	cmp	r3, #1
 800412e:	d123      	bne.n	8004178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fc25 	bl	8004984 <I2C_WaitOnRXNEFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e139      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004176:	e10b      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	2b02      	cmp	r3, #2
 800417e:	d14e      	bne.n	800421e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	2200      	movs	r2, #0
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <HAL_I2C_Mem_Read+0x22c>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 faa2 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e10e      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
 800419a:	bf00      	nop
 800419c:	00100002 	.word	0x00100002
 80041a0:	ffff0000 	.word	0xffff0000
 80041a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800421c:	e0b8      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2200      	movs	r2, #0
 8004226:	4966      	ldr	r1, [pc, #408]	; (80043c0 <HAL_I2C_Mem_Read+0x448>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fa53 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0bf      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	2200      	movs	r2, #0
 8004282:	494f      	ldr	r1, [pc, #316]	; (80043c0 <HAL_I2C_Mem_Read+0x448>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa25 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e091      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004308:	e042      	b.n	8004390 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fb38 	bl	8004984 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e04c      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d118      	bne.n	8004390 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	f47f aec2 	bne.w	800411e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e000      	b.n	80043b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
  }
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	; 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	00010004 	.word	0x00010004

080043c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d2:	b2db      	uxtb	r3, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2200      	movs	r2, #0
 8004412:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f95c 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05f      	b.n	80044fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800443c:	897b      	ldrh	r3, [r7, #10]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800444a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	492c      	ldr	r1, [pc, #176]	; (8004504 <I2C_RequestMemoryWrite+0x124>)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f995 	bl	8004782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e04c      	b.n	80044fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447a:	6a39      	ldr	r1, [r7, #32]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f9ff 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2b04      	cmp	r3, #4
 800448e:	d107      	bne.n	80044a0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02b      	b.n	80044fc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044aa:	893b      	ldrh	r3, [r7, #8]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	e021      	b.n	80044fa <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	6a39      	ldr	r1, [r7, #32]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f9d9 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d107      	bne.n	80044ec <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e005      	b.n	80044fc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	00010002 	.word	0x00010002

08004508 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	817b      	strh	r3, [r7, #10]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f8c0 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0a9      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004582:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	6a3a      	ldr	r2, [r7, #32]
 8004588:	4951      	ldr	r1, [pc, #324]	; (80046d0 <I2C_RequestMemoryRead+0x1c8>)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f8f9 	bl	8004782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e096      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b2:	6a39      	ldr	r1, [r7, #32]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f963 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d107      	bne.n	80045d8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e075      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d105      	bne.n	80045ee <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e2:	893b      	ldrh	r3, [r7, #8]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]
 80045ec:	e021      	b.n	8004632 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	6a39      	ldr	r1, [r7, #32]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f93d 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	2b04      	cmp	r3, #4
 8004612:	d107      	bne.n	8004624 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004622:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e04f      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004628:	893b      	ldrh	r3, [r7, #8]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	6a39      	ldr	r1, [r7, #32]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f922 	bl	8004880 <I2C_WaitOnTXEFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	2b04      	cmp	r3, #4
 8004648:	d107      	bne.n	800465a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e034      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2200      	movs	r2, #0
 8004676:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f82a 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00c      	beq.n	80046a0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e013      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046a0:	897b      	ldrh	r3, [r7, #10]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	6a3a      	ldr	r2, [r7, #32]
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <I2C_RequestMemoryRead+0x1c8>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f863 	bl	8004782 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	00010002 	.word	0x00010002

080046d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e4:	e025      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d021      	beq.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fe f9bf 	bl	8002a70 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d116      	bne.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e023      	b.n	800477a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10d      	bne.n	8004758 <I2C_WaitOnFlagUntilTimeout+0x84>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	e00c      	b.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	429a      	cmp	r2, r3
 8004776:	d0b6      	beq.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004790:	e051      	b.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a0:	d123      	bne.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0204 	orr.w	r2, r3, #4
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e046      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d021      	beq.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fe f93d 	bl	8002a70 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d116      	bne.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e020      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10c      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	e00b      	b.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	43da      	mvns	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d18d      	bne.n	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800488c:	e02d      	b.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f8ce 	bl	8004a30 <I2C_IsAcknowledgeFailed>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e02d      	b.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d021      	beq.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a6:	f7fe f8e3 	bl	8002a70 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d116      	bne.n	80048ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e007      	b.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d1ca      	bne.n	800488e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800490e:	e02d      	b.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f88d 	bl	8004a30 <I2C_IsAcknowledgeFailed>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e02d      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d021      	beq.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004928:	f7fe f8a2 	bl	8002a70 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	429a      	cmp	r2, r3
 8004936:	d302      	bcc.n	800493e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e007      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d1ca      	bne.n	8004910 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004990:	e042      	b.n	8004a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d119      	bne.n	80049d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e029      	b.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fe f84c 	bl	8002a70 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e007      	b.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d1b5      	bne.n	8004992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a46:	d11b      	bne.n	8004a80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d129      	bne.n	8004af8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2224      	movs	r2, #36	; 0x24
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0210 	bic.w	r2, r2, #16
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d12a      	bne.n	8004b76 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	f023 030f 	bic.w	r3, r3, #15
 8004b46:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	89fb      	ldrh	r3, [r7, #14]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	89fa      	ldrh	r2, [r7, #14]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0bf      	b.n	8004d16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc f974 	bl	8000e98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004bc6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004bdc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_LTDC_Init+0x19c>)
 8004bf8:	400b      	ands	r3, r1
 8004bfa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68d9      	ldr	r1, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <HAL_LTDC_Init+0x19c>)
 8004c26:	400b      	ands	r3, r1
 8004c28:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b33      	ldr	r3, [pc, #204]	; (8004d20 <HAL_LTDC_Init+0x19c>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6919      	ldr	r1, [r3, #16]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6959      	ldr	r1, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_LTDC_Init+0x19c>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6959      	ldr	r1, [r3, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0206 	orr.w	r2, r2, #6
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	f000f800 	.word	0xf000f800

08004d24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d023      	beq.n	8004d8e <HAL_LTDC_IRQHandler+0x6a>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01e      	beq.n	8004d8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2204      	movs	r2, #4
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f86f 	bl	8004e6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d023      	beq.n	8004de0 <HAL_LTDC_IRQHandler+0xbc>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01e      	beq.n	8004de0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0202 	bic.w	r2, r2, #2
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2202      	movs	r2, #2
 8004db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004dc0:	f043 0202 	orr.w	r2, r3, #2
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f846 	bl	8004e6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01b      	beq.n	8004e22 <HAL_LTDC_IRQHandler+0xfe>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d016      	beq.n	8004e22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f009 fbef 	bl	800e600 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01b      	beq.n	8004e64 <HAL_LTDC_IRQHandler+0x140>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0208 	bic.w	r2, r2, #8
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f80e 	bl	8004e80 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e94:	b5b0      	push	{r4, r5, r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_LTDC_ConfigLayer+0x1a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e02c      	b.n	8004f08 <HAL_LTDC_ConfigLayer+0x74>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2134      	movs	r1, #52	; 0x34
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f849 	bl	8004f80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bdb0      	pop	{r4, r5, r7, pc}

08004f10 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_LTDC_ProgramLineEvent+0x18>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e023      	b.n	8004f70 <HAL_LTDC_ProgramLineEvent+0x60>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004f48:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40016800 	.word	0x40016800

08004f80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9c:	4413      	add	r3, r2
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	01db      	lsls	r3, r3, #7
 8004fac:	4413      	add	r3, r2
 8004fae:	3384      	adds	r3, #132	; 0x84
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	01d2      	lsls	r2, r2, #7
 8004fbc:	440a      	add	r2, r1
 8004fbe:	3284      	adds	r2, #132	; 0x84
 8004fc0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fc4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd6:	4413      	add	r3, r2
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	01db      	lsls	r3, r3, #7
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3384      	adds	r3, #132	; 0x84
 8004fe8:	4619      	mov	r1, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ffe:	4413      	add	r3, r2
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	01db      	lsls	r3, r3, #7
 800500e:	4413      	add	r3, r2
 8005010:	3384      	adds	r3, #132	; 0x84
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	4611      	mov	r1, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	01d2      	lsls	r2, r2, #7
 800501e:	440a      	add	r2, r1
 8005020:	3284      	adds	r2, #132	; 0x84
 8005022:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005026:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005036:	4413      	add	r3, r2
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4619      	mov	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	01db      	lsls	r3, r3, #7
 8005044:	440b      	add	r3, r1
 8005046:	3384      	adds	r3, #132	; 0x84
 8005048:	4619      	mov	r1, r3
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	01db      	lsls	r3, r3, #7
 800505a:	4413      	add	r3, r2
 800505c:	3384      	adds	r3, #132	; 0x84
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	4611      	mov	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	01d2      	lsls	r2, r2, #7
 800506a:	440a      	add	r2, r1
 800506c:	3284      	adds	r2, #132	; 0x84
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	01db      	lsls	r3, r3, #7
 800507e:	4413      	add	r3, r2
 8005080:	3384      	adds	r3, #132	; 0x84
 8005082:	461a      	mov	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	01db      	lsls	r3, r3, #7
 80050b0:	4413      	add	r3, r2
 80050b2:	3384      	adds	r3, #132	; 0x84
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	01db      	lsls	r3, r3, #7
 80050c0:	4413      	add	r3, r2
 80050c2:	3384      	adds	r3, #132	; 0x84
 80050c4:	461a      	mov	r2, r3
 80050c6:	2300      	movs	r3, #0
 80050c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050d0:	461a      	mov	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4619      	mov	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	01db      	lsls	r3, r3, #7
 80050e4:	440b      	add	r3, r1
 80050e6:	3384      	adds	r3, #132	; 0x84
 80050e8:	4619      	mov	r1, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	01db      	lsls	r3, r3, #7
 80050fa:	4413      	add	r3, r2
 80050fc:	3384      	adds	r3, #132	; 0x84
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	4611      	mov	r1, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	01d2      	lsls	r2, r2, #7
 800510a:	440a      	add	r2, r1
 800510c:	3284      	adds	r2, #132	; 0x84
 800510e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005112:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	01db      	lsls	r3, r3, #7
 800511e:	4413      	add	r3, r2
 8005120:	3384      	adds	r3, #132	; 0x84
 8005122:	461a      	mov	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	01db      	lsls	r3, r3, #7
 8005134:	4413      	add	r3, r2
 8005136:	3384      	adds	r3, #132	; 0x84
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4611      	mov	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	01d2      	lsls	r2, r2, #7
 8005144:	440a      	add	r2, r1
 8005146:	3284      	adds	r2, #132	; 0x84
 8005148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	6809      	ldr	r1, [r1, #0]
 800515e:	4608      	mov	r0, r1
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	01c9      	lsls	r1, r1, #7
 8005164:	4401      	add	r1, r0
 8005166:	3184      	adds	r1, #132	; 0x84
 8005168:	4313      	orrs	r3, r2
 800516a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	01db      	lsls	r3, r3, #7
 8005176:	4413      	add	r3, r2
 8005178:	3384      	adds	r3, #132	; 0x84
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	01db      	lsls	r3, r3, #7
 8005186:	4413      	add	r3, r2
 8005188:	3384      	adds	r3, #132	; 0x84
 800518a:	461a      	mov	r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	01db      	lsls	r3, r3, #7
 800519a:	4413      	add	r3, r2
 800519c:	3384      	adds	r3, #132	; 0x84
 800519e:	461a      	mov	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80051ae:	2304      	movs	r3, #4
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e01b      	b.n	80051ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d102      	bne.n	80051c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80051bc:	2303      	movs	r3, #3
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	e014      	b.n	80051ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00b      	beq.n	80051e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d007      	beq.n	80051e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d003      	beq.n	80051e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80051de:	2b07      	cmp	r3, #7
 80051e0:	d102      	bne.n	80051e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80051e2:	2302      	movs	r3, #2
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	e001      	b.n	80051ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80051e8:	2301      	movs	r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	01db      	lsls	r3, r3, #7
 80051f6:	4413      	add	r3, r2
 80051f8:	3384      	adds	r3, #132	; 0x84
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	4611      	mov	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	01d2      	lsls	r2, r2, #7
 8005206:	440a      	add	r2, r1
 8005208:	3284      	adds	r2, #132	; 0x84
 800520a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800520e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	041a      	lsls	r2, r3, #16
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1acb      	subs	r3, r1, r3
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	3303      	adds	r3, #3
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6809      	ldr	r1, [r1, #0]
 8005232:	4608      	mov	r0, r1
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	01c9      	lsls	r1, r1, #7
 8005238:	4401      	add	r1, r0
 800523a:	3184      	adds	r1, #132	; 0x84
 800523c:	4313      	orrs	r3, r2
 800523e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	01db      	lsls	r3, r3, #7
 800524a:	4413      	add	r3, r2
 800524c:	3384      	adds	r3, #132	; 0x84
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	4611      	mov	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	01d2      	lsls	r2, r2, #7
 800525a:	440a      	add	r2, r1
 800525c:	3284      	adds	r2, #132	; 0x84
 800525e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005262:	f023 0307 	bic.w	r3, r3, #7
 8005266:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	01db      	lsls	r3, r3, #7
 8005272:	4413      	add	r3, r2
 8005274:	3384      	adds	r3, #132	; 0x84
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	4413      	add	r3, r2
 800528a:	3384      	adds	r3, #132	; 0x84
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	4611      	mov	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	01d2      	lsls	r2, r2, #7
 8005298:	440a      	add	r2, r1
 800529a:	3284      	adds	r2, #132	; 0x84
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]
}
 80052a2:	bf00      	nop
 80052a4:	3724      	adds	r7, #36	; 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e25b      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d075      	beq.n	80053ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ce:	4ba3      	ldr	r3, [pc, #652]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d00c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052da:	4ba0      	ldr	r3, [pc, #640]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d112      	bne.n	800530c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e6:	4b9d      	ldr	r3, [pc, #628]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f2:	d10b      	bne.n	800530c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	4b99      	ldr	r3, [pc, #612]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d05b      	beq.n	80053b8 <HAL_RCC_OscConfig+0x108>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d157      	bne.n	80053b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e236      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d106      	bne.n	8005324 <HAL_RCC_OscConfig+0x74>
 8005316:	4b91      	ldr	r3, [pc, #580]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a90      	ldr	r2, [pc, #576]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e01d      	b.n	8005360 <HAL_RCC_OscConfig+0xb0>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x98>
 800532e:	4b8b      	ldr	r3, [pc, #556]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a8a      	ldr	r2, [pc, #552]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a87      	ldr	r2, [pc, #540]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0xb0>
 8005348:	4b84      	ldr	r3, [pc, #528]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a83      	ldr	r2, [pc, #524]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800534e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a80      	ldr	r2, [pc, #512]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800535a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800535e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fd fb82 	bl	8002a70 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005370:	f7fd fb7e 	bl	8002a70 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e1fb      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005382:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0xc0>
 800538e:	e014      	b.n	80053ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fd fb6e 	bl	8002a70 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005398:	f7fd fb6a 	bl	8002a70 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e1e7      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053aa:	4b6c      	ldr	r3, [pc, #432]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0xe8>
 80053b6:	e000      	b.n	80053ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d063      	beq.n	800548e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053c6:	4b65      	ldr	r3, [pc, #404]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d2:	4b62      	ldr	r3, [pc, #392]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d11c      	bne.n	8005418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053de:	4b5f      	ldr	r3, [pc, #380]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d116      	bne.n	8005418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ea:	4b5c      	ldr	r3, [pc, #368]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_RCC_OscConfig+0x152>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e1bb      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005402:	4b56      	ldr	r3, [pc, #344]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4952      	ldr	r1, [pc, #328]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005416:	e03a      	b.n	800548e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005420:	4b4f      	ldr	r3, [pc, #316]	; (8005560 <HAL_RCC_OscConfig+0x2b0>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fd fb23 	bl	8002a70 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800542e:	f7fd fb1f 	bl	8002a70 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e19c      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005440:	4b46      	ldr	r3, [pc, #280]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544c:	4b43      	ldr	r3, [pc, #268]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4940      	ldr	r1, [pc, #256]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
 8005460:	e015      	b.n	800548e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005462:	4b3f      	ldr	r3, [pc, #252]	; (8005560 <HAL_RCC_OscConfig+0x2b0>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fb02 	bl	8002a70 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005470:	f7fd fafe 	bl	8002a70 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e17b      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005482:	4b36      	ldr	r3, [pc, #216]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d030      	beq.n	80054fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d016      	beq.n	80054d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a2:	4b30      	ldr	r3, [pc, #192]	; (8005564 <HAL_RCC_OscConfig+0x2b4>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fd fae2 	bl	8002a70 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fd fade 	bl	8002a70 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e15b      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c2:	4b26      	ldr	r3, [pc, #152]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x200>
 80054ce:	e015      	b.n	80054fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d0:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCC_OscConfig+0x2b4>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d6:	f7fd facb 	bl	8002a70 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054de:	f7fd fac7 	bl	8002a70 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e144      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f0:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a0 	beq.w	800564a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	4a0e      	ldr	r2, [pc, #56]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 8005524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005528:	6413      	str	r3, [r2, #64]	; 0x40
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_RCC_OscConfig+0x2ac>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_OscConfig+0x2b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d121      	bne.n	800558a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <HAL_RCC_OscConfig+0x2b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <HAL_RCC_OscConfig+0x2b8>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005552:	f7fd fa8d 	bl	8002a70 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	e011      	b.n	800557e <HAL_RCC_OscConfig+0x2ce>
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
 8005560:	42470000 	.word	0x42470000
 8005564:	42470e80 	.word	0x42470e80
 8005568:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556c:	f7fd fa80 	bl	8002a70 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e0fd      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557e:	4b81      	ldr	r3, [pc, #516]	; (8005784 <HAL_RCC_OscConfig+0x4d4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d106      	bne.n	80055a0 <HAL_RCC_OscConfig+0x2f0>
 8005592:	4b7d      	ldr	r3, [pc, #500]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	4a7c      	ldr	r2, [pc, #496]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6713      	str	r3, [r2, #112]	; 0x70
 800559e:	e01c      	b.n	80055da <HAL_RCC_OscConfig+0x32a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b05      	cmp	r3, #5
 80055a6:	d10c      	bne.n	80055c2 <HAL_RCC_OscConfig+0x312>
 80055a8:	4b77      	ldr	r3, [pc, #476]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	4a76      	ldr	r2, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055ae:	f043 0304 	orr.w	r3, r3, #4
 80055b2:	6713      	str	r3, [r2, #112]	; 0x70
 80055b4:	4b74      	ldr	r3, [pc, #464]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	4a73      	ldr	r2, [pc, #460]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	6713      	str	r3, [r2, #112]	; 0x70
 80055c0:	e00b      	b.n	80055da <HAL_RCC_OscConfig+0x32a>
 80055c2:	4b71      	ldr	r3, [pc, #452]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a70      	ldr	r2, [pc, #448]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	6713      	str	r3, [r2, #112]	; 0x70
 80055ce:	4b6e      	ldr	r3, [pc, #440]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4a6d      	ldr	r2, [pc, #436]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80055d4:	f023 0304 	bic.w	r3, r3, #4
 80055d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d015      	beq.n	800560e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e2:	f7fd fa45 	bl	8002a70 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fd fa41 	bl	8002a70 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0bc      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005600:	4b61      	ldr	r3, [pc, #388]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ee      	beq.n	80055ea <HAL_RCC_OscConfig+0x33a>
 800560c:	e014      	b.n	8005638 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560e:	f7fd fa2f 	bl	8002a70 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005614:	e00a      	b.n	800562c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005616:	f7fd fa2b 	bl	8002a70 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f241 3288 	movw	r2, #5000	; 0x1388
 8005624:	4293      	cmp	r3, r2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e0a6      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562c:	4b56      	ldr	r3, [pc, #344]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ee      	bne.n	8005616 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005638:	7dfb      	ldrb	r3, [r7, #23]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d105      	bne.n	800564a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563e:	4b52      	ldr	r3, [pc, #328]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	4a51      	ldr	r2, [pc, #324]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8092 	beq.w	8005778 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005654:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b08      	cmp	r3, #8
 800565e:	d05c      	beq.n	800571a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d141      	bne.n	80056ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005668:	4b48      	ldr	r3, [pc, #288]	; (800578c <HAL_RCC_OscConfig+0x4dc>)
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566e:	f7fd f9ff 	bl	8002a70 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005676:	f7fd f9fb 	bl	8002a70 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e078      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005688:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1f0      	bne.n	8005676 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	019b      	lsls	r3, r3, #6
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	3b01      	subs	r3, #1
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	061b      	lsls	r3, r3, #24
 80056b8:	4933      	ldr	r1, [pc, #204]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056be:	4b33      	ldr	r3, [pc, #204]	; (800578c <HAL_RCC_OscConfig+0x4dc>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fd f9d4 	bl	8002a70 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fd f9d0 	bl	8002a70 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e04d      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056de:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x41c>
 80056ea:	e045      	b.n	8005778 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ec:	4b27      	ldr	r3, [pc, #156]	; (800578c <HAL_RCC_OscConfig+0x4dc>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f2:	f7fd f9bd 	bl	8002a70 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056fa:	f7fd f9b9 	bl	8002a70 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e036      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570c:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x44a>
 8005718:	e02e      	b.n	8005778 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e029      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <HAL_RCC_OscConfig+0x4d8>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	429a      	cmp	r2, r3
 8005738:	d11c      	bne.n	8005774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d115      	bne.n	8005774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005754:	4293      	cmp	r3, r2
 8005756:	d10d      	bne.n	8005774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40007000 	.word	0x40007000
 8005788:	40023800 	.word	0x40023800
 800578c:	42470060 	.word	0x42470060

08005790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0cc      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057a4:	4b68      	ldr	r3, [pc, #416]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d90c      	bls.n	80057cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b2:	4b65      	ldr	r3, [pc, #404]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b63      	ldr	r3, [pc, #396]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0b8      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d020      	beq.n	800581a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057e4:	4b59      	ldr	r3, [pc, #356]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a58      	ldr	r2, [pc, #352]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057fc:	4b53      	ldr	r3, [pc, #332]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4a52      	ldr	r2, [pc, #328]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005808:	4b50      	ldr	r3, [pc, #320]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	494d      	ldr	r1, [pc, #308]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d044      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582e:	4b47      	ldr	r3, [pc, #284]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d119      	bne.n	800586e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e07f      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d003      	beq.n	800584e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800584a:	2b03      	cmp	r3, #3
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584e:	4b3f      	ldr	r3, [pc, #252]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e06f      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585e:	4b3b      	ldr	r3, [pc, #236]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e067      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800586e:	4b37      	ldr	r3, [pc, #220]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f023 0203 	bic.w	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4934      	ldr	r1, [pc, #208]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	4313      	orrs	r3, r2
 800587e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005880:	f7fd f8f6 	bl	8002a70 <HAL_GetTick>
 8005884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005886:	e00a      	b.n	800589e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005888:	f7fd f8f2 	bl	8002a70 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	f241 3288 	movw	r2, #5000	; 0x1388
 8005896:	4293      	cmp	r3, r2
 8005898:	d901      	bls.n	800589e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e04f      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589e:	4b2b      	ldr	r3, [pc, #172]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 020c 	and.w	r2, r3, #12
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d1eb      	bne.n	8005888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d20c      	bcs.n	80058d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058be:	4b22      	ldr	r3, [pc, #136]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c6:	4b20      	ldr	r3, [pc, #128]	; (8005948 <HAL_RCC_ClockConfig+0x1b8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d001      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e032      	b.n	800593e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058e4:	4b19      	ldr	r3, [pc, #100]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4916      	ldr	r1, [pc, #88]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	490e      	ldr	r1, [pc, #56]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005916:	f000 f821 	bl	800595c <HAL_RCC_GetSysClockFreq>
 800591a:	4601      	mov	r1, r0
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <HAL_RCC_ClockConfig+0x1c0>)
 8005928:	5cd3      	ldrb	r3, [r2, r3]
 800592a:	fa21 f303 	lsr.w	r3, r1, r3
 800592e:	4a09      	ldr	r2, [pc, #36]	; (8005954 <HAL_RCC_ClockConfig+0x1c4>)
 8005930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_RCC_ClockConfig+0x1c8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7fb fd58 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40023c00 	.word	0x40023c00
 800594c:	40023800 	.word	0x40023800
 8005950:	0801fae0 	.word	0x0801fae0
 8005954:	20000004 	.word	0x20000004
 8005958:	20000070 	.word	0x20000070

0800595c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	2300      	movs	r3, #0
 800596c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b04      	cmp	r3, #4
 800597c:	d007      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x32>
 800597e:	2b08      	cmp	r3, #8
 8005980:	d008      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0x38>
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 80b4 	bne.w	8005af0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b5e      	ldr	r3, [pc, #376]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800598a:	60bb      	str	r3, [r7, #8]
       break;
 800598c:	e0b3      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800598e:	4b5e      	ldr	r3, [pc, #376]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005990:	60bb      	str	r3, [r7, #8]
      break;
 8005992:	e0b0      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005994:	4b5a      	ldr	r3, [pc, #360]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599e:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04a      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059aa:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	099b      	lsrs	r3, r3, #6
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	ea03 0501 	and.w	r5, r3, r1
 80059c0:	ea04 0602 	and.w	r6, r4, r2
 80059c4:	4629      	mov	r1, r5
 80059c6:	4632      	mov	r2, r6
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	f04f 0400 	mov.w	r4, #0
 80059d0:	0154      	lsls	r4, r2, #5
 80059d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059d6:	014b      	lsls	r3, r1, #5
 80059d8:	4619      	mov	r1, r3
 80059da:	4622      	mov	r2, r4
 80059dc:	1b49      	subs	r1, r1, r5
 80059de:	eb62 0206 	sbc.w	r2, r2, r6
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	0194      	lsls	r4, r2, #6
 80059ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059f0:	018b      	lsls	r3, r1, #6
 80059f2:	1a5b      	subs	r3, r3, r1
 80059f4:	eb64 0402 	sbc.w	r4, r4, r2
 80059f8:	f04f 0100 	mov.w	r1, #0
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	00e2      	lsls	r2, r4, #3
 8005a02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a06:	00d9      	lsls	r1, r3, #3
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	195b      	adds	r3, r3, r5
 8005a0e:	eb44 0406 	adc.w	r4, r4, r6
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	0262      	lsls	r2, r4, #9
 8005a1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a20:	0259      	lsls	r1, r3, #9
 8005a22:	460b      	mov	r3, r1
 8005a24:	4614      	mov	r4, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	4621      	mov	r1, r4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f04f 0400 	mov.w	r4, #0
 8005a30:	461a      	mov	r2, r3
 8005a32:	4623      	mov	r3, r4
 8005a34:	f7fa fc2c 	bl	8000290 <__aeabi_uldivmod>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e049      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	f04f 0400 	mov.w	r4, #0
 8005a4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	ea03 0501 	and.w	r5, r3, r1
 8005a56:	ea04 0602 	and.w	r6, r4, r2
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	f04f 0400 	mov.w	r4, #0
 8005a66:	0154      	lsls	r4, r2, #5
 8005a68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a6c:	014b      	lsls	r3, r1, #5
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4622      	mov	r2, r4
 8005a72:	1b49      	subs	r1, r1, r5
 8005a74:	eb62 0206 	sbc.w	r2, r2, r6
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	0194      	lsls	r4, r2, #6
 8005a82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a86:	018b      	lsls	r3, r1, #6
 8005a88:	1a5b      	subs	r3, r3, r1
 8005a8a:	eb64 0402 	sbc.w	r4, r4, r2
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	00e2      	lsls	r2, r4, #3
 8005a98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a9c:	00d9      	lsls	r1, r3, #3
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	195b      	adds	r3, r3, r5
 8005aa4:	eb44 0406 	adc.w	r4, r4, r6
 8005aa8:	f04f 0100 	mov.w	r1, #0
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	02a2      	lsls	r2, r4, #10
 8005ab2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ab6:	0299      	lsls	r1, r3, #10
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4614      	mov	r4, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	4621      	mov	r1, r4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f04f 0400 	mov.w	r4, #0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4623      	mov	r3, r4
 8005aca:	f7fa fbe1 	bl	8000290 <__aeabi_uldivmod>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	60bb      	str	r3, [r7, #8]
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005af2:	60bb      	str	r3, [r7, #8]
      break;
 8005af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005af6:	68bb      	ldr	r3, [r7, #8]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b00:	40023800 	.word	0x40023800
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	007a1200 	.word	0x007a1200

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000004 	.word	0x20000004

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b28:	f7ff fff0 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0a9b      	lsrs	r3, r3, #10
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3a:	5cd3      	ldrb	r3, [r2, r3]
 8005b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	0801faf0 	.word	0x0801faf0

08005b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b50:	f7ff ffdc 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b54:	4601      	mov	r1, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0b5b      	lsrs	r3, r3, #13
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4a03      	ldr	r2, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	0801faf0 	.word	0x0801faf0

08005b74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	220f      	movs	r2, #15
 8005b82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b84:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0203 	and.w	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ba8:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bb6:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <HAL_RCC_GetClockConfig+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40023c00 	.word	0x40023c00

08005bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d075      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c0c:	4bad      	ldr	r3, [pc, #692]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c12:	f7fc ff2d 	bl	8002a70 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c18:	e008      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c1a:	f7fc ff29 	bl	8002a70 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e18b      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c2c:	4ba6      	ldr	r3, [pc, #664]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f0      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	019a      	lsls	r2, r3, #6
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	071b      	lsls	r3, r3, #28
 8005c50:	499d      	ldr	r1, [pc, #628]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01f      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c64:	4b98      	ldr	r3, [pc, #608]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6a:	0f1b      	lsrs	r3, r3, #28
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	019a      	lsls	r2, r3, #6
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	061b      	lsls	r3, r3, #24
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	071b      	lsls	r3, r3, #28
 8005c84:	4990      	ldr	r1, [pc, #576]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c8c:	4b8e      	ldr	r3, [pc, #568]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c92:	f023 021f 	bic.w	r2, r3, #31
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	498a      	ldr	r1, [pc, #552]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	019a      	lsls	r2, r3, #6
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	071b      	lsls	r3, r3, #28
 8005cc4:	4980      	ldr	r1, [pc, #512]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ccc:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fecd 	bl	8002a70 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fc fec9 	bl	8002a70 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e12b      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cec:	4b76      	ldr	r3, [pc, #472]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d079      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d10:	4b6e      	ldr	r3, [pc, #440]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d16:	f7fc feab 	bl	8002a70 <HAL_GetTick>
 8005d1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d1e:	f7fc fea7 	bl	8002a70 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e109      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d30:	4b65      	ldr	r3, [pc, #404]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3c:	d0ef      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d020      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d4a:	4b5f      	ldr	r3, [pc, #380]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	0f1b      	lsrs	r3, r3, #28
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	019a      	lsls	r2, r3, #6
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	431a      	orrs	r2, r3
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	071b      	lsls	r3, r3, #28
 8005d6a:	4957      	ldr	r1, [pc, #348]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d72:	4b55      	ldr	r3, [pc, #340]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4950      	ldr	r1, [pc, #320]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01e      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d98:	4b4b      	ldr	r3, [pc, #300]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	0e1b      	lsrs	r3, r3, #24
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	019a      	lsls	r2, r3, #6
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	061b      	lsls	r3, r3, #24
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	071b      	lsls	r3, r3, #28
 8005db8:	4943      	ldr	r1, [pc, #268]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005dc0:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	493e      	ldr	r1, [pc, #248]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ddc:	f7fc fe48 	bl	8002a70 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005de4:	f7fc fe44 	bl	8002a70 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e0a6      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e02:	d1ef      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 808d 	beq.w	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	4b2c      	ldr	r3, [pc, #176]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e20:	6413      	str	r3, [r2, #64]	; 0x40
 8005e22:	4b29      	ldr	r3, [pc, #164]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e2e:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e3a:	f7fc fe19 	bl	8002a70 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e40:	e008      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fc fe15 	bl	8002a70 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e077      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e54:	4b1e      	ldr	r3, [pc, #120]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d039      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d032      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e7e:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e94:	4a0c      	ldr	r2, [pc, #48]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11e      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ea6:	f7fc fde3 	bl	8002a70 <HAL_GetTick>
 8005eaa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eac:	e014      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7fc fddf 	bl	8002a70 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d90b      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e03f      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005ec4:	42470068 	.word	0x42470068
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	42470070 	.word	0x42470070
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0e4      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef0:	d10d      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005ef2:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	4911      	ldr	r1, [pc, #68]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	608b      	str	r3, [r1, #8]
 8005f0c:	e005      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4a0e      	ldr	r2, [pc, #56]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f18:	6093      	str	r3, [r2, #8]
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f26:	4909      	ldr	r1, [pc, #36]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	424711e0 	.word	0x424711e0

08005f54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e025      	b.n	8005fb4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fa fc93 	bl	80008a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f001 fe47 	bl	8007c28 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	f001 feb2 	bl	8007d0e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e056      	b.n	800607c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fb f96d 	bl	80012c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	ea42 0103 	orr.w	r1, r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	f003 0104 	and.w	r1, r3, #4
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e01a      	b.n	80060cc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fb f952 	bl	8001358 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_SPI_Transmit+0x22>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e11e      	b.n	8006334 <HAL_SPI_Transmit+0x260>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060fe:	f7fc fcb7 	bl	8002a70 <HAL_GetTick>
 8006102:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006114:	2302      	movs	r3, #2
 8006116:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006118:	e103      	b.n	8006322 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SPI_Transmit+0x52>
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	77fb      	strb	r3, [r7, #31]
    goto error;
 800612a:	e0fa      	b.n	8006322 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2203      	movs	r2, #3
 8006130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	88fa      	ldrh	r2, [r7, #6]
 800614a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006172:	d107      	bne.n	8006184 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006182:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d007      	beq.n	80061a2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061aa:	d14b      	bne.n	8006244 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_SPI_Transmit+0xe6>
 80061b4:	8afb      	ldrh	r3, [r7, #22]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d13e      	bne.n	8006238 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	881a      	ldrh	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ca:	1c9a      	adds	r2, r3, #2
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061de:	e02b      	b.n	8006238 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d112      	bne.n	8006214 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	1c9a      	adds	r2, r3, #2
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	86da      	strh	r2, [r3, #54]	; 0x36
 8006212:	e011      	b.n	8006238 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006214:	f7fc fc2c 	bl	8002a70 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d803      	bhi.n	800622c <HAL_SPI_Transmit+0x158>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d102      	bne.n	8006232 <HAL_SPI_Transmit+0x15e>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006236:	e074      	b.n	8006322 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1ce      	bne.n	80061e0 <HAL_SPI_Transmit+0x10c>
 8006242:	e04c      	b.n	80062de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x17e>
 800624c:	8afb      	ldrh	r3, [r7, #22]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d140      	bne.n	80062d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006278:	e02c      	b.n	80062d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d113      	bne.n	80062b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80062ae:	e011      	b.n	80062d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b0:	f7fc fbde 	bl	8002a70 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d803      	bhi.n	80062c8 <HAL_SPI_Transmit+0x1f4>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d102      	bne.n	80062ce <HAL_SPI_Transmit+0x1fa>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062d2:	e026      	b.n	8006322 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1cd      	bne.n	800627a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fbb2 	bl	8006a4c <SPI_EndRxTxTransaction>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2220      	movs	r2, #32
 80062f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e000      	b.n	8006322 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006320:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006332:	7ffb      	ldrb	r3, [r7, #31]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006358:	d112      	bne.n	8006380 <HAL_SPI_Receive+0x44>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10e      	bne.n	8006380 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2204      	movs	r2, #4
 8006366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 f8e9 	bl	800654e <HAL_SPI_TransmitReceive>
 800637c:	4603      	mov	r3, r0
 800637e:	e0e2      	b.n	8006546 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_SPI_Receive+0x52>
 800638a:	2302      	movs	r3, #2
 800638c:	e0db      	b.n	8006546 <HAL_SPI_Receive+0x20a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006396:	f7fc fb6b 	bl	8002a70 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063ac:	e0c2      	b.n	8006534 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_SPI_Receive+0x7e>
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063be:	e0b9      	b.n	8006534 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2204      	movs	r2, #4
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006406:	d107      	bne.n	8006418 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d007      	beq.n	8006436 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d162      	bne.n	8006504 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800643e:	e02e      	b.n	800649e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d115      	bne.n	800647a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f103 020c 	add.w	r2, r3, #12
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	7812      	ldrb	r2, [r2, #0]
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006478:	e011      	b.n	800649e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647a:	f7fc faf9 	bl	8002a70 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d803      	bhi.n	8006492 <HAL_SPI_Receive+0x156>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d102      	bne.n	8006498 <HAL_SPI_Receive+0x15c>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800649c:	e04a      	b.n	8006534 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1cb      	bne.n	8006440 <HAL_SPI_Receive+0x104>
 80064a8:	e031      	b.n	800650e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d113      	bne.n	80064e0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	b292      	uxth	r2, r2
 80064c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	1c9a      	adds	r2, r3, #2
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064de:	e011      	b.n	8006504 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e0:	f7fc fac6 	bl	8002a70 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d803      	bhi.n	80064f8 <HAL_SPI_Receive+0x1bc>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d102      	bne.n	80064fe <HAL_SPI_Receive+0x1c2>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006502:	e017      	b.n	8006534 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1cd      	bne.n	80064aa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fa35 	bl	8006982 <SPI_EndRxTransaction>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	75fb      	strb	r3, [r7, #23]
 8006530:	e000      	b.n	8006534 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b08c      	sub	sp, #48	; 0x30
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800655c:	2301      	movs	r3, #1
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x26>
 8006570:	2302      	movs	r3, #2
 8006572:	e18a      	b.n	800688a <HAL_SPI_TransmitReceive+0x33c>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800657c:	f7fc fa78 	bl	8002a70 <HAL_GetTick>
 8006580:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006592:	887b      	ldrh	r3, [r7, #2]
 8006594:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800659a:	2b01      	cmp	r3, #1
 800659c:	d00f      	beq.n	80065be <HAL_SPI_TransmitReceive+0x70>
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a4:	d107      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <HAL_SPI_TransmitReceive+0x68>
 80065ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d003      	beq.n	80065be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
 80065b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065bc:	e15b      	b.n	8006876 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x82>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x82>
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065d6:	e14e      	b.n	8006876 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d003      	beq.n	80065ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2205      	movs	r2, #5
 80065e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	887a      	ldrh	r2, [r7, #2]
 800660e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	887a      	ldrh	r2, [r7, #2]
 8006614:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d007      	beq.n	8006640 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006648:	d178      	bne.n	800673c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x10a>
 8006652:	8b7b      	ldrh	r3, [r7, #26]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d166      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	881a      	ldrh	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	1c9a      	adds	r2, r3, #2
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667c:	e053      	b.n	8006726 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b02      	cmp	r3, #2
 800668a:	d11b      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x176>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d016      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x176>
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d113      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	881a      	ldrh	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	1c9a      	adds	r2, r3, #2
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d119      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x1b8>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d014      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	b292      	uxth	r2, r2
 80066e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	1c9a      	adds	r2, r3, #2
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006702:	2301      	movs	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006706:	f7fc f9b3 	bl	8002a70 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006712:	429a      	cmp	r2, r3
 8006714:	d807      	bhi.n	8006726 <HAL_SPI_TransmitReceive+0x1d8>
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d003      	beq.n	8006726 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006724:	e0a7      	b.n	8006876 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1a6      	bne.n	800667e <HAL_SPI_TransmitReceive+0x130>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1a1      	bne.n	800667e <HAL_SPI_TransmitReceive+0x130>
 800673a:	e07c      	b.n	8006836 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_SPI_TransmitReceive+0x1fc>
 8006744:	8b7b      	ldrh	r3, [r7, #26]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d16b      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	330c      	adds	r3, #12
 8006754:	7812      	ldrb	r2, [r2, #0]
 8006756:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006766:	b29b      	uxth	r3, r3
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006770:	e057      	b.n	8006822 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b02      	cmp	r3, #2
 800677e:	d11c      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x26c>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d017      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x26c>
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d114      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d119      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x2ae>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d014      	beq.n	80067fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067f8:	2301      	movs	r3, #1
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067fc:	f7fc f938 	bl	8002a70 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006808:	429a      	cmp	r2, r3
 800680a:	d803      	bhi.n	8006814 <HAL_SPI_TransmitReceive+0x2c6>
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	d102      	bne.n	800681a <HAL_SPI_TransmitReceive+0x2cc>
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006820:	e029      	b.n	8006876 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1a2      	bne.n	8006772 <HAL_SPI_TransmitReceive+0x224>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d19d      	bne.n	8006772 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f906 	bl	8006a4c <SPI_EndRxTxTransaction>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d006      	beq.n	8006854 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006852:	e010      	b.n	8006876 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	e000      	b.n	8006876 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800688a:	4618      	mov	r0, r3
 800688c:	3730      	adds	r7, #48	; 0x30
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068a0:	b2db      	uxtb	r3, r3
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068be:	e04c      	b.n	800695a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d048      	beq.n	800695a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80068c8:	f7fc f8d2 	bl	8002a70 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d902      	bls.n	80068de <SPI_WaitFlagStateUntilTimeout+0x30>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d13d      	bne.n	800695a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d111      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d004      	beq.n	800690c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d107      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	d10f      	bne.n	8006946 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e00f      	b.n	800697a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d1a3      	bne.n	80068c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af02      	add	r7, sp, #8
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006996:	d111      	bne.n	80069bc <SPI_EndRxTransaction+0x3a>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a0:	d004      	beq.n	80069ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069aa:	d107      	bne.n	80069bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c4:	d12a      	bne.n	8006a1c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ce:	d012      	beq.n	80069f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff ff67 	bl	80068ae <SPI_WaitFlagStateUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d02d      	beq.n	8006a42 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e026      	b.n	8006a44 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2101      	movs	r1, #1
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff ff54 	bl	80068ae <SPI_WaitFlagStateUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01a      	beq.n	8006a42 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f043 0220 	orr.w	r2, r3, #32
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e013      	b.n	8006a44 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	2101      	movs	r1, #1
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff ff41 	bl	80068ae <SPI_WaitFlagStateUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e000      	b.n	8006a44 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <SPI_EndRxTxTransaction+0x7c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <SPI_EndRxTxTransaction+0x80>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	0d5b      	lsrs	r3, r3, #21
 8006a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a68:	fb02 f303 	mul.w	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a76:	d112      	bne.n	8006a9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2180      	movs	r1, #128	; 0x80
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff ff13 	bl	80068ae <SPI_WaitFlagStateUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d016      	beq.n	8006abc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e00f      	b.n	8006abe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d0f2      	beq.n	8006a9e <SPI_EndRxTxTransaction+0x52>
 8006ab8:	e000      	b.n	8006abc <SPI_EndRxTxTransaction+0x70>
        break;
 8006aba:	bf00      	nop
  }

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000004 	.word	0x20000004
 8006acc:	165e9f81 	.word	0x165e9f81

08006ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e01d      	b.n	8006b1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fa fe2c 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f000 fa14 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b06      	cmp	r3, #6
 8006b4e:	d007      	beq.n	8006b60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d122      	bne.n	8006bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d11b      	bne.n	8006bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0202 	mvn.w	r2, #2
 8006b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f9a5 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 8006bb6:	e005      	b.n	8006bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f997 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9a8 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d122      	bne.n	8006c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d11b      	bne.n	8006c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f06f 0204 	mvn.w	r2, #4
 8006bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f97b 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e005      	b.n	8006c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f96d 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f97e 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d122      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d11b      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0208 	mvn.w	r2, #8
 8006c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f951 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 8006c5e:	e005      	b.n	8006c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f943 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f954 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d122      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d11b      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0210 	mvn.w	r2, #16
 8006c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f927 	bl	8006f00 <HAL_TIM_IC_CaptureCallback>
 8006cb2:	e005      	b.n	8006cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f919 	bl	8006eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f92a 	bl	8006f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10e      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f06f 0201 	mvn.w	r2, #1
 8006cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fa fa9b 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d10e      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 facf 	bl	80072bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8ef 	bl	8006f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d10e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d107      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0220 	mvn.w	r2, #32
 8006d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa99 	bl	80072a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_TIM_ConfigClockSource+0x18>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e0a6      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x166>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006db4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dbc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d067      	beq.n	8006e9e <HAL_TIM_ConfigClockSource+0x120>
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d80b      	bhi.n	8006dea <HAL_TIM_ConfigClockSource+0x6c>
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d073      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x140>
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d802      	bhi.n	8006de0 <HAL_TIM_ConfigClockSource+0x62>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d06f      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006dde:	e078      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d06c      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x140>
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d06a      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006de8:	e073      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dea:	2b70      	cmp	r3, #112	; 0x70
 8006dec:	d00d      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x8c>
 8006dee:	2b70      	cmp	r3, #112	; 0x70
 8006df0:	d804      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x7e>
 8006df2:	2b50      	cmp	r3, #80	; 0x50
 8006df4:	d033      	beq.n	8006e5e <HAL_TIM_ConfigClockSource+0xe0>
 8006df6:	2b60      	cmp	r3, #96	; 0x60
 8006df8:	d041      	beq.n	8006e7e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006dfa:	e06a      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d066      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0x152>
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	d017      	beq.n	8006e38 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e08:	e063      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6899      	ldr	r1, [r3, #8]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f000 f9a9 	bl	8007170 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	609a      	str	r2, [r3, #8]
      break;
 8006e36:	e04c      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6899      	ldr	r1, [r3, #8]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f000 f992 	bl	8007170 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e5a:	609a      	str	r2, [r3, #8]
      break;
 8006e5c:	e039      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6859      	ldr	r1, [r3, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f000 f906 	bl	800707c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2150      	movs	r1, #80	; 0x50
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f95f 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006e7c:	e029      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6859      	ldr	r1, [r3, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f000 f925 	bl	80070da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2160      	movs	r1, #96	; 0x60
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f94f 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006e9c:	e019      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6859      	ldr	r1, [r3, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f000 f8e6 	bl	800707c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2140      	movs	r1, #64	; 0x40
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f93f 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006ebc:	e009      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f000 f936 	bl	800713a <TIM_ITRx_SetConfig>
      break;
 8006ece:	e000      	b.n	8006ed2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ed0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a40      	ldr	r2, [pc, #256]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a3b      	ldr	r2, [pc, #236]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3a      	ldr	r2, [pc, #232]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d027      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <TIM_Base_SetConfig+0x118>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d023      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2b      	ldr	r2, [pc, #172]	; (8007058 <TIM_Base_SetConfig+0x11c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	; (800705c <TIM_Base_SetConfig+0x120>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d017      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a28      	ldr	r2, [pc, #160]	; (8007064 <TIM_Base_SetConfig+0x128>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <TIM_Base_SetConfig+0x12c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a26      	ldr	r2, [pc, #152]	; (800706c <TIM_Base_SetConfig+0x130>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <TIM_Base_SetConfig+0x134>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a24      	ldr	r2, [pc, #144]	; (8007074 <TIM_Base_SetConfig+0x138>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a23      	ldr	r2, [pc, #140]	; (8007078 <TIM_Base_SetConfig+0x13c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d108      	bne.n	8007000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <TIM_Base_SetConfig+0x114>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a0c      	ldr	r2, [pc, #48]	; (8007060 <TIM_Base_SetConfig+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d103      	bne.n	800703c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	615a      	str	r2, [r3, #20]
}
 8007042:	bf00      	nop
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
 8007060:	40010400 	.word	0x40010400
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800
 8007070:	40001800 	.word	0x40001800
 8007074:	40001c00 	.word	0x40001c00
 8007078:	40002000 	.word	0x40002000

0800707c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0201 	bic.w	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 030a 	bic.w	r3, r3, #10
 80070b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070da:	b480      	push	{r7}
 80070dc:	b087      	sub	sp, #28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f023 0210 	bic.w	r2, r3, #16
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	031b      	lsls	r3, r3, #12
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007116:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	f043 0307 	orr.w	r3, r3, #7
 800715c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800718a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	021a      	lsls	r2, r3, #8
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	431a      	orrs	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4313      	orrs	r3, r2
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	609a      	str	r2, [r3, #8]
}
 80071a4:	bf00      	nop
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e05a      	b.n	800727e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a21      	ldr	r2, [pc, #132]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d022      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007214:	d01d      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d018      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1b      	ldr	r2, [pc, #108]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00e      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a18      	ldr	r2, [pc, #96]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d009      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d004      	beq.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d10c      	bne.n	800726c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4313      	orrs	r3, r2
 8007262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40010400 	.word	0x40010400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40001800 	.word	0x40001800

080072a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e03f      	b.n	8007362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fa fa78 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2224      	movs	r2, #36	; 0x24
 8007300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f90b 	bl	8007530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b088      	sub	sp, #32
 800736e:	af02      	add	r7, sp, #8
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b20      	cmp	r3, #32
 8007388:	f040 8083 	bne.w	8007492 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <HAL_UART_Transmit+0x2e>
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e07b      	b.n	8007494 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <HAL_UART_Transmit+0x40>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e074      	b.n	8007494 <HAL_UART_Transmit+0x12a>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2221      	movs	r2, #33	; 0x21
 80073bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80073c0:	f7fb fb56 	bl	8002a70 <HAL_GetTick>
 80073c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80073da:	e042      	b.n	8007462 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f2:	d122      	bne.n	800743a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2200      	movs	r2, #0
 80073fc:	2180      	movs	r1, #128	; 0x80
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f84c 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e042      	b.n	8007494 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007420:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3302      	adds	r3, #2
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	e017      	b.n	8007462 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3301      	adds	r3, #1
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	e013      	b.n	8007462 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2200      	movs	r2, #0
 8007442:	2180      	movs	r1, #128	; 0x80
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f829 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e01f      	b.n	8007494 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	60ba      	str	r2, [r7, #8]
 800745a:	781a      	ldrb	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1b7      	bne.n	80073dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2200      	movs	r2, #0
 8007474:	2140      	movs	r1, #64	; 0x40
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 f810 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e006      	b.n	8007494 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e000      	b.n	8007494 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	e02c      	b.n	8007508 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d028      	beq.n	8007508 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <UART_WaitOnFlagUntilTimeout+0x30>
 80074bc:	f7fb fad8 	bl	8002a70 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d21d      	bcs.n	8007508 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695a      	ldr	r2, [r3, #20]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0201 	bic.w	r2, r2, #1
 80074ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e00f      	b.n	8007528 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4013      	ands	r3, r2
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	bf0c      	ite	eq
 8007518:	2301      	moveq	r3, #1
 800751a:	2300      	movne	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	429a      	cmp	r2, r3
 8007524:	d0c3      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007572:	f023 030c 	bic.w	r3, r3, #12
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	430b      	orrs	r3, r1
 800757e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800759e:	f040 818b 	bne.w	80078b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4ac1      	ldr	r2, [pc, #772]	; (80078ac <UART_SetConfig+0x37c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d005      	beq.n	80075b8 <UART_SetConfig+0x88>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4abf      	ldr	r2, [pc, #764]	; (80078b0 <UART_SetConfig+0x380>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	f040 80bd 	bne.w	8007732 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075b8:	f7fe fac8 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 80075bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	461d      	mov	r5, r3
 80075c2:	f04f 0600 	mov.w	r6, #0
 80075c6:	46a8      	mov	r8, r5
 80075c8:	46b1      	mov	r9, r6
 80075ca:	eb18 0308 	adds.w	r3, r8, r8
 80075ce:	eb49 0409 	adc.w	r4, r9, r9
 80075d2:	4698      	mov	r8, r3
 80075d4:	46a1      	mov	r9, r4
 80075d6:	eb18 0805 	adds.w	r8, r8, r5
 80075da:	eb49 0906 	adc.w	r9, r9, r6
 80075de:	f04f 0100 	mov.w	r1, #0
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075f2:	4688      	mov	r8, r1
 80075f4:	4691      	mov	r9, r2
 80075f6:	eb18 0005 	adds.w	r0, r8, r5
 80075fa:	eb49 0106 	adc.w	r1, r9, r6
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	461d      	mov	r5, r3
 8007604:	f04f 0600 	mov.w	r6, #0
 8007608:	196b      	adds	r3, r5, r5
 800760a:	eb46 0406 	adc.w	r4, r6, r6
 800760e:	461a      	mov	r2, r3
 8007610:	4623      	mov	r3, r4
 8007612:	f7f8 fe3d 	bl	8000290 <__aeabi_uldivmod>
 8007616:	4603      	mov	r3, r0
 8007618:	460c      	mov	r4, r1
 800761a:	461a      	mov	r2, r3
 800761c:	4ba5      	ldr	r3, [pc, #660]	; (80078b4 <UART_SetConfig+0x384>)
 800761e:	fba3 2302 	umull	r2, r3, r3, r2
 8007622:	095b      	lsrs	r3, r3, #5
 8007624:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	461d      	mov	r5, r3
 800762c:	f04f 0600 	mov.w	r6, #0
 8007630:	46a9      	mov	r9, r5
 8007632:	46b2      	mov	sl, r6
 8007634:	eb19 0309 	adds.w	r3, r9, r9
 8007638:	eb4a 040a 	adc.w	r4, sl, sl
 800763c:	4699      	mov	r9, r3
 800763e:	46a2      	mov	sl, r4
 8007640:	eb19 0905 	adds.w	r9, r9, r5
 8007644:	eb4a 0a06 	adc.w	sl, sl, r6
 8007648:	f04f 0100 	mov.w	r1, #0
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800765c:	4689      	mov	r9, r1
 800765e:	4692      	mov	sl, r2
 8007660:	eb19 0005 	adds.w	r0, r9, r5
 8007664:	eb4a 0106 	adc.w	r1, sl, r6
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	461d      	mov	r5, r3
 800766e:	f04f 0600 	mov.w	r6, #0
 8007672:	196b      	adds	r3, r5, r5
 8007674:	eb46 0406 	adc.w	r4, r6, r6
 8007678:	461a      	mov	r2, r3
 800767a:	4623      	mov	r3, r4
 800767c:	f7f8 fe08 	bl	8000290 <__aeabi_uldivmod>
 8007680:	4603      	mov	r3, r0
 8007682:	460c      	mov	r4, r1
 8007684:	461a      	mov	r2, r3
 8007686:	4b8b      	ldr	r3, [pc, #556]	; (80078b4 <UART_SetConfig+0x384>)
 8007688:	fba3 1302 	umull	r1, r3, r3, r2
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	2164      	movs	r1, #100	; 0x64
 8007690:	fb01 f303 	mul.w	r3, r1, r3
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	3332      	adds	r3, #50	; 0x32
 800769a:	4a86      	ldr	r2, [pc, #536]	; (80078b4 <UART_SetConfig+0x384>)
 800769c:	fba2 2303 	umull	r2, r3, r2, r3
 80076a0:	095b      	lsrs	r3, r3, #5
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076a8:	4498      	add	r8, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	461d      	mov	r5, r3
 80076ae:	f04f 0600 	mov.w	r6, #0
 80076b2:	46a9      	mov	r9, r5
 80076b4:	46b2      	mov	sl, r6
 80076b6:	eb19 0309 	adds.w	r3, r9, r9
 80076ba:	eb4a 040a 	adc.w	r4, sl, sl
 80076be:	4699      	mov	r9, r3
 80076c0:	46a2      	mov	sl, r4
 80076c2:	eb19 0905 	adds.w	r9, r9, r5
 80076c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80076ca:	f04f 0100 	mov.w	r1, #0
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076de:	4689      	mov	r9, r1
 80076e0:	4692      	mov	sl, r2
 80076e2:	eb19 0005 	adds.w	r0, r9, r5
 80076e6:	eb4a 0106 	adc.w	r1, sl, r6
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	461d      	mov	r5, r3
 80076f0:	f04f 0600 	mov.w	r6, #0
 80076f4:	196b      	adds	r3, r5, r5
 80076f6:	eb46 0406 	adc.w	r4, r6, r6
 80076fa:	461a      	mov	r2, r3
 80076fc:	4623      	mov	r3, r4
 80076fe:	f7f8 fdc7 	bl	8000290 <__aeabi_uldivmod>
 8007702:	4603      	mov	r3, r0
 8007704:	460c      	mov	r4, r1
 8007706:	461a      	mov	r2, r3
 8007708:	4b6a      	ldr	r3, [pc, #424]	; (80078b4 <UART_SetConfig+0x384>)
 800770a:	fba3 1302 	umull	r1, r3, r3, r2
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	2164      	movs	r1, #100	; 0x64
 8007712:	fb01 f303 	mul.w	r3, r1, r3
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	3332      	adds	r3, #50	; 0x32
 800771c:	4a65      	ldr	r2, [pc, #404]	; (80078b4 <UART_SetConfig+0x384>)
 800771e:	fba2 2303 	umull	r2, r3, r2, r3
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	f003 0207 	and.w	r2, r3, #7
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4442      	add	r2, r8
 800772e:	609a      	str	r2, [r3, #8]
 8007730:	e26f      	b.n	8007c12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007732:	f7fe f9f7 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8007736:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	461d      	mov	r5, r3
 800773c:	f04f 0600 	mov.w	r6, #0
 8007740:	46a8      	mov	r8, r5
 8007742:	46b1      	mov	r9, r6
 8007744:	eb18 0308 	adds.w	r3, r8, r8
 8007748:	eb49 0409 	adc.w	r4, r9, r9
 800774c:	4698      	mov	r8, r3
 800774e:	46a1      	mov	r9, r4
 8007750:	eb18 0805 	adds.w	r8, r8, r5
 8007754:	eb49 0906 	adc.w	r9, r9, r6
 8007758:	f04f 0100 	mov.w	r1, #0
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007764:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007768:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800776c:	4688      	mov	r8, r1
 800776e:	4691      	mov	r9, r2
 8007770:	eb18 0005 	adds.w	r0, r8, r5
 8007774:	eb49 0106 	adc.w	r1, r9, r6
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	461d      	mov	r5, r3
 800777e:	f04f 0600 	mov.w	r6, #0
 8007782:	196b      	adds	r3, r5, r5
 8007784:	eb46 0406 	adc.w	r4, r6, r6
 8007788:	461a      	mov	r2, r3
 800778a:	4623      	mov	r3, r4
 800778c:	f7f8 fd80 	bl	8000290 <__aeabi_uldivmod>
 8007790:	4603      	mov	r3, r0
 8007792:	460c      	mov	r4, r1
 8007794:	461a      	mov	r2, r3
 8007796:	4b47      	ldr	r3, [pc, #284]	; (80078b4 <UART_SetConfig+0x384>)
 8007798:	fba3 2302 	umull	r2, r3, r3, r2
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	461d      	mov	r5, r3
 80077a6:	f04f 0600 	mov.w	r6, #0
 80077aa:	46a9      	mov	r9, r5
 80077ac:	46b2      	mov	sl, r6
 80077ae:	eb19 0309 	adds.w	r3, r9, r9
 80077b2:	eb4a 040a 	adc.w	r4, sl, sl
 80077b6:	4699      	mov	r9, r3
 80077b8:	46a2      	mov	sl, r4
 80077ba:	eb19 0905 	adds.w	r9, r9, r5
 80077be:	eb4a 0a06 	adc.w	sl, sl, r6
 80077c2:	f04f 0100 	mov.w	r1, #0
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077d6:	4689      	mov	r9, r1
 80077d8:	4692      	mov	sl, r2
 80077da:	eb19 0005 	adds.w	r0, r9, r5
 80077de:	eb4a 0106 	adc.w	r1, sl, r6
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	461d      	mov	r5, r3
 80077e8:	f04f 0600 	mov.w	r6, #0
 80077ec:	196b      	adds	r3, r5, r5
 80077ee:	eb46 0406 	adc.w	r4, r6, r6
 80077f2:	461a      	mov	r2, r3
 80077f4:	4623      	mov	r3, r4
 80077f6:	f7f8 fd4b 	bl	8000290 <__aeabi_uldivmod>
 80077fa:	4603      	mov	r3, r0
 80077fc:	460c      	mov	r4, r1
 80077fe:	461a      	mov	r2, r3
 8007800:	4b2c      	ldr	r3, [pc, #176]	; (80078b4 <UART_SetConfig+0x384>)
 8007802:	fba3 1302 	umull	r1, r3, r3, r2
 8007806:	095b      	lsrs	r3, r3, #5
 8007808:	2164      	movs	r1, #100	; 0x64
 800780a:	fb01 f303 	mul.w	r3, r1, r3
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	3332      	adds	r3, #50	; 0x32
 8007814:	4a27      	ldr	r2, [pc, #156]	; (80078b4 <UART_SetConfig+0x384>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007822:	4498      	add	r8, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	461d      	mov	r5, r3
 8007828:	f04f 0600 	mov.w	r6, #0
 800782c:	46a9      	mov	r9, r5
 800782e:	46b2      	mov	sl, r6
 8007830:	eb19 0309 	adds.w	r3, r9, r9
 8007834:	eb4a 040a 	adc.w	r4, sl, sl
 8007838:	4699      	mov	r9, r3
 800783a:	46a2      	mov	sl, r4
 800783c:	eb19 0905 	adds.w	r9, r9, r5
 8007840:	eb4a 0a06 	adc.w	sl, sl, r6
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007858:	4689      	mov	r9, r1
 800785a:	4692      	mov	sl, r2
 800785c:	eb19 0005 	adds.w	r0, r9, r5
 8007860:	eb4a 0106 	adc.w	r1, sl, r6
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	461d      	mov	r5, r3
 800786a:	f04f 0600 	mov.w	r6, #0
 800786e:	196b      	adds	r3, r5, r5
 8007870:	eb46 0406 	adc.w	r4, r6, r6
 8007874:	461a      	mov	r2, r3
 8007876:	4623      	mov	r3, r4
 8007878:	f7f8 fd0a 	bl	8000290 <__aeabi_uldivmod>
 800787c:	4603      	mov	r3, r0
 800787e:	460c      	mov	r4, r1
 8007880:	461a      	mov	r2, r3
 8007882:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <UART_SetConfig+0x384>)
 8007884:	fba3 1302 	umull	r1, r3, r3, r2
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	2164      	movs	r1, #100	; 0x64
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	3332      	adds	r3, #50	; 0x32
 8007896:	4a07      	ldr	r2, [pc, #28]	; (80078b4 <UART_SetConfig+0x384>)
 8007898:	fba2 2303 	umull	r2, r3, r2, r3
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	f003 0207 	and.w	r2, r3, #7
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4442      	add	r2, r8
 80078a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80078aa:	e1b2      	b.n	8007c12 <UART_SetConfig+0x6e2>
 80078ac:	40011000 	.word	0x40011000
 80078b0:	40011400 	.word	0x40011400
 80078b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4ad7      	ldr	r2, [pc, #860]	; (8007c1c <UART_SetConfig+0x6ec>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d005      	beq.n	80078ce <UART_SetConfig+0x39e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4ad6      	ldr	r2, [pc, #856]	; (8007c20 <UART_SetConfig+0x6f0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	f040 80d1 	bne.w	8007a70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80078ce:	f7fe f93d 	bl	8005b4c <HAL_RCC_GetPCLK2Freq>
 80078d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	469a      	mov	sl, r3
 80078d8:	f04f 0b00 	mov.w	fp, #0
 80078dc:	46d0      	mov	r8, sl
 80078de:	46d9      	mov	r9, fp
 80078e0:	eb18 0308 	adds.w	r3, r8, r8
 80078e4:	eb49 0409 	adc.w	r4, r9, r9
 80078e8:	4698      	mov	r8, r3
 80078ea:	46a1      	mov	r9, r4
 80078ec:	eb18 080a 	adds.w	r8, r8, sl
 80078f0:	eb49 090b 	adc.w	r9, r9, fp
 80078f4:	f04f 0100 	mov.w	r1, #0
 80078f8:	f04f 0200 	mov.w	r2, #0
 80078fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007900:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007904:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007908:	4688      	mov	r8, r1
 800790a:	4691      	mov	r9, r2
 800790c:	eb1a 0508 	adds.w	r5, sl, r8
 8007910:	eb4b 0609 	adc.w	r6, fp, r9
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4619      	mov	r1, r3
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	f04f 0400 	mov.w	r4, #0
 8007926:	0094      	lsls	r4, r2, #2
 8007928:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800792c:	008b      	lsls	r3, r1, #2
 800792e:	461a      	mov	r2, r3
 8007930:	4623      	mov	r3, r4
 8007932:	4628      	mov	r0, r5
 8007934:	4631      	mov	r1, r6
 8007936:	f7f8 fcab 	bl	8000290 <__aeabi_uldivmod>
 800793a:	4603      	mov	r3, r0
 800793c:	460c      	mov	r4, r1
 800793e:	461a      	mov	r2, r3
 8007940:	4bb8      	ldr	r3, [pc, #736]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007942:	fba3 2302 	umull	r2, r3, r3, r2
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	469b      	mov	fp, r3
 8007950:	f04f 0c00 	mov.w	ip, #0
 8007954:	46d9      	mov	r9, fp
 8007956:	46e2      	mov	sl, ip
 8007958:	eb19 0309 	adds.w	r3, r9, r9
 800795c:	eb4a 040a 	adc.w	r4, sl, sl
 8007960:	4699      	mov	r9, r3
 8007962:	46a2      	mov	sl, r4
 8007964:	eb19 090b 	adds.w	r9, r9, fp
 8007968:	eb4a 0a0c 	adc.w	sl, sl, ip
 800796c:	f04f 0100 	mov.w	r1, #0
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007978:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800797c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007980:	4689      	mov	r9, r1
 8007982:	4692      	mov	sl, r2
 8007984:	eb1b 0509 	adds.w	r5, fp, r9
 8007988:	eb4c 060a 	adc.w	r6, ip, sl
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	f04f 0200 	mov.w	r2, #0
 8007996:	f04f 0300 	mov.w	r3, #0
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	0094      	lsls	r4, r2, #2
 80079a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079a4:	008b      	lsls	r3, r1, #2
 80079a6:	461a      	mov	r2, r3
 80079a8:	4623      	mov	r3, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	4631      	mov	r1, r6
 80079ae:	f7f8 fc6f 	bl	8000290 <__aeabi_uldivmod>
 80079b2:	4603      	mov	r3, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	461a      	mov	r2, r3
 80079b8:	4b9a      	ldr	r3, [pc, #616]	; (8007c24 <UART_SetConfig+0x6f4>)
 80079ba:	fba3 1302 	umull	r1, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2164      	movs	r1, #100	; 0x64
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	3332      	adds	r3, #50	; 0x32
 80079cc:	4a95      	ldr	r2, [pc, #596]	; (8007c24 <UART_SetConfig+0x6f4>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d8:	4498      	add	r8, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	469b      	mov	fp, r3
 80079de:	f04f 0c00 	mov.w	ip, #0
 80079e2:	46d9      	mov	r9, fp
 80079e4:	46e2      	mov	sl, ip
 80079e6:	eb19 0309 	adds.w	r3, r9, r9
 80079ea:	eb4a 040a 	adc.w	r4, sl, sl
 80079ee:	4699      	mov	r9, r3
 80079f0:	46a2      	mov	sl, r4
 80079f2:	eb19 090b 	adds.w	r9, r9, fp
 80079f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079fa:	f04f 0100 	mov.w	r1, #0
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a0e:	4689      	mov	r9, r1
 8007a10:	4692      	mov	sl, r2
 8007a12:	eb1b 0509 	adds.w	r5, fp, r9
 8007a16:	eb4c 060a 	adc.w	r6, ip, sl
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	f04f 0400 	mov.w	r4, #0
 8007a2c:	0094      	lsls	r4, r2, #2
 8007a2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a32:	008b      	lsls	r3, r1, #2
 8007a34:	461a      	mov	r2, r3
 8007a36:	4623      	mov	r3, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	f7f8 fc28 	bl	8000290 <__aeabi_uldivmod>
 8007a40:	4603      	mov	r3, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	461a      	mov	r2, r3
 8007a46:	4b77      	ldr	r3, [pc, #476]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007a48:	fba3 1302 	umull	r1, r3, r3, r2
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	2164      	movs	r1, #100	; 0x64
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	3332      	adds	r3, #50	; 0x32
 8007a5a:	4a72      	ldr	r2, [pc, #456]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	f003 020f 	and.w	r2, r3, #15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4442      	add	r2, r8
 8007a6c:	609a      	str	r2, [r3, #8]
 8007a6e:	e0d0      	b.n	8007c12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a70:	f7fe f858 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8007a74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	469a      	mov	sl, r3
 8007a7a:	f04f 0b00 	mov.w	fp, #0
 8007a7e:	46d0      	mov	r8, sl
 8007a80:	46d9      	mov	r9, fp
 8007a82:	eb18 0308 	adds.w	r3, r8, r8
 8007a86:	eb49 0409 	adc.w	r4, r9, r9
 8007a8a:	4698      	mov	r8, r3
 8007a8c:	46a1      	mov	r9, r4
 8007a8e:	eb18 080a 	adds.w	r8, r8, sl
 8007a92:	eb49 090b 	adc.w	r9, r9, fp
 8007a96:	f04f 0100 	mov.w	r1, #0
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007aa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007aa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007aaa:	4688      	mov	r8, r1
 8007aac:	4691      	mov	r9, r2
 8007aae:	eb1a 0508 	adds.w	r5, sl, r8
 8007ab2:	eb4b 0609 	adc.w	r6, fp, r9
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4619      	mov	r1, r3
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	f04f 0400 	mov.w	r4, #0
 8007ac8:	0094      	lsls	r4, r2, #2
 8007aca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ace:	008b      	lsls	r3, r1, #2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	f7f8 fbda 	bl	8000290 <__aeabi_uldivmod>
 8007adc:	4603      	mov	r3, r0
 8007ade:	460c      	mov	r4, r1
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b50      	ldr	r3, [pc, #320]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	469b      	mov	fp, r3
 8007af2:	f04f 0c00 	mov.w	ip, #0
 8007af6:	46d9      	mov	r9, fp
 8007af8:	46e2      	mov	sl, ip
 8007afa:	eb19 0309 	adds.w	r3, r9, r9
 8007afe:	eb4a 040a 	adc.w	r4, sl, sl
 8007b02:	4699      	mov	r9, r3
 8007b04:	46a2      	mov	sl, r4
 8007b06:	eb19 090b 	adds.w	r9, r9, fp
 8007b0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b22:	4689      	mov	r9, r1
 8007b24:	4692      	mov	sl, r2
 8007b26:	eb1b 0509 	adds.w	r5, fp, r9
 8007b2a:	eb4c 060a 	adc.w	r6, ip, sl
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	4619      	mov	r1, r3
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	f04f 0400 	mov.w	r4, #0
 8007b40:	0094      	lsls	r4, r2, #2
 8007b42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b46:	008b      	lsls	r3, r1, #2
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	4631      	mov	r1, r6
 8007b50:	f7f8 fb9e 	bl	8000290 <__aeabi_uldivmod>
 8007b54:	4603      	mov	r3, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4b32      	ldr	r3, [pc, #200]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	2164      	movs	r1, #100	; 0x64
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	3332      	adds	r3, #50	; 0x32
 8007b6e:	4a2d      	ldr	r2, [pc, #180]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007b70:	fba2 2303 	umull	r2, r3, r2, r3
 8007b74:	095b      	lsrs	r3, r3, #5
 8007b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b7a:	4498      	add	r8, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	469b      	mov	fp, r3
 8007b80:	f04f 0c00 	mov.w	ip, #0
 8007b84:	46d9      	mov	r9, fp
 8007b86:	46e2      	mov	sl, ip
 8007b88:	eb19 0309 	adds.w	r3, r9, r9
 8007b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8007b90:	4699      	mov	r9, r3
 8007b92:	46a2      	mov	sl, r4
 8007b94:	eb19 090b 	adds.w	r9, r9, fp
 8007b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b9c:	f04f 0100 	mov.w	r1, #0
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bb0:	4689      	mov	r9, r1
 8007bb2:	4692      	mov	sl, r2
 8007bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8007bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	f04f 0400 	mov.w	r4, #0
 8007bce:	0094      	lsls	r4, r2, #2
 8007bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bd4:	008b      	lsls	r3, r1, #2
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	4623      	mov	r3, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	4631      	mov	r1, r6
 8007bde:	f7f8 fb57 	bl	8000290 <__aeabi_uldivmod>
 8007be2:	4603      	mov	r3, r0
 8007be4:	460c      	mov	r4, r1
 8007be6:	461a      	mov	r2, r3
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007bea:	fba3 1302 	umull	r1, r3, r3, r2
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	2164      	movs	r1, #100	; 0x64
 8007bf2:	fb01 f303 	mul.w	r3, r1, r3
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	3332      	adds	r3, #50	; 0x32
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <UART_SetConfig+0x6f4>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	f003 020f 	and.w	r2, r3, #15
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4442      	add	r2, r8
 8007c0e:	609a      	str	r2, [r3, #8]
}
 8007c10:	e7ff      	b.n	8007c12 <UART_SetConfig+0x6e2>
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	40011000 	.word	0x40011000
 8007c20:	40011400 	.word	0x40011400
 8007c24:	51eb851f 	.word	0x51eb851f

08007c28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d029      	beq.n	8007c96 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c52:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c5c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007c62:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007c68:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007c6e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007c74:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007c7a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007c80:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007c86:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e034      	b.n	8007d00 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007cb2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cca:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cd4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007cda:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007ce0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007ce6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007cec:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b087      	sub	sp, #28
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d02e      	beq.n	8007d86 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d34:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007d44:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007d4e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007d58:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d62:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007d6c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007d76:	4313      	orrs	r3, r2
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	609a      	str	r2, [r3, #8]
 8007d84:	e03b      	b.n	8007dfe <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d96:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007da8:	4313      	orrs	r3, r2
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007dbc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007dcc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007dd6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007de0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007dea:	4313      	orrs	r3, r2
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	371c      	adds	r7, #28
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e1e:	2b84      	cmp	r3, #132	; 0x84
 8007e20:	d005      	beq.n	8007e2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e40:	f001 f8d8 	bl	8008ff4 <vTaskStartScheduler>
  
  return osOK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4c:	b089      	sub	sp, #36	; 0x24
 8007e4e:	af04      	add	r7, sp, #16
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d020      	beq.n	8007e9e <osThreadCreate+0x54>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01c      	beq.n	8007e9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685c      	ldr	r4, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681d      	ldr	r5, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	691e      	ldr	r6, [r3, #16]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff ffc8 	bl	8007e0c <makeFreeRtosPriority>
 8007e7c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e86:	9202      	str	r2, [sp, #8]
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	9100      	str	r1, [sp, #0]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	4632      	mov	r2, r6
 8007e90:	4629      	mov	r1, r5
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 fedc 	bl	8008c50 <xTaskCreateStatic>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	e01c      	b.n	8007ed8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685c      	ldr	r4, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eaa:	b29e      	uxth	r6, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff ffaa 	bl	8007e0c <makeFreeRtosPriority>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	f107 030c 	add.w	r3, r7, #12
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	9200      	str	r2, [sp, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 ff1b 	bl	8008d04 <xTaskCreate>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d001      	beq.n	8007ed8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e000      	b.n	8007eda <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ee2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <osDelay+0x16>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	e000      	b.n	8007efa <osDelay+0x18>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 f846 	bl	8008f8c <vTaskDelay>
  
  return osOK;
 8007f00:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f103 0208 	add.w	r2, r3, #8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f22:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f103 0208 	add.w	r2, r3, #8
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f103 0208 	add.w	r2, r3, #8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d103      	bne.n	8007fcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	e00c      	b.n	8007fe6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e002      	b.n	8007fda <vListInsert+0x2e>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d2f6      	bcs.n	8007fd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
}
 8008012:	bf00      	nop
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	6892      	ldr	r2, [r2, #8]
 8008034:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6852      	ldr	r2, [r2, #4]
 800803e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	429a      	cmp	r2, r3
 8008048:	d103      	bne.n	8008052 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
	...

08008074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	e7fe      	b.n	800809a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800809c:	f001 ff1e 	bl	8009edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	441a      	add	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080cc:	3b01      	subs	r3, #1
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080d2:	fb01 f303 	mul.w	r3, r1, r3
 80080d6:	441a      	add	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	22ff      	movs	r2, #255	; 0xff
 80080e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	22ff      	movs	r2, #255	; 0xff
 80080e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d114      	bne.n	800811c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01a      	beq.n	8008130 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3310      	adds	r3, #16
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 f9dc 	bl	80094bc <xTaskRemoveFromEventList>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d012      	beq.n	8008130 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <xQueueGenericReset+0xcc>)
 800810c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	e009      	b.n	8008130 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3310      	adds	r3, #16
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff fef2 	bl	8007f0a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3324      	adds	r3, #36	; 0x24
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff feed 	bl	8007f0a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008130:	f001 ff02 	bl	8009f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008134:	2301      	movs	r3, #1
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af02      	add	r7, sp, #8
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <xQueueGenericCreate+0x28>
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e7fe      	b.n	800816a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d102      	bne.n	8008178 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008172:	2300      	movs	r3, #0
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	e004      	b.n	8008182 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	fb02 f303 	mul.w	r3, r2, r3
 8008180:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3350      	adds	r3, #80	; 0x50
 8008186:	4618      	mov	r0, r3
 8008188:	f001 ffc2 	bl	800a110 <pvPortMalloc>
 800818c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d011      	beq.n	80081b8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3350      	adds	r3, #80	; 0x50
 800819c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081a6:	79fa      	ldrb	r2, [r7, #7]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f805 	bl	80081c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081b8:	69bb      	ldr	r3, [r7, #24]
	}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d103      	bne.n	80081de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e002      	b.n	80081e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081f0:	2101      	movs	r1, #1
 80081f2:	69b8      	ldr	r0, [r7, #24]
 80081f4:	f7ff ff3e 	bl	8008074 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	; 0x38
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008216:	2300      	movs	r3, #0
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <xQueueGenericSend+0x30>
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
 8008236:	e7fe      	b.n	8008236 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <xQueueGenericSend+0x3e>
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <xQueueGenericSend+0x42>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueGenericSend+0x44>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <xQueueGenericSend+0x5c>
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
 8008262:	e7fe      	b.n	8008262 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d103      	bne.n	8008272 <xQueueGenericSend+0x6a>
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <xQueueGenericSend+0x6e>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <xQueueGenericSend+0x70>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d109      	bne.n	8008290 <xQueueGenericSend+0x88>
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	e7fe      	b.n	800828e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008290:	f001 facc 	bl	800982c <xTaskGetSchedulerState>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <xQueueGenericSend+0x98>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <xQueueGenericSend+0x9c>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <xQueueGenericSend+0x9e>
 80082a4:	2300      	movs	r3, #0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <xQueueGenericSend+0xb6>
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	61fb      	str	r3, [r7, #28]
 80082bc:	e7fe      	b.n	80082bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082be:	f001 fe0d 	bl	8009edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d302      	bcc.n	80082d4 <xQueueGenericSend+0xcc>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d129      	bne.n	8008328 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082da:	f000 fba9 	bl	8008a30 <prvCopyDataToQueue>
 80082de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d010      	beq.n	800830a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	3324      	adds	r3, #36	; 0x24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 f8e5 	bl	80094bc <xTaskRemoveFromEventList>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d013      	beq.n	8008320 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082f8:	4b3f      	ldr	r3, [pc, #252]	; (80083f8 <xQueueGenericSend+0x1f0>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	e00a      	b.n	8008320 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d007      	beq.n	8008320 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008310:	4b39      	ldr	r3, [pc, #228]	; (80083f8 <xQueueGenericSend+0x1f0>)
 8008312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008320:	f001 fe0a 	bl	8009f38 <vPortExitCritical>
				return pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	e063      	b.n	80083f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800832e:	f001 fe03 	bl	8009f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008332:	2300      	movs	r3, #0
 8008334:	e05c      	b.n	80083f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800833c:	f107 0314 	add.w	r3, r7, #20
 8008340:	4618      	mov	r0, r3
 8008342:	f001 f91d 	bl	8009580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800834a:	f001 fdf5 	bl	8009f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800834e:	f000 feaf 	bl	80090b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008352:	f001 fdc3 	bl	8009edc <vPortEnterCritical>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d103      	bne.n	800836c <xQueueGenericSend+0x164>
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008372:	b25b      	sxtb	r3, r3
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d103      	bne.n	8008382 <xQueueGenericSend+0x17a>
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008382:	f001 fdd9 	bl	8009f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008386:	1d3a      	adds	r2, r7, #4
 8008388:	f107 0314 	add.w	r3, r7, #20
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f90c 	bl	80095ac <xTaskCheckForTimeOut>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d124      	bne.n	80083e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800839a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839c:	f000 fc40 	bl	8008c20 <prvIsQueueFull>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d018      	beq.n	80083d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	3310      	adds	r3, #16
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f860 	bl	8009474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083b6:	f000 fbcb 	bl	8008b50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083ba:	f000 fe87 	bl	80090cc <xTaskResumeAll>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af7c 	bne.w	80082be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <xQueueGenericSend+0x1f0>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	e772      	b.n	80082be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083da:	f000 fbb9 	bl	8008b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083de:	f000 fe75 	bl	80090cc <xTaskResumeAll>
 80083e2:	e76c      	b.n	80082be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083e6:	f000 fbb3 	bl	8008b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ea:	f000 fe6f 	bl	80090cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3738      	adds	r7, #56	; 0x38
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08e      	sub	sp, #56	; 0x38
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <xQueueGenericSendFromISR+0x2c>
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
 8008426:	e7fe      	b.n	8008426 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <xQueueGenericSendFromISR+0x3a>
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <xQueueGenericSendFromISR+0x3e>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueGenericSendFromISR+0x40>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <xQueueGenericSendFromISR+0x58>
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	623b      	str	r3, [r7, #32]
 8008452:	e7fe      	b.n	8008452 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d103      	bne.n	8008462 <xQueueGenericSendFromISR+0x66>
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <xQueueGenericSendFromISR+0x6a>
 8008462:	2301      	movs	r3, #1
 8008464:	e000      	b.n	8008468 <xQueueGenericSendFromISR+0x6c>
 8008466:	2300      	movs	r3, #0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d109      	bne.n	8008480 <xQueueGenericSendFromISR+0x84>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	61fb      	str	r3, [r7, #28]
 800847e:	e7fe      	b.n	800847e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008480:	f001 fe08 	bl	800a094 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008484:	f3ef 8211 	mrs	r2, BASEPRI
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	61ba      	str	r2, [r7, #24]
 800849a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800849c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d302      	bcc.n	80084b2 <xQueueGenericSendFromISR+0xb6>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d12c      	bne.n	800850c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c2:	f000 fab5 	bl	8008a30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80084ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ce:	d112      	bne.n	80084f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d016      	beq.n	8008506 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	3324      	adds	r3, #36	; 0x24
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 ffed 	bl	80094bc <xTaskRemoveFromEventList>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00b      	beq.n	8008506 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e007      	b.n	8008506 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084fa:	3301      	adds	r3, #1
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	b25a      	sxtb	r2, r3
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008506:	2301      	movs	r3, #1
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800850a:	e001      	b.n	8008510 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800850c:	2300      	movs	r3, #0
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800851c:	4618      	mov	r0, r3
 800851e:	3738      	adds	r7, #56	; 0x38
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08e      	sub	sp, #56	; 0x38
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <xQueueGiveFromISR+0x28>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	623b      	str	r3, [r7, #32]
 800854a:	e7fe      	b.n	800854a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <xQueueGiveFromISR+0x44>
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	e7fe      	b.n	8008566 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <xQueueGiveFromISR+0x54>
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <xQueueGiveFromISR+0x58>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <xQueueGiveFromISR+0x5a>
 800857c:	2300      	movs	r3, #0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <xQueueGiveFromISR+0x72>
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	61bb      	str	r3, [r7, #24]
 8008594:	e7fe      	b.n	8008594 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008596:	f001 fd7d 	bl	800a094 <vPortValidateInterruptPriority>
	__asm volatile
 800859a:	f3ef 8211 	mrs	r2, BASEPRI
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	617a      	str	r2, [r7, #20]
 80085b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80085b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d22b      	bcs.n	800861e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d112      	bne.n	8008608 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d016      	beq.n	8008618 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	3324      	adds	r3, #36	; 0x24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 ff64 	bl	80094bc <xTaskRemoveFromEventList>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2201      	movs	r2, #1
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e007      	b.n	8008618 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800860c:	3301      	adds	r3, #1
 800860e:	b2db      	uxtb	r3, r3
 8008610:	b25a      	sxtb	r2, r3
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008618:	2301      	movs	r3, #1
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
 800861c:	e001      	b.n	8008622 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800861e:	2300      	movs	r3, #0
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800862e:	4618      	mov	r0, r3
 8008630:	3738      	adds	r7, #56	; 0x38
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08c      	sub	sp, #48	; 0x30
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008644:	2300      	movs	r3, #0
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <xQueueReceive+0x2e>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	623b      	str	r3, [r7, #32]
 8008664:	e7fe      	b.n	8008664 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <xQueueReceive+0x3c>
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <xQueueReceive+0x40>
 8008674:	2301      	movs	r3, #1
 8008676:	e000      	b.n	800867a <xQueueReceive+0x42>
 8008678:	2300      	movs	r3, #0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <xQueueReceive+0x5a>
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	61fb      	str	r3, [r7, #28]
 8008690:	e7fe      	b.n	8008690 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008692:	f001 f8cb 	bl	800982c <xTaskGetSchedulerState>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <xQueueReceive+0x6a>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <xQueueReceive+0x6e>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueReceive+0x70>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d109      	bne.n	80086c0 <xQueueReceive+0x88>
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	61bb      	str	r3, [r7, #24]
 80086be:	e7fe      	b.n	80086be <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086c0:	f001 fc0c 	bl	8009edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01f      	beq.n	8008710 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d4:	f000 fa16 	bl	8008b04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	1e5a      	subs	r2, r3, #1
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00f      	beq.n	8008708 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	3310      	adds	r3, #16
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fee5 	bl	80094bc <xTaskRemoveFromEventList>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086f8:	4b3c      	ldr	r3, [pc, #240]	; (80087ec <xQueueReceive+0x1b4>)
 80086fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008708:	f001 fc16 	bl	8009f38 <vPortExitCritical>
				return pdPASS;
 800870c:	2301      	movs	r3, #1
 800870e:	e069      	b.n	80087e4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008716:	f001 fc0f 	bl	8009f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800871a:	2300      	movs	r3, #0
 800871c:	e062      	b.n	80087e4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008724:	f107 0310 	add.w	r3, r7, #16
 8008728:	4618      	mov	r0, r3
 800872a:	f000 ff29 	bl	8009580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800872e:	2301      	movs	r3, #1
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008732:	f001 fc01 	bl	8009f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008736:	f000 fcbb 	bl	80090b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800873a:	f001 fbcf 	bl	8009edc <vPortEnterCritical>
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008744:	b25b      	sxtb	r3, r3
 8008746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874a:	d103      	bne.n	8008754 <xQueueReceive+0x11c>
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800875a:	b25b      	sxtb	r3, r3
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008760:	d103      	bne.n	800876a <xQueueReceive+0x132>
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800876a:	f001 fbe5 	bl	8009f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800876e:	1d3a      	adds	r2, r7, #4
 8008770:	f107 0310 	add.w	r3, r7, #16
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f000 ff18 	bl	80095ac <xTaskCheckForTimeOut>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d123      	bne.n	80087ca <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008784:	f000 fa36 	bl	8008bf4 <prvIsQueueEmpty>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d017      	beq.n	80087be <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	3324      	adds	r3, #36	; 0x24
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	4611      	mov	r1, r2
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fe6c 	bl	8009474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800879c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879e:	f000 f9d7 	bl	8008b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087a2:	f000 fc93 	bl	80090cc <xTaskResumeAll>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d189      	bne.n	80086c0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <xQueueReceive+0x1b4>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	e780      	b.n	80086c0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c0:	f000 f9c6 	bl	8008b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087c4:	f000 fc82 	bl	80090cc <xTaskResumeAll>
 80087c8:	e77a      	b.n	80086c0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087cc:	f000 f9c0 	bl	8008b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087d0:	f000 fc7c 	bl	80090cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d6:	f000 fa0d 	bl	8008bf4 <prvIsQueueEmpty>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f43f af6f 	beq.w	80086c0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3730      	adds	r7, #48	; 0x30
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	; 0x38
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d109      	bne.n	8008820 <xQueueSemaphoreTake+0x30>
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	623b      	str	r3, [r7, #32]
 800881e:	e7fe      	b.n	800881e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d009      	beq.n	800883c <xQueueSemaphoreTake+0x4c>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	e7fe      	b.n	800883a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800883c:	f000 fff6 	bl	800982c <xTaskGetSchedulerState>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <xQueueSemaphoreTake+0x5c>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <xQueueSemaphoreTake+0x60>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <xQueueSemaphoreTake+0x62>
 8008850:	2300      	movs	r3, #0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <xQueueSemaphoreTake+0x7a>
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	e7fe      	b.n	8008868 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800886a:	f001 fb37 	bl	8009edc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d024      	beq.n	80088c4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	1e5a      	subs	r2, r3, #1
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800888a:	f001 f989 	bl	8009ba0 <pvTaskIncrementMutexHeldCount>
 800888e:	4602      	mov	r2, r0
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00f      	beq.n	80088bc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	3310      	adds	r3, #16
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 fe0b 	bl	80094bc <xTaskRemoveFromEventList>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088ac:	4b53      	ldr	r3, [pc, #332]	; (80089fc <xQueueSemaphoreTake+0x20c>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088bc:	f001 fb3c 	bl	8009f38 <vPortExitCritical>
				return pdPASS;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e096      	b.n	80089f2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d110      	bne.n	80088ec <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d009      	beq.n	80088e4 <xQueueSemaphoreTake+0xf4>
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	e7fe      	b.n	80088e2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088e4:	f001 fb28 	bl	8009f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e082      	b.n	80089f2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f2:	f107 030c 	add.w	r3, r7, #12
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fe42 	bl	8009580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088fc:	2301      	movs	r3, #1
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008900:	f001 fb1a 	bl	8009f38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008904:	f000 fbd4 	bl	80090b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008908:	f001 fae8 	bl	8009edc <vPortEnterCritical>
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008912:	b25b      	sxtb	r3, r3
 8008914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008918:	d103      	bne.n	8008922 <xQueueSemaphoreTake+0x132>
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008928:	b25b      	sxtb	r3, r3
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d103      	bne.n	8008938 <xQueueSemaphoreTake+0x148>
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008938:	f001 fafe 	bl	8009f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800893c:	463a      	mov	r2, r7
 800893e:	f107 030c 	add.w	r3, r7, #12
 8008942:	4611      	mov	r1, r2
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fe31 	bl	80095ac <xTaskCheckForTimeOut>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d132      	bne.n	80089b6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008952:	f000 f94f 	bl	8008bf4 <prvIsQueueEmpty>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d026      	beq.n	80089aa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d109      	bne.n	8008978 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008964:	f001 faba 	bl	8009edc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 ff7b 	bl	8009868 <xTaskPriorityInherit>
 8008972:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008974:	f001 fae0 	bl	8009f38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	3324      	adds	r3, #36	; 0x24
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fd77 	bl	8009474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008988:	f000 f8e2 	bl	8008b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800898c:	f000 fb9e 	bl	80090cc <xTaskResumeAll>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	f47f af69 	bne.w	800886a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008998:	4b18      	ldr	r3, [pc, #96]	; (80089fc <xQueueSemaphoreTake+0x20c>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	e75f      	b.n	800886a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ac:	f000 f8d0 	bl	8008b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089b0:	f000 fb8c 	bl	80090cc <xTaskResumeAll>
 80089b4:	e759      	b.n	800886a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089b8:	f000 f8ca 	bl	8008b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089bc:	f000 fb86 	bl	80090cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089c2:	f000 f917 	bl	8008bf4 <prvIsQueueEmpty>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f43f af4e 	beq.w	800886a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00d      	beq.n	80089f0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80089d4:	f001 fa82 	bl	8009edc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089da:	f000 f811 	bl	8008a00 <prvGetDisinheritPriorityAfterTimeout>
 80089de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 f842 	bl	8009a70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80089ec:	f001 faa4 	bl	8009f38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3738      	adds	r7, #56	; 0x38
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f1c3 0307 	rsb	r3, r3, #7
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	e001      	b.n	8008a22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a22:	68fb      	ldr	r3, [r7, #12]
	}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10d      	bne.n	8008a6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d14d      	bne.n	8008af2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 ff84 	bl	8009968 <xTaskPriorityDisinherit>
 8008a60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	e043      	b.n	8008af2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d119      	bne.n	8008aa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6858      	ldr	r0, [r3, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	f015 fd30 	bl	801e4e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	441a      	add	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d32b      	bcc.n	8008af2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	605a      	str	r2, [r3, #4]
 8008aa2:	e026      	b.n	8008af2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68d8      	ldr	r0, [r3, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	461a      	mov	r2, r3
 8008aae:	68b9      	ldr	r1, [r7, #8]
 8008ab0:	f015 fd16 	bl	801e4e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	425b      	negs	r3, r3
 8008abe:	441a      	add	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d207      	bcs.n	8008ae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	425b      	negs	r3, r3
 8008ada:	441a      	add	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d105      	bne.n	8008af2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008afa:	697b      	ldr	r3, [r7, #20]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d018      	beq.n	8008b48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	441a      	add	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d303      	bcc.n	8008b38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68d9      	ldr	r1, [r3, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	461a      	mov	r2, r3
 8008b42:	6838      	ldr	r0, [r7, #0]
 8008b44:	f015 fccc 	bl	801e4e0 <memcpy>
	}
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b58:	f001 f9c0 	bl	8009edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b64:	e011      	b.n	8008b8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d012      	beq.n	8008b94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3324      	adds	r3, #36	; 0x24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fca2 	bl	80094bc <xTaskRemoveFromEventList>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b7e:	f000 fd75 	bl	800966c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dce9      	bgt.n	8008b66 <prvUnlockQueue+0x16>
 8008b92:	e000      	b.n	8008b96 <prvUnlockQueue+0x46>
					break;
 8008b94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	22ff      	movs	r2, #255	; 0xff
 8008b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b9e:	f001 f9cb 	bl	8009f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ba2:	f001 f99b 	bl	8009edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bae:	e011      	b.n	8008bd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d012      	beq.n	8008bde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3310      	adds	r3, #16
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fc7d 	bl	80094bc <xTaskRemoveFromEventList>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008bc8:	f000 fd50 	bl	800966c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dce9      	bgt.n	8008bb0 <prvUnlockQueue+0x60>
 8008bdc:	e000      	b.n	8008be0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	22ff      	movs	r2, #255	; 0xff
 8008be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008be8:	f001 f9a6 	bl	8009f38 <vPortExitCritical>
}
 8008bec:	bf00      	nop
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bfc:	f001 f96e 	bl	8009edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	e001      	b.n	8008c12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c12:	f001 f991 	bl	8009f38 <vPortExitCritical>

	return xReturn;
 8008c16:	68fb      	ldr	r3, [r7, #12]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c28:	f001 f958 	bl	8009edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d102      	bne.n	8008c3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e001      	b.n	8008c42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c42:	f001 f979 	bl	8009f38 <vPortExitCritical>

	return xReturn;
 8008c46:	68fb      	ldr	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	; 0x38
 8008c54:	af04      	add	r7, sp, #16
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <xTaskCreateStatic+0x28>
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	623b      	str	r3, [r7, #32]
 8008c76:	e7fe      	b.n	8008c76 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <xTaskCreateStatic+0x42>
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	61fb      	str	r3, [r7, #28]
 8008c90:	e7fe      	b.n	8008c90 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c92:	2360      	movs	r3, #96	; 0x60
 8008c94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b60      	cmp	r3, #96	; 0x60
 8008c9a:	d009      	beq.n	8008cb0 <xTaskCreateStatic+0x60>
 8008c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	e7fe      	b.n	8008cae <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01e      	beq.n	8008cf6 <xTaskCreateStatic+0xa6>
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d01b      	beq.n	8008cf6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9303      	str	r3, [sp, #12]
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	9302      	str	r3, [sp, #8]
 8008cd8:	f107 0314 	add.w	r3, r7, #20
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f850 	bl	8008d8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cf0:	f000 f8de 	bl	8008eb0 <prvAddNewTaskToReadyList>
 8008cf4:	e001      	b.n	8008cfa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cfa:	697b      	ldr	r3, [r7, #20]
	}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3728      	adds	r7, #40	; 0x28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	; 0x30
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f9f9 	bl	800a110 <pvPortMalloc>
 8008d1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d26:	2060      	movs	r0, #96	; 0x60
 8008d28:	f001 f9f2 	bl	800a110 <pvPortMalloc>
 8008d2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	631a      	str	r2, [r3, #48]	; 0x30
 8008d3a:	e005      	b.n	8008d48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d3c:	6978      	ldr	r0, [r7, #20]
 8008d3e:	f001 faad 	bl	800a29c <vPortFree>
 8008d42:	e001      	b.n	8008d48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d017      	beq.n	8008d7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d56:	88fa      	ldrh	r2, [r7, #6]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	9302      	str	r3, [sp, #8]
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68b9      	ldr	r1, [r7, #8]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f80e 	bl	8008d8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d72:	69f8      	ldr	r0, [r7, #28]
 8008d74:	f000 f89c 	bl	8008eb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e002      	b.n	8008d84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d84:	69bb      	ldr	r3, [r7, #24]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	461a      	mov	r2, r3
 8008da6:	21a5      	movs	r1, #165	; 0xa5
 8008da8:	f015 fba5 	bl	801e4f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008db6:	3b01      	subs	r3, #1
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f023 0307 	bic.w	r3, r3, #7
 8008dc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <prvInitialiseNewTask+0x56>
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e7fe      	b.n	8008de2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01f      	beq.n	8008e2a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	e012      	b.n	8008e16 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	7819      	ldrb	r1, [r3, #0]
 8008df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3334      	adds	r3, #52	; 0x34
 8008e00:	460a      	mov	r2, r1
 8008e02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d006      	beq.n	8008e1e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	3301      	adds	r3, #1
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	2b0f      	cmp	r3, #15
 8008e1a:	d9e9      	bls.n	8008df0 <prvInitialiseNewTask+0x62>
 8008e1c:	e000      	b.n	8008e20 <prvInitialiseNewTask+0x92>
			{
				break;
 8008e1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e28:	e003      	b.n	8008e32 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	2b06      	cmp	r3, #6
 8008e36:	d901      	bls.n	8008e3c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e38:	2306      	movs	r3, #6
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	3304      	adds	r3, #4
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff f879 	bl	8007f4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	3318      	adds	r3, #24
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7ff f874 	bl	8007f4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6a:	f1c3 0207 	rsb	r2, r3, #7
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	2200      	movs	r2, #0
 8008e82:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	69b8      	ldr	r0, [r7, #24]
 8008e92:	f000 feff 	bl	8009c94 <pxPortInitialiseStack>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ea8:	bf00      	nop
 8008eaa:	3720      	adds	r7, #32
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008eb8:	f001 f810 	bl	8009edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ebc:	4b2c      	ldr	r3, [pc, #176]	; (8008f70 <prvAddNewTaskToReadyList+0xc0>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	4a2b      	ldr	r2, [pc, #172]	; (8008f70 <prvAddNewTaskToReadyList+0xc0>)
 8008ec4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ec6:	4b2b      	ldr	r3, [pc, #172]	; (8008f74 <prvAddNewTaskToReadyList+0xc4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ece:	4a29      	ldr	r2, [pc, #164]	; (8008f74 <prvAddNewTaskToReadyList+0xc4>)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ed4:	4b26      	ldr	r3, [pc, #152]	; (8008f70 <prvAddNewTaskToReadyList+0xc0>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d110      	bne.n	8008efe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008edc:	f000 fbec 	bl	80096b8 <prvInitialiseTaskLists>
 8008ee0:	e00d      	b.n	8008efe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ee2:	4b25      	ldr	r3, [pc, #148]	; (8008f78 <prvAddNewTaskToReadyList+0xc8>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d109      	bne.n	8008efe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008eea:	4b22      	ldr	r3, [pc, #136]	; (8008f74 <prvAddNewTaskToReadyList+0xc4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d802      	bhi.n	8008efe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ef8:	4a1e      	ldr	r2, [pc, #120]	; (8008f74 <prvAddNewTaskToReadyList+0xc4>)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008efe:	4b1f      	ldr	r3, [pc, #124]	; (8008f7c <prvAddNewTaskToReadyList+0xcc>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <prvAddNewTaskToReadyList+0xcc>)
 8008f06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f08:	4b1c      	ldr	r3, [pc, #112]	; (8008f7c <prvAddNewTaskToReadyList+0xcc>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	2201      	movs	r2, #1
 8008f16:	409a      	lsls	r2, r3
 8008f18:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <prvAddNewTaskToReadyList+0xd0>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <prvAddNewTaskToReadyList+0xd0>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <prvAddNewTaskToReadyList+0xd4>)
 8008f30:	441a      	add	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7ff f813 	bl	8007f64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f3e:	f000 fffb 	bl	8009f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f42:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <prvAddNewTaskToReadyList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00e      	beq.n	8008f68 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvAddNewTaskToReadyList+0xc4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d207      	bcs.n	8008f68 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f58:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <prvAddNewTaskToReadyList+0xd8>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20025d68 	.word	0x20025d68
 8008f74:	20025c68 	.word	0x20025c68
 8008f78:	20025d74 	.word	0x20025d74
 8008f7c:	20025d84 	.word	0x20025d84
 8008f80:	20025d70 	.word	0x20025d70
 8008f84:	20025c6c 	.word	0x20025c6c
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d016      	beq.n	8008fcc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <vTaskDelay+0x60>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <vTaskDelay+0x2e>
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	60bb      	str	r3, [r7, #8]
 8008fb8:	e7fe      	b.n	8008fb8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008fba:	f000 f879 	bl	80090b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fe01 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008fc6:	f000 f881 	bl	80090cc <xTaskResumeAll>
 8008fca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d107      	bne.n	8008fe2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008fd2:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <vTaskDelay+0x64>)
 8008fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20025d90 	.word	0x20025d90
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08a      	sub	sp, #40	; 0x28
 8008ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009002:	463a      	mov	r2, r7
 8009004:	1d39      	adds	r1, r7, #4
 8009006:	f107 0308 	add.w	r3, r7, #8
 800900a:	4618      	mov	r0, r3
 800900c:	f7f7 fc70 	bl	80008f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	9202      	str	r2, [sp, #8]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	2300      	movs	r3, #0
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	460a      	mov	r2, r1
 8009022:	491d      	ldr	r1, [pc, #116]	; (8009098 <vTaskStartScheduler+0xa4>)
 8009024:	481d      	ldr	r0, [pc, #116]	; (800909c <vTaskStartScheduler+0xa8>)
 8009026:	f7ff fe13 	bl	8008c50 <xTaskCreateStatic>
 800902a:	4602      	mov	r2, r0
 800902c:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <vTaskStartScheduler+0xac>)
 800902e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009030:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <vTaskStartScheduler+0xac>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009038:	2301      	movs	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	e001      	b.n	8009042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d115      	bne.n	8009074 <vTaskStartScheduler+0x80>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <vTaskStartScheduler+0xb0>)
 800905c:	f04f 32ff 	mov.w	r2, #4294967295
 8009060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <vTaskStartScheduler+0xb4>)
 8009064:	2201      	movs	r2, #1
 8009066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009068:	4b10      	ldr	r3, [pc, #64]	; (80090ac <vTaskStartScheduler+0xb8>)
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800906e:	f000 fe97 	bl	8009da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009072:	e00d      	b.n	8009090 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907a:	d109      	bne.n	8009090 <vTaskStartScheduler+0x9c>
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	e7fe      	b.n	800908e <vTaskStartScheduler+0x9a>
}
 8009090:	bf00      	nop
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	0801f458 	.word	0x0801f458
 800909c:	08009685 	.word	0x08009685
 80090a0:	20025d8c 	.word	0x20025d8c
 80090a4:	20025d88 	.word	0x20025d88
 80090a8:	20025d74 	.word	0x20025d74
 80090ac:	20025d6c 	.word	0x20025d6c

080090b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <vTaskSuspendAll+0x18>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3301      	adds	r3, #1
 80090ba:	4a03      	ldr	r2, [pc, #12]	; (80090c8 <vTaskSuspendAll+0x18>)
 80090bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	20025d90 	.word	0x20025d90

080090cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090da:	4b41      	ldr	r3, [pc, #260]	; (80091e0 <xTaskResumeAll+0x114>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <xTaskResumeAll+0x2a>
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	e7fe      	b.n	80090f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090f6:	f000 fef1 	bl	8009edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090fa:	4b39      	ldr	r3, [pc, #228]	; (80091e0 <xTaskResumeAll+0x114>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3b01      	subs	r3, #1
 8009100:	4a37      	ldr	r2, [pc, #220]	; (80091e0 <xTaskResumeAll+0x114>)
 8009102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009104:	4b36      	ldr	r3, [pc, #216]	; (80091e0 <xTaskResumeAll+0x114>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d161      	bne.n	80091d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800910c:	4b35      	ldr	r3, [pc, #212]	; (80091e4 <xTaskResumeAll+0x118>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d05d      	beq.n	80091d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009114:	e02e      	b.n	8009174 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009116:	4b34      	ldr	r3, [pc, #208]	; (80091e8 <xTaskResumeAll+0x11c>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3318      	adds	r3, #24
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ff7b 	bl	800801e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe ff76 	bl	800801e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009136:	2201      	movs	r2, #1
 8009138:	409a      	lsls	r2, r3
 800913a:	4b2c      	ldr	r3, [pc, #176]	; (80091ec <xTaskResumeAll+0x120>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	4a2a      	ldr	r2, [pc, #168]	; (80091ec <xTaskResumeAll+0x120>)
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a27      	ldr	r2, [pc, #156]	; (80091f0 <xTaskResumeAll+0x124>)
 8009152:	441a      	add	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fe ff02 	bl	8007f64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009164:	4b23      	ldr	r3, [pc, #140]	; (80091f4 <xTaskResumeAll+0x128>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916a:	429a      	cmp	r2, r3
 800916c:	d302      	bcc.n	8009174 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800916e:	4b22      	ldr	r3, [pc, #136]	; (80091f8 <xTaskResumeAll+0x12c>)
 8009170:	2201      	movs	r2, #1
 8009172:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009174:	4b1c      	ldr	r3, [pc, #112]	; (80091e8 <xTaskResumeAll+0x11c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1cc      	bne.n	8009116 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009182:	f000 fb33 	bl	80097ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009186:	4b1d      	ldr	r3, [pc, #116]	; (80091fc <xTaskResumeAll+0x130>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d010      	beq.n	80091b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009192:	f000 f837 	bl	8009204 <xTaskIncrementTick>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800919c:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <xTaskResumeAll+0x12c>)
 800919e:	2201      	movs	r2, #1
 80091a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f1      	bne.n	8009192 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80091ae:	4b13      	ldr	r3, [pc, #76]	; (80091fc <xTaskResumeAll+0x130>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091b4:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <xTaskResumeAll+0x12c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091bc:	2301      	movs	r3, #1
 80091be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091c0:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <xTaskResumeAll+0x134>)
 80091c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091d0:	f000 feb2 	bl	8009f38 <vPortExitCritical>

	return xAlreadyYielded;
 80091d4:	68bb      	ldr	r3, [r7, #8]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20025d90 	.word	0x20025d90
 80091e4:	20025d68 	.word	0x20025d68
 80091e8:	20025d28 	.word	0x20025d28
 80091ec:	20025d70 	.word	0x20025d70
 80091f0:	20025c6c 	.word	0x20025c6c
 80091f4:	20025c68 	.word	0x20025c68
 80091f8:	20025d7c 	.word	0x20025d7c
 80091fc:	20025d78 	.word	0x20025d78
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800920e:	4b4e      	ldr	r3, [pc, #312]	; (8009348 <xTaskIncrementTick+0x144>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f040 8087 	bne.w	8009326 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009218:	4b4c      	ldr	r3, [pc, #304]	; (800934c <xTaskIncrementTick+0x148>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3301      	adds	r3, #1
 800921e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009220:	4a4a      	ldr	r2, [pc, #296]	; (800934c <xTaskIncrementTick+0x148>)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d11f      	bne.n	800926c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800922c:	4b48      	ldr	r3, [pc, #288]	; (8009350 <xTaskIncrementTick+0x14c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <xTaskIncrementTick+0x46>
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	e7fe      	b.n	8009248 <xTaskIncrementTick+0x44>
 800924a:	4b41      	ldr	r3, [pc, #260]	; (8009350 <xTaskIncrementTick+0x14c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	4b40      	ldr	r3, [pc, #256]	; (8009354 <xTaskIncrementTick+0x150>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a3e      	ldr	r2, [pc, #248]	; (8009350 <xTaskIncrementTick+0x14c>)
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	4a3e      	ldr	r2, [pc, #248]	; (8009354 <xTaskIncrementTick+0x150>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	4b3e      	ldr	r3, [pc, #248]	; (8009358 <xTaskIncrementTick+0x154>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3301      	adds	r3, #1
 8009264:	4a3c      	ldr	r2, [pc, #240]	; (8009358 <xTaskIncrementTick+0x154>)
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	f000 fac0 	bl	80097ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800926c:	4b3b      	ldr	r3, [pc, #236]	; (800935c <xTaskIncrementTick+0x158>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	429a      	cmp	r2, r3
 8009274:	d348      	bcc.n	8009308 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009276:	4b36      	ldr	r3, [pc, #216]	; (8009350 <xTaskIncrementTick+0x14c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009280:	4b36      	ldr	r3, [pc, #216]	; (800935c <xTaskIncrementTick+0x158>)
 8009282:	f04f 32ff 	mov.w	r2, #4294967295
 8009286:	601a      	str	r2, [r3, #0]
					break;
 8009288:	e03e      	b.n	8009308 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928a:	4b31      	ldr	r3, [pc, #196]	; (8009350 <xTaskIncrementTick+0x14c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d203      	bcs.n	80092aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092a2:	4a2e      	ldr	r2, [pc, #184]	; (800935c <xTaskIncrementTick+0x158>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092a8:	e02e      	b.n	8009308 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	3304      	adds	r3, #4
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fe feb5 	bl	800801e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3318      	adds	r3, #24
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe feac 	bl	800801e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ca:	2201      	movs	r2, #1
 80092cc:	409a      	lsls	r2, r3
 80092ce:	4b24      	ldr	r3, [pc, #144]	; (8009360 <xTaskIncrementTick+0x15c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	4a22      	ldr	r2, [pc, #136]	; (8009360 <xTaskIncrementTick+0x15c>)
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	4613      	mov	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4413      	add	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a1f      	ldr	r2, [pc, #124]	; (8009364 <xTaskIncrementTick+0x160>)
 80092e6:	441a      	add	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe fe38 	bl	8007f64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	4b1b      	ldr	r3, [pc, #108]	; (8009368 <xTaskIncrementTick+0x164>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	429a      	cmp	r2, r3
 8009300:	d3b9      	bcc.n	8009276 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009302:	2301      	movs	r3, #1
 8009304:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009306:	e7b6      	b.n	8009276 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009308:	4b17      	ldr	r3, [pc, #92]	; (8009368 <xTaskIncrementTick+0x164>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930e:	4915      	ldr	r1, [pc, #84]	; (8009364 <xTaskIncrementTick+0x160>)
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d907      	bls.n	8009330 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e004      	b.n	8009330 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009326:	4b11      	ldr	r3, [pc, #68]	; (800936c <xTaskIncrementTick+0x168>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3301      	adds	r3, #1
 800932c:	4a0f      	ldr	r2, [pc, #60]	; (800936c <xTaskIncrementTick+0x168>)
 800932e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009330:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <xTaskIncrementTick+0x16c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009338:	2301      	movs	r3, #1
 800933a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800933c:	697b      	ldr	r3, [r7, #20]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20025d90 	.word	0x20025d90
 800934c:	20025d6c 	.word	0x20025d6c
 8009350:	20025d20 	.word	0x20025d20
 8009354:	20025d24 	.word	0x20025d24
 8009358:	20025d80 	.word	0x20025d80
 800935c:	20025d88 	.word	0x20025d88
 8009360:	20025d70 	.word	0x20025d70
 8009364:	20025c6c 	.word	0x20025c6c
 8009368:	20025c68 	.word	0x20025c68
 800936c:	20025d78 	.word	0x20025d78
 8009370:	20025d7c 	.word	0x20025d7c

08009374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800937a:	4b39      	ldr	r3, [pc, #228]	; (8009460 <vTaskSwitchContext+0xec>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009382:	4b38      	ldr	r3, [pc, #224]	; (8009464 <vTaskSwitchContext+0xf0>)
 8009384:	2201      	movs	r2, #1
 8009386:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009388:	e065      	b.n	8009456 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800938a:	4b36      	ldr	r3, [pc, #216]	; (8009464 <vTaskSwitchContext+0xf0>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009390:	4b35      	ldr	r3, [pc, #212]	; (8009468 <vTaskSwitchContext+0xf4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800939c:	61bb      	str	r3, [r7, #24]
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d111      	bne.n	80093cc <vTaskSwitchContext+0x58>
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	3304      	adds	r3, #4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d10b      	bne.n	80093cc <vTaskSwitchContext+0x58>
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3308      	adds	r3, #8
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d105      	bne.n	80093cc <vTaskSwitchContext+0x58>
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	330c      	adds	r3, #12
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d008      	beq.n	80093de <vTaskSwitchContext+0x6a>
 80093cc:	4b26      	ldr	r3, [pc, #152]	; (8009468 <vTaskSwitchContext+0xf4>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	4b25      	ldr	r3, [pc, #148]	; (8009468 <vTaskSwitchContext+0xf4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3334      	adds	r3, #52	; 0x34
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f7f7 fa76 	bl	80008ca <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093de:	4b23      	ldr	r3, [pc, #140]	; (800946c <vTaskSwitchContext+0xf8>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	fab3 f383 	clz	r3, r3
 80093ea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	f1c3 031f 	rsb	r3, r3, #31
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	491e      	ldr	r1, [pc, #120]	; (8009470 <vTaskSwitchContext+0xfc>)
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	440b      	add	r3, r1
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <vTaskSwitchContext+0xa8>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	e7fe      	b.n	800941a <vTaskSwitchContext+0xa6>
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a12      	ldr	r2, [pc, #72]	; (8009470 <vTaskSwitchContext+0xfc>)
 8009428:	4413      	add	r3, r2
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	605a      	str	r2, [r3, #4]
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3308      	adds	r3, #8
 800943e:	429a      	cmp	r2, r3
 8009440:	d104      	bne.n	800944c <vTaskSwitchContext+0xd8>
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	605a      	str	r2, [r3, #4]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	4a05      	ldr	r2, [pc, #20]	; (8009468 <vTaskSwitchContext+0xf4>)
 8009454:	6013      	str	r3, [r2, #0]
}
 8009456:	bf00      	nop
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20025d90 	.word	0x20025d90
 8009464:	20025d7c 	.word	0x20025d7c
 8009468:	20025c68 	.word	0x20025c68
 800946c:	20025d70 	.word	0x20025d70
 8009470:	20025c6c 	.word	0x20025c6c

08009474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d109      	bne.n	8009498 <vTaskPlaceOnEventList+0x24>
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	e7fe      	b.n	8009496 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <vTaskPlaceOnEventList+0x44>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3318      	adds	r3, #24
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7fe fd83 	bl	8007fac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094a6:	2101      	movs	r1, #1
 80094a8:	6838      	ldr	r0, [r7, #0]
 80094aa:	f000 fb8d 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20025c68 	.word	0x20025c68

080094bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <xTaskRemoveFromEventList+0x2a>
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e7fe      	b.n	80094e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	3318      	adds	r3, #24
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fd97 	bl	800801e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f0:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <xTaskRemoveFromEventList+0xac>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11c      	bne.n	8009532 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe fd8e 	bl	800801e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	2201      	movs	r2, #1
 8009508:	409a      	lsls	r2, r3
 800950a:	4b18      	ldr	r3, [pc, #96]	; (800956c <xTaskRemoveFromEventList+0xb0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4313      	orrs	r3, r2
 8009510:	4a16      	ldr	r2, [pc, #88]	; (800956c <xTaskRemoveFromEventList+0xb0>)
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4a13      	ldr	r2, [pc, #76]	; (8009570 <xTaskRemoveFromEventList+0xb4>)
 8009522:	441a      	add	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	3304      	adds	r3, #4
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f7fe fd1a 	bl	8007f64 <vListInsertEnd>
 8009530:	e005      	b.n	800953e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3318      	adds	r3, #24
 8009536:	4619      	mov	r1, r3
 8009538:	480e      	ldr	r0, [pc, #56]	; (8009574 <xTaskRemoveFromEventList+0xb8>)
 800953a:	f7fe fd13 	bl	8007f64 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <xTaskRemoveFromEventList+0xbc>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	429a      	cmp	r2, r3
 800954a:	d905      	bls.n	8009558 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <xTaskRemoveFromEventList+0xc0>)
 8009552:	2201      	movs	r2, #1
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	e001      	b.n	800955c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800955c:	697b      	ldr	r3, [r7, #20]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20025d90 	.word	0x20025d90
 800956c:	20025d70 	.word	0x20025d70
 8009570:	20025c6c 	.word	0x20025c6c
 8009574:	20025d28 	.word	0x20025d28
 8009578:	20025c68 	.word	0x20025c68
 800957c:	20025d7c 	.word	0x20025d7c

08009580 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <vTaskInternalSetTimeOutState+0x24>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <vTaskInternalSetTimeOutState+0x28>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	605a      	str	r2, [r3, #4]
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	20025d80 	.word	0x20025d80
 80095a8:	20025d6c 	.word	0x20025d6c

080095ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d109      	bne.n	80095d0 <xTaskCheckForTimeOut+0x24>
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	e7fe      	b.n	80095ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <xTaskCheckForTimeOut+0x3e>
 80095d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	e7fe      	b.n	80095e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80095ea:	f000 fc77 	bl	8009edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095ee:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <xTaskCheckForTimeOut+0xb8>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d102      	bne.n	800960e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
 800960c:	e023      	b.n	8009656 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b15      	ldr	r3, [pc, #84]	; (8009668 <xTaskCheckForTimeOut+0xbc>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d007      	beq.n	800962a <xTaskCheckForTimeOut+0x7e>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	429a      	cmp	r2, r3
 8009622:	d302      	bcc.n	800962a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	e015      	b.n	8009656 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	429a      	cmp	r2, r3
 8009632:	d20b      	bcs.n	800964c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	1ad2      	subs	r2, r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff ff9d 	bl	8009580 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	e004      	b.n	8009656 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009656:	f000 fc6f 	bl	8009f38 <vPortExitCritical>

	return xReturn;
 800965a:	69fb      	ldr	r3, [r7, #28]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3720      	adds	r7, #32
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20025d6c 	.word	0x20025d6c
 8009668:	20025d80 	.word	0x20025d80

0800966c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009670:	4b03      	ldr	r3, [pc, #12]	; (8009680 <vTaskMissedYield+0x14>)
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
}
 8009676:	bf00      	nop
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20025d7c 	.word	0x20025d7c

08009684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800968c:	f000 f854 	bl	8009738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <prvIdleTask+0x2c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d907      	bls.n	80096a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <prvIdleTask+0x30>)
 800969a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80096a8:	f7f7 f908 	bl	80008bc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80096ac:	e7ee      	b.n	800968c <prvIdleTask+0x8>
 80096ae:	bf00      	nop
 80096b0:	20025c6c 	.word	0x20025c6c
 80096b4:	e000ed04 	.word	0xe000ed04

080096b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096be:	2300      	movs	r3, #0
 80096c0:	607b      	str	r3, [r7, #4]
 80096c2:	e00c      	b.n	80096de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4a12      	ldr	r2, [pc, #72]	; (8009718 <prvInitialiseTaskLists+0x60>)
 80096d0:	4413      	add	r3, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fc19 	bl	8007f0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3301      	adds	r3, #1
 80096dc:	607b      	str	r3, [r7, #4]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b06      	cmp	r3, #6
 80096e2:	d9ef      	bls.n	80096c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096e4:	480d      	ldr	r0, [pc, #52]	; (800971c <prvInitialiseTaskLists+0x64>)
 80096e6:	f7fe fc10 	bl	8007f0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096ea:	480d      	ldr	r0, [pc, #52]	; (8009720 <prvInitialiseTaskLists+0x68>)
 80096ec:	f7fe fc0d 	bl	8007f0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096f0:	480c      	ldr	r0, [pc, #48]	; (8009724 <prvInitialiseTaskLists+0x6c>)
 80096f2:	f7fe fc0a 	bl	8007f0a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096f6:	480c      	ldr	r0, [pc, #48]	; (8009728 <prvInitialiseTaskLists+0x70>)
 80096f8:	f7fe fc07 	bl	8007f0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096fc:	480b      	ldr	r0, [pc, #44]	; (800972c <prvInitialiseTaskLists+0x74>)
 80096fe:	f7fe fc04 	bl	8007f0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009702:	4b0b      	ldr	r3, [pc, #44]	; (8009730 <prvInitialiseTaskLists+0x78>)
 8009704:	4a05      	ldr	r2, [pc, #20]	; (800971c <prvInitialiseTaskLists+0x64>)
 8009706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009708:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <prvInitialiseTaskLists+0x7c>)
 800970a:	4a05      	ldr	r2, [pc, #20]	; (8009720 <prvInitialiseTaskLists+0x68>)
 800970c:	601a      	str	r2, [r3, #0]
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20025c6c 	.word	0x20025c6c
 800971c:	20025cf8 	.word	0x20025cf8
 8009720:	20025d0c 	.word	0x20025d0c
 8009724:	20025d28 	.word	0x20025d28
 8009728:	20025d3c 	.word	0x20025d3c
 800972c:	20025d54 	.word	0x20025d54
 8009730:	20025d20 	.word	0x20025d20
 8009734:	20025d24 	.word	0x20025d24

08009738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800973e:	e019      	b.n	8009774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009740:	f000 fbcc 	bl	8009edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009744:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <prvCheckTasksWaitingTermination+0x4c>)
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3304      	adds	r3, #4
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe fc64 	bl	800801e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009756:	4b0c      	ldr	r3, [pc, #48]	; (8009788 <prvCheckTasksWaitingTermination+0x50>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3b01      	subs	r3, #1
 800975c:	4a0a      	ldr	r2, [pc, #40]	; (8009788 <prvCheckTasksWaitingTermination+0x50>)
 800975e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <prvCheckTasksWaitingTermination+0x54>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3b01      	subs	r3, #1
 8009766:	4a09      	ldr	r2, [pc, #36]	; (800978c <prvCheckTasksWaitingTermination+0x54>)
 8009768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800976a:	f000 fbe5 	bl	8009f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f80e 	bl	8009790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009774:	4b05      	ldr	r3, [pc, #20]	; (800978c <prvCheckTasksWaitingTermination+0x54>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e1      	bne.n	8009740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20025d3c 	.word	0x20025d3c
 8009788:	20025d68 	.word	0x20025d68
 800978c:	20025d50 	.word	0x20025d50

08009790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d108      	bne.n	80097b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fd78 	bl	800a29c <vPortFree>
				vPortFree( pxTCB );
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fd75 	bl	800a29c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b2:	e017      	b.n	80097e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d103      	bne.n	80097c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fd6c 	bl	800a29c <vPortFree>
	}
 80097c4:	e00e      	b.n	80097e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d009      	beq.n	80097e4 <prvDeleteTCB+0x54>
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e7fe      	b.n	80097e2 <prvDeleteTCB+0x52>
	}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <prvResetNextTaskUnblockTime+0x38>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <prvResetNextTaskUnblockTime+0x3c>)
 80097fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009804:	e008      	b.n	8009818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <prvResetNextTaskUnblockTime+0x38>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4a04      	ldr	r2, [pc, #16]	; (8009828 <prvResetNextTaskUnblockTime+0x3c>)
 8009816:	6013      	str	r3, [r2, #0]
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20025d20 	.word	0x20025d20
 8009828:	20025d88 	.word	0x20025d88

0800982c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009832:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <xTaskGetSchedulerState+0x34>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d102      	bne.n	8009840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800983a:	2301      	movs	r3, #1
 800983c:	607b      	str	r3, [r7, #4]
 800983e:	e008      	b.n	8009852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <xTaskGetSchedulerState+0x38>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009848:	2302      	movs	r3, #2
 800984a:	607b      	str	r3, [r7, #4]
 800984c:	e001      	b.n	8009852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800984e:	2300      	movs	r3, #0
 8009850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009852:	687b      	ldr	r3, [r7, #4]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20025d74 	.word	0x20025d74
 8009864:	20025d90 	.word	0x20025d90

08009868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d069      	beq.n	8009952 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009882:	4b36      	ldr	r3, [pc, #216]	; (800995c <xTaskPriorityInherit+0xf4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d259      	bcs.n	8009940 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	db06      	blt.n	80098a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009894:	4b31      	ldr	r3, [pc, #196]	; (800995c <xTaskPriorityInherit+0xf4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989a:	f1c3 0207 	rsb	r2, r3, #7
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6959      	ldr	r1, [r3, #20]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098aa:	4613      	mov	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4a2b      	ldr	r2, [pc, #172]	; (8009960 <xTaskPriorityInherit+0xf8>)
 80098b4:	4413      	add	r3, r2
 80098b6:	4299      	cmp	r1, r3
 80098b8:	d13a      	bne.n	8009930 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fbad 	bl	800801e <uxListRemove>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d115      	bne.n	80098f6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ce:	4924      	ldr	r1, [pc, #144]	; (8009960 <xTaskPriorityInherit+0xf8>)
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xTaskPriorityInherit+0x8e>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	2201      	movs	r2, #1
 80098e6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ea:	43da      	mvns	r2, r3
 80098ec:	4b1d      	ldr	r3, [pc, #116]	; (8009964 <xTaskPriorityInherit+0xfc>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4013      	ands	r3, r2
 80098f2:	4a1c      	ldr	r2, [pc, #112]	; (8009964 <xTaskPriorityInherit+0xfc>)
 80098f4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098f6:	4b19      	ldr	r3, [pc, #100]	; (800995c <xTaskPriorityInherit+0xf4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	2201      	movs	r2, #1
 8009906:	409a      	lsls	r2, r3
 8009908:	4b16      	ldr	r3, [pc, #88]	; (8009964 <xTaskPriorityInherit+0xfc>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4313      	orrs	r3, r2
 800990e:	4a15      	ldr	r2, [pc, #84]	; (8009964 <xTaskPriorityInherit+0xfc>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4a10      	ldr	r2, [pc, #64]	; (8009960 <xTaskPriorityInherit+0xf8>)
 8009920:	441a      	add	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fe fb1b 	bl	8007f64 <vListInsertEnd>
 800992e:	e004      	b.n	800993a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <xTaskPriorityInherit+0xf4>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800993a:	2301      	movs	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	e008      	b.n	8009952 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009944:	4b05      	ldr	r3, [pc, #20]	; (800995c <xTaskPriorityInherit+0xf4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994a:	429a      	cmp	r2, r3
 800994c:	d201      	bcs.n	8009952 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800994e:	2301      	movs	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009952:	68fb      	ldr	r3, [r7, #12]
	}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20025c68 	.word	0x20025c68
 8009960:	20025c6c 	.word	0x20025c6c
 8009964:	20025d70 	.word	0x20025d70

08009968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d06c      	beq.n	8009a58 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800997e:	4b39      	ldr	r3, [pc, #228]	; (8009a64 <xTaskPriorityDisinherit+0xfc>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	429a      	cmp	r2, r3
 8009986:	d009      	beq.n	800999c <xTaskPriorityDisinherit+0x34>
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	e7fe      	b.n	800999a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <xTaskPriorityDisinherit+0x50>
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	60bb      	str	r3, [r7, #8]
 80099b6:	e7fe      	b.n	80099b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099bc:	1e5a      	subs	r2, r3, #1
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d044      	beq.n	8009a58 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d140      	bne.n	8009a58 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	3304      	adds	r3, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fb1f 	bl	800801e <uxListRemove>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d115      	bne.n	8009a12 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ea:	491f      	ldr	r1, [pc, #124]	; (8009a68 <xTaskPriorityDisinherit+0x100>)
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	440b      	add	r3, r1
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <xTaskPriorityDisinherit+0xaa>
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	2201      	movs	r2, #1
 8009a02:	fa02 f303 	lsl.w	r3, r2, r3
 8009a06:	43da      	mvns	r2, r3
 8009a08:	4b18      	ldr	r3, [pc, #96]	; (8009a6c <xTaskPriorityDisinherit+0x104>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <xTaskPriorityDisinherit+0x104>)
 8009a10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1e:	f1c3 0207 	rsb	r2, r3, #7
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	409a      	lsls	r2, r3
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <xTaskPriorityDisinherit+0x104>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	4a0d      	ldr	r2, [pc, #52]	; (8009a6c <xTaskPriorityDisinherit+0x104>)
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <xTaskPriorityDisinherit+0x100>)
 8009a46:	441a      	add	r2, r3
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f7fe fa88 	bl	8007f64 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a58:	697b      	ldr	r3, [r7, #20]
	}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20025c68 	.word	0x20025c68
 8009a68:	20025c6c 	.word	0x20025c6c
 8009a6c:	20025d70 	.word	0x20025d70

08009a70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8081 	beq.w	8009b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d109      	bne.n	8009aa6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	e7fe      	b.n	8009aa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d902      	bls.n	8009ab6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	e002      	b.n	8009abc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d062      	beq.n	8009b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d15d      	bne.n	8009b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009ad0:	4b30      	ldr	r3, [pc, #192]	; (8009b94 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	69ba      	ldr	r2, [r7, #24]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d109      	bne.n	8009aee <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	60bb      	str	r3, [r7, #8]
 8009aec:	e7fe      	b.n	8009aec <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	db04      	blt.n	8009b0c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	f1c3 0207 	rsb	r2, r3, #7
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	6959      	ldr	r1, [r3, #20]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	; (8009b98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4299      	cmp	r1, r3
 8009b20:	d134      	bne.n	8009b8c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	3304      	adds	r3, #4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fa79 	bl	800801e <uxListRemove>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d115      	bne.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b36:	4918      	ldr	r1, [pc, #96]	; (8009b98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b52:	43da      	mvns	r2, r3
 8009b54:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	4a10      	ldr	r2, [pc, #64]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009b5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b62:	2201      	movs	r2, #1
 8009b64:	409a      	lsls	r2, r3
 8009b66:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	4a0b      	ldr	r2, [pc, #44]	; (8009b9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4a06      	ldr	r2, [pc, #24]	; (8009b98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009b7e:	441a      	add	r2, r3
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f7fe f9ec 	bl	8007f64 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b8c:	bf00      	nop
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20025c68 	.word	0x20025c68
 8009b98:	20025c6c 	.word	0x20025c6c
 8009b9c:	20025d70 	.word	0x20025d70

08009ba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bb2:	3201      	adds	r2, #1
 8009bb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
	}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	20025c68 	.word	0x20025c68

08009bc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bd2:	4b29      	ldr	r3, [pc, #164]	; (8009c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bd8:	4b28      	ldr	r3, [pc, #160]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fa1d 	bl	800801e <uxListRemove>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bea:	4b24      	ldr	r3, [pc, #144]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	43da      	mvns	r2, r3
 8009bf8:	4b21      	ldr	r3, [pc, #132]	; (8009c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	4a20      	ldr	r2, [pc, #128]	; (8009c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c08:	d10a      	bne.n	8009c20 <prvAddCurrentTaskToDelayedList+0x58>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	481a      	ldr	r0, [pc, #104]	; (8009c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c1a:	f7fe f9a3 	bl	8007f64 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c1e:	e026      	b.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c28:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d209      	bcs.n	8009c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c38:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7fe f9b1 	bl	8007fac <vListInsert>
}
 8009c4a:	e010      	b.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f7fe f9a7 	bl	8007fac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d202      	bcs.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c68:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6013      	str	r3, [r2, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20025d6c 	.word	0x20025d6c
 8009c7c:	20025c68 	.word	0x20025c68
 8009c80:	20025d70 	.word	0x20025d70
 8009c84:	20025d54 	.word	0x20025d54
 8009c88:	20025d24 	.word	0x20025d24
 8009c8c:	20025d20 	.word	0x20025d20
 8009c90:	20025d88 	.word	0x20025d88

08009c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3b04      	subs	r3, #4
 8009ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f023 0201 	bic.w	r2, r3, #1
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3b04      	subs	r3, #4
 8009cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cc4:	4a0c      	ldr	r2, [pc, #48]	; (8009cf8 <pxPortInitialiseStack+0x64>)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3b14      	subs	r3, #20
 8009cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f06f 0202 	mvn.w	r2, #2
 8009ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3b20      	subs	r3, #32
 8009ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cea:	68fb      	ldr	r3, [r7, #12]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	08009cfd 	.word	0x08009cfd

08009cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d06:	4b11      	ldr	r3, [pc, #68]	; (8009d4c <prvTaskExitError+0x50>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d009      	beq.n	8009d24 <prvTaskExitError+0x28>
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	e7fe      	b.n	8009d22 <prvTaskExitError+0x26>
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d36:	bf00      	nop
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0fc      	beq.n	8009d38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	20000078 	.word	0x20000078

08009d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <pxCurrentTCBConst2>)
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	6808      	ldr	r0, [r1, #0]
 8009d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	f380 8809 	msr	PSP, r0
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8811 	msr	BASEPRI, r0
 8009d6a:	4770      	bx	lr
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst2>:
 8009d70:	20025c68 	.word	0x20025c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d78:	4808      	ldr	r0, [pc, #32]	; (8009d9c <prvPortStartFirstTask+0x24>)
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	6800      	ldr	r0, [r0, #0]
 8009d7e:	f380 8808 	msr	MSP, r0
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8814 	msr	CONTROL, r0
 8009d8a:	b662      	cpsie	i
 8009d8c:	b661      	cpsie	f
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	df00      	svc	0
 8009d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d9a:	bf00      	nop
 8009d9c:	e000ed08 	.word	0xe000ed08

08009da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009da6:	4b44      	ldr	r3, [pc, #272]	; (8009eb8 <xPortStartScheduler+0x118>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a44      	ldr	r2, [pc, #272]	; (8009ebc <xPortStartScheduler+0x11c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d109      	bne.n	8009dc4 <xPortStartScheduler+0x24>
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	613b      	str	r3, [r7, #16]
 8009dc2:	e7fe      	b.n	8009dc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dc4:	4b3c      	ldr	r3, [pc, #240]	; (8009eb8 <xPortStartScheduler+0x118>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a3d      	ldr	r2, [pc, #244]	; (8009ec0 <xPortStartScheduler+0x120>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d109      	bne.n	8009de2 <xPortStartScheduler+0x42>
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e7fe      	b.n	8009de0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009de2:	4b38      	ldr	r3, [pc, #224]	; (8009ec4 <xPortStartScheduler+0x124>)
 8009de4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	22ff      	movs	r2, #255	; 0xff
 8009df2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	4b30      	ldr	r3, [pc, #192]	; (8009ec8 <xPortStartScheduler+0x128>)
 8009e08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e0a:	4b30      	ldr	r3, [pc, #192]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e10:	e009      	b.n	8009e26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009e12:	4b2e      	ldr	r3, [pc, #184]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	4a2c      	ldr	r2, [pc, #176]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e1c:	78fb      	ldrb	r3, [r7, #3]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	005b      	lsls	r3, r3, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2e:	2b80      	cmp	r3, #128	; 0x80
 8009e30:	d0ef      	beq.n	8009e12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e32:	4b26      	ldr	r3, [pc, #152]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f1c3 0307 	rsb	r3, r3, #7
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d009      	beq.n	8009e52 <xPortStartScheduler+0xb2>
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60bb      	str	r3, [r7, #8]
 8009e50:	e7fe      	b.n	8009e50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e52:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	4a1c      	ldr	r2, [pc, #112]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e64:	4a19      	ldr	r2, [pc, #100]	; (8009ecc <xPortStartScheduler+0x12c>)
 8009e66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e70:	4b17      	ldr	r3, [pc, #92]	; (8009ed0 <xPortStartScheduler+0x130>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a16      	ldr	r2, [pc, #88]	; (8009ed0 <xPortStartScheduler+0x130>)
 8009e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e7c:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <xPortStartScheduler+0x130>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a13      	ldr	r2, [pc, #76]	; (8009ed0 <xPortStartScheduler+0x130>)
 8009e82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e88:	f000 f8d6 	bl	800a038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e8c:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <xPortStartScheduler+0x134>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e92:	f000 f8f5 	bl	800a080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e96:	4b10      	ldr	r3, [pc, #64]	; (8009ed8 <xPortStartScheduler+0x138>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a0f      	ldr	r2, [pc, #60]	; (8009ed8 <xPortStartScheduler+0x138>)
 8009e9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ea0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ea2:	f7ff ff69 	bl	8009d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ea6:	f7ff fa65 	bl	8009374 <vTaskSwitchContext>
	prvTaskExitError();
 8009eaa:	f7ff ff27 	bl	8009cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	e000ed00 	.word	0xe000ed00
 8009ebc:	410fc271 	.word	0x410fc271
 8009ec0:	410fc270 	.word	0x410fc270
 8009ec4:	e000e400 	.word	0xe000e400
 8009ec8:	20025d94 	.word	0x20025d94
 8009ecc:	20025d98 	.word	0x20025d98
 8009ed0:	e000ed20 	.word	0xe000ed20
 8009ed4:	20000078 	.word	0x20000078
 8009ed8:	e000ef34 	.word	0xe000ef34

08009edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <vPortEnterCritical+0x54>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <vPortEnterCritical+0x54>)
 8009efc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009efe:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <vPortEnterCritical+0x54>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d10e      	bne.n	8009f24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f06:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <vPortEnterCritical+0x58>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d009      	beq.n	8009f24 <vPortEnterCritical+0x48>
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	603b      	str	r3, [r7, #0]
 8009f22:	e7fe      	b.n	8009f22 <vPortEnterCritical+0x46>
	}
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20000078 	.word	0x20000078
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f3e:	4b11      	ldr	r3, [pc, #68]	; (8009f84 <vPortExitCritical+0x4c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d109      	bne.n	8009f5a <vPortExitCritical+0x22>
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	e7fe      	b.n	8009f58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <vPortExitCritical+0x4c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	4a08      	ldr	r2, [pc, #32]	; (8009f84 <vPortExitCritical+0x4c>)
 8009f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f64:	4b07      	ldr	r3, [pc, #28]	; (8009f84 <vPortExitCritical+0x4c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <vPortExitCritical+0x3e>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20000078 	.word	0x20000078
	...

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7ff f9d8 	bl	8009374 <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	20025c68 	.word	0x20025c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a010:	f7ff f8f8 	bl	8009204 <xTaskIncrementTick>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01a:	4b06      	ldr	r3, [pc, #24]	; (800a034 <SysTick_Handler+0x3c>)
 800a01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	2300      	movs	r3, #0
 800a024:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a02c:	bf00      	nop
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a03c:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <vPortSetupTimerInterrupt+0x34>)
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a042:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortSetupTimerInterrupt+0x38>)
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <vPortSetupTimerInterrupt+0x3c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a0a      	ldr	r2, [pc, #40]	; (800a078 <vPortSetupTimerInterrupt+0x40>)
 800a04e:	fba2 2303 	umull	r2, r3, r2, r3
 800a052:	099b      	lsrs	r3, r3, #6
 800a054:	4a09      	ldr	r2, [pc, #36]	; (800a07c <vPortSetupTimerInterrupt+0x44>)
 800a056:	3b01      	subs	r3, #1
 800a058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a05a:	4b04      	ldr	r3, [pc, #16]	; (800a06c <vPortSetupTimerInterrupt+0x34>)
 800a05c:	2207      	movs	r2, #7
 800a05e:	601a      	str	r2, [r3, #0]
}
 800a060:	bf00      	nop
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	e000e010 	.word	0xe000e010
 800a070:	e000e018 	.word	0xe000e018
 800a074:	20000004 	.word	0x20000004
 800a078:	10624dd3 	.word	0x10624dd3
 800a07c:	e000e014 	.word	0xe000e014

0800a080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a090 <vPortEnableVFP+0x10>
 800a084:	6801      	ldr	r1, [r0, #0]
 800a086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a08a:	6001      	str	r1, [r0, #0]
 800a08c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a08e:	bf00      	nop
 800a090:	e000ed88 	.word	0xe000ed88

0800a094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a09a:	f3ef 8305 	mrs	r3, IPSR
 800a09e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b0f      	cmp	r3, #15
 800a0a4:	d913      	bls.n	800a0ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0a6:	4a16      	ldr	r2, [pc, #88]	; (800a100 <vPortValidateInterruptPriority+0x6c>)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0b0:	4b14      	ldr	r3, [pc, #80]	; (800a104 <vPortValidateInterruptPriority+0x70>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	7afa      	ldrb	r2, [r7, #11]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d209      	bcs.n	800a0ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	607b      	str	r3, [r7, #4]
 800a0cc:	e7fe      	b.n	800a0cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0ce:	4b0e      	ldr	r3, [pc, #56]	; (800a108 <vPortValidateInterruptPriority+0x74>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0d6:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <vPortValidateInterruptPriority+0x78>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d909      	bls.n	800a0f2 <vPortValidateInterruptPriority+0x5e>
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	e7fe      	b.n	800a0f0 <vPortValidateInterruptPriority+0x5c>
	}
 800a0f2:	bf00      	nop
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	e000e3f0 	.word	0xe000e3f0
 800a104:	20025d94 	.word	0x20025d94
 800a108:	e000ed0c 	.word	0xe000ed0c
 800a10c:	20025d98 	.word	0x20025d98

0800a110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08a      	sub	sp, #40	; 0x28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a118:	2300      	movs	r3, #0
 800a11a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a11c:	f7fe ffc8 	bl	80090b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a120:	4b59      	ldr	r3, [pc, #356]	; (800a288 <pvPortMalloc+0x178>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a128:	f000 f910 	bl	800a34c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a12c:	4b57      	ldr	r3, [pc, #348]	; (800a28c <pvPortMalloc+0x17c>)
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4013      	ands	r3, r2
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 808c 	bne.w	800a252 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01c      	beq.n	800a17a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a140:	2208      	movs	r2, #8
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4413      	add	r3, r2
 800a146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d013      	beq.n	800a17a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f023 0307 	bic.w	r3, r3, #7
 800a158:	3308      	adds	r3, #8
 800a15a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	2b00      	cmp	r3, #0
 800a164:	d009      	beq.n	800a17a <pvPortMalloc+0x6a>
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e7fe      	b.n	800a178 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d068      	beq.n	800a252 <pvPortMalloc+0x142>
 800a180:	4b43      	ldr	r3, [pc, #268]	; (800a290 <pvPortMalloc+0x180>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	429a      	cmp	r2, r3
 800a188:	d863      	bhi.n	800a252 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a18a:	4b42      	ldr	r3, [pc, #264]	; (800a294 <pvPortMalloc+0x184>)
 800a18c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a18e:	4b41      	ldr	r3, [pc, #260]	; (800a294 <pvPortMalloc+0x184>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a194:	e004      	b.n	800a1a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d903      	bls.n	800a1b2 <pvPortMalloc+0xa2>
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1f1      	bne.n	800a196 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1b2:	4b35      	ldr	r3, [pc, #212]	; (800a288 <pvPortMalloc+0x178>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d04a      	beq.n	800a252 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2208      	movs	r2, #8
 800a1c2:	4413      	add	r3, r2
 800a1c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	1ad2      	subs	r2, r2, r3
 800a1d6:	2308      	movs	r3, #8
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d91e      	bls.n	800a21c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <pvPortMalloc+0xf4>
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
 800a202:	e7fe      	b.n	800a202 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	1ad2      	subs	r2, r2, r3
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a216:	69b8      	ldr	r0, [r7, #24]
 800a218:	f000 f8fa 	bl	800a410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a21c:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <pvPortMalloc+0x180>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	4a1a      	ldr	r2, [pc, #104]	; (800a290 <pvPortMalloc+0x180>)
 800a228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a22a:	4b19      	ldr	r3, [pc, #100]	; (800a290 <pvPortMalloc+0x180>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	4b1a      	ldr	r3, [pc, #104]	; (800a298 <pvPortMalloc+0x188>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d203      	bcs.n	800a23e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a236:	4b16      	ldr	r3, [pc, #88]	; (800a290 <pvPortMalloc+0x180>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a17      	ldr	r2, [pc, #92]	; (800a298 <pvPortMalloc+0x188>)
 800a23c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <pvPortMalloc+0x17c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	431a      	orrs	r2, r3
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a252:	f7fe ff3b 	bl	80090cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a25c:	f7f6 fb40 	bl	80008e0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <pvPortMalloc+0x16e>
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e7fe      	b.n	800a27c <pvPortMalloc+0x16c>
	return pvReturn;
 800a27e:	69fb      	ldr	r3, [r7, #28]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3728      	adds	r7, #40	; 0x28
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2002dda4 	.word	0x2002dda4
 800a28c:	2002ddb0 	.word	0x2002ddb0
 800a290:	2002dda8 	.word	0x2002dda8
 800a294:	2002dd9c 	.word	0x2002dd9c
 800a298:	2002ddac 	.word	0x2002ddac

0800a29c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d046      	beq.n	800a33c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2ae:	2308      	movs	r3, #8
 800a2b0:	425b      	negs	r3, r3
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	4b20      	ldr	r3, [pc, #128]	; (800a344 <vPortFree+0xa8>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d109      	bne.n	800a2de <vPortFree+0x42>
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	e7fe      	b.n	800a2dc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d009      	beq.n	800a2fa <vPortFree+0x5e>
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	60bb      	str	r3, [r7, #8]
 800a2f8:	e7fe      	b.n	800a2f8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <vPortFree+0xa8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4013      	ands	r3, r2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d019      	beq.n	800a33c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d115      	bne.n	800a33c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <vPortFree+0xa8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	43db      	mvns	r3, r3
 800a31a:	401a      	ands	r2, r3
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a320:	f7fe fec6 	bl	80090b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <vPortFree+0xac>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4413      	add	r3, r2
 800a32e:	4a06      	ldr	r2, [pc, #24]	; (800a348 <vPortFree+0xac>)
 800a330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a332:	6938      	ldr	r0, [r7, #16]
 800a334:	f000 f86c 	bl	800a410 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a338:	f7fe fec8 	bl	80090cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a33c:	bf00      	nop
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	2002ddb0 	.word	0x2002ddb0
 800a348:	2002dda8 	.word	0x2002dda8

0800a34c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a358:	4b27      	ldr	r3, [pc, #156]	; (800a3f8 <prvHeapInit+0xac>)
 800a35a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00c      	beq.n	800a380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3307      	adds	r3, #7
 800a36a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0307 	bic.w	r3, r3, #7
 800a372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <prvHeapInit+0xac>)
 800a37c:	4413      	add	r3, r2
 800a37e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a384:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <prvHeapInit+0xb0>)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a38a:	4b1c      	ldr	r3, [pc, #112]	; (800a3fc <prvHeapInit+0xb0>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4413      	add	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a398:	2208      	movs	r2, #8
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1a9b      	subs	r3, r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0307 	bic.w	r3, r3, #7
 800a3a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4a15      	ldr	r2, [pc, #84]	; (800a400 <prvHeapInit+0xb4>)
 800a3ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3ae:	4b14      	ldr	r3, [pc, #80]	; (800a400 <prvHeapInit+0xb4>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3b6:	4b12      	ldr	r3, [pc, #72]	; (800a400 <prvHeapInit+0xb4>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	1ad2      	subs	r2, r2, r3
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <prvHeapInit+0xb4>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4a0a      	ldr	r2, [pc, #40]	; (800a404 <prvHeapInit+0xb8>)
 800a3da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	4a09      	ldr	r2, [pc, #36]	; (800a408 <prvHeapInit+0xbc>)
 800a3e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3e4:	4b09      	ldr	r3, [pc, #36]	; (800a40c <prvHeapInit+0xc0>)
 800a3e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3ea:	601a      	str	r2, [r3, #0]
}
 800a3ec:	bf00      	nop
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	20025d9c 	.word	0x20025d9c
 800a3fc:	2002dd9c 	.word	0x2002dd9c
 800a400:	2002dda4 	.word	0x2002dda4
 800a404:	2002ddac 	.word	0x2002ddac
 800a408:	2002dda8 	.word	0x2002dda8
 800a40c:	2002ddb0 	.word	0x2002ddb0

0800a410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a418:	4b28      	ldr	r3, [pc, #160]	; (800a4bc <prvInsertBlockIntoFreeList+0xac>)
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e002      	b.n	800a424 <prvInsertBlockIntoFreeList+0x14>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d8f7      	bhi.n	800a41e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d108      	bne.n	800a452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	441a      	add	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	441a      	add	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	d118      	bne.n	800a498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d00d      	beq.n	800a48e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	441a      	add	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	e008      	b.n	800a4a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <prvInsertBlockIntoFreeList+0xb0>)
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	e003      	b.n	800a4a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d002      	beq.n	800a4ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	2002dd9c 	.word	0x2002dd9c
 800a4c0:	2002dda4 	.word	0x2002dda4

0800a4c4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800a4c8:	f003 fcb0 	bl	800de2c <touchgfx_init>
}
 800a4cc:	bf00      	nop
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800a4d8:	f003 fcd2 	bl	800de80 <touchgfx_taskEntry>
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
    {
 800a4ec:	4a04      	ldr	r2, [pc, #16]	; (800a500 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
    }
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	0801fb14 	.word	0x0801fb14

0800a504 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
    }
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff ffe9 	bl	800a4e4 <_ZN8touchgfx12FontProviderD1Ev>
 800a512:	2104      	movs	r1, #4
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f013 ff39 	bl	801e38c <_ZdlPvj>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800a530:	887b      	ldrh	r3, [r7, #2]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d008      	beq.n	800a548 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800a536:	2b02      	cmp	r3, #2
 800a538:	d00b      	beq.n	800a552 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10e      	bne.n	800a55c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800a53e:	f001 ff95 	bl	800c46c <_ZN17TypedTextDatabase8getFontsEv>
 800a542:	4603      	mov	r3, r0
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	e00a      	b.n	800a55e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800a548:	f001 ff90 	bl	800c46c <_ZN17TypedTextDatabase8getFontsEv>
 800a54c:	4603      	mov	r3, r0
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	e005      	b.n	800a55e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800a552:	f001 ff8b 	bl	800c46c <_ZN17TypedTextDatabase8getFontsEv>
 800a556:	4603      	mov	r3, r0
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	e000      	b.n	800a55e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800a55c:	2300      	movs	r3, #0
    }
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	4a05      	ldr	r2, [pc, #20]	; (800a588 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff ffb3 	bl	800a4e4 <_ZN8touchgfx12FontProviderD1Ev>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	0801fb00 	.word	0x0801fb00

0800a58c <_ZN23ApplicationFontProviderD0Ev>:
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff ffe7 	bl	800a568 <_ZN23ApplicationFontProviderD1Ev>
 800a59a:	2104      	movs	r1, #4
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f013 fef5 	bl	801e38c <_ZdlPvj>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	4a04      	ldr	r2, [pc, #16]	; (800a5c8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	08021434 	.word	0x08021434

0800a5cc <_ZN8touchgfx4FontD0Ev>:
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff ffe9 	bl	800a5ac <_ZN8touchgfx4FontD1Ev>
 800a5da:	2110      	movs	r1, #16
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f013 fed5 	bl	801e38c <_ZdlPvj>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800a5ec:	b590      	push	{r4, r7, lr}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	681c      	ldr	r4, [r3, #0]
 800a608:	f107 030f 	add.w	r3, r7, #15
 800a60c:	f107 0210 	add.w	r2, r7, #16
 800a610:	8879      	ldrh	r1, [r7, #2]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	47a0      	blx	r4
 800a616:	6178      	str	r0, [r7, #20]
        return glyph;
 800a618:	697b      	ldr	r3, [r7, #20]
    }
 800a61a:	4618      	mov	r0, r3
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd90      	pop	{r4, r7, pc}

0800a622 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	895b      	ldrh	r3, [r3, #10]
    }
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	899b      	ldrh	r3, [r3, #12]
    }
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	889b      	ldrh	r3, [r3, #4]
    }
 800a65e:	4618      	mov	r0, r3
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800a66a:	b480      	push	{r7}
 800a66c:	b083      	sub	sp, #12
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	889a      	ldrh	r2, [r3, #4]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	799b      	ldrb	r3, [r3, #6]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	b29b      	uxth	r3, r3
    }
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	79db      	ldrb	r3, [r3, #7]
 800a698:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800a69c:	b2db      	uxtb	r3, r3
    }
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	79db      	ldrb	r3, [r3, #7]
 800a6b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a6ba:	b2db      	uxtb	r3, r3
    }
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	4a05      	ldr	r2, [pc, #20]	; (800a6e8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff ff67 	bl	800a5ac <_ZN8touchgfx4FontD1Ev>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	080214ec 	.word	0x080214ec

0800a6ec <_ZN8touchgfx9ConstFontD0Ev>:
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ffe7 	bl	800a6c8 <_ZN8touchgfx9ConstFontD1Ev>
 800a6fa:	2118      	movs	r1, #24
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f013 fe45 	bl	801e38c <_ZdlPvj>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	4a05      	ldr	r2, [pc, #20]	; (800a72c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff ffd3 	bl	800a6c8 <_ZN8touchgfx9ConstFontD1Ev>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4618      	mov	r0, r3
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	0801fb58 	.word	0x0801fb58

0800a730 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff ffe7 	bl	800a70c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a73e:	2124      	movs	r1, #36	; 0x24
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f013 fe23 	bl	801e38c <_ZdlPvj>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f82d 	bl	800a7b8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800a75e:	4b08      	ldr	r3, [pc, #32]	; (800a780 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	440b      	add	r3, r1
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	681b      	ldr	r3, [r3, #0]
    }
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	2002eef0 	.word	0x2002eef0
 800a784:	2002eee8 	.word	0x2002eee8

0800a788 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f811 	bl	800a7b8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800a796:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	4413      	add	r3, r2
 800a7a2:	785b      	ldrb	r3, [r3, #1]
 800a7a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a7a8:	b2db      	uxtb	r3, r3
    }
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	2002eee8 	.word	0x2002eee8

0800a7b8 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800a7c0:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d105      	bne.n	800a7d4 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800a7ca:	4a0c      	ldr	r2, [pc, #48]	; (800a7fc <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800a7cc:	21de      	movs	r1, #222	; 0xde
 800a7ce:	480c      	ldr	r0, [pc, #48]	; (800a800 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800a7d0:	f013 fe08 	bl	801e3e4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	881a      	ldrh	r2, [r3, #0]
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d305      	bcc.n	800a7ec <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800a7e0:	4b09      	ldr	r3, [pc, #36]	; (800a808 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800a7e2:	4a06      	ldr	r2, [pc, #24]	; (800a7fc <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800a7e4:	21df      	movs	r1, #223	; 0xdf
 800a7e6:	4806      	ldr	r0, [pc, #24]	; (800a800 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800a7e8:	f013 fdfc 	bl	801e3e4 <__assert_func>
    }
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	2002eee8 	.word	0x2002eee8
 800a7f8:	0801f470 	.word	0x0801f470
 800a7fc:	0801fb20 	.word	0x0801fb20
 800a800:	0801f4b4 	.word	0x0801f4b4
 800a804:	2002eeec 	.word	0x2002eeec
 800a808:	0801f4f8 	.word	0x0801f4f8

0800a80c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	7b5b      	ldrb	r3, [r3, #13]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	b21b      	sxth	r3, r3
 800a81c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a820:	b21a      	sxth	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	7adb      	ldrb	r3, [r3, #11]
 800a826:	b21b      	sxth	r3, r3
 800a828:	4313      	orrs	r3, r2
 800a82a:	b21b      	sxth	r3, r3
 800a82c:	b29b      	uxth	r3, r3
    }
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800a83a:	b480      	push	{r7}
 800a83c:	b083      	sub	sp, #12
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
    }
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800a854:	b580      	push	{r7, lr}
 800a856:	b08c      	sub	sp, #48	; 0x30
 800a858:	af08      	add	r7, sp, #32
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4611      	mov	r1, r2
 800a860:	461a      	mov	r2, r3
 800a862:	460b      	mov	r3, r1
 800a864:	80fb      	strh	r3, [r7, #6]
 800a866:	4613      	mov	r3, r2
 800a868:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	88b9      	ldrh	r1, [r7, #4]
 800a86e:	88fa      	ldrh	r2, [r7, #6]
 800a870:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a872:	9306      	str	r3, [sp, #24]
 800a874:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a876:	9305      	str	r3, [sp, #20]
 800a878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a87c:	9304      	str	r3, [sp, #16]
 800a87e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a882:	9303      	str	r3, [sp, #12]
 800a884:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a888:	9302      	str	r3, [sp, #8]
 800a88a:	7f3b      	ldrb	r3, [r7, #28]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	7e3b      	ldrb	r3, [r7, #24]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	460b      	mov	r3, r1
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	f006 fffb 	bl	8011890 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800a89a:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8a4:	619a      	str	r2, [r3, #24]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8aa:	61da      	str	r2, [r3, #28]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8b0:	621a      	str	r2, [r3, #32]
{
}
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	0801fb58 	.word	0x0801fb58

0800a8c0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	889b      	ldrh	r3, [r3, #4]
 800a8d4:	0adb      	lsrs	r3, r3, #11
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4413      	add	r3, r2
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4413      	add	r3, r2
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b086      	sub	sp, #24
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	607a      	str	r2, [r7, #4]
 800a8fe:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7b1b      	ldrb	r3, [r3, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	e023      	b.n	800a95a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff ff7a 	bl	800a80c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800a918:	4603      	mov	r3, r0
 800a91a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a91c:	8abb      	ldrh	r3, [r7, #20]
 800a91e:	82fb      	strh	r3, [r7, #22]
 800a920:	8afa      	ldrh	r2, [r7, #22]
 800a922:	8abb      	ldrh	r3, [r7, #20]
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	7b09      	ldrb	r1, [r1, #12]
 800a928:	440b      	add	r3, r1
 800a92a:	429a      	cmp	r2, r3
 800a92c:	da14      	bge.n	800a958 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	69da      	ldr	r2, [r3, #28]
 800a932:	8afb      	ldrh	r3, [r7, #22]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	897a      	ldrh	r2, [r7, #10]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d107      	bne.n	800a950 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	69da      	ldr	r2, [r3, #28]
 800a944:	8afb      	ldrh	r3, [r7, #22]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a94e:	e004      	b.n	800a95a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a950:	8afb      	ldrh	r3, [r7, #22]
 800a952:	3301      	adds	r3, #1
 800a954:	82fb      	strh	r3, [r7, #22]
 800a956:	e7e3      	b.n	800a920 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__tcf_0+0xc>)
 800a96a:	f7ff fecf 	bl	800a70c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	2002ddb4 	.word	0x2002ddb4

0800a974 <_Z23getFont_verdana_10_4bppv>:
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08a      	sub	sp, #40	; 0x28
 800a978:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a97a:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d11f      	bne.n	800a9c6 <_Z23getFont_verdana_10_4bppv+0x52>
 800a986:	2300      	movs	r3, #0
 800a988:	9309      	str	r3, [sp, #36]	; 0x24
 800a98a:	2300      	movs	r3, #0
 800a98c:	9308      	str	r3, [sp, #32]
 800a98e:	233f      	movs	r3, #63	; 0x3f
 800a990:	9307      	str	r3, [sp, #28]
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <_Z23getFont_verdana_10_4bppv+0x60>)
 800a994:	9306      	str	r3, [sp, #24]
 800a996:	4b10      	ldr	r3, [pc, #64]	; (800a9d8 <_Z23getFont_verdana_10_4bppv+0x64>)
 800a998:	9305      	str	r3, [sp, #20]
 800a99a:	2300      	movs	r3, #0
 800a99c:	9304      	str	r3, [sp, #16]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9303      	str	r3, [sp, #12]
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	9302      	str	r3, [sp, #8]
 800a9a6:	2304      	movs	r3, #4
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	490a      	ldr	r1, [pc, #40]	; (800a9dc <_Z23getFont_verdana_10_4bppv+0x68>)
 800a9b4:	480a      	ldr	r0, [pc, #40]	; (800a9e0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800a9b6:	f7ff ff4d 	bl	800a854 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a9ba:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a9bc:	2201      	movs	r2, #1
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	4808      	ldr	r0, [pc, #32]	; (800a9e4 <_Z23getFont_verdana_10_4bppv+0x70>)
 800a9c2:	f013 fd2d 	bl	801e420 <atexit>
    return verdana_10_4bpp;
 800a9c6:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2002ddd8 	.word	0x2002ddd8
 800a9d4:	08024698 	.word	0x08024698
 800a9d8:	0801fba4 	.word	0x0801fba4
 800a9dc:	08024844 	.word	0x08024844
 800a9e0:	2002ddb4 	.word	0x2002ddb4
 800a9e4:	0800a965 	.word	0x0800a965

0800a9e8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	4801      	ldr	r0, [pc, #4]	; (800a9f4 <__tcf_0+0xc>)
 800a9ee:	f7ff fe8d 	bl	800a70c <_ZN8touchgfx13GeneratedFontD1Ev>
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	2002dddc 	.word	0x2002dddc

0800a9f8 <_Z23getFont_verdana_20_4bppv>:
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b08a      	sub	sp, #40	; 0x28
 800a9fc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a9fe:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d11f      	bne.n	800aa4a <_Z23getFont_verdana_20_4bppv+0x52>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	233f      	movs	r3, #63	; 0x3f
 800aa14:	9307      	str	r3, [sp, #28]
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <_Z23getFont_verdana_20_4bppv+0x60>)
 800aa18:	9306      	str	r3, [sp, #24]
 800aa1a:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <_Z23getFont_verdana_20_4bppv+0x64>)
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	2301      	movs	r3, #1
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	2301      	movs	r3, #1
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	2301      	movs	r3, #1
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	2304      	movs	r3, #4
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	2304      	movs	r3, #4
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	2314      	movs	r3, #20
 800aa34:	225f      	movs	r2, #95	; 0x5f
 800aa36:	490a      	ldr	r1, [pc, #40]	; (800aa60 <_Z23getFont_verdana_20_4bppv+0x68>)
 800aa38:	480a      	ldr	r0, [pc, #40]	; (800aa64 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800aa3a:	f7ff ff0b 	bl	800a854 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <_Z23getFont_verdana_20_4bppv+0x5c>)
 800aa40:	2201      	movs	r2, #1
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	4808      	ldr	r0, [pc, #32]	; (800aa68 <_Z23getFont_verdana_20_4bppv+0x70>)
 800aa46:	f013 fceb 	bl	801e420 <atexit>
    return verdana_20_4bpp;
 800aa4a:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	2002de00 	.word	0x2002de00
 800aa58:	0802469c 	.word	0x0802469c
 800aa5c:	0801fba8 	.word	0x0801fba8
 800aa60:	08024854 	.word	0x08024854
 800aa64:	2002dddc 	.word	0x2002dddc
 800aa68:	0800a9e9 	.word	0x0800a9e9

0800aa6c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__tcf_0+0xc>)
 800aa72:	f7ff fe4b 	bl	800a70c <_ZN8touchgfx13GeneratedFontD1Ev>
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	2002de04 	.word	0x2002de04

0800aa7c <_Z23getFont_verdana_40_4bppv>:
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	; 0x28
 800aa80:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800aa82:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0301 	and.w	r3, r3, #1
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d11f      	bne.n	800aace <_Z23getFont_verdana_40_4bppv+0x52>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9309      	str	r3, [sp, #36]	; 0x24
 800aa92:	2300      	movs	r3, #0
 800aa94:	9308      	str	r3, [sp, #32]
 800aa96:	233f      	movs	r3, #63	; 0x3f
 800aa98:	9307      	str	r3, [sp, #28]
 800aa9a:	4b10      	ldr	r3, [pc, #64]	; (800aadc <_Z23getFont_verdana_40_4bppv+0x60>)
 800aa9c:	9306      	str	r3, [sp, #24]
 800aa9e:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <_Z23getFont_verdana_40_4bppv+0x64>)
 800aaa0:	9305      	str	r3, [sp, #20]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	2301      	movs	r3, #1
 800aaac:	9302      	str	r3, [sp, #8]
 800aaae:	2304      	movs	r3, #4
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	2300      	movs	r3, #0
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	2328      	movs	r3, #40	; 0x28
 800aab8:	2201      	movs	r2, #1
 800aaba:	490a      	ldr	r1, [pc, #40]	; (800aae4 <_Z23getFont_verdana_40_4bppv+0x68>)
 800aabc:	480a      	ldr	r0, [pc, #40]	; (800aae8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800aabe:	f7ff fec9 	bl	800a854 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
 800aac8:	4808      	ldr	r0, [pc, #32]	; (800aaec <_Z23getFont_verdana_40_4bppv+0x70>)
 800aaca:	f013 fca9 	bl	801e420 <atexit>
    return verdana_40_4bpp;
 800aace:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	2002de28 	.word	0x2002de28
 800aadc:	08024840 	.word	0x08024840
 800aae0:	0801fbac 	.word	0x0801fbac
 800aae4:	08024d88 	.word	0x08024d88
 800aae8:	2002de04 	.word	0x2002de04
 800aaec:	0800aa6d 	.word	0x0800aa6d

0800aaf0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
    {
    }
 800ab12:	bf00      	nop
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
    {
    }
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
    {
    }
 800ab3e:	bf00      	nop
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
    {
    }
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
    {
    }
 800ab7e:	bf00      	nop
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    {
 800ab94:	4a04      	ldr	r2, [pc, #16]	; (800aba8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	601a      	str	r2, [r3, #0]
    }
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	0801fca0 	.word	0x0801fca0

0800abac <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
    }
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff ffe9 	bl	800ab8c <_ZN8touchgfx15UIEventListenerD1Ev>
 800abba:	2104      	movs	r1, #4
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f013 fbe5 	bl	801e38c <_ZdlPvj>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4618      	mov	r0, r3
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800abd4:	4a07      	ldr	r2, [pc, #28]	; (800abf4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	605a      	str	r2, [r3, #4]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	721a      	strb	r2, [r3, #8]
    {
    }
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	0801fc80 	.word	0x0801fc80

0800abf8 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
    {
 800ac00:	4a04      	ldr	r2, [pc, #16]	; (800ac14 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
    }
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	0801fc80 	.word	0x0801fc80

0800ac18 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
    }
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff ffe9 	bl	800abf8 <_ZN8touchgfx10TransitionD1Ev>
 800ac26:	210c      	movs	r1, #12
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f013 fbaf 	bl	801e38c <_ZdlPvj>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	605a      	str	r2, [r3, #4]
    }
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
    {
 800acb0:	4a04      	ldr	r2, [pc, #16]	; (800acc4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	601a      	str	r2, [r3, #0]
    }
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	0801fc68 	.word	0x0801fc68

0800acc8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
    }
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ffe9 	bl	800aca8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800acd6:	2104      	movs	r1, #4
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f013 fb57 	bl	801e38c <_ZdlPvj>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
    {
        return instance;
 800acec:	4b03      	ldr	r3, [pc, #12]	; (800acfc <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800acee:	681b      	ldr	r3, [r3, #0]
    }
 800acf0:	4618      	mov	r0, r3
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	2002ee78 	.word	0x2002ee78

0800ad00 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d008      	beq.n	800ad22 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ad10:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ad1a:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad20:	e002      	b.n	800ad28 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800ad22:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
        }
    }
 800ad28:	4618      	mov	r0, r3
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	2002ee78 	.word	0x2002ee78

0800ad38 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	4a05      	ldr	r2, [pc, #20]	; (800ad58 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7ff ff1f 	bl	800ab8c <_ZN8touchgfx15UIEventListenerD1Ev>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	0802134c 	.word	0x0802134c

0800ad5c <_ZN8touchgfx11ApplicationD0Ev>:
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7ff ffe7 	bl	800ad38 <_ZN8touchgfx11ApplicationD1Ev>
 800ad6a:	f44f 7198 	mov.w	r1, #304	; 0x130
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f013 fb0c 	bl	801e38c <_ZdlPvj>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f006 f8bc 	bl	8010f08 <_ZN8touchgfx11ApplicationC1Ev>
 800ad90:	4a09      	ldr	r2, [pc, #36]	; (800adb8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a04      	ldr	r2, [pc, #16]	; (800adbc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800adaa:	6013      	str	r3, [r2, #0]
    }
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	0801fc2c 	.word	0x0801fc2c
 800adbc:	2002eee4 	.word	0x2002eee4

0800adc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4618      	mov	r0, r3
 800add2:	f7ff ffb1 	bl	800ad38 <_ZN8touchgfx11ApplicationD1Ev>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4618      	mov	r0, r3
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	0801fc2c 	.word	0x0801fc2c

0800ade4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff ffe7 	bl	800adc0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800adf2:	f44f 719c 	mov.w	r1, #312	; 0x138
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f013 fac8 	bl	801e38c <_ZdlPvj>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b082      	sub	sp, #8
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f804 	bl	800ae1c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00f      	beq.n	800ae4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00e      	beq.n	800ae72 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3308      	adds	r3, #8
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800ae86:	f006 f81f 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f006 f821 	bl	8010ed4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d008      	beq.n	800aeac <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	330c      	adds	r3, #12
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
    }
    if (*currentTrans)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d007      	beq.n	800aec4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
    }
    if (*currentScreen)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3314      	adds	r3, #20
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4610      	mov	r0, r2
 800aedc:	4798      	blx	r3
    }
    if (*currentPresenter)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d008      	beq.n	800aef8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3304      	adds	r3, #4
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
    }
    if (*currentScreen)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
    }
    if (*currentPresenter)
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d008      	beq.n	800af2a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3308      	adds	r3, #8
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4610      	mov	r0, r2
 800af28:	4798      	blx	r3
    }
}
 800af2a:	bf00      	nop
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	330c      	adds	r3, #12
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	4798      	blx	r3
    newPresenter->activate();
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68b8      	ldr	r0, [r7, #8]
 800af52:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f007 f860 	bl	801201c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3310      	adds	r3, #16
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4798      	blx	r3

    Application::getInstance()->draw();
 800af68:	f005 ffae 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 800af6c:	4602      	mov	r2, r0
 800af6e:	6813      	ldr	r3, [r2, #0]
 800af70:	3328      	adds	r3, #40	; 0x28
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
}
 800af78:	bf00      	nop
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	601a      	str	r2, [r3, #0]
    }
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	4a08      	ldr	r2, [pc, #32]	; (800afc8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 fa5d 	bl	800b470 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff ff01 	bl	800adc0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	0801fbd8 	.word	0x0801fbd8

0800afcc <_ZN23FrontendApplicationBaseD0Ev>:
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ffe1 	bl	800af9c <_ZN23FrontendApplicationBaseD1Ev>
 800afda:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f013 f9d4 	bl	801e38c <_ZdlPvj>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fde6 	bl	800abcc <_ZN8touchgfx10TransitionC1Ev>
 800b000:	4a03      	ldr	r2, [pc, #12]	; (800b010 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	0801fbb8 	.word	0x0801fbb8

0800b014 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	4a05      	ldr	r2, [pc, #20]	; (800b034 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fde7 	bl	800abf8 <_ZN8touchgfx10TransitionD1Ev>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	0801fbb8 	.word	0x0801fbb8

0800b038 <_ZN8touchgfx12NoTransitionD0Ev>:
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff ffe7 	bl	800b014 <_ZN8touchgfx12NoTransitionD1Ev>
 800b046:	210c      	movs	r1, #12
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f013 f99f 	bl	801e38c <_ZdlPvj>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	721a      	strb	r2, [r3, #8]
    }
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	605a      	str	r2, [r3, #4]
    }
 800b082:	bf00      	nop
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
	...

0800b090 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff fe6e 	bl	800ad80 <_ZN8touchgfx14MVPApplicationC1Ev>
 800b0a4:	4a13      	ldr	r2, [pc, #76]	; (800b0f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 f89f 	bl	800b1f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800b0c6:	f7ff fe0f 	bl	800ace8 <_ZN8touchgfx3HAL11getInstanceEv>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	3308      	adds	r3, #8
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f001 f94f 	bl	800c37c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800b0de:	f7ff fe0f 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f00c f8ec 	bl	80172c2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	0801fbd8 	.word	0x0801fbd8

0800b0f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	4611      	mov	r1, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff ffe9 	bl	800b0f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	605a      	str	r2, [r3, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	3208      	adds	r2, #8
 800b136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b13a:	e883 0003 	stmia.w	r3, {r0, r1}
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b089      	sub	sp, #36	; 0x24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800b156:	4b10      	ldr	r3, [pc, #64]	; (800b198 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800b158:	61bb      	str	r3, [r7, #24]
 800b15a:	2300      	movs	r3, #0
 800b15c:	61fb      	str	r3, [r7, #28]
 800b15e:	f107 0008 	add.w	r0, r7, #8
 800b162:	f107 0318 	add.w	r3, r7, #24
 800b166:	cb0c      	ldmia	r3, {r2, r3}
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	f000 f85f 	bl	800b22c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800b16e:	f107 0308 	add.w	r3, r7, #8
 800b172:	4619      	mov	r1, r3
 800b174:	4620      	mov	r0, r4
 800b176:	f7ff ffcb 	bl	800b110 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f976 	bl	800b470 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800b190:	bf00      	nop
 800b192:	3724      	adds	r7, #36	; 0x24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd90      	pop	{r4, r7, pc}
 800b198:	0800b19d 	.word	0x0800b19d

0800b19c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af02      	add	r7, sp, #8
 800b1a2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	4b04      	ldr	r3, [pc, #16]	; (800b1cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800b1bc:	4804      	ldr	r0, [pc, #16]	; (800b1d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800b1be:	f000 f855 	bl	800b26c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	2002eed8 	.word	0x2002eed8
 800b1d0:	2002eed4 	.word	0x2002eed4

0800b1d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	4a04      	ldr	r2, [pc, #16]	; (800b1f0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr
 800b1f0:	0801fc68 	.word	0x0801fc68

0800b1f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff ffe8 	bl	800b1d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b204:	4a08      	ldr	r2, [pc, #32]	; (800b228 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	605a      	str	r2, [r3, #4]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	609a      	str	r2, [r3, #8]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	60da      	str	r2, [r3, #12]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4618      	mov	r0, r3
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	0801fc14 	.word	0x0801fc14

0800b22c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	4639      	mov	r1, r7
 800b238:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff ffc8 	bl	800b1d4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800b244:	4a08      	ldr	r2, [pc, #32]	; (800b268 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3308      	adds	r3, #8
 800b254:	463a      	mov	r2, r7
 800b256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b25a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	0801fc14 	.word	0x0801fc14

0800b26c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b26c:	b590      	push	{r4, r7, lr}
 800b26e:	b089      	sub	sp, #36	; 0x24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3320      	adds	r3, #32
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4610      	mov	r0, r2
 800b28a:	4798      	blx	r3
 800b28c:	4603      	mov	r3, r0
 800b28e:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800b292:	d205      	bcs.n	800b2a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b294:	4b4d      	ldr	r3, [pc, #308]	; (800b3cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b296:	4a4e      	ldr	r2, [pc, #312]	; (800b3d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b298:	21c2      	movs	r1, #194	; 0xc2
 800b29a:	484e      	ldr	r0, [pc, #312]	; (800b3d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b29c:	f013 f8a2 	bl	801e3e4 <__assert_func>
 800b2a0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3320      	adds	r3, #32
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b0f      	cmp	r3, #15
 800b2b8:	d805      	bhi.n	800b2c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800b2ba:	4b47      	ldr	r3, [pc, #284]	; (800b3d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b2bc:	4a44      	ldr	r2, [pc, #272]	; (800b3d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b2be:	21c3      	movs	r1, #195	; 0xc3
 800b2c0:	4844      	ldr	r0, [pc, #272]	; (800b3d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b2c2:	f013 f88f 	bl	801e3e4 <__assert_func>
 800b2c6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3320      	adds	r3, #32
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	4798      	blx	r3
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b0b      	cmp	r3, #11
 800b2de:	d805      	bhi.n	800b2ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800b2e0:	4b3e      	ldr	r3, [pc, #248]	; (800b3dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b2e2:	4a3b      	ldr	r2, [pc, #236]	; (800b3d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b2e4:	21c4      	movs	r1, #196	; 0xc4
 800b2e6:	483b      	ldr	r0, [pc, #236]	; (800b3d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b2e8:	f013 f87c 	bl	801e3e4 <__assert_func>
 800b2ec:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	68b9      	ldr	r1, [r7, #8]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fdc1 	bl	800ae7a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 f86e 	bl	800b3e0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800b304:	4603      	mov	r3, r0
 800b306:	4619      	mov	r1, r3
 800b308:	200c      	movs	r0, #12
 800b30a:	f7ff fbf1 	bl	800aaf0 <_ZnwjPv>
 800b30e:	4604      	mov	r4, r0
 800b310:	2c00      	cmp	r4, #0
 800b312:	d004      	beq.n	800b31e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800b314:	4620      	mov	r0, r4
 800b316:	f7ff fe6b 	bl	800aff0 <_ZN8touchgfx12NoTransitionC1Ev>
 800b31a:	4623      	mov	r3, r4
 800b31c:	e000      	b.n	800b320 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b31e:	4623      	mov	r3, r4
 800b320:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	2100      	movs	r1, #0
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 f86c 	bl	800b406 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800b32e:	4603      	mov	r3, r0
 800b330:	4619      	mov	r1, r3
 800b332:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800b336:	f7ff fbdb 	bl	800aaf0 <_ZnwjPv>
 800b33a:	4604      	mov	r4, r0
 800b33c:	2c00      	cmp	r4, #0
 800b33e:	d004      	beq.n	800b34a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800b340:	4620      	mov	r0, r4
 800b342:	f001 fa63 	bl	800c80c <_ZN11Screen1ViewC1Ev>
 800b346:	4623      	mov	r3, r4
 800b348:	e000      	b.n	800b34c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800b34a:	4623      	mov	r3, r4
 800b34c:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	2100      	movs	r1, #0
 800b354:	4618      	mov	r0, r3
 800b356:	f000 f869 	bl	800b42c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800b35a:	4603      	mov	r3, r0
 800b35c:	4619      	mov	r1, r3
 800b35e:	2010      	movs	r0, #16
 800b360:	f7ff fbc6 	bl	800aaf0 <_ZnwjPv>
 800b364:	4604      	mov	r4, r0
 800b366:	2c00      	cmp	r4, #0
 800b368:	d005      	beq.n	800b376 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800b36a:	69b9      	ldr	r1, [r7, #24]
 800b36c:	4620      	mov	r0, r4
 800b36e:	f001 f9c1 	bl	800c6f4 <_ZN16Screen1PresenterC1ER11Screen1View>
 800b372:	4623      	mov	r3, r4
 800b374:	e000      	b.n	800b378 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800b376:	4623      	mov	r3, r4
 800b378:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	69fa      	ldr	r2, [r7, #28]
 800b37e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	3304      	adds	r3, #4
 800b396:	e000      	b.n	800b39a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800b398:	2300      	movs	r3, #0
 800b39a:	4619      	mov	r1, r3
 800b39c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b39e:	f7ff fdef 	bl	800af80 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff fe62 	bl	800b072 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	6979      	ldr	r1, [r7, #20]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 f84d 	bl	800b452 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b3b8:	69fa      	ldr	r2, [r7, #28]
 800b3ba:	6979      	ldr	r1, [r7, #20]
 800b3bc:	69b8      	ldr	r0, [r7, #24]
 800b3be:	f7ff fdb8 	bl	800af32 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800b3c2:	697b      	ldr	r3, [r7, #20]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3724      	adds	r7, #36	; 0x24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd90      	pop	{r4, r7, pc}
 800b3cc:	0801f54c 	.word	0x0801f54c
 800b3d0:	0801fcc0 	.word	0x0801fcc0
 800b3d4:	0801f5dc 	.word	0x0801f5dc
 800b3d8:	0801f620 	.word	0x0801f620
 800b3dc:	0801f6c4 	.word	0x0801f6c4

0800b3e0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3324      	adds	r3, #36	; 0x24
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	887a      	ldrh	r2, [r7, #2]
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	4798      	blx	r3
 800b3fc:	4603      	mov	r3, r0
    }
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800b406:	b580      	push	{r7, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	460b      	mov	r3, r1
 800b410:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3324      	adds	r3, #36	; 0x24
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	887a      	ldrh	r2, [r7, #2]
 800b41c:	4611      	mov	r1, r2
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	4798      	blx	r3
 800b422:	4603      	mov	r3, r0
    }
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3324      	adds	r3, #36	; 0x24
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	887a      	ldrh	r2, [r7, #2]
 800b442:	4611      	mov	r1, r2
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	4798      	blx	r3
 800b448:	4603      	mov	r3, r0
    }
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
	...

0800b470 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	4a05      	ldr	r2, [pc, #20]	; (800b490 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fc11 	bl	800aca8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	0801fc14 	.word	0x0801fc14

0800b494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7ff ffe7 	bl	800b470 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800b4a2:	2110      	movs	r1, #16
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f012 ff71 	bl	801e38c <_ZdlPvj>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	68d2      	ldr	r2, [r2, #12]
 800b4c4:	1052      	asrs	r2, r2, #1
 800b4c6:	1899      	adds	r1, r3, r2
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	e00a      	b.n	800b4f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	68d2      	ldr	r2, [r2, #12]
 800b4e2:	1052      	asrs	r2, r2, #1
 800b4e4:	4413      	add	r3, r2
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6892      	ldr	r2, [r2, #8]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4608      	mov	r0, r1
 800b4f2:	4798      	blx	r3
    }
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d010      	beq.n	800b52e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d107      	bne.n	800b524 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800b520:	2301      	movs	r3, #1
 800b522:	e000      	b.n	800b526 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800b524:	2300      	movs	r3, #0
 800b526:	2b01      	cmp	r3, #1
 800b528:	d001      	beq.n	800b52e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800b52e:	2300      	movs	r3, #0
    }
 800b530:	4618      	mov	r0, r3
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	601a      	str	r2, [r3, #0]
    }
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4618      	mov	r0, r3
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	80da      	strh	r2, [r3, #6]
    }
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	4608      	mov	r0, r1
 800b592:	4611      	mov	r1, r2
 800b594:	461a      	mov	r2, r3
 800b596:	4603      	mov	r3, r0
 800b598:	817b      	strh	r3, [r7, #10]
 800b59a:	460b      	mov	r3, r1
 800b59c:	813b      	strh	r3, [r7, #8]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	897a      	ldrh	r2, [r7, #10]
 800b5a6:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	893a      	ldrh	r2, [r7, #8]
 800b5ac:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	88fa      	ldrh	r2, [r7, #6]
 800b5b2:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8b3a      	ldrh	r2, [r7, #24]
 800b5b8:	80da      	strh	r2, [r3, #6]
    }
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	887a      	ldrh	r2, [r7, #2]
 800b5d8:	801a      	strh	r2, [r3, #0]
    {
    }
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800b5f0:	4a13      	ldr	r2, [pc, #76]	; (800b640 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	1d18      	adds	r0, r3, #4
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	2300      	movs	r3, #0
 800b600:	2200      	movs	r2, #0
 800b602:	2100      	movs	r1, #0
 800b604:	f7ff ffc0 	bl	800b588 <_ZN8touchgfx4RectC1Essss>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	330c      	adds	r3, #12
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff ffa4 	bl	800b55a <_ZN8touchgfx4RectC1Ev>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	615a      	str	r2, [r3, #20]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	619a      	str	r2, [r3, #24]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	61da      	str	r2, [r3, #28]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	08021484 	.word	0x08021484

0800b644 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	4a04      	ldr	r2, [pc, #16]	; (800b660 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	08021484 	.word	0x08021484

0800b664 <_ZN8touchgfx8DrawableD0Ev>:
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff ffe9 	bl	800b644 <_ZN8touchgfx8DrawableD1Ev>
 800b672:	2128      	movs	r1, #40	; 0x28
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f012 fe89 	bl	801e38c <_ZdlPvj>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	461a      	mov	r2, r3
 800b692:	4603      	mov	r3, r0
 800b694:	817b      	strh	r3, [r7, #10]
 800b696:	460b      	mov	r3, r1
 800b698:	813b      	strh	r3, [r7, #8]
 800b69a:	4613      	mov	r3, r2
 800b69c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3334      	adds	r3, #52	; 0x34
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b6aa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	4798      	blx	r3
        setWidth(width);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3338      	adds	r3, #56	; 0x38
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b6be:	4611      	mov	r1, r2
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	4798      	blx	r3
        setHeight(height);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	333c      	adds	r3, #60	; 0x3c
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	4798      	blx	r3
    }
 800b6d6:	bf00      	nop
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	887a      	ldrh	r2, [r7, #2]
 800b6ee:	809a      	strh	r2, [r3, #4]
    }
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	887a      	ldrh	r2, [r7, #2]
 800b70c:	80da      	strh	r2, [r3, #6]
    }
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	807b      	strh	r3, [r7, #2]
 800b726:	4613      	mov	r3, r2
 800b728:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	332c      	adds	r3, #44	; 0x2c
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b736:	4611      	mov	r1, r2
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	4798      	blx	r3
        setY(y);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3330      	adds	r3, #48	; 0x30
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b748:	4611      	mov	r1, r2
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	4798      	blx	r3
    }
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	887a      	ldrh	r2, [r7, #2]
 800b766:	811a      	strh	r2, [r3, #8]
    }
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	887a      	ldrh	r2, [r7, #2]
 800b784:	815a      	strh	r2, [r3, #10]
    }
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	bf00      	nop
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	bf00      	nop
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800b7d2:	b480      	push	{r7}
 800b7d4:	b083      	sub	sp, #12
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	807b      	strh	r3, [r7, #2]
 800b83c:	4613      	mov	r3, r2
 800b83e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3354      	adds	r3, #84	; 0x54
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	8879      	ldrh	r1, [r7, #2]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b850:	b292      	uxth	r2, r2
 800b852:	1a8a      	subs	r2, r1, r2
 800b854:	b292      	uxth	r2, r2
 800b856:	b210      	sxth	r0, r2
 800b858:	8839      	ldrh	r1, [r7, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b860:	b292      	uxth	r2, r2
 800b862:	1a8a      	subs	r2, r1, r2
 800b864:	b292      	uxth	r2, r2
 800b866:	b212      	sxth	r2, r2
 800b868:	4601      	mov	r1, r0
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	4798      	blx	r3
    }
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800b876:	b480      	push	{r7}
 800b878:	b083      	sub	sp, #12
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b884:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b88c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b894:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f7ff ffe1 	bl	800b876 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	601a      	str	r2, [r3, #0]
    }
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	4a05      	ldr	r2, [pc, #20]	; (800b8ec <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff feb1 	bl	800b644 <_ZN8touchgfx8DrawableD1Ev>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	08020718 	.word	0x08020718

0800b8f0 <_ZN8touchgfx9ContainerD0Ev>:
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff ffe7 	bl	800b8cc <_ZN8touchgfx9ContainerD1Ev>
 800b8fe:	212c      	movs	r1, #44	; 0x2c
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f012 fd43 	bl	801e38c <_ZdlPvj>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	4a06      	ldr	r2, [pc, #24]	; (800b934 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3304      	adds	r3, #4
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff ffd2 	bl	800b8cc <_ZN8touchgfx9ContainerD1Ev>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4618      	mov	r0, r3
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	0802157c 	.word	0x0802157c

0800b938 <_ZN8touchgfx6ScreenD0Ev>:
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff ffe5 	bl	800b910 <_ZN8touchgfx6ScreenD1Ev>
 800b946:	213c      	movs	r1, #60	; 0x3c
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f012 fd1f 	bl	801e38c <_ZdlPvj>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
    {
    }
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f002 ff7b 	bl	800e8cc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff fdfc 	bl	800b5e8 <_ZN8touchgfx8DrawableC1Ev>
 800b9f0:	4a03      	ldr	r2, [pc, #12]	; (800ba00 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	0801fee4 	.word	0x0801fee4

0800ba04 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	4a05      	ldr	r2, [pc, #20]	; (800ba24 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff fe15 	bl	800b644 <_ZN8touchgfx8DrawableD1Ev>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	0801fee4 	.word	0x0801fee4

0800ba28 <_ZN8touchgfx6WidgetD0Ev>:
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff ffe7 	bl	800ba04 <_ZN8touchgfx6WidgetD1Ev>
 800ba36:	2128      	movs	r1, #40	; 0x28
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f012 fca7 	bl	801e38c <_ZdlPvj>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	607b      	str	r3, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	817b      	strh	r3, [r7, #10]
 800ba56:	4613      	mov	r3, r2
 800ba58:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff fecd 	bl	800b7fc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d008      	beq.n	800ba7a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff fed3 	bl	800b816 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ba76:	2301      	movs	r3, #1
 800ba78:	e000      	b.n	800ba7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	601a      	str	r2, [r3, #0]
        }
    }
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff ff9f 	bl	800b9e0 <_ZN8touchgfx6WidgetC1Ev>
 800baa2:	4a0b      	ldr	r2, [pc, #44]	; (800bad0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3326      	adds	r3, #38	; 0x26
 800baac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7ff fd89 	bl	800b5c8 <_ZN8touchgfx6BitmapC1Et>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	22ff      	movs	r2, #255	; 0xff
 800baba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f004 f9b5 	bl	800fe30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	08021204 	.word	0x08021204

0800bad4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	4a05      	ldr	r2, [pc, #20]	; (800bb10 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff ff7f 	bl	800ba04 <_ZN8touchgfx6WidgetD1Ev>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	08020f28 	.word	0x08020f28

0800bb14 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f7ff ffe7 	bl	800baf0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800bb22:	2130      	movs	r1, #48	; 0x30
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f012 fc31 	bl	801e38c <_ZdlPvj>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	4a05      	ldr	r2, [pc, #20]	; (800bb54 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ffd3 	bl	800baf0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	080210e4 	.word	0x080210e4

0800bb58 <_ZN8touchgfx6ButtonD0Ev>:
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff ffe7 	bl	800bb34 <_ZN8touchgfx6ButtonD1Ev>
 800bb66:	2134      	movs	r1, #52	; 0x34
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f012 fc0f 	bl	801e38c <_ZdlPvj>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
     * @param bmpReleased The bitmap to show in the "normal" state, ie when button is not pressed.
     * @param bmpPressed  The bitmap to show when the button is pressed.
     *
     * @see Button::setBitmaps
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	8812      	ldrh	r2, [r2, #0]
 800bb8a:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f004 f808 	bl	800fba8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800bb98:	bf00      	nop
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	807b      	strh	r3, [r7, #2]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	887a      	ldrh	r2, [r7, #2]
 800bbb0:	801a      	strh	r2, [r3, #0]
    }
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff ff08 	bl	800b9e0 <_ZN8touchgfx6WidgetC1Ev>
 800bbd0:	4a13      	ldr	r2, [pc, #76]	; (800bc20 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3326      	adds	r3, #38	; 0x26
 800bbda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff ffde 	bl	800bba0 <_ZN8touchgfx9TypedTextC1Et>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3328      	adds	r3, #40	; 0x28
 800bbe8:	2100      	movs	r1, #0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fca6 	bl	800b53c <_ZN8touchgfx9colortypeC1Em>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	859a      	strh	r2, [r3, #44]	; 0x2c
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	22ff      	movs	r2, #255	; 0xff
 800bbfa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	08021004 	.word	0x08021004

0800bc24 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	2300      	movs	r3, #0
 800bc34:	2200      	movs	r2, #0
 800bc36:	2100      	movs	r1, #0
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff fca5 	bl	800b588 <_ZN8touchgfx4RectC1Essss>
    }
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800bc46:	b480      	push	{r7}
 800bc48:	b083      	sub	sp, #12
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800bc62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc64:	b085      	sub	sp, #20
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800bc6e:	687e      	ldr	r6, [r7, #4]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3330      	adds	r3, #48	; 0x30
 800bc76:	681c      	ldr	r4, [r3, #0]
 800bc78:	887d      	ldrh	r5, [r7, #2]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 f845 	bl	800bd0a <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800bc80:	4603      	mov	r3, r0
 800bc82:	81bb      	strh	r3, [r7, #12]
 800bc84:	f107 030c 	add.w	r3, r7, #12
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe fd61 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	6813      	ldr	r3, [r2, #0]
 800bc92:	332c      	adds	r3, #44	; 0x2c
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4610      	mov	r0, r2
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	1aeb      	subs	r3, r5, r3
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	b21b      	sxth	r3, r3
 800bca2:	4619      	mov	r1, r3
 800bca4:	4630      	mov	r0, r6
 800bca6:	47a0      	blx	r4
    }
 800bca8:	bf00      	nop
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcb0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	807b      	strh	r3, [r7, #2]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	332c      	adds	r3, #44	; 0x2c
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800bcce:	4610      	mov	r0, r2
 800bcd0:	4798      	blx	r3
        setBaselineY(baselineY);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3360      	adds	r3, #96	; 0x60
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f9b7 2000 	ldrsh.w	r2, [r7]
 800bcde:	4611      	mov	r1, r2
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	4798      	blx	r3
    }
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	887a      	ldrh	r2, [r7, #2]
 800bcfc:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800bcfe:	bf00      	nop
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800bd0a:	b480      	push	{r7}
 800bd0c:	b083      	sub	sp, #12
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800bd16:	4618      	mov	r0, r3
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
	...

0800bd24 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	4a05      	ldr	r2, [pc, #20]	; (800bd44 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fe65 	bl	800ba04 <_ZN8touchgfx6WidgetD1Ev>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	08021004 	.word	0x08021004

0800bd48 <_ZN8touchgfx8TextAreaD0Ev>:
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ffe7 	bl	800bd24 <_ZN8touchgfx8TextAreaD1Ev>
 800bd56:	2134      	movs	r1, #52	; 0x34
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f012 fb17 	bl	801e38c <_ZdlPvj>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
        : TextArea()
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff ff24 	bl	800bbc0 <_ZN8touchgfx8TextAreaC1Ev>
 800bd78:	4a03      	ldr	r2, [pc, #12]	; (800bd88 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	601a      	str	r2, [r3, #0]
    {
    }
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	0801fe50 	.word	0x0801fe50

0800bd8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	4a05      	ldr	r2, [pc, #20]	; (800bdac <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff ffc1 	bl	800bd24 <_ZN8touchgfx8TextAreaD1Ev>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	0801fe50 	.word	0x0801fe50

0800bdb0 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff ffe7 	bl	800bd8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800bdbe:	2134      	movs	r1, #52	; 0x34
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f012 fae3 	bl	801e38c <_ZdlPvj>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff ffc4 	bl	800bd68 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800bde0:	4a05      	ldr	r2, [pc, #20]	; (800bdf8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	08021188 	.word	0x08021188

0800bdfc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	4a05      	ldr	r2, [pc, #20]	; (800be1c <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff fd7f 	bl	800b910 <_ZN8touchgfx6ScreenD1Ev>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	0801fe1c 	.word	0x0801fe1c

0800be20 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff ffe7 	bl	800bdfc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800be2e:	2140      	movs	r1, #64	; 0x40
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f012 faab 	bl	801e38c <_ZdlPvj>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	4a0f      	ldr	r2, [pc, #60]	; (800be88 <_ZN15Screen1ViewBaseD1Ev+0x48>)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	33dc      	adds	r3, #220	; 0xdc
 800be52:	4618      	mov	r0, r3
 800be54:	f000 f996 	bl	800c184 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	33a4      	adds	r3, #164	; 0xa4
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 f9f7 	bl	800c250 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	336c      	adds	r3, #108	; 0x6c
 800be66:	4618      	mov	r0, r3
 800be68:	f000 f9d0 	bl	800c20c <_ZN8touchgfx12ToggleButtonD1Ev>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3340      	adds	r3, #64	; 0x40
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f9a9 	bl	800c1c8 <_ZN8touchgfx5ImageD1Ev>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff ffbf 	bl	800bdfc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	0801fdcc 	.word	0x0801fdcc

0800be8c <_ZN15Screen1ViewBaseD0Ev>:
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7ff ffd3 	bl	800be40 <_ZN15Screen1ViewBaseD1Ev>
 800be9a:	21ec      	movs	r1, #236	; 0xec
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f012 fa75 	bl	801e38c <_ZdlPvj>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <_ZN15Screen1ViewBase19toggleButtonClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void toggleButtonClicked()
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800bec0:	b590      	push	{r4, r7, lr}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]
 800beca:	460b      	mov	r3, r1
 800becc:	71bb      	strb	r3, [r7, #6]
 800bece:	4613      	mov	r3, r2
 800bed0:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800bed2:	f7fe ff09 	bl	800ace8 <_ZN8touchgfx3HAL11getInstanceEv>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d105      	bne.n	800bee8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800bede:	4a0b      	ldr	r2, [pc, #44]	; (800bf0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800bee0:	2138      	movs	r1, #56	; 0x38
 800bee2:	480b      	ldr	r0, [pc, #44]	; (800bf10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800bee4:	f012 fa7e 	bl	801e3e4 <__assert_func>
 800bee8:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800beea:	f7fe ff09 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800beee:	6803      	ldr	r3, [r0, #0]
 800bef0:	332c      	adds	r3, #44	; 0x2c
 800bef2:	681c      	ldr	r4, [r3, #0]
 800bef4:	797b      	ldrb	r3, [r7, #5]
 800bef6:	79ba      	ldrb	r2, [r7, #6]
 800bef8:	79f9      	ldrb	r1, [r7, #7]
 800befa:	47a0      	blx	r4
 800befc:	4603      	mov	r3, r0
    }
 800befe:	4618      	mov	r0, r3
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd90      	pop	{r4, r7, pc}
 800bf06:	bf00      	nop
 800bf08:	0801f844 	.word	0x0801f844
 800bf0c:	0801ff44 	.word	0x0801ff44
 800bf10:	0801f888 	.word	0x0801f888

0800bf14 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800bf14:	b590      	push	{r4, r7, lr}
 800bf16:	b08b      	sub	sp, #44	; 0x2c
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 f8ca 	bl	800c0b8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800bf24:	4a53      	ldr	r2, [pc, #332]	; (800c074 <_ZN15Screen1ViewBaseC1Ev+0x160>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	601a      	str	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800bf30:	f107 030c 	add.w	r3, r7, #12
 800bf34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fb45 	bl	800b5c8 <_ZN8touchgfx6BitmapC1Et>
 800bf3e:	f107 030c 	add.w	r3, r7, #12
 800bf42:	4619      	mov	r1, r3
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7ff fda3 	bl	800ba90 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	336c      	adds	r3, #108	; 0x6c
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f003 fce8 	bl	800f924 <_ZN8touchgfx12ToggleButtonC1Ev>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	33a4      	adds	r3, #164	; 0xa4
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff ff39 	bl	800bdd0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800bf64:	4b44      	ldr	r3, [pc, #272]	; (800c078 <_ZN15Screen1ViewBaseC1Ev+0x164>)
 800bf66:	613b      	str	r3, [r7, #16]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	f107 0310 	add.w	r3, r7, #16
 800bf70:	cb0c      	ldmia	r3, {r2, r3}
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	f000 f8c6 	bl	800c104 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    image1.setXY(0, 0);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3340      	adds	r3, #64	; 0x40
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2100      	movs	r1, #0
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff fbca 	bl	800b71a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_WALLPAPERS_240X320_ID));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800bf8c:	f107 0318 	add.w	r3, r7, #24
 800bf90:	2102      	movs	r1, #2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff fb18 	bl	800b5c8 <_ZN8touchgfx6BitmapC1Et>
 800bf98:	f107 0318 	add.w	r3, r7, #24
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f003 ff46 	bl	800fe30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    toggleButton.setXY(56, 0);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	336c      	adds	r3, #108	; 0x6c
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2138      	movs	r1, #56	; 0x38
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff fbb4 	bl	800b71a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800bfb8:	f107 031c 	add.w	r3, r7, #28
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff fb02 	bl	800b5c8 <_ZN8touchgfx6BitmapC1Et>
 800bfc4:	f107 0320 	add.w	r3, r7, #32
 800bfc8:	2101      	movs	r1, #1
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7ff fafc 	bl	800b5c8 <_ZN8touchgfx6BitmapC1Et>
 800bfd0:	f107 0220 	add.w	r2, r7, #32
 800bfd4:	f107 031c 	add.w	r3, r7, #28
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7ff fdcc 	bl	800bb78 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton.setAction(buttonCallback);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	33dc      	adds	r3, #220	; 0xdc
 800bfea:	4619      	mov	r1, r3
 800bfec:	4610      	mov	r0, r2
 800bfee:	f7ff fd71 	bl	800bad4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textView.setXY(0, 38);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	33a4      	adds	r3, #164	; 0xa4
 800bff6:	2226      	movs	r2, #38	; 0x26
 800bff8:	2100      	movs	r1, #0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7ff fb8d 	bl	800b71a <_ZN8touchgfx8Drawable5setXYEss>
    textView.setColor(touchgfx::Color::getColorFrom24BitRGB(181, 29, 29));
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800c006:	221d      	movs	r2, #29
 800c008:	211d      	movs	r1, #29
 800c00a:	20b5      	movs	r0, #181	; 0xb5
 800c00c:	f7ff ff58 	bl	800bec0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c010:	4603      	mov	r3, r0
 800c012:	4619      	mov	r1, r3
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff fe16 	bl	800bc46 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textView.setLinespacing(0);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	33a4      	adds	r3, #164	; 0xa4
 800c01e:	2100      	movs	r1, #0
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff fe63 	bl	800bcec <_ZN8touchgfx8TextArea14setLinespacingEs>
    textView.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800c02c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c030:	2100      	movs	r1, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff fdb4 	bl	800bba0 <_ZN8touchgfx9TypedTextC1Et>
 800c038:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800c03a:	4620      	mov	r0, r4
 800c03c:	f003 fdaa 	bl	800fb94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image1);
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	3340      	adds	r3, #64	; 0x40
 800c046:	4619      	mov	r1, r3
 800c048:	4610      	mov	r0, r2
 800c04a:	f7ff fcb9 	bl	800b9c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton);
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	336c      	adds	r3, #108	; 0x6c
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7ff fcb2 	bl	800b9c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textView);
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	33a4      	adds	r3, #164	; 0xa4
 800c062:	4619      	mov	r1, r3
 800c064:	4610      	mov	r0, r2
 800c066:	f7ff fcab 	bl	800b9c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	372c      	adds	r7, #44	; 0x2c
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}
 800c074:	0801fdcc 	.word	0x0801fdcc
 800c078:	0800c091 	.word	0x0800c091

0800c07c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]

}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	336c      	adds	r3, #108	; 0x6c
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d105      	bne.n	800c0b0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction1
        //When toggleButton clicked call virtual function
        //Call toggleButtonClicked
        toggleButtonClicked();
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	332c      	adds	r3, #44	; 0x2c
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	4798      	blx	r3
    }
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f005 fe30 	bl	8011d28 <_ZN8touchgfx6ScreenC1Ev>
 800c0c8:	4a05      	ldr	r2, [pc, #20]	; (800c0e0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	0801fe1c 	.word	0x0801fe1c

0800c0e4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	4a04      	ldr	r2, [pc, #16]	; (800c100 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	0801fecc 	.word	0x0801fecc

0800c104 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	4639      	mov	r1, r7
 800c110:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff ffe4 	bl	800c0e4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800c11c:	4a08      	ldr	r2, [pc, #32]	; (800c140 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	3308      	adds	r3, #8
 800c12c:	463a      	mov	r2, r7
 800c12e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c132:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	0801fe04 	.word	0x0801fe04

0800c144 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
    }
 800c14c:	4a04      	ldr	r2, [pc, #16]	; (800c160 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	0801fecc 	.word	0x0801fecc

0800c164 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    }
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff ffe9 	bl	800c144 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800c172:	2104      	movs	r1, #4
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f012 f909 	bl	801e38c <_ZdlPvj>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	4a05      	ldr	r2, [pc, #20]	; (800c1a4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	601a      	str	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff ffd5 	bl	800c144 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	0801fe04 	.word	0x0801fe04

0800c1a8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ffe7 	bl	800c184 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800c1b6:	2110      	movs	r1, #16
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f012 f8e7 	bl	801e38c <_ZdlPvj>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	4a05      	ldr	r2, [pc, #20]	; (800c1e8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff fc13 	bl	800ba04 <_ZN8touchgfx6WidgetD1Ev>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	08021204 	.word	0x08021204

0800c1ec <_ZN8touchgfx5ImageD0Ev>:
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff ffe7 	bl	800c1c8 <_ZN8touchgfx5ImageD1Ev>
 800c1fa:	212c      	movs	r1, #44	; 0x2c
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f012 f8c5 	bl	801e38c <_ZdlPvj>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4618      	mov	r0, r3
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <_ZN8touchgfx12ToggleButtonD1Ev>:
class ToggleButton : public Button
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	4a05      	ldr	r2, [pc, #20]	; (800c22c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff fc89 	bl	800bb34 <_ZN8touchgfx6ButtonD1Ev>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	08020f94 	.word	0x08020f94

0800c230 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff ffe7 	bl	800c20c <_ZN8touchgfx12ToggleButtonD1Ev>
 800c23e:	2138      	movs	r1, #56	; 0x38
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f012 f8a3 	bl	801e38c <_ZdlPvj>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	4a05      	ldr	r2, [pc, #20]	; (800c270 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fd93 	bl	800bd8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	08021188 	.word	0x08021188

0800c274 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff ffe7 	bl	800c250 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800c282:	2138      	movs	r1, #56	; 0x38
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f012 f881 	bl	801e38c <_ZdlPvj>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68d2      	ldr	r2, [r2, #12]
 800c2a6:	1052      	asrs	r2, r2, #1
 800c2a8:	1898      	adds	r0, r3, r2
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d102      	bne.n	800c2bc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	e00a      	b.n	800c2d2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	68d2      	ldr	r2, [r2, #12]
 800c2c4:	1052      	asrs	r2, r2, #1
 800c2c6:	4413      	add	r3, r2
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	6892      	ldr	r2, [r2, #8]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	4798      	blx	r3
    }
 800c2d6:	bf00      	nop
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800c2de:	b480      	push	{r7}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d010      	beq.n	800c310 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d107      	bne.n	800c306 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800c302:	2301      	movs	r3, #1
 800c304:	e000      	b.n	800c308 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800c306:	2300      	movs	r3, #0
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d001      	beq.n	800c310 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800c310:	2300      	movs	r3, #0
    }
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
	...

0800c320 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800c320:	b480      	push	{r7}
 800c322:	af00      	add	r7, sp, #0
    return bitmap_database;
 800c324:	4b02      	ldr	r3, [pc, #8]	; (800c330 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800c326:	4618      	mov	r0, r3
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	0801ffa0 	.word	0x0801ffa0

0800c334 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800c338:	2303      	movs	r3, #3
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	4613      	mov	r3, r2
 800c350:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800c352:	4a07      	ldr	r2, [pc, #28]	; (800c370 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6013      	str	r3, [r2, #0]
        fonts = f;
 800c358:	4a06      	ldr	r2, [pc, #24]	; (800c374 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800c35e:	4a06      	ldr	r2, [pc, #24]	; (800c378 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800c360:	88fb      	ldrh	r3, [r7, #6]
 800c362:	8013      	strh	r3, [r2, #0]
    }
 800c364:	bf00      	nop
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr
 800c370:	2002eee8 	.word	0x2002eee8
 800c374:	2002eef0 	.word	0x2002eef0
 800c378:	2002eeec 	.word	0x2002eeec

0800c37c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800c38a:	88fb      	ldrh	r3, [r7, #6]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d127      	bne.n	800c3e0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800c390:	88fb      	ldrh	r3, [r7, #6]
 800c392:	4a1e      	ldr	r2, [pc, #120]	; (800c40c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800c394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d016      	beq.n	800c3ca <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800c39c:	88fb      	ldrh	r3, [r7, #6]
 800c39e:	4a1b      	ldr	r2, [pc, #108]	; (800c40c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800c3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3a4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	4a18      	ldr	r2, [pc, #96]	; (800c410 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800c3b0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	4a16      	ldr	r2, [pc, #88]	; (800c414 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800c3bc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
 800c3c8:	e00a      	b.n	800c3e0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800c3ca:	4b11      	ldr	r3, [pc, #68]	; (800c410 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800c3cc:	4a12      	ldr	r2, [pc, #72]	; (800c418 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800c3ce:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800c3d0:	4a12      	ldr	r2, [pc, #72]	; (800c41c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800c3d2:	4b10      	ldr	r3, [pc, #64]	; (800c414 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800c3d4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800c3d6:	88fb      	ldrh	r3, [r7, #6]
 800c3d8:	4a11      	ldr	r2, [pc, #68]	; (800c420 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800c3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3de:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00d      	beq.n	800c402 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800c3e6:	4a0f      	ldr	r2, [pc, #60]	; (800c424 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800c3ec:	f000 f83e 	bl	800c46c <_ZN17TypedTextDatabase8getFontsEv>
 800c3f0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800c3f2:	f000 f833 	bl	800c45c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff ffa1 	bl	800c344 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800c402:	bf00      	nop
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}
 800c40a:	bf00      	nop
 800c40c:	2002de3c 	.word	0x2002de3c
 800c410:	2002de44 	.word	0x2002de44
 800c414:	2002de48 	.word	0x2002de48
 800c418:	08053d9c 	.word	0x08053d9c
 800c41c:	08053d98 	.word	0x08053d98
 800c420:	08053da4 	.word	0x08053da4
 800c424:	2002de40 	.word	0x2002de40

0800c428 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800c434:	4b07      	ldr	r3, [pc, #28]	; (800c454 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	4b07      	ldr	r3, [pc, #28]	; (800c458 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800c43a:	6819      	ldr	r1, [r3, #0]
 800c43c:	887b      	ldrh	r3, [r7, #2]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	440b      	add	r3, r1
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	005b      	lsls	r3, r3, #1
 800c446:	4413      	add	r3, r2
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	2002de44 	.word	0x2002de44
 800c458:	2002de48 	.word	0x2002de48

0800c45c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800c460:	2301      	movs	r3, #1
}
 800c462:	4618      	mov	r0, r3
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
    return _fonts;
 800c470:	4b02      	ldr	r3, [pc, #8]	; (800c47c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800c472:	4618      	mov	r0, r3
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	2002de4c 	.word	0x2002de4c

0800c480 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d113      	bne.n	800c4b8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c496:	4293      	cmp	r3, r2
 800c498:	d10e      	bne.n	800c4b8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800c49a:	f7fe faad 	bl	800a9f8 <_Z23getFont_verdana_20_4bppv>
 800c49e:	4602      	mov	r2, r0
};
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c4a2:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800c4a4:	f7fe faea 	bl	800aa7c <_Z23getFont_verdana_40_4bppv>
 800c4a8:	4602      	mov	r2, r0
};
 800c4aa:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c4ac:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800c4ae:	f7fe fa61 	bl	800a974 <_Z23getFont_verdana_10_4bppv>
 800c4b2:	4602      	mov	r2, r0
};
 800c4b4:	4b02      	ldr	r3, [pc, #8]	; (800c4c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c4b6:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	2002de4c 	.word	0x2002de4c

0800c4c4 <_GLOBAL__sub_I__fonts>:
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	f7ff ffd7 	bl	800c480 <_Z41__static_initialization_and_destruction_0ii>
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	4a05      	ldr	r2, [pc, #20]	; (800c4f4 <_ZN19FrontendApplicationD1Ev+0x20>)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fd59 	bl	800af9c <_ZN23FrontendApplicationBaseD1Ev>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	0801ffe4 	.word	0x0801ffe4

0800c4f8 <_ZN19FrontendApplicationD0Ev>:
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff ffe7 	bl	800c4d4 <_ZN19FrontendApplicationD1Ev>
 800c506:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f011 ff3e 	bl	801e38c <_ZdlPvj>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b082      	sub	sp, #8
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f82d 	bl	800c588 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	f004 fb9d 	bl	8010c70 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800c536:	bf00      	nop
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	68b9      	ldr	r1, [r7, #8]
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fd9c 	bl	800b090 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800c558:	4a03      	ldr	r2, [pc, #12]	; (800c568 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	601a      	str	r2, [r3, #0]
{

}
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0801ffe4 	.word	0x0801ffe4

0800c56c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
{

}
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <_ZN5Model4tickEv>:

void Model::tick()
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
    {
    }
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
    {
    }
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
    {
 800c5cc:	4a04      	ldr	r2, [pc, #16]	; (800c5e0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	601a      	str	r2, [r3, #0]
    }
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	08020058 	.word	0x08020058

0800c5e4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
    }
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ffe9 	bl	800c5c4 <_ZN8touchgfx9PresenterD1Ev>
 800c5f2:	2104      	movs	r1, #4
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f011 fec9 	bl	801e38c <_ZdlPvj>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
    {
 800c60c:	4a04      	ldr	r2, [pc, #16]	; (800c620 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	601a      	str	r2, [r3, #0]
    }
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	08020058 	.word	0x08020058

0800c624 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	4a06      	ldr	r2, [pc, #24]	; (800c648 <_ZN13ModelListenerC1Ev+0x24>)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	605a      	str	r2, [r3, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4618      	mov	r0, r3
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	08020048 	.word	0x08020048

0800c64c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	4a04      	ldr	r2, [pc, #16]	; (800c668 <_ZN13ModelListenerD1Ev+0x1c>)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	08020048 	.word	0x08020048

0800c66c <_ZN13ModelListenerD0Ev>:
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff ffe9 	bl	800c64c <_ZN13ModelListenerD1Ev>
 800c67a:	2108      	movs	r1, #8
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f011 fe85 	bl	801e38c <_ZdlPvj>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	4a09      	ldr	r2, [pc, #36]	; (800c6bc <_ZN16Screen1PresenterD1Ev+0x30>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	4a09      	ldr	r2, [pc, #36]	; (800c6c0 <_ZN16Screen1PresenterD1Ev+0x34>)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	605a      	str	r2, [r3, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff ffd1 	bl	800c64c <_ZN13ModelListenerD1Ev>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff ff89 	bl	800c5c4 <_ZN8touchgfx9PresenterD1Ev>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	08020020 	.word	0x08020020
 800c6c0:	08020038 	.word	0x08020038

0800c6c4 <_ZThn4_N16Screen1PresenterD1Ev>:
 800c6c4:	f1a0 0004 	sub.w	r0, r0, #4
 800c6c8:	e7e0      	b.n	800c68c <_ZN16Screen1PresenterD1Ev>
 800c6ca:	bf00      	nop

0800c6cc <_ZN16Screen1PresenterD0Ev>:
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7ff ffd9 	bl	800c68c <_ZN16Screen1PresenterD1Ev>
 800c6da:	2110      	movs	r1, #16
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f011 fe55 	bl	801e38c <_ZdlPvj>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <_ZThn4_N16Screen1PresenterD0Ev>:
 800c6ec:	f1a0 0004 	sub.w	r0, r0, #4
 800c6f0:	e7ec      	b.n	800c6cc <_ZN16Screen1PresenterD0Ev>
	...

0800c6f4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
    : view(v)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff ff7f 	bl	800c604 <_ZN8touchgfx9PresenterC1Ev>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3304      	adds	r3, #4
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff ff8a 	bl	800c624 <_ZN13ModelListenerC1Ev>
 800c710:	4a06      	ldr	r2, [pc, #24]	; (800c72c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	4a06      	ldr	r2, [pc, #24]	; (800c730 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	605a      	str	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	60da      	str	r2, [r3, #12]
{

}
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	08020020 	.word	0x08020020
 800c730:	08020038 	.word	0x08020038

0800c734 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]

}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]

}
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <_ZNK8touchgfx6BitmapeqERKS0_>:
     *
     * @param other The bitmap to compare with.
     *
     * @return True if this bitmap has the same id as the other bitmap.
     */
    bool operator==(const Bitmap& other) const
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
    {
        return (bitmapId == other.bitmapId);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	881a      	ldrh	r2, [r3, #0]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	429a      	cmp	r2, r3
 800c770:	bf0c      	ite	eq
 800c772:	2301      	moveq	r3, #1
 800c774:	2300      	movne	r3, #0
 800c776:	b2db      	uxtb	r3, r3
    }
 800c778:	4618      	mov	r0, r3
 800c77a:	370c      	adds	r7, #12
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     *
     *        Gets the state.
     *
     * @return true if state is currently active.
     */
    bool getState() const
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
    {
        return up == originalPressed;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3334      	adds	r3, #52	; 0x34
 800c796:	4619      	mov	r1, r3
 800c798:	4610      	mov	r0, r2
 800c79a:	f7ff ffdf 	bl	800c75c <_ZNK8touchgfx6BitmapeqERKS0_>
 800c79e:	4603      	mov	r3, r0
    }
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	4a05      	ldr	r2, [pc, #20]	; (800c7e4 <_ZN11Screen1ViewD1Ev+0x20>)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fb33 	bl	800be40 <_ZN15Screen1ViewBaseD1Ev>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	08020070 	.word	0x08020070

0800c7e8 <_ZN11Screen1ViewD0Ev>:
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ffe7 	bl	800c7c4 <_ZN11Screen1ViewD1Ev>
 800c7f6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f011 fdc6 	bl	801e38c <_ZdlPvj>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <_ZN11Screen1ViewC1Ev>:
//#include <touchgfx/Color.hpp>
//#include <texts/TextKeysAndLanguages.hpp>

#include "stdio.h"
#include "string.h"
Screen1View::Screen1View()
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	f7ff fb7c 	bl	800bf14 <_ZN15Screen1ViewBaseC1Ev>
 800c81c:	4a03      	ldr	r2, [pc, #12]	; (800c82c <_ZN11Screen1ViewC1Ev+0x20>)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]
{

}
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	08020070 	.word	0x08020070

0800c830 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af02      	add	r7, sp, #8
 800c836:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fc1e 	bl	800c07c <_ZN15Screen1ViewBase11setupScreenEv>

    textViewBuffer[0] = 0;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

    Screen1ViewBase::textView.setPosition(0, 38, 240, 282);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c84e:	f44f 738d 	mov.w	r3, #282	; 0x11a
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	23f0      	movs	r3, #240	; 0xf0
 800c856:	2226      	movs	r2, #38	; 0x26
 800c858:	2100      	movs	r1, #0
 800c85a:	f7fe ff13 	bl	800b684 <_ZN8touchgfx8Drawable11setPositionEssss>
    Screen1ViewBase::textView.setWildcard(textViewBuffer);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	33ec      	adds	r3, #236	; 0xec
 800c868:	4619      	mov	r1, r3
 800c86a:	4610      	mov	r0, r2
 800c86c:	f7ff ff9c 	bl	800c7a8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff f87c 	bl	800b980 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <_ZN11Screen1View19toggleButtonClickedEv>:

void Screen1View::toggleButtonClicked()
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
	if(toggleButton.getState())
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	336c      	adds	r3, #108	; 0x6c
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff ff71 	bl	800c784 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d00c      	beq.n	800c8c2 <_ZN11Screen1View19toggleButtonClickedEv+0x32>
	{
		Unicode::strncpy(textViewBuffer, (const char*)"button is pressed", strlen("button is pressed"));
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	33ec      	adds	r3, #236	; 0xec
 800c8ac:	2211      	movs	r2, #17
 800c8ae:	490d      	ldr	r1, [pc, #52]	; (800c8e4 <_ZN11Screen1View19toggleButtonClickedEv+0x54>)
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f006 f808 	bl	80128c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
		Screen1ViewBase::textView.invalidate();
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	33a4      	adds	r3, #164	; 0xa4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f004 ff2e 	bl	801171c <_ZNK8touchgfx8Drawable10invalidateEv>
	else
	{
		Unicode::strncpy(textViewBuffer, (const char*)"button is released", strlen("button is released"));
		Screen1ViewBase::textView.invalidate();
	}
}
 800c8c0:	e00b      	b.n	800c8da <_ZN11Screen1View19toggleButtonClickedEv+0x4a>
		Unicode::strncpy(textViewBuffer, (const char*)"button is released", strlen("button is released"));
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	33ec      	adds	r3, #236	; 0xec
 800c8c6:	2212      	movs	r2, #18
 800c8c8:	4907      	ldr	r1, [pc, #28]	; (800c8e8 <_ZN11Screen1View19toggleButtonClickedEv+0x58>)
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f005 fffb 	bl	80128c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
		Screen1ViewBase::textView.invalidate();
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	33a4      	adds	r3, #164	; 0xa4
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f004 ff21 	bl	801171c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	0801f9a4 	.word	0x0801f9a4
 800c8e8:	0801f9b8 	.word	0x0801f9b8

0800c8ec <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
    {
 800c8f4:	4a04      	ldr	r2, [pc, #16]	; (800c908 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
    }
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	080200c0 	.word	0x080200c0

0800c90c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
    }
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff ffe9 	bl	800c8ec <_ZN8touchgfx15TouchControllerD1Ev>
 800c91a:	2104      	movs	r1, #4
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f011 fd35 	bl	801e38c <_ZdlPvj>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <_ZN20STM32TouchController4initEv>:
#include <STM32TouchController.hpp>
#include "stm32f429i_discovery_ts.h"


void STM32TouchController::init()
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 800c934:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c938:	20f0      	movs	r0, #240	; 0xf0
 800c93a:	f7f5 ff77 	bl	800282c <BSP_TS_Init>
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b086      	sub	sp, #24
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef TS_State;
    BSP_TS_GetState(&TS_State);
 800c952:	f107 0310 	add.w	r3, r7, #16
 800c956:	4618      	mov	r0, r3
 800c958:	f7f5 ffa2 	bl	80028a0 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
 800c95c:	8a3b      	ldrh	r3, [r7, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d009      	beq.n	800c976 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = TS_State.X;
 800c962:	8a7b      	ldrh	r3, [r7, #18]
 800c964:	461a      	mov	r2, r3
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	601a      	str	r2, [r3, #0]
        y = TS_State.Y;
 800c96a:	8abb      	ldrh	r3, [r7, #20]
 800c96c:	461a      	mov	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	601a      	str	r2, [r3, #0]
        return true;
 800c972:	2301      	movs	r3, #1
 800c974:	e000      	b.n	800c978 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	4a05      	ldr	r2, [pc, #20]	; (800c9a0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff ffab 	bl	800c8ec <_ZN8touchgfx15TouchControllerD1Ev>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	080200a8 	.word	0x080200a8

0800c9a4 <_ZN20STM32TouchControllerD0Ev>:
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff ffe7 	bl	800c980 <_ZN20STM32TouchControllerD1Ev>
 800c9b2:	2104      	movs	r1, #4
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f011 fce9 	bl	801e38c <_ZdlPvj>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]

}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	71fb      	strb	r3, [r7, #7]

}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	71fb      	strb	r3, [r7, #7]

}
 800c9fa:	bf00      	nop
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
	...

0800ca08 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
    {
 800ca10:	4a04      	ldr	r2, [pc, #16]	; (800ca24 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	601a      	str	r2, [r3, #0]
    }
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	080209c0 	.word	0x080209c0

0800ca28 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
    }
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7ff ffe9 	bl	800ca08 <_ZN8touchgfx3HALD1Ev>
 800ca36:	2178      	movs	r1, #120	; 0x78
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f011 fca7 	bl	801e38c <_ZdlPvj>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	78fa      	ldrb	r2, [r7, #3]
 800ca58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4610      	mov	r0, r2
 800ca86:	4798      	blx	r3
 800ca88:	4603      	mov	r3, r0
    }
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f002 fdd6 	bl	800f64c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3390      	adds	r3, #144	; 0x90
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	4798      	blx	r3
    }
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
    {
        return false;
 800cabe:	2300      	movs	r3, #0
    }
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 800cacc:	b590      	push	{r4, r7, lr}
 800cace:	b08b      	sub	sp, #44	; 0x2c
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4611      	mov	r1, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	460b      	mov	r3, r1
 800cadc:	80fb      	strh	r3, [r7, #6]
 800cade:	4613      	mov	r3, r2
 800cae0:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 800cae2:	f7fe f90d 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800cae6:	4602      	mov	r2, r0
 800cae8:	6813      	ldr	r3, [r2, #0]
 800caea:	3328      	adds	r3, #40	; 0x28
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4610      	mov	r0, r2
 800caf0:	4798      	blx	r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800caf6:	8b7b      	ldrh	r3, [r7, #26]
 800caf8:	4a3d      	ldr	r2, [pc, #244]	; (800cbf0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 800cafa:	8812      	ldrh	r2, [r2, #0]
 800cafc:	fb02 f303 	mul.w	r3, r2, r3
 800cb00:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800cb0e:	797b      	ldrb	r3, [r7, #5]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d005      	beq.n	800cb20 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800cb14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	4413      	add	r3, r2
 800cb1a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800cb20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800cb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800cb34:	88fb      	ldrh	r3, [r7, #6]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	2b1f      	cmp	r3, #31
 800cb3a:	d84d      	bhi.n	800cbd8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 800cb3c:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cbc5 	.word	0x0800cbc5
 800cb48:	0800cbc5 	.word	0x0800cbc5
 800cb4c:	0800cbd9 	.word	0x0800cbd9
 800cb50:	0800cbc5 	.word	0x0800cbc5
 800cb54:	0800cbd9 	.word	0x0800cbd9
 800cb58:	0800cbd9 	.word	0x0800cbd9
 800cb5c:	0800cbd9 	.word	0x0800cbd9
 800cb60:	0800cbc5 	.word	0x0800cbc5
 800cb64:	0800cbd9 	.word	0x0800cbd9
 800cb68:	0800cbd9 	.word	0x0800cbd9
 800cb6c:	0800cbd9 	.word	0x0800cbd9
 800cb70:	0800cbd9 	.word	0x0800cbd9
 800cb74:	0800cbd9 	.word	0x0800cbd9
 800cb78:	0800cbd9 	.word	0x0800cbd9
 800cb7c:	0800cbd9 	.word	0x0800cbd9
 800cb80:	0800cbc5 	.word	0x0800cbc5
 800cb84:	0800cbd9 	.word	0x0800cbd9
 800cb88:	0800cbd9 	.word	0x0800cbd9
 800cb8c:	0800cbd9 	.word	0x0800cbd9
 800cb90:	0800cbd9 	.word	0x0800cbd9
 800cb94:	0800cbd9 	.word	0x0800cbd9
 800cb98:	0800cbd9 	.word	0x0800cbd9
 800cb9c:	0800cbd9 	.word	0x0800cbd9
 800cba0:	0800cbc5 	.word	0x0800cbc5
 800cba4:	0800cbd9 	.word	0x0800cbd9
 800cba8:	0800cbd9 	.word	0x0800cbd9
 800cbac:	0800cbd9 	.word	0x0800cbd9
 800cbb0:	0800cbd9 	.word	0x0800cbd9
 800cbb4:	0800cbd9 	.word	0x0800cbd9
 800cbb8:	0800cbd9 	.word	0x0800cbd9
 800cbbc:	0800cbd9 	.word	0x0800cbd9
 800cbc0:	0800cbc5 	.word	0x0800cbc5
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	3374      	adds	r3, #116	; 0x74
 800cbca:	681c      	ldr	r4, [r3, #0]
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	6a3a      	ldr	r2, [r7, #32]
 800cbd0:	68b9      	ldr	r1, [r7, #8]
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	47a0      	blx	r4
            break;
 800cbd6:	e006      	b.n	800cbe6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 800cbd8:	4b06      	ldr	r3, [pc, #24]	; (800cbf4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 800cbda:	4a07      	ldr	r2, [pc, #28]	; (800cbf8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 800cbdc:	f240 3125 	movw	r1, #805	; 0x325
 800cbe0:	4806      	ldr	r0, [pc, #24]	; (800cbfc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 800cbe2:	f011 fbff 	bl	801e3e4 <__assert_func>
            break;
        }
    }
 800cbe6:	bf00      	nop
 800cbe8:	372c      	adds	r7, #44	; 0x2c
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd90      	pop	{r4, r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	2002ee74 	.word	0x2002ee74
 800cbf4:	0801f9cc 	.word	0x0801f9cc
 800cbf8:	080201d4 	.word	0x080201d4
 800cbfc:	0801f9ec 	.word	0x0801f9ec

0800cc00 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800cc14:	4b11      	ldr	r3, [pc, #68]	; (800cc5c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800cc16:	4a12      	ldr	r2, [pc, #72]	; (800cc60 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800cc18:	f240 3137 	movw	r1, #823	; 0x337
 800cc1c:	4811      	ldr	r0, [pc, #68]	; (800cc64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800cc1e:	f011 fbe1 	bl	801e3e4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	bf14      	ite	ne
 800cc3a:	2301      	movne	r3, #1
 800cc3c:	2300      	moveq	r3, #0
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	4b09      	ldr	r3, [pc, #36]	; (800cc68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800cc42:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	bf14      	ite	ne
 800cc4a:	2301      	movne	r3, #1
 800cc4c:	2300      	moveq	r3, #0
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	4b06      	ldr	r3, [pc, #24]	; (800cc6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800cc52:	701a      	strb	r2, [r3, #0]
    }
 800cc54:	bf00      	nop
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	0801fa30 	.word	0x0801fa30
 800cc60:	08020184 	.word	0x08020184
 800cc64:	0801f9ec 	.word	0x0801f9ec
 800cc68:	2002ee76 	.word	0x2002ee76
 800cc6c:	2002ee77 	.word	0x2002ee77

0800cc70 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc88:	887a      	ldrh	r2, [r7, #2]
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	4798      	blx	r3
        }
    }
 800cc8e:	bf00      	nop
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b082      	sub	sp, #8
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3318      	adds	r3, #24
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4610      	mov	r0, r2
 800ccae:	4798      	blx	r3
 800ccb0:	4603      	mov	r3, r0
    }
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d017      	beq.n	800cd04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800ccd4:	4b1a      	ldr	r3, [pc, #104]	; (800cd40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d12a      	bne.n	800cd32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800ccdc:	4b19      	ldr	r3, [pc, #100]	; (800cd44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800ccde:	881a      	ldrh	r2, [r3, #0]
 800cce0:	4b19      	ldr	r3, [pc, #100]	; (800cd48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800cce2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800cce4:	4b19      	ldr	r3, [pc, #100]	; (800cd4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800cce6:	881a      	ldrh	r2, [r3, #0]
 800cce8:	4b19      	ldr	r3, [pc, #100]	; (800cd50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800ccea:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800ccec:	4b16      	ldr	r3, [pc, #88]	; (800cd48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800ccee:	881a      	ldrh	r2, [r3, #0]
 800ccf0:	4b16      	ldr	r3, [pc, #88]	; (800cd4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800ccf2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800ccf4:	4b16      	ldr	r3, [pc, #88]	; (800cd50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800ccf6:	881a      	ldrh	r2, [r3, #0]
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800ccfa:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800ccfc:	4b10      	ldr	r3, [pc, #64]	; (800cd40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800ccfe:	2201      	movs	r2, #1
 800cd00:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800cd02:	e016      	b.n	800cd32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800cd04:	4b0e      	ldr	r3, [pc, #56]	; (800cd40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d012      	beq.n	800cd32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800cd0c:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800cd0e:	881a      	ldrh	r2, [r3, #0]
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800cd12:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800cd14:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800cd16:	881a      	ldrh	r2, [r3, #0]
 800cd18:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800cd1a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800cd1c:	4b0c      	ldr	r3, [pc, #48]	; (800cd50 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800cd1e:	881a      	ldrh	r2, [r3, #0]
 800cd20:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800cd22:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800cd24:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800cd26:	881a      	ldrh	r2, [r3, #0]
 800cd28:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800cd2a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800cd2c:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	701a      	strb	r2, [r3, #0]
    }
 800cd32:	bf00      	nop
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	2002ee70 	.word	0x2002ee70
 800cd44:	2002ee6c 	.word	0x2002ee6c
 800cd48:	2002ee72 	.word	0x2002ee72
 800cd4c:	2002ee6e 	.word	0x2002ee6e
 800cd50:	2002ee74 	.word	0x2002ee74

0800cd54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 fef6 	bl	800eb50 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	4a05      	ldr	r2, [pc, #20]	; (800cd8c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff fe43 	bl	800ca08 <_ZN8touchgfx3HALD1Ev>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	080203ac 	.word	0x080203ac

0800cd90 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ffe7 	bl	800cd6c <_ZN20TouchGFXGeneratedHALD1Ev>
 800cd9e:	2178      	movs	r1, #120	; 0x78
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f011 faf3 	bl	801e38c <_ZdlPvj>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff ffca 	bl	800cd54 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <_ZN11TouchGFXHAL10initializeEv>:
    void    LCD_IO_WriteReg(uint8_t Reg);
}
using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f001 fb32 	bl	800e43c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
	enableLCDControllerInterrupt();
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3368      	adds	r3, #104	; 0x68
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	4798      	blx	r3
	enableInterrupts();
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	3360      	adds	r3, #96	; 0x60
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	4798      	blx	r3

	OSWrappers::waitForVSync();
 800ce00:	f000 f922 	bl	800d048 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
	backPorchExited();
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3358      	adds	r3, #88	; 0x58
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4610      	mov	r0, r2
 800ce10:	4798      	blx	r3

	LCD_IO_WriteReg(0x29);
 800ce12:	2029      	movs	r0, #41	; 0x29
 800ce14:	f7f5 fc56 	bl	80026c4 <LCD_IO_WriteReg>
	for(;;)
	{
		OSWrappers::waitForVSync();
 800ce18:	f000 f916 	bl	800d048 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
		backPorchExited();
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3358      	adds	r3, #88	; 0x58
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4610      	mov	r0, r2
 800ce28:	4798      	blx	r3
		OSWrappers::waitForVSync();
 800ce2a:	e7f5      	b.n	800ce18 <_ZN11TouchGFXHAL9taskEntryEv+0x38>

0800ce2c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f001 fb8e 	bl	800e558 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800ce3c:	4603      	mov	r3, r0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b082      	sub	sp, #8
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f001 fb8d 	bl	800e574 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f001 fb95 	bl	800e5a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800ce76:	bf00      	nop
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b082      	sub	sp, #8
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f001 fb0b 	bl	800e4a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f001 fb0f 	bl	800e4c4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800cea6:	bf00      	nop
 800cea8:	3708      	adds	r7, #8
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b082      	sub	sp, #8
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f001 fb11 	bl	800e4e0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800cebe:	bf00      	nop
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f001 fb13 	bl	800e4fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
	...

0800cee0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	4a05      	ldr	r2, [pc, #20]	; (800cf00 <_ZN11TouchGFXHALD1Ev+0x20>)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff ff3b 	bl	800cd6c <_ZN20TouchGFXGeneratedHALD1Ev>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	080200d8 	.word	0x080200d8

0800cf04 <_ZN11TouchGFXHALD0Ev>:
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff ffe7 	bl	800cee0 <_ZN11TouchGFXHALD1Ev>
 800cf12:	2178      	movs	r1, #120	; 0x78
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f011 fa39 	bl	801e38c <_ZdlPvj>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 800cf28:	2203      	movs	r2, #3
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	2001      	movs	r0, #1
 800cf2e:	f7fb f909 	bl	8008144 <xQueueGenericCreate>
 800cf32:	4602      	mov	r2, r0
 800cf34:	4b0b      	ldr	r3, [pc, #44]	; (800cf64 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d006      	beq.n	800cf4e <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 800cf40:	4b08      	ldr	r3, [pc, #32]	; (800cf64 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800cf42:	6818      	ldr	r0, [r3, #0]
 800cf44:	2300      	movs	r3, #0
 800cf46:	2200      	movs	r2, #0
 800cf48:	2100      	movs	r1, #0
 800cf4a:	f7fb f95d 	bl	8008208 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 800cf4e:	2200      	movs	r2, #0
 800cf50:	2101      	movs	r1, #1
 800cf52:	2001      	movs	r0, #1
 800cf54:	f7fb f8f6 	bl	8008144 <xQueueGenericCreate>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800cf5c:	601a      	str	r2, [r3, #0]
}
 800cf5e:	bf00      	nop
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2002de58 	.word	0x2002de58
 800cf68:	2002de5c 	.word	0x2002de5c

0800cf6c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 800cf70:	4b04      	ldr	r3, [pc, #16]	; (800cf84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f04f 31ff 	mov.w	r1, #4294967295
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fb fc39 	bl	80087f0 <xQueueSemaphoreTake>
}
 800cf7e:	bf00      	nop
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	2002de58 	.word	0x2002de58

0800cf88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 800cf8c:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 800cf8e:	6818      	ldr	r0, [r3, #0]
 800cf90:	2300      	movs	r3, #0
 800cf92:	2200      	movs	r2, #0
 800cf94:	2100      	movs	r1, #0
 800cf96:	f7fb f937 	bl	8008208 <xQueueGenericSend>
}
 800cf9a:	bf00      	nop
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	2002de58 	.word	0x2002de58

0800cfa4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 800cfa8:	4b03      	ldr	r3, [pc, #12]	; (800cfb8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2100      	movs	r1, #0
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fb fc1e 	bl	80087f0 <xQueueSemaphoreTake>
}
 800cfb4:	bf00      	nop
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	2002de58 	.word	0x2002de58

0800cfbc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 800cfc6:	4b0b      	ldr	r3, [pc, #44]	; (800cff4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	1d3a      	adds	r2, r7, #4
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fb faa8 	bl	8008524 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d007      	beq.n	800cfea <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 800cfda:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 800cfdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	f3bf 8f6f 	isb	sy
}
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	2002de58 	.word	0x2002de58
 800cff8:	e000ed04 	.word	0xe000ed04

0800cffc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
    if (vsync_q)
 800d002:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d013      	beq.n	800d032 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 800d00a:	2300      	movs	r3, #0
 800d00c:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 800d00e:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800d010:	6818      	ldr	r0, [r3, #0]
 800d012:	1d3a      	adds	r2, r7, #4
 800d014:	2300      	movs	r3, #0
 800d016:	490a      	ldr	r1, [pc, #40]	; (800d040 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 800d018:	f7fb f9f0 	bl	80083fc <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d007      	beq.n	800d032 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 800d022:	4b08      	ldr	r3, [pc, #32]	; (800d044 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 800d024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	f3bf 8f6f 	isb	sy
    }
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	2002de5c 	.word	0x2002de5c
 800d040:	2000008c 	.word	0x2000008c
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 800d04c:	4b08      	ldr	r3, [pc, #32]	; (800d070 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2200      	movs	r2, #0
 800d052:	4908      	ldr	r1, [pc, #32]	; (800d074 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800d054:	4618      	mov	r0, r3
 800d056:	f7fb faef 	bl	8008638 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 800d05a:	4b05      	ldr	r3, [pc, #20]	; (800d070 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f04f 32ff 	mov.w	r2, #4294967295
 800d062:	4904      	ldr	r1, [pc, #16]	; (800d074 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800d064:	4618      	mov	r0, r3
 800d066:	f7fb fae7 	bl	8008638 <xQueueReceive>
}
 800d06a:	bf00      	nop
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	2002de5c 	.word	0x2002de5c
 800d074:	2000008c 	.word	0x2000008c

0800d078 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	4603      	mov	r3, r0
 800d080:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 800d082:	88fb      	ldrh	r3, [r7, #6]
 800d084:	4618      	mov	r0, r3
 800d086:	f7fb ff81 	bl	8008f8c <vTaskDelay>
}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
	...

0800d094 <__NVIC_EnableIRQ>:
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	db0d      	blt.n	800d0c2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	f003 021f 	and.w	r2, r3, #31
 800d0b0:	4907      	ldr	r1, [pc, #28]	; (800d0d0 <__NVIC_EnableIRQ+0x3c>)
 800d0b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0b6:	095b      	lsrs	r3, r3, #5
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	fa00 f202 	lsl.w	r2, r0, r2
 800d0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	e000e100 	.word	0xe000e100

0800d0d4 <__NVIC_DisableIRQ>:
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	db12      	blt.n	800d10c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 021f 	and.w	r2, r3, #31
 800d0f0:	4909      	ldr	r1, [pc, #36]	; (800d118 <__NVIC_DisableIRQ+0x44>)
 800d0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0f6:	095b      	lsrs	r3, r3, #5
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	fa00 f202 	lsl.w	r2, r0, r2
 800d0fe:	3320      	adds	r3, #32
 800d100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d108:	f3bf 8f6f 	isb	sy
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	e000e100 	.word	0xe000e100

0800d11c <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
        return color;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
    }
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	b29b      	uxth	r3, r3
    }
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
    {
 800d174:	4a04      	ldr	r2, [pc, #16]	; (800d188 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	601a      	str	r2, [r3, #0]
    }
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	08020280 	.word	0x08020280

0800d18c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
    }
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff ffe9 	bl	800d16c <_ZN8touchgfx9DMA_QueueD1Ev>
 800d19a:	2104      	movs	r1, #4
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f011 f8f5 	bl	801e38c <_ZdlPvj>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	3344      	adds	r3, #68	; 0x44
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	4798      	blx	r3
    }
 800d1c0:	bf00      	nop
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800d1d0:	2300      	movs	r3, #0
    }
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	370c      	adds	r7, #12
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
	...

0800d1e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
    {
 800d1e8:	4a04      	ldr	r2, [pc, #16]	; (800d1fc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	601a      	str	r2, [r3, #0]
    }
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	08020e04 	.word	0x08020e04

0800d200 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
    }
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff ffe9 	bl	800d1e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800d20e:	210c      	movs	r1, #12
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f011 f8bb 	bl	801e38c <_ZdlPvj>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800d22a:	4a09      	ldr	r2, [pc, #36]	; (800d250 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	605a      	str	r2, [r3, #4]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	721a      	strb	r2, [r3, #8]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	725a      	strb	r2, [r3, #9]
    {
    }
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	08020e04 	.word	0x08020e04

0800d254 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3314      	adds	r3, #20
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4610      	mov	r0, r2
 800d26c:	4798      	blx	r3
    }
 800d26e:	bf00      	nop
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3328      	adds	r3, #40	; 0x28
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4610      	mov	r0, r2
 800d28a:	4798      	blx	r3
    }
 800d28c:	bf00      	nop
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
 800d2a0:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d2ac:	68ba      	ldr	r2, [r7, #8]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	430a      	orrs	r2, r1
 800d2b4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2bc:	f023 0107 	bic.w	r1, r3, #7
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800d2d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	6812      	ldr	r2, [r2, #0]
 800d2de:	430b      	orrs	r3, r1
 800d2e0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3714      	adds	r7, #20
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800d2f8:	f7fd fcf6 	bl	800ace8 <_ZN8touchgfx3HAL11getInstanceEv>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7ff ffa8 	bl	800d254 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800d304:	bf00      	nop
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
    assert(0);
 800d314:	4b02      	ldr	r3, [pc, #8]	; (800d320 <DMA2D_XferErrorCallback+0x14>)
 800d316:	4a03      	ldr	r2, [pc, #12]	; (800d324 <DMA2D_XferErrorCallback+0x18>)
 800d318:	2136      	movs	r1, #54	; 0x36
 800d31a:	4803      	ldr	r0, [pc, #12]	; (800d328 <DMA2D_XferErrorCallback+0x1c>)
 800d31c:	f011 f862 	bl	801e3e4 <__assert_func>
 800d320:	0801fa68 	.word	0x0801fa68
 800d324:	0802029c 	.word	0x0802029c
 800d328:	0801fa6c 	.word	0x0801fa6c

0800d32c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3318      	adds	r3, #24
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff feef 	bl	800d11c <_ZN8touchgfx9colortypeC1Ev>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	4618      	mov	r0, r3
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 800d348:	b5b0      	push	{r4, r5, r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	330c      	adds	r3, #12
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7ff ff61 	bl	800d220 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800d35e:	4a0e      	ldr	r2, [pc, #56]	; (800d398 <_ZN10STM32F4DMAC1Ev+0x50>)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f103 000c 	add.w	r0, r3, #12
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3320      	adds	r3, #32
 800d36e:	2260      	movs	r2, #96	; 0x60
 800d370:	4619      	mov	r1, r3
 800d372:	f002 fa91 	bl	800f898 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3320      	adds	r3, #32
 800d37a:	245f      	movs	r4, #95	; 0x5f
 800d37c:	461d      	mov	r5, r3
 800d37e:	2c00      	cmp	r4, #0
 800d380:	db05      	blt.n	800d38e <_ZN10STM32F4DMAC1Ev+0x46>
 800d382:	4628      	mov	r0, r5
 800d384:	f7ff ffd2 	bl	800d32c <_ZN8touchgfx6BlitOpC1Ev>
 800d388:	3520      	adds	r5, #32
 800d38a:	3c01      	subs	r4, #1
 800d38c:	e7f7      	b.n	800d37e <_ZN10STM32F4DMAC1Ev+0x36>
{}
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bdb0      	pop	{r4, r5, r7, pc}
 800d398:	08020230 	.word	0x08020230

0800d39c <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	4a0b      	ldr	r2, [pc, #44]	; (800d3d4 <_ZN10STM32F4DMAD1Ev+0x38>)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800d3aa:	480b      	ldr	r0, [pc, #44]	; (800d3d8 <_ZN10STM32F4DMAD1Ev+0x3c>)
 800d3ac:	f7f5 fd06 	bl	8002dbc <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 800d3b0:	205a      	movs	r0, #90	; 0x5a
 800d3b2:	f7ff fe8f 	bl	800d0d4 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 faa0 	bl	800d900 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff ff0c 	bl	800d1e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	08020230 	.word	0x08020230
 800d3d8:	2002f13c 	.word	0x2002f13c

0800d3dc <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
}
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ffd9 	bl	800d39c <_ZN10STM32F4DMAD1Ev>
 800d3ea:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f010 ffcc 	bl	801e38c <_ZdlPvj>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3708      	adds	r7, #8
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
	...

0800d400 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800d408:	4b09      	ldr	r3, [pc, #36]	; (800d430 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800d40a:	4a0a      	ldr	r2, [pc, #40]	; (800d434 <_ZN10STM32F4DMA10initializeEv+0x34>)
 800d40c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 800d40e:	4808      	ldr	r0, [pc, #32]	; (800d430 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800d410:	f7f5 fc8a 	bl	8002d28 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800d414:	4b06      	ldr	r3, [pc, #24]	; (800d430 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800d416:	4a08      	ldr	r2, [pc, #32]	; (800d438 <_ZN10STM32F4DMA10initializeEv+0x38>)
 800d418:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800d41c:	4a07      	ldr	r2, [pc, #28]	; (800d43c <_ZN10STM32F4DMA10initializeEv+0x3c>)
 800d41e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 800d420:	205a      	movs	r0, #90	; 0x5a
 800d422:	f7ff fe37 	bl	800d094 <__NVIC_EnableIRQ>
}
 800d426:	bf00      	nop
 800d428:	3708      	adds	r7, #8
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	2002f13c 	.word	0x2002f13c
 800d434:	4002b000 	.word	0x4002b000
 800d438:	0800d2f1 	.word	0x0800d2f1
 800d43c:	0800d30d 	.word	0x0800d30d

0800d440 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 800d448:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800d458:	b590      	push	{r4, r7, lr}
 800d45a:	b08d      	sub	sp, #52	; 0x34
 800d45c:	af02      	add	r7, sp, #8
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800d462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 800d468:	2300      	movs	r3, #0
 800d46a:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800d470:	2b20      	cmp	r3, #32
 800d472:	d007      	beq.n	800d484 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b40      	cmp	r3, #64	; 0x40
 800d47a:	d003      	beq.n	800d484 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b04      	cmp	r3, #4
 800d482:	d101      	bne.n	800d488 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 800d484:	2301      	movs	r3, #1
 800d486:	e000      	b.n	800d48a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 800d488:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800d48a:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800d490:	2b80      	cmp	r3, #128	; 0x80
 800d492:	d004      	beq.n	800d49e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d49c:	d101      	bne.n	800d4a2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e000      	b.n	800d4a4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800d4a2:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800d4a4:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800d4a6:	f7fd fc2b 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	6813      	ldr	r3, [r2, #0]
 800d4ae:	3320      	adds	r3, #32
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	4798      	blx	r3
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b40      	cmp	r3, #64	; 0x40
 800d4c0:	d01d      	beq.n	800d4fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800d4c2:	2b40      	cmp	r3, #64	; 0x40
 800d4c4:	d804      	bhi.n	800d4d0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800d4c6:	2b04      	cmp	r3, #4
 800d4c8:	d00e      	beq.n	800d4e8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800d4ca:	2b20      	cmp	r3, #32
 800d4cc:	d017      	beq.n	800d4fe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800d4ce:	e019      	b.n	800d504 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800d4d0:	2b80      	cmp	r3, #128	; 0x80
 800d4d2:	d003      	beq.n	800d4dc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800d4d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4d8:	d003      	beq.n	800d4e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800d4da:	e013      	b.n	800d504 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 800d4dc:	230a      	movs	r3, #10
 800d4de:	623b      	str	r3, [r7, #32]
        break;
 800d4e0:	e01a      	b.n	800d518 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800d4e2:	2309      	movs	r3, #9
 800d4e4:	623b      	str	r3, [r7, #32]
        break;
 800d4e6:	e017      	b.n	800d518 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800d4e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d4ec:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d4ee:	7f7b      	ldrb	r3, [r7, #29]
 800d4f0:	2b10      	cmp	r3, #16
 800d4f2:	d101      	bne.n	800d4f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e000      	b.n	800d4fa <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	623b      	str	r3, [r7, #32]
        break;
 800d4fc:	e00c      	b.n	800d518 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 800d4fe:	2300      	movs	r3, #0
 800d500:	623b      	str	r3, [r7, #32]
        break;
 800d502:	e009      	b.n	800d518 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800d504:	2300      	movs	r3, #0
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d508:	7f7b      	ldrb	r3, [r7, #29]
 800d50a:	2b10      	cmp	r3, #16
 800d50c:	d101      	bne.n	800d512 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 800d50e:	2302      	movs	r3, #2
 800d510:	e000      	b.n	800d514 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800d512:	2301      	movs	r3, #1
 800d514:	623b      	str	r3, [r7, #32]
        break;
 800d516:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800d518:	4a76      	ldr	r2, [pc, #472]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800d51e:	7f7b      	ldrb	r3, [r7, #29]
 800d520:	2b10      	cmp	r3, #16
 800d522:	d101      	bne.n	800d528 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800d524:	2302      	movs	r3, #2
 800d526:	e000      	b.n	800d52a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800d528:	2301      	movs	r3, #1
 800d52a:	4a72      	ldr	r2, [pc, #456]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d52c:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	8adb      	ldrh	r3, [r3, #22]
 800d532:	461a      	mov	r2, r3
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	8a1b      	ldrh	r3, [r3, #16]
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	461a      	mov	r2, r3
 800d53c:	4b6d      	ldr	r3, [pc, #436]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d53e:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800d540:	7f7b      	ldrb	r3, [r7, #29]
 800d542:	2b10      	cmp	r3, #16
 800d544:	d101      	bne.n	800d54a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800d546:	2202      	movs	r2, #2
 800d548:	e000      	b.n	800d54c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 800d54a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	8adb      	ldrh	r3, [r3, #22]
 800d550:	4619      	mov	r1, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	8a1b      	ldrh	r3, [r3, #16]
 800d556:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800d558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d55a:	4866      	ldr	r0, [pc, #408]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d55c:	f7ff fe9a 	bl	800d294 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800d560:	4a64      	ldr	r2, [pc, #400]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	8a9b      	ldrh	r3, [r3, #20]
 800d56a:	461a      	mov	r2, r3
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	8a1b      	ldrh	r3, [r3, #16]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	461a      	mov	r2, r3
 800d574:	4b5f      	ldr	r3, [pc, #380]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d576:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 800d578:	7ffb      	ldrb	r3, [r7, #31]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d103      	bne.n	800d586 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800d57e:	7fbb      	ldrb	r3, [r7, #30]
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 8082 	beq.w	800d68a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	7f1b      	ldrb	r3, [r3, #28]
 800d58a:	2bff      	cmp	r3, #255	; 0xff
 800d58c:	d008      	beq.n	800d5a0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800d58e:	4b59      	ldr	r3, [pc, #356]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d590:	2202      	movs	r2, #2
 800d592:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	7f1b      	ldrb	r3, [r3, #28]
 800d598:	461a      	mov	r2, r3
 800d59a:	4b56      	ldr	r3, [pc, #344]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d59c:	635a      	str	r2, [r3, #52]	; 0x34
 800d59e:	e002      	b.n	800d5a6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800d5a0:	4b54      	ldr	r3, [pc, #336]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800d5a6:	7fbb      	ldrb	r3, [r7, #30]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d059      	beq.n	800d660 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 800d5ac:	7f7b      	ldrb	r3, [r7, #29]
 800d5ae:	2b10      	cmp	r3, #16
 800d5b0:	d14a      	bne.n	800d648 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	3318      	adds	r3, #24
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff fdca 	bl	800d150 <_ZNK8touchgfx9colortypecvtEv>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	12db      	asrs	r3, r3, #11
 800d5c0:	f003 021f 	and.w	r2, r3, #31
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	021b      	lsls	r3, r3, #8
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	4a4b      	ldr	r2, [pc, #300]	; (800d6f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800d5cc:	fb82 1203 	smull	r1, r2, r2, r3
 800d5d0:	441a      	add	r2, r3
 800d5d2:	1112      	asrs	r2, r2, #4
 800d5d4:	17db      	asrs	r3, r3, #31
 800d5d6:	1ad3      	subs	r3, r2, r3
 800d5d8:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	3318      	adds	r3, #24
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7ff fdb6 	bl	800d150 <_ZNK8touchgfx9colortypecvtEv>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	115b      	asrs	r3, r3, #5
 800d5e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	021b      	lsls	r3, r3, #8
 800d5f0:	1a9b      	subs	r3, r3, r2
 800d5f2:	4a42      	ldr	r2, [pc, #264]	; (800d6fc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800d5f4:	fb82 1203 	smull	r1, r2, r2, r3
 800d5f8:	441a      	add	r2, r3
 800d5fa:	1152      	asrs	r2, r2, #5
 800d5fc:	17db      	asrs	r3, r3, #31
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	3318      	adds	r3, #24
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff fda2 	bl	800d150 <_ZNK8touchgfx9colortypecvtEv>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f003 021f 	and.w	r2, r3, #31
 800d612:	4613      	mov	r3, r2
 800d614:	021b      	lsls	r3, r3, #8
 800d616:	1a9b      	subs	r3, r3, r2
 800d618:	4a37      	ldr	r2, [pc, #220]	; (800d6f8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800d61a:	fb82 1203 	smull	r1, r2, r2, r3
 800d61e:	441a      	add	r2, r3
 800d620:	1112      	asrs	r2, r2, #4
 800d622:	17db      	asrs	r3, r3, #31
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	7f1b      	ldrb	r3, [r3, #28]
 800d62c:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	061a      	lsls	r2, r3, #24
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	041b      	lsls	r3, r3, #16
 800d636:	431a      	orrs	r2, r3
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	021b      	lsls	r3, r3, #8
 800d63c:	431a      	orrs	r2, r3
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	4313      	orrs	r3, r2
 800d642:	4a2c      	ldr	r2, [pc, #176]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d644:	6353      	str	r3, [r2, #52]	; 0x34
 800d646:	e00b      	b.n	800d660 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	3318      	adds	r3, #24
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff fd73 	bl	800d138 <_ZNK8touchgfx9colortype10getColor32Ev>
 800d652:	4602      	mov	r2, r0
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	7f1b      	ldrb	r3, [r3, #28]
 800d658:	061b      	lsls	r3, r3, #24
 800d65a:	4313      	orrs	r3, r2
 800d65c:	4a25      	ldr	r2, [pc, #148]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d65e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	8adb      	ldrh	r3, [r3, #22]
 800d664:	461a      	mov	r2, r3
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	8a1b      	ldrh	r3, [r3, #16]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	461a      	mov	r2, r3
 800d66e:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d670:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d672:	7f7b      	ldrb	r3, [r7, #29]
 800d674:	2b10      	cmp	r3, #16
 800d676:	d101      	bne.n	800d67c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 800d678:	2302      	movs	r3, #2
 800d67a:	e000      	b.n	800d67e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 800d67c:	2301      	movs	r3, #1
 800d67e:	4a1d      	ldr	r2, [pc, #116]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d680:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800d682:	2100      	movs	r1, #0
 800d684:	481b      	ldr	r0, [pc, #108]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d686:	f7f5 fe19 	bl	80032bc <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800d68a:	2101      	movs	r1, #1
 800d68c:	4819      	ldr	r0, [pc, #100]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d68e:	f7f5 fe15 	bl	80032bc <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 800d692:	7ffb      	ldrb	r3, [r7, #31]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d102      	bne.n	800d69e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800d698:	7fbb      	ldrb	r3, [r7, #30]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d015      	beq.n	800d6ca <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d6a2:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d6a8:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d6ae:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d6b4:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	9200      	str	r2, [sp, #0]
 800d6be:	4623      	mov	r3, r4
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	480c      	ldr	r0, [pc, #48]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d6c4:	f7f5 fc1d 	bl	8002f02 <HAL_DMA2D_BlendingStart_IT>
 800d6c8:	e00f      	b.n	800d6ea <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d6ce:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d6d4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d6da:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4803      	ldr	r0, [pc, #12]	; (800d6f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800d6e6:	f7f5 fbd9 	bl	8002e9c <HAL_DMA2D_Start_IT>
    }
}
 800d6ea:	bf00      	nop
 800d6ec:	372c      	adds	r7, #44	; 0x2c
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd90      	pop	{r4, r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	2002f13c 	.word	0x2002f13c
 800d6f8:	84210843 	.word	0x84210843
 800d6fc:	82082083 	.word	0x82082083

0800d700 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 800d700:	b590      	push	{r4, r7, lr}
 800d702:	b08d      	sub	sp, #52	; 0x34
 800d704:	af02      	add	r7, sp, #8
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800d70a:	f7fd faf9 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800d70e:	4602      	mov	r2, r0
 800d710:	6813      	ldr	r3, [r2, #0]
 800d712:	3320      	adds	r3, #32
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4610      	mov	r0, r2
 800d718:	4798      	blx	r3
 800d71a:	4603      	mov	r3, r0
 800d71c:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d71e:	7ffb      	ldrb	r3, [r7, #31]
 800d720:	2b10      	cmp	r3, #16
 800d722:	d101      	bne.n	800d728 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 800d724:	2302      	movs	r3, #2
 800d726:	e000      	b.n	800d72a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 800d728:	2301      	movs	r3, #1
 800d72a:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 800d730:	7ffb      	ldrb	r3, [r7, #31]
 800d732:	2b10      	cmp	r3, #16
 800d734:	d149      	bne.n	800d7ca <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	3318      	adds	r3, #24
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff fd08 	bl	800d150 <_ZNK8touchgfx9colortypecvtEv>
 800d740:	4603      	mov	r3, r0
 800d742:	12db      	asrs	r3, r3, #11
 800d744:	f003 021f 	and.w	r2, r3, #31
 800d748:	4613      	mov	r3, r2
 800d74a:	021b      	lsls	r3, r3, #8
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	4a69      	ldr	r2, [pc, #420]	; (800d8f4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800d750:	fb82 1203 	smull	r1, r2, r2, r3
 800d754:	441a      	add	r2, r3
 800d756:	1112      	asrs	r2, r2, #4
 800d758:	17db      	asrs	r3, r3, #31
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	3318      	adds	r3, #24
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fcf4 	bl	800d150 <_ZNK8touchgfx9colortypecvtEv>
 800d768:	4603      	mov	r3, r0
 800d76a:	115b      	asrs	r3, r3, #5
 800d76c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d770:	4613      	mov	r3, r2
 800d772:	021b      	lsls	r3, r3, #8
 800d774:	1a9b      	subs	r3, r3, r2
 800d776:	4a60      	ldr	r2, [pc, #384]	; (800d8f8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 800d778:	fb82 1203 	smull	r1, r2, r2, r3
 800d77c:	441a      	add	r2, r3
 800d77e:	1152      	asrs	r2, r2, #5
 800d780:	17db      	asrs	r3, r3, #31
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	3318      	adds	r3, #24
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff fce0 	bl	800d150 <_ZNK8touchgfx9colortypecvtEv>
 800d790:	4603      	mov	r3, r0
 800d792:	f003 021f 	and.w	r2, r3, #31
 800d796:	4613      	mov	r3, r2
 800d798:	021b      	lsls	r3, r3, #8
 800d79a:	1a9b      	subs	r3, r3, r2
 800d79c:	4a55      	ldr	r2, [pc, #340]	; (800d8f4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800d79e:	fb82 1203 	smull	r1, r2, r2, r3
 800d7a2:	441a      	add	r2, r3
 800d7a4:	1112      	asrs	r2, r2, #4
 800d7a6:	17db      	asrs	r3, r3, #31
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	7f1b      	ldrb	r3, [r3, #28]
 800d7b0:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	061a      	lsls	r2, r3, #24
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	041b      	lsls	r3, r3, #16
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	021b      	lsls	r3, r3, #8
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	623b      	str	r3, [r7, #32]
 800d7c8:	e00b      	b.n	800d7e2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	7f1b      	ldrb	r3, [r3, #28]
 800d7ce:	061b      	lsls	r3, r3, #24
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	3318      	adds	r3, #24
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7ff fcae 	bl	800d138 <_ZNK8touchgfx9colortype10getColor32Ev>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	4323      	orrs	r3, r4
 800d7e0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b08      	cmp	r3, #8
 800d7e8:	d103      	bne.n	800d7f2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800d7ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d7f0:	e003      	b.n	800d7fa <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 800d7f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800d7f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d7f8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800d7fa:	4a40      	ldr	r2, [pc, #256]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800d800:	7ffb      	ldrb	r3, [r7, #31]
 800d802:	2b10      	cmp	r3, #16
 800d804:	d101      	bne.n	800d80a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 800d806:	2302      	movs	r3, #2
 800d808:	e000      	b.n	800d80c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 800d80a:	2301      	movs	r3, #1
 800d80c:	4a3b      	ldr	r2, [pc, #236]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d80e:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	8adb      	ldrh	r3, [r3, #22]
 800d814:	461a      	mov	r2, r3
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	8a1b      	ldrh	r3, [r3, #16]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	461a      	mov	r2, r3
 800d81e:	4b37      	ldr	r3, [pc, #220]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d820:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800d822:	7ffb      	ldrb	r3, [r7, #31]
 800d824:	2b10      	cmp	r3, #16
 800d826:	d101      	bne.n	800d82c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 800d828:	2202      	movs	r2, #2
 800d82a:	e000      	b.n	800d82e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 800d82c:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	8adb      	ldrh	r3, [r3, #22]
 800d832:	4619      	mov	r1, r3
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	8a1b      	ldrh	r3, [r3, #16]
 800d838:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800d83a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d83c:	482f      	ldr	r0, [pc, #188]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d83e:	f7ff fd29 	bl	800d294 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d848:	d11e      	bne.n	800d888 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d84a:	4b2c      	ldr	r3, [pc, #176]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 800d850:	4a2a      	ldr	r2, [pc, #168]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 800d856:	4b29      	ldr	r3, [pc, #164]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d858:	2209      	movs	r2, #9
 800d85a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	8adb      	ldrh	r3, [r3, #22]
 800d860:	461a      	mov	r2, r3
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	8a1b      	ldrh	r3, [r3, #16]
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	461a      	mov	r2, r3
 800d86a:	4b24      	ldr	r3, [pc, #144]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d86c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800d86e:	7ffb      	ldrb	r3, [r7, #31]
 800d870:	2b10      	cmp	r3, #16
 800d872:	d101      	bne.n	800d878 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 800d874:	2302      	movs	r3, #2
 800d876:	e000      	b.n	800d87a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 800d878:	2301      	movs	r3, #1
 800d87a:	4a20      	ldr	r2, [pc, #128]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d87c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800d87e:	2100      	movs	r1, #0
 800d880:	481e      	ldr	r0, [pc, #120]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d882:	f7f5 fd1b 	bl	80032bc <HAL_DMA2D_ConfigLayer>
 800d886:	e005      	b.n	800d894 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800d888:	4a1c      	ldr	r2, [pc, #112]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 800d88e:	4b1b      	ldr	r3, [pc, #108]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d890:	2200      	movs	r2, #0
 800d892:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800d894:	2101      	movs	r1, #1
 800d896:	4819      	ldr	r0, [pc, #100]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d898:	f7f5 fd10 	bl	80032bc <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d8a2:	d115      	bne.n	800d8d0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d8a8:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d8ae:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d8b4:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d8ba:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	9200      	str	r2, [sp, #0]
 800d8c4:	4623      	mov	r3, r4
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	480c      	ldr	r0, [pc, #48]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d8ca:	f7f5 fb1a 	bl	8002f02 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 800d8ce:	e00d      	b.n	800d8ec <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800d8da:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	6a39      	ldr	r1, [r7, #32]
 800d8e6:	4805      	ldr	r0, [pc, #20]	; (800d8fc <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800d8e8:	f7f5 fad8 	bl	8002e9c <HAL_DMA2D_Start_IT>
}
 800d8ec:	bf00      	nop
 800d8ee:	372c      	adds	r7, #44	; 0x2c
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd90      	pop	{r4, r7, pc}
 800d8f4:	84210843 	.word	0x84210843
 800d8f8:	82082083 	.word	0x82082083
 800d8fc:	2002f13c 	.word	0x2002f13c

0800d900 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	4a05      	ldr	r2, [pc, #20]	; (800d920 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fc2b 	bl	800d16c <_ZN8touchgfx9DMA_QueueD1Ev>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	08020e54 	.word	0x08020e54

0800d924 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff ffe7 	bl	800d900 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800d932:	2114      	movs	r1, #20
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f010 fd29 	bl	801e38c <_ZdlPvj>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
        texts = t;
 800d94c:	4a04      	ldr	r2, [pc, #16]	; (800d960 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6013      	str	r3, [r2, #0]
    }
 800d952:	bf00      	nop
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	2002eef4 	.word	0x2002eef4

0800d964 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 800d972:	4a0b      	ldr	r2, [pc, #44]	; (800d9a0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	605a      	str	r2, [r3, #4]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	609a      	str	r2, [r3, #8]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	60da      	str	r2, [r3, #12]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	69ba      	ldr	r2, [r7, #24]
 800d98e:	611a      	str	r2, [r3, #16]
    {
    }
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	4618      	mov	r0, r3
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	0802039c 	.word	0x0802039c

0800d9a4 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
    {
 800d9ac:	4a04      	ldr	r2, [pc, #16]	; (800d9c0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	601a      	str	r2, [r3, #0]
    }
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	0802039c 	.word	0x0802039c

0800d9c4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
    }
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7ff ffe9 	bl	800d9a4 <_ZN8touchgfx7MVPHeapD1Ev>
 800d9d2:	2114      	movs	r1, #20
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f010 fcd9 	bl	801e38c <_ZdlPvj>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
    {
 800d9ec:	4a04      	ldr	r2, [pc, #16]	; (800da00 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	601a      	str	r2, [r3, #0]
    }
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	08021270 	.word	0x08021270

0800da04 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
    }
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7ff ffe9 	bl	800d9e4 <_ZN8touchgfx3LCDD1Ev>
 800da12:	2108      	movs	r1, #8
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f010 fcb9 	bl	801e38c <_ZdlPvj>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4618      	mov	r0, r3
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	801a      	strh	r2, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	805a      	strh	r2, [r3, #2]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	809a      	strh	r2, [r3, #4]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	80da      	strh	r2, [r3, #6]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2200      	movs	r2, #0
 800da48:	811a      	strh	r2, [r3, #8]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	815a      	strh	r2, [r3, #10]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	819a      	strh	r2, [r3, #12]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	739a      	strb	r2, [r3, #14]
        {
        }
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff ffd5 	bl	800da24 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	611a      	str	r2, [r3, #16]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	829a      	strh	r2, [r3, #20]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
 800da9c:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 800da9e:	4a44      	ldr	r2, [pc, #272]	; (800dbb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	605a      	str	r2, [r3, #4]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	609a      	str	r2, [r3, #8]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	60da      	str	r2, [r3, #12]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	611a      	str	r2, [r3, #16]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	615a      	str	r2, [r3, #20]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2200      	movs	r2, #0
 800dac6:	619a      	str	r2, [r3, #24]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	331c      	adds	r3, #28
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff ffcc 	bl	800da6a <_ZN8touchgfx8GesturesC1Ev>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	63da      	str	r2, [r3, #60]	; 0x3c
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	641a      	str	r2, [r3, #64]	; 0x40
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	645a      	str	r2, [r3, #68]	; 0x44
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	64da      	str	r2, [r3, #76]	; 0x4c
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3350      	adds	r3, #80	; 0x50
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fd fd24 	bl	800b55a <_ZN8touchgfx4RectC1Ev>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	671a      	str	r2, [r3, #112]	; 0x70
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 800db68:	4a12      	ldr	r2, [pc, #72]	; (800dbb4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800db6e:	4a12      	ldr	r2, [pc, #72]	; (800dbb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800db70:	8b3b      	ldrh	r3, [r7, #24]
 800db72:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800db74:	4a11      	ldr	r2, [pc, #68]	; (800dbbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800db76:	8bbb      	ldrh	r3, [r7, #28]
 800db78:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800db7a:	4b11      	ldr	r3, [pc, #68]	; (800dbc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800db80:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800db82:	881a      	ldrh	r2, [r3, #0]
 800db84:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 800db86:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800db88:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800db8a:	881a      	ldrh	r2, [r3, #0]
 800db8c:	4b0e      	ldr	r3, [pc, #56]	; (800dbc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800db8e:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800db90:	8b3a      	ldrh	r2, [r7, #24]
 800db92:	8bbb      	ldrh	r3, [r7, #28]
 800db94:	429a      	cmp	r2, r3
 800db96:	d301      	bcc.n	800db9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 800db98:	2200      	movs	r2, #0
 800db9a:	e000      	b.n	800db9e <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 800db9c:	2201      	movs	r2, #1
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	080209c0 	.word	0x080209c0
 800dbb4:	2002ee78 	.word	0x2002ee78
 800dbb8:	2002ee6c 	.word	0x2002ee6c
 800dbbc:	2002ee6e 	.word	0x2002ee6e
 800dbc0:	2002ee70 	.word	0x2002ee70
 800dbc4:	2002ee72 	.word	0x2002ee72
 800dbc8:	2002ee74 	.word	0x2002ee74

0800dbcc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fd fab5 	bl	800b148 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800dbde:	bf00      	nop
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
	...

0800dbe8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af02      	add	r7, sp, #8
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
 800dbf4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	68b9      	ldr	r1, [r7, #8]
 800dc02:	f7ff feaf 	bl	800d964 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800dc06:	4a04      	ldr	r2, [pc, #16]	; (800dc18 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	601a      	str	r2, [r3, #0]
    {

    }
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	08020388 	.word	0x08020388

0800dc1c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	4801      	ldr	r0, [pc, #4]	; (800dc28 <__tcf_0+0xc>)
 800dc22:	f000 f9d5 	bl	800dfd0 <_ZN12FrontendHeapD1Ev>
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	2002de60 	.word	0x2002de60

0800dc2c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800dc30:	4b08      	ldr	r3, [pc, #32]	; (800dc54 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d108      	bne.n	800dc4e <_ZN12FrontendHeap11getInstanceEv+0x22>
 800dc3c:	4806      	ldr	r0, [pc, #24]	; (800dc58 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 800dc3e:	f000 f831 	bl	800dca4 <_ZN12FrontendHeapC1Ev>
 800dc42:	4b04      	ldr	r3, [pc, #16]	; (800dc54 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	4804      	ldr	r0, [pc, #16]	; (800dc5c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 800dc4a:	f010 fbe9 	bl	801e420 <atexit>
        return instance;
 800dc4e:	4b02      	ldr	r3, [pc, #8]	; (800dc58 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 800dc50:	4618      	mov	r0, r3
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	2002e14c 	.word	0x2002e14c
 800dc58:	2002de60 	.word	0x2002de60
 800dc5c:	0800dc1d 	.word	0x0800dc1d

0800dc60 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	4a05      	ldr	r2, [pc, #20]	; (800dc80 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	601a      	str	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff fe97 	bl	800d9a4 <_ZN8touchgfx7MVPHeapD1Ev>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	08020388 	.word	0x08020388

0800dc84 <_ZN16FrontendHeapBaseD0Ev>:
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff ffe7 	bl	800dc60 <_ZN16FrontendHeapBaseD1Ev>
 800dc92:	2114      	movs	r1, #20
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f010 fb79 	bl	801e38c <_ZdlPvj>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800dca4:	b590      	push	{r4, r7, lr}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af02      	add	r7, sp, #8
 800dcaa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f103 0114 	add.w	r1, r3, #20
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	4623      	mov	r3, r4
 800dcca:	f7ff ff8d 	bl	800dbe8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800dcce:	4a18      	ldr	r2, [pc, #96]	; (800dd30 <_ZN12FrontendHeapC1Ev+0x8c>)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	3314      	adds	r3, #20
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 f8db 	bl	800de94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	332c      	adds	r3, #44	; 0x2c
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 f90a 	bl	800defc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 f93a 	bl	800df68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	4619      	mov	r1, r3
 800dd04:	f7fe fc1c 	bl	800c540 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fe fc2c 	bl	800c56c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4610      	mov	r0, r2
 800dd20:	f7ff ff54 	bl	800dbcc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4618      	mov	r0, r3
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd90      	pop	{r4, r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	080202d8 	.word	0x080202d8

0800dd34 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
{
public:
    LCD16bpp();

    virtual ~LCD16bpp()
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
    {
 800dd3c:	4a05      	ldr	r2, [pc, #20]	; (800dd54 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff fe4d 	bl	800d9e4 <_ZN8touchgfx3LCDD1Ev>
    }
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	0802250c 	.word	0x0802250c

0800dd58 <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
    }
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7ff ffe7 	bl	800dd34 <_ZN8touchgfx8LCD16bppD1Ev>
 800dd66:	2178      	movs	r1, #120	; 0x78
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f010 fb0f 	bl	801e38c <_ZdlPvj>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af02      	add	r7, sp, #8
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	8bbb      	ldrh	r3, [r7, #28]
 800dd8a:	9301      	str	r3, [sp, #4]
 800dd8c:	8b3b      	ldrh	r3, [r7, #24]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	f7ff fe7b 	bl	800da90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800dd9a:	4a04      	ldr	r2, [pc, #16]	; (800ddac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	601a      	str	r2, [r3, #0]
    }
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	080203ac 	.word	0x080203ac

0800ddb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af02      	add	r7, sp, #8
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	603b      	str	r3, [r7, #0]
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	8bbb      	ldrh	r3, [r7, #28]
 800ddc2:	9301      	str	r3, [sp, #4]
 800ddc4:	8b3b      	ldrh	r3, [r7, #24]
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	68b9      	ldr	r1, [r7, #8]
 800ddce:	f7ff ffd3 	bl	800dd78 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800ddd2:	4a04      	ldr	r2, [pc, #16]	; (800dde4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	601a      	str	r2, [r3, #0]
    }
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	080200d8 	.word	0x080200d8

0800dde8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	4a04      	ldr	r2, [pc, #16]	; (800de04 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	080200c0 	.word	0x080200c0

0800de08 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff ffe8 	bl	800dde8 <_ZN8touchgfx15TouchControllerC1Ev>
 800de18:	4a03      	ldr	r2, [pc, #12]	; (800de28 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	080200a8 	.word	0x080200a8

0800de2c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b085      	sub	sp, #20
 800de30:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800de32:	f7fe fa75 	bl	800c320 <_ZN14BitmapDatabase11getInstanceEv>
 800de36:	4604      	mov	r4, r0
 800de38:	f7fe fa7c 	bl	800c334 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800de3c:	4603      	mov	r3, r0
 800de3e:	4619      	mov	r1, r3
 800de40:	2300      	movs	r3, #0
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	2200      	movs	r2, #0
 800de48:	4620      	mov	r0, r4
 800de4a:	f004 fdff 	bl	8012a4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800de4e:	4809      	ldr	r0, [pc, #36]	; (800de74 <touchgfx_init+0x48>)
 800de50:	f7ff fd78 	bl	800d944 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 800de54:	2000      	movs	r0, #0
 800de56:	f7fe fa91 	bl	800c37c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 800de5a:	4807      	ldr	r0, [pc, #28]	; (800de78 <touchgfx_init+0x4c>)
 800de5c:	f004 fd44 	bl	80128e8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800de60:	f7ff fee4 	bl	800dc2c <_ZN12FrontendHeap11getInstanceEv>
 800de64:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 800de66:	4805      	ldr	r0, [pc, #20]	; (800de7c <touchgfx_init+0x50>)
 800de68:	f7fe ffae 	bl	800cdc8 <_ZN11TouchGFXHAL10initializeEv>
}
 800de6c:	bf00      	nop
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	bd90      	pop	{r4, r7, pc}
 800de74:	2002edec 	.word	0x2002edec
 800de78:	20000090 	.word	0x20000090
 800de7c:	2002edf0 	.word	0x2002edf0

0800de80 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800de80:	b580      	push	{r7, lr}
 800de82:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 800de84:	4802      	ldr	r0, [pc, #8]	; (800de90 <touchgfx_taskEntry+0x10>)
 800de86:	f7fe ffab 	bl	800cde0 <_ZN11TouchGFXHAL9taskEntryEv>
}
 800de8a:	bf00      	nop
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	2002edf0 	.word	0x2002edf0

0800de94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 fc74 	bl	800e78c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800dea4:	4a03      	ldr	r2, [pc, #12]	; (800deb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	601a      	str	r2, [r3, #0]
    {
    }
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	08020354 	.word	0x08020354

0800deb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
    {
    }
 800dec0:	4a05      	ldr	r2, [pc, #20]	; (800ded8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4618      	mov	r0, r3
 800deca:	f000 fc5d 	bl	800e788 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4618      	mov	r0, r3
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	08020354 	.word	0x08020354

0800dedc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
    }
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7ff ffe7 	bl	800deb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800deea:	2118      	movs	r1, #24
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f010 fa4d 	bl	801e38c <_ZdlPvj>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4618      	mov	r0, r3
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4618      	mov	r0, r3
 800df08:	f000 fc40 	bl	800e78c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800df0c:	4a03      	ldr	r2, [pc, #12]	; (800df1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	601a      	str	r2, [r3, #0]
    }
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4618      	mov	r0, r3
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	08020320 	.word	0x08020320

0800df20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
    }
 800df28:	4a05      	ldr	r2, [pc, #20]	; (800df40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4618      	mov	r0, r3
 800df32:	f000 fc29 	bl	800e788 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4618      	mov	r0, r3
 800df3a:	3708      	adds	r7, #8
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	08020320 	.word	0x08020320

0800df44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
    }
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7ff ffe7 	bl	800df20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800df52:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f010 fa18 	bl	801e38c <_ZdlPvj>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4618      	mov	r0, r3
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 fc0a 	bl	800e78c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800df78:	4a03      	ldr	r2, [pc, #12]	; (800df88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	601a      	str	r2, [r3, #0]
    }
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4618      	mov	r0, r3
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	080202ec 	.word	0x080202ec

0800df8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
    }
 800df94:	4a05      	ldr	r2, [pc, #20]	; (800dfac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fbf3 	bl	800e788 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	080202ec 	.word	0x080202ec

0800dfb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
    }
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7ff ffe7 	bl	800df8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800dfbe:	2114      	movs	r1, #20
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f010 f9e3 	bl	801e38c <_ZdlPvj>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	4a10      	ldr	r2, [pc, #64]	; (800e01c <_ZN12FrontendHeapD1Ev+0x4c>)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe fa75 	bl	800c4d4 <_ZN19FrontendApplicationD1Ev>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff ffcb 	bl	800df8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	332c      	adds	r3, #44	; 0x2c
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7ff ff90 	bl	800df20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3314      	adds	r3, #20
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff ff57 	bl	800deb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7ff fe27 	bl	800dc60 <_ZN16FrontendHeapBaseD1Ev>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	080202d8 	.word	0x080202d8

0800e020 <_ZN12FrontendHeapD0Ev>:
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff ffd1 	bl	800dfd0 <_ZN12FrontendHeapD1Ev>
 800e02e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f010 f9aa 	bl	801e38c <_ZdlPvj>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
	...

0800e044 <_Z41__static_initialization_and_destruction_0ii>:
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af02      	add	r7, sp, #8
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d118      	bne.n	800e086 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d113      	bne.n	800e086 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 800e05e:	4817      	ldr	r0, [pc, #92]	; (800e0bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800e060:	f7ff fed2 	bl	800de08 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800e064:	4816      	ldr	r0, [pc, #88]	; (800e0c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800e066:	f7ff f96f 	bl	800d348 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 800e06a:	4816      	ldr	r0, [pc, #88]	; (800e0c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800e06c:	f007 fcf2 	bl	8015a54 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800e070:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800e074:	9301      	str	r3, [sp, #4]
 800e076:	23f0      	movs	r3, #240	; 0xf0
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	4b10      	ldr	r3, [pc, #64]	; (800e0bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800e07c:	4a11      	ldr	r2, [pc, #68]	; (800e0c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800e07e:	4910      	ldr	r1, [pc, #64]	; (800e0c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800e080:	4811      	ldr	r0, [pc, #68]	; (800e0c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800e082:	f7ff fe95 	bl	800ddb0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d113      	bne.n	800e0b4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e092:	4293      	cmp	r3, r2
 800e094:	d10e      	bne.n	800e0b4 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800e096:	480c      	ldr	r0, [pc, #48]	; (800e0c8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800e098:	f7fe ff22 	bl	800cee0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800e09c:	480b      	ldr	r0, [pc, #44]	; (800e0cc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800e09e:	f7fc fa63 	bl	800a568 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800e0a2:	4808      	ldr	r0, [pc, #32]	; (800e0c4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800e0a4:	f7ff fe46 	bl	800dd34 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 800e0a8:	4805      	ldr	r0, [pc, #20]	; (800e0c0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800e0aa:	f7ff f977 	bl	800d39c <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800e0ae:	4803      	ldr	r0, [pc, #12]	; (800e0bc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800e0b0:	f7fe fc66 	bl	800c980 <_ZN20STM32TouchControllerD1Ev>
}
 800e0b4:	bf00      	nop
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	2002e150 	.word	0x2002e150
 800e0c0:	2002e154 	.word	0x2002e154
 800e0c4:	2002ed74 	.word	0x2002ed74
 800e0c8:	2002edf0 	.word	0x2002edf0
 800e0cc:	20000090 	.word	0x20000090

0800e0d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800e0d8:	2301      	movs	r3, #1
    }
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800e0ee:	230c      	movs	r3, #12
    }
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800e108:	887a      	ldrh	r2, [r7, #2]
 800e10a:	4613      	mov	r3, r2
 800e10c:	005b      	lsls	r3, r3, #1
 800e10e:	4413      	add	r3, r2
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	3308      	adds	r3, #8
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	4413      	add	r3, r2
    }
 800e118:	4618      	mov	r0, r3
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800e130:	887a      	ldrh	r2, [r7, #2]
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	3308      	adds	r3, #8
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	4413      	add	r3, r2
    }
 800e140:	4618      	mov	r0, r3
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800e154:	2301      	movs	r3, #1
    }
 800e156:	4618      	mov	r0, r3
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800e162:	b480      	push	{r7}
 800e164:	b083      	sub	sp, #12
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800e16a:	f44f 73a8 	mov.w	r3, #336	; 0x150
    }
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800e17a:	b480      	push	{r7}
 800e17c:	b083      	sub	sp, #12
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	460b      	mov	r3, r1
 800e184:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800e186:	887b      	ldrh	r3, [r7, #2]
 800e188:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800e18c:	fb02 f303 	mul.w	r3, r2, r3
 800e190:	3308      	adds	r3, #8
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	4413      	add	r3, r2
    }
 800e196:	4618      	mov	r0, r3
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800e1a2:	b480      	push	{r7}
 800e1a4:	b083      	sub	sp, #12
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800e1ae:	887b      	ldrh	r3, [r7, #2]
 800e1b0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800e1b4:	fb02 f303 	mul.w	r3, r2, r3
 800e1b8:	3308      	adds	r3, #8
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4413      	add	r3, r2
    }
 800e1be:	4618      	mov	r0, r3
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800e1ca:	b480      	push	{r7}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800e1d2:	2301      	movs	r3, #1
    }
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800e1e8:	2310      	movs	r3, #16
    }
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800e1f6:	b480      	push	{r7}
 800e1f8:	b083      	sub	sp, #12
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	460b      	mov	r3, r1
 800e200:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800e202:	887b      	ldrh	r3, [r7, #2]
 800e204:	011b      	lsls	r3, r3, #4
 800e206:	3308      	adds	r3, #8
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	4413      	add	r3, r2
    }
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	460b      	mov	r3, r1
 800e222:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800e224:	887b      	ldrh	r3, [r7, #2]
 800e226:	011b      	lsls	r3, r3, #4
 800e228:	3308      	adds	r3, #8
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	4413      	add	r3, r2
    }
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <_GLOBAL__sub_I_touchgfx_init>:
 800e23a:	b580      	push	{r7, lr}
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e242:	2001      	movs	r0, #1
 800e244:	f7ff fefe 	bl	800e044 <_Z41__static_initialization_and_destruction_0ii>
 800e248:	bd80      	pop	{r7, pc}

0800e24a <_GLOBAL__sub_D_touchgfx_init>:
 800e24a:	b580      	push	{r7, lr}
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e252:	2000      	movs	r0, #0
 800e254:	f7ff fef6 	bl	800e044 <_Z41__static_initialization_and_destruction_0ii>
 800e258:	bd80      	pop	{r7, pc}

0800e25a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3318      	adds	r3, #24
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
    }
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800e276:	b480      	push	{r7}
 800e278:	b083      	sub	sp, #12
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
 800e27e:	460b      	mov	r3, r1
 800e280:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	78fa      	ldrb	r2, [r7, #3]
 800e286:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800e28a:	bf00      	nop
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800e296:	b480      	push	{r7}
 800e298:	b083      	sub	sp, #12
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	b2da      	uxtb	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800e2ae:	bf00      	nop
 800e2b0:	370c      	adds	r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr
	...

0800e2bc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800e2c8:	78fb      	ldrb	r3, [r7, #3]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800e2ce:	78fb      	ldrb	r3, [r7, #3]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d105      	bne.n	800e2e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	78fa      	ldrb	r2, [r7, #3]
 800e2d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e027      	b.n	800e330 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d123      	bne.n	800e32e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d014      	beq.n	800e318 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3380      	adds	r3, #128	; 0x80
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	4798      	blx	r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e302:	429a      	cmp	r2, r3
 800e304:	d008      	beq.n	800e318 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800e306:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	f083 0301 	eor.w	r3, r3, #1
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	d001      	beq.n	800e318 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800e314:	2301      	movs	r3, #1
 800e316:	e000      	b.n	800e31a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800e318:	2300      	movs	r3, #0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d005      	beq.n	800e32a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	78fa      	ldrb	r2, [r7, #3]
 800e322:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800e326:	2301      	movs	r3, #1
 800e328:	e002      	b.n	800e330 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800e32a:	2300      	movs	r3, #0
 800e32c:	e000      	b.n	800e330 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800e32e:	2300      	movs	r3, #0
    }
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	2002ee76 	.word	0x2002ee76

0800e33c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	683a      	ldr	r2, [r7, #0]
 800e34a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <__NVIC_EnableIRQ>:
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e366:	2b00      	cmp	r3, #0
 800e368:	db0d      	blt.n	800e386 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e36a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	f003 021f 	and.w	r2, r3, #31
 800e374:	4907      	ldr	r1, [pc, #28]	; (800e394 <__NVIC_EnableIRQ+0x3c>)
 800e376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e37a:	095b      	lsrs	r3, r3, #5
 800e37c:	2001      	movs	r0, #1
 800e37e:	fa00 f202 	lsl.w	r2, r0, r2
 800e382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e386:	bf00      	nop
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	e000e100 	.word	0xe000e100

0800e398 <__NVIC_DisableIRQ>:
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	4603      	mov	r3, r0
 800e3a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	db12      	blt.n	800e3d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e3aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	f003 021f 	and.w	r2, r3, #31
 800e3b4:	4909      	ldr	r1, [pc, #36]	; (800e3dc <__NVIC_DisableIRQ+0x44>)
 800e3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3ba:	095b      	lsrs	r3, r3, #5
 800e3bc:	2001      	movs	r0, #1
 800e3be:	fa00 f202 	lsl.w	r2, r0, r2
 800e3c2:	3320      	adds	r3, #32
 800e3c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e3c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e3cc:	f3bf 8f6f 	isb	sy
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr
 800e3dc:	e000e100 	.word	0xe000e100

0800e3e0 <__NVIC_SetPriority>:
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	6039      	str	r1, [r7, #0]
 800e3ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	db0c      	blt.n	800e40e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	4a0e      	ldr	r2, [pc, #56]	; (800e434 <__NVIC_SetPriority+0x54>)
 800e3fa:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800e3fe:	4608      	mov	r0, r1
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	b2d9      	uxtb	r1, r3
 800e404:	1813      	adds	r3, r2, r0
 800e406:	460a      	mov	r2, r1
 800e408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e40c:	e00c      	b.n	800e428 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	b2da      	uxtb	r2, r3
 800e412:	4909      	ldr	r1, [pc, #36]	; (800e438 <__NVIC_SetPriority+0x58>)
 800e414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	f003 030f 	and.w	r3, r3, #15
 800e41e:	3b04      	subs	r3, #4
 800e420:	0112      	lsls	r2, r2, #4
 800e422:	b2d2      	uxtb	r2, r2
 800e424:	440b      	add	r3, r1
 800e426:	761a      	strb	r2, [r3, #24]
}
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	e000e100 	.word	0xe000e100
 800e438:	e000ed00 	.word	0xe000ed00

0800e43c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800e43c:	b5b0      	push	{r4, r5, r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fe78 	bl	800f13c <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800e44c:	687d      	ldr	r5, [r7, #4]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	334c      	adds	r3, #76	; 0x4c
 800e454:	681c      	ldr	r4, [r3, #0]
 800e456:	f002 fd37 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 800e45a:	4603      	mov	r3, r0
 800e45c:	4619      	mov	r1, r3
 800e45e:	4628      	mov	r0, r5
 800e460:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	490d      	ldr	r1, [pc, #52]	; (800e49c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff ff68 	bl	800e33c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2101      	movs	r1, #1
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff ff23 	bl	800e2bc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3374      	adds	r3, #116	; 0x74
 800e47e:	681c      	ldr	r4, [r3, #0]
 800e480:	2300      	movs	r3, #0
 800e482:	2200      	movs	r2, #0
 800e484:	4906      	ldr	r1, [pc, #24]	; (800e4a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 800e486:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2101      	movs	r1, #1
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7ff fef2 	bl	800e276 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800e492:	bf00      	nop
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bdb0      	pop	{r4, r5, r7, pc}
 800e49a:	bf00      	nop
 800e49c:	0800d079 	.word	0x0800d079
 800e4a0:	20000170 	.word	0x20000170

0800e4a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800e4ac:	2109      	movs	r1, #9
 800e4ae:	205a      	movs	r0, #90	; 0x5a
 800e4b0:	f7ff ff96 	bl	800e3e0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800e4b4:	2109      	movs	r1, #9
 800e4b6:	2058      	movs	r0, #88	; 0x58
 800e4b8:	f7ff ff92 	bl	800e3e0 <__NVIC_SetPriority>
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800e4cc:	205a      	movs	r0, #90	; 0x5a
 800e4ce:	f7ff ff43 	bl	800e358 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800e4d2:	2058      	movs	r0, #88	; 0x58
 800e4d4:	f7ff ff40 	bl	800e358 <__NVIC_EnableIRQ>
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800e4e8:	205a      	movs	r0, #90	; 0x5a
 800e4ea:	f7ff ff55 	bl	800e398 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800e4ee:	2058      	movs	r0, #88	; 0x58
 800e4f0:	f7ff ff52 	bl	800e398 <__NVIC_DisableIRQ>
}
 800e4f4:	bf00      	nop
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800e504:	4b11      	ldr	r3, [pc, #68]	; (800e54c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	b29b      	uxth	r3, r3
 800e50a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e50e:	b29b      	uxth	r3, r3
 800e510:	3b01      	subs	r3, #1
 800e512:	b29a      	uxth	r2, r3
 800e514:	4b0e      	ldr	r3, [pc, #56]	; (800e550 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800e516:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800e518:	4b0c      	ldr	r3, [pc, #48]	; (800e54c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e522:	b29b      	uxth	r3, r3
 800e524:	3b01      	subs	r3, #1
 800e526:	b29a      	uxth	r2, r3
 800e528:	4b0a      	ldr	r3, [pc, #40]	; (800e554 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800e52a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800e52c:	4b08      	ldr	r3, [pc, #32]	; (800e550 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800e52e:	881a      	ldrh	r2, [r3, #0]
 800e530:	4b06      	ldr	r3, [pc, #24]	; (800e54c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800e532:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800e536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e538:	4a04      	ldr	r2, [pc, #16]	; (800e54c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800e53a:	f043 0301 	orr.w	r3, r3, #1
 800e53e:	6353      	str	r3, [r2, #52]	; 0x34
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	40016800 	.word	0x40016800
 800e550:	2002ee68 	.word	0x2002ee68
 800e554:	2002ee6a 	.word	0x2002ee6a

0800e558 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800e560:	4b03      	ldr	r3, [pc, #12]	; (800e570 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800e562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800e564:	4618      	mov	r0, r3
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	40016884 	.word	0x40016884

0800e574 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800e57e:	4a06      	ldr	r2, [pc, #24]	; (800e598 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800e584:	4b05      	ldr	r3, [pc, #20]	; (800e59c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800e586:	2201      	movs	r2, #1
 800e588:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e58a:	bf00      	nop
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	40016884 	.word	0x40016884
 800e59c:	40016800 	.word	0x40016800

0800e5a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f000 fad4 	bl	800eb5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800e5c4:	4b0d      	ldr	r3, [pc, #52]	; (800e5fc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800e5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800e5ca:	4b0c      	ldr	r3, [pc, #48]	; (800e5fc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 800e5da:	89fa      	ldrh	r2, [r7, #14]
 800e5dc:	89bb      	ldrh	r3, [r7, #12]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d201      	bcs.n	800e5e6 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e003      	b.n	800e5ee <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 800e5e6:	89fa      	ldrh	r2, [r7, #14]
 800e5e8:	89bb      	ldrh	r3, [r7, #12]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	b29b      	uxth	r3, r3
    }
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	40016800 	.word	0x40016800

0800e600 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800e608:	4b1a      	ldr	r3, [pc, #104]	; (800e674 <HAL_LTDC_LineEventCallback+0x74>)
 800e60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60c:	4a1a      	ldr	r2, [pc, #104]	; (800e678 <HAL_LTDC_LineEventCallback+0x78>)
 800e60e:	8812      	ldrh	r2, [r2, #0]
 800e610:	4293      	cmp	r3, r2
 800e612:	bf0c      	ite	eq
 800e614:	2301      	moveq	r3, #1
 800e616:	2300      	movne	r3, #0
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d017      	beq.n	800e64e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800e61e:	4b17      	ldr	r3, [pc, #92]	; (800e67c <HAL_LTDC_LineEventCallback+0x7c>)
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	4619      	mov	r1, r3
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7f6 fc73 	bl	8004f10 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800e62a:	f7fc fb5d 	bl	800ace8 <_ZN8touchgfx3HAL11getInstanceEv>
 800e62e:	4603      	mov	r3, r0
 800e630:	4618      	mov	r0, r3
 800e632:	f7ff fe30 	bl	800e296 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800e636:	f7fe fce1 	bl	800cffc <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800e63a:	f7fc fb55 	bl	800ace8 <_ZN8touchgfx3HAL11getInstanceEv>
 800e63e:	4603      	mov	r3, r0
 800e640:	4618      	mov	r0, r3
 800e642:	f001 f803 	bl	800f64c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800e646:	2000      	movs	r0, #0
 800e648:	f7fe f9bc 	bl	800c9c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800e64c:	e00e      	b.n	800e66c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800e64e:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <HAL_LTDC_LineEventCallback+0x78>)
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7f6 fc5b 	bl	8004f10 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800e65a:	2000      	movs	r0, #0
 800e65c:	f7fe f9bd 	bl	800c9da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800e660:	f7fc fb42 	bl	800ace8 <_ZN8touchgfx3HAL11getInstanceEv>
 800e664:	4603      	mov	r3, r0
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fdf7 	bl	800e25a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	40016800 	.word	0x40016800
 800e678:	2002ee68 	.word	0x2002ee68
 800e67c:	2002ee6a 	.word	0x2002ee6a

0800e680 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800e680:	8880      	ldrh	r0, [r0, #4]
 800e682:	4770      	bx	lr

0800e684 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800e684:	2300      	movs	r3, #0
 800e686:	8083      	strh	r3, [r0, #4]
 800e688:	4770      	bx	lr
	...

0800e68c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800e68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68e:	6803      	ldr	r3, [r0, #0]
 800e690:	4605      	mov	r5, r0
 800e692:	460e      	mov	r6, r1
 800e694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e696:	2100      	movs	r1, #0
 800e698:	4798      	blx	r3
 800e69a:	682b      	ldr	r3, [r5, #0]
 800e69c:	4604      	mov	r4, r0
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	4798      	blx	r3
 800e6a4:	88ab      	ldrh	r3, [r5, #4]
 800e6a6:	1b34      	subs	r4, r6, r4
 800e6a8:	b2a4      	uxth	r4, r4
 800e6aa:	fbb4 f4f0 	udiv	r4, r4, r0
 800e6ae:	42a3      	cmp	r3, r4
 800e6b0:	d805      	bhi.n	800e6be <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800e6b2:	4b0e      	ldr	r3, [pc, #56]	; (800e6ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800e6b4:	4a0e      	ldr	r2, [pc, #56]	; (800e6f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800e6b6:	211e      	movs	r1, #30
 800e6b8:	480e      	ldr	r0, [pc, #56]	; (800e6f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800e6ba:	f00f fe93 	bl	801e3e4 <__assert_func>
 800e6be:	682b      	ldr	r3, [r5, #0]
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	4798      	blx	r3
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	6a1b      	ldr	r3, [r3, #32]
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	4798      	blx	r3
 800e6d2:	1bf3      	subs	r3, r6, r7
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	fbb3 f2f0 	udiv	r2, r3, r0
 800e6da:	fb02 3010 	mls	r0, r2, r0, r3
 800e6de:	b118      	cbz	r0, 800e6e8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800e6e0:	4b05      	ldr	r3, [pc, #20]	; (800e6f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800e6e2:	4a03      	ldr	r2, [pc, #12]	; (800e6f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800e6e4:	211f      	movs	r1, #31
 800e6e6:	e7e7      	b.n	800e6b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6ec:	08020458 	.word	0x08020458
 800e6f0:	080205c6 	.word	0x080205c6
 800e6f4:	0802046d 	.word	0x0802046d
 800e6f8:	0802049b 	.word	0x0802049b

0800e6fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	6803      	ldr	r3, [r0, #0]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	460d      	mov	r5, r1
 800e704:	4604      	mov	r4, r0
 800e706:	4798      	blx	r3
 800e708:	4285      	cmp	r5, r0
 800e70a:	d905      	bls.n	800e718 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800e70c:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800e70e:	4a0d      	ldr	r2, [pc, #52]	; (800e744 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800e710:	212f      	movs	r1, #47	; 0x2f
 800e712:	480d      	ldr	r0, [pc, #52]	; (800e748 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800e714:	f00f fe66 	bl	801e3e4 <__assert_func>
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	88a5      	ldrh	r5, [r4, #4]
 800e71c:	69db      	ldr	r3, [r3, #28]
 800e71e:	4620      	mov	r0, r4
 800e720:	4798      	blx	r3
 800e722:	4285      	cmp	r5, r0
 800e724:	d303      	bcc.n	800e72e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800e726:	4b09      	ldr	r3, [pc, #36]	; (800e74c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800e728:	4a06      	ldr	r2, [pc, #24]	; (800e744 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800e72a:	2130      	movs	r1, #48	; 0x30
 800e72c:	e7f1      	b.n	800e712 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	88a1      	ldrh	r1, [r4, #4]
 800e732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e734:	4620      	mov	r0, r4
 800e736:	4798      	blx	r3
 800e738:	88a3      	ldrh	r3, [r4, #4]
 800e73a:	3301      	adds	r3, #1
 800e73c:	80a3      	strh	r3, [r4, #4]
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	08020515 	.word	0x08020515
 800e744:	08020609 	.word	0x08020609
 800e748:	0802046d 	.word	0x0802046d
 800e74c:	0802052c 	.word	0x0802052c

0800e750 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	6803      	ldr	r3, [r0, #0]
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	4616      	mov	r6, r2
 800e758:	4604      	mov	r4, r0
 800e75a:	460d      	mov	r5, r1
 800e75c:	4798      	blx	r3
 800e75e:	4286      	cmp	r6, r0
 800e760:	d905      	bls.n	800e76e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800e762:	4b06      	ldr	r3, [pc, #24]	; (800e77c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800e764:	4a06      	ldr	r2, [pc, #24]	; (800e780 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800e766:	4807      	ldr	r0, [pc, #28]	; (800e784 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800e768:	2139      	movs	r1, #57	; 0x39
 800e76a:	f00f fe3b 	bl	801e3e4 <__assert_func>
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	4629      	mov	r1, r5
 800e772:	4620      	mov	r0, r4
 800e774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e77a:	4718      	bx	r3
 800e77c:	08020515 	.word	0x08020515
 800e780:	0802057c 	.word	0x0802057c
 800e784:	0802046d 	.word	0x0802046d

0800e788 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800e788:	4770      	bx	lr
	...

0800e78c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800e78c:	4a02      	ldr	r2, [pc, #8]	; (800e798 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800e78e:	6002      	str	r2, [r0, #0]
 800e790:	2200      	movs	r2, #0
 800e792:	8082      	strh	r2, [r0, #4]
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	08020550 	.word	0x08020550

0800e79c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800e79c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e79e:	2000      	movs	r0, #0
 800e7a0:	b12b      	cbz	r3, 800e7ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e7a2:	b920      	cbnz	r0, 800e7ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800e7a4:	1a5a      	subs	r2, r3, r1
 800e7a6:	4250      	negs	r0, r2
 800e7a8:	4150      	adcs	r0, r2
 800e7aa:	699b      	ldr	r3, [r3, #24]
 800e7ac:	e7f8      	b.n	800e7a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800e7ae:	4770      	bx	lr

0800e7b0 <_ZN8touchgfx9Container9removeAllEv>:
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e7b4:	b123      	cbz	r3, 800e7c0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800e7b6:	6999      	ldr	r1, [r3, #24]
 800e7b8:	6281      	str	r1, [r0, #40]	; 0x28
 800e7ba:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800e7be:	e7f8      	b.n	800e7b2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800e7c0:	4770      	bx	lr

0800e7c2 <_ZN8touchgfx9Container6unlinkEv>:
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	6283      	str	r3, [r0, #40]	; 0x28
 800e7c6:	4770      	bx	lr

0800e7c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800e7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7cc:	461f      	mov	r7, r3
 800e7ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800e7d2:	460d      	mov	r5, r1
 800e7d4:	4616      	mov	r6, r2
 800e7d6:	b103      	cbz	r3, 800e7da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800e7d8:	6038      	str	r0, [r7, #0]
 800e7da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e7dc:	b314      	cbz	r4, 800e824 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800e7de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e7e2:	b1eb      	cbz	r3, 800e820 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e7e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e7e8:	428d      	cmp	r5, r1
 800e7ea:	db19      	blt.n	800e820 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e7ec:	8923      	ldrh	r3, [r4, #8]
 800e7ee:	b289      	uxth	r1, r1
 800e7f0:	440b      	add	r3, r1
 800e7f2:	b21b      	sxth	r3, r3
 800e7f4:	429d      	cmp	r5, r3
 800e7f6:	da13      	bge.n	800e820 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e7f8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e7fc:	4296      	cmp	r6, r2
 800e7fe:	db0f      	blt.n	800e820 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e800:	8963      	ldrh	r3, [r4, #10]
 800e802:	b292      	uxth	r2, r2
 800e804:	4413      	add	r3, r2
 800e806:	b21b      	sxth	r3, r3
 800e808:	429e      	cmp	r6, r3
 800e80a:	da09      	bge.n	800e820 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	1ab2      	subs	r2, r6, r2
 800e810:	1a69      	subs	r1, r5, r1
 800e812:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800e816:	b212      	sxth	r2, r2
 800e818:	463b      	mov	r3, r7
 800e81a:	b209      	sxth	r1, r1
 800e81c:	4620      	mov	r0, r4
 800e81e:	47c0      	blx	r8
 800e820:	69a4      	ldr	r4, [r4, #24]
 800e822:	e7db      	b.n	800e7dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e828 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800e828:	2200      	movs	r2, #0
 800e82a:	8002      	strh	r2, [r0, #0]
 800e82c:	8042      	strh	r2, [r0, #2]
 800e82e:	8082      	strh	r2, [r0, #4]
 800e830:	80c2      	strh	r2, [r0, #6]
 800e832:	4770      	bx	lr

0800e834 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800e834:	b570      	push	{r4, r5, r6, lr}
 800e836:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e838:	460d      	mov	r5, r1
 800e83a:	4616      	mov	r6, r2
 800e83c:	b13c      	cbz	r4, 800e84e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	4620      	mov	r0, r4
 800e842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e844:	4632      	mov	r2, r6
 800e846:	4629      	mov	r1, r5
 800e848:	4798      	blx	r3
 800e84a:	69a4      	ldr	r4, [r4, #24]
 800e84c:	e7f6      	b.n	800e83c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800e84e:	bd70      	pop	{r4, r5, r6, pc}

0800e850 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e854:	460d      	mov	r5, r1
 800e856:	b134      	cbz	r4, 800e866 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	4621      	mov	r1, r4
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	4628      	mov	r0, r5
 800e860:	4798      	blx	r3
 800e862:	69a4      	ldr	r4, [r4, #24]
 800e864:	e7f7      	b.n	800e856 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800e866:	bd38      	pop	{r3, r4, r5, pc}

0800e868 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800e868:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e86a:	b19b      	cbz	r3, 800e894 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e86c:	428b      	cmp	r3, r1
 800e86e:	d109      	bne.n	800e884 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800e870:	699a      	ldr	r2, [r3, #24]
 800e872:	2100      	movs	r1, #0
 800e874:	6159      	str	r1, [r3, #20]
 800e876:	6282      	str	r2, [r0, #40]	; 0x28
 800e878:	b902      	cbnz	r2, 800e87c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800e87a:	4770      	bx	lr
 800e87c:	6199      	str	r1, [r3, #24]
 800e87e:	4770      	bx	lr
 800e880:	4613      	mov	r3, r2
 800e882:	b13a      	cbz	r2, 800e894 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800e884:	699a      	ldr	r2, [r3, #24]
 800e886:	428a      	cmp	r2, r1
 800e888:	d1fa      	bne.n	800e880 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800e88a:	698a      	ldr	r2, [r1, #24]
 800e88c:	619a      	str	r2, [r3, #24]
 800e88e:	2300      	movs	r3, #0
 800e890:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800e894:	4770      	bx	lr

0800e896 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800e896:	b410      	push	{r4}
 800e898:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e89a:	4604      	mov	r4, r0
 800e89c:	b92b      	cbnz	r3, 800e8aa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800e89e:	6803      	ldr	r3, [r0, #0]
 800e8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4718      	bx	r3
 800e8aa:	b941      	cbnz	r1, 800e8be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800e8ac:	6193      	str	r3, [r2, #24]
 800e8ae:	6282      	str	r2, [r0, #40]	; 0x28
 800e8b0:	6154      	str	r4, [r2, #20]
 800e8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d0f9      	beq.n	800e8b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800e8be:	4299      	cmp	r1, r3
 800e8c0:	6998      	ldr	r0, [r3, #24]
 800e8c2:	d1f9      	bne.n	800e8b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800e8c4:	6190      	str	r0, [r2, #24]
 800e8c6:	618a      	str	r2, [r1, #24]
 800e8c8:	e7f2      	b.n	800e8b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800e8cc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800e8cc:	4288      	cmp	r0, r1
 800e8ce:	b508      	push	{r3, lr}
 800e8d0:	d105      	bne.n	800e8de <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800e8d2:	4b11      	ldr	r3, [pc, #68]	; (800e918 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800e8d4:	4a11      	ldr	r2, [pc, #68]	; (800e91c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e8d6:	2123      	movs	r1, #35	; 0x23
 800e8d8:	4811      	ldr	r0, [pc, #68]	; (800e920 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800e8da:	f00f fd83 	bl	801e3e4 <__assert_func>
 800e8de:	694b      	ldr	r3, [r1, #20]
 800e8e0:	b11b      	cbz	r3, 800e8ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800e8e2:	4b10      	ldr	r3, [pc, #64]	; (800e924 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800e8e4:	4a0d      	ldr	r2, [pc, #52]	; (800e91c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e8e6:	2124      	movs	r1, #36	; 0x24
 800e8e8:	e7f6      	b.n	800e8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800e8ea:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800e8ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e8f0:	b913      	cbnz	r3, 800e8f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800e8f2:	6281      	str	r1, [r0, #40]	; 0x28
 800e8f4:	bd08      	pop	{r3, pc}
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	699a      	ldr	r2, [r3, #24]
 800e8fa:	b12a      	cbz	r2, 800e908 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800e8fc:	428b      	cmp	r3, r1
 800e8fe:	d1fa      	bne.n	800e8f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800e900:	4b09      	ldr	r3, [pc, #36]	; (800e928 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800e902:	4a06      	ldr	r2, [pc, #24]	; (800e91c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e904:	2135      	movs	r1, #53	; 0x35
 800e906:	e7e7      	b.n	800e8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800e908:	428b      	cmp	r3, r1
 800e90a:	d103      	bne.n	800e914 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800e90c:	4b06      	ldr	r3, [pc, #24]	; (800e928 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800e90e:	4a03      	ldr	r2, [pc, #12]	; (800e91c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800e910:	2138      	movs	r1, #56	; 0x38
 800e912:	e7e1      	b.n	800e8d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800e914:	6199      	str	r1, [r3, #24]
 800e916:	e7ed      	b.n	800e8f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800e918:	08020647 	.word	0x08020647
 800e91c:	0802079c 	.word	0x0802079c
 800e920:	08020673 	.word	0x08020673
 800e924:	080206a6 	.word	0x080206a6
 800e928:	080206dc 	.word	0x080206dc

0800e92c <_ZN8touchgfx4RectaNERKS0_>:
 800e92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e930:	888b      	ldrh	r3, [r1, #4]
 800e932:	f9b1 9000 	ldrsh.w	r9, [r1]
 800e936:	f9b0 a000 	ldrsh.w	sl, [r0]
 800e93a:	444b      	add	r3, r9
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	fa0f f883 	sxth.w	r8, r3
 800e942:	45c2      	cmp	sl, r8
 800e944:	da30      	bge.n	800e9a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e946:	8882      	ldrh	r2, [r0, #4]
 800e948:	4452      	add	r2, sl
 800e94a:	b292      	uxth	r2, r2
 800e94c:	fa0f fe82 	sxth.w	lr, r2
 800e950:	45f1      	cmp	r9, lr
 800e952:	da29      	bge.n	800e9a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e954:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e958:	88cc      	ldrh	r4, [r1, #6]
 800e95a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e95e:	442c      	add	r4, r5
 800e960:	b224      	sxth	r4, r4
 800e962:	42a6      	cmp	r6, r4
 800e964:	da20      	bge.n	800e9a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e966:	88c7      	ldrh	r7, [r0, #6]
 800e968:	4437      	add	r7, r6
 800e96a:	b2bf      	uxth	r7, r7
 800e96c:	fa0f fc87 	sxth.w	ip, r7
 800e970:	4565      	cmp	r5, ip
 800e972:	da19      	bge.n	800e9a8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e974:	45ca      	cmp	sl, r9
 800e976:	4654      	mov	r4, sl
 800e978:	bfb8      	it	lt
 800e97a:	464c      	movlt	r4, r9
 800e97c:	42b5      	cmp	r5, r6
 800e97e:	bfb8      	it	lt
 800e980:	4635      	movlt	r5, r6
 800e982:	45f0      	cmp	r8, lr
 800e984:	bfc8      	it	gt
 800e986:	4613      	movgt	r3, r2
 800e988:	1b1b      	subs	r3, r3, r4
 800e98a:	8083      	strh	r3, [r0, #4]
 800e98c:	88ca      	ldrh	r2, [r1, #6]
 800e98e:	884b      	ldrh	r3, [r1, #2]
 800e990:	8004      	strh	r4, [r0, #0]
 800e992:	4413      	add	r3, r2
 800e994:	b29b      	uxth	r3, r3
 800e996:	b21a      	sxth	r2, r3
 800e998:	4594      	cmp	ip, r2
 800e99a:	bfb8      	it	lt
 800e99c:	463b      	movlt	r3, r7
 800e99e:	1b5b      	subs	r3, r3, r5
 800e9a0:	80c3      	strh	r3, [r0, #6]
 800e9a2:	8045      	strh	r5, [r0, #2]
 800e9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	8003      	strh	r3, [r0, #0]
 800e9ac:	8043      	strh	r3, [r0, #2]
 800e9ae:	8083      	strh	r3, [r0, #4]
 800e9b0:	80c3      	strh	r3, [r0, #6]
 800e9b2:	e7f7      	b.n	800e9a4 <_ZN8touchgfx4RectaNERKS0_+0x78>

0800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e9b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e9b8:	b12b      	cbz	r3, 800e9c6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 800e9ba:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e9be:	fab0 f080 	clz	r0, r0
 800e9c2:	0940      	lsrs	r0, r0, #5
 800e9c4:	4770      	bx	lr
 800e9c6:	2001      	movs	r0, #1
 800e9c8:	4770      	bx	lr

0800e9ca <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800e9d2:	8003      	strh	r3, [r0, #0]
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	8043      	strh	r3, [r0, #2]
 800e9d8:	8083      	strh	r3, [r0, #4]
 800e9da:	80c3      	strh	r3, [r0, #6]
 800e9dc:	2d00      	cmp	r5, #0
 800e9de:	d040      	beq.n	800ea62 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e9e0:	1d28      	adds	r0, r5, #4
 800e9e2:	f7ff ffe7 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e9e6:	b988      	cbnz	r0, 800ea0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f7ff ffe3 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e9ee:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e9f2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e9f6:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e9fa:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e9fe:	b138      	cbz	r0, 800ea10 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ea00:	8022      	strh	r2, [r4, #0]
 800ea02:	8063      	strh	r3, [r4, #2]
 800ea04:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ea08:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ea0c:	69ad      	ldr	r5, [r5, #24]
 800ea0e:	e7e5      	b.n	800e9dc <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ea10:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ea14:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ea18:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ea1c:	4290      	cmp	r0, r2
 800ea1e:	4607      	mov	r7, r0
 800ea20:	bfa8      	it	ge
 800ea22:	4617      	movge	r7, r2
 800ea24:	4472      	add	r2, lr
 800ea26:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ea2a:	8027      	strh	r7, [r4, #0]
 800ea2c:	4299      	cmp	r1, r3
 800ea2e:	460e      	mov	r6, r1
 800ea30:	4440      	add	r0, r8
 800ea32:	bfa8      	it	ge
 800ea34:	461e      	movge	r6, r3
 800ea36:	4471      	add	r1, lr
 800ea38:	4463      	add	r3, ip
 800ea3a:	b200      	sxth	r0, r0
 800ea3c:	b212      	sxth	r2, r2
 800ea3e:	b209      	sxth	r1, r1
 800ea40:	b21b      	sxth	r3, r3
 800ea42:	4290      	cmp	r0, r2
 800ea44:	bfac      	ite	ge
 800ea46:	ebc7 0200 	rsbge	r2, r7, r0
 800ea4a:	ebc7 0202 	rsblt	r2, r7, r2
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	bfac      	ite	ge
 800ea52:	ebc6 0301 	rsbge	r3, r6, r1
 800ea56:	ebc6 0303 	rsblt	r3, r6, r3
 800ea5a:	8066      	strh	r6, [r4, #2]
 800ea5c:	80a2      	strh	r2, [r4, #4]
 800ea5e:	80e3      	strh	r3, [r4, #6]
 800ea60:	e7d4      	b.n	800ea0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ea62:	4620      	mov	r0, r4
 800ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea68 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800ea68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ea6c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ea70:	b383      	cbz	r3, 800ead4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ea72:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ea74:	b374      	cbz	r4, 800ead4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800ea76:	f9b1 5000 	ldrsh.w	r5, [r1]
 800ea7a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800ea7e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800ea82:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800ea86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ea8a:	b303      	cbz	r3, 800eace <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ea8c:	4668      	mov	r0, sp
 800ea8e:	1d21      	adds	r1, r4, #4
 800ea90:	f8ad 5000 	strh.w	r5, [sp]
 800ea94:	f8ad 6002 	strh.w	r6, [sp, #2]
 800ea98:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ea9c:	f8ad 8006 	strh.w	r8, [sp, #6]
 800eaa0:	f7ff ff44 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 800eaa4:	4668      	mov	r0, sp
 800eaa6:	f7ff ff85 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 800eaaa:	b980      	cbnz	r0, 800eace <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800eaac:	f8bd 3000 	ldrh.w	r3, [sp]
 800eab0:	88a2      	ldrh	r2, [r4, #4]
 800eab2:	1a9b      	subs	r3, r3, r2
 800eab4:	f8ad 3000 	strh.w	r3, [sp]
 800eab8:	88e2      	ldrh	r2, [r4, #6]
 800eaba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800eabe:	1a9b      	subs	r3, r3, r2
 800eac0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	4669      	mov	r1, sp
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	4620      	mov	r0, r4
 800eacc:	4798      	blx	r3
 800eace:	69a4      	ldr	r4, [r4, #24]
 800ead0:	2c00      	cmp	r4, #0
 800ead2:	d1d8      	bne.n	800ea86 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ead4:	b002      	add	sp, #8
 800ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eada <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800eada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eadc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800eae0:	460d      	mov	r5, r1
 800eae2:	4616      	mov	r6, r2
 800eae4:	b323      	cbz	r3, 800eb30 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800eae6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800eae8:	b314      	cbz	r4, 800eb30 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800eaea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800eaee:	b1eb      	cbz	r3, 800eb2c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800eaf0:	6828      	ldr	r0, [r5, #0]
 800eaf2:	6869      	ldr	r1, [r5, #4]
 800eaf4:	466b      	mov	r3, sp
 800eaf6:	c303      	stmia	r3!, {r0, r1}
 800eaf8:	4668      	mov	r0, sp
 800eafa:	1d21      	adds	r1, r4, #4
 800eafc:	f7ff ff16 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 800eb00:	4668      	mov	r0, sp
 800eb02:	f7ff ff57 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 800eb06:	b988      	cbnz	r0, 800eb2c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800eb08:	f8bd 3000 	ldrh.w	r3, [sp]
 800eb0c:	88a2      	ldrh	r2, [r4, #4]
 800eb0e:	1a9b      	subs	r3, r3, r2
 800eb10:	f8ad 3000 	strh.w	r3, [sp]
 800eb14:	88e2      	ldrh	r2, [r4, #6]
 800eb16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800eb1a:	1a9b      	subs	r3, r3, r2
 800eb1c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	4632      	mov	r2, r6
 800eb24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb26:	4669      	mov	r1, sp
 800eb28:	4620      	mov	r0, r4
 800eb2a:	4798      	blx	r3
 800eb2c:	69a4      	ldr	r4, [r4, #24]
 800eb2e:	e7db      	b.n	800eae8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800eb30:	b002      	add	sp, #8
 800eb32:	bd70      	pop	{r4, r5, r6, pc}

0800eb34 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800eb34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eb38:	4770      	bx	lr

0800eb3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800eb3a:	b513      	push	{r0, r1, r4, lr}
 800eb3c:	6803      	ldr	r3, [r0, #0]
 800eb3e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800eb42:	2300      	movs	r3, #0
 800eb44:	e9cd 3300 	strd	r3, r3, [sp]
 800eb48:	466b      	mov	r3, sp
 800eb4a:	47a0      	blx	r4
 800eb4c:	b002      	add	sp, #8
 800eb4e:	bd10      	pop	{r4, pc}

0800eb50 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800eb50:	2301      	movs	r3, #1
 800eb52:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800eb56:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800eb5a:	4770      	bx	lr

0800eb5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800eb62:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800eb66:	4770      	bx	lr

0800eb68 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800eb68:	6843      	ldr	r3, [r0, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	725a      	strb	r2, [r3, #9]
 800eb6e:	6840      	ldr	r0, [r0, #4]
 800eb70:	6803      	ldr	r3, [r0, #0]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	4718      	bx	r3

0800eb76 <_ZN8touchgfx3HAL8flushDMAEv>:
 800eb76:	6840      	ldr	r0, [r0, #4]
 800eb78:	6803      	ldr	r3, [r0, #0]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	4718      	bx	r3
	...

0800eb80 <_ZN8touchgfx3HAL10beginFrameEv>:
 800eb80:	4b04      	ldr	r3, [pc, #16]	; (800eb94 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	b123      	cbz	r3, 800eb90 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800eb86:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800eb8a:	f080 0001 	eor.w	r0, r0, #1
 800eb8e:	4770      	bx	lr
 800eb90:	2001      	movs	r0, #1
 800eb92:	4770      	bx	lr
 800eb94:	2002ee76 	.word	0x2002ee76

0800eb98 <_ZN8touchgfx3HAL8endFrameEv>:
 800eb98:	b510      	push	{r4, lr}
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	6840      	ldr	r0, [r0, #4]
 800eb9e:	6803      	ldr	r3, [r0, #0]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	4798      	blx	r3
 800eba4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800eba8:	b113      	cbz	r3, 800ebb0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ebb0:	bd10      	pop	{r4, pc}

0800ebb2 <_ZN8touchgfx3HAL9taskEntryEv>:
 800ebb2:	b508      	push	{r3, lr}
 800ebb4:	6803      	ldr	r3, [r0, #0]
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebba:	4798      	blx	r3
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	4798      	blx	r3
 800ebc4:	f7fe fa40 	bl	800d048 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebcc:	e7f8      	b.n	800ebc0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800ebd0 <_ZN8touchgfx3HAL4tickEv>:
 800ebd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ebd2:	6803      	ldr	r3, [r0, #0]
 800ebd4:	4d5c      	ldr	r5, [pc, #368]	; (800ed48 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800ebd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ebda:	4604      	mov	r4, r0
 800ebdc:	4798      	blx	r3
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f000 8097 	beq.w	800ed12 <_ZN8touchgfx3HAL4tickEv+0x142>
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	f7fd feed 	bl	800c9c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ebea:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800ebee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ebf2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800ebf6:	2600      	movs	r6, #0
 800ebf8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800ebfc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800ec00:	b133      	cbz	r3, 800ec10 <_ZN8touchgfx3HAL4tickEv+0x40>
 800ec02:	6823      	ldr	r3, [r4, #0]
 800ec04:	4620      	mov	r0, r4
 800ec06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ec0a:	4798      	blx	r3
 800ec0c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800ec10:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800ec14:	6862      	ldr	r2, [r4, #4]
 800ec16:	f083 0301 	eor.w	r3, r3, #1
 800ec1a:	7253      	strb	r3, [r2, #9]
 800ec1c:	2601      	movs	r6, #1
 800ec1e:	702e      	strb	r6, [r5, #0]
 800ec20:	f002 f952 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 800ec24:	6803      	ldr	r3, [r0, #0]
 800ec26:	4631      	mov	r1, r6
 800ec28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2a:	4798      	blx	r3
 800ec2c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ec30:	b90b      	cbnz	r3, 800ec36 <_ZN8touchgfx3HAL4tickEv+0x66>
 800ec32:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800ec36:	f002 f947 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 800ec3a:	6803      	ldr	r3, [r0, #0]
 800ec3c:	695b      	ldr	r3, [r3, #20]
 800ec3e:	4798      	blx	r3
 800ec40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec42:	6803      	ldr	r3, [r0, #0]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	4798      	blx	r3
 800ec48:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800ec4c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800ec50:	3b01      	subs	r3, #1
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ec58:	b10a      	cbz	r2, 800ec5e <_ZN8touchgfx3HAL4tickEv+0x8e>
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1eb      	bne.n	800ec36 <_ZN8touchgfx3HAL4tickEv+0x66>
 800ec5e:	4a3b      	ldr	r2, [pc, #236]	; (800ed4c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ec60:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800ec64:	7813      	ldrb	r3, [r2, #0]
 800ec66:	3301      	adds	r3, #1
 800ec68:	b25b      	sxtb	r3, r3
 800ec6a:	4299      	cmp	r1, r3
 800ec6c:	7013      	strb	r3, [r2, #0]
 800ec6e:	dc10      	bgt.n	800ec92 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800ec70:	68e0      	ldr	r0, [r4, #12]
 800ec72:	2300      	movs	r3, #0
 800ec74:	7013      	strb	r3, [r2, #0]
 800ec76:	6803      	ldr	r3, [r0, #0]
 800ec78:	aa03      	add	r2, sp, #12
 800ec7a:	68db      	ldr	r3, [r3, #12]
 800ec7c:	a902      	add	r1, sp, #8
 800ec7e:	4798      	blx	r3
 800ec80:	6823      	ldr	r3, [r4, #0]
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d051      	beq.n	800ed2a <_ZN8touchgfx3HAL4tickEv+0x15a>
 800ec86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ec8a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ec8e:	4620      	mov	r0, r4
 800ec90:	4798      	blx	r3
 800ec92:	6960      	ldr	r0, [r4, #20]
 800ec94:	2300      	movs	r3, #0
 800ec96:	f88d 3007 	strb.w	r3, [sp, #7]
 800ec9a:	b158      	cbz	r0, 800ecb4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800ec9c:	6803      	ldr	r3, [r0, #0]
 800ec9e:	f10d 0107 	add.w	r1, sp, #7
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	4798      	blx	r3
 800eca6:	b128      	cbz	r0, 800ecb4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800eca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecaa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ecae:	6803      	ldr	r3, [r0, #0]
 800ecb0:	68db      	ldr	r3, [r3, #12]
 800ecb2:	4798      	blx	r3
 800ecb4:	f104 001c 	add.w	r0, r4, #28
 800ecb8:	f00f fab0 	bl	801e21c <_ZN8touchgfx8Gestures4tickEv>
 800ecbc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800ecc0:	b30b      	cbz	r3, 800ed06 <_ZN8touchgfx3HAL4tickEv+0x136>
 800ecc2:	6920      	ldr	r0, [r4, #16]
 800ecc4:	6803      	ldr	r3, [r0, #0]
 800ecc6:	691b      	ldr	r3, [r3, #16]
 800ecc8:	4798      	blx	r3
 800ecca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eccc:	4606      	mov	r6, r0
 800ecce:	b903      	cbnz	r3, 800ecd2 <_ZN8touchgfx3HAL4tickEv+0x102>
 800ecd0:	6720      	str	r0, [r4, #112]	; 0x70
 800ecd2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ecd4:	4a1e      	ldr	r2, [pc, #120]	; (800ed50 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800ecd6:	1af3      	subs	r3, r6, r3
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d914      	bls.n	800ed06 <_ZN8touchgfx3HAL4tickEv+0x136>
 800ecdc:	6920      	ldr	r0, [r4, #16]
 800ecde:	6803      	ldr	r3, [r0, #0]
 800ece0:	699b      	ldr	r3, [r3, #24]
 800ece2:	4798      	blx	r3
 800ece4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ece6:	2264      	movs	r2, #100	; 0x64
 800ece8:	1af3      	subs	r3, r6, r3
 800ecea:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecee:	fbb0 f0f3 	udiv	r0, r0, r3
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	dc1e      	bgt.n	800ed34 <_ZN8touchgfx3HAL4tickEv+0x164>
 800ecf6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800ecfa:	6920      	ldr	r0, [r4, #16]
 800ecfc:	6803      	ldr	r3, [r0, #0]
 800ecfe:	2100      	movs	r1, #0
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	4798      	blx	r3
 800ed04:	6726      	str	r6, [r4, #112]	; 0x70
 800ed06:	f002 f8df 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 800ed0a:	6803      	ldr	r3, [r0, #0]
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed10:	4798      	blx	r3
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	4620      	mov	r0, r4
 800ed16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ed1a:	4798      	blx	r3
 800ed1c:	2001      	movs	r0, #1
 800ed1e:	f7fd fe5c 	bl	800c9da <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800ed22:	2300      	movs	r3, #0
 800ed24:	702b      	strb	r3, [r5, #0]
 800ed26:	b004      	add	sp, #16
 800ed28:	bd70      	pop	{r4, r5, r6, pc}
 800ed2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4798      	blx	r3
 800ed32:	e7ae      	b.n	800ec92 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800ed34:	2863      	cmp	r0, #99	; 0x63
 800ed36:	bfcb      	itete	gt
 800ed38:	2300      	movgt	r3, #0
 800ed3a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800ed3e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800ed42:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800ed46:	e7d8      	b.n	800ecfa <_ZN8touchgfx3HAL4tickEv+0x12a>
 800ed48:	2002ee7c 	.word	0x2002ee7c
 800ed4c:	2002ee7d 	.word	0x2002ee7d
 800ed50:	05f5e100 	.word	0x05f5e100

0800ed54 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800ed54:	f7fe b918 	b.w	800cf88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ed58 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800ed58:	6581      	str	r1, [r0, #88]	; 0x58
 800ed5a:	301c      	adds	r0, #28
 800ed5c:	f00f ba5c 	b.w	801e218 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800ed60 <_ZN8touchgfx3HAL5touchEll>:
 800ed60:	b530      	push	{r4, r5, lr}
 800ed62:	b087      	sub	sp, #28
 800ed64:	4604      	mov	r4, r0
 800ed66:	a804      	add	r0, sp, #16
 800ed68:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ed6c:	f001 fe6a 	bl	8010a44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800ed70:	9b04      	ldr	r3, [sp, #16]
 800ed72:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ed76:	a906      	add	r1, sp, #24
 800ed78:	9b05      	ldr	r3, [sp, #20]
 800ed7a:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800ed7e:	a803      	add	r0, sp, #12
 800ed80:	f001 feae 	bl	8010ae0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ed84:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800ed88:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ed8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ed90:	f104 001c 	add.w	r0, r4, #28
 800ed94:	b189      	cbz	r1, 800edba <_ZN8touchgfx3HAL5touchEll+0x5a>
 800ed96:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800ed9a:	9300      	str	r3, [sp, #0]
 800ed9c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800eda0:	4613      	mov	r3, r2
 800eda2:	462a      	mov	r2, r5
 800eda4:	f00f fa48 	bl	801e238 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800eda8:	b128      	cbz	r0, 800edb6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800edaa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800edae:	65e3      	str	r3, [r4, #92]	; 0x5c
 800edb0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800edb4:	6623      	str	r3, [r4, #96]	; 0x60
 800edb6:	b007      	add	sp, #28
 800edb8:	bd30      	pop	{r4, r5, pc}
 800edba:	f00f fa81 	bl	801e2c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800edbe:	2301      	movs	r3, #1
 800edc0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800edc4:	e7f1      	b.n	800edaa <_ZN8touchgfx3HAL5touchEll+0x4a>

0800edc6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800edc6:	b570      	push	{r4, r5, r6, lr}
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d050      	beq.n	800ee6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800edcc:	ea81 0002 	eor.w	r0, r1, r2
 800edd0:	07c6      	lsls	r6, r0, #31
 800edd2:	d508      	bpl.n	800ede6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800edd4:	3a01      	subs	r2, #1
 800edd6:	18cc      	adds	r4, r1, r3
 800edd8:	42a1      	cmp	r1, r4
 800edda:	d048      	beq.n	800ee6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800eddc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ede0:	f801 0b01 	strb.w	r0, [r1], #1
 800ede4:	e7f8      	b.n	800edd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ede6:	07d5      	lsls	r5, r2, #31
 800ede8:	bf42      	ittt	mi
 800edea:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800edee:	f801 0b01 	strbmi.w	r0, [r1], #1
 800edf2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d915      	bls.n	800ee26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800edfa:	ea82 0001 	eor.w	r0, r2, r1
 800edfe:	0784      	lsls	r4, r0, #30
 800ee00:	d02d      	beq.n	800ee5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800ee02:	1e94      	subs	r4, r2, #2
 800ee04:	4608      	mov	r0, r1
 800ee06:	18ce      	adds	r6, r1, r3
 800ee08:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800ee0c:	f820 5b02 	strh.w	r5, [r0], #2
 800ee10:	1a35      	subs	r5, r6, r0
 800ee12:	2d01      	cmp	r5, #1
 800ee14:	d8f8      	bhi.n	800ee08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800ee16:	1e98      	subs	r0, r3, #2
 800ee18:	f020 0001 	bic.w	r0, r0, #1
 800ee1c:	3002      	adds	r0, #2
 800ee1e:	4401      	add	r1, r0
 800ee20:	4402      	add	r2, r0
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	1f14      	subs	r4, r2, #4
 800ee28:	4608      	mov	r0, r1
 800ee2a:	18ce      	adds	r6, r1, r3
 800ee2c:	1a35      	subs	r5, r6, r0
 800ee2e:	2d03      	cmp	r5, #3
 800ee30:	d810      	bhi.n	800ee54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800ee32:	089c      	lsrs	r4, r3, #2
 800ee34:	00a0      	lsls	r0, r4, #2
 800ee36:	4401      	add	r1, r0
 800ee38:	3801      	subs	r0, #1
 800ee3a:	4402      	add	r2, r0
 800ee3c:	f06f 0003 	mvn.w	r0, #3
 800ee40:	fb00 3404 	mla	r4, r0, r4, r3
 800ee44:	440c      	add	r4, r1
 800ee46:	42a1      	cmp	r1, r4
 800ee48:	d011      	beq.n	800ee6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800ee4a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ee4e:	f801 3b01 	strb.w	r3, [r1], #1
 800ee52:	e7f8      	b.n	800ee46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800ee54:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800ee58:	f840 5b04 	str.w	r5, [r0], #4
 800ee5c:	e7e6      	b.n	800ee2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800ee5e:	0790      	lsls	r0, r2, #30
 800ee60:	d0e1      	beq.n	800ee26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ee62:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ee66:	f821 0b02 	strh.w	r0, [r1], #2
 800ee6a:	3b02      	subs	r3, #2
 800ee6c:	e7db      	b.n	800ee26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800ee6e:	2001      	movs	r0, #1
 800ee70:	bd70      	pop	{r4, r5, r6, pc}

0800ee72 <_ZN8touchgfx3HAL7noTouchEv>:
 800ee72:	b510      	push	{r4, lr}
 800ee74:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800ee78:	4604      	mov	r4, r0
 800ee7a:	b153      	cbz	r3, 800ee92 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800ee7c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800ee80:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800ee84:	2101      	movs	r1, #1
 800ee86:	301c      	adds	r0, #28
 800ee88:	f00f fa1a 	bl	801e2c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ee92:	bd10      	pop	{r4, pc}

0800ee94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800ee94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee98:	4605      	mov	r5, r0
 800ee9a:	6980      	ldr	r0, [r0, #24]
 800ee9c:	b085      	sub	sp, #20
 800ee9e:	460f      	mov	r7, r1
 800eea0:	4690      	mov	r8, r2
 800eea2:	4699      	mov	r9, r3
 800eea4:	b930      	cbnz	r0, 800eeb4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800eea6:	4b1f      	ldr	r3, [pc, #124]	; (800ef24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800eea8:	4a1f      	ldr	r2, [pc, #124]	; (800ef28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800eeaa:	f44f 7198 	mov.w	r1, #304	; 0x130
 800eeae:	481f      	ldr	r0, [pc, #124]	; (800ef2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 800eeb0:	f00f fa98 	bl	801e3e4 <__assert_func>
 800eeb4:	ac04      	add	r4, sp, #16
 800eeb6:	2600      	movs	r6, #0
 800eeb8:	f844 6d04 	str.w	r6, [r4, #-4]!
 800eebc:	6806      	ldr	r6, [r0, #0]
 800eebe:	9401      	str	r4, [sp, #4]
 800eec0:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800eec4:	9400      	str	r4, [sp, #0]
 800eec6:	6834      	ldr	r4, [r6, #0]
 800eec8:	47a0      	blx	r4
 800eeca:	4c19      	ldr	r4, [pc, #100]	; (800ef30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 800eecc:	4606      	mov	r6, r0
 800eece:	f8a4 9000 	strh.w	r9, [r4]
 800eed2:	f7fb ff15 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800eed6:	6803      	ldr	r3, [r0, #0]
 800eed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeda:	4798      	blx	r3
 800eedc:	280c      	cmp	r0, #12
 800eede:	d80f      	bhi.n	800ef00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800eee0:	e8df f000 	tbb	[pc, r0]
 800eee4:	1b1b1207 	.word	0x1b1b1207
 800eee8:	1b1b1b1b 	.word	0x1b1b1b1b
 800eeec:	1b1b1b1b 	.word	0x1b1b1b1b
 800eef0:	1b          	.byte	0x1b
 800eef1:	00          	.byte	0x00
 800eef2:	8823      	ldrh	r3, [r4, #0]
 800eef4:	fb08 7203 	mla	r2, r8, r3, r7
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800eefe:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ef00:	4630      	mov	r0, r6
 800ef02:	b005      	add	sp, #20
 800ef04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef08:	8822      	ldrh	r2, [r4, #0]
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	fb08 7202 	mla	r2, r8, r2, r7
 800ef10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ef14:	1a9a      	subs	r2, r3, r2
 800ef16:	63ea      	str	r2, [r5, #60]	; 0x3c
 800ef18:	e7f2      	b.n	800ef00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800ef1a:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 800ef1c:	4a02      	ldr	r2, [pc, #8]	; (800ef28 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800ef1e:	f240 114d 	movw	r1, #333	; 0x14d
 800ef22:	e7c4      	b.n	800eeae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800ef24:	08020845 	.word	0x08020845
 800ef28:	08020b56 	.word	0x08020b56
 800ef2c:	0802088a 	.word	0x0802088a
 800ef30:	2002ee72 	.word	0x2002ee72
 800ef34:	080208b0 	.word	0x080208b0

0800ef38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800ef38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef3c:	4698      	mov	r8, r3
 800ef3e:	6803      	ldr	r3, [r0, #0]
 800ef40:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800ef42:	4b0f      	ldr	r3, [pc, #60]	; (800ef80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800ef44:	b087      	sub	sp, #28
 800ef46:	f8b3 9000 	ldrh.w	r9, [r3]
 800ef4a:	460e      	mov	r6, r1
 800ef4c:	4617      	mov	r7, r2
 800ef4e:	4604      	mov	r4, r0
 800ef50:	f7fb fed6 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800ef54:	6803      	ldr	r3, [r0, #0]
 800ef56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef58:	4798      	blx	r3
 800ef5a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800ef5e:	9302      	str	r3, [sp, #8]
 800ef60:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800ef70:	4643      	mov	r3, r8
 800ef72:	463a      	mov	r2, r7
 800ef74:	4631      	mov	r1, r6
 800ef76:	4620      	mov	r0, r4
 800ef78:	47a8      	blx	r5
 800ef7a:	b007      	add	sp, #28
 800ef7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef80:	2002ee72 	.word	0x2002ee72

0800ef84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800ef84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef88:	4606      	mov	r6, r0
 800ef8a:	b089      	sub	sp, #36	; 0x24
 800ef8c:	4610      	mov	r0, r2
 800ef8e:	460c      	mov	r4, r1
 800ef90:	4691      	mov	r9, r2
 800ef92:	4698      	mov	r8, r3
 800ef94:	f003 fcae 	bl	80128f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	f000 8092 	beq.w	800f0c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 800ef9e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800f0dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800efa2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800f0e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 800efa6:	f8da 0000 	ldr.w	r0, [sl]
 800efaa:	4f4b      	ldr	r7, [pc, #300]	; (800f0d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800efac:	6802      	ldr	r2, [r0, #0]
 800efae:	6a12      	ldr	r2, [r2, #32]
 800efb0:	4790      	blx	r2
 800efb2:	f8da 0000 	ldr.w	r0, [sl]
 800efb6:	6802      	ldr	r2, [r0, #0]
 800efb8:	ad08      	add	r5, sp, #32
 800efba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800efbc:	4790      	blx	r2
 800efbe:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 800efc2:	f8bb 3000 	ldrh.w	r3, [fp]
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	4628      	mov	r0, r5
 800efca:	883b      	ldrh	r3, [r7, #0]
 800efcc:	9301      	str	r3, [sp, #4]
 800efce:	f003 fd51 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800efd2:	f8ab 0000 	strh.w	r0, [fp]
 800efd6:	4628      	mov	r0, r5
 800efd8:	f003 fd86 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800efdc:	f8da b000 	ldr.w	fp, [sl]
 800efe0:	8038      	strh	r0, [r7, #0]
 800efe2:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800efe6:	9302      	str	r3, [sp, #8]
 800efe8:	4648      	mov	r0, r9
 800efea:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 800efee:	f003 fc81 	bl	80128f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800eff2:	f8da 2000 	ldr.w	r2, [sl]
 800eff6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800effa:	63d0      	str	r0, [r2, #60]	; 0x3c
 800effc:	6822      	ldr	r2, [r4, #0]
 800effe:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 800f002:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f004:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 800f008:	2200      	movs	r2, #0
 800f00a:	4611      	mov	r1, r2
 800f00c:	4620      	mov	r0, r4
 800f00e:	4798      	blx	r3
 800f010:	2201      	movs	r2, #1
 800f012:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 800f016:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800f01a:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 800f01e:	1d22      	adds	r2, r4, #4
 800f020:	2900      	cmp	r1, #0
 800f022:	d051      	beq.n	800f0c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800f024:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800f028:	2900      	cmp	r1, #0
 800f02a:	d04d      	beq.n	800f0c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800f02c:	6810      	ldr	r0, [r2, #0]
 800f02e:	6851      	ldr	r1, [r2, #4]
 800f030:	f10d 0c18 	add.w	ip, sp, #24
 800f034:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f038:	4641      	mov	r1, r8
 800f03a:	a806      	add	r0, sp, #24
 800f03c:	f7ff fc76 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 800f040:	4628      	mov	r0, r5
 800f042:	f003 fea3 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f046:	4680      	mov	r8, r0
 800f048:	f7fb fe5a 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f04c:	6802      	ldr	r2, [r0, #0]
 800f04e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f050:	4790      	blx	r2
 800f052:	4580      	cmp	r8, r0
 800f054:	d03d      	beq.n	800f0d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 800f056:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800f058:	b150      	cbz	r0, 800f070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800f05a:	4628      	mov	r0, r5
 800f05c:	f003 fe96 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f060:	4605      	mov	r5, r0
 800f062:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800f064:	6803      	ldr	r3, [r0, #0]
 800f066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f068:	4798      	blx	r3
 800f06a:	1a2b      	subs	r3, r5, r0
 800f06c:	4258      	negs	r0, r3
 800f06e:	4158      	adcs	r0, r3
 800f070:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800f074:	6822      	ldr	r2, [r4, #0]
 800f076:	6963      	ldr	r3, [r4, #20]
 800f078:	9303      	str	r3, [sp, #12]
 800f07a:	2500      	movs	r5, #0
 800f07c:	6165      	str	r5, [r4, #20]
 800f07e:	4620      	mov	r0, r4
 800f080:	6892      	ldr	r2, [r2, #8]
 800f082:	a906      	add	r1, sp, #24
 800f084:	4790      	blx	r2
 800f086:	9b03      	ldr	r3, [sp, #12]
 800f088:	6163      	str	r3, [r4, #20]
 800f08a:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 800f094:	4620      	mov	r0, r4
 800f096:	4c11      	ldr	r4, [pc, #68]	; (800f0dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 800f098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f09a:	4652      	mov	r2, sl
 800f09c:	4649      	mov	r1, r9
 800f09e:	4798      	blx	r3
 800f0a0:	6820      	ldr	r0, [r4, #0]
 800f0a2:	9b02      	ldr	r3, [sp, #8]
 800f0a4:	9a00      	ldr	r2, [sp, #0]
 800f0a6:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 800f0aa:	4b0d      	ldr	r3, [pc, #52]	; (800f0e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 800f0ac:	801a      	strh	r2, [r3, #0]
 800f0ae:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800f0b0:	9a01      	ldr	r2, [sp, #4]
 800f0b2:	801a      	strh	r2, [r3, #0]
 800f0b4:	6803      	ldr	r3, [r0, #0]
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	4798      	blx	r3
 800f0ba:	6820      	ldr	r0, [r4, #0]
 800f0bc:	6803      	ldr	r3, [r0, #0]
 800f0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c0:	4798      	blx	r3
 800f0c2:	b009      	add	sp, #36	; 0x24
 800f0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c8:	6810      	ldr	r0, [r2, #0]
 800f0ca:	6851      	ldr	r1, [r2, #4]
 800f0cc:	ab06      	add	r3, sp, #24
 800f0ce:	c303      	stmia	r3!, {r0, r1}
 800f0d0:	e7b6      	b.n	800f040 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	e7cc      	b.n	800f070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800f0d6:	bf00      	nop
 800f0d8:	2002ee74 	.word	0x2002ee74
 800f0dc:	2002ee78 	.word	0x2002ee78
 800f0e0:	2002ee72 	.word	0x2002ee72

0800f0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	4b07      	ldr	r3, [pc, #28]	; (800f104 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	b13b      	cbz	r3, 800f0fe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f0ee:	6803      	ldr	r3, [r0, #0]
 800f0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f2:	4798      	blx	r3
 800f0f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f0f6:	4283      	cmp	r3, r0
 800f0f8:	d101      	bne.n	800f0fe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f0fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800f0fc:	bd10      	pop	{r4, pc}
 800f0fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f100:	e7fc      	b.n	800f0fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f102:	bf00      	nop
 800f104:	2002ee76 	.word	0x2002ee76

0800f108 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800f108:	b510      	push	{r4, lr}
 800f10a:	4b0b      	ldr	r3, [pc, #44]	; (800f138 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	4604      	mov	r4, r0
 800f110:	b95b      	cbnz	r3, 800f12a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f112:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800f116:	2b02      	cmp	r3, #2
 800f118:	d007      	beq.n	800f12a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f11a:	6840      	ldr	r0, [r0, #4]
 800f11c:	f000 fbc8 	bl	800f8b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800f120:	b118      	cbz	r0, 800f12a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800f122:	6862      	ldr	r2, [r4, #4]
 800f124:	7a53      	ldrb	r3, [r2, #9]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d0fc      	beq.n	800f124 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800f12a:	f7fd ff1f 	bl	800cf6c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f12e:	4620      	mov	r0, r4
 800f130:	f7ff ffd8 	bl	800f0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f134:	bd10      	pop	{r4, pc}
 800f136:	bf00      	nop
 800f138:	2002ee76 	.word	0x2002ee76

0800f13c <_ZN8touchgfx3HAL10initializeEv>:
 800f13c:	b510      	push	{r4, lr}
 800f13e:	4604      	mov	r4, r0
 800f140:	f7fd fef0 	bl	800cf24 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f144:	6860      	ldr	r0, [r4, #4]
 800f146:	6803      	ldr	r3, [r0, #0]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	4798      	blx	r3
 800f14c:	68e0      	ldr	r0, [r4, #12]
 800f14e:	6803      	ldr	r3, [r0, #0]
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	4798      	blx	r3
 800f154:	6823      	ldr	r3, [r4, #0]
 800f156:	4620      	mov	r0, r4
 800f158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f15e:	4718      	bx	r3

0800f160 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800f160:	b508      	push	{r3, lr}
 800f162:	290c      	cmp	r1, #12
 800f164:	d817      	bhi.n	800f196 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800f166:	e8df f001 	tbb	[pc, r1]
 800f16a:	090b      	.short	0x090b
 800f16c:	0d0d0d07 	.word	0x0d0d0d07
 800f170:	1414140d 	.word	0x1414140d
 800f174:	1414      	.short	0x1414
 800f176:	0d          	.byte	0x0d
 800f177:	00          	.byte	0x00
 800f178:	2020      	movs	r0, #32
 800f17a:	bd08      	pop	{r3, pc}
 800f17c:	2018      	movs	r0, #24
 800f17e:	e7fc      	b.n	800f17a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f180:	2010      	movs	r0, #16
 800f182:	e7fa      	b.n	800f17a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f184:	4b05      	ldr	r3, [pc, #20]	; (800f19c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800f186:	4a06      	ldr	r2, [pc, #24]	; (800f1a0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800f188:	4806      	ldr	r0, [pc, #24]	; (800f1a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800f18a:	f44f 710c 	mov.w	r1, #560	; 0x230
 800f18e:	f00f f929 	bl	801e3e4 <__assert_func>
 800f192:	2008      	movs	r0, #8
 800f194:	e7f1      	b.n	800f17a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f196:	2000      	movs	r0, #0
 800f198:	e7ef      	b.n	800f17a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800f19a:	bf00      	nop
 800f19c:	08020983 	.word	0x08020983
 800f1a0:	08020d18 	.word	0x08020d18
 800f1a4:	0802088a 	.word	0x0802088a

0800f1a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800f1a8:	b570      	push	{r4, r5, r6, lr}
 800f1aa:	460d      	mov	r5, r1
 800f1ac:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	461c      	mov	r4, r3
 800f1b4:	f7ff ffd4 	bl	800f160 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800f1b8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f1bc:	10c0      	asrs	r0, r0, #3
 800f1be:	fb06 5101 	mla	r1, r6, r1, r5
 800f1c2:	fb00 4001 	mla	r0, r0, r1, r4
 800f1c6:	bd70      	pop	{r4, r5, r6, pc}

0800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800f1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1cc:	b08a      	sub	sp, #40	; 0x28
 800f1ce:	f04f 0c00 	mov.w	ip, #0
 800f1d2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800f1d6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800f1da:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800f1de:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800f1e2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800f1e6:	f8cd c020 	str.w	ip, [sp, #32]
 800f1ea:	f1b8 0f02 	cmp.w	r8, #2
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	469a      	mov	sl, r3
 800f1f2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800f1f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f1fa:	d030      	beq.n	800f25e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800f1fc:	2bff      	cmp	r3, #255	; 0xff
 800f1fe:	d12c      	bne.n	800f25a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800f200:	4560      	cmp	r0, ip
 800f202:	bf14      	ite	ne
 800f204:	2004      	movne	r0, #4
 800f206:	2001      	moveq	r0, #1
 800f208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f20c:	9204      	str	r2, [sp, #16]
 800f20e:	4620      	mov	r0, r4
 800f210:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800f214:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f218:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f21c:	f8ad 6018 	strh.w	r6, [sp, #24]
 800f220:	f8ad 501a 	strh.w	r5, [sp, #26]
 800f224:	f7ff ff5e 	bl	800f0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f228:	e9cd 9700 	strd	r9, r7, [sp]
 800f22c:	4603      	mov	r3, r0
 800f22e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800f232:	4651      	mov	r1, sl
 800f234:	4620      	mov	r0, r4
 800f236:	f7ff ffb7 	bl	800f1a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800f23a:	f8ad 901e 	strh.w	r9, [sp, #30]
 800f23e:	9005      	str	r0, [sp, #20]
 800f240:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800f244:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800f248:	b106      	cbz	r6, 800f24c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800f24a:	b98d      	cbnz	r5, 800f270 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800f24c:	4b12      	ldr	r3, [pc, #72]	; (800f298 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800f24e:	4a13      	ldr	r2, [pc, #76]	; (800f29c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800f250:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800f254:	4812      	ldr	r0, [pc, #72]	; (800f2a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800f256:	f00f f8c5 	bl	801e3e4 <__assert_func>
 800f25a:	2004      	movs	r0, #4
 800f25c:	e7d4      	b.n	800f208 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800f25e:	2bff      	cmp	r3, #255	; 0xff
 800f260:	d104      	bne.n	800f26c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800f262:	2800      	cmp	r0, #0
 800f264:	bf14      	ite	ne
 800f266:	2040      	movne	r0, #64	; 0x40
 800f268:	2020      	moveq	r0, #32
 800f26a:	e7cd      	b.n	800f208 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800f26c:	2040      	movs	r0, #64	; 0x40
 800f26e:	e7cb      	b.n	800f208 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800f270:	6823      	ldr	r3, [r4, #0]
 800f272:	9d02      	ldr	r5, [sp, #8]
 800f274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f276:	4620      	mov	r0, r4
 800f278:	4798      	blx	r3
 800f27a:	4228      	tst	r0, r5
 800f27c:	d104      	bne.n	800f288 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800f27e:	4b09      	ldr	r3, [pc, #36]	; (800f2a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800f280:	4a06      	ldr	r2, [pc, #24]	; (800f29c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800f282:	f240 11b1 	movw	r1, #433	; 0x1b1
 800f286:	e7e5      	b.n	800f254 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800f288:	6860      	ldr	r0, [r4, #4]
 800f28a:	6803      	ldr	r3, [r0, #0]
 800f28c:	a902      	add	r1, sp, #8
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	4798      	blx	r3
 800f292:	b00a      	add	sp, #40	; 0x28
 800f294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f298:	08020906 	.word	0x08020906
 800f29c:	08020bba 	.word	0x08020bba
 800f2a0:	0802088a 	.word	0x0802088a
 800f2a4:	0802093e 	.word	0x0802093e

0800f2a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	b08a      	sub	sp, #40	; 0x28
 800f2ac:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800f2b0:	9408      	str	r4, [sp, #32]
 800f2b2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800f2b6:	9407      	str	r4, [sp, #28]
 800f2b8:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800f2bc:	9406      	str	r4, [sp, #24]
 800f2be:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800f2c2:	9405      	str	r4, [sp, #20]
 800f2c4:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800f2c8:	9404      	str	r4, [sp, #16]
 800f2ca:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800f2ce:	9403      	str	r4, [sp, #12]
 800f2d0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800f2d4:	9402      	str	r4, [sp, #8]
 800f2d6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800f2da:	e9cd 3400 	strd	r3, r4, [sp]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f7ff ff71 	bl	800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800f2e6:	b00a      	add	sp, #40	; 0x28
 800f2e8:	bd10      	pop	{r4, pc}
	...

0800f2ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ee:	b08b      	sub	sp, #44	; 0x2c
 800f2f0:	4616      	mov	r6, r2
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	461f      	mov	r7, r3
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	f7fb fd02 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f2fc:	6803      	ldr	r3, [r0, #0]
 800f2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f300:	4798      	blx	r3
 800f302:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800f306:	4b0d      	ldr	r3, [pc, #52]	; (800f33c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	9306      	str	r3, [sp, #24]
 800f30c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800f310:	9305      	str	r3, [sp, #20]
 800f312:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f316:	9304      	str	r3, [sp, #16]
 800f318:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f31c:	9303      	str	r3, [sp, #12]
 800f31e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f322:	9302      	str	r3, [sp, #8]
 800f324:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f328:	2200      	movs	r2, #0
 800f32a:	e9cd 7300 	strd	r7, r3, [sp]
 800f32e:	4629      	mov	r1, r5
 800f330:	4633      	mov	r3, r6
 800f332:	4620      	mov	r0, r4
 800f334:	f7ff ff48 	bl	800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800f338:	b00b      	add	sp, #44	; 0x2c
 800f33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f33c:	2002ee72 	.word	0x2002ee72

0800f340 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f344:	461f      	mov	r7, r3
 800f346:	4b14      	ldr	r3, [pc, #80]	; (800f398 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800f348:	b08a      	sub	sp, #40	; 0x28
 800f34a:	4616      	mov	r6, r2
 800f34c:	f8b3 8000 	ldrh.w	r8, [r3]
 800f350:	460d      	mov	r5, r1
 800f352:	4604      	mov	r4, r0
 800f354:	f7fb fcd4 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f358:	6803      	ldr	r3, [r0, #0]
 800f35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f35c:	4798      	blx	r3
 800f35e:	2302      	movs	r3, #2
 800f360:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800f364:	2301      	movs	r3, #1
 800f366:	9305      	str	r3, [sp, #20]
 800f368:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f36c:	9304      	str	r3, [sp, #16]
 800f36e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800f372:	9303      	str	r3, [sp, #12]
 800f374:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800f378:	9302      	str	r3, [sp, #8]
 800f37a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f37e:	9008      	str	r0, [sp, #32]
 800f380:	e9cd 7300 	strd	r7, r3, [sp]
 800f384:	2200      	movs	r2, #0
 800f386:	4633      	mov	r3, r6
 800f388:	4629      	mov	r1, r5
 800f38a:	4620      	mov	r0, r4
 800f38c:	f7ff ff1c 	bl	800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800f390:	b00a      	add	sp, #40	; 0x28
 800f392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f396:	bf00      	nop
 800f398:	2002ee72 	.word	0x2002ee72

0800f39c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a0:	b08b      	sub	sp, #44	; 0x2c
 800f3a2:	469b      	mov	fp, r3
 800f3a4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800f3a8:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800f3ac:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800f3b0:	2fff      	cmp	r7, #255	; 0xff
 800f3b2:	bf14      	ite	ne
 800f3b4:	2308      	movne	r3, #8
 800f3b6:	2302      	moveq	r3, #2
 800f3b8:	2600      	movs	r6, #0
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	4689      	mov	r9, r1
 800f3be:	4692      	mov	sl, r2
 800f3c0:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800f3c4:	9608      	str	r6, [sp, #32]
 800f3c6:	f7ff fe8d 	bl	800f0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f3ca:	e9cd 8500 	strd	r8, r5, [sp]
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	465a      	mov	r2, fp
 800f3d2:	4651      	mov	r1, sl
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f7ff fee7 	bl	800f1a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800f3da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f3de:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f3e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800f3e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	9005      	str	r0, [sp, #20]
 800f3ee:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800f3f2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800f3f6:	f8ad 601c 	strh.w	r6, [sp, #28]
 800f3fa:	f8ad 801e 	strh.w	r8, [sp, #30]
 800f3fe:	f8cd 9020 	str.w	r9, [sp, #32]
 800f402:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800f406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f408:	9d02      	ldr	r5, [sp, #8]
 800f40a:	4620      	mov	r0, r4
 800f40c:	4798      	blx	r3
 800f40e:	4228      	tst	r0, r5
 800f410:	d106      	bne.n	800f420 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800f412:	4b07      	ldr	r3, [pc, #28]	; (800f430 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800f414:	4a07      	ldr	r2, [pc, #28]	; (800f434 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800f416:	4808      	ldr	r0, [pc, #32]	; (800f438 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800f418:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800f41c:	f00e ffe2 	bl	801e3e4 <__assert_func>
 800f420:	6860      	ldr	r0, [r4, #4]
 800f422:	6803      	ldr	r3, [r0, #0]
 800f424:	a902      	add	r1, sp, #8
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	4798      	blx	r3
 800f42a:	b00b      	add	sp, #44	; 0x2c
 800f42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f430:	0802093e 	.word	0x0802093e
 800f434:	08020c83 	.word	0x08020c83
 800f438:	0802088a 	.word	0x0802088a

0800f43c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f43c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f440:	461f      	mov	r7, r3
 800f442:	4b0b      	ldr	r3, [pc, #44]	; (800f470 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800f444:	460d      	mov	r5, r1
 800f446:	f8b3 8000 	ldrh.w	r8, [r3]
 800f44a:	4616      	mov	r6, r2
 800f44c:	4604      	mov	r4, r0
 800f44e:	f7fb fc57 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f452:	6803      	ldr	r3, [r0, #0]
 800f454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f456:	4798      	blx	r3
 800f458:	463b      	mov	r3, r7
 800f45a:	e9cd 8000 	strd	r8, r0, [sp]
 800f45e:	4632      	mov	r2, r6
 800f460:	4629      	mov	r1, r5
 800f462:	4620      	mov	r0, r4
 800f464:	f7ff fea0 	bl	800f1a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800f468:	b002      	add	sp, #8
 800f46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f46e:	bf00      	nop
 800f470:	2002ee72 	.word	0x2002ee72

0800f474 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800f474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f478:	b088      	sub	sp, #32
 800f47a:	4698      	mov	r8, r3
 800f47c:	2300      	movs	r3, #0
 800f47e:	9306      	str	r3, [sp, #24]
 800f480:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f484:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800f488:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800f48c:	f8ad 6010 	strh.w	r6, [sp, #16]
 800f490:	e9cd 3100 	strd	r3, r1, [sp]
 800f494:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800f498:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f49c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800f4a0:	f88d 301c 	strb.w	r3, [sp, #28]
 800f4a4:	4617      	mov	r7, r2
 800f4a6:	4604      	mov	r4, r0
 800f4a8:	f8ad 5012 	strh.w	r5, [sp, #18]
 800f4ac:	f7ff fe1a 	bl	800f0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f4b0:	4642      	mov	r2, r8
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4639      	mov	r1, r7
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f7ff ffc0 	bl	800f43c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f4bc:	4b16      	ldr	r3, [pc, #88]	; (800f518 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800f4be:	9003      	str	r0, [sp, #12]
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4c6:	f7fb fc1b 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f4ca:	6803      	ldr	r3, [r0, #0]
 800f4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ce:	4798      	blx	r3
 800f4d0:	f88d 001e 	strb.w	r0, [sp, #30]
 800f4d4:	f88d 001d 	strb.w	r0, [sp, #29]
 800f4d8:	b106      	cbz	r6, 800f4dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800f4da:	b935      	cbnz	r5, 800f4ea <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800f4dc:	4b0f      	ldr	r3, [pc, #60]	; (800f51c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800f4de:	4a10      	ldr	r2, [pc, #64]	; (800f520 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800f4e0:	f240 11cd 	movw	r1, #461	; 0x1cd
 800f4e4:	480f      	ldr	r0, [pc, #60]	; (800f524 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800f4e6:	f00e ff7d 	bl	801e3e4 <__assert_func>
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	9d00      	ldr	r5, [sp, #0]
 800f4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	4798      	blx	r3
 800f4f4:	4228      	tst	r0, r5
 800f4f6:	d104      	bne.n	800f502 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800f4f8:	4b0b      	ldr	r3, [pc, #44]	; (800f528 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800f4fa:	4a09      	ldr	r2, [pc, #36]	; (800f520 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800f4fc:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800f500:	e7f0      	b.n	800f4e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800f502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f504:	6860      	ldr	r0, [r4, #4]
 800f506:	9306      	str	r3, [sp, #24]
 800f508:	6803      	ldr	r3, [r0, #0]
 800f50a:	4669      	mov	r1, sp
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	4798      	blx	r3
 800f510:	b008      	add	sp, #32
 800f512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f516:	bf00      	nop
 800f518:	2002ee72 	.word	0x2002ee72
 800f51c:	08020906 	.word	0x08020906
 800f520:	08020a6c 	.word	0x08020a6c
 800f524:	0802088a 	.word	0x0802088a
 800f528:	0802093e 	.word	0x0802093e

0800f52c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	b08a      	sub	sp, #40	; 0x28
 800f530:	466b      	mov	r3, sp
 800f532:	e883 0006 	stmia.w	r3, {r1, r2}
 800f536:	4b20      	ldr	r3, [pc, #128]	; (800f5b8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	4604      	mov	r4, r0
 800f53c:	b933      	cbnz	r3, 800f54c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800f53e:	4b1f      	ldr	r3, [pc, #124]	; (800f5bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800f540:	4a1f      	ldr	r2, [pc, #124]	; (800f5c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800f542:	4820      	ldr	r0, [pc, #128]	; (800f5c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800f544:	f240 11f9 	movw	r1, #505	; 0x1f9
 800f548:	f00e ff4c 	bl	801e3e4 <__assert_func>
 800f54c:	2300      	movs	r3, #0
 800f54e:	9308      	str	r3, [sp, #32]
 800f550:	2301      	movs	r3, #1
 800f552:	9302      	str	r3, [sp, #8]
 800f554:	6803      	ldr	r3, [r0, #0]
 800f556:	f8bd 5000 	ldrh.w	r5, [sp]
 800f55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f55c:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800f560:	4798      	blx	r3
 800f562:	4632      	mov	r2, r6
 800f564:	4629      	mov	r1, r5
 800f566:	4603      	mov	r3, r0
 800f568:	4620      	mov	r0, r4
 800f56a:	f7ff ff67 	bl	800f43c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f56e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f570:	9305      	str	r3, [sp, #20]
 800f572:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f576:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f57a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f57e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f582:	4b11      	ldr	r3, [pc, #68]	; (800f5c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800f584:	9003      	str	r0, [sp, #12]
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f58c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f590:	f7fb fbb6 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f594:	6803      	ldr	r3, [r0, #0]
 800f596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f598:	4798      	blx	r3
 800f59a:	23ff      	movs	r3, #255	; 0xff
 800f59c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800f5a0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800f5a4:	6860      	ldr	r0, [r4, #4]
 800f5a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f5aa:	6803      	ldr	r3, [r0, #0]
 800f5ac:	a902      	add	r1, sp, #8
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	4798      	blx	r3
 800f5b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f5b4:	b00a      	add	sp, #40	; 0x28
 800f5b6:	bd70      	pop	{r4, r5, r6, pc}
 800f5b8:	2002ee77 	.word	0x2002ee77
 800f5bc:	080207d7 	.word	0x080207d7
 800f5c0:	08020b10 	.word	0x08020b10
 800f5c4:	0802088a 	.word	0x0802088a
 800f5c8:	2002ee72 	.word	0x2002ee72

0800f5cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5ce:	b08b      	sub	sp, #44	; 0x2c
 800f5d0:	466d      	mov	r5, sp
 800f5d2:	e885 0006 	stmia.w	r5, {r1, r2}
 800f5d6:	461d      	mov	r5, r3
 800f5d8:	2300      	movs	r3, #0
 800f5da:	9308      	str	r3, [sp, #32]
 800f5dc:	2301      	movs	r3, #1
 800f5de:	9302      	str	r3, [sp, #8]
 800f5e0:	6803      	ldr	r3, [r0, #0]
 800f5e2:	f8bd 6000 	ldrh.w	r6, [sp]
 800f5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	4798      	blx	r3
 800f5f0:	463a      	mov	r2, r7
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f7ff ff20 	bl	800f43c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f5fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f600:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f604:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f608:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f60c:	4b0e      	ldr	r3, [pc, #56]	; (800f648 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800f60e:	9003      	str	r0, [sp, #12]
 800f610:	881b      	ldrh	r3, [r3, #0]
 800f612:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f618:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f61c:	9505      	str	r5, [sp, #20]
 800f61e:	f7fb fb6f 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800f622:	6803      	ldr	r3, [r0, #0]
 800f624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f626:	4798      	blx	r3
 800f628:	23ff      	movs	r3, #255	; 0xff
 800f62a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800f62e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800f632:	6860      	ldr	r0, [r4, #4]
 800f634:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f638:	6803      	ldr	r3, [r0, #0]
 800f63a:	a902      	add	r1, sp, #8
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	4798      	blx	r3
 800f640:	4628      	mov	r0, r5
 800f642:	b00b      	add	sp, #44	; 0x2c
 800f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f646:	bf00      	nop
 800f648:	2002ee72 	.word	0x2002ee72

0800f64c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800f652:	4604      	mov	r4, r0
 800f654:	b19b      	cbz	r3, 800f67e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800f656:	2002      	movs	r0, #2
 800f658:	f7fd f9ca 	bl	800c9f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800f65c:	2300      	movs	r3, #0
 800f65e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800f662:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	4620      	mov	r0, r4
 800f66a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800f66e:	f7ff fd39 	bl	800f0e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f672:	462b      	mov	r3, r5
 800f674:	4601      	mov	r1, r0
 800f676:	4620      	mov	r0, r4
 800f678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f67c:	4718      	bx	r3
 800f67e:	bd70      	pop	{r4, r5, r6, pc}

0800f680 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800f680:	4770      	bx	lr

0800f682 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800f682:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800f686:	1a13      	subs	r3, r2, r0
 800f688:	4258      	negs	r0, r3
 800f68a:	4158      	adcs	r0, r3
 800f68c:	4770      	bx	lr

0800f68e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800f68e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800f692:	1a9b      	subs	r3, r3, r2
 800f694:	2b00      	cmp	r3, #0
 800f696:	bfdc      	itt	le
 800f698:	6882      	ldrle	r2, [r0, #8]
 800f69a:	189b      	addle	r3, r3, r2
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	bfcc      	ite	gt
 800f6a0:	2000      	movgt	r0, #0
 800f6a2:	2001      	movle	r0, #1
 800f6a4:	4770      	bx	lr

0800f6a6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800f6a6:	6902      	ldr	r2, [r0, #16]
 800f6a8:	6840      	ldr	r0, [r0, #4]
 800f6aa:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800f6ae:	4770      	bx	lr

0800f6b0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800f6b0:	6803      	ldr	r3, [r0, #0]
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	4718      	bx	r3

0800f6b6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800f6b6:	4770      	bx	lr

0800f6b8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800f6b8:	4770      	bx	lr
	...

0800f6bc <_ZN8touchgfx13DMA_Interface7executeEv>:
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	2301      	movs	r3, #1
 800f6c0:	7203      	strb	r3, [r0, #8]
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	6840      	ldr	r0, [r0, #4]
 800f6c6:	6803      	ldr	r3, [r0, #0]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	4798      	blx	r3
 800f6cc:	6803      	ldr	r3, [r0, #0]
 800f6ce:	2b08      	cmp	r3, #8
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	d01e      	beq.n	800f712 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 800f6d4:	d80b      	bhi.n	800f6ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d027      	beq.n	800f72a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800f6da:	2b04      	cmp	r3, #4
 800f6dc:	d011      	beq.n	800f702 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d028      	beq.n	800f734 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f6e2:	4b17      	ldr	r3, [pc, #92]	; (800f740 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800f6e4:	4a17      	ldr	r2, [pc, #92]	; (800f744 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800f6e6:	4818      	ldr	r0, [pc, #96]	; (800f748 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800f6e8:	218b      	movs	r1, #139	; 0x8b
 800f6ea:	f00e fe7b 	bl	801e3e4 <__assert_func>
 800f6ee:	2b40      	cmp	r3, #64	; 0x40
 800f6f0:	d020      	beq.n	800f734 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f6f2:	d801      	bhi.n	800f6f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	e7f3      	b.n	800f6e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800f6f8:	2b80      	cmp	r3, #128	; 0x80
 800f6fa:	d01b      	beq.n	800f734 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f700:	e7ee      	b.n	800f6e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	7f01      	ldrb	r1, [r0, #28]
 800f706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f708:	4620      	mov	r0, r4
 800f70a:	4798      	blx	r3
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f710:	e006      	b.n	800f720 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800f712:	6823      	ldr	r3, [r4, #0]
 800f714:	7f01      	ldrb	r1, [r0, #28]
 800f716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f718:	4620      	mov	r0, r4
 800f71a:	4798      	blx	r3
 800f71c:	6823      	ldr	r3, [r4, #0]
 800f71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f720:	4629      	mov	r1, r5
 800f722:	4620      	mov	r0, r4
 800f724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f728:	4718      	bx	r3
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	4620      	mov	r0, r4
 800f72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f730:	4798      	blx	r3
 800f732:	e7f3      	b.n	800f71c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 800f734:	6823      	ldr	r3, [r4, #0]
 800f736:	4620      	mov	r0, r4
 800f738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f73a:	4798      	blx	r3
 800f73c:	e7e6      	b.n	800f70c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 800f73e:	bf00      	nop
 800f740:	08020d61 	.word	0x08020d61
 800f744:	08020e70 	.word	0x08020e70
 800f748:	08020d86 	.word	0x08020d86

0800f74c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800f74c:	b570      	push	{r4, r5, r6, lr}
 800f74e:	4604      	mov	r4, r0
 800f750:	460e      	mov	r6, r1
 800f752:	6860      	ldr	r0, [r4, #4]
 800f754:	6803      	ldr	r3, [r0, #0]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	4798      	blx	r3
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d1f9      	bne.n	800f752 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800f75e:	4d0b      	ldr	r5, [pc, #44]	; (800f78c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 800f760:	6828      	ldr	r0, [r5, #0]
 800f762:	6803      	ldr	r3, [r0, #0]
 800f764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f766:	4798      	blx	r3
 800f768:	f7fd fc1c 	bl	800cfa4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800f76c:	6860      	ldr	r0, [r4, #4]
 800f76e:	6803      	ldr	r3, [r0, #0]
 800f770:	4631      	mov	r1, r6
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	4798      	blx	r3
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	4620      	mov	r0, r4
 800f77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77c:	4798      	blx	r3
 800f77e:	6828      	ldr	r0, [r5, #0]
 800f780:	6803      	ldr	r3, [r0, #0]
 800f782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f788:	4718      	bx	r3
 800f78a:	bf00      	nop
 800f78c:	2002ee78 	.word	0x2002ee78

0800f790 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800f790:	b508      	push	{r3, lr}
 800f792:	f7fd fbeb 	bl	800cf6c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f79a:	f7fd bbf5 	b.w	800cf88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f79e <_ZN8touchgfx13DMA_Interface5startEv>:
 800f79e:	b510      	push	{r4, lr}
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	6840      	ldr	r0, [r0, #4]
 800f7a4:	6803      	ldr	r3, [r0, #0]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4798      	blx	r3
 800f7aa:	b948      	cbnz	r0, 800f7c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f7ac:	7a63      	ldrb	r3, [r4, #9]
 800f7ae:	b13b      	cbz	r3, 800f7c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f7b0:	7a23      	ldrb	r3, [r4, #8]
 800f7b2:	b92b      	cbnz	r3, 800f7c0 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7be:	4718      	bx	r3
 800f7c0:	bd10      	pop	{r4, pc}
	...

0800f7c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800f7c4:	b510      	push	{r4, lr}
 800f7c6:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800f7ca:	1b12      	subs	r2, r2, r4
 800f7cc:	2a00      	cmp	r2, #0
 800f7ce:	bfdc      	itt	le
 800f7d0:	6883      	ldrle	r3, [r0, #8]
 800f7d2:	18d2      	addle	r2, r2, r3
 800f7d4:	2a01      	cmp	r2, #1
 800f7d6:	dd18      	ble.n	800f80a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800f7d8:	6843      	ldr	r3, [r0, #4]
 800f7da:	f101 021c 	add.w	r2, r1, #28
 800f7de:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800f7e2:	f851 4b04 	ldr.w	r4, [r1], #4
 800f7e6:	f843 4b04 	str.w	r4, [r3], #4
 800f7ea:	4291      	cmp	r1, r2
 800f7ec:	d1f9      	bne.n	800f7e2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800f7ee:	880a      	ldrh	r2, [r1, #0]
 800f7f0:	801a      	strh	r2, [r3, #0]
 800f7f2:	788a      	ldrb	r2, [r1, #2]
 800f7f4:	709a      	strb	r2, [r3, #2]
 800f7f6:	68c3      	ldr	r3, [r0, #12]
 800f7f8:	6882      	ldr	r2, [r0, #8]
 800f7fa:	f3bf 8f5b 	dmb	ish
 800f7fe:	3301      	adds	r3, #1
 800f800:	429a      	cmp	r2, r3
 800f802:	bfd8      	it	le
 800f804:	1a9b      	suble	r3, r3, r2
 800f806:	60c3      	str	r3, [r0, #12]
 800f808:	bd10      	pop	{r4, pc}
 800f80a:	4b03      	ldr	r3, [pc, #12]	; (800f818 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800f80c:	4a03      	ldr	r2, [pc, #12]	; (800f81c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800f80e:	4804      	ldr	r0, [pc, #16]	; (800f820 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800f810:	2139      	movs	r1, #57	; 0x39
 800f812:	f00e fde7 	bl	801e3e4 <__assert_func>
 800f816:	bf00      	nop
 800f818:	08020dac 	.word	0x08020dac
 800f81c:	08020ea0 	.word	0x08020ea0
 800f820:	08020d86 	.word	0x08020d86

0800f824 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800f824:	b510      	push	{r4, lr}
 800f826:	6803      	ldr	r3, [r0, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4604      	mov	r4, r0
 800f82c:	4798      	blx	r3
 800f82e:	b128      	cbz	r0, 800f83c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800f830:	4b07      	ldr	r3, [pc, #28]	; (800f850 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800f832:	4a08      	ldr	r2, [pc, #32]	; (800f854 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800f834:	4808      	ldr	r0, [pc, #32]	; (800f858 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800f836:	213f      	movs	r1, #63	; 0x3f
 800f838:	f00e fdd4 	bl	801e3e4 <__assert_func>
 800f83c:	6923      	ldr	r3, [r4, #16]
 800f83e:	68a2      	ldr	r2, [r4, #8]
 800f840:	f3bf 8f5b 	dmb	ish
 800f844:	3301      	adds	r3, #1
 800f846:	429a      	cmp	r2, r3
 800f848:	bfd8      	it	le
 800f84a:	1a9b      	suble	r3, r3, r2
 800f84c:	6123      	str	r3, [r4, #16]
 800f84e:	bd10      	pop	{r4, pc}
 800f850:	08020dcf 	.word	0x08020dcf
 800f854:	08020eee 	.word	0x08020eee
 800f858:	08020d86 	.word	0x08020d86

0800f85c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	4604      	mov	r4, r0
 800f860:	6840      	ldr	r0, [r0, #4]
 800f862:	6803      	ldr	r3, [r0, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4798      	blx	r3
 800f868:	4605      	mov	r5, r0
 800f86a:	b930      	cbnz	r0, 800f87a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f86c:	7a23      	ldrb	r3, [r4, #8]
 800f86e:	b123      	cbz	r3, 800f87a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f870:	6860      	ldr	r0, [r4, #4]
 800f872:	6803      	ldr	r3, [r0, #0]
 800f874:	695b      	ldr	r3, [r3, #20]
 800f876:	4798      	blx	r3
 800f878:	7225      	strb	r5, [r4, #8]
 800f87a:	6860      	ldr	r0, [r4, #4]
 800f87c:	6803      	ldr	r3, [r0, #0]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4798      	blx	r3
 800f882:	b928      	cbnz	r0, 800f890 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	4620      	mov	r0, r4
 800f888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f88e:	4718      	bx	r3
 800f890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f894:	f7fd bb92 	b.w	800cfbc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800f898 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800f898:	b510      	push	{r4, lr}
 800f89a:	4c04      	ldr	r4, [pc, #16]	; (800f8ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800f89c:	6082      	str	r2, [r0, #8]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	e9c0 4100 	strd	r4, r1, [r0]
 800f8a4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800f8a8:	bd10      	pop	{r4, pc}
 800f8aa:	bf00      	nop
 800f8ac:	08020e54 	.word	0x08020e54

0800f8b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800f8b0:	6840      	ldr	r0, [r0, #4]
 800f8b2:	6803      	ldr	r3, [r0, #0]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4718      	bx	r3

0800f8b8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800f8b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800f8bc:	4770      	bx	lr

0800f8be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800f8be:	b570      	push	{r4, r5, r6, lr}
 800f8c0:	790b      	ldrb	r3, [r1, #4]
 800f8c2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	bf0c      	ite	eq
 800f8ca:	2301      	moveq	r3, #1
 800f8cc:	2300      	movne	r3, #0
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	460e      	mov	r6, r1
 800f8d2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800f8d6:	d110      	bne.n	800f8fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800f8d8:	b185      	cbz	r5, 800f8fc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 800f8da:	7933      	ldrb	r3, [r6, #4]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d113      	bne.n	800f908 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f8e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f8e2:	b188      	cbz	r0, 800f908 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f8e4:	6803      	ldr	r3, [r0, #0]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	4798      	blx	r3
 800f8ea:	b168      	cbz	r0, 800f908 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f8ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f8ee:	6803      	ldr	r3, [r0, #0]
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	689b      	ldr	r3, [r3, #8]
 800f8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8f8:	4718      	bx	r3
 800f8fa:	b12d      	cbz	r5, 800f908 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	4620      	mov	r0, r4
 800f900:	695b      	ldr	r3, [r3, #20]
 800f902:	4798      	blx	r3
 800f904:	2d00      	cmp	r5, #0
 800f906:	d1e8      	bne.n	800f8da <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800f908:	bd70      	pop	{r4, r5, r6, pc}

0800f90a <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800f90a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f90e:	b133      	cbz	r3, 800f91e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800f910:	790b      	ldrb	r3, [r1, #4]
 800f912:	2b01      	cmp	r3, #1
 800f914:	bf01      	itttt	eq
 800f916:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800f918:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800f91a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800f91c:	8603      	strheq	r3, [r0, #48]	; 0x30
 800f91e:	f7ff bfce 	b.w	800f8be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
	...

0800f924 <_ZN8touchgfx12ToggleButtonC1Ev>:
 800f924:	2200      	movs	r2, #0
 800f926:	2101      	movs	r1, #1
 800f928:	8082      	strh	r2, [r0, #4]
 800f92a:	80c2      	strh	r2, [r0, #6]
 800f92c:	8102      	strh	r2, [r0, #8]
 800f92e:	8142      	strh	r2, [r0, #10]
 800f930:	8182      	strh	r2, [r0, #12]
 800f932:	81c2      	strh	r2, [r0, #14]
 800f934:	8202      	strh	r2, [r0, #16]
 800f936:	8242      	strh	r2, [r0, #18]
 800f938:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800f93c:	61c2      	str	r2, [r0, #28]
 800f93e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800f942:	6282      	str	r2, [r0, #40]	; 0x28
 800f944:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800f948:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800f94c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f950:	4903      	ldr	r1, [pc, #12]	; (800f960 <_ZN8touchgfx12ToggleButtonC1Ev+0x3c>)
 800f952:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800f954:	8602      	strh	r2, [r0, #48]	; 0x30
 800f956:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 800f95a:	6001      	str	r1, [r0, #0]
 800f95c:	8682      	strh	r2, [r0, #52]	; 0x34
 800f95e:	4770      	bx	lr
 800f960:	08020f94 	.word	0x08020f94

0800f964 <_ZNK8touchgfx9TypedText7getTextEv>:
 800f964:	b510      	push	{r4, lr}
 800f966:	4604      	mov	r4, r0
 800f968:	f7fa ff26 	bl	800a7b8 <_ZNK8touchgfx9TypedText11assertValidEv>
 800f96c:	4b03      	ldr	r3, [pc, #12]	; (800f97c <_ZNK8touchgfx9TypedText7getTextEv+0x18>)
 800f96e:	8821      	ldrh	r1, [r4, #0]
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f976:	f7fc bd57 	b.w	800c428 <_ZNK8touchgfx5Texts7getTextEt>
 800f97a:	bf00      	nop
 800f97c:	2002eef4 	.word	0x2002eef4

0800f980 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800f984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f988:	429a      	cmp	r2, r3
 800f98a:	4604      	mov	r4, r0
 800f98c:	d00c      	beq.n	800f9a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 800f98e:	f850 3b26 	ldr.w	r3, [r0], #38
 800f992:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800f994:	f7ff ffe6 	bl	800f964 <_ZNK8touchgfx9TypedText7getTextEv>
 800f998:	2300      	movs	r3, #0
 800f99a:	4601      	mov	r1, r0
 800f99c:	46ac      	mov	ip, r5
 800f99e:	4620      	mov	r0, r4
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9a6:	4760      	bx	ip
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	bd70      	pop	{r4, r5, r6, pc}

0800f9ac <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800f9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ae:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800f9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d016      	beq.n	800f9e6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 800f9b8:	f100 0426 	add.w	r4, r0, #38	; 0x26
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f7fa fec7 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800f9c2:	6803      	ldr	r3, [r0, #0]
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	69de      	ldr	r6, [r3, #28]
 800f9ca:	f7fa fedd 	bl	800a788 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f7ff ffc7 	bl	800f964 <_ZNK8touchgfx9TypedText7getTextEv>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	4602      	mov	r2, r0
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	4639      	mov	r1, r7
 800f9de:	4628      	mov	r0, r5
 800f9e0:	47b0      	blx	r6
 800f9e2:	b003      	add	sp, #12
 800f9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	e7fb      	b.n	800f9e2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0800f9ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800f9ea:	b40e      	push	{r1, r2, r3}
 800f9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800f9f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	b09b      	sub	sp, #108	; 0x6c
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	d03f      	beq.n	800fa7e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 800f9fe:	f100 0726 	add.w	r7, r0, #38	; 0x26
 800fa02:	ab22      	add	r3, sp, #136	; 0x88
 800fa04:	4638      	mov	r0, r7
 800fa06:	9303      	str	r3, [sp, #12]
 800fa08:	f7fa fea2 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800fa0c:	6803      	ldr	r3, [r0, #0]
 800fa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa10:	4680      	mov	r8, r0
 800fa12:	4798      	blx	r3
 800fa14:	b205      	sxth	r5, r0
 800fa16:	4606      	mov	r6, r0
 800fa18:	a804      	add	r0, sp, #16
 800fa1a:	f002 fd65 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 800fa1e:	f8d8 3000 	ldr.w	r3, [r8]
 800fa22:	4640      	mov	r0, r8
 800fa24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa26:	4798      	blx	r3
 800fa28:	9a03      	ldr	r2, [sp, #12]
 800fa2a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	a804      	add	r0, sp, #16
 800fa30:	f002 fd77 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800fa34:	4638      	mov	r0, r7
 800fa36:	f7fa fea7 	bl	800a788 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fa3a:	4680      	mov	r8, r0
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	f7fa fe87 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800fa42:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800fa46:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	4642      	mov	r2, r8
 800fa4e:	4603      	mov	r3, r0
 800fa50:	a804      	add	r0, sp, #16
 800fa52:	f000 fe1a 	bl	801068a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800fa56:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800fa5a:	18a9      	adds	r1, r5, r2
 800fa5c:	2900      	cmp	r1, #0
 800fa5e:	b203      	sxth	r3, r0
 800fa60:	dd0b      	ble.n	800fa7a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 800fa62:	3b01      	subs	r3, #1
 800fa64:	fb13 f302 	smulbb	r3, r3, r2
 800fa68:	fb16 3300 	smlabb	r3, r6, r0, r3
 800fa6c:	b21d      	sxth	r5, r3
 800fa6e:	4628      	mov	r0, r5
 800fa70:	b01b      	add	sp, #108	; 0x6c
 800fa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa76:	b003      	add	sp, #12
 800fa78:	4770      	bx	lr
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	dcf7      	bgt.n	800fa6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 800fa7e:	2500      	movs	r5, #0
 800fa80:	e7f5      	b.n	800fa6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0800fa84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800fa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa88:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 800fa8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa8e:	429e      	cmp	r6, r3
 800fa90:	b08d      	sub	sp, #52	; 0x34
 800fa92:	4604      	mov	r4, r0
 800fa94:	4688      	mov	r8, r1
 800fa96:	d04b      	beq.n	800fb30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 800fa98:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f7fa fe57 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800faa2:	4607      	mov	r7, r0
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d043      	beq.n	800fb30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 800faa8:	4628      	mov	r0, r5
 800faaa:	f7fa fe85 	bl	800a7b8 <_ZNK8touchgfx9TypedText11assertValidEv>
 800faae:	4b22      	ldr	r3, [pc, #136]	; (800fb38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 800fab0:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 800faba:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 800fabe:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800fac2:	4628      	mov	r0, r5
 800fac4:	785e      	ldrb	r6, [r3, #1]
 800fac6:	f7fa fe5f 	bl	800a788 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800faca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800facc:	9309      	str	r3, [sp, #36]	; 0x24
 800face:	4b1b      	ldr	r3, [pc, #108]	; (800fb3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 800fad0:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800fada:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fade:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800fae2:	9707      	str	r7, [sp, #28]
 800fae4:	f3c6 0601 	ubfx	r6, r6, #0, #2
 800fae8:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800faec:	f88d 6020 	strb.w	r6, [sp, #32]
 800faf0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800faf4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 800faf8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800fafc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800fb00:	b10a      	cbz	r2, 800fb06 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800fb02:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800fb04:	b906      	cbnz	r6, 800fb08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 800fb06:	689e      	ldr	r6, [r3, #8]
 800fb08:	af05      	add	r7, sp, #20
 800fb0a:	4621      	mov	r1, r4
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f001 feac 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7ff ff26 	bl	800f964 <_ZNK8touchgfx9TypedText7getTextEv>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb1e:	ab07      	add	r3, sp, #28
 800fb20:	9001      	str	r0, [sp, #4]
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	e897 0006 	ldmia.w	r7, {r1, r2}
 800fb28:	4643      	mov	r3, r8
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f000 fb78 	bl	8010220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800fb30:	b00d      	add	sp, #52	; 0x34
 800fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb36:	bf00      	nop
 800fb38:	2002eee8 	.word	0x2002eee8
 800fb3c:	2002ee78 	.word	0x2002ee78

0800fb40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800fb40:	b570      	push	{r4, r5, r6, lr}
 800fb42:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800fb44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	d021      	beq.n	800fb92 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 800fb4e:	6803      	ldr	r3, [r0, #0]
 800fb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb52:	4798      	blx	r3
 800fb54:	6823      	ldr	r3, [r4, #0]
 800fb56:	4605      	mov	r5, r0
 800fb58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	4798      	blx	r3
 800fb5e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800fb62:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	4606      	mov	r6, r0
 800fb6a:	b22d      	sxth	r5, r5
 800fb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6e:	d109      	bne.n	800fb84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 800fb70:	4629      	mov	r1, r5
 800fb72:	4620      	mov	r0, r4
 800fb74:	4798      	blx	r3
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb7a:	4631      	mov	r1, r6
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb82:	4718      	bx	r3
 800fb84:	4601      	mov	r1, r0
 800fb86:	4620      	mov	r0, r4
 800fb88:	4798      	blx	r3
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb90:	e7f4      	b.n	800fb7c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 800fb92:	bd70      	pop	{r4, r5, r6, pc}

0800fb94 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 800fb94:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800fb98:	84c1      	strh	r1, [r0, #38]	; 0x26
 800fb9a:	b922      	cbnz	r2, 800fba6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 800fb9c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800fba0:	b90b      	cbnz	r3, 800fba6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 800fba2:	f7ff bfcd 	b.w	800fb40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800fba6:	4770      	bx	lr

0800fba8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800fba8:	b538      	push	{r3, r4, r5, lr}
 800fbaa:	880b      	ldrh	r3, [r1, #0]
 800fbac:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800fbae:	4605      	mov	r5, r0
 800fbb0:	8813      	ldrh	r3, [r2, #0]
 800fbb2:	f825 3f30 	strh.w	r3, [r5, #48]!
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	4628      	mov	r0, r5
 800fbba:	f002 ff5b 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fbbe:	8120      	strh	r0, [r4, #8]
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	f002 ff91 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fbc6:	8160      	strh	r0, [r4, #10]
 800fbc8:	bd38      	pop	{r3, r4, r5, pc}

0800fbca <_ZNK8touchgfx6Button12getSolidRectEv>:
 800fbca:	b510      	push	{r4, lr}
 800fbcc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800fbd0:	2bff      	cmp	r3, #255	; 0xff
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	d006      	beq.n	800fbe4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	8003      	strh	r3, [r0, #0]
 800fbda:	8043      	strh	r3, [r0, #2]
 800fbdc:	8083      	strh	r3, [r0, #4]
 800fbde:	80c3      	strh	r3, [r0, #6]
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	bd10      	pop	{r4, pc}
 800fbe4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800fbe8:	b11b      	cbz	r3, 800fbf2 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800fbea:	3130      	adds	r1, #48	; 0x30
 800fbec:	f002 ffb6 	bl	8012b5c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fbf0:	e7f6      	b.n	800fbe0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800fbf2:	312e      	adds	r1, #46	; 0x2e
 800fbf4:	e7fa      	b.n	800fbec <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800fbf8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800fbf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbfc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800fc00:	b08b      	sub	sp, #44	; 0x2c
 800fc02:	4604      	mov	r4, r0
 800fc04:	4689      	mov	r9, r1
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d043      	beq.n	800fc92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 800fc0a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800fc0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc10:	a805      	add	r0, sp, #20
 800fc12:	f002 ff2f 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fc16:	4607      	mov	r7, r0
 800fc18:	fa0f f880 	sxth.w	r8, r0
 800fc1c:	a805      	add	r0, sp, #20
 800fc1e:	f002 ff63 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fc22:	f9b9 6000 	ldrsh.w	r6, [r9]
 800fc26:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800fc2a:	4432      	add	r2, r6
 800fc2c:	b292      	uxth	r2, r2
 800fc2e:	2300      	movs	r3, #0
 800fc30:	fa0f fe82 	sxth.w	lr, r2
 800fc34:	459e      	cmp	lr, r3
 800fc36:	fa0f fc80 	sxth.w	ip, r0
 800fc3a:	9306      	str	r3, [sp, #24]
 800fc3c:	dd2b      	ble.n	800fc96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800fc3e:	45b0      	cmp	r8, r6
 800fc40:	dd29      	ble.n	800fc96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800fc42:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800fc46:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800fc4a:	442b      	add	r3, r5
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	b219      	sxth	r1, r3
 800fc50:	2900      	cmp	r1, #0
 800fc52:	dd20      	ble.n	800fc96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800fc54:	45ac      	cmp	ip, r5
 800fc56:	dd1e      	ble.n	800fc96 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800fc58:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800fc5c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800fc60:	45f0      	cmp	r8, lr
 800fc62:	bfb8      	it	lt
 800fc64:	463a      	movlt	r2, r7
 800fc66:	458c      	cmp	ip, r1
 800fc68:	bfb8      	it	lt
 800fc6a:	4603      	movlt	r3, r0
 800fc6c:	1b92      	subs	r2, r2, r6
 800fc6e:	1b5b      	subs	r3, r3, r5
 800fc70:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fc74:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fc78:	f8ad 6018 	strh.w	r6, [sp, #24]
 800fc7c:	f8ad 501a 	strh.w	r5, [sp, #26]
 800fc80:	4b1d      	ldr	r3, [pc, #116]	; (800fcf8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	b953      	cbnz	r3, 800fc9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 800fc86:	4b1d      	ldr	r3, [pc, #116]	; (800fcfc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 800fc88:	4a1d      	ldr	r2, [pc, #116]	; (800fd00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800fc8a:	481e      	ldr	r0, [pc, #120]	; (800fd04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800fc8c:	21b8      	movs	r1, #184	; 0xb8
 800fc8e:	f00e fba9 	bl	801e3e4 <__assert_func>
 800fc92:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800fc94:	e7ba      	b.n	800fc0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800fc96:	2300      	movs	r3, #0
 800fc98:	9307      	str	r3, [sp, #28]
 800fc9a:	e7f1      	b.n	800fc80 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 800fc9c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800fca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d024      	beq.n	800fcf2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800fca8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800fcac:	b30b      	cbz	r3, 800fcf2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800fcae:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800fcb2:	b1f3      	cbz	r3, 800fcf2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	a908      	add	r1, sp, #32
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	4798      	blx	r3
 800fcc4:	4b10      	ldr	r3, [pc, #64]	; (800fd08 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fccc:	b10a      	cbz	r2, 800fcd2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800fcce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fcd0:	b900      	cbnz	r0, 800fcd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 800fcd2:	6898      	ldr	r0, [r3, #8]
 800fcd4:	6801      	ldr	r1, [r0, #0]
 800fcd6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800fcda:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800fcde:	2501      	movs	r5, #1
 800fce0:	9502      	str	r5, [sp, #8]
 800fce2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800fce6:	9401      	str	r4, [sp, #4]
 800fce8:	ac06      	add	r4, sp, #24
 800fcea:	9400      	str	r4, [sp, #0]
 800fcec:	68cc      	ldr	r4, [r1, #12]
 800fcee:	a905      	add	r1, sp, #20
 800fcf0:	47a0      	blx	r4
 800fcf2:	b00b      	add	sp, #44	; 0x2c
 800fcf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf8:	2002ef20 	.word	0x2002ef20
 800fcfc:	08021078 	.word	0x08021078
 800fd00:	0802114c 	.word	0x0802114c
 800fd04:	080210b4 	.word	0x080210b4
 800fd08:	2002ee78 	.word	0x2002ee78

0800fd0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 800fd0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fd10:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800fd12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd16:	429a      	cmp	r2, r3
 800fd18:	4604      	mov	r4, r0
 800fd1a:	d018      	beq.n	800fd4e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 800fd1c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800fd20:	4628      	mov	r0, r5
 800fd22:	f7fa fd15 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800fd26:	6803      	ldr	r3, [r0, #0]
 800fd28:	4606      	mov	r6, r0
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	69df      	ldr	r7, [r3, #28]
 800fd2e:	f7fa fd2b 	bl	800a788 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fd32:	4680      	mov	r8, r0
 800fd34:	4628      	mov	r0, r5
 800fd36:	f7ff fe15 	bl	800f964 <_ZNK8touchgfx9TypedText7getTextEv>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	4602      	mov	r2, r0
 800fd40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd42:	4641      	mov	r1, r8
 800fd44:	4630      	mov	r0, r6
 800fd46:	47b8      	blx	r7
 800fd48:	b002      	add	sp, #8
 800fd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4e:	2000      	movs	r0, #0
 800fd50:	e7fa      	b.n	800fd48 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0800fd52 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 800fd52:	b570      	push	{r4, r5, r6, lr}
 800fd54:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800fd56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	d00c      	beq.n	800fd7a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 800fd60:	f850 3b26 	ldr.w	r3, [r0], #38
 800fd64:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800fd66:	f7ff fdfd 	bl	800f964 <_ZNK8touchgfx9TypedText7getTextEv>
 800fd6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fd6c:	4601      	mov	r1, r0
 800fd6e:	46ac      	mov	ip, r5
 800fd70:	4620      	mov	r0, r4
 800fd72:	2300      	movs	r3, #0
 800fd74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd78:	4760      	bx	ip
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd80 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 800fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd84:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 800fd86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd8a:	429e      	cmp	r6, r3
 800fd8c:	b08d      	sub	sp, #52	; 0x34
 800fd8e:	4604      	mov	r4, r0
 800fd90:	460f      	mov	r7, r1
 800fd92:	d048      	beq.n	800fe26 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 800fd94:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800fd98:	4628      	mov	r0, r5
 800fd9a:	f7fa fcd9 	bl	800a750 <_ZNK8touchgfx9TypedText7getFontEv>
 800fd9e:	4680      	mov	r8, r0
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d040      	beq.n	800fe26 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 800fda4:	4628      	mov	r0, r5
 800fda6:	f7fa fd07 	bl	800a7b8 <_ZNK8touchgfx9TypedText11assertValidEv>
 800fdaa:	4b20      	ldr	r3, [pc, #128]	; (800fe2c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 800fdac:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 800fdb6:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 800fdba:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	785e      	ldrb	r6, [r3, #1]
 800fdc2:	f7fa fce1 	bl	800a788 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fdc6:	f3c6 0601 	ubfx	r6, r6, #0, #2
 800fdca:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800fdce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fdd0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800fdd4:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800fdda:	f8cd 801c 	str.w	r8, [sp, #28]
 800fdde:	f88d 6020 	strb.w	r6, [sp, #32]
 800fde2:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800fde6:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800fdea:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800fdee:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 800fdf2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800fdf6:	f7fa ff83 	bl	800ad00 <_ZN8touchgfx3HAL3lcdEv>
 800fdfa:	ae05      	add	r6, sp, #20
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	4680      	mov	r8, r0
 800fe00:	4630      	mov	r0, r6
 800fe02:	f001 fd32 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7ff fdac 	bl	800f964 <_ZNK8touchgfx9TypedText7getTextEv>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9303      	str	r3, [sp, #12]
 800fe10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe12:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800fe16:	ab07      	add	r3, sp, #28
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fe1e:	463b      	mov	r3, r7
 800fe20:	4640      	mov	r0, r8
 800fe22:	f000 f9fd 	bl	8010220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800fe26:	b00d      	add	sp, #52	; 0x34
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	2002eee8 	.word	0x2002eee8

0800fe30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	4605      	mov	r5, r0
 800fe34:	880b      	ldrh	r3, [r1, #0]
 800fe36:	84c3      	strh	r3, [r0, #38]	; 0x26
 800fe38:	f855 3b26 	ldr.w	r3, [r5], #38
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	4628      	mov	r0, r5
 800fe40:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800fe42:	f002 fe17 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fe46:	b201      	sxth	r1, r0
 800fe48:	4620      	mov	r0, r4
 800fe4a:	47b0      	blx	r6
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	4628      	mov	r0, r5
 800fe50:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800fe52:	f002 fe49 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fe56:	b201      	sxth	r1, r0
 800fe58:	4620      	mov	r0, r4
 800fe5a:	47b0      	blx	r6
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	f002 fed7 	bl	8012c10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800fe62:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800fe66:	bd70      	pop	{r4, r5, r6, pc}

0800fe68 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800fe6e:	2bff      	cmp	r3, #255	; 0xff
 800fe70:	4604      	mov	r4, r0
 800fe72:	d006      	beq.n	800fe82 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800fe74:	2300      	movs	r3, #0
 800fe76:	8003      	strh	r3, [r0, #0]
 800fe78:	8043      	strh	r3, [r0, #2]
 800fe7a:	8083      	strh	r3, [r0, #4]
 800fe7c:	80c3      	strh	r3, [r0, #6]
 800fe7e:	4620      	mov	r0, r4
 800fe80:	bd10      	pop	{r4, pc}
 800fe82:	3126      	adds	r1, #38	; 0x26
 800fe84:	f002 fe6a 	bl	8012b5c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fe88:	e7f9      	b.n	800fe7e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0800fe8c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe90:	4604      	mov	r4, r0
 800fe92:	b088      	sub	sp, #32
 800fe94:	f854 3b26 	ldr.w	r3, [r4], #38
 800fe98:	2500      	movs	r5, #0
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9c:	460f      	mov	r7, r1
 800fe9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fea2:	a904      	add	r1, sp, #16
 800fea4:	4606      	mov	r6, r0
 800fea6:	4798      	blx	r3
 800fea8:	4620      	mov	r0, r4
 800feaa:	f002 fde3 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800feae:	4680      	mov	r8, r0
 800feb0:	4620      	mov	r0, r4
 800feb2:	f002 fe19 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800feb6:	9506      	str	r5, [sp, #24]
 800feb8:	ad06      	add	r5, sp, #24
 800feba:	f8ad 001e 	strh.w	r0, [sp, #30]
 800febe:	4639      	mov	r1, r7
 800fec0:	4628      	mov	r0, r5
 800fec2:	f8ad 801c 	strh.w	r8, [sp, #28]
 800fec6:	f7fe fd31 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 800feca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800fece:	b1c3      	cbz	r3, 800ff02 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 800fed0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800fed4:	b1ab      	cbz	r3, 800ff02 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fede:	b10a      	cbz	r2, 800fee4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 800fee0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fee2:	b900      	cbnz	r0, 800fee6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 800fee4:	6898      	ldr	r0, [r3, #8]
 800fee6:	6801      	ldr	r1, [r0, #0]
 800fee8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800feec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800fef0:	2701      	movs	r7, #1
 800fef2:	9702      	str	r7, [sp, #8]
 800fef4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800fef8:	e9cd 5600 	strd	r5, r6, [sp]
 800fefc:	68cd      	ldr	r5, [r1, #12]
 800fefe:	4621      	mov	r1, r4
 800ff00:	47a8      	blx	r5
 800ff02:	b008      	add	sp, #32
 800ff04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff08:	2002ee78 	.word	0x2002ee78

0800ff0c <_ZN8touchgfx3LCD4initEv>:
 800ff0c:	4770      	bx	lr

0800ff0e <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800ff0e:	2000      	movs	r0, #0
 800ff10:	4770      	bx	lr

0800ff12 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800ff12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff16:	b091      	sub	sp, #68	; 0x44
 800ff18:	4699      	mov	r9, r3
 800ff1a:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 800ff1e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800ff20:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800ff24:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800ff28:	4680      	mov	r8, r0
 800ff2a:	4617      	mov	r7, r2
 800ff2c:	a80e      	add	r0, sp, #56	; 0x38
 800ff2e:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 800ff32:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800ff36:	2500      	movs	r5, #0
 800ff38:	910d      	str	r1, [sp, #52]	; 0x34
 800ff3a:	950e      	str	r5, [sp, #56]	; 0x38
 800ff3c:	f000 fe3e 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ff40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ff42:	f8d9 6000 	ldr.w	r6, [r9]
 800ff46:	6818      	ldr	r0, [r3, #0]
 800ff48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ff4a:	f9b4 b000 	ldrsh.w	fp, [r4]
 800ff4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff52:	eb02 0c06 	add.w	ip, r2, r6
 800ff56:	1b80      	subs	r0, r0, r6
 800ff58:	ebab 0e0c 	sub.w	lr, fp, ip
 800ff5c:	4570      	cmp	r0, lr
 800ff5e:	f340 80bd 	ble.w	80100dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800ff62:	88a1      	ldrh	r1, [r4, #4]
 800ff64:	4459      	add	r1, fp
 800ff66:	b209      	sxth	r1, r1
 800ff68:	458c      	cmp	ip, r1
 800ff6a:	f300 80b7 	bgt.w	80100dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800ff6e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800ff72:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 800ff76:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 800ff7a:	edd9 6a07 	vldr	s13, [r9, #28]
 800ff7e:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 800ff82:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 800ff86:	4283      	cmp	r3, r0
 800ff88:	bfa8      	it	ge
 800ff8a:	4603      	movge	r3, r0
 800ff8c:	ee07 3a90 	vmov	s15, r3
 800ff90:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ff94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ff98:	ee25 4a04 	vmul.f32	s8, s10, s8
 800ff9c:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ffa0:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ffa4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ffa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ffac:	45e3      	cmp	fp, ip
 800ffae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ffb2:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ffb6:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ffba:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ffbe:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ffc2:	f340 808e 	ble.w	80100e2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 800ffc6:	fb9e f5f3 	sdiv	r5, lr, r3
 800ffca:	ee07 5a10 	vmov	s14, r5
 800ffce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ffd2:	2d00      	cmp	r5, #0
 800ffd4:	fb03 e415 	mls	r4, r3, r5, lr
 800ffd8:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ffdc:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ffe0:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ffe4:	dd13      	ble.n	801000e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800ffe6:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ffea:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ffee:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff6:	bf18      	it	ne
 800fff8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800fffc:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010000:	bf08      	it	eq
 8010002:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010006:	ee61 1a87 	vmul.f32	s3, s3, s14
 801000a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801000e:	fb05 f703 	mul.w	r7, r5, r3
 8010012:	1bc0      	subs	r0, r0, r7
 8010014:	443e      	add	r6, r7
 8010016:	1997      	adds	r7, r2, r6
 8010018:	4407      	add	r7, r0
 801001a:	42b9      	cmp	r1, r7
 801001c:	bfbc      	itt	lt
 801001e:	1a88      	sublt	r0, r1, r2
 8010020:	1b80      	sublt	r0, r0, r6
 8010022:	2800      	cmp	r0, #0
 8010024:	dd5a      	ble.n	80100dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8010026:	fb90 f1f3 	sdiv	r1, r0, r3
 801002a:	fb03 0211 	mls	r2, r3, r1, r0
 801002e:	b90a      	cbnz	r2, 8010034 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 8010030:	3901      	subs	r1, #1
 8010032:	461a      	mov	r2, r3
 8010034:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010038:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801003c:	44a4      	add	ip, r4
 801003e:	fb03 c505 	mla	r5, r3, r5, ip
 8010042:	2900      	cmp	r1, #0
 8010044:	bfcc      	ite	gt
 8010046:	469e      	movgt	lr, r3
 8010048:	4696      	movle	lr, r2
 801004a:	eef0 6a42 	vmov.f32	s13, s4
 801004e:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8010052:	ee21 3a23 	vmul.f32	s6, s2, s7
 8010056:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801005a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801005e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010062:	eeb0 7a61 	vmov.f32	s14, s3
 8010066:	ee17 0a90 	vmov	r0, s15
 801006a:	ee73 7a42 	vsub.f32	s15, s6, s4
 801006e:	fb90 f6f3 	sdiv	r6, r0, r3
 8010072:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010076:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801007a:	ee17 0a90 	vmov	r0, s15
 801007e:	fb90 f7f3 	sdiv	r7, r0, r3
 8010082:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010086:	900c      	str	r0, [sp, #48]	; 0x30
 8010088:	f8d0 8000 	ldr.w	r8, [r0]
 801008c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801008e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010092:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8010096:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801009a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801009e:	f8cd a020 	str.w	sl, [sp, #32]
 80100a2:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80100a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80100a8:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80100ac:	9603      	str	r6, [sp, #12]
 80100ae:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80100b2:	ee16 0a90 	vmov	r0, s13
 80100b6:	fb07 0704 	mla	r7, r7, r4, r0
 80100ba:	ee17 0a10 	vmov	r0, s14
 80100be:	fb06 0604 	mla	r6, r6, r4, r0
 80100c2:	e9cd 3600 	strd	r3, r6, [sp]
 80100c6:	44ca      	add	sl, r9
 80100c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80100cc:	9506      	str	r5, [sp, #24]
 80100ce:	9702      	str	r7, [sp, #8]
 80100d0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80100d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80100d6:	ebae 0304 	sub.w	r3, lr, r4
 80100da:	47a8      	blx	r5
 80100dc:	b011      	add	sp, #68	; 0x44
 80100de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e2:	462c      	mov	r4, r5
 80100e4:	e797      	b.n	8010016 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

080100e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80100e6:	b570      	push	{r4, r5, r6, lr}
 80100e8:	4604      	mov	r4, r0
 80100ea:	2500      	movs	r5, #0
 80100ec:	7223      	strb	r3, [r4, #8]
 80100ee:	9804      	ldr	r0, [sp, #16]
 80100f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80100f4:	8025      	strh	r5, [r4, #0]
 80100f6:	6061      	str	r1, [r4, #4]
 80100f8:	7263      	strb	r3, [r4, #9]
 80100fa:	60e0      	str	r0, [r4, #12]
 80100fc:	8222      	strh	r2, [r4, #16]
 80100fe:	8265      	strh	r5, [r4, #18]
 8010100:	82a5      	strh	r5, [r4, #20]
 8010102:	82e5      	strh	r5, [r4, #22]
 8010104:	8325      	strh	r5, [r4, #24]
 8010106:	8365      	strh	r5, [r4, #26]
 8010108:	83a5      	strh	r5, [r4, #28]
 801010a:	77a5      	strb	r5, [r4, #30]
 801010c:	6803      	ldr	r3, [r0, #0]
 801010e:	695b      	ldr	r3, [r3, #20]
 8010110:	4798      	blx	r3
 8010112:	4606      	mov	r6, r0
 8010114:	b1f8      	cbz	r0, 8010156 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8010116:	68e0      	ldr	r0, [r4, #12]
 8010118:	6803      	ldr	r3, [r0, #0]
 801011a:	4631      	mov	r1, r6
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	4798      	blx	r3
 8010120:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8010124:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010128:	7a83      	ldrb	r3, [r0, #10]
 801012a:	4313      	orrs	r3, r2
 801012c:	83a3      	strh	r3, [r4, #28]
 801012e:	7a63      	ldrb	r3, [r4, #9]
 8010130:	2b04      	cmp	r3, #4
 8010132:	4605      	mov	r5, r0
 8010134:	d10f      	bne.n	8010156 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8010136:	68e0      	ldr	r0, [r4, #12]
 8010138:	6803      	ldr	r3, [r0, #0]
 801013a:	462a      	mov	r2, r5
 801013c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801013e:	4631      	mov	r1, r6
 8010140:	4798      	blx	r3
 8010142:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8010146:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801014a:	7aab      	ldrb	r3, [r5, #10]
 801014c:	4313      	orrs	r3, r2
 801014e:	4418      	add	r0, r3
 8010150:	8ba3      	ldrh	r3, [r4, #28]
 8010152:	4418      	add	r0, r3
 8010154:	83a0      	strh	r0, [r4, #28]
 8010156:	4620      	mov	r0, r4
 8010158:	bd70      	pop	{r4, r5, r6, pc}

0801015a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801015a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015e:	2400      	movs	r4, #0
 8010160:	b085      	sub	sp, #20
 8010162:	4681      	mov	r9, r0
 8010164:	460f      	mov	r7, r1
 8010166:	4692      	mov	sl, r2
 8010168:	469b      	mov	fp, r3
 801016a:	46a0      	mov	r8, r4
 801016c:	4626      	mov	r6, r4
 801016e:	4554      	cmp	r4, sl
 8010170:	da21      	bge.n	80101b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8010172:	2300      	movs	r3, #0
 8010174:	9303      	str	r3, [sp, #12]
 8010176:	463a      	mov	r2, r7
 8010178:	ab03      	add	r3, sp, #12
 801017a:	4659      	mov	r1, fp
 801017c:	4648      	mov	r0, r9
 801017e:	f002 fb35 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010182:	4605      	mov	r5, r0
 8010184:	b1b8      	cbz	r0, 80101b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8010186:	280a      	cmp	r0, #10
 8010188:	d015      	beq.n	80101b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801018a:	9a03      	ldr	r2, [sp, #12]
 801018c:	b182      	cbz	r2, 80101b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801018e:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8010192:	7a93      	ldrb	r3, [r2, #10]
 8010194:	8895      	ldrh	r5, [r2, #4]
 8010196:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801019a:	4303      	orrs	r3, r0
 801019c:	9301      	str	r3, [sp, #4]
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	4641      	mov	r1, r8
 80101a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a4:	4638      	mov	r0, r7
 80101a6:	4798      	blx	r3
 80101a8:	9b01      	ldr	r3, [sp, #4]
 80101aa:	4418      	add	r0, r3
 80101ac:	4406      	add	r6, r0
 80101ae:	b2b6      	uxth	r6, r6
 80101b0:	3401      	adds	r4, #1
 80101b2:	46a8      	mov	r8, r5
 80101b4:	e7db      	b.n	801016e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80101b6:	4630      	mov	r0, r6
 80101b8:	b005      	add	sp, #20
 80101ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80101be:	2a02      	cmp	r2, #2
 80101c0:	b530      	push	{r4, r5, lr}
 80101c2:	d011      	beq.n	80101e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80101c4:	2a03      	cmp	r2, #3
 80101c6:	d01c      	beq.n	8010202 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80101c8:	2a01      	cmp	r2, #1
 80101ca:	d10c      	bne.n	80101e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80101cc:	888b      	ldrh	r3, [r1, #4]
 80101ce:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80101d2:	8801      	ldrh	r1, [r0, #0]
 80101d4:	8844      	ldrh	r4, [r0, #2]
 80101d6:	8004      	strh	r4, [r0, #0]
 80101d8:	1a9b      	subs	r3, r3, r2
 80101da:	1a5b      	subs	r3, r3, r1
 80101dc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80101e0:	8043      	strh	r3, [r0, #2]
 80101e2:	8081      	strh	r1, [r0, #4]
 80101e4:	80c2      	strh	r2, [r0, #6]
 80101e6:	bd30      	pop	{r4, r5, pc}
 80101e8:	88cb      	ldrh	r3, [r1, #6]
 80101ea:	88c2      	ldrh	r2, [r0, #6]
 80101ec:	1a9b      	subs	r3, r3, r2
 80101ee:	8842      	ldrh	r2, [r0, #2]
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	888a      	ldrh	r2, [r1, #4]
 80101f4:	8881      	ldrh	r1, [r0, #4]
 80101f6:	8043      	strh	r3, [r0, #2]
 80101f8:	1a52      	subs	r2, r2, r1
 80101fa:	8801      	ldrh	r1, [r0, #0]
 80101fc:	1a52      	subs	r2, r2, r1
 80101fe:	8002      	strh	r2, [r0, #0]
 8010200:	e7f1      	b.n	80101e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010202:	88cb      	ldrh	r3, [r1, #6]
 8010204:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010208:	8841      	ldrh	r1, [r0, #2]
 801020a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801020e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010212:	8045      	strh	r5, [r0, #2]
 8010214:	1a9b      	subs	r3, r3, r2
 8010216:	1a5b      	subs	r3, r3, r1
 8010218:	8003      	strh	r3, [r0, #0]
 801021a:	8082      	strh	r2, [r0, #4]
 801021c:	80c4      	strh	r4, [r0, #6]
 801021e:	e7e2      	b.n	80101e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08010220 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	ac02      	add	r4, sp, #8
 8010226:	e884 0006 	stmia.w	r4, {r1, r2}
 801022a:	461a      	mov	r2, r3
 801022c:	ab0c      	add	r3, sp, #48	; 0x30
 801022e:	9305      	str	r3, [sp, #20]
 8010230:	4b0a      	ldr	r3, [pc, #40]	; (801025c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8010232:	685d      	ldr	r5, [r3, #4]
 8010234:	1069      	asrs	r1, r5, #1
 8010236:	07ed      	lsls	r5, r5, #31
 8010238:	bf4c      	ite	mi
 801023a:	681b      	ldrmi	r3, [r3, #0]
 801023c:	681d      	ldrpl	r5, [r3, #0]
 801023e:	eb00 0601 	add.w	r6, r0, r1
 8010242:	bf44      	itt	mi
 8010244:	5841      	ldrmi	r1, [r0, r1]
 8010246:	58cd      	ldrmi	r5, [r1, r3]
 8010248:	9b05      	ldr	r3, [sp, #20]
 801024a:	9301      	str	r3, [sp, #4]
 801024c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	4621      	mov	r1, r4
 8010252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010254:	4630      	mov	r0, r6
 8010256:	47a8      	blx	r5
 8010258:	b006      	add	sp, #24
 801025a:	bd70      	pop	{r4, r5, r6, pc}
 801025c:	20000084 	.word	0x20000084

08010260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8010260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010264:	b09d      	sub	sp, #116	; 0x74
 8010266:	9114      	str	r1, [sp, #80]	; 0x50
 8010268:	9315      	str	r3, [sp, #84]	; 0x54
 801026a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801026c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801026e:	8809      	ldrh	r1, [r1, #0]
 8010270:	889b      	ldrh	r3, [r3, #4]
 8010272:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8010274:	9210      	str	r2, [sp, #64]	; 0x40
 8010276:	440b      	add	r3, r1
 8010278:	b21b      	sxth	r3, r3
 801027a:	930e      	str	r3, [sp, #56]	; 0x38
 801027c:	6833      	ldr	r3, [r6, #0]
 801027e:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8010282:	7a59      	ldrb	r1, [r3, #9]
 8010284:	7a1b      	ldrb	r3, [r3, #8]
 8010286:	9312      	str	r3, [sp, #72]	; 0x48
 8010288:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801028a:	900f      	str	r0, [sp, #60]	; 0x3c
 801028c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8010290:	9113      	str	r1, [sp, #76]	; 0x4c
 8010292:	f9b3 4000 	ldrsh.w	r4, [r3]
 8010296:	2a00      	cmp	r2, #0
 8010298:	d059      	beq.n	801034e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801029a:	7c33      	ldrb	r3, [r6, #16]
 801029c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801029e:	2b04      	cmp	r3, #4
 80102a0:	bf14      	ite	ne
 80102a2:	2301      	movne	r3, #1
 80102a4:	2302      	moveq	r3, #2
 80102a6:	4413      	add	r3, r2
 80102a8:	f04f 0800 	mov.w	r8, #0
 80102ac:	930d      	str	r3, [sp, #52]	; 0x34
 80102ae:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80102b2:	4645      	mov	r5, r8
 80102b4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80102b8:	4293      	cmp	r3, r2
 80102ba:	da75      	bge.n	80103a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80102bc:	2300      	movs	r3, #0
 80102be:	931a      	str	r3, [sp, #104]	; 0x68
 80102c0:	992b      	ldr	r1, [sp, #172]	; 0xac
 80102c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102c4:	6832      	ldr	r2, [r6, #0]
 80102c6:	428b      	cmp	r3, r1
 80102c8:	db43      	blt.n	8010352 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80102ca:	6813      	ldr	r3, [r2, #0]
 80102cc:	4610      	mov	r0, r2
 80102ce:	695b      	ldr	r3, [r3, #20]
 80102d0:	4798      	blx	r3
 80102d2:	4681      	mov	r9, r0
 80102d4:	6830      	ldr	r0, [r6, #0]
 80102d6:	6803      	ldr	r3, [r0, #0]
 80102d8:	aa1b      	add	r2, sp, #108	; 0x6c
 80102da:	689f      	ldr	r7, [r3, #8]
 80102dc:	4649      	mov	r1, r9
 80102de:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80102e2:	47b8      	blx	r7
 80102e4:	901a      	str	r0, [sp, #104]	; 0x68
 80102e6:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80102ea:	45d1      	cmp	r9, sl
 80102ec:	d045      	beq.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80102ee:	f242 070b 	movw	r7, #8203	; 0x200b
 80102f2:	45b9      	cmp	r9, r7
 80102f4:	d041      	beq.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80102f6:	f1b9 0f00 	cmp.w	r9, #0
 80102fa:	f000 80ef 	beq.w	80104dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 80102fe:	f1b9 0f0a 	cmp.w	r9, #10
 8010302:	d057      	beq.n	80103b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8010304:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010306:	b383      	cbz	r3, 801036a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8010308:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801030c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801030e:	2a00      	cmp	r2, #0
 8010310:	f000 80d3 	beq.w	80104ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25a>
 8010314:	f1bb 0f00 	cmp.w	fp, #0
 8010318:	d100      	bne.n	801031c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801031a:	4444      	add	r4, r8
 801031c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8010320:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8010324:	f892 800a 	ldrb.w	r8, [r2, #10]
 8010328:	f1bb 0f01 	cmp.w	fp, #1
 801032c:	ea48 0803 	orr.w	r8, r8, r3
 8010330:	d128      	bne.n	8010384 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8010332:	eba4 0408 	sub.w	r4, r4, r8
 8010336:	2d00      	cmp	r5, #0
 8010338:	d143      	bne.n	80103c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801033a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801033c:	eb08 0304 	add.w	r3, r8, r4
 8010340:	4413      	add	r3, r2
 8010342:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010344:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010348:	4293      	cmp	r3, r2
 801034a:	da44      	bge.n	80103d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801034c:	e02b      	b.n	80103a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801034e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8010350:	e7aa      	b.n	80102a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8010352:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	ab1b      	add	r3, sp, #108	; 0x6c
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4659      	mov	r1, fp
 801035e:	ab1a      	add	r3, sp, #104	; 0x68
 8010360:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8010362:	f002 fa77 	bl	8012854 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8010366:	4681      	mov	r9, r0
 8010368:	e7bd      	b.n	80102e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801036a:	6830      	ldr	r0, [r6, #0]
 801036c:	6803      	ldr	r3, [r0, #0]
 801036e:	691b      	ldr	r3, [r3, #16]
 8010370:	4798      	blx	r3
 8010372:	4550      	cmp	r0, sl
 8010374:	d001      	beq.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8010376:	42b8      	cmp	r0, r7
 8010378:	d1c8      	bne.n	801030c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801037a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801037c:	3301      	adds	r3, #1
 801037e:	930c      	str	r3, [sp, #48]	; 0x30
 8010380:	464d      	mov	r5, r9
 8010382:	e797      	b.n	80102b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8010384:	2d00      	cmp	r5, #0
 8010386:	f000 80ab 	beq.w	80104e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x280>
 801038a:	f1bb 0f00 	cmp.w	fp, #0
 801038e:	d118      	bne.n	80103c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8010390:	6830      	ldr	r0, [r6, #0]
 8010392:	6803      	ldr	r3, [r0, #0]
 8010394:	4629      	mov	r1, r5
 8010396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010398:	4798      	blx	r3
 801039a:	4404      	add	r4, r0
 801039c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801039e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103a0:	1ae3      	subs	r3, r4, r3
 80103a2:	4293      	cmp	r3, r2
 80103a4:	dd17      	ble.n	80103d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80103a6:	464d      	mov	r5, r9
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	f000 8097 	beq.w	80104dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 80103ae:	2d0a      	cmp	r5, #10
 80103b0:	f040 8085 	bne.w	80104be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 80103b4:	250a      	movs	r5, #10
 80103b6:	fab5 f085 	clz	r0, r5
 80103ba:	0940      	lsrs	r0, r0, #5
 80103bc:	b01d      	add	sp, #116	; 0x74
 80103be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c2:	6830      	ldr	r0, [r6, #0]
 80103c4:	6803      	ldr	r3, [r0, #0]
 80103c6:	4629      	mov	r1, r5
 80103c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ca:	4798      	blx	r3
 80103cc:	f1bb 0f01 	cmp.w	fp, #1
 80103d0:	eba4 0400 	sub.w	r4, r4, r0
 80103d4:	d0b1      	beq.n	801033a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80103d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80103d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80103da:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80103de:	f9b3 5000 	ldrsh.w	r5, [r3]
 80103e2:	7b43      	ldrb	r3, [r0, #13]
 80103e4:	015b      	lsls	r3, r3, #5
 80103e6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80103ea:	7983      	ldrb	r3, [r0, #6]
 80103ec:	4421      	add	r1, r4
 80103ee:	4313      	orrs	r3, r2
 80103f0:	440b      	add	r3, r1
 80103f2:	42ab      	cmp	r3, r5
 80103f4:	dbc1      	blt.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80103f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103f8:	4299      	cmp	r1, r3
 80103fa:	dabe      	bge.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80103fc:	6830      	ldr	r0, [r6, #0]
 80103fe:	6803      	ldr	r3, [r0, #0]
 8010400:	42a5      	cmp	r5, r4
 8010402:	bfc8      	it	gt
 8010404:	1b2d      	subgt	r5, r5, r4
 8010406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010408:	bfcc      	ite	gt
 801040a:	b2ad      	uxthgt	r5, r5
 801040c:	2500      	movle	r5, #0
 801040e:	4798      	blx	r3
 8010410:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010412:	4936      	ldr	r1, [pc, #216]	; (80104ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>)
 8010414:	7b5a      	ldrb	r2, [r3, #13]
 8010416:	f893 e008 	ldrb.w	lr, [r3, #8]
 801041a:	f012 0f40 	tst.w	r2, #64	; 0x40
 801041e:	bf18      	it	ne
 8010420:	468c      	movne	ip, r1
 8010422:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010424:	4408      	add	r0, r1
 8010426:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 801042a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801042e:	bf08      	it	eq
 8010430:	f04f 0c00 	moveq.w	ip, #0
 8010434:	ea41 070e 	orr.w	r7, r1, lr
 8010438:	ea4c 0707 	orr.w	r7, ip, r7
 801043c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801043e:	1bc7      	subs	r7, r0, r7
 8010440:	b2bf      	uxth	r7, r7
 8010442:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8010446:	fa0f fa87 	sxth.w	sl, r7
 801044a:	4551      	cmp	r1, sl
 801044c:	dd33      	ble.n	80104b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x256>
 801044e:	0112      	lsls	r2, r2, #4
 8010450:	79d8      	ldrb	r0, [r3, #7]
 8010452:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010456:	4302      	orrs	r2, r0
 8010458:	4492      	add	sl, r2
 801045a:	4551      	cmp	r1, sl
 801045c:	dc8d      	bgt.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801045e:	1bcf      	subs	r7, r1, r7
 8010460:	b2bf      	uxth	r7, r7
 8010462:	468a      	mov	sl, r1
 8010464:	9317      	str	r3, [sp, #92]	; 0x5c
 8010466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010468:	6830      	ldr	r0, [r6, #0]
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	6801      	ldr	r1, [r0, #0]
 801046e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8010470:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010472:	9311      	str	r3, [sp, #68]	; 0x44
 8010474:	9216      	str	r2, [sp, #88]	; 0x58
 8010476:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8010478:	4788      	blx	r1
 801047a:	79b1      	ldrb	r1, [r6, #6]
 801047c:	910b      	str	r1, [sp, #44]	; 0x2c
 801047e:	7bb1      	ldrb	r1, [r6, #14]
 8010480:	910a      	str	r1, [sp, #40]	; 0x28
 8010482:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8010486:	9109      	str	r1, [sp, #36]	; 0x24
 8010488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801048a:	68b1      	ldr	r1, [r6, #8]
 801048c:	9305      	str	r3, [sp, #20]
 801048e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010490:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010492:	9206      	str	r2, [sp, #24]
 8010494:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8010498:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801049c:	e9cd a501 	strd	sl, r5, [sp, #4]
 80104a0:	4425      	add	r5, r4
 80104a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104a4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80104a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80104a8:	b22d      	sxth	r5, r5
 80104aa:	9500      	str	r5, [sp, #0]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	47a8      	blx	r5
 80104b4:	e761      	b.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80104b6:	2700      	movs	r7, #0
 80104b8:	e7d4      	b.n	8010464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 80104ba:	4690      	mov	r8, r2
 80104bc:	e75d      	b.n	801037a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80104be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80104c0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80104c2:	3401      	adds	r4, #1
 80104c4:	429c      	cmp	r4, r3
 80104c6:	f6bf af76 	bge.w	80103b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80104ca:	4659      	mov	r1, fp
 80104cc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80104ce:	f002 f94d 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80104d2:	4605      	mov	r5, r0
 80104d4:	b110      	cbz	r0, 80104dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 80104d6:	280a      	cmp	r0, #10
 80104d8:	d1f2      	bne.n	80104c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x260>
 80104da:	e76b      	b.n	80103b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80104dc:	2500      	movs	r5, #0
 80104de:	e76a      	b.n	80103b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80104e0:	f1bb 0f00 	cmp.w	fp, #0
 80104e4:	f43f af5a 	beq.w	801039c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 80104e8:	e775      	b.n	80103d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80104ea:	bf00      	nop
 80104ec:	fffffe00 	.word	0xfffffe00

080104f0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80104f0:	b530      	push	{r4, r5, lr}
 80104f2:	8a44      	ldrh	r4, [r0, #18]
 80104f4:	8ac5      	ldrh	r5, [r0, #22]
 80104f6:	82c3      	strh	r3, [r0, #22]
 80104f8:	442c      	add	r4, r5
 80104fa:	1ae4      	subs	r4, r4, r3
 80104fc:	8244      	strh	r4, [r0, #18]
 80104fe:	8b03      	ldrh	r3, [r0, #24]
 8010500:	8a84      	ldrh	r4, [r0, #20]
 8010502:	4422      	add	r2, r4
 8010504:	440c      	add	r4, r1
 8010506:	1a59      	subs	r1, r3, r1
 8010508:	8342      	strh	r2, [r0, #26]
 801050a:	8284      	strh	r4, [r0, #20]
 801050c:	8301      	strh	r1, [r0, #24]
 801050e:	bd30      	pop	{r4, r5, pc}

08010510 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8010510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	7a45      	ldrb	r5, [r0, #9]
 8010516:	1eeb      	subs	r3, r5, #3
 8010518:	b085      	sub	sp, #20
 801051a:	4604      	mov	r4, r0
 801051c:	b2db      	uxtb	r3, r3
 801051e:	4689      	mov	r9, r1
 8010520:	b329      	cbz	r1, 801056e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8010522:	2b01      	cmp	r3, #1
 8010524:	d921      	bls.n	801056a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8010526:	1e69      	subs	r1, r5, #1
 8010528:	f1d1 0b00 	rsbs	fp, r1, #0
 801052c:	eb4b 0b01 	adc.w	fp, fp, r1
 8010530:	1eaa      	subs	r2, r5, #2
 8010532:	4253      	negs	r3, r2
 8010534:	4153      	adcs	r3, r2
 8010536:	2500      	movs	r5, #0
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	9500      	str	r5, [sp, #0]
 801053c:	2600      	movs	r6, #0
 801053e:	8266      	strh	r6, [r4, #18]
 8010540:	82a6      	strh	r6, [r4, #20]
 8010542:	f242 080b 	movw	r8, #8203	; 0x200b
 8010546:	2300      	movs	r3, #0
 8010548:	9303      	str	r3, [sp, #12]
 801054a:	68e2      	ldr	r2, [r4, #12]
 801054c:	7a21      	ldrb	r1, [r4, #8]
 801054e:	6860      	ldr	r0, [r4, #4]
 8010550:	8827      	ldrh	r7, [r4, #0]
 8010552:	ab03      	add	r3, sp, #12
 8010554:	f002 f94a 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010558:	8020      	strh	r0, [r4, #0]
 801055a:	b9b0      	cbnz	r0, 801058a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801055c:	8b22      	ldrh	r2, [r4, #24]
 801055e:	2300      	movs	r3, #0
 8010560:	4611      	mov	r1, r2
 8010562:	4620      	mov	r0, r4
 8010564:	f7ff ffc4 	bl	80104f0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010568:	e062      	b.n	8010630 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801056a:	468b      	mov	fp, r1
 801056c:	e7e0      	b.n	8010530 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801056e:	2b01      	cmp	r3, #1
 8010570:	f105 35ff 	add.w	r5, r5, #4294967295
 8010574:	bf8c      	ite	hi
 8010576:	2300      	movhi	r3, #0
 8010578:	2301      	movls	r3, #1
 801057a:	2d01      	cmp	r5, #1
 801057c:	9300      	str	r3, [sp, #0]
 801057e:	bf8c      	ite	hi
 8010580:	2500      	movhi	r5, #0
 8010582:	2501      	movls	r5, #1
 8010584:	9101      	str	r1, [sp, #4]
 8010586:	468b      	mov	fp, r1
 8010588:	e7d8      	b.n	801053c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801058a:	8ae3      	ldrh	r3, [r4, #22]
 801058c:	280a      	cmp	r0, #10
 801058e:	f103 0301 	add.w	r3, r3, #1
 8010592:	82e3      	strh	r3, [r4, #22]
 8010594:	d0e2      	beq.n	801055c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8010596:	9a03      	ldr	r2, [sp, #12]
 8010598:	b972      	cbnz	r2, 80105b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801059a:	4540      	cmp	r0, r8
 801059c:	d1d3      	bne.n	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801059e:	8823      	ldrh	r3, [r4, #0]
 80105a0:	8b21      	ldrh	r1, [r4, #24]
 80105a2:	2b20      	cmp	r3, #32
 80105a4:	d001      	beq.n	80105aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80105a6:	4543      	cmp	r3, r8
 80105a8:	d11d      	bne.n	80105e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80105aa:	2f20      	cmp	r7, #32
 80105ac:	d002      	beq.n	80105b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80105ae:	4547      	cmp	r7, r8
 80105b0:	bf18      	it	ne
 80105b2:	460e      	movne	r6, r1
 80105b4:	2001      	movs	r0, #1
 80105b6:	e017      	b.n	80105e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80105b8:	4540      	cmp	r0, r8
 80105ba:	d012      	beq.n	80105e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80105bc:	8893      	ldrh	r3, [r2, #4]
 80105be:	8023      	strh	r3, [r4, #0]
 80105c0:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80105c4:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80105c8:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80105cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80105d0:	68e0      	ldr	r0, [r4, #12]
 80105d2:	6803      	ldr	r3, [r0, #0]
 80105d4:	4639      	mov	r1, r7
 80105d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105d8:	4798      	blx	r3
 80105da:	eb0a 0200 	add.w	r2, sl, r0
 80105de:	b292      	uxth	r2, r2
 80105e0:	e7dd      	b.n	801059e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80105e2:	2200      	movs	r2, #0
 80105e4:	e7db      	b.n	801059e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80105e6:	2000      	movs	r0, #0
 80105e8:	440a      	add	r2, r1
 80105ea:	8aa3      	ldrh	r3, [r4, #20]
 80105ec:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80105f0:	b292      	uxth	r2, r2
 80105f2:	8322      	strh	r2, [r4, #24]
 80105f4:	4413      	add	r3, r2
 80105f6:	f1b9 0f00 	cmp.w	r9, #0
 80105fa:	d022      	beq.n	8010642 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 80105fc:	f1bb 0f00 	cmp.w	fp, #0
 8010600:	d102      	bne.n	8010608 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8010602:	9901      	ldr	r1, [sp, #4]
 8010604:	b149      	cbz	r1, 801061a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8010606:	b140      	cbz	r0, 801061a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8010608:	8ba1      	ldrh	r1, [r4, #28]
 801060a:	4419      	add	r1, r3
 801060c:	458c      	cmp	ip, r1
 801060e:	da12      	bge.n	8010636 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8010610:	8a61      	ldrh	r1, [r4, #18]
 8010612:	b181      	cbz	r1, 8010636 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8010614:	4563      	cmp	r3, ip
 8010616:	dd96      	ble.n	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8010618:	e004      	b.n	8010624 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801061a:	4563      	cmp	r3, ip
 801061c:	dd93      	ble.n	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801061e:	8a63      	ldrh	r3, [r4, #18]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d090      	beq.n	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8010624:	2301      	movs	r3, #1
 8010626:	77a3      	strb	r3, [r4, #30]
 8010628:	8ba2      	ldrh	r2, [r4, #28]
 801062a:	8b63      	ldrh	r3, [r4, #26]
 801062c:	4413      	add	r3, r2
 801062e:	8363      	strh	r3, [r4, #26]
 8010630:	b005      	add	sp, #20
 8010632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010636:	2300      	movs	r3, #0
 8010638:	4611      	mov	r1, r2
 801063a:	4620      	mov	r0, r4
 801063c:	f7ff ff58 	bl	80104f0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010640:	e781      	b.n	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8010642:	4563      	cmp	r3, ip
 8010644:	dd16      	ble.n	8010674 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	b113      	cbz	r3, 8010650 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801064a:	2301      	movs	r3, #1
 801064c:	460a      	mov	r2, r1
 801064e:	e787      	b.n	8010560 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8010650:	2d00      	cmp	r5, #0
 8010652:	f43f af78 	beq.w	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8010656:	2800      	cmp	r0, #0
 8010658:	f47f af75 	bne.w	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801065c:	2f20      	cmp	r7, #32
 801065e:	d001      	beq.n	8010664 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8010660:	4547      	cmp	r7, r8
 8010662:	d102      	bne.n	801066a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8010664:	2301      	movs	r3, #1
 8010666:	4632      	mov	r2, r6
 8010668:	e77b      	b.n	8010562 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801066a:	8a63      	ldrh	r3, [r4, #18]
 801066c:	2b00      	cmp	r3, #0
 801066e:	f43f af6a 	beq.w	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8010672:	e7dd      	b.n	8010630 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8010674:	2800      	cmp	r0, #0
 8010676:	f47f af66 	bne.w	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801067a:	2f20      	cmp	r7, #32
 801067c:	d002      	beq.n	8010684 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801067e:	4547      	cmp	r7, r8
 8010680:	f47f af61 	bne.w	8010546 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8010684:	2301      	movs	r3, #1
 8010686:	4632      	mov	r2, r6
 8010688:	e7d7      	b.n	801063a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801068a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801068a:	b570      	push	{r4, r5, r6, lr}
 801068c:	4606      	mov	r6, r0
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	4615      	mov	r5, r2
 8010692:	b191      	cbz	r1, 80106ba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8010694:	e9cd 3100 	strd	r3, r1, [sp]
 8010698:	4613      	mov	r3, r2
 801069a:	4601      	mov	r1, r0
 801069c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80106a0:	a802      	add	r0, sp, #8
 80106a2:	f7ff fd20 	bl	80100e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80106a6:	2401      	movs	r4, #1
 80106a8:	2100      	movs	r1, #0
 80106aa:	a802      	add	r0, sp, #8
 80106ac:	f7ff ff30 	bl	8010510 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80106b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80106b4:	b173      	cbz	r3, 80106d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80106b6:	3401      	adds	r4, #1
 80106b8:	e7f6      	b.n	80106a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80106ba:	4611      	mov	r1, r2
 80106bc:	f002 f856 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80106c0:	2401      	movs	r4, #1
 80106c2:	280a      	cmp	r0, #10
 80106c4:	4629      	mov	r1, r5
 80106c6:	4630      	mov	r0, r6
 80106c8:	bf08      	it	eq
 80106ca:	3401      	addeq	r4, #1
 80106cc:	f002 f84e 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d1f6      	bne.n	80106c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80106d4:	b2a0      	uxth	r0, r4
 80106d6:	b00a      	add	sp, #40	; 0x28
 80106d8:	bd70      	pop	{r4, r5, r6, pc}

080106da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80106da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106de:	b0db      	sub	sp, #364	; 0x16c
 80106e0:	468a      	mov	sl, r1
 80106e2:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80106e6:	9009      	str	r0, [sp, #36]	; 0x24
 80106e8:	461c      	mov	r4, r3
 80106ea:	f1bb 0f00 	cmp.w	fp, #0
 80106ee:	f000 80c7 	beq.w	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f000 80c3 	beq.w	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80106fa:	7ba3      	ldrb	r3, [r4, #14]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 80bf 	beq.w	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8010702:	6810      	ldr	r0, [r2, #0]
 8010704:	6851      	ldr	r1, [r2, #4]
 8010706:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801070a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801070e:	af0c      	add	r7, sp, #48	; 0x30
 8010710:	463b      	mov	r3, r7
 8010712:	c303      	stmia	r3!, {r0, r1}
 8010714:	2100      	movs	r1, #0
 8010716:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801071a:	910e      	str	r1, [sp, #56]	; 0x38
 801071c:	79a2      	ldrb	r2, [r4, #6]
 801071e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010722:	a90e      	add	r1, sp, #56	; 0x38
 8010724:	4638      	mov	r0, r7
 8010726:	f7ff fd4a 	bl	80101be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801072a:	a90e      	add	r1, sp, #56	; 0x38
 801072c:	4608      	mov	r0, r1
 801072e:	79a2      	ldrb	r2, [r4, #6]
 8010730:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8010734:	f7ff fd43 	bl	80101be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010738:	4648      	mov	r0, r9
 801073a:	f001 fed5 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 801073e:	6820      	ldr	r0, [r4, #0]
 8010740:	6803      	ldr	r3, [r0, #0]
 8010742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010744:	4798      	blx	r3
 8010746:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8010748:	4603      	mov	r3, r0
 801074a:	4659      	mov	r1, fp
 801074c:	4648      	mov	r0, r9
 801074e:	f001 fee8 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010752:	a82e      	add	r0, sp, #184	; 0xb8
 8010754:	f001 fec8 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 8010758:	f894 8004 	ldrb.w	r8, [r4, #4]
 801075c:	f1b8 0f00 	cmp.w	r8, #0
 8010760:	d009      	beq.n	8010776 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8010762:	6820      	ldr	r0, [r4, #0]
 8010764:	6803      	ldr	r3, [r0, #0]
 8010766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010768:	4798      	blx	r3
 801076a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801076c:	4603      	mov	r3, r0
 801076e:	4659      	mov	r1, fp
 8010770:	a82e      	add	r0, sp, #184	; 0xb8
 8010772:	f001 fed6 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010776:	6820      	ldr	r0, [r4, #0]
 8010778:	6803      	ldr	r3, [r0, #0]
 801077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801077c:	4798      	blx	r3
 801077e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010782:	182e      	adds	r6, r5, r0
 8010784:	2e00      	cmp	r6, #0
 8010786:	dd45      	ble.n	8010814 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8010788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801078c:	4283      	cmp	r3, r0
 801078e:	db41      	blt.n	8010814 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8010790:	441d      	add	r5, r3
 8010792:	fb95 f5f6 	sdiv	r5, r5, r6
 8010796:	a844      	add	r0, sp, #272	; 0x110
 8010798:	f001 fea6 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 801079c:	7c23      	ldrb	r3, [r4, #16]
 801079e:	b14b      	cbz	r3, 80107b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 80107a0:	6820      	ldr	r0, [r4, #0]
 80107a2:	6803      	ldr	r3, [r0, #0]
 80107a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107a6:	4798      	blx	r3
 80107a8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80107aa:	4603      	mov	r3, r0
 80107ac:	4659      	mov	r1, fp
 80107ae:	a844      	add	r0, sp, #272	; 0x110
 80107b0:	f001 feb7 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80107b4:	7c21      	ldrb	r1, [r4, #16]
 80107b6:	9101      	str	r1, [sp, #4]
 80107b8:	6821      	ldr	r1, [r4, #0]
 80107ba:	7963      	ldrb	r3, [r4, #5]
 80107bc:	9100      	str	r1, [sp, #0]
 80107be:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80107c2:	a944      	add	r1, sp, #272	; 0x110
 80107c4:	a810      	add	r0, sp, #64	; 0x40
 80107c6:	f7ff fc8e 	bl	80100e6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80107ca:	7c23      	ldrb	r3, [r4, #16]
 80107cc:	bb23      	cbnz	r3, 8010818 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 80107ce:	fa1f fb86 	uxth.w	fp, r6
 80107d2:	2d00      	cmp	r5, #0
 80107d4:	dd57      	ble.n	8010886 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80107d6:	7961      	ldrb	r1, [r4, #5]
 80107d8:	4648      	mov	r0, r9
 80107da:	f001 ffc7 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80107de:	4603      	mov	r3, r0
 80107e0:	f1b8 0f00 	cmp.w	r8, #0
 80107e4:	d005      	beq.n	80107f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 80107e6:	9008      	str	r0, [sp, #32]
 80107e8:	7961      	ldrb	r1, [r4, #5]
 80107ea:	a82e      	add	r0, sp, #184	; 0xb8
 80107ec:	f001 ffbe 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80107f0:	9b08      	ldr	r3, [sp, #32]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d044      	beq.n	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80107f6:	2b0a      	cmp	r3, #10
 80107f8:	d1eb      	bne.n	80107d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80107fa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80107fe:	445b      	add	r3, fp
 8010800:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8010804:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010808:	eba3 030b 	sub.w	r3, r3, fp
 801080c:	3d01      	subs	r5, #1
 801080e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010812:	e7de      	b.n	80107d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8010814:	2500      	movs	r5, #0
 8010816:	e7be      	b.n	8010796 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8010818:	0073      	lsls	r3, r6, #1
 801081a:	9308      	str	r3, [sp, #32]
 801081c:	2d00      	cmp	r5, #0
 801081e:	dd32      	ble.n	8010886 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8010820:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8010824:	9b08      	ldr	r3, [sp, #32]
 8010826:	428b      	cmp	r3, r1
 8010828:	bfd4      	ite	le
 801082a:	2100      	movle	r1, #0
 801082c:	2101      	movgt	r1, #1
 801082e:	a810      	add	r0, sp, #64	; 0x40
 8010830:	f7ff fe6e 	bl	8010510 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8010834:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8010838:	f10b 33ff 	add.w	r3, fp, #4294967295
 801083c:	fa1f fb83 	uxth.w	fp, r3
 8010840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010844:	459b      	cmp	fp, r3
 8010846:	d00b      	beq.n	8010860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8010848:	7961      	ldrb	r1, [r4, #5]
 801084a:	4648      	mov	r0, r9
 801084c:	f001 ff8e 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010850:	f1b8 0f00 	cmp.w	r8, #0
 8010854:	d0f0      	beq.n	8010838 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8010856:	7961      	ldrb	r1, [r4, #5]
 8010858:	a82e      	add	r0, sp, #184	; 0xb8
 801085a:	f001 ff87 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801085e:	e7eb      	b.n	8010838 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8010860:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010864:	b2b3      	uxth	r3, r6
 8010866:	441a      	add	r2, r3
 8010868:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801086c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8010876:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801087a:	3d01      	subs	r5, #1
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1cd      	bne.n	801081c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8010880:	b05b      	add	sp, #364	; 0x16c
 8010882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010886:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801088a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801088e:	7c23      	ldrb	r3, [r4, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d05f      	beq.n	8010954 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8010894:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8010898:	458b      	cmp	fp, r1
 801089a:	bfd4      	ite	le
 801089c:	2100      	movle	r1, #0
 801089e:	2101      	movgt	r1, #1
 80108a0:	a810      	add	r0, sp, #64	; 0x40
 80108a2:	f7ff fe35 	bl	8010510 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80108a6:	f1b8 0f00 	cmp.w	r8, #0
 80108aa:	d04c      	beq.n	8010946 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80108ac:	7c23      	ldrb	r3, [r4, #16]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d053      	beq.n	801095a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80108b2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80108b6:	7922      	ldrb	r2, [r4, #4]
 80108b8:	2a01      	cmp	r2, #1
 80108ba:	d13c      	bne.n	8010936 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80108bc:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80108c0:	1ac0      	subs	r0, r0, r3
 80108c2:	2302      	movs	r3, #2
 80108c4:	fb90 f0f3 	sdiv	r0, r0, r3
 80108c8:	b200      	sxth	r0, r0
 80108ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80108ce:	4418      	add	r0, r3
 80108d0:	7c23      	ldrb	r3, [r4, #16]
 80108d2:	8028      	strh	r0, [r5, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d03a      	beq.n	801094e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80108d8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80108dc:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80108e0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80108e4:	f8cd 9010 	str.w	r9, [sp, #16]
 80108e8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80108ec:	2200      	movs	r2, #0
 80108ee:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80108f2:	e9cd 5700 	strd	r5, r7, [sp]
 80108f6:	4652      	mov	r2, sl
 80108f8:	2100      	movs	r1, #0
 80108fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108fc:	f7ff fcb0 	bl	8010260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8010900:	2800      	cmp	r0, #0
 8010902:	d1bd      	bne.n	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8010904:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8010908:	b2b2      	uxth	r2, r6
 801090a:	4611      	mov	r1, r2
 801090c:	4413      	add	r3, r2
 801090e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8010912:	1a52      	subs	r2, r2, r1
 8010914:	7c21      	ldrb	r1, [r4, #16]
 8010916:	b21b      	sxth	r3, r3
 8010918:	b212      	sxth	r2, r2
 801091a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801091e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8010922:	b109      	cbz	r1, 8010928 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8010924:	42b2      	cmp	r2, r6
 8010926:	dbab      	blt.n	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8010928:	887a      	ldrh	r2, [r7, #2]
 801092a:	88f9      	ldrh	r1, [r7, #6]
 801092c:	440a      	add	r2, r1
 801092e:	b212      	sxth	r2, r2
 8010930:	4293      	cmp	r3, r2
 8010932:	ddac      	ble.n	801088e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8010934:	e7a4      	b.n	8010880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8010936:	2a02      	cmp	r2, #2
 8010938:	d107      	bne.n	801094a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801093a:	7be2      	ldrb	r2, [r4, #15]
 801093c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8010940:	1a80      	subs	r0, r0, r2
 8010942:	1ac0      	subs	r0, r0, r3
 8010944:	e7c0      	b.n	80108c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8010946:	7be0      	ldrb	r0, [r4, #15]
 8010948:	e7bf      	b.n	80108ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801094a:	2000      	movs	r0, #0
 801094c:	e7bd      	b.n	80108ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801094e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010952:	e7c3      	b.n	80108dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8010954:	f1b8 0f00 	cmp.w	r8, #0
 8010958:	d0f5      	beq.n	8010946 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801095a:	2300      	movs	r3, #0
 801095c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010960:	6821      	ldr	r1, [r4, #0]
 8010962:	a82e      	add	r0, sp, #184	; 0xb8
 8010964:	f7ff fbf9 	bl	801015a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010968:	b203      	sxth	r3, r0
 801096a:	e7a4      	b.n	80108b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801096c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801096c:	b510      	push	{r4, lr}
 801096e:	2b02      	cmp	r3, #2
 8010970:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010974:	d00b      	beq.n	801098e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8010976:	2b03      	cmp	r3, #3
 8010978:	d00e      	beq.n	8010998 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801097a:	2b01      	cmp	r3, #1
 801097c:	d001      	beq.n	8010982 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801097e:	1860      	adds	r0, r4, r1
 8010980:	bd10      	pop	{r4, pc}
 8010982:	8880      	ldrh	r0, [r0, #4]
 8010984:	4420      	add	r0, r4
 8010986:	b200      	sxth	r0, r0
 8010988:	1a80      	subs	r0, r0, r2
 801098a:	3801      	subs	r0, #1
 801098c:	e7f8      	b.n	8010980 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801098e:	8880      	ldrh	r0, [r0, #4]
 8010990:	4420      	add	r0, r4
 8010992:	b200      	sxth	r0, r0
 8010994:	1a40      	subs	r0, r0, r1
 8010996:	e7f8      	b.n	801098a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8010998:	18a0      	adds	r0, r4, r2
 801099a:	e7f1      	b.n	8010980 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801099c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801099c:	b510      	push	{r4, lr}
 801099e:	2b02      	cmp	r3, #2
 80109a0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80109a4:	d006      	beq.n	80109b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d00a      	beq.n	80109c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	bf14      	ite	ne
 80109ae:	18a0      	addne	r0, r4, r2
 80109b0:	1860      	addeq	r0, r4, r1
 80109b2:	bd10      	pop	{r4, pc}
 80109b4:	88c0      	ldrh	r0, [r0, #6]
 80109b6:	4420      	add	r0, r4
 80109b8:	b200      	sxth	r0, r0
 80109ba:	1a80      	subs	r0, r0, r2
 80109bc:	3801      	subs	r0, #1
 80109be:	e7f8      	b.n	80109b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80109c0:	88c0      	ldrh	r0, [r0, #6]
 80109c2:	4420      	add	r0, r4
 80109c4:	b200      	sxth	r0, r0
 80109c6:	1a40      	subs	r0, r0, r1
 80109c8:	e7f8      	b.n	80109bc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080109cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80109cc:	4b01      	ldr	r3, [pc, #4]	; (80109d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	4770      	bx	lr
 80109d4:	2002ee80 	.word	0x2002ee80

080109d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109da:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80109de:	1e05      	subs	r5, r0, #0
 80109e0:	bfba      	itte	lt
 80109e2:	f04f 37ff 	movlt.w	r7, #4294967295
 80109e6:	426d      	neglt	r5, r5
 80109e8:	2701      	movge	r7, #1
 80109ea:	f1be 0f00 	cmp.w	lr, #0
 80109ee:	bfb8      	it	lt
 80109f0:	f1ce 0e00 	rsblt	lr, lr, #0
 80109f4:	f04f 0601 	mov.w	r6, #1
 80109f8:	fa4e f001 	asr.w	r0, lr, r1
 80109fc:	fa06 f101 	lsl.w	r1, r6, r1
 8010a00:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010a04:	f101 31ff 	add.w	r1, r1, #4294967295
 8010a08:	ea01 010e 	and.w	r1, r1, lr
 8010a0c:	bfb8      	it	lt
 8010a0e:	427f      	neglt	r7, r7
 8010a10:	434d      	muls	r5, r1
 8010a12:	2c00      	cmp	r4, #0
 8010a14:	f8dc 1000 	ldr.w	r1, [ip]
 8010a18:	bfb8      	it	lt
 8010a1a:	4264      	neglt	r4, r4
 8010a1c:	fb03 1300 	mla	r3, r3, r0, r1
 8010a20:	fb95 f1f4 	sdiv	r1, r5, r4
 8010a24:	fb04 5511 	mls	r5, r4, r1, r5
 8010a28:	441d      	add	r5, r3
 8010a2a:	fb95 f3f4 	sdiv	r3, r5, r4
 8010a2e:	fb04 5413 	mls	r4, r4, r3, r5
 8010a32:	4419      	add	r1, r3
 8010a34:	bfb8      	it	lt
 8010a36:	427f      	neglt	r7, r7
 8010a38:	fb02 1000 	mla	r0, r2, r0, r1
 8010a3c:	f8cc 4000 	str.w	r4, [ip]
 8010a40:	4378      	muls	r0, r7
 8010a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8010a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a48:	4c24      	ldr	r4, [pc, #144]	; (8010adc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8010a4a:	6807      	ldr	r7, [r0, #0]
 8010a4c:	69a3      	ldr	r3, [r4, #24]
 8010a4e:	b086      	sub	sp, #24
 8010a50:	4605      	mov	r5, r0
 8010a52:	b92b      	cbnz	r3, 8010a60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8010a54:	6840      	ldr	r0, [r0, #4]
 8010a56:	e9c5 7000 	strd	r7, r0, [r5]
 8010a5a:	b006      	add	sp, #24
 8010a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a60:	68a2      	ldr	r2, [r4, #8]
 8010a62:	6820      	ldr	r0, [r4, #0]
 8010a64:	ae06      	add	r6, sp, #24
 8010a66:	f04f 0802 	mov.w	r8, #2
 8010a6a:	fb93 f1f8 	sdiv	r1, r3, r8
 8010a6e:	440a      	add	r2, r1
 8010a70:	f846 2d04 	str.w	r2, [r6, #-4]!
 8010a74:	69e1      	ldr	r1, [r4, #28]
 8010a76:	9700      	str	r7, [sp, #0]
 8010a78:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8010a7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010a7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010a80:	f7ff ffaa 	bl	80109d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8010a84:	69a3      	ldr	r3, [r4, #24]
 8010a86:	9301      	str	r3, [sp, #4]
 8010a88:	686b      	ldr	r3, [r5, #4]
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	4607      	mov	r7, r0
 8010a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010a92:	6a21      	ldr	r1, [r4, #32]
 8010a94:	9602      	str	r6, [sp, #8]
 8010a96:	6860      	ldr	r0, [r4, #4]
 8010a98:	f7ff ff9e 	bl	80109d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8010a9c:	6963      	ldr	r3, [r4, #20]
 8010a9e:	69a2      	ldr	r2, [r4, #24]
 8010aa0:	fb92 f8f8 	sdiv	r8, r2, r8
 8010aa4:	4443      	add	r3, r8
 8010aa6:	9305      	str	r3, [sp, #20]
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8010ab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ab2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010ab6:	4407      	add	r7, r0
 8010ab8:	68e0      	ldr	r0, [r4, #12]
 8010aba:	f7ff ff8d 	bl	80109d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8010abe:	69a3      	ldr	r3, [r4, #24]
 8010ac0:	9301      	str	r3, [sp, #4]
 8010ac2:	686b      	ldr	r3, [r5, #4]
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	4680      	mov	r8, r0
 8010ac8:	9602      	str	r6, [sp, #8]
 8010aca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010acc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010ad0:	6920      	ldr	r0, [r4, #16]
 8010ad2:	f7ff ff81 	bl	80109d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8010ad6:	4440      	add	r0, r8
 8010ad8:	e7bd      	b.n	8010a56 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8010ada:	bf00      	nop
 8010adc:	2002ee84 	.word	0x2002ee84

08010ae0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8010ae0:	b510      	push	{r4, lr}
 8010ae2:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d108      	bne.n	8010afc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8010aea:	4b06      	ldr	r3, [pc, #24]	; (8010b04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8010aec:	880c      	ldrh	r4, [r1, #0]
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010af4:	3b01      	subs	r3, #1
 8010af6:	1b1b      	subs	r3, r3, r4
 8010af8:	8003      	strh	r3, [r0, #0]
 8010afa:	800a      	strh	r2, [r1, #0]
 8010afc:	bd10      	pop	{r4, pc}
 8010afe:	bf00      	nop
 8010b00:	2002ee70 	.word	0x2002ee70
 8010b04:	2002ee74 	.word	0x2002ee74

08010b08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8010b08:	b510      	push	{r4, lr}
 8010b0a:	4b0a      	ldr	r3, [pc, #40]	; (8010b34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d10e      	bne.n	8010b30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8010b12:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010b16:	8843      	ldrh	r3, [r0, #2]
 8010b18:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010b1c:	8044      	strh	r4, [r0, #2]
 8010b1e:	18ca      	adds	r2, r1, r3
 8010b20:	4b05      	ldr	r3, [pc, #20]	; (8010b38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	1a9b      	subs	r3, r3, r2
 8010b26:	8003      	strh	r3, [r0, #0]
 8010b28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010b2c:	80c3      	strh	r3, [r0, #6]
 8010b2e:	8081      	strh	r1, [r0, #4]
 8010b30:	bd10      	pop	{r4, pc}
 8010b32:	bf00      	nop
 8010b34:	2002ee70 	.word	0x2002ee70
 8010b38:	2002ee6c 	.word	0x2002ee6c

08010b3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8010b3c:	b510      	push	{r4, lr}
 8010b3e:	4b07      	ldr	r3, [pc, #28]	; (8010b5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d108      	bne.n	8010b58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8010b46:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010b4a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010b4e:	8003      	strh	r3, [r0, #0]
 8010b50:	8893      	ldrh	r3, [r2, #4]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	1b1b      	subs	r3, r3, r4
 8010b56:	800b      	strh	r3, [r1, #0]
 8010b58:	bd10      	pop	{r4, pc}
 8010b5a:	bf00      	nop
 8010b5c:	2002ee70 	.word	0x2002ee70

08010b60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8010b60:	b513      	push	{r0, r1, r4, lr}
 8010b62:	4b08      	ldr	r3, [pc, #32]	; (8010b84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8010b64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010b68:	4b07      	ldr	r3, [pc, #28]	; (8010b88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8010b6a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b72:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b76:	2400      	movs	r4, #0
 8010b78:	466a      	mov	r2, sp
 8010b7a:	9400      	str	r4, [sp, #0]
 8010b7c:	f7ff ffde 	bl	8010b3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010b80:	b002      	add	sp, #8
 8010b82:	bd10      	pop	{r4, pc}
 8010b84:	2002ee6c 	.word	0x2002ee6c
 8010b88:	2002ee6e 	.word	0x2002ee6e

08010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8010b8c:	b510      	push	{r4, lr}
 8010b8e:	4b0a      	ldr	r3, [pc, #40]	; (8010bb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	460a      	mov	r2, r1
 8010b96:	d10d      	bne.n	8010bb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8010b98:	8881      	ldrh	r1, [r0, #4]
 8010b9a:	8803      	ldrh	r3, [r0, #0]
 8010b9c:	440b      	add	r3, r1
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	3b01      	subs	r3, #1
 8010ba2:	f821 3b02 	strh.w	r3, [r1], #2
 8010ba6:	f7ff ffc9 	bl	8010b3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010baa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010bae:	88c2      	ldrh	r2, [r0, #6]
 8010bb0:	8082      	strh	r2, [r0, #4]
 8010bb2:	80c3      	strh	r3, [r0, #6]
 8010bb4:	bd10      	pop	{r4, pc}
 8010bb6:	bf00      	nop
 8010bb8:	2002ee70 	.word	0x2002ee70

08010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8010bbc:	b507      	push	{r0, r1, r2, lr}
 8010bbe:	4b09      	ldr	r3, [pc, #36]	; (8010be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8010bc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010bc4:	4b08      	ldr	r3, [pc, #32]	; (8010be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8010bc6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010bca:	2100      	movs	r1, #0
 8010bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bd0:	9100      	str	r1, [sp, #0]
 8010bd2:	4669      	mov	r1, sp
 8010bd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010bd8:	f7ff ffd8 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010bdc:	b003      	add	sp, #12
 8010bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8010be2:	bf00      	nop
 8010be4:	2002ee6c 	.word	0x2002ee6c
 8010be8:	2002ee6e 	.word	0x2002ee6e

08010bec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8010bec:	4b03      	ldr	r3, [pc, #12]	; (8010bfc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8010bee:	6818      	ldr	r0, [r3, #0]
 8010bf0:	b110      	cbz	r0, 8010bf8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8010bf2:	6803      	ldr	r3, [r0, #0]
 8010bf4:	699b      	ldr	r3, [r3, #24]
 8010bf6:	4718      	bx	r3
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	2002eed4 	.word	0x2002eed4

08010c00 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8010c00:	4770      	bx	lr
	...

08010c04 <_ZN8touchgfx11Application4drawEv>:
 8010c04:	b507      	push	{r0, r1, r2, lr}
 8010c06:	4b09      	ldr	r3, [pc, #36]	; (8010c2c <_ZN8touchgfx11Application4drawEv+0x28>)
 8010c08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c0c:	4b08      	ldr	r3, [pc, #32]	; (8010c30 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8010c0e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c16:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c1a:	6803      	ldr	r3, [r0, #0]
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	9100      	str	r1, [sp, #0]
 8010c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c22:	4669      	mov	r1, sp
 8010c24:	4798      	blx	r3
 8010c26:	b003      	add	sp, #12
 8010c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c2c:	2002ee6c 	.word	0x2002ee6c
 8010c30:	2002ee6e 	.word	0x2002ee6e

08010c34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8010c34:	4b03      	ldr	r3, [pc, #12]	; (8010c44 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8010c36:	6818      	ldr	r0, [r3, #0]
 8010c38:	b110      	cbz	r0, 8010c40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8010c3a:	6803      	ldr	r3, [r0, #0]
 8010c3c:	69db      	ldr	r3, [r3, #28]
 8010c3e:	4718      	bx	r3
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	2002eed4 	.word	0x2002eed4

08010c48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8010c48:	4b03      	ldr	r3, [pc, #12]	; (8010c58 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8010c4a:	6818      	ldr	r0, [r3, #0]
 8010c4c:	b110      	cbz	r0, 8010c54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8010c4e:	6803      	ldr	r3, [r0, #0]
 8010c50:	6a1b      	ldr	r3, [r3, #32]
 8010c52:	4718      	bx	r3
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop
 8010c58:	2002eed4 	.word	0x2002eed4

08010c5c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8010c5c:	4b03      	ldr	r3, [pc, #12]	; (8010c6c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8010c5e:	6818      	ldr	r0, [r3, #0]
 8010c60:	b110      	cbz	r0, 8010c68 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8010c62:	6803      	ldr	r3, [r0, #0]
 8010c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c66:	4718      	bx	r3
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	2002eed4 	.word	0x2002eed4

08010c70 <_ZN8touchgfx11Application15handleTickEventEv>:
 8010c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c74:	4d3a      	ldr	r5, [pc, #232]	; (8010d60 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8010c76:	4604      	mov	r4, r0
 8010c78:	6828      	ldr	r0, [r5, #0]
 8010c7a:	b140      	cbz	r0, 8010c8e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8010c7c:	7a03      	ldrb	r3, [r0, #8]
 8010c7e:	b933      	cbnz	r3, 8010c8e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8010c80:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8010c84:	6803      	ldr	r3, [r0, #0]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c8c:	4718      	bx	r3
 8010c8e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8010c92:	b97b      	cbnz	r3, 8010cb4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010c94:	b170      	cbz	r0, 8010cb4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010c96:	7a03      	ldrb	r3, [r0, #8]
 8010c98:	b163      	cbz	r3, 8010cb4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010c9a:	4b32      	ldr	r3, [pc, #200]	; (8010d64 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8010c9c:	6818      	ldr	r0, [r3, #0]
 8010c9e:	b110      	cbz	r0, 8010ca6 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8010ca0:	6803      	ldr	r3, [r0, #0]
 8010ca2:	691b      	ldr	r3, [r3, #16]
 8010ca4:	4798      	blx	r3
 8010ca6:	6828      	ldr	r0, [r5, #0]
 8010ca8:	6803      	ldr	r3, [r0, #0]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	4798      	blx	r3
 8010cae:	2301      	movs	r3, #1
 8010cb0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8010cb4:	2500      	movs	r5, #0
 8010cb6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8010cba:	42a8      	cmp	r0, r5
 8010cbc:	dd0c      	ble.n	8010cd8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8010cbe:	1963      	adds	r3, r4, r5
 8010cc0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010cc4:	b132      	cbz	r2, 8010cd4 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8010cc6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8010cca:	4413      	add	r3, r2
 8010ccc:	6858      	ldr	r0, [r3, #4]
 8010cce:	6803      	ldr	r3, [r0, #0]
 8010cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cd2:	4798      	blx	r3
 8010cd4:	3501      	adds	r5, #1
 8010cd6:	e7ee      	b.n	8010cb6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8010cd8:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8010cdc:	3801      	subs	r0, #1
 8010cde:	3678      	adds	r6, #120	; 0x78
 8010ce0:	f04f 0c00 	mov.w	ip, #0
 8010ce4:	1c43      	adds	r3, r0, #1
 8010ce6:	d033      	beq.n	8010d50 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8010ce8:	1823      	adds	r3, r4, r0
 8010cea:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010cee:	bb6a      	cbnz	r2, 8010d4c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8010cf0:	b281      	uxth	r1, r0
 8010cf2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010cf6:	1d25      	adds	r5, r4, #4
 8010cf8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010cfc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8010d00:	4293      	cmp	r3, r2
 8010d02:	dc0a      	bgt.n	8010d1a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8010d04:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8010d08:	4422      	add	r2, r4
 8010d0a:	18b1      	adds	r1, r6, r2
 8010d0c:	b289      	uxth	r1, r1
 8010d0e:	428b      	cmp	r3, r1
 8010d10:	d919      	bls.n	8010d46 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8010d12:	7851      	ldrb	r1, [r2, #1]
 8010d14:	f802 1b01 	strb.w	r1, [r2], #1
 8010d18:	e7f7      	b.n	8010d0a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8010d1a:	682f      	ldr	r7, [r5, #0]
 8010d1c:	45b9      	cmp	r9, r7
 8010d1e:	f105 0804 	add.w	r8, r5, #4
 8010d22:	d10d      	bne.n	8010d40 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8010d24:	4696      	mov	lr, r2
 8010d26:	f1be 0f1e 	cmp.w	lr, #30
 8010d2a:	dc06      	bgt.n	8010d3a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8010d2c:	f10e 0e01 	add.w	lr, lr, #1
 8010d30:	686f      	ldr	r7, [r5, #4]
 8010d32:	f845 7b04 	str.w	r7, [r5], #4
 8010d36:	4573      	cmp	r3, lr
 8010d38:	dcf5      	bgt.n	8010d26 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8010d40:	3201      	adds	r2, #1
 8010d42:	4645      	mov	r5, r8
 8010d44:	e7da      	b.n	8010cfc <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8010d46:	4423      	add	r3, r4
 8010d48:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8010d4c:	3801      	subs	r0, #1
 8010d4e:	e7c9      	b.n	8010ce4 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8010d50:	4b04      	ldr	r3, [pc, #16]	; (8010d64 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8010d52:	6818      	ldr	r0, [r3, #0]
 8010d54:	b110      	cbz	r0, 8010d5c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8010d56:	6803      	ldr	r3, [r0, #0]
 8010d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d5a:	e795      	b.n	8010c88 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8010d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d60:	2002eed8 	.word	0x2002eed8
 8010d64:	2002eed4 	.word	0x2002eed4

08010d68 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	b929      	cbnz	r1, 8010d7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8010d70:	4b0c      	ldr	r3, [pc, #48]	; (8010da4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8010d72:	4a0d      	ldr	r2, [pc, #52]	; (8010da8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8010d74:	480d      	ldr	r0, [pc, #52]	; (8010dac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8010d76:	2164      	movs	r1, #100	; 0x64
 8010d78:	f00d fb34 	bl	801e3e4 <__assert_func>
 8010d7c:	4d0c      	ldr	r5, [pc, #48]	; (8010db0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8010d7e:	2300      	movs	r3, #0
 8010d80:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010d84:	6828      	ldr	r0, [r5, #0]
 8010d86:	b110      	cbz	r0, 8010d8e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8010d88:	6803      	ldr	r3, [r0, #0]
 8010d8a:	695b      	ldr	r3, [r3, #20]
 8010d8c:	4798      	blx	r3
 8010d8e:	602c      	str	r4, [r5, #0]
 8010d90:	6823      	ldr	r3, [r4, #0]
 8010d92:	4620      	mov	r0, r4
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	4798      	blx	r3
 8010d98:	6833      	ldr	r3, [r6, #0]
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010da2:	4718      	bx	r3
 8010da4:	080212b8 	.word	0x080212b8
 8010da8:	08021380 	.word	0x08021380
 8010dac:	080212c2 	.word	0x080212c2
 8010db0:	2002eed4 	.word	0x2002eed4

08010db4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8010db4:	b510      	push	{r4, lr}
 8010db6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8010dba:	888a      	ldrh	r2, [r1, #4]
 8010dbc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010dc0:	4422      	add	r2, r4
 8010dc2:	b212      	sxth	r2, r2
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	da15      	bge.n	8010df4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010dc8:	8882      	ldrh	r2, [r0, #4]
 8010dca:	4413      	add	r3, r2
 8010dcc:	b21b      	sxth	r3, r3
 8010dce:	429c      	cmp	r4, r3
 8010dd0:	da10      	bge.n	8010df4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010dd2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010dd6:	88c9      	ldrh	r1, [r1, #6]
 8010dd8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010ddc:	4419      	add	r1, r3
 8010dde:	b209      	sxth	r1, r1
 8010de0:	428a      	cmp	r2, r1
 8010de2:	da07      	bge.n	8010df4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010de4:	88c0      	ldrh	r0, [r0, #6]
 8010de6:	4410      	add	r0, r2
 8010de8:	b200      	sxth	r0, r0
 8010dea:	4283      	cmp	r3, r0
 8010dec:	bfac      	ite	ge
 8010dee:	2000      	movge	r0, #0
 8010df0:	2001      	movlt	r0, #1
 8010df2:	bd10      	pop	{r4, pc}
 8010df4:	2000      	movs	r0, #0
 8010df6:	e7fc      	b.n	8010df2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08010df8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	f9b1 4000 	ldrsh.w	r4, [r1]
 8010dfe:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010e02:	42ac      	cmp	r4, r5
 8010e04:	db18      	blt.n	8010e38 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010e06:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8010e0a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	db12      	blt.n	8010e38 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010e12:	8886      	ldrh	r6, [r0, #4]
 8010e14:	4435      	add	r5, r6
 8010e16:	888e      	ldrh	r6, [r1, #4]
 8010e18:	4434      	add	r4, r6
 8010e1a:	b22d      	sxth	r5, r5
 8010e1c:	b224      	sxth	r4, r4
 8010e1e:	42a5      	cmp	r5, r4
 8010e20:	db0a      	blt.n	8010e38 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8010e22:	88c0      	ldrh	r0, [r0, #6]
 8010e24:	4418      	add	r0, r3
 8010e26:	88cb      	ldrh	r3, [r1, #6]
 8010e28:	441a      	add	r2, r3
 8010e2a:	b200      	sxth	r0, r0
 8010e2c:	b212      	sxth	r2, r2
 8010e2e:	4290      	cmp	r0, r2
 8010e30:	bfb4      	ite	lt
 8010e32:	2000      	movlt	r0, #0
 8010e34:	2001      	movge	r0, #1
 8010e36:	bd70      	pop	{r4, r5, r6, pc}
 8010e38:	2000      	movs	r0, #0
 8010e3a:	e7fc      	b.n	8010e36 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08010e3c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8010e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3e:	4604      	mov	r4, r0
 8010e40:	4608      	mov	r0, r1
 8010e42:	460d      	mov	r5, r1
 8010e44:	f7fd fdb6 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e48:	b978      	cbnz	r0, 8010e6a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f7fd fdb2 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010e50:	f9b5 6000 	ldrsh.w	r6, [r5]
 8010e54:	b150      	cbz	r0, 8010e6c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8010e56:	8026      	strh	r6, [r4, #0]
 8010e58:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010e5c:	8063      	strh	r3, [r4, #2]
 8010e5e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8010e62:	80a3      	strh	r3, [r4, #4]
 8010e64:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010e68:	80e3      	strh	r3, [r4, #6]
 8010e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e6c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010e70:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010e74:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010e78:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8010e7c:	88ed      	ldrh	r5, [r5, #6]
 8010e7e:	42b1      	cmp	r1, r6
 8010e80:	460f      	mov	r7, r1
 8010e82:	bfa8      	it	ge
 8010e84:	4637      	movge	r7, r6
 8010e86:	4293      	cmp	r3, r2
 8010e88:	4618      	mov	r0, r3
 8010e8a:	4466      	add	r6, ip
 8010e8c:	bfa8      	it	ge
 8010e8e:	4610      	movge	r0, r2
 8010e90:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8010e94:	8027      	strh	r7, [r4, #0]
 8010e96:	442a      	add	r2, r5
 8010e98:	88e5      	ldrh	r5, [r4, #6]
 8010e9a:	8060      	strh	r0, [r4, #2]
 8010e9c:	4461      	add	r1, ip
 8010e9e:	442b      	add	r3, r5
 8010ea0:	b236      	sxth	r6, r6
 8010ea2:	b209      	sxth	r1, r1
 8010ea4:	b212      	sxth	r2, r2
 8010ea6:	b21b      	sxth	r3, r3
 8010ea8:	428e      	cmp	r6, r1
 8010eaa:	bfac      	ite	ge
 8010eac:	ebc7 0106 	rsbge	r1, r7, r6
 8010eb0:	ebc7 0101 	rsblt	r1, r7, r1
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	bfac      	ite	ge
 8010eb8:	ebc0 0202 	rsbge	r2, r0, r2
 8010ebc:	ebc0 0203 	rsblt	r2, r0, r3
 8010ec0:	80a1      	strh	r1, [r4, #4]
 8010ec2:	80e2      	strh	r2, [r4, #6]
 8010ec4:	e7d1      	b.n	8010e6a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08010ec8 <_ZN8touchgfx11Application11getInstanceEv>:
 8010ec8:	4b01      	ldr	r3, [pc, #4]	; (8010ed0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8010eca:	6818      	ldr	r0, [r3, #0]
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	2002eee4 	.word	0x2002eee4

08010ed4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010eda:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8010ede:	30a8      	adds	r0, #168	; 0xa8
 8010ee0:	f802 3b01 	strb.w	r3, [r2], #1
 8010ee4:	4282      	cmp	r2, r0
 8010ee6:	d1fb      	bne.n	8010ee0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8010ee8:	4770      	bx	lr

08010eea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8010eea:	4603      	mov	r3, r0
 8010eec:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	801a      	strh	r2, [r3, #0]
 8010ef4:	805a      	strh	r2, [r3, #2]
 8010ef6:	809a      	strh	r2, [r3, #4]
 8010ef8:	80da      	strh	r2, [r3, #6]
 8010efa:	3308      	adds	r3, #8
 8010efc:	428b      	cmp	r3, r1
 8010efe:	d1f8      	bne.n	8010ef2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8010f00:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8010f04:	4770      	bx	lr
	...

08010f08 <_ZN8touchgfx11ApplicationC1Ev>:
 8010f08:	b570      	push	{r4, r5, r6, lr}
 8010f0a:	4b16      	ldr	r3, [pc, #88]	; (8010f64 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8010f0c:	6003      	str	r3, [r0, #0]
 8010f0e:	2500      	movs	r5, #0
 8010f10:	4604      	mov	r4, r0
 8010f12:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 8010f16:	30a8      	adds	r0, #168	; 0xa8
 8010f18:	f7ff ffe7 	bl	8010eea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010f1c:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8010f20:	f7ff ffe3 	bl	8010eea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010f24:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8010f28:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8010f2c:	490e      	ldr	r1, [pc, #56]	; (8010f68 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8010f2e:	480f      	ldr	r0, [pc, #60]	; (8010f6c <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8010f30:	4e0f      	ldr	r6, [pc, #60]	; (8010f70 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8010f32:	f00d f925 	bl	801e180 <CRC_Lock>
 8010f36:	4b0f      	ldr	r3, [pc, #60]	; (8010f74 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8010f38:	b158      	cbz	r0, 8010f52 <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 8010f3a:	801d      	strh	r5, [r3, #0]
 8010f3c:	4a0e      	ldr	r2, [pc, #56]	; (8010f78 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8010f3e:	2300      	movs	r3, #0
 8010f40:	6013      	str	r3, [r2, #0]
 8010f42:	4a0e      	ldr	r2, [pc, #56]	; (8010f7c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8010f44:	6033      	str	r3, [r6, #0]
 8010f46:	4620      	mov	r0, r4
 8010f48:	6013      	str	r3, [r2, #0]
 8010f4a:	f7ff ffc3 	bl	8010ed4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8010f4e:	4620      	mov	r0, r4
 8010f50:	bd70      	pop	{r4, r5, r6, pc}
 8010f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010f56:	2002      	movs	r0, #2
 8010f58:	801a      	strh	r2, [r3, #0]
 8010f5a:	6030      	str	r0, [r6, #0]
 8010f5c:	f000 ff1e 	bl	8011d9c <_ZN8touchgfx6Screen4drawEv>
 8010f60:	e7ec      	b.n	8010f3c <_ZN8touchgfx11ApplicationC1Ev+0x34>
 8010f62:	bf00      	nop
 8010f64:	0802134c 	.word	0x0802134c
 8010f68:	b5e8b5cd 	.word	0xb5e8b5cd
 8010f6c:	f407a5c2 	.word	0xf407a5c2
 8010f70:	2002eed4 	.word	0x2002eed4
 8010f74:	20000094 	.word	0x20000094
 8010f78:	2002eee4 	.word	0x2002eee4
 8010f7c:	2002eed8 	.word	0x2002eed8

08010f80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010f80:	2300      	movs	r3, #0
 8010f82:	8003      	strh	r3, [r0, #0]
 8010f84:	8043      	strh	r3, [r0, #2]
 8010f86:	8083      	strh	r3, [r0, #4]
 8010f88:	80c3      	strh	r3, [r0, #6]
 8010f8a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	b530      	push	{r4, r5, lr}
 8010f92:	d912      	bls.n	8010fba <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8010f94:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	6825      	ldr	r5, [r4, #0]
 8010f9c:	6005      	str	r5, [r0, #0]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	6865      	ldr	r5, [r4, #4]
 8010fa2:	6045      	str	r5, [r0, #4]
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8010faa:	d906      	bls.n	8010fba <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8010fac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010fb0:	681d      	ldr	r5, [r3, #0]
 8010fb2:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8010fb6:	685d      	ldr	r5, [r3, #4]
 8010fb8:	6065      	str	r5, [r4, #4]
 8010fba:	bd30      	pop	{r4, r5, pc}

08010fbc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8010fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fbe:	466b      	mov	r3, sp
 8010fc0:	e883 0006 	stmia.w	r3, {r1, r2}
 8010fc4:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010fc8:	2a07      	cmp	r2, #7
 8010fca:	4604      	mov	r4, r0
 8010fcc:	d906      	bls.n	8010fdc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8010fce:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8010fd0:	4a09      	ldr	r2, [pc, #36]	; (8010ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010fd2:	480a      	ldr	r0, [pc, #40]	; (8010ffc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010fd4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8010fd8:	f00d fa04 	bl	801e3e4 <__assert_func>
 8010fdc:	1c51      	adds	r1, r2, #1
 8010fde:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010fe2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8010fe6:	cb03      	ldmia	r3!, {r0, r1}
 8010fe8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8010fec:	6069      	str	r1, [r5, #4]
 8010fee:	b003      	add	sp, #12
 8010ff0:	bd30      	pop	{r4, r5, pc}
 8010ff2:	bf00      	nop
 8010ff4:	080212ec 	.word	0x080212ec
 8010ff8:	080213c4 	.word	0x080213c4
 8010ffc:	0802131b 	.word	0x0802131b

08011000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011004:	b089      	sub	sp, #36	; 0x24
 8011006:	466c      	mov	r4, sp
 8011008:	4606      	mov	r6, r0
 801100a:	4620      	mov	r0, r4
 801100c:	e884 0006 	stmia.w	r4, {r1, r2}
 8011010:	f7fd fcd0 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011014:	bbb0      	cbnz	r0, 8011084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8011016:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801101a:	b1fd      	cbz	r5, 801105c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801101c:	3d01      	subs	r5, #1
 801101e:	af04      	add	r7, sp, #16
 8011020:	f04f 090a 	mov.w	r9, #10
 8011024:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8011028:	ab02      	add	r3, sp, #8
 801102a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801102e:	6851      	ldr	r1, [r2, #4]
 8011030:	c303      	stmia	r3!, {r0, r1}
 8011032:	4621      	mov	r1, r4
 8011034:	a802      	add	r0, sp, #8
 8011036:	fa1f f885 	uxth.w	r8, r5
 801103a:	f7ff fedd 	bl	8010df8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801103e:	bb08      	cbnz	r0, 8011084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8011040:	a902      	add	r1, sp, #8
 8011042:	4620      	mov	r0, r4
 8011044:	f7ff fed8 	bl	8010df8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011048:	b1f8      	cbz	r0, 801108a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801104a:	4642      	mov	r2, r8
 801104c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8011050:	a806      	add	r0, sp, #24
 8011052:	f7ff ff95 	bl	8010f80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011056:	f115 35ff 	adds.w	r5, r5, #4294967295
 801105a:	d2e3      	bcs.n	8011024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801105c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8011060:	2b08      	cmp	r3, #8
 8011062:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8011066:	d108      	bne.n	801107a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8011068:	4629      	mov	r1, r5
 801106a:	a806      	add	r0, sp, #24
 801106c:	2207      	movs	r2, #7
 801106e:	f7ff ff87 	bl	8010f80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011072:	a906      	add	r1, sp, #24
 8011074:	4620      	mov	r0, r4
 8011076:	f7ff fee1 	bl	8010e3c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801107a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801107e:	4628      	mov	r0, r5
 8011080:	f7ff ff9c 	bl	8010fbc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011084:	b009      	add	sp, #36	; 0x24
 8011086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801108a:	4621      	mov	r1, r4
 801108c:	a802      	add	r0, sp, #8
 801108e:	f7ff fe91 	bl	8010db4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011092:	b150      	cbz	r0, 80110aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8011094:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8011098:	a806      	add	r0, sp, #24
 801109a:	4642      	mov	r2, r8
 801109c:	f7ff ff70 	bl	8010f80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80110a0:	a902      	add	r1, sp, #8
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ff feca 	bl	8010e3c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80110a8:	e7d5      	b.n	8011056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80110aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80110ae:	e887 0003 	stmia.w	r7, {r0, r1}
 80110b2:	a902      	add	r1, sp, #8
 80110b4:	4638      	mov	r0, r7
 80110b6:	f7ff fec1 	bl	8010e3c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80110ba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80110be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80110c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80110c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80110ca:	fb13 f302 	smulbb	r3, r3, r2
 80110ce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80110d2:	fb11 f102 	smulbb	r1, r1, r2
 80110d6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80110da:	fb12 1100 	smlabb	r1, r2, r0, r1
 80110de:	220b      	movs	r2, #11
 80110e0:	fb09 f303 	mul.w	r3, r9, r3
 80110e4:	434a      	muls	r2, r1
 80110e6:	4293      	cmp	r3, r2
 80110e8:	dab5      	bge.n	8011056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80110ea:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80110ee:	a806      	add	r0, sp, #24
 80110f0:	4642      	mov	r2, r8
 80110f2:	f7ff ff45 	bl	8010f80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80110f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80110fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80110fe:	e7aa      	b.n	8011056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08011100 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011100:	b530      	push	{r4, r5, lr}
 8011102:	4b1d      	ldr	r3, [pc, #116]	; (8011178 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8011104:	b085      	sub	sp, #20
 8011106:	460c      	mov	r4, r1
 8011108:	f9b3 2000 	ldrsh.w	r2, [r3]
 801110c:	4b1b      	ldr	r3, [pc, #108]	; (801117c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801110e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011112:	2100      	movs	r1, #0
 8011114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011118:	9100      	str	r1, [sp, #0]
 801111a:	4605      	mov	r5, r0
 801111c:	6861      	ldr	r1, [r4, #4]
 801111e:	6820      	ldr	r0, [r4, #0]
 8011120:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011124:	ab02      	add	r3, sp, #8
 8011126:	c303      	stmia	r3!, {r0, r1}
 8011128:	4669      	mov	r1, sp
 801112a:	a802      	add	r0, sp, #8
 801112c:	f7fd fbfe 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 8011130:	ab02      	add	r3, sp, #8
 8011132:	cb03      	ldmia	r3!, {r0, r1}
 8011134:	4b12      	ldr	r3, [pc, #72]	; (8011180 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8011136:	6020      	str	r0, [r4, #0]
 8011138:	6818      	ldr	r0, [r3, #0]
 801113a:	6061      	str	r1, [r4, #4]
 801113c:	b138      	cbz	r0, 801114e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801113e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8011142:	b133      	cbz	r3, 8011152 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8011144:	6821      	ldr	r1, [r4, #0]
 8011146:	6862      	ldr	r2, [r4, #4]
 8011148:	4628      	mov	r0, r5
 801114a:	f7ff ff59 	bl	8011000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801114e:	b005      	add	sp, #20
 8011150:	bd30      	pop	{r4, r5, pc}
 8011152:	6803      	ldr	r3, [r0, #0]
 8011154:	4621      	mov	r1, r4
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	4798      	blx	r3
 801115a:	4b0a      	ldr	r3, [pc, #40]	; (8011184 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801115c:	6818      	ldr	r0, [r3, #0]
 801115e:	b118      	cbz	r0, 8011168 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8011160:	6803      	ldr	r3, [r0, #0]
 8011162:	4621      	mov	r1, r4
 8011164:	689b      	ldr	r3, [r3, #8]
 8011166:	4798      	blx	r3
 8011168:	4b07      	ldr	r3, [pc, #28]	; (8011188 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801116a:	6818      	ldr	r0, [r3, #0]
 801116c:	6803      	ldr	r3, [r0, #0]
 801116e:	4621      	mov	r1, r4
 8011170:	695b      	ldr	r3, [r3, #20]
 8011172:	4798      	blx	r3
 8011174:	e7eb      	b.n	801114e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8011176:	bf00      	nop
 8011178:	2002ee6c 	.word	0x2002ee6c
 801117c:	2002ee6e 	.word	0x2002ee6e
 8011180:	2002eed4 	.word	0x2002eed4
 8011184:	2002eed0 	.word	0x2002eed0
 8011188:	2002ee78 	.word	0x2002ee78

0801118c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011190:	4604      	mov	r4, r0
 8011192:	b09b      	sub	sp, #108	; 0x6c
 8011194:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8011198:	b129      	cbz	r1, 80111a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801119a:	2300      	movs	r3, #0
 801119c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80111a0:	b01b      	add	sp, #108	; 0x6c
 80111a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	4baf      	ldr	r3, [pc, #700]	; (8011464 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	b33b      	cbz	r3, 80111fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80111ac:	4dae      	ldr	r5, [pc, #696]	; (8011468 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80111ae:	4628      	mov	r0, r5
 80111b0:	f7fd fc00 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80111b4:	4606      	mov	r6, r0
 80111b6:	bb08      	cbnz	r0, 80111fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80111b8:	4628      	mov	r0, r5
 80111ba:	f7ff fca5 	bl	8010b08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80111be:	6829      	ldr	r1, [r5, #0]
 80111c0:	686a      	ldr	r2, [r5, #4]
 80111c2:	4620      	mov	r0, r4
 80111c4:	f7ff ff1c 	bl	8011000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80111c8:	802e      	strh	r6, [r5, #0]
 80111ca:	806e      	strh	r6, [r5, #2]
 80111cc:	80ae      	strh	r6, [r5, #4]
 80111ce:	80ee      	strh	r6, [r5, #6]
 80111d0:	4fa6      	ldr	r7, [pc, #664]	; (801146c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80111d2:	a809      	add	r0, sp, #36	; 0x24
 80111d4:	f7ff fe89 	bl	8010eea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80111d8:	883d      	ldrh	r5, [r7, #0]
 80111da:	462e      	mov	r6, r5
 80111dc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80111e0:	42b3      	cmp	r3, r6
 80111e2:	d910      	bls.n	8011206 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 80111e4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80111e8:	a809      	add	r0, sp, #36	; 0x24
 80111ea:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80111ee:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80111f2:	3601      	adds	r6, #1
 80111f4:	f7ff fee2 	bl	8010fbc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80111f8:	b2b6      	uxth	r6, r6
 80111fa:	e7ef      	b.n	80111dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 80111fc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1e5      	bne.n	80111d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8011204:	e7cc      	b.n	80111a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011206:	462e      	mov	r6, r5
 8011208:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801120c:	42b3      	cmp	r3, r6
 801120e:	d90b      	bls.n	8011228 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8011210:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011214:	4620      	mov	r0, r4
 8011216:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801121a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801121e:	3601      	adds	r6, #1
 8011220:	f7ff feee 	bl	8011000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8011224:	b2b6      	uxth	r6, r6
 8011226:	e7ef      	b.n	8011208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8011228:	4e91      	ldr	r6, [pc, #580]	; (8011470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801122a:	6833      	ldr	r3, [r6, #0]
 801122c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011230:	2b01      	cmp	r3, #1
 8011232:	f040 8092 	bne.w	801135a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8011236:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801123a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801123e:	33aa      	adds	r3, #170	; 0xaa
 8011240:	f04f 0900 	mov.w	r9, #0
 8011244:	42a8      	cmp	r0, r5
 8011246:	f103 0308 	add.w	r3, r3, #8
 801124a:	dd0a      	ble.n	8011262 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801124c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011250:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8011254:	440a      	add	r2, r1
 8011256:	b212      	sxth	r2, r2
 8011258:	4591      	cmp	r9, r2
 801125a:	bfb8      	it	lt
 801125c:	4691      	movlt	r9, r2
 801125e:	3501      	adds	r5, #1
 8011260:	e7f0      	b.n	8011244 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8011262:	4b84      	ldr	r3, [pc, #528]	; (8011474 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8011264:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801147c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8011268:	881d      	ldrh	r5, [r3, #0]
 801126a:	2300      	movs	r3, #0
 801126c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011270:	2d0f      	cmp	r5, #15
 8011272:	bf8c      	ite	hi
 8011274:	08ed      	lsrhi	r5, r5, #3
 8011276:	2501      	movls	r5, #1
 8011278:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801127c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8011280:	6830      	ldr	r0, [r6, #0]
 8011282:	440b      	add	r3, r1
 8011284:	b21b      	sxth	r3, r3
 8011286:	4599      	cmp	r9, r3
 8011288:	6802      	ldr	r2, [r0, #0]
 801128a:	dd49      	ble.n	8011320 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801128c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8011290:	4798      	blx	r3
 8011292:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011296:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801129a:	4413      	add	r3, r2
 801129c:	b21b      	sxth	r3, r3
 801129e:	195a      	adds	r2, r3, r5
 80112a0:	4290      	cmp	r0, r2
 80112a2:	da07      	bge.n	80112b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80112a4:	4581      	cmp	r9, r0
 80112a6:	dd05      	ble.n	80112b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80112a8:	4298      	cmp	r0, r3
 80112aa:	da33      	bge.n	8011314 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	dd31      	ble.n	8011314 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80112b0:	4648      	mov	r0, r9
 80112b2:	e004      	b.n	80112be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80112b4:	4298      	cmp	r0, r3
 80112b6:	dbfb      	blt.n	80112b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80112b8:	4548      	cmp	r0, r9
 80112ba:	bfa8      	it	ge
 80112bc:	4648      	movge	r0, r9
 80112be:	f9b8 2000 	ldrsh.w	r2, [r8]
 80112c2:	f8b7 a000 	ldrh.w	sl, [r7]
 80112c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112ca:	2100      	movs	r1, #0
 80112cc:	1ac0      	subs	r0, r0, r3
 80112ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 80112d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80112d6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80112da:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80112de:	4553      	cmp	r3, sl
 80112e0:	d9ca      	bls.n	8011278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80112e2:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80112e6:	ab07      	add	r3, sp, #28
 80112e8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80112ec:	6851      	ldr	r1, [r2, #4]
 80112ee:	c303      	stmia	r3!, {r0, r1}
 80112f0:	a807      	add	r0, sp, #28
 80112f2:	a905      	add	r1, sp, #20
 80112f4:	f7fd fb1a 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 80112f8:	a807      	add	r0, sp, #28
 80112fa:	f7fd fb5b 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80112fe:	b920      	cbnz	r0, 801130a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	a907      	add	r1, sp, #28
 8011304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011306:	4620      	mov	r0, r4
 8011308:	4798      	blx	r3
 801130a:	f10a 0a01 	add.w	sl, sl, #1
 801130e:	fa1f fa8a 	uxth.w	sl, sl
 8011312:	e7e2      	b.n	80112da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8011314:	6830      	ldr	r0, [r6, #0]
 8011316:	6803      	ldr	r3, [r0, #0]
 8011318:	2101      	movs	r1, #1
 801131a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801131c:	4798      	blx	r3
 801131e:	e7ab      	b.n	8011278 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8011320:	69d3      	ldr	r3, [r2, #28]
 8011322:	4798      	blx	r3
 8011324:	4b54      	ldr	r3, [pc, #336]	; (8011478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	f43f af39 	beq.w	80111a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801132e:	2300      	movs	r3, #0
 8011330:	883d      	ldrh	r5, [r7, #0]
 8011332:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8011336:	34ea      	adds	r4, #234	; 0xea
 8011338:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801133c:	42ab      	cmp	r3, r5
 801133e:	f67f af2f 	bls.w	80111a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8011342:	ab1a      	add	r3, sp, #104	; 0x68
 8011344:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011348:	3b44      	subs	r3, #68	; 0x44
 801134a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801134e:	4620      	mov	r0, r4
 8011350:	3501      	adds	r5, #1
 8011352:	f7ff fe33 	bl	8010fbc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8011356:	b2ad      	uxth	r5, r5
 8011358:	e7ee      	b.n	8011338 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801135a:	2b02      	cmp	r3, #2
 801135c:	d16a      	bne.n	8011434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801135e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8011480 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8011362:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011366:	42ab      	cmp	r3, r5
 8011368:	d9dc      	bls.n	8011324 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801136a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801136e:	ab03      	add	r3, sp, #12
 8011370:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011374:	6851      	ldr	r1, [r2, #4]
 8011376:	c303      	stmia	r3!, {r0, r1}
 8011378:	f89a 3000 	ldrb.w	r3, [sl]
 801137c:	2b01      	cmp	r3, #1
 801137e:	d102      	bne.n	8011386 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8011380:	a803      	add	r0, sp, #12
 8011382:	f7ff fc1b 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011386:	a803      	add	r0, sp, #12
 8011388:	f7fd fb14 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801138c:	2800      	cmp	r0, #0
 801138e:	d14a      	bne.n	8011426 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8011390:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011394:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011398:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801139c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80113a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80113a4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80113a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80113ac:	f10d 0914 	add.w	r9, sp, #20
 80113b0:	f10d 081c 	add.w	r8, sp, #28
 80113b4:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80113b8:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 80113bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80113c0:	6830      	ldr	r0, [r6, #0]
 80113c2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80113c6:	f8d0 e000 	ldr.w	lr, [r0]
 80113ca:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80113ce:	44dc      	add	ip, fp
 80113d0:	ebac 0c02 	sub.w	ip, ip, r2
 80113d4:	fa1f fc8c 	uxth.w	ip, ip
 80113d8:	f8cd c000 	str.w	ip, [sp]
 80113dc:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 80113e0:	47d8      	blx	fp
 80113e2:	f89a 3000 	ldrb.w	r3, [sl]
 80113e6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d11e      	bne.n	801142c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 80113ee:	e899 0003 	ldmia.w	r9, {r0, r1}
 80113f2:	e888 0003 	stmia.w	r8, {r0, r1}
 80113f6:	4640      	mov	r0, r8
 80113f8:	f7ff fb86 	bl	8010b08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011400:	4641      	mov	r1, r8
 8011402:	4620      	mov	r0, r4
 8011404:	4798      	blx	r3
 8011406:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801140a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801140e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8011412:	4413      	add	r3, r2
 8011414:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011418:	440a      	add	r2, r1
 801141a:	b21b      	sxth	r3, r3
 801141c:	b212      	sxth	r2, r2
 801141e:	4293      	cmp	r3, r2
 8011420:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011424:	dbc6      	blt.n	80113b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8011426:	3501      	adds	r5, #1
 8011428:	b2ad      	uxth	r5, r5
 801142a:	e79a      	b.n	8011362 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	4649      	mov	r1, r9
 8011430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011432:	e7e6      	b.n	8011402 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8011434:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8011438:	42ab      	cmp	r3, r5
 801143a:	f67f af73 	bls.w	8011324 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801143e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8011442:	ab07      	add	r3, sp, #28
 8011444:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8011448:	6851      	ldr	r1, [r2, #4]
 801144a:	c303      	stmia	r3!, {r0, r1}
 801144c:	a807      	add	r0, sp, #28
 801144e:	f7fd fab1 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011452:	b920      	cbnz	r0, 801145e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8011454:	6823      	ldr	r3, [r4, #0]
 8011456:	a907      	add	r1, sp, #28
 8011458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145a:	4620      	mov	r0, r4
 801145c:	4798      	blx	r3
 801145e:	3501      	adds	r5, #1
 8011460:	b2ad      	uxth	r5, r5
 8011462:	e7e7      	b.n	8011434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8011464:	2002eed0 	.word	0x2002eed0
 8011468:	2002eedc 	.word	0x2002eedc
 801146c:	20000094 	.word	0x20000094
 8011470:	2002ee78 	.word	0x2002ee78
 8011474:	2002ee6e 	.word	0x2002ee6e
 8011478:	2002ee76 	.word	0x2002ee76
 801147c:	2002ee6c 	.word	0x2002ee6c
 8011480:	2002ee70 	.word	0x2002ee70

08011484 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8011484:	4b03      	ldr	r3, [pc, #12]	; (8011494 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8011486:	2200      	movs	r2, #0
 8011488:	801a      	strh	r2, [r3, #0]
 801148a:	805a      	strh	r2, [r3, #2]
 801148c:	809a      	strh	r2, [r3, #4]
 801148e:	80da      	strh	r2, [r3, #6]
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	2002eedc 	.word	0x2002eedc

08011498 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8011498:	2000      	movs	r0, #0
 801149a:	4770      	bx	lr

0801149c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801149c:	2000      	movs	r0, #0
 801149e:	4770      	bx	lr

080114a0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80114a0:	b508      	push	{r3, lr}
 80114a2:	6803      	ldr	r3, [r0, #0]
 80114a4:	68db      	ldr	r3, [r3, #12]
 80114a6:	4798      	blx	r3
 80114a8:	b128      	cbz	r0, 80114b6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80114aa:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80114ae:	7a80      	ldrb	r0, [r0, #10]
 80114b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114b4:	4318      	orrs	r0, r3
 80114b6:	bd08      	pop	{r3, pc}

080114b8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 80114b8:	b40e      	push	{r1, r2, r3}
 80114ba:	b533      	push	{r0, r1, r4, r5, lr}
 80114bc:	ab05      	add	r3, sp, #20
 80114be:	f853 2b04 	ldr.w	r2, [r3], #4
 80114c2:	9301      	str	r3, [sp, #4]
 80114c4:	4b09      	ldr	r3, [pc, #36]	; (80114ec <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 80114c6:	685c      	ldr	r4, [r3, #4]
 80114c8:	1061      	asrs	r1, r4, #1
 80114ca:	07e4      	lsls	r4, r4, #31
 80114cc:	eb00 0501 	add.w	r5, r0, r1
 80114d0:	bf45      	ittet	mi
 80114d2:	681b      	ldrmi	r3, [r3, #0]
 80114d4:	5841      	ldrmi	r1, [r0, r1]
 80114d6:	681c      	ldrpl	r4, [r3, #0]
 80114d8:	58cc      	ldrmi	r4, [r1, r3]
 80114da:	9b01      	ldr	r3, [sp, #4]
 80114dc:	2100      	movs	r1, #0
 80114de:	4628      	mov	r0, r5
 80114e0:	47a0      	blx	r4
 80114e2:	b002      	add	sp, #8
 80114e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114e8:	b003      	add	sp, #12
 80114ea:	4770      	bx	lr
 80114ec:	2000007c 	.word	0x2000007c

080114f0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 80114f0:	b40c      	push	{r2, r3}
 80114f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114f4:	ab06      	add	r3, sp, #24
 80114f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80114fa:	9301      	str	r3, [sp, #4]
 80114fc:	4b09      	ldr	r3, [pc, #36]	; (8011524 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 80114fe:	685d      	ldr	r5, [r3, #4]
 8011500:	106c      	asrs	r4, r5, #1
 8011502:	07ed      	lsls	r5, r5, #31
 8011504:	eb00 0604 	add.w	r6, r0, r4
 8011508:	bf45      	ittet	mi
 801150a:	681b      	ldrmi	r3, [r3, #0]
 801150c:	5900      	ldrmi	r0, [r0, r4]
 801150e:	681c      	ldrpl	r4, [r3, #0]
 8011510:	58c4      	ldrmi	r4, [r0, r3]
 8011512:	9b01      	ldr	r3, [sp, #4]
 8011514:	4630      	mov	r0, r6
 8011516:	47a0      	blx	r4
 8011518:	b002      	add	sp, #8
 801151a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801151e:	b002      	add	sp, #8
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	2000007c 	.word	0x2000007c

08011528 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8011528:	b40e      	push	{r1, r2, r3}
 801152a:	b530      	push	{r4, r5, lr}
 801152c:	b098      	sub	sp, #96	; 0x60
 801152e:	ab1b      	add	r3, sp, #108	; 0x6c
 8011530:	4604      	mov	r4, r0
 8011532:	f853 5b04 	ldr.w	r5, [r3], #4
 8011536:	9301      	str	r3, [sp, #4]
 8011538:	a802      	add	r0, sp, #8
 801153a:	f000 ffd5 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4620      	mov	r0, r4
 8011542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011544:	4798      	blx	r3
 8011546:	9a01      	ldr	r2, [sp, #4]
 8011548:	4603      	mov	r3, r0
 801154a:	4629      	mov	r1, r5
 801154c:	a802      	add	r0, sp, #8
 801154e:	f000 ffe8 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011552:	a802      	add	r0, sp, #8
 8011554:	f001 f81e 	bl	8012594 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011558:	2401      	movs	r4, #1
 801155a:	b2a3      	uxth	r3, r4
 801155c:	b140      	cbz	r0, 8011570 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 801155e:	280a      	cmp	r0, #10
 8011560:	bf08      	it	eq
 8011562:	3301      	addeq	r3, #1
 8011564:	a802      	add	r0, sp, #8
 8011566:	bf08      	it	eq
 8011568:	b21c      	sxtheq	r4, r3
 801156a:	f001 f813 	bl	8012594 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801156e:	e7f4      	b.n	801155a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8011570:	4618      	mov	r0, r3
 8011572:	b018      	add	sp, #96	; 0x60
 8011574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011578:	b003      	add	sp, #12
 801157a:	4770      	bx	lr

0801157c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801157c:	b40e      	push	{r1, r2, r3}
 801157e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011580:	b098      	sub	sp, #96	; 0x60
 8011582:	ab1d      	add	r3, sp, #116	; 0x74
 8011584:	4605      	mov	r5, r0
 8011586:	f853 4b04 	ldr.w	r4, [r3], #4
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	a802      	add	r0, sp, #8
 801158e:	f000 ffab 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	4f21      	ldr	r7, [pc, #132]	; (801161c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8011596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011598:	4628      	mov	r0, r5
 801159a:	4798      	blx	r3
 801159c:	ae18      	add	r6, sp, #96	; 0x60
 801159e:	4603      	mov	r3, r0
 80115a0:	4621      	mov	r1, r4
 80115a2:	9a00      	ldr	r2, [sp, #0]
 80115a4:	a802      	add	r0, sp, #8
 80115a6:	2400      	movs	r4, #0
 80115a8:	f000 ffbb 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80115ac:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80115b0:	462a      	mov	r2, r5
 80115b2:	4633      	mov	r3, r6
 80115b4:	4621      	mov	r1, r4
 80115b6:	a802      	add	r0, sp, #8
 80115b8:	f001 f918 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80115bc:	b338      	cbz	r0, 801160e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 80115be:	280a      	cmp	r0, #10
 80115c0:	d01e      	beq.n	8011600 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 80115c2:	9901      	ldr	r1, [sp, #4]
 80115c4:	b1e1      	cbz	r1, 8011600 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 80115c6:	7b4b      	ldrb	r3, [r1, #13]
 80115c8:	f891 c008 	ldrb.w	ip, [r1, #8]
 80115cc:	79c9      	ldrb	r1, [r1, #7]
 80115ce:	88aa      	ldrh	r2, [r5, #4]
 80115d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80115d4:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 80115d8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80115dc:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 80115e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115e4:	bf14      	ite	ne
 80115e6:	4638      	movne	r0, r7
 80115e8:	2000      	moveq	r0, #0
 80115ea:	ea41 010e 	orr.w	r1, r1, lr
 80115ee:	ea43 030c 	orr.w	r3, r3, ip
 80115f2:	440a      	add	r2, r1
 80115f4:	4303      	orrs	r3, r0
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	42a3      	cmp	r3, r4
 80115fc:	bfc8      	it	gt
 80115fe:	b21c      	sxthgt	r4, r3
 8011600:	4633      	mov	r3, r6
 8011602:	462a      	mov	r2, r5
 8011604:	2100      	movs	r1, #0
 8011606:	a802      	add	r0, sp, #8
 8011608:	f001 f8f0 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801160c:	e7d6      	b.n	80115bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801160e:	b2a0      	uxth	r0, r4
 8011610:	b018      	add	sp, #96	; 0x60
 8011612:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011616:	b003      	add	sp, #12
 8011618:	4770      	bx	lr
 801161a:	bf00      	nop
 801161c:	fffffe00 	.word	0xfffffe00

08011620 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8011620:	b40e      	push	{r1, r2, r3}
 8011622:	b570      	push	{r4, r5, r6, lr}
 8011624:	b099      	sub	sp, #100	; 0x64
 8011626:	ab1d      	add	r3, sp, #116	; 0x74
 8011628:	4604      	mov	r4, r0
 801162a:	f853 5b04 	ldr.w	r5, [r3], #4
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	a802      	add	r0, sp, #8
 8011632:	f000 ff59 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 8011636:	6823      	ldr	r3, [r4, #0]
 8011638:	4620      	mov	r0, r4
 801163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801163c:	4798      	blx	r3
 801163e:	4629      	mov	r1, r5
 8011640:	4603      	mov	r3, r0
 8011642:	9a00      	ldr	r2, [sp, #0]
 8011644:	a802      	add	r0, sp, #8
 8011646:	ad18      	add	r5, sp, #96	; 0x60
 8011648:	f000 ff6b 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801164c:	2100      	movs	r1, #0
 801164e:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8011652:	4622      	mov	r2, r4
 8011654:	462b      	mov	r3, r5
 8011656:	a802      	add	r0, sp, #8
 8011658:	f001 f8c8 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801165c:	26ff      	movs	r6, #255	; 0xff
 801165e:	b190      	cbz	r0, 8011686 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8011660:	280a      	cmp	r0, #10
 8011662:	d009      	beq.n	8011678 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8011664:	9a01      	ldr	r2, [sp, #4]
 8011666:	b13a      	cbz	r2, 8011678 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8011668:	7923      	ldrb	r3, [r4, #4]
 801166a:	7a12      	ldrb	r2, [r2, #8]
 801166c:	1a9b      	subs	r3, r3, r2
 801166e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8011672:	429e      	cmp	r6, r3
 8011674:	bf28      	it	cs
 8011676:	461e      	movcs	r6, r3
 8011678:	462b      	mov	r3, r5
 801167a:	4622      	mov	r2, r4
 801167c:	2100      	movs	r1, #0
 801167e:	a802      	add	r0, sp, #8
 8011680:	f001 f8b4 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011684:	e7eb      	b.n	801165e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8011686:	4630      	mov	r0, r6
 8011688:	b019      	add	sp, #100	; 0x64
 801168a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801168e:	b003      	add	sp, #12
 8011690:	4770      	bx	lr

08011692 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8011692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011696:	4606      	mov	r6, r0
 8011698:	b099      	sub	sp, #100	; 0x64
 801169a:	a802      	add	r0, sp, #8
 801169c:	4614      	mov	r4, r2
 801169e:	4688      	mov	r8, r1
 80116a0:	461d      	mov	r5, r3
 80116a2:	f000 ff21 	bl	80124e8 <_ZN8touchgfx12TextProviderC1Ev>
 80116a6:	6833      	ldr	r3, [r6, #0]
 80116a8:	4630      	mov	r0, r6
 80116aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ac:	4798      	blx	r3
 80116ae:	462a      	mov	r2, r5
 80116b0:	4603      	mov	r3, r0
 80116b2:	4621      	mov	r1, r4
 80116b4:	a802      	add	r0, sp, #8
 80116b6:	f000 ff34 	bl	8012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80116ba:	f04f 0b00 	mov.w	fp, #0
 80116be:	465f      	mov	r7, fp
 80116c0:	46da      	mov	sl, fp
 80116c2:	46d9      	mov	r9, fp
 80116c4:	ab01      	add	r3, sp, #4
 80116c6:	4632      	mov	r2, r6
 80116c8:	4641      	mov	r1, r8
 80116ca:	a802      	add	r0, sp, #8
 80116cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80116d0:	f001 f88c 	bl	80127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80116d4:	4605      	mov	r5, r0
 80116d6:	b108      	cbz	r0, 80116dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 80116d8:	280a      	cmp	r0, #10
 80116da:	d10b      	bne.n	80116f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 80116dc:	4557      	cmp	r7, sl
 80116de:	bf38      	it	cc
 80116e0:	4657      	movcc	r7, sl
 80116e2:	f04f 0a00 	mov.w	sl, #0
 80116e6:	b91d      	cbnz	r5, 80116f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80116e8:	4638      	mov	r0, r7
 80116ea:	b019      	add	sp, #100	; 0x64
 80116ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f0:	46ab      	mov	fp, r5
 80116f2:	e7e7      	b.n	80116c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 80116f4:	9a01      	ldr	r2, [sp, #4]
 80116f6:	2a00      	cmp	r2, #0
 80116f8:	d0fa      	beq.n	80116f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 80116fa:	f992 400d 	ldrsb.w	r4, [r2, #13]
 80116fe:	6833      	ldr	r3, [r6, #0]
 8011700:	8895      	ldrh	r5, [r2, #4]
 8011702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011704:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8011708:	7a94      	ldrb	r4, [r2, #10]
 801170a:	4659      	mov	r1, fp
 801170c:	4304      	orrs	r4, r0
 801170e:	4630      	mov	r0, r6
 8011710:	4798      	blx	r3
 8011712:	4420      	add	r0, r4
 8011714:	4450      	add	r0, sl
 8011716:	fa1f fa80 	uxth.w	sl, r0
 801171a:	e7e4      	b.n	80116e6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801171c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801171c:	b513      	push	{r0, r1, r4, lr}
 801171e:	1d01      	adds	r1, r0, #4
 8011720:	4603      	mov	r3, r0
 8011722:	c903      	ldmia	r1, {r0, r1}
 8011724:	466a      	mov	r2, sp
 8011726:	e882 0003 	stmia.w	r2, {r0, r1}
 801172a:	2100      	movs	r1, #0
 801172c:	9100      	str	r1, [sp, #0]
 801172e:	6819      	ldr	r1, [r3, #0]
 8011730:	4618      	mov	r0, r3
 8011732:	690c      	ldr	r4, [r1, #16]
 8011734:	4611      	mov	r1, r2
 8011736:	47a0      	blx	r4
 8011738:	b002      	add	sp, #8
 801173a:	bd10      	pop	{r4, pc}

0801173c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	680b      	ldr	r3, [r1, #0]
 8011740:	460c      	mov	r4, r1
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	4605      	mov	r5, r0
 8011746:	4798      	blx	r3
 8011748:	6823      	ldr	r3, [r4, #0]
 801174a:	4620      	mov	r0, r4
 801174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174e:	4629      	mov	r1, r5
 8011750:	4798      	blx	r3
 8011752:	4628      	mov	r0, r5
 8011754:	bd38      	pop	{r3, r4, r5, pc}

08011756 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8011756:	b410      	push	{r4}
 8011758:	880a      	ldrh	r2, [r1, #0]
 801175a:	8884      	ldrh	r4, [r0, #4]
 801175c:	4422      	add	r2, r4
 801175e:	800a      	strh	r2, [r1, #0]
 8011760:	88c4      	ldrh	r4, [r0, #6]
 8011762:	884a      	ldrh	r2, [r1, #2]
 8011764:	4422      	add	r2, r4
 8011766:	804a      	strh	r2, [r1, #2]
 8011768:	6940      	ldr	r0, [r0, #20]
 801176a:	b120      	cbz	r0, 8011776 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801176c:	6803      	ldr	r3, [r0, #0]
 801176e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011774:	4718      	bx	r3
 8011776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801177a:	4770      	bx	lr

0801177c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801177e:	460b      	mov	r3, r1
 8011780:	b085      	sub	sp, #20
 8011782:	4604      	mov	r4, r0
 8011784:	b901      	cbnz	r1, 8011788 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8011786:	b1fa      	cbz	r2, 80117c8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8011788:	1d27      	adds	r7, r4, #4
 801178a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801178e:	466e      	mov	r6, sp
 8011790:	e886 0003 	stmia.w	r6, {r0, r1}
 8011794:	88e1      	ldrh	r1, [r4, #6]
 8011796:	440a      	add	r2, r1
 8011798:	88a1      	ldrh	r1, [r4, #4]
 801179a:	4419      	add	r1, r3
 801179c:	6823      	ldr	r3, [r4, #0]
 801179e:	b209      	sxth	r1, r1
 80117a0:	4620      	mov	r0, r4
 80117a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117a4:	b212      	sxth	r2, r2
 80117a6:	4798      	blx	r3
 80117a8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80117ac:	ad02      	add	r5, sp, #8
 80117ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80117b2:	6960      	ldr	r0, [r4, #20]
 80117b4:	b150      	cbz	r0, 80117cc <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 80117b6:	6803      	ldr	r3, [r0, #0]
 80117b8:	4631      	mov	r1, r6
 80117ba:	691b      	ldr	r3, [r3, #16]
 80117bc:	4798      	blx	r3
 80117be:	6960      	ldr	r0, [r4, #20]
 80117c0:	6803      	ldr	r3, [r0, #0]
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	4629      	mov	r1, r5
 80117c6:	4798      	blx	r3
 80117c8:	b005      	add	sp, #20
 80117ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117cc:	f7ff fb7c 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 80117d0:	6803      	ldr	r3, [r0, #0]
 80117d2:	4631      	mov	r1, r6
 80117d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d6:	4798      	blx	r3
 80117d8:	f7ff fb76 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 80117dc:	6803      	ldr	r3, [r0, #0]
 80117de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e0:	e7f0      	b.n	80117c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

080117e2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80117e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117e4:	8882      	ldrh	r2, [r0, #4]
 80117e6:	880b      	ldrh	r3, [r1, #0]
 80117e8:	4413      	add	r3, r2
 80117ea:	800b      	strh	r3, [r1, #0]
 80117ec:	88c2      	ldrh	r2, [r0, #6]
 80117ee:	884b      	ldrh	r3, [r1, #2]
 80117f0:	4413      	add	r3, r2
 80117f2:	4602      	mov	r2, r0
 80117f4:	804b      	strh	r3, [r1, #2]
 80117f6:	4605      	mov	r5, r0
 80117f8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80117fc:	460c      	mov	r4, r1
 80117fe:	6851      	ldr	r1, [r2, #4]
 8011800:	466b      	mov	r3, sp
 8011802:	c303      	stmia	r3!, {r0, r1}
 8011804:	4621      	mov	r1, r4
 8011806:	4668      	mov	r0, sp
 8011808:	f7fd f890 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 801180c:	466b      	mov	r3, sp
 801180e:	cb03      	ldmia	r3!, {r0, r1}
 8011810:	6020      	str	r0, [r4, #0]
 8011812:	6061      	str	r1, [r4, #4]
 8011814:	6968      	ldr	r0, [r5, #20]
 8011816:	b128      	cbz	r0, 8011824 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8011818:	6803      	ldr	r3, [r0, #0]
 801181a:	691b      	ldr	r3, [r3, #16]
 801181c:	4621      	mov	r1, r4
 801181e:	4798      	blx	r3
 8011820:	b003      	add	sp, #12
 8011822:	bd30      	pop	{r4, r5, pc}
 8011824:	f7ff fb50 	bl	8010ec8 <_ZN8touchgfx11Application11getInstanceEv>
 8011828:	6803      	ldr	r3, [r0, #0]
 801182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801182c:	e7f6      	b.n	801181c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801182e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801182e:	b570      	push	{r4, r5, r6, lr}
 8011830:	8882      	ldrh	r2, [r0, #4]
 8011832:	880b      	ldrh	r3, [r1, #0]
 8011834:	4413      	add	r3, r2
 8011836:	800b      	strh	r3, [r1, #0]
 8011838:	88c2      	ldrh	r2, [r0, #6]
 801183a:	884b      	ldrh	r3, [r1, #2]
 801183c:	460c      	mov	r4, r1
 801183e:	4413      	add	r3, r2
 8011840:	804b      	strh	r3, [r1, #2]
 8011842:	4605      	mov	r5, r0
 8011844:	1d01      	adds	r1, r0, #4
 8011846:	4620      	mov	r0, r4
 8011848:	f7fd f870 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 801184c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8011850:	b153      	cbz	r3, 8011868 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8011852:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011856:	b13b      	cbz	r3, 8011868 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8011858:	6968      	ldr	r0, [r5, #20]
 801185a:	b128      	cbz	r0, 8011868 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801185c:	6803      	ldr	r3, [r0, #0]
 801185e:	4621      	mov	r1, r4
 8011860:	6a1b      	ldr	r3, [r3, #32]
 8011862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011866:	4718      	bx	r3
 8011868:	bd70      	pop	{r4, r5, r6, pc}

0801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801186a:	b510      	push	{r4, lr}
 801186c:	4604      	mov	r4, r0
 801186e:	4608      	mov	r0, r1
 8011870:	2300      	movs	r3, #0
 8011872:	8023      	strh	r3, [r4, #0]
 8011874:	8063      	strh	r3, [r4, #2]
 8011876:	6803      	ldr	r3, [r0, #0]
 8011878:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801187c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8011880:	80a1      	strh	r1, [r4, #4]
 8011882:	80e2      	strh	r2, [r4, #6]
 8011884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011886:	4621      	mov	r1, r4
 8011888:	4798      	blx	r3
 801188a:	4620      	mov	r0, r4
 801188c:	bd10      	pop	{r4, pc}
	...

08011890 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8011890:	b530      	push	{r4, r5, lr}
 8011892:	8083      	strh	r3, [r0, #4]
 8011894:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011898:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801189c:	7183      	strb	r3, [r0, #6]
 801189e:	79c3      	ldrb	r3, [r0, #7]
 80118a0:	6101      	str	r1, [r0, #16]
 80118a2:	f365 0306 	bfi	r3, r5, #0, #7
 80118a6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80118aa:	8282      	strh	r2, [r0, #20]
 80118ac:	f365 13c7 	bfi	r3, r5, #7, #1
 80118b0:	71c3      	strb	r3, [r0, #7]
 80118b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80118b6:	7203      	strb	r3, [r0, #8]
 80118b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80118bc:	7243      	strb	r3, [r0, #9]
 80118be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80118c2:	8143      	strh	r3, [r0, #10]
 80118c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80118c8:	8183      	strh	r3, [r0, #12]
 80118ca:	4b01      	ldr	r3, [pc, #4]	; (80118d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80118cc:	6003      	str	r3, [r0, #0]
 80118ce:	bd30      	pop	{r4, r5, pc}
 80118d0:	080214ec 	.word	0x080214ec

080118d4 <_ZNK8touchgfx9ConstFont4findEt>:
 80118d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118d6:	8a84      	ldrh	r4, [r0, #20]
 80118d8:	2500      	movs	r5, #0
 80118da:	3c01      	subs	r4, #1
 80118dc:	260e      	movs	r6, #14
 80118de:	42a5      	cmp	r5, r4
 80118e0:	dc0c      	bgt.n	80118fc <_ZNK8touchgfx9ConstFont4findEt+0x28>
 80118e2:	192a      	adds	r2, r5, r4
 80118e4:	6903      	ldr	r3, [r0, #16]
 80118e6:	1052      	asrs	r2, r2, #1
 80118e8:	fb06 3302 	mla	r3, r6, r2, r3
 80118ec:	889f      	ldrh	r7, [r3, #4]
 80118ee:	428f      	cmp	r7, r1
 80118f0:	d901      	bls.n	80118f6 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 80118f2:	1e54      	subs	r4, r2, #1
 80118f4:	e7f3      	b.n	80118de <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80118f6:	d202      	bcs.n	80118fe <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 80118f8:	1c55      	adds	r5, r2, #1
 80118fa:	e7f0      	b.n	80118de <_ZNK8touchgfx9ConstFont4findEt+0xa>
 80118fc:	2300      	movs	r3, #0
 80118fe:	4618      	mov	r0, r3
 8011900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011902 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8011902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011904:	4605      	mov	r5, r0
 8011906:	4617      	mov	r7, r2
 8011908:	461e      	mov	r6, r3
 801190a:	f7ff ffe3 	bl	80118d4 <_ZNK8touchgfx9ConstFont4findEt>
 801190e:	b9e0      	cbnz	r0, 801194a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8011910:	b911      	cbnz	r1, 8011918 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8011912:	2400      	movs	r4, #0
 8011914:	4620      	mov	r0, r4
 8011916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011918:	290a      	cmp	r1, #10
 801191a:	d0fa      	beq.n	8011912 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	4628      	mov	r0, r5
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	4798      	blx	r3
 8011924:	4601      	mov	r1, r0
 8011926:	4628      	mov	r0, r5
 8011928:	f7ff ffd4 	bl	80118d4 <_ZNK8touchgfx9ConstFont4findEt>
 801192c:	4604      	mov	r4, r0
 801192e:	2800      	cmp	r0, #0
 8011930:	d0ef      	beq.n	8011912 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8011932:	682b      	ldr	r3, [r5, #0]
 8011934:	4621      	mov	r1, r4
 8011936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011938:	4628      	mov	r0, r5
 801193a:	4798      	blx	r3
 801193c:	6038      	str	r0, [r7, #0]
 801193e:	682b      	ldr	r3, [r5, #0]
 8011940:	4628      	mov	r0, r5
 8011942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011944:	4798      	blx	r3
 8011946:	7030      	strb	r0, [r6, #0]
 8011948:	e7e4      	b.n	8011914 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801194a:	4604      	mov	r4, r0
 801194c:	e7f1      	b.n	8011932 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801194e <_ZN8touchgfx10ClickEventD1Ev>:
 801194e:	4770      	bx	lr

08011950 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8011950:	2000      	movs	r0, #0
 8011952:	4770      	bx	lr

08011954 <_ZN8touchgfx9DragEventD1Ev>:
 8011954:	4770      	bx	lr

08011956 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8011956:	2001      	movs	r0, #1
 8011958:	4770      	bx	lr

0801195a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801195a:	2002      	movs	r0, #2
 801195c:	4770      	bx	lr

0801195e <_ZN8touchgfx12GestureEventD1Ev>:
 801195e:	4770      	bx	lr

08011960 <_ZN8touchgfx10ClickEventD0Ev>:
 8011960:	b510      	push	{r4, lr}
 8011962:	210c      	movs	r1, #12
 8011964:	4604      	mov	r4, r0
 8011966:	f00c fd11 	bl	801e38c <_ZdlPvj>
 801196a:	4620      	mov	r0, r4
 801196c:	bd10      	pop	{r4, pc}

0801196e <_ZN8touchgfx9DragEventD0Ev>:
 801196e:	b510      	push	{r4, lr}
 8011970:	2110      	movs	r1, #16
 8011972:	4604      	mov	r4, r0
 8011974:	f00c fd0a 	bl	801e38c <_ZdlPvj>
 8011978:	4620      	mov	r0, r4
 801197a:	bd10      	pop	{r4, pc}

0801197c <_ZN8touchgfx12GestureEventD0Ev>:
 801197c:	b510      	push	{r4, lr}
 801197e:	210c      	movs	r1, #12
 8011980:	4604      	mov	r4, r0
 8011982:	f00c fd03 	bl	801e38c <_ZdlPvj>
 8011986:	4620      	mov	r0, r4
 8011988:	bd10      	pop	{r4, pc}
	...

0801198c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801198c:	b530      	push	{r4, r5, lr}
 801198e:	460d      	mov	r5, r1
 8011990:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011992:	b087      	sub	sp, #28
 8011994:	4604      	mov	r4, r0
 8011996:	b301      	cbz	r1, 80119da <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011998:	a801      	add	r0, sp, #4
 801199a:	f7ff ff66 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801199e:	892a      	ldrh	r2, [r5, #8]
 80119a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80119a4:	7928      	ldrb	r0, [r5, #4]
 80119a6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80119aa:	f88d 0010 	strb.w	r0, [sp, #16]
 80119ae:	1ad2      	subs	r2, r2, r3
 80119b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80119b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119b4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80119b8:	441a      	add	r2, r3
 80119ba:	896b      	ldrh	r3, [r5, #10]
 80119bc:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80119c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80119c4:	1b5b      	subs	r3, r3, r5
 80119c6:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80119c8:	442b      	add	r3, r5
 80119ca:	4d05      	ldr	r5, [pc, #20]	; (80119e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80119cc:	9503      	str	r5, [sp, #12]
 80119ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80119d2:	6803      	ldr	r3, [r0, #0]
 80119d4:	a903      	add	r1, sp, #12
 80119d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119d8:	4798      	blx	r3
 80119da:	b007      	add	sp, #28
 80119dc:	bd30      	pop	{r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	08021568 	.word	0x08021568

080119e4 <_ZNK8touchgfx4Rect9intersectEss>:
 80119e4:	b510      	push	{r4, lr}
 80119e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80119ea:	428b      	cmp	r3, r1
 80119ec:	dc10      	bgt.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80119ee:	8884      	ldrh	r4, [r0, #4]
 80119f0:	4423      	add	r3, r4
 80119f2:	b21b      	sxth	r3, r3
 80119f4:	4299      	cmp	r1, r3
 80119f6:	da0b      	bge.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 80119f8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80119fc:	4293      	cmp	r3, r2
 80119fe:	dc07      	bgt.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8011a00:	88c0      	ldrh	r0, [r0, #6]
 8011a02:	4418      	add	r0, r3
 8011a04:	b200      	sxth	r0, r0
 8011a06:	4282      	cmp	r2, r0
 8011a08:	bfac      	ite	ge
 8011a0a:	2000      	movge	r0, #0
 8011a0c:	2001      	movlt	r0, #1
 8011a0e:	bd10      	pop	{r4, pc}
 8011a10:	2000      	movs	r0, #0
 8011a12:	e7fc      	b.n	8011a0e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08011a14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a16:	460c      	mov	r4, r1
 8011a18:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8011a1a:	b089      	sub	sp, #36	; 0x24
 8011a1c:	4605      	mov	r5, r0
 8011a1e:	2900      	cmp	r1, #0
 8011a20:	d054      	beq.n	8011acc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8011a22:	4668      	mov	r0, sp
 8011a24:	f7ff ff21 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a28:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8011a2a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8011a2c:	8922      	ldrh	r2, [r4, #8]
 8011a2e:	88e1      	ldrh	r1, [r4, #6]
 8011a30:	443a      	add	r2, r7
 8011a32:	4431      	add	r1, r6
 8011a34:	b212      	sxth	r2, r2
 8011a36:	b209      	sxth	r1, r1
 8011a38:	4668      	mov	r0, sp
 8011a3a:	f7ff ffd3 	bl	80119e4 <_ZNK8touchgfx4Rect9intersectEss>
 8011a3e:	b1d0      	cbz	r0, 8011a76 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8011a40:	89a2      	ldrh	r2, [r4, #12]
 8011a42:	8961      	ldrh	r1, [r4, #10]
 8011a44:	443a      	add	r2, r7
 8011a46:	4431      	add	r1, r6
 8011a48:	b212      	sxth	r2, r2
 8011a4a:	b209      	sxth	r1, r1
 8011a4c:	4668      	mov	r0, sp
 8011a4e:	f7ff ffc9 	bl	80119e4 <_ZNK8touchgfx4Rect9intersectEss>
 8011a52:	4603      	mov	r3, r0
 8011a54:	b978      	cbnz	r0, 8011a76 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8011a56:	4a1e      	ldr	r2, [pc, #120]	; (8011ad0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8011a58:	9204      	str	r2, [sp, #16]
 8011a5a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011a5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a60:	2202      	movs	r2, #2
 8011a62:	f88d 2014 	strb.w	r2, [sp, #20]
 8011a66:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011a6a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011a6e:	6803      	ldr	r3, [r0, #0]
 8011a70:	a904      	add	r1, sp, #16
 8011a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a74:	4798      	blx	r3
 8011a76:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8011a78:	a802      	add	r0, sp, #8
 8011a7a:	f7ff fef6 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011a7e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011a82:	88e0      	ldrh	r0, [r4, #6]
 8011a84:	8961      	ldrh	r1, [r4, #10]
 8011a86:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8011a8a:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8011a8e:	8923      	ldrh	r3, [r4, #8]
 8011a90:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011a92:	7927      	ldrb	r7, [r4, #4]
 8011a94:	f88d 7014 	strb.w	r7, [sp, #20]
 8011a98:	1a80      	subs	r0, r0, r2
 8011a9a:	1a89      	subs	r1, r1, r2
 8011a9c:	89a2      	ldrh	r2, [r4, #12]
 8011a9e:	4c0d      	ldr	r4, [pc, #52]	; (8011ad4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8011aa0:	9404      	str	r4, [sp, #16]
 8011aa2:	4460      	add	r0, ip
 8011aa4:	eba3 030e 	sub.w	r3, r3, lr
 8011aa8:	eba2 020e 	sub.w	r2, r2, lr
 8011aac:	f8ad 0016 	strh.w	r0, [sp, #22]
 8011ab0:	4433      	add	r3, r6
 8011ab2:	4461      	add	r1, ip
 8011ab4:	4432      	add	r2, r6
 8011ab6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011ab8:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011abc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011ac0:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011ac4:	6803      	ldr	r3, [r0, #0]
 8011ac6:	a904      	add	r1, sp, #16
 8011ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011aca:	4798      	blx	r3
 8011acc:	b009      	add	sp, #36	; 0x24
 8011ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ad0:	08021540 	.word	0x08021540
 8011ad4:	08021554 	.word	0x08021554

08011ad8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8011ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011adc:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8011ae0:	790b      	ldrb	r3, [r1, #4]
 8011ae2:	b0a1      	sub	sp, #132	; 0x84
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	460d      	mov	r5, r1
 8011ae8:	f1b9 0f00 	cmp.w	r9, #0
 8011aec:	d00f      	beq.n	8011b0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f040 80a0 	bne.w	8011c34 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8011af4:	b021      	add	sp, #132	; 0x84
 8011af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011afa:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8011afe:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8011b02:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8011b06:	1d20      	adds	r0, r4, #4
 8011b08:	f7fc fe5e 	bl	800e7c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011b0c:	e092      	b.n	8011c34 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1f0      	bne.n	8011af4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011b12:	4b5e      	ldr	r3, [pc, #376]	; (8011c8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8011b1a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8011b1e:	f1ba 0f03 	cmp.w	sl, #3
 8011b22:	ddea      	ble.n	8011afa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8011b24:	f1ba 0f0c 	cmp.w	sl, #12
 8011b28:	f04f 0303 	mov.w	r3, #3
 8011b2c:	bfdc      	itt	le
 8011b2e:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8011b32:	fb92 f3f3 	sdivle	r3, r2, r3
 8011b36:	9301      	str	r3, [sp, #4]
 8011b38:	4b55      	ldr	r3, [pc, #340]	; (8011c90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8011b3a:	4956      	ldr	r1, [pc, #344]	; (8011c94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8011b3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b40:	4b55      	ldr	r3, [pc, #340]	; (8011c98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8011b42:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b4a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011b4e:	ab0e      	add	r3, sp, #56	; 0x38
 8011b50:	2248      	movs	r2, #72	; 0x48
 8011b52:	2600      	movs	r6, #0
 8011b54:	4618      	mov	r0, r3
 8011b56:	960a      	str	r6, [sp, #40]	; 0x28
 8011b58:	f00c fcc2 	bl	801e4e0 <memcpy>
 8011b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b60:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8011b64:	f8cd a008 	str.w	sl, [sp, #8]
 8011b68:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	46b3      	mov	fp, r6
 8011b74:	9303      	str	r3, [sp, #12]
 8011b76:	2300      	movs	r3, #0
 8011b78:	9309      	str	r3, [sp, #36]	; 0x24
 8011b7a:	9b07      	ldr	r3, [sp, #28]
 8011b7c:	9a03      	ldr	r2, [sp, #12]
 8011b7e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8011b82:	88ef      	ldrh	r7, [r5, #6]
 8011b84:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8011b88:	fb13 f302 	smulbb	r3, r3, r2
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	9304      	str	r3, [sp, #16]
 8011b90:	9b07      	ldr	r3, [sp, #28]
 8011b92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b96:	a80a      	add	r0, sp, #40	; 0x28
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	fb13 f302 	smulbb	r3, r3, r2
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	9305      	str	r3, [sp, #20]
 8011ba2:	9b04      	ldr	r3, [sp, #16]
 8011ba4:	441f      	add	r7, r3
 8011ba6:	9b05      	ldr	r3, [sp, #20]
 8011ba8:	4498      	add	r8, r3
 8011baa:	b23f      	sxth	r7, r7
 8011bac:	fa0f f888 	sxth.w	r8, r8
 8011bb0:	4642      	mov	r2, r8
 8011bb2:	4639      	mov	r1, r7
 8011bb4:	f7ff ff16 	bl	80119e4 <_ZNK8touchgfx4Rect9intersectEss>
 8011bb8:	b380      	cbz	r0, 8011c1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8011bba:	4639      	mov	r1, r7
 8011bbc:	ab09      	add	r3, sp, #36	; 0x24
 8011bbe:	4642      	mov	r2, r8
 8011bc0:	1d20      	adds	r0, r4, #4
 8011bc2:	f7fc fe01 	bl	800e7c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011bc8:	b341      	cbz	r1, 8011c1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8011bca:	4549      	cmp	r1, r9
 8011bcc:	d026      	beq.n	8011c1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8011bce:	a80c      	add	r0, sp, #48	; 0x30
 8011bd0:	f7ff fe4b 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011bd4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8011bd8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011bdc:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8011be0:	2002      	movs	r0, #2
 8011be2:	fb92 f2f0 	sdiv	r2, r2, r0
 8011be6:	440a      	add	r2, r1
 8011be8:	1a99      	subs	r1, r3, r2
 8011bea:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8011bee:	fb93 f3f0 	sdiv	r3, r3, r0
 8011bf2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8011bf6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8011bfa:	4403      	add	r3, r0
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	435b      	muls	r3, r3
 8011c00:	9a06      	ldr	r2, [sp, #24]
 8011c02:	fb01 3301 	mla	r3, r1, r1, r3
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d208      	bcs.n	8011c1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 8011c0a:	9a04      	ldr	r2, [sp, #16]
 8011c0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011c10:	86a2      	strh	r2, [r4, #52]	; 0x34
 8011c12:	9a05      	ldr	r2, [sp, #20]
 8011c14:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8011c18:	86e2      	strh	r2, [r4, #54]	; 0x36
 8011c1a:	9306      	str	r3, [sp, #24]
 8011c1c:	f10b 0b02 	add.w	fp, fp, #2
 8011c20:	f1bb 0f08 	cmp.w	fp, #8
 8011c24:	dda7      	ble.n	8011b76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011c26:	9b02      	ldr	r3, [sp, #8]
 8011c28:	4453      	add	r3, sl
 8011c2a:	9302      	str	r3, [sp, #8]
 8011c2c:	9b01      	ldr	r3, [sp, #4]
 8011c2e:	3601      	adds	r6, #1
 8011c30:	42b3      	cmp	r3, r6
 8011c32:	d199      	bne.n	8011b68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8011c34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011c36:	2900      	cmp	r1, #0
 8011c38:	f43f af5c 	beq.w	8011af4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011c3c:	a80c      	add	r0, sp, #48	; 0x30
 8011c3e:	f7ff fe14 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c42:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011c46:	88ea      	ldrh	r2, [r5, #6]
 8011c48:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8011c4c:	7929      	ldrb	r1, [r5, #4]
 8011c4e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8011c52:	1ad2      	subs	r2, r2, r3
 8011c54:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011c56:	441a      	add	r2, r3
 8011c58:	892b      	ldrh	r3, [r5, #8]
 8011c5a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8011c5e:	1a1b      	subs	r3, r3, r0
 8011c60:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8011c62:	4403      	add	r3, r0
 8011c64:	480d      	ldr	r0, [pc, #52]	; (8011c9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8011c66:	900e      	str	r0, [sp, #56]	; 0x38
 8011c68:	2600      	movs	r6, #0
 8011c6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011c6c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011c70:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8011c74:	6803      	ldr	r3, [r0, #0]
 8011c76:	a90e      	add	r1, sp, #56	; 0x38
 8011c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c7a:	4798      	blx	r3
 8011c7c:	792b      	ldrb	r3, [r5, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f43f af38 	beq.w	8011af4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011c84:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011c88:	e734      	b.n	8011af4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011c8a:	bf00      	nop
 8011c8c:	2002ee78 	.word	0x2002ee78
 8011c90:	2002ee6c 	.word	0x2002ee6c
 8011c94:	0801fa98 	.word	0x0801fa98
 8011c98:	2002ee6e 	.word	0x2002ee6e
 8011c9c:	08021540 	.word	0x08021540

08011ca0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011ca8:	3201      	adds	r2, #1
 8011caa:	d112      	bne.n	8011cd2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8011cac:	6803      	ldr	r3, [r0, #0]
 8011cae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011cb2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011cb6:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011cba:	2500      	movs	r5, #0
 8011cbc:	9500      	str	r5, [sp, #0]
 8011cbe:	466d      	mov	r5, sp
 8011cc0:	4629      	mov	r1, r5
 8011cc2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011cc6:	6a1b      	ldr	r3, [r3, #32]
 8011cc8:	4798      	blx	r3
 8011cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011cce:	e884 0003 	stmia.w	r4, {r0, r1}
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	b003      	add	sp, #12
 8011cd6:	bd30      	pop	{r4, r5, pc}

08011cd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011cd8:	b513      	push	{r0, r1, r4, lr}
 8011cda:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8011cde:	3301      	adds	r3, #1
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	d109      	bne.n	8011cf8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011ce4:	4601      	mov	r1, r0
 8011ce6:	4668      	mov	r0, sp
 8011ce8:	f7ff fdbf 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011cec:	f8bd 3000 	ldrh.w	r3, [sp]
 8011cf0:	8423      	strh	r3, [r4, #32]
 8011cf2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011cf6:	8463      	strh	r3, [r4, #34]	; 0x22
 8011cf8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8011cfc:	b002      	add	sp, #8
 8011cfe:	bd10      	pop	{r4, pc}

08011d00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8011d00:	b513      	push	{r0, r1, r4, lr}
 8011d02:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8011d06:	3301      	adds	r3, #1
 8011d08:	4604      	mov	r4, r0
 8011d0a:	d109      	bne.n	8011d20 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8011d0c:	4601      	mov	r1, r0
 8011d0e:	4668      	mov	r0, sp
 8011d10:	f7ff fdab 	bl	801186a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d14:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d18:	8423      	strh	r3, [r4, #32]
 8011d1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011d1e:	8463      	strh	r3, [r4, #34]	; 0x22
 8011d20:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011d24:	b002      	add	sp, #8
 8011d26:	bd10      	pop	{r4, pc}

08011d28 <_ZN8touchgfx6ScreenC1Ev>:
 8011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2a:	4605      	mov	r5, r0
 8011d2c:	4b17      	ldr	r3, [pc, #92]	; (8011d8c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8011d2e:	f845 3b04 	str.w	r3, [r5], #4
 8011d32:	2301      	movs	r3, #1
 8011d34:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8011d38:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011d3c:	4b14      	ldr	r3, [pc, #80]	; (8011d90 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8011d3e:	4915      	ldr	r1, [pc, #84]	; (8011d94 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011d40:	f9b3 7000 	ldrsh.w	r7, [r3]
 8011d44:	4b14      	ldr	r3, [pc, #80]	; (8011d98 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8011d46:	6041      	str	r1, [r0, #4]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	8102      	strh	r2, [r0, #8]
 8011d4c:	8142      	strh	r2, [r0, #10]
 8011d4e:	8182      	strh	r2, [r0, #12]
 8011d50:	81c2      	strh	r2, [r0, #14]
 8011d52:	8202      	strh	r2, [r0, #16]
 8011d54:	8242      	strh	r2, [r0, #18]
 8011d56:	8282      	strh	r2, [r0, #20]
 8011d58:	82c2      	strh	r2, [r0, #22]
 8011d5a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011d5e:	6202      	str	r2, [r0, #32]
 8011d60:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8011d64:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8011d68:	6342      	str	r2, [r0, #52]	; 0x34
 8011d6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d6e:	4611      	mov	r1, r2
 8011d70:	4604      	mov	r4, r0
 8011d72:	4628      	mov	r0, r5
 8011d74:	f7f9 fcd1 	bl	800b71a <_ZN8touchgfx8Drawable5setXYEss>
 8011d78:	4639      	mov	r1, r7
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	f7f9 fceb 	bl	800b756 <_ZN8touchgfx8Drawable8setWidthEs>
 8011d80:	4628      	mov	r0, r5
 8011d82:	4631      	mov	r1, r6
 8011d84:	f7f9 fcf6 	bl	800b774 <_ZN8touchgfx8Drawable9setHeightEs>
 8011d88:	4620      	mov	r0, r4
 8011d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d8c:	0802157c 	.word	0x0802157c
 8011d90:	2002ee6c 	.word	0x2002ee6c
 8011d94:	08020718 	.word	0x08020718
 8011d98:	2002ee6e 	.word	0x2002ee6e

08011d9c <_ZN8touchgfx6Screen4drawEv>:
 8011d9c:	b507      	push	{r0, r1, r2, lr}
 8011d9e:	4b09      	ldr	r3, [pc, #36]	; (8011dc4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011da0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011da4:	4b08      	ldr	r3, [pc, #32]	; (8011dc8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011da6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dae:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011db2:	6803      	ldr	r3, [r0, #0]
 8011db4:	2100      	movs	r1, #0
 8011db6:	9100      	str	r1, [sp, #0]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	4669      	mov	r1, sp
 8011dbc:	4798      	blx	r3
 8011dbe:	b003      	add	sp, #12
 8011dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dc4:	2002ee6c 	.word	0x2002ee6c
 8011dc8:	2002ee6e 	.word	0x2002ee6e

08011dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011dd4:	b089      	sub	sp, #36	; 0x24
 8011dd6:	4680      	mov	r8, r0
 8011dd8:	460c      	mov	r4, r1
 8011dda:	4615      	mov	r5, r2
 8011ddc:	b16b      	cbz	r3, 8011dfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011dde:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011de2:	b153      	cbz	r3, 8011dfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011de4:	4628      	mov	r0, r5
 8011de6:	f7ff ff5b 	bl	8011ca0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011dea:	4621      	mov	r1, r4
 8011dec:	f7fe ffe2 	bl	8010db4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011df0:	69eb      	ldr	r3, [r5, #28]
 8011df2:	b928      	cbnz	r0, 8011e00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8011df4:	461d      	mov	r5, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1f4      	bne.n	8011de4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8011dfa:	b009      	add	sp, #36	; 0x24
 8011dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e00:	ae04      	add	r6, sp, #16
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d051      	beq.n	8011eaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8011e06:	682b      	ldr	r3, [r5, #0]
 8011e08:	4629      	mov	r1, r5
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	a802      	add	r0, sp, #8
 8011e0e:	4798      	blx	r3
 8011e10:	4628      	mov	r0, r5
 8011e12:	f7ff ff61 	bl	8011cd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011e16:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8011e1a:	4407      	add	r7, r0
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7ff ff6f 	bl	8011d00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011e22:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011e26:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011e2a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011e2e:	4418      	add	r0, r3
 8011e30:	4621      	mov	r1, r4
 8011e32:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011e36:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011e3a:	b23f      	sxth	r7, r7
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e42:	f8ad 7010 	strh.w	r7, [sp, #16]
 8011e46:	f7fc fd71 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	f7ff ff28 	bl	8011ca0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011e50:	4602      	mov	r2, r0
 8011e52:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011e56:	ab06      	add	r3, sp, #24
 8011e58:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fc fd64 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 8011e64:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011e68:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011e6c:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011e70:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011e74:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011e78:	4299      	cmp	r1, r3
 8011e7a:	d10b      	bne.n	8011e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8011e7c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011e80:	4552      	cmp	r2, sl
 8011e82:	d107      	bne.n	8011e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8011e84:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011e88:	455a      	cmp	r2, fp
 8011e8a:	d103      	bne.n	8011e94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8011e8c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011e90:	454a      	cmp	r2, r9
 8011e92:	d00a      	beq.n	8011eaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8011e94:	f1bb 0f00 	cmp.w	fp, #0
 8011e98:	d002      	beq.n	8011ea0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8011e9a:	f1b9 0f00 	cmp.w	r9, #0
 8011e9e:	d12e      	bne.n	8011efe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8011ea0:	69ea      	ldr	r2, [r5, #28]
 8011ea2:	4621      	mov	r1, r4
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	f7ff ff91 	bl	8011dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f7ff fef8 	bl	8011ca0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011eb0:	6861      	ldr	r1, [r4, #4]
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	6820      	ldr	r0, [r4, #0]
 8011eb6:	4633      	mov	r3, r6
 8011eb8:	c303      	stmia	r3!, {r0, r1}
 8011eba:	4611      	mov	r1, r2
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	f7fc fd35 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 8011ec2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d097      	beq.n	8011dfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011eca:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d093      	beq.n	8011dfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	f7ff ff00 	bl	8011cd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011ed8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011edc:	1a18      	subs	r0, r3, r0
 8011ede:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	f7ff ff0c 	bl	8011d00 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011ee8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011eec:	1a18      	subs	r0, r3, r0
 8011eee:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011ef2:	682b      	ldr	r3, [r5, #0]
 8011ef4:	4631      	mov	r1, r6
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	4628      	mov	r0, r5
 8011efa:	4798      	blx	r3
 8011efc:	e77d      	b.n	8011dfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011efe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011f02:	fa1f f08a 	uxth.w	r0, sl
 8011f06:	4552      	cmp	r2, sl
 8011f08:	9000      	str	r0, [sp, #0]
 8011f0a:	da12      	bge.n	8011f32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8011f0c:	9301      	str	r3, [sp, #4]
 8011f0e:	9b00      	ldr	r3, [sp, #0]
 8011f10:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011f14:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011f18:	1a9a      	subs	r2, r3, r2
 8011f1a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011f1e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011f22:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011f26:	69ea      	ldr	r2, [r5, #28]
 8011f28:	4631      	mov	r1, r6
 8011f2a:	4640      	mov	r0, r8
 8011f2c:	f7ff ff4e 	bl	8011dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011f30:	9b01      	ldr	r3, [sp, #4]
 8011f32:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	b29f      	uxth	r7, r3
 8011f3a:	da0d      	bge.n	8011f58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8011f3c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011f40:	1aba      	subs	r2, r7, r2
 8011f42:	f8ad a012 	strh.w	sl, [sp, #18]
 8011f46:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011f4a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011f4e:	69ea      	ldr	r2, [r5, #28]
 8011f50:	4631      	mov	r1, r6
 8011f52:	4640      	mov	r0, r8
 8011f54:	f7ff ff3a 	bl	8011dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011f58:	8822      	ldrh	r2, [r4, #0]
 8011f5a:	88a3      	ldrh	r3, [r4, #4]
 8011f5c:	445f      	add	r7, fp
 8011f5e:	4413      	add	r3, r2
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	b2bf      	uxth	r7, r7
 8011f64:	b23a      	sxth	r2, r7
 8011f66:	b219      	sxth	r1, r3
 8011f68:	4291      	cmp	r1, r2
 8011f6a:	dd0d      	ble.n	8011f88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8011f6c:	1bdb      	subs	r3, r3, r7
 8011f6e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011f72:	f8ad a012 	strh.w	sl, [sp, #18]
 8011f76:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f7a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011f7e:	69ea      	ldr	r2, [r5, #28]
 8011f80:	4631      	mov	r1, r6
 8011f82:	4640      	mov	r0, r8
 8011f84:	f7ff ff22 	bl	8011dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011f88:	88e2      	ldrh	r2, [r4, #6]
 8011f8a:	8863      	ldrh	r3, [r4, #2]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	9a00      	ldr	r2, [sp, #0]
 8011f90:	444a      	add	r2, r9
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	fa1f f982 	uxth.w	r9, r2
 8011f98:	fa0f f289 	sxth.w	r2, r9
 8011f9c:	b219      	sxth	r1, r3
 8011f9e:	428a      	cmp	r2, r1
 8011fa0:	da83      	bge.n	8011eaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8011fa2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011fa6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011faa:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011fae:	eba3 0309 	sub.w	r3, r3, r9
 8011fb2:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011fb6:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011fba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011fbe:	69ea      	ldr	r2, [r5, #28]
 8011fc0:	4631      	mov	r1, r6
 8011fc2:	e76f      	b.n	8011ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08011fc4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fc6:	aa02      	add	r2, sp, #8
 8011fc8:	2300      	movs	r3, #0
 8011fca:	f842 3d04 	str.w	r3, [r2, #-4]!
 8011fce:	4604      	mov	r4, r0
 8011fd0:	3004      	adds	r0, #4
 8011fd2:	460d      	mov	r5, r1
 8011fd4:	f7fc fd81 	bl	800eada <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011fd8:	9a01      	ldr	r2, [sp, #4]
 8011fda:	b11a      	cbz	r2, 8011fe4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8011fdc:	4629      	mov	r1, r5
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f7ff fef4 	bl	8011dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011fe4:	b003      	add	sp, #12
 8011fe6:	bd30      	pop	{r4, r5, pc}

08011fe8 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fea:	4602      	mov	r2, r0
 8011fec:	4604      	mov	r4, r0
 8011fee:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8011ff2:	460d      	mov	r5, r1
 8011ff4:	6851      	ldr	r1, [r2, #4]
 8011ff6:	466b      	mov	r3, sp
 8011ff8:	c303      	stmia	r3!, {r0, r1}
 8011ffa:	4629      	mov	r1, r5
 8011ffc:	4668      	mov	r0, sp
 8011ffe:	f7fc fc95 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 8012002:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012006:	4669      	mov	r1, sp
 8012008:	b123      	cbz	r3, 8012014 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801200a:	4620      	mov	r0, r4
 801200c:	f7ff ffda 	bl	8011fc4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8012010:	b003      	add	sp, #12
 8012012:	bd30      	pop	{r4, r5, pc}
 8012014:	1d20      	adds	r0, r4, #4
 8012016:	f7fc fd27 	bl	800ea68 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801201a:	e7f9      	b.n	8012010 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801201c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801201c:	680a      	ldr	r2, [r1, #0]
 801201e:	460b      	mov	r3, r1
 8012020:	6952      	ldr	r2, [r2, #20]
 8012022:	1d01      	adds	r1, r0, #4
 8012024:	4618      	mov	r0, r3
 8012026:	4710      	bx	r2

08012028 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8012028:	f011 0f40 	tst.w	r1, #64	; 0x40
 801202c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8012030:	4b03      	ldr	r3, [pc, #12]	; (8012040 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8012032:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012036:	bf08      	it	eq
 8012038:	2300      	moveq	r3, #0
 801203a:	4308      	orrs	r0, r1
 801203c:	4318      	orrs	r0, r3
 801203e:	4770      	bx	lr
 8012040:	fffffe00 	.word	0xfffffe00

08012044 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8012044:	7b43      	ldrb	r3, [r0, #13]
 8012046:	7201      	strb	r1, [r0, #8]
 8012048:	b289      	uxth	r1, r1
 801204a:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801204e:	05ca      	lsls	r2, r1, #23
 8012050:	bf48      	it	mi
 8012052:	f043 0320 	orrmi.w	r3, r3, #32
 8012056:	7343      	strb	r3, [r0, #13]
 8012058:	058b      	lsls	r3, r1, #22
 801205a:	bf42      	ittt	mi
 801205c:	7b43      	ldrbmi	r3, [r0, #13]
 801205e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8012062:	7343      	strbmi	r3, [r0, #13]
 8012064:	4770      	bx	lr

08012066 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8012066:	b530      	push	{r4, r5, lr}
 8012068:	2500      	movs	r5, #0
 801206a:	2401      	movs	r4, #1
 801206c:	6843      	ldr	r3, [r0, #4]
 801206e:	b913      	cbnz	r3, 8012076 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8012070:	6803      	ldr	r3, [r0, #0]
 8012072:	b1f3      	cbz	r3, 80120b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8012074:	6043      	str	r3, [r0, #4]
 8012076:	7c03      	ldrb	r3, [r0, #16]
 8012078:	b143      	cbz	r3, 801208c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801207a:	68c3      	ldr	r3, [r0, #12]
 801207c:	b12b      	cbz	r3, 801208a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801207e:	881a      	ldrh	r2, [r3, #0]
 8012080:	b11a      	cbz	r2, 801208a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8012082:	1c9a      	adds	r2, r3, #2
 8012084:	60c2      	str	r2, [r0, #12]
 8012086:	8818      	ldrh	r0, [r3, #0]
 8012088:	bd30      	pop	{r4, r5, pc}
 801208a:	7405      	strb	r5, [r0, #16]
 801208c:	6843      	ldr	r3, [r0, #4]
 801208e:	8819      	ldrh	r1, [r3, #0]
 8012090:	b179      	cbz	r1, 80120b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8012092:	1c9a      	adds	r2, r3, #2
 8012094:	2902      	cmp	r1, #2
 8012096:	6042      	str	r2, [r0, #4]
 8012098:	d1f5      	bne.n	8012086 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801209a:	6883      	ldr	r3, [r0, #8]
 801209c:	1d1a      	adds	r2, r3, #4
 801209e:	6082      	str	r2, [r0, #8]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	60c3      	str	r3, [r0, #12]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d0e1      	beq.n	801206c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80120a8:	881b      	ldrh	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d0de      	beq.n	801206c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80120ae:	7404      	strb	r4, [r0, #16]
 80120b0:	e7dc      	b.n	801206c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80120b2:	2000      	movs	r0, #0
 80120b4:	e7e8      	b.n	8012088 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080120b6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80120b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120b8:	4605      	mov	r5, r0
 80120ba:	4608      	mov	r0, r1
 80120bc:	b1e9      	cbz	r1, 80120fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80120be:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80120c2:	460b      	mov	r3, r1
 80120c4:	f101 0708 	add.w	r7, r1, #8
 80120c8:	4622      	mov	r2, r4
 80120ca:	6818      	ldr	r0, [r3, #0]
 80120cc:	6859      	ldr	r1, [r3, #4]
 80120ce:	4626      	mov	r6, r4
 80120d0:	c603      	stmia	r6!, {r0, r1}
 80120d2:	3308      	adds	r3, #8
 80120d4:	42bb      	cmp	r3, r7
 80120d6:	4634      	mov	r4, r6
 80120d8:	d1f7      	bne.n	80120ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80120da:	6818      	ldr	r0, [r3, #0]
 80120dc:	6030      	str	r0, [r6, #0]
 80120de:	889b      	ldrh	r3, [r3, #4]
 80120e0:	80b3      	strh	r3, [r6, #4]
 80120e2:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80120e6:	015b      	lsls	r3, r3, #5
 80120e8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80120ec:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80120f0:	430b      	orrs	r3, r1
 80120f2:	425b      	negs	r3, r3
 80120f4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80120f8:	4610      	mov	r0, r2
 80120fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120fc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80120fc:	b538      	push	{r3, r4, r5, lr}
 80120fe:	460c      	mov	r4, r1
 8012100:	6811      	ldr	r1, [r2, #0]
 8012102:	4610      	mov	r0, r2
 8012104:	68cd      	ldr	r5, [r1, #12]
 8012106:	4619      	mov	r1, r3
 8012108:	47a8      	blx	r5
 801210a:	2800      	cmp	r0, #0
 801210c:	bf08      	it	eq
 801210e:	4620      	moveq	r0, r4
 8012110:	bd38      	pop	{r3, r4, r5, pc}

08012112 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8012112:	b570      	push	{r4, r5, r6, lr}
 8012114:	8810      	ldrh	r0, [r2, #0]
 8012116:	4298      	cmp	r0, r3
 8012118:	d817      	bhi.n	801214a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801211a:	1e48      	subs	r0, r1, #1
 801211c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8012120:	4298      	cmp	r0, r3
 8012122:	d312      	bcc.n	801214a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012124:	2400      	movs	r4, #0
 8012126:	428c      	cmp	r4, r1
 8012128:	d20f      	bcs.n	801214a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801212a:	1860      	adds	r0, r4, r1
 801212c:	1040      	asrs	r0, r0, #1
 801212e:	0085      	lsls	r5, r0, #2
 8012130:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8012134:	42b3      	cmp	r3, r6
 8012136:	d902      	bls.n	801213e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8012138:	3001      	adds	r0, #1
 801213a:	b284      	uxth	r4, r0
 801213c:	e7f3      	b.n	8012126 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801213e:	d102      	bne.n	8012146 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8012140:	442a      	add	r2, r5
 8012142:	8850      	ldrh	r0, [r2, #2]
 8012144:	bd70      	pop	{r4, r5, r6, pc}
 8012146:	b281      	uxth	r1, r0
 8012148:	e7ed      	b.n	8012126 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801214a:	2000      	movs	r0, #0
 801214c:	e7fa      	b.n	8012144 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08012150 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8012150:	b510      	push	{r4, lr}
 8012152:	8ac3      	ldrh	r3, [r0, #22]
 8012154:	428b      	cmp	r3, r1
 8012156:	d805      	bhi.n	8012164 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8012158:	4b07      	ldr	r3, [pc, #28]	; (8012178 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801215a:	4a08      	ldr	r2, [pc, #32]	; (801217c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801215c:	4808      	ldr	r0, [pc, #32]	; (8012180 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801215e:	21fd      	movs	r1, #253	; 0xfd
 8012160:	f00c f940 	bl	801e3e4 <__assert_func>
 8012164:	8a83      	ldrh	r3, [r0, #20]
 8012166:	240a      	movs	r4, #10
 8012168:	4419      	add	r1, r3
 801216a:	fbb1 f3f4 	udiv	r3, r1, r4
 801216e:	fb04 1113 	mls	r1, r4, r3, r1
 8012172:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8012176:	bd10      	pop	{r4, pc}
 8012178:	080215c9 	.word	0x080215c9
 801217c:	080219f8 	.word	0x080219f8
 8012180:	080215d7 	.word	0x080215d7

08012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8012184:	b508      	push	{r3, lr}
 8012186:	8ac3      	ldrh	r3, [r0, #22]
 8012188:	428b      	cmp	r3, r1
 801218a:	d805      	bhi.n	8012198 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801218c:	4b07      	ldr	r3, [pc, #28]	; (80121ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801218e:	4a08      	ldr	r2, [pc, #32]	; (80121b0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8012190:	4808      	ldr	r0, [pc, #32]	; (80121b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8012192:	21d3      	movs	r1, #211	; 0xd3
 8012194:	f00c f926 	bl	801e3e4 <__assert_func>
 8012198:	8a83      	ldrh	r3, [r0, #20]
 801219a:	220a      	movs	r2, #10
 801219c:	4419      	add	r1, r3
 801219e:	fbb1 f3f2 	udiv	r3, r1, r2
 80121a2:	fb02 1113 	mls	r1, r2, r3, r1
 80121a6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80121aa:	bd08      	pop	{r3, pc}
 80121ac:	080215c9 	.word	0x080215c9
 80121b0:	08021748 	.word	0x08021748
 80121b4:	080215d7 	.word	0x080215d7

080121b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80121b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121bc:	4604      	mov	r4, r0
 80121be:	4688      	mov	r8, r1
 80121c0:	4615      	mov	r5, r2
 80121c2:	b94a      	cbnz	r2, 80121d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 80121c4:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80121c8:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80121cc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80121d0:	4691      	mov	r9, r2
 80121d2:	4648      	mov	r0, r9
 80121d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d8:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80121dc:	8892      	ldrh	r2, [r2, #4]
 80121de:	462b      	mov	r3, r5
 80121e0:	f105 0c08 	add.w	ip, r5, #8
 80121e4:	46b3      	mov	fp, r6
 80121e6:	6818      	ldr	r0, [r3, #0]
 80121e8:	6859      	ldr	r1, [r3, #4]
 80121ea:	4637      	mov	r7, r6
 80121ec:	c703      	stmia	r7!, {r0, r1}
 80121ee:	3308      	adds	r3, #8
 80121f0:	4563      	cmp	r3, ip
 80121f2:	463e      	mov	r6, r7
 80121f4:	d1f7      	bne.n	80121e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 80121f6:	6818      	ldr	r0, [r3, #0]
 80121f8:	6038      	str	r0, [r7, #0]
 80121fa:	889b      	ldrh	r3, [r3, #4]
 80121fc:	80bb      	strh	r3, [r7, #4]
 80121fe:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8012202:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8012206:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801220a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801220e:	18d3      	adds	r3, r2, r3
 8012210:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8012214:	b298      	uxth	r0, r3
 8012216:	ea4a 0a01 	orr.w	sl, sl, r1
 801221a:	281d      	cmp	r0, #29
 801221c:	fa1f f68a 	uxth.w	r6, sl
 8012220:	46d9      	mov	r9, fp
 8012222:	d842      	bhi.n	80122aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 8012224:	2301      	movs	r3, #1
 8012226:	4950      	ldr	r1, [pc, #320]	; (8012368 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b0>)
 8012228:	4083      	lsls	r3, r0
 801222a:	420b      	tst	r3, r1
 801222c:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8012230:	d114      	bne.n	801225c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8012232:	f413 7f60 	tst.w	r3, #896	; 0x380
 8012236:	d03c      	beq.n	80122b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 8012238:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801223c:	fa1f fa8a 	uxth.w	sl, sl
 8012240:	eba1 010a 	sub.w	r1, r1, sl
 8012244:	4658      	mov	r0, fp
 8012246:	b209      	sxth	r1, r1
 8012248:	f7ff fefc 	bl	8012044 <_ZN8touchgfx9GlyphNode6setTopEs>
 801224c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8012250:	1b86      	subs	r6, r0, r6
 8012252:	eba6 0a0a 	sub.w	sl, r6, sl
 8012256:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801225a:	e7ba      	b.n	80121d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801225c:	2100      	movs	r1, #0
 801225e:	f104 001a 	add.w	r0, r4, #26
 8012262:	f7ff ff8f 	bl	8012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8012266:	f640 6333 	movw	r3, #3635	; 0xe33
 801226a:	4298      	cmp	r0, r3
 801226c:	4601      	mov	r1, r0
 801226e:	d10a      	bne.n	8012286 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xce>
 8012270:	f8d8 3000 	ldr.w	r3, [r8]
 8012274:	4640      	mov	r0, r8
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	4798      	blx	r3
 801227a:	7b41      	ldrb	r1, [r0, #13]
 801227c:	7a00      	ldrb	r0, [r0, #8]
 801227e:	f7ff fed3 	bl	8012028 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8012282:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8012286:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801228a:	4431      	add	r1, r6
 801228c:	4451      	add	r1, sl
 801228e:	b209      	sxth	r1, r1
 8012290:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8012294:	4658      	mov	r0, fp
 8012296:	f7ff fed5 	bl	8012044 <_ZN8touchgfx9GlyphNode6setTopEs>
 801229a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801229e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80122a2:	1a9b      	subs	r3, r3, r2
 80122a4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 80122a8:	e793      	b.n	80121d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80122aa:	f640 631b 	movw	r3, #3611	; 0xe1b
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d005      	beq.n	80122be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x106>
 80122b2:	f022 0302 	bic.w	r3, r2, #2
 80122b6:	f640 611d 	movw	r1, #3613	; 0xe1d
 80122ba:	428b      	cmp	r3, r1
 80122bc:	d119      	bne.n	80122f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80122be:	1e53      	subs	r3, r2, #1
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	4642      	mov	r2, r8
 80122c4:	4629      	mov	r1, r5
 80122c6:	4620      	mov	r0, r4
 80122c8:	f7ff ff18 	bl	80120fc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80122cc:	7b41      	ldrb	r1, [r0, #13]
 80122ce:	7a00      	ldrb	r0, [r0, #8]
 80122d0:	f7ff feaa 	bl	8012028 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80122d4:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80122d8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80122dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80122e0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80122e4:	4313      	orrs	r3, r2
 80122e6:	115a      	asrs	r2, r3, #5
 80122e8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80122ec:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80122f0:	e02d      	b.n	801234e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x196>
 80122f2:	4639      	mov	r1, r7
 80122f4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80122f8:	f7ff fe96 	bl	8012028 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80122fc:	f640 6109 	movw	r1, #3593	; 0xe09
 8012300:	f022 0310 	bic.w	r3, r2, #16
 8012304:	428b      	cmp	r3, r1
 8012306:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801230a:	d003      	beq.n	8012314 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 801230c:	f640 6313 	movw	r3, #3603	; 0xe13
 8012310:	429a      	cmp	r2, r3
 8012312:	d126      	bne.n	8012362 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1aa>
 8012314:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012318:	b27f      	sxtb	r7, r7
 801231a:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801231e:	431f      	orrs	r7, r3
 8012320:	f640 6313 	movw	r3, #3603	; 0xe13
 8012324:	429a      	cmp	r2, r3
 8012326:	bf1a      	itte	ne
 8012328:	f102 33ff 	addne.w	r3, r2, #4294967295
 801232c:	b29b      	uxthne	r3, r3
 801232e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8012332:	4642      	mov	r2, r8
 8012334:	4629      	mov	r1, r5
 8012336:	4620      	mov	r0, r4
 8012338:	f7ff fee0 	bl	80120fc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801233c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8012340:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012344:	7a83      	ldrb	r3, [r0, #10]
 8012346:	4313      	orrs	r3, r2
 8012348:	1aff      	subs	r7, r7, r3
 801234a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801234e:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8012352:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8012356:	f7ff fe67 	bl	8012028 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801235a:	1b80      	subs	r0, r0, r6
 801235c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8012360:	e737      	b.n	80121d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8012362:	2300      	movs	r3, #0
 8012364:	e7c2      	b.n	80122ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x134>
 8012366:	bf00      	nop
 8012368:	3fc00079 	.word	0x3fc00079

0801236c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801236c:	3a01      	subs	r2, #1
 801236e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012372:	b292      	uxth	r2, r2
 8012374:	460c      	mov	r4, r1
 8012376:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801237a:	42b2      	cmp	r2, r6
 801237c:	d018      	beq.n	80123b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801237e:	8b01      	ldrh	r1, [r0, #24]
 8012380:	f834 5b02 	ldrh.w	r5, [r4], #2
 8012384:	4291      	cmp	r1, r2
 8012386:	d805      	bhi.n	8012394 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8012388:	4b14      	ldr	r3, [pc, #80]	; (80123dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801238a:	4a15      	ldr	r2, [pc, #84]	; (80123e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801238c:	4815      	ldr	r0, [pc, #84]	; (80123e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 801238e:	21d3      	movs	r1, #211	; 0xd3
 8012390:	f00c f828 	bl	801e3e4 <__assert_func>
 8012394:	8ac1      	ldrh	r1, [r0, #22]
 8012396:	4411      	add	r1, r2
 8012398:	f001 0101 	and.w	r1, r1, #1
 801239c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80123a0:	3a01      	subs	r2, #1
 80123a2:	8a49      	ldrh	r1, [r1, #18]
 80123a4:	428d      	cmp	r5, r1
 80123a6:	b292      	uxth	r2, r2
 80123a8:	d0e7      	beq.n	801237a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 80123aa:	2000      	movs	r0, #0
 80123ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80123b4:	2600      	movs	r6, #0
 80123b6:	441f      	add	r7, r3
 80123b8:	f100 051a 	add.w	r5, r0, #26
 80123bc:	b2b1      	uxth	r1, r6
 80123be:	42b9      	cmp	r1, r7
 80123c0:	da09      	bge.n	80123d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6a>
 80123c2:	4628      	mov	r0, r5
 80123c4:	f7ff fede 	bl	8012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80123c8:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 80123cc:	4540      	cmp	r0, r8
 80123ce:	f106 0601 	add.w	r6, r6, #1
 80123d2:	d0f3      	beq.n	80123bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 80123d4:	e7e9      	b.n	80123aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80123d6:	2001      	movs	r0, #1
 80123d8:	e7e8      	b.n	80123ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80123da:	bf00      	nop
 80123dc:	080215c9 	.word	0x080215c9
 80123e0:	08021b58 	.word	0x08021b58
 80123e4:	080215d7 	.word	0x080215d7

080123e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 80123e8:	b538      	push	{r3, r4, r5, lr}
 80123ea:	8ac3      	ldrh	r3, [r0, #22]
 80123ec:	428b      	cmp	r3, r1
 80123ee:	d205      	bcs.n	80123fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 80123f0:	4b08      	ldr	r3, [pc, #32]	; (8012414 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 80123f2:	4a09      	ldr	r2, [pc, #36]	; (8012418 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 80123f4:	4809      	ldr	r0, [pc, #36]	; (801241c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 80123f6:	21d8      	movs	r1, #216	; 0xd8
 80123f8:	f00b fff4 	bl	801e3e4 <__assert_func>
 80123fc:	8a82      	ldrh	r2, [r0, #20]
 80123fe:	250a      	movs	r5, #10
 8012400:	440a      	add	r2, r1
 8012402:	1a5b      	subs	r3, r3, r1
 8012404:	fbb2 f4f5 	udiv	r4, r2, r5
 8012408:	fb05 2214 	mls	r2, r5, r4, r2
 801240c:	8282      	strh	r2, [r0, #20]
 801240e:	82c3      	strh	r3, [r0, #22]
 8012410:	bd38      	pop	{r3, r4, r5, pc}
 8012412:	bf00      	nop
 8012414:	080215bd 	.word	0x080215bd
 8012418:	08021974 	.word	0x08021974
 801241c:	080215d7 	.word	0x080215d7

08012420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	8ac3      	ldrh	r3, [r0, #22]
 8012424:	2b09      	cmp	r3, #9
 8012426:	d905      	bls.n	8012434 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8012428:	4b08      	ldr	r3, [pc, #32]	; (801244c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801242a:	4a09      	ldr	r2, [pc, #36]	; (8012450 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801242c:	4809      	ldr	r0, [pc, #36]	; (8012454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801242e:	21f7      	movs	r1, #247	; 0xf7
 8012430:	f00b ffd8 	bl	801e3e4 <__assert_func>
 8012434:	8a82      	ldrh	r2, [r0, #20]
 8012436:	250a      	movs	r5, #10
 8012438:	441a      	add	r2, r3
 801243a:	fbb2 f4f5 	udiv	r4, r2, r5
 801243e:	fb05 2214 	mls	r2, r5, r4, r2
 8012442:	3301      	adds	r3, #1
 8012444:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8012448:	82c3      	strh	r3, [r0, #22]
 801244a:	bd38      	pop	{r3, r4, r5, pc}
 801244c:	080215b1 	.word	0x080215b1
 8012450:	080218c5 	.word	0x080218c5
 8012454:	080215d7 	.word	0x080215d7

08012458 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	4604      	mov	r4, r0
 801245c:	f100 051a 	add.w	r5, r0, #26
 8012460:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012462:	2b0a      	cmp	r3, #10
 8012464:	d01c      	beq.n	80124a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8012466:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8012468:	b962      	cbnz	r2, 8012484 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801246a:	f104 051a 	add.w	r5, r4, #26
 801246e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012470:	2b0a      	cmp	r3, #10
 8012472:	d015      	beq.n	80124a0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8012474:	4620      	mov	r0, r4
 8012476:	f7ff fdf6 	bl	8012066 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801247a:	4601      	mov	r1, r0
 801247c:	4628      	mov	r0, r5
 801247e:	f7ff ffcf 	bl	8012420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8012482:	e7f4      	b.n	801246e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8012484:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012486:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801248a:	3301      	adds	r3, #1
 801248c:	f003 0301 	and.w	r3, r3, #1
 8012490:	3a01      	subs	r2, #1
 8012492:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8012494:	86e3      	strh	r3, [r4, #54]	; 0x36
 8012496:	8722      	strh	r2, [r4, #56]	; 0x38
 8012498:	4628      	mov	r0, r5
 801249a:	f7ff ffc1 	bl	8012420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801249e:	e7df      	b.n	8012460 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 80124a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080124a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 80124a4:	2300      	movs	r3, #0
 80124a6:	b510      	push	{r4, lr}
 80124a8:	6043      	str	r3, [r0, #4]
 80124aa:	60c3      	str	r3, [r0, #12]
 80124ac:	7403      	strb	r3, [r0, #16]
 80124ae:	8603      	strh	r3, [r0, #48]	; 0x30
 80124b0:	8303      	strh	r3, [r0, #24]
 80124b2:	8703      	strh	r3, [r0, #56]	; 0x38
 80124b4:	4604      	mov	r4, r0
 80124b6:	f7ff ffcf 	bl	8012458 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80124ba:	4a0a      	ldr	r2, [pc, #40]	; (80124e4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 80124bc:	6813      	ldr	r3, [r2, #0]
 80124be:	4611      	mov	r1, r2
 80124c0:	b913      	cbnz	r3, 80124c8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 80124c2:	6852      	ldr	r2, [r2, #4]
 80124c4:	07d0      	lsls	r0, r2, #31
 80124c6:	d50b      	bpl.n	80124e0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 80124c8:	6849      	ldr	r1, [r1, #4]
 80124ca:	104a      	asrs	r2, r1, #1
 80124cc:	07c9      	lsls	r1, r1, #31
 80124ce:	eb04 0002 	add.w	r0, r4, r2
 80124d2:	bf48      	it	mi
 80124d4:	58a2      	ldrmi	r2, [r4, r2]
 80124d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124da:	bf48      	it	mi
 80124dc:	58d3      	ldrmi	r3, [r2, r3]
 80124de:	4718      	bx	r3
 80124e0:	bd10      	pop	{r4, pc}
 80124e2:	bf00      	nop
 80124e4:	2002de2c 	.word	0x2002de2c

080124e8 <_ZN8touchgfx12TextProviderC1Ev>:
 80124e8:	b510      	push	{r4, lr}
 80124ea:	2300      	movs	r3, #0
 80124ec:	2201      	movs	r2, #1
 80124ee:	4604      	mov	r4, r0
 80124f0:	e9c0 3300 	strd	r3, r3, [r0]
 80124f4:	60c3      	str	r3, [r0, #12]
 80124f6:	7403      	strb	r3, [r0, #16]
 80124f8:	82c3      	strh	r3, [r0, #22]
 80124fa:	8303      	strh	r3, [r0, #24]
 80124fc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80124fe:	8603      	strh	r3, [r0, #48]	; 0x30
 8012500:	86c3      	strh	r3, [r0, #54]	; 0x36
 8012502:	8703      	strh	r3, [r0, #56]	; 0x38
 8012504:	63c3      	str	r3, [r0, #60]	; 0x3c
 8012506:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801250a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801250e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8012512:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8012516:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801251a:	f7ff ffc3 	bl	80124a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801251e:	4620      	mov	r0, r4
 8012520:	bd10      	pop	{r4, pc}

08012522 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8012522:	b410      	push	{r4}
 8012524:	6082      	str	r2, [r0, #8]
 8012526:	6001      	str	r1, [r0, #0]
 8012528:	63c3      	str	r3, [r0, #60]	; 0x3c
 801252a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801252e:	f7ff bfb9 	b.w	80124a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08012534 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8012534:	b508      	push	{r3, lr}
 8012536:	88c2      	ldrh	r2, [r0, #6]
 8012538:	440a      	add	r2, r1
 801253a:	2a02      	cmp	r2, #2
 801253c:	dd05      	ble.n	801254a <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801253e:	4b06      	ldr	r3, [pc, #24]	; (8012558 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8012540:	4a06      	ldr	r2, [pc, #24]	; (801255c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8012542:	4807      	ldr	r0, [pc, #28]	; (8012560 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8012544:	21ec      	movs	r1, #236	; 0xec
 8012546:	f00b ff4d 	bl	801e3e4 <__assert_func>
 801254a:	8883      	ldrh	r3, [r0, #4]
 801254c:	80c2      	strh	r2, [r0, #6]
 801254e:	1a59      	subs	r1, r3, r1
 8012550:	f001 0101 	and.w	r1, r1, #1
 8012554:	8081      	strh	r1, [r0, #4]
 8012556:	bd08      	pop	{r3, pc}
 8012558:	08021603 	.word	0x08021603
 801255c:	08021ad1 	.word	0x08021ad1
 8012560:	080215d7 	.word	0x080215d7

08012564 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8012564:	b508      	push	{r3, lr}
 8012566:	88c3      	ldrh	r3, [r0, #6]
 8012568:	428b      	cmp	r3, r1
 801256a:	d805      	bhi.n	8012578 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801256c:	4b06      	ldr	r3, [pc, #24]	; (8012588 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801256e:	4a07      	ldr	r2, [pc, #28]	; (801258c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8012570:	4807      	ldr	r0, [pc, #28]	; (8012590 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8012572:	21fd      	movs	r1, #253	; 0xfd
 8012574:	f00b ff36 	bl	801e3e4 <__assert_func>
 8012578:	8883      	ldrh	r3, [r0, #4]
 801257a:	4419      	add	r1, r3
 801257c:	f001 0101 	and.w	r1, r1, #1
 8012580:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8012584:	bd08      	pop	{r3, pc}
 8012586:	bf00      	nop
 8012588:	080215c9 	.word	0x080215c9
 801258c:	08021c29 	.word	0x08021c29
 8012590:	080215d7 	.word	0x080215d7

08012594 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8012594:	b570      	push	{r4, r5, r6, lr}
 8012596:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8012598:	4604      	mov	r4, r0
 801259a:	b92a      	cbnz	r2, 80125a8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801259c:	4b12      	ldr	r3, [pc, #72]	; (80125e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801259e:	4a13      	ldr	r2, [pc, #76]	; (80125ec <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80125a0:	4813      	ldr	r0, [pc, #76]	; (80125f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80125a2:	21de      	movs	r1, #222	; 0xde
 80125a4:	f00b ff1e 	bl	801e3e4 <__assert_func>
 80125a8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80125aa:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80125ae:	260a      	movs	r6, #10
 80125b0:	3301      	adds	r3, #1
 80125b2:	8b4d      	ldrh	r5, [r1, #26]
 80125b4:	fbb3 f1f6 	udiv	r1, r3, r6
 80125b8:	3a01      	subs	r2, #1
 80125ba:	fb06 3311 	mls	r3, r6, r1, r3
 80125be:	8602      	strh	r2, [r0, #48]	; 0x30
 80125c0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80125c2:	f7ff ff49 	bl	8012458 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80125c6:	8b23      	ldrh	r3, [r4, #24]
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	bf04      	itt	eq
 80125cc:	2301      	moveq	r3, #1
 80125ce:	8323      	strheq	r3, [r4, #24]
 80125d0:	3412      	adds	r4, #18
 80125d2:	4620      	mov	r0, r4
 80125d4:	2101      	movs	r1, #1
 80125d6:	f7ff ffad 	bl	8012534 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 80125da:	4620      	mov	r0, r4
 80125dc:	462a      	mov	r2, r5
 80125de:	2100      	movs	r1, #0
 80125e0:	f7ff ffc0 	bl	8012564 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 80125e4:	4628      	mov	r0, r5
 80125e6:	bd70      	pop	{r4, r5, r6, pc}
 80125e8:	080215a8 	.word	0x080215a8
 80125ec:	0802181a 	.word	0x0802181a
 80125f0:	080215d7 	.word	0x080215d7

080125f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80125f4:	428a      	cmp	r2, r1
 80125f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125fa:	4604      	mov	r4, r0
 80125fc:	460e      	mov	r6, r1
 80125fe:	4615      	mov	r5, r2
 8012600:	469a      	mov	sl, r3
 8012602:	d92b      	bls.n	801265c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8012604:	1a57      	subs	r7, r2, r1
 8012606:	b2bf      	uxth	r7, r7
 8012608:	f04f 0800 	mov.w	r8, #0
 801260c:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8012610:	f04f 0b0a 	mov.w	fp, #10
 8012614:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012616:	b92b      	cbnz	r3, 8012624 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8012618:	4b24      	ldr	r3, [pc, #144]	; (80126ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801261a:	4a25      	ldr	r2, [pc, #148]	; (80126b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801261c:	21e6      	movs	r1, #230	; 0xe6
 801261e:	4825      	ldr	r0, [pc, #148]	; (80126b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8012620:	f00b fee0 	bl	801e3e4 <__assert_func>
 8012624:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8012626:	3b01      	subs	r3, #1
 8012628:	b29b      	uxth	r3, r3
 801262a:	441a      	add	r2, r3
 801262c:	8623      	strh	r3, [r4, #48]	; 0x30
 801262e:	fbb2 f3fb 	udiv	r3, r2, fp
 8012632:	fb0b 2313 	mls	r3, fp, r3, r2
 8012636:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801263a:	2101      	movs	r1, #1
 801263c:	8b5a      	ldrh	r2, [r3, #26]
 801263e:	9201      	str	r2, [sp, #4]
 8012640:	4648      	mov	r0, r9
 8012642:	f7ff ff77 	bl	8012534 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8012646:	f108 0801 	add.w	r8, r8, #1
 801264a:	9a01      	ldr	r2, [sp, #4]
 801264c:	2100      	movs	r1, #0
 801264e:	4648      	mov	r0, r9
 8012650:	f7ff ff88 	bl	8012564 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8012654:	fa1f f388 	uxth.w	r3, r8
 8012658:	429f      	cmp	r7, r3
 801265a:	d8db      	bhi.n	8012614 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801265c:	f104 071a 	add.w	r7, r4, #26
 8012660:	4631      	mov	r1, r6
 8012662:	4638      	mov	r0, r7
 8012664:	f7ff fec0 	bl	80123e8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8012668:	260a      	movs	r6, #10
 801266a:	b1c5      	cbz	r5, 801269e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801266c:	3d01      	subs	r5, #1
 801266e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012670:	b2ad      	uxth	r5, r5
 8012672:	2b09      	cmp	r3, #9
 8012674:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8012678:	d903      	bls.n	8012682 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801267a:	4b0f      	ldr	r3, [pc, #60]	; (80126b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801267c:	4a0f      	ldr	r2, [pc, #60]	; (80126bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801267e:	21ec      	movs	r1, #236	; 0xec
 8012680:	e7cd      	b.n	801261e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8012682:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8012684:	3109      	adds	r1, #9
 8012686:	3301      	adds	r3, #1
 8012688:	fbb1 f0f6 	udiv	r0, r1, r6
 801268c:	fb06 1110 	mls	r1, r6, r0, r1
 8012690:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8012692:	8623      	strh	r3, [r4, #48]	; 0x30
 8012694:	2100      	movs	r1, #0
 8012696:	4638      	mov	r0, r7
 8012698:	f7ff fd5a 	bl	8012150 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801269c:	e7e5      	b.n	801266a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801269e:	4620      	mov	r0, r4
 80126a0:	b003      	add	sp, #12
 80126a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a6:	f7ff bed7 	b.w	8012458 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80126aa:	bf00      	nop
 80126ac:	080215a8 	.word	0x080215a8
 80126b0:	0802169e 	.word	0x0802169e
 80126b4:	080215d7 	.word	0x080215d7
 80126b8:	08021603 	.word	0x08021603
 80126bc:	08021616 	.word	0x08021616

080126c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80126c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	4605      	mov	r5, r0
 80126c6:	4616      	mov	r6, r2
 80126c8:	1c8c      	adds	r4, r1, #2
 80126ca:	8809      	ldrh	r1, [r1, #0]
 80126cc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80126d0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80126d4:	42b3      	cmp	r3, r6
 80126d6:	d124      	bne.n	8012722 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80126d8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80126dc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80126e0:	f001 070f 	and.w	r7, r1, #15
 80126e4:	f8cd 8000 	str.w	r8, [sp]
 80126e8:	464b      	mov	r3, r9
 80126ea:	4652      	mov	r2, sl
 80126ec:	4621      	mov	r1, r4
 80126ee:	4628      	mov	r0, r5
 80126f0:	f7ff fe3c 	bl	801236c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80126f4:	4683      	mov	fp, r0
 80126f6:	b168      	cbz	r0, 8012714 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80126f8:	eb0a 0109 	add.w	r1, sl, r9
 80126fc:	4441      	add	r1, r8
 80126fe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8012702:	463a      	mov	r2, r7
 8012704:	4649      	mov	r1, r9
 8012706:	4628      	mov	r0, r5
 8012708:	f7ff ff74 	bl	80125f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801270c:	4658      	mov	r0, fp
 801270e:	b003      	add	sp, #12
 8012710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012714:	eb07 010a 	add.w	r1, r7, sl
 8012718:	4449      	add	r1, r9
 801271a:	4441      	add	r1, r8
 801271c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012720:	e7d2      	b.n	80126c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012722:	f04f 0b00 	mov.w	fp, #0
 8012726:	e7f1      	b.n	801270c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08012728 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8012728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801272c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801272e:	886f      	ldrh	r7, [r5, #2]
 8012730:	4604      	mov	r4, r0
 8012732:	087f      	lsrs	r7, r7, #1
 8012734:	260b      	movs	r6, #11
 8012736:	f100 091a 	add.w	r9, r0, #26
 801273a:	3e01      	subs	r6, #1
 801273c:	d013      	beq.n	8012766 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801273e:	2100      	movs	r1, #0
 8012740:	4648      	mov	r0, r9
 8012742:	f7ff fd1f 	bl	8012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8012746:	462a      	mov	r2, r5
 8012748:	4680      	mov	r8, r0
 801274a:	4603      	mov	r3, r0
 801274c:	4639      	mov	r1, r7
 801274e:	4620      	mov	r0, r4
 8012750:	f7ff fcdf 	bl	8012112 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8012754:	b138      	cbz	r0, 8012766 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8012756:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801275a:	4642      	mov	r2, r8
 801275c:	4620      	mov	r0, r4
 801275e:	f7ff ffaf 	bl	80126c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8012762:	2800      	cmp	r0, #0
 8012764:	d1e9      	bne.n	801273a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8012766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801276c:	b570      	push	{r4, r5, r6, lr}
 801276e:	4b1e      	ldr	r3, [pc, #120]	; (80127e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8012770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012774:	4604      	mov	r4, r0
 8012776:	f003 0501 	and.w	r5, r3, #1
 801277a:	b902      	cbnz	r2, 801277e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801277c:	b165      	cbz	r5, 8012798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801277e:	105b      	asrs	r3, r3, #1
 8012780:	f104 061a 	add.w	r6, r4, #26
 8012784:	18e0      	adds	r0, r4, r3
 8012786:	b10d      	cbz	r5, 801278c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8012788:	58e3      	ldr	r3, [r4, r3]
 801278a:	589a      	ldr	r2, [r3, r2]
 801278c:	4790      	blx	r2
 801278e:	2100      	movs	r1, #0
 8012790:	4602      	mov	r2, r0
 8012792:	4630      	mov	r0, r6
 8012794:	f7ff fcdc 	bl	8012150 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8012798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801279a:	b303      	cbz	r3, 80127de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801279c:	f104 051a 	add.w	r5, r4, #26
 80127a0:	2100      	movs	r1, #0
 80127a2:	4628      	mov	r0, r5
 80127a4:	f7ff fcee 	bl	8012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80127a8:	b1c8      	cbz	r0, 80127de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80127aa:	4620      	mov	r0, r4
 80127ac:	f7ff ffbc 	bl	8012728 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 80127b0:	2101      	movs	r1, #1
 80127b2:	4628      	mov	r0, r5
 80127b4:	f7ff fce6 	bl	8012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80127b8:	f640 133f 	movw	r3, #2367	; 0x93f
 80127bc:	4298      	cmp	r0, r3
 80127be:	4606      	mov	r6, r0
 80127c0:	d10d      	bne.n	80127de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80127c2:	2100      	movs	r1, #0
 80127c4:	4628      	mov	r0, r5
 80127c6:	f7ff fcdd 	bl	8012184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80127ca:	2101      	movs	r1, #1
 80127cc:	4602      	mov	r2, r0
 80127ce:	4628      	mov	r0, r5
 80127d0:	f7ff fcbe 	bl	8012150 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80127d4:	4632      	mov	r2, r6
 80127d6:	2100      	movs	r1, #0
 80127d8:	4628      	mov	r0, r5
 80127da:	f7ff fcb9 	bl	8012150 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80127de:	4620      	mov	r0, r4
 80127e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127e4:	f7ff bed6 	b.w	8012594 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80127e8:	2002de34 	.word	0x2002de34

080127ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80127ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ee:	4617      	mov	r7, r2
 80127f0:	461e      	mov	r6, r3
 80127f2:	4605      	mov	r5, r0
 80127f4:	f7ff ffba 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	4604      	mov	r4, r0
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	4601      	mov	r1, r0
 8012800:	4638      	mov	r0, r7
 8012802:	4798      	blx	r3
 8012804:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8012808:	b29b      	uxth	r3, r3
 801280a:	2b7f      	cmp	r3, #127	; 0x7f
 801280c:	4602      	mov	r2, r0
 801280e:	6030      	str	r0, [r6, #0]
 8012810:	d813      	bhi.n	801283a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8012812:	4639      	mov	r1, r7
 8012814:	4628      	mov	r0, r5
 8012816:	f7ff fccf 	bl	80121b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801281a:	6030      	str	r0, [r6, #0]
 801281c:	6833      	ldr	r3, [r6, #0]
 801281e:	b143      	cbz	r3, 8012832 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8012820:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8012824:	7a9b      	ldrb	r3, [r3, #10]
 8012826:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801282a:	4313      	orrs	r3, r2
 801282c:	bf0c      	ite	eq
 801282e:	2301      	moveq	r3, #1
 8012830:	2300      	movne	r3, #0
 8012832:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8012836:	4620      	mov	r0, r4
 8012838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801283a:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801283e:	2b00      	cmp	r3, #0
 8012840:	d0ec      	beq.n	801281c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8012842:	f640 1302 	movw	r3, #2306	; 0x902
 8012846:	429c      	cmp	r4, r3
 8012848:	d1e8      	bne.n	801281c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801284a:	4601      	mov	r1, r0
 801284c:	4628      	mov	r0, r5
 801284e:	f7ff fc32 	bl	80120b6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8012852:	e7e2      	b.n	801281a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08012854 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8012854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012858:	4617      	mov	r7, r2
 801285a:	461e      	mov	r6, r3
 801285c:	4605      	mov	r5, r0
 801285e:	f7ff ff85 	bl	801276c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	4604      	mov	r4, r0
 8012866:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801286a:	4601      	mov	r1, r0
 801286c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012870:	4638      	mov	r0, r7
 8012872:	47c0      	blx	r8
 8012874:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8012878:	b29b      	uxth	r3, r3
 801287a:	2b7f      	cmp	r3, #127	; 0x7f
 801287c:	4602      	mov	r2, r0
 801287e:	6030      	str	r0, [r6, #0]
 8012880:	d814      	bhi.n	80128ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8012882:	4639      	mov	r1, r7
 8012884:	4628      	mov	r0, r5
 8012886:	f7ff fc97 	bl	80121b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801288a:	6030      	str	r0, [r6, #0]
 801288c:	6833      	ldr	r3, [r6, #0]
 801288e:	b143      	cbz	r3, 80128a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8012890:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8012894:	7a9b      	ldrb	r3, [r3, #10]
 8012896:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801289a:	4313      	orrs	r3, r2
 801289c:	bf0c      	ite	eq
 801289e:	2301      	moveq	r3, #1
 80128a0:	2300      	movne	r3, #0
 80128a2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80128a6:	4620      	mov	r0, r4
 80128a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ac:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d0eb      	beq.n	801288c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 80128b4:	f640 1302 	movw	r3, #2306	; 0x902
 80128b8:	429c      	cmp	r4, r3
 80128ba:	d1e7      	bne.n	801288c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 80128bc:	4601      	mov	r1, r0
 80128be:	4628      	mov	r0, r5
 80128c0:	f7ff fbf9 	bl	80120b6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80128c4:	e7e1      	b.n	801288a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

080128c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80128c6:	b530      	push	{r4, r5, lr}
 80128c8:	4604      	mov	r4, r0
 80128ca:	b159      	cbz	r1, 80128e4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80128cc:	b148      	cbz	r0, 80128e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80128ce:	2300      	movs	r3, #0
 80128d0:	b298      	uxth	r0, r3
 80128d2:	4282      	cmp	r2, r0
 80128d4:	d905      	bls.n	80128e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80128d6:	5ccd      	ldrb	r5, [r1, r3]
 80128d8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80128dc:	3301      	adds	r3, #1
 80128de:	2d00      	cmp	r5, #0
 80128e0:	d1f6      	bne.n	80128d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80128e2:	bd30      	pop	{r4, r5, pc}
 80128e4:	4608      	mov	r0, r1
 80128e6:	e7fc      	b.n	80128e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080128e8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80128e8:	4b01      	ldr	r3, [pc, #4]	; (80128f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80128ea:	6018      	str	r0, [r3, #0]
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	2002eef8 	.word	0x2002eef8

080128f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80128f4:	4b07      	ldr	r3, [pc, #28]	; (8012914 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 80128f6:	881a      	ldrh	r2, [r3, #0]
 80128f8:	4282      	cmp	r2, r0
 80128fa:	d809      	bhi.n	8012910 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80128fc:	4b06      	ldr	r3, [pc, #24]	; (8012918 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	4413      	add	r3, r2
 8012902:	4298      	cmp	r0, r3
 8012904:	da04      	bge.n	8012910 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8012906:	4b05      	ldr	r3, [pc, #20]	; (801291c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801290e:	4770      	bx	lr
 8012910:	2000      	movs	r0, #0
 8012912:	4770      	bx	lr
 8012914:	2002ef18 	.word	0x2002ef18
 8012918:	2002ef1c 	.word	0x2002ef1c
 801291c:	2002eefc 	.word	0x2002eefc

08012920 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8012920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012924:	4d26      	ldr	r5, [pc, #152]	; (80129c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8012926:	682b      	ldr	r3, [r5, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d046      	beq.n	80129ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801292c:	4a25      	ldr	r2, [pc, #148]	; (80129c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801292e:	4f26      	ldr	r7, [pc, #152]	; (80129c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8012930:	8810      	ldrh	r0, [r2, #0]
 8012932:	883c      	ldrh	r4, [r7, #0]
 8012934:	4e25      	ldr	r6, [pc, #148]	; (80129cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8012936:	4420      	add	r0, r4
 8012938:	1c42      	adds	r2, r0, #1
 801293a:	f022 0201 	bic.w	r2, r2, #1
 801293e:	0412      	lsls	r2, r2, #16
 8012940:	0c12      	lsrs	r2, r2, #16
 8012942:	0051      	lsls	r1, r2, #1
 8012944:	220e      	movs	r2, #14
 8012946:	fb02 fc04 	mul.w	ip, r2, r4
 801294a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801294e:	4c20      	ldr	r4, [pc, #128]	; (80129d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8012950:	eb03 0208 	add.w	r2, r3, r8
 8012954:	eb08 0e01 	add.w	lr, r8, r1
 8012958:	6022      	str	r2, [r4, #0]
 801295a:	eb03 020e 	add.w	r2, r3, lr
 801295e:	6032      	str	r2, [r6, #0]
 8012960:	44e6      	add	lr, ip
 8012962:	4a1c      	ldr	r2, [pc, #112]	; (80129d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8012964:	4473      	add	r3, lr
 8012966:	6013      	str	r3, [r2, #0]
 8012968:	4a1b      	ldr	r2, [pc, #108]	; (80129d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801296a:	2300      	movs	r3, #0
 801296c:	8013      	strh	r3, [r2, #0]
 801296e:	4a1b      	ldr	r2, [pc, #108]	; (80129dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8012970:	6812      	ldr	r2, [r2, #0]
 8012972:	eba2 0208 	sub.w	r2, r2, r8
 8012976:	1a52      	subs	r2, r2, r1
 8012978:	4919      	ldr	r1, [pc, #100]	; (80129e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801297a:	eba2 020c 	sub.w	r2, r2, ip
 801297e:	600a      	str	r2, [r1, #0]
 8012980:	4a18      	ldr	r2, [pc, #96]	; (80129e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8012982:	469c      	mov	ip, r3
 8012984:	8013      	strh	r3, [r2, #0]
 8012986:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801298a:	4283      	cmp	r3, r0
 801298c:	d10d      	bne.n	80129aa <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801298e:	883d      	ldrh	r5, [r7, #0]
 8012990:	6830      	ldr	r0, [r6, #0]
 8012992:	2300      	movs	r3, #0
 8012994:	240e      	movs	r4, #14
 8012996:	429d      	cmp	r5, r3
 8012998:	d90f      	bls.n	80129ba <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801299a:	fb04 0203 	mla	r2, r4, r3, r0
 801299e:	3301      	adds	r3, #1
 80129a0:	7b11      	ldrb	r1, [r2, #12]
 80129a2:	f36f 1145 	bfc	r1, #5, #1
 80129a6:	7311      	strb	r1, [r2, #12]
 80129a8:	e7f5      	b.n	8012996 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 80129aa:	682a      	ldr	r2, [r5, #0]
 80129ac:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80129b0:	6822      	ldr	r2, [r4, #0]
 80129b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80129b6:	3301      	adds	r3, #1
 80129b8:	e7e7      	b.n	801298a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 80129ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129be:	bf00      	nop
 80129c0:	2002eefc 	.word	0x2002eefc
 80129c4:	2002ef18 	.word	0x2002ef18
 80129c8:	2002ef1c 	.word	0x2002ef1c
 80129cc:	2002ef00 	.word	0x2002ef00
 80129d0:	2002ef10 	.word	0x2002ef10
 80129d4:	2002ef08 	.word	0x2002ef08
 80129d8:	2002ef1a 	.word	0x2002ef1a
 80129dc:	2002ef04 	.word	0x2002ef04
 80129e0:	2002ef14 	.word	0x2002ef14
 80129e4:	2002ef0c 	.word	0x2002ef0c

080129e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	4b10      	ldr	r3, [pc, #64]	; (8012a2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	b9db      	cbnz	r3, 8012a28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80129f0:	b1d1      	cbz	r1, 8012a28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80129f2:	4b0f      	ldr	r3, [pc, #60]	; (8012a30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80129f4:	801a      	strh	r2, [r3, #0]
 80129f6:	4b0f      	ldr	r3, [pc, #60]	; (8012a34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80129f8:	881b      	ldrh	r3, [r3, #0]
 80129fa:	b292      	uxth	r2, r2
 80129fc:	240e      	movs	r4, #14
 80129fe:	4413      	add	r3, r2
 8012a00:	4362      	muls	r2, r4
 8012a02:	2406      	movs	r4, #6
 8012a04:	fb04 2203 	mla	r2, r4, r3, r2
 8012a08:	428a      	cmp	r2, r1
 8012a0a:	d305      	bcc.n	8012a18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8012a0c:	4b0a      	ldr	r3, [pc, #40]	; (8012a38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8012a0e:	4a0b      	ldr	r2, [pc, #44]	; (8012a3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8012a10:	480b      	ldr	r0, [pc, #44]	; (8012a40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8012a12:	2137      	movs	r1, #55	; 0x37
 8012a14:	f00b fce6 	bl	801e3e4 <__assert_func>
 8012a18:	4b0a      	ldr	r3, [pc, #40]	; (8012a44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8012a1a:	6019      	str	r1, [r3, #0]
 8012a1c:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8012a1e:	6018      	str	r0, [r3, #0]
 8012a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a24:	f7ff bf7c 	b.w	8012920 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8012a28:	bd10      	pop	{r4, pc}
 8012a2a:	bf00      	nop
 8012a2c:	2002ef08 	.word	0x2002ef08
 8012a30:	2002ef1c 	.word	0x2002ef1c
 8012a34:	2002ef18 	.word	0x2002ef18
 8012a38:	08021d5e 	.word	0x08021d5e
 8012a3c:	08021db7 	.word	0x08021db7
 8012a40:	08021d39 	.word	0x08021d39
 8012a44:	2002ef04 	.word	0x2002ef04
 8012a48:	2002eefc 	.word	0x2002eefc

08012a4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8012a4c:	b470      	push	{r4, r5, r6}
 8012a4e:	4c07      	ldr	r4, [pc, #28]	; (8012a6c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8012a50:	6826      	ldr	r6, [r4, #0]
 8012a52:	4605      	mov	r5, r0
 8012a54:	4610      	mov	r0, r2
 8012a56:	9a03      	ldr	r2, [sp, #12]
 8012a58:	b936      	cbnz	r6, 8012a68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8012a5a:	6025      	str	r5, [r4, #0]
 8012a5c:	4c04      	ldr	r4, [pc, #16]	; (8012a70 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8012a5e:	8021      	strh	r1, [r4, #0]
 8012a60:	bc70      	pop	{r4, r5, r6}
 8012a62:	4619      	mov	r1, r3
 8012a64:	f7ff bfc0 	b.w	80129e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8012a68:	bc70      	pop	{r4, r5, r6}
 8012a6a:	4770      	bx	lr
 8012a6c:	2002ef20 	.word	0x2002ef20
 8012a70:	2002ef18 	.word	0x2002ef18

08012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8012a74:	b508      	push	{r3, lr}
 8012a76:	4b14      	ldr	r3, [pc, #80]	; (8012ac8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8012a78:	6819      	ldr	r1, [r3, #0]
 8012a7a:	b931      	cbnz	r1, 8012a8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8012a7c:	4b13      	ldr	r3, [pc, #76]	; (8012acc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8012a7e:	4a14      	ldr	r2, [pc, #80]	; (8012ad0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8012a80:	4814      	ldr	r0, [pc, #80]	; (8012ad4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8012a82:	f240 21e6 	movw	r1, #742	; 0x2e6
 8012a86:	f00b fcad 	bl	801e3e4 <__assert_func>
 8012a8a:	4a13      	ldr	r2, [pc, #76]	; (8012ad8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8012a8c:	8803      	ldrh	r3, [r0, #0]
 8012a8e:	8812      	ldrh	r2, [r2, #0]
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d204      	bcs.n	8012a9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8012a94:	2214      	movs	r2, #20
 8012a96:	fb02 1303 	mla	r3, r2, r3, r1
 8012a9a:	8918      	ldrh	r0, [r3, #8]
 8012a9c:	bd08      	pop	{r3, pc}
 8012a9e:	490f      	ldr	r1, [pc, #60]	; (8012adc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8012aa0:	8809      	ldrh	r1, [r1, #0]
 8012aa2:	4411      	add	r1, r2
 8012aa4:	428b      	cmp	r3, r1
 8012aa6:	da06      	bge.n	8012ab6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8012aa8:	1a9b      	subs	r3, r3, r2
 8012aaa:	4a0d      	ldr	r2, [pc, #52]	; (8012ae0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8012aac:	6812      	ldr	r2, [r2, #0]
 8012aae:	210e      	movs	r1, #14
 8012ab0:	fb01 2303 	mla	r3, r1, r3, r2
 8012ab4:	e7f1      	b.n	8012a9a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8012ab6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012aba:	4293      	cmp	r3, r2
 8012abc:	bf0a      	itet	eq
 8012abe:	4b09      	ldreq	r3, [pc, #36]	; (8012ae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8012ac0:	2000      	movne	r0, #0
 8012ac2:	8818      	ldrheq	r0, [r3, #0]
 8012ac4:	e7ea      	b.n	8012a9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8012ac6:	bf00      	nop
 8012ac8:	2002ef20 	.word	0x2002ef20
 8012acc:	08021078 	.word	0x08021078
 8012ad0:	08021e64 	.word	0x08021e64
 8012ad4:	08021d39 	.word	0x08021d39
 8012ad8:	2002ef18 	.word	0x2002ef18
 8012adc:	2002ef1c 	.word	0x2002ef1c
 8012ae0:	2002ef00 	.word	0x2002ef00
 8012ae4:	2002ee6c 	.word	0x2002ee6c

08012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8012ae8:	b508      	push	{r3, lr}
 8012aea:	4b14      	ldr	r3, [pc, #80]	; (8012b3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8012aec:	6819      	ldr	r1, [r3, #0]
 8012aee:	b931      	cbnz	r1, 8012afe <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8012af0:	4b13      	ldr	r3, [pc, #76]	; (8012b40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8012af2:	4a14      	ldr	r2, [pc, #80]	; (8012b44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8012af4:	4814      	ldr	r0, [pc, #80]	; (8012b48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8012af6:	f240 21fa 	movw	r1, #762	; 0x2fa
 8012afa:	f00b fc73 	bl	801e3e4 <__assert_func>
 8012afe:	4a13      	ldr	r2, [pc, #76]	; (8012b4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8012b00:	8803      	ldrh	r3, [r0, #0]
 8012b02:	8812      	ldrh	r2, [r2, #0]
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d204      	bcs.n	8012b12 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8012b08:	2214      	movs	r2, #20
 8012b0a:	fb02 1303 	mla	r3, r2, r3, r1
 8012b0e:	8958      	ldrh	r0, [r3, #10]
 8012b10:	bd08      	pop	{r3, pc}
 8012b12:	490f      	ldr	r1, [pc, #60]	; (8012b50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8012b14:	8809      	ldrh	r1, [r1, #0]
 8012b16:	4411      	add	r1, r2
 8012b18:	428b      	cmp	r3, r1
 8012b1a:	da06      	bge.n	8012b2a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8012b1c:	1a9b      	subs	r3, r3, r2
 8012b1e:	4a0d      	ldr	r2, [pc, #52]	; (8012b54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8012b20:	6812      	ldr	r2, [r2, #0]
 8012b22:	210e      	movs	r1, #14
 8012b24:	fb01 2303 	mla	r3, r1, r3, r2
 8012b28:	e7f1      	b.n	8012b0e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8012b2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	bf0a      	itet	eq
 8012b32:	4b09      	ldreq	r3, [pc, #36]	; (8012b58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8012b34:	2000      	movne	r0, #0
 8012b36:	8818      	ldrheq	r0, [r3, #0]
 8012b38:	e7ea      	b.n	8012b10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8012b3a:	bf00      	nop
 8012b3c:	2002ef20 	.word	0x2002ef20
 8012b40:	08021078 	.word	0x08021078
 8012b44:	08021e90 	.word	0x08021e90
 8012b48:	08021d39 	.word	0x08021d39
 8012b4c:	2002ef18 	.word	0x2002ef18
 8012b50:	2002ef1c 	.word	0x2002ef1c
 8012b54:	2002ef00 	.word	0x2002ef00
 8012b58:	2002ee6e 	.word	0x2002ee6e

08012b5c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8012b5c:	b510      	push	{r4, lr}
 8012b5e:	4b23      	ldr	r3, [pc, #140]	; (8012bec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8012b60:	681c      	ldr	r4, [r3, #0]
 8012b62:	b934      	cbnz	r4, 8012b72 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8012b64:	4b22      	ldr	r3, [pc, #136]	; (8012bf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8012b66:	4a23      	ldr	r2, [pc, #140]	; (8012bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8012b68:	4823      	ldr	r0, [pc, #140]	; (8012bf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8012b6a:	f240 310e 	movw	r1, #782	; 0x30e
 8012b6e:	f00b fc39 	bl	801e3e4 <__assert_func>
 8012b72:	4a22      	ldr	r2, [pc, #136]	; (8012bfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8012b74:	880b      	ldrh	r3, [r1, #0]
 8012b76:	8812      	ldrh	r2, [r2, #0]
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d211      	bcs.n	8012ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8012b7c:	2214      	movs	r2, #20
 8012b7e:	fb02 4303 	mla	r3, r2, r3, r4
 8012b82:	8a1a      	ldrh	r2, [r3, #16]
 8012b84:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8012b88:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8012b8c:	8a5b      	ldrh	r3, [r3, #18]
 8012b8e:	8004      	strh	r4, [r0, #0]
 8012b90:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b98:	8041      	strh	r1, [r0, #2]
 8012b9a:	8082      	strh	r2, [r0, #4]
 8012b9c:	80c3      	strh	r3, [r0, #6]
 8012b9e:	e00e      	b.n	8012bbe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8012ba0:	4917      	ldr	r1, [pc, #92]	; (8012c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8012ba2:	8809      	ldrh	r1, [r1, #0]
 8012ba4:	4411      	add	r1, r2
 8012ba6:	428b      	cmp	r3, r1
 8012ba8:	da0a      	bge.n	8012bc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8012baa:	1a9b      	subs	r3, r3, r2
 8012bac:	4a15      	ldr	r2, [pc, #84]	; (8012c04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8012bae:	6812      	ldr	r2, [r2, #0]
 8012bb0:	210e      	movs	r1, #14
 8012bb2:	fb01 2303 	mla	r3, r1, r3, r2
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	6002      	str	r2, [r0, #0]
 8012bba:	685a      	ldr	r2, [r3, #4]
 8012bbc:	6042      	str	r2, [r0, #4]
 8012bbe:	bd10      	pop	{r4, pc}
 8012bc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d10b      	bne.n	8012be0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8012bc8:	4b0f      	ldr	r3, [pc, #60]	; (8012c08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8012bca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012bce:	4b0f      	ldr	r3, [pc, #60]	; (8012c0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8012bd0:	8081      	strh	r1, [r0, #4]
 8012bd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bd6:	80c2      	strh	r2, [r0, #6]
 8012bd8:	2300      	movs	r3, #0
 8012bda:	8003      	strh	r3, [r0, #0]
 8012bdc:	8043      	strh	r3, [r0, #2]
 8012bde:	e7ee      	b.n	8012bbe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8012be0:	2300      	movs	r3, #0
 8012be2:	8003      	strh	r3, [r0, #0]
 8012be4:	8043      	strh	r3, [r0, #2]
 8012be6:	8083      	strh	r3, [r0, #4]
 8012be8:	e7d8      	b.n	8012b9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8012bea:	bf00      	nop
 8012bec:	2002ef20 	.word	0x2002ef20
 8012bf0:	08021078 	.word	0x08021078
 8012bf4:	08021dfd 	.word	0x08021dfd
 8012bf8:	08021d39 	.word	0x08021d39
 8012bfc:	2002ef18 	.word	0x2002ef18
 8012c00:	2002ef1c 	.word	0x2002ef1c
 8012c04:	2002ef00 	.word	0x2002ef00
 8012c08:	2002ee6c 	.word	0x2002ee6c
 8012c0c:	2002ee6e 	.word	0x2002ee6e

08012c10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8012c10:	4b18      	ldr	r3, [pc, #96]	; (8012c74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	b34b      	cbz	r3, 8012c6a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8012c16:	4a18      	ldr	r2, [pc, #96]	; (8012c78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8012c18:	8800      	ldrh	r0, [r0, #0]
 8012c1a:	8812      	ldrh	r2, [r2, #0]
 8012c1c:	4290      	cmp	r0, r2
 8012c1e:	d211      	bcs.n	8012c44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8012c20:	2214      	movs	r2, #20
 8012c22:	fb02 3300 	mla	r3, r2, r0, r3
 8012c26:	8a1a      	ldrh	r2, [r3, #16]
 8012c28:	8919      	ldrh	r1, [r3, #8]
 8012c2a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012c2e:	428a      	cmp	r2, r1
 8012c30:	db1d      	blt.n	8012c6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8012c32:	8a58      	ldrh	r0, [r3, #18]
 8012c34:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8012c38:	895b      	ldrh	r3, [r3, #10]
 8012c3a:	4298      	cmp	r0, r3
 8012c3c:	bfac      	ite	ge
 8012c3e:	2000      	movge	r0, #0
 8012c40:	2001      	movlt	r0, #1
 8012c42:	4770      	bx	lr
 8012c44:	4b0d      	ldr	r3, [pc, #52]	; (8012c7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	4413      	add	r3, r2
 8012c4a:	4298      	cmp	r0, r3
 8012c4c:	da0d      	bge.n	8012c6a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8012c4e:	4b0c      	ldr	r3, [pc, #48]	; (8012c80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	1a80      	subs	r0, r0, r2
 8012c54:	220e      	movs	r2, #14
 8012c56:	fb02 3300 	mla	r3, r2, r0, r3
 8012c5a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8012c5e:	891a      	ldrh	r2, [r3, #8]
 8012c60:	4291      	cmp	r1, r2
 8012c62:	db04      	blt.n	8012c6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8012c64:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012c68:	e7e6      	b.n	8012c38 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8012c6a:	2000      	movs	r0, #0
 8012c6c:	4770      	bx	lr
 8012c6e:	2001      	movs	r0, #1
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	2002ef20 	.word	0x2002ef20
 8012c78:	2002ef18 	.word	0x2002ef18
 8012c7c:	2002ef1c 	.word	0x2002ef1c
 8012c80:	2002ef00 	.word	0x2002ef00

08012c84 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012c84:	b508      	push	{r3, lr}
 8012c86:	4b12      	ldr	r3, [pc, #72]	; (8012cd0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012c88:	6819      	ldr	r1, [r3, #0]
 8012c8a:	b931      	cbnz	r1, 8012c9a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8012c8c:	4b11      	ldr	r3, [pc, #68]	; (8012cd4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8012c8e:	4a12      	ldr	r2, [pc, #72]	; (8012cd8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012c90:	4812      	ldr	r0, [pc, #72]	; (8012cdc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012c92:	f240 3132 	movw	r1, #818	; 0x332
 8012c96:	f00b fba5 	bl	801e3e4 <__assert_func>
 8012c9a:	8803      	ldrh	r3, [r0, #0]
 8012c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d012      	beq.n	8012cca <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8012ca4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d103      	bne.n	8012cb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8012cac:	4b0c      	ldr	r3, [pc, #48]	; (8012ce0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8012cb2:	bd08      	pop	{r3, pc}
 8012cb4:	4a0b      	ldr	r2, [pc, #44]	; (8012ce4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8012cb6:	6812      	ldr	r2, [r2, #0]
 8012cb8:	b11a      	cbz	r2, 8012cc2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8012cba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	d1f7      	bne.n	8012cb2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012cc2:	2214      	movs	r2, #20
 8012cc4:	4353      	muls	r3, r2
 8012cc6:	58c8      	ldr	r0, [r1, r3]
 8012cc8:	e7f3      	b.n	8012cb2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012cca:	2000      	movs	r0, #0
 8012ccc:	e7f1      	b.n	8012cb2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012cce:	bf00      	nop
 8012cd0:	2002ef20 	.word	0x2002ef20
 8012cd4:	08021078 	.word	0x08021078
 8012cd8:	08021e33 	.word	0x08021e33
 8012cdc:	08021d39 	.word	0x08021d39
 8012ce0:	2002ee78 	.word	0x2002ee78
 8012ce4:	2002eefc 	.word	0x2002eefc

08012ce8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8012ce8:	8802      	ldrh	r2, [r0, #0]
 8012cea:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d840      	bhi.n	8012d74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8012cf2:	4b21      	ldr	r3, [pc, #132]	; (8012d78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d220      	bcs.n	8012d3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8012cfa:	4b20      	ldr	r3, [pc, #128]	; (8012d7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8012cfc:	6819      	ldr	r1, [r3, #0]
 8012cfe:	2314      	movs	r3, #20
 8012d00:	fb03 1302 	mla	r3, r3, r2, r1
 8012d04:	6858      	ldr	r0, [r3, #4]
 8012d06:	2800      	cmp	r0, #0
 8012d08:	d035      	beq.n	8012d76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012d0a:	491d      	ldr	r1, [pc, #116]	; (8012d80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8012d0c:	6809      	ldr	r1, [r1, #0]
 8012d0e:	2900      	cmp	r1, #0
 8012d10:	d031      	beq.n	8012d76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012d12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012d16:	b371      	cbz	r1, 8012d76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012d18:	895a      	ldrh	r2, [r3, #10]
 8012d1a:	8918      	ldrh	r0, [r3, #8]
 8012d1c:	4350      	muls	r0, r2
 8012d1e:	7c5a      	ldrb	r2, [r3, #17]
 8012d20:	7cdb      	ldrb	r3, [r3, #19]
 8012d22:	0952      	lsrs	r2, r2, #5
 8012d24:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012d28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8012d2c:	2b0b      	cmp	r3, #11
 8012d2e:	bf18      	it	ne
 8012d30:	0040      	lslne	r0, r0, #1
 8012d32:	3003      	adds	r0, #3
 8012d34:	f020 0003 	bic.w	r0, r0, #3
 8012d38:	4408      	add	r0, r1
 8012d3a:	4770      	bx	lr
 8012d3c:	4911      	ldr	r1, [pc, #68]	; (8012d84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8012d3e:	8809      	ldrh	r1, [r1, #0]
 8012d40:	4419      	add	r1, r3
 8012d42:	428a      	cmp	r2, r1
 8012d44:	da16      	bge.n	8012d74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8012d46:	4910      	ldr	r1, [pc, #64]	; (8012d88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8012d48:	6809      	ldr	r1, [r1, #0]
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	200e      	movs	r0, #14
 8012d4e:	fb00 1303 	mla	r3, r0, r3, r1
 8012d52:	7b19      	ldrb	r1, [r3, #12]
 8012d54:	f001 011f 	and.w	r1, r1, #31
 8012d58:	290b      	cmp	r1, #11
 8012d5a:	d10b      	bne.n	8012d74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8012d5c:	8919      	ldrh	r1, [r3, #8]
 8012d5e:	8958      	ldrh	r0, [r3, #10]
 8012d60:	4b07      	ldr	r3, [pc, #28]	; (8012d80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8012d62:	4348      	muls	r0, r1
 8012d64:	6819      	ldr	r1, [r3, #0]
 8012d66:	3003      	adds	r0, #3
 8012d68:	f020 0303 	bic.w	r3, r0, #3
 8012d6c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012d70:	4418      	add	r0, r3
 8012d72:	4770      	bx	lr
 8012d74:	2000      	movs	r0, #0
 8012d76:	4770      	bx	lr
 8012d78:	2002ef18 	.word	0x2002ef18
 8012d7c:	2002ef20 	.word	0x2002ef20
 8012d80:	2002eefc 	.word	0x2002eefc
 8012d84:	2002ef1c 	.word	0x2002ef1c
 8012d88:	2002ef00 	.word	0x2002ef00

08012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8012d8c:	4b19      	ldr	r3, [pc, #100]	; (8012df4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8012d8e:	6819      	ldr	r1, [r3, #0]
 8012d90:	8803      	ldrh	r3, [r0, #0]
 8012d92:	b1e9      	cbz	r1, 8012dd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8012d94:	4a18      	ldr	r2, [pc, #96]	; (8012df8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8012d96:	8812      	ldrh	r2, [r2, #0]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d90a      	bls.n	8012db2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8012d9c:	2214      	movs	r2, #20
 8012d9e:	fb02 1303 	mla	r3, r2, r3, r1
 8012da2:	7c58      	ldrb	r0, [r3, #17]
 8012da4:	0942      	lsrs	r2, r0, #5
 8012da6:	7cd8      	ldrb	r0, [r3, #19]
 8012da8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8012dac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8012db0:	4770      	bx	lr
 8012db2:	4912      	ldr	r1, [pc, #72]	; (8012dfc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8012db4:	8809      	ldrh	r1, [r1, #0]
 8012db6:	4411      	add	r1, r2
 8012db8:	428b      	cmp	r3, r1
 8012dba:	da09      	bge.n	8012dd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8012dbc:	1a9b      	subs	r3, r3, r2
 8012dbe:	4a10      	ldr	r2, [pc, #64]	; (8012e00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8012dc0:	6812      	ldr	r2, [r2, #0]
 8012dc2:	210e      	movs	r1, #14
 8012dc4:	fb01 2303 	mla	r3, r1, r3, r2
 8012dc8:	7b18      	ldrb	r0, [r3, #12]
 8012dca:	f000 001f 	and.w	r0, r0, #31
 8012dce:	4770      	bx	lr
 8012dd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012dd4:	4293      	cmp	r3, r2
 8012dd6:	d10a      	bne.n	8012dee <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8012dd8:	4b0a      	ldr	r3, [pc, #40]	; (8012e04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012de0:	b10a      	cbz	r2, 8012de6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8012de2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012de4:	b900      	cbnz	r0, 8012de8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8012de6:	6898      	ldr	r0, [r3, #8]
 8012de8:	6803      	ldr	r3, [r0, #0]
 8012dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dec:	4718      	bx	r3
 8012dee:	2000      	movs	r0, #0
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop
 8012df4:	2002ef20 	.word	0x2002ef20
 8012df8:	2002ef18 	.word	0x2002ef18
 8012dfc:	2002ef1c 	.word	0x2002ef1c
 8012e00:	2002ef00 	.word	0x2002ef00
 8012e04:	2002ee78 	.word	0x2002ee78

08012e08 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8012e08:	2010      	movs	r0, #16
 8012e0a:	4770      	bx	lr

08012e0c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8012e0c:	2000      	movs	r0, #0
 8012e0e:	4770      	bx	lr

08012e10 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 8012e10:	00d2      	lsls	r2, r2, #3
 8012e12:	0209      	lsls	r1, r1, #8
 8012e14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8012e18:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8012e1c:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8012e20:	4310      	orrs	r0, r2
 8012e22:	4770      	bx	lr

08012e24 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8012e24:	1209      	asrs	r1, r1, #8
 8012e26:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8012e2a:	4770      	bx	lr

08012e2c <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8012e2c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8012e30:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8012e34:	4770      	bx	lr

08012e36 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8012e36:	00c9      	lsls	r1, r1, #3
 8012e38:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8012e3c:	4770      	bx	lr

08012e3e <_ZN8touchgfx8LCD16bpp4initEv>:
 8012e3e:	4770      	bx	lr

08012e40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012e40:	2bff      	cmp	r3, #255	; 0xff
 8012e42:	d050      	beq.n	8012ee6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8012e44:	2a0b      	cmp	r2, #11
 8012e46:	d04a      	beq.n	8012ede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8012e48:	d80e      	bhi.n	8012e68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8012e4a:	2a03      	cmp	r2, #3
 8012e4c:	d03f      	beq.n	8012ece <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8012e4e:	d804      	bhi.n	8012e5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012e50:	2a01      	cmp	r2, #1
 8012e52:	d03e      	beq.n	8012ed2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8012e54:	d93f      	bls.n	8012ed6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8012e56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012e58:	4770      	bx	lr
 8012e5a:	2a09      	cmp	r2, #9
 8012e5c:	d03f      	beq.n	8012ede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8012e5e:	d83c      	bhi.n	8012eda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8012e60:	2a08      	cmp	r2, #8
 8012e62:	d03a      	beq.n	8012eda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8012e64:	2000      	movs	r0, #0
 8012e66:	4770      	bx	lr
 8012e68:	2a2f      	cmp	r2, #47	; 0x2f
 8012e6a:	d024      	beq.n	8012eb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8012e6c:	d80d      	bhi.n	8012e8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8012e6e:	2a2d      	cmp	r2, #45	; 0x2d
 8012e70:	d014      	beq.n	8012e9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8012e72:	d826      	bhi.n	8012ec2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8012e74:	2a2c      	cmp	r2, #44	; 0x2c
 8012e76:	d1f5      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012e78:	684b      	ldr	r3, [r1, #4]
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d018      	beq.n	8012eb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8012e80:	d323      	bcc.n	8012eca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8012e82:	2b02      	cmp	r3, #2
 8012e84:	d1ee      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012e86:	6880      	ldr	r0, [r0, #8]
 8012e88:	4770      	bx	lr
 8012e8a:	2a31      	cmp	r2, #49	; 0x31
 8012e8c:	d004      	beq.n	8012e98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8012e8e:	d328      	bcc.n	8012ee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012e90:	2a32      	cmp	r2, #50	; 0x32
 8012e92:	d026      	beq.n	8012ee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012e94:	2a33      	cmp	r2, #51	; 0x33
 8012e96:	d1e5      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012e98:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8012e9a:	4770      	bx	lr
 8012e9c:	684b      	ldr	r3, [r1, #4]
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d004      	beq.n	8012eae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012ea4:	d30b      	bcc.n	8012ebe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012ea6:	2b02      	cmp	r3, #2
 8012ea8:	d1dc      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012eaa:	6900      	ldr	r0, [r0, #16]
 8012eac:	4770      	bx	lr
 8012eae:	6a00      	ldr	r0, [r0, #32]
 8012eb0:	4770      	bx	lr
 8012eb2:	6980      	ldr	r0, [r0, #24]
 8012eb4:	4770      	bx	lr
 8012eb6:	684b      	ldr	r3, [r1, #4]
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d1d2      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012ebe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012ec0:	4770      	bx	lr
 8012ec2:	684b      	ldr	r3, [r1, #4]
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d1cc      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012eca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012ecc:	4770      	bx	lr
 8012ece:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012ed0:	4770      	bx	lr
 8012ed2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012ed4:	4770      	bx	lr
 8012ed6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8012ed8:	4770      	bx	lr
 8012eda:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8012edc:	4770      	bx	lr
 8012ede:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8012ee0:	4770      	bx	lr
 8012ee2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012ee4:	4770      	bx	lr
 8012ee6:	2a0b      	cmp	r2, #11
 8012ee8:	d049      	beq.n	8012f7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012eea:	d80e      	bhi.n	8012f0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8012eec:	2a03      	cmp	r2, #3
 8012eee:	d040      	beq.n	8012f72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8012ef0:	d804      	bhi.n	8012efc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8012ef2:	2a01      	cmp	r2, #1
 8012ef4:	d03f      	beq.n	8012f76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8012ef6:	d940      	bls.n	8012f7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8012ef8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8012efa:	4770      	bx	lr
 8012efc:	2a09      	cmp	r2, #9
 8012efe:	d03e      	beq.n	8012f7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012f00:	d801      	bhi.n	8012f06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8012f02:	2a08      	cmp	r2, #8
 8012f04:	d1ae      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f06:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8012f08:	4770      	bx	lr
 8012f0a:	2a2f      	cmp	r2, #47	; 0x2f
 8012f0c:	d024      	beq.n	8012f58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8012f0e:	d80d      	bhi.n	8012f2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8012f10:	2a2d      	cmp	r2, #45	; 0x2d
 8012f12:	d014      	beq.n	8012f3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8012f14:	d826      	bhi.n	8012f64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8012f16:	2a2c      	cmp	r2, #44	; 0x2c
 8012f18:	d1a4      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f1a:	684b      	ldr	r3, [r1, #4]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d018      	beq.n	8012f54 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8012f22:	d324      	bcc.n	8012f6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d19d      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f28:	68c0      	ldr	r0, [r0, #12]
 8012f2a:	4770      	bx	lr
 8012f2c:	2a31      	cmp	r2, #49	; 0x31
 8012f2e:	d004      	beq.n	8012f3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8012f30:	d327      	bcc.n	8012f82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8012f32:	2a32      	cmp	r2, #50	; 0x32
 8012f34:	d025      	beq.n	8012f82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8012f36:	2a33      	cmp	r2, #51	; 0x33
 8012f38:	d194      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f3a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8012f3c:	4770      	bx	lr
 8012f3e:	684b      	ldr	r3, [r1, #4]
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d004      	beq.n	8012f50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8012f46:	d30b      	bcc.n	8012f60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8012f48:	2b02      	cmp	r3, #2
 8012f4a:	d18b      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f4c:	6940      	ldr	r0, [r0, #20]
 8012f4e:	4770      	bx	lr
 8012f50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012f52:	4770      	bx	lr
 8012f54:	69c0      	ldr	r0, [r0, #28]
 8012f56:	4770      	bx	lr
 8012f58:	684b      	ldr	r3, [r1, #4]
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d181      	bne.n	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f60:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012f62:	4770      	bx	lr
 8012f64:	684b      	ldr	r3, [r1, #4]
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f47f af7b 	bne.w	8012e64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012f6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8012f70:	4770      	bx	lr
 8012f72:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012f74:	4770      	bx	lr
 8012f76:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012f78:	4770      	bx	lr
 8012f7a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012f7c:	4770      	bx	lr
 8012f7e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8012f80:	4770      	bx	lr
 8012f82:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8012f84:	4770      	bx	lr

08012f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f8a:	b087      	sub	sp, #28
 8012f8c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012f8e:	9205      	str	r2, [sp, #20]
 8012f90:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012f94:	9202      	str	r2, [sp, #8]
 8012f96:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8012f9a:	9101      	str	r1, [sp, #4]
 8012f9c:	6871      	ldr	r1, [r6, #4]
 8012f9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012fa0:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8012fa4:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8012fa8:	fb01 2505 	mla	r5, r1, r5, r2
 8012fac:	6832      	ldr	r2, [r6, #0]
 8012fae:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8012fb2:	6802      	ldr	r2, [r0, #0]
 8012fb4:	9203      	str	r2, [sp, #12]
 8012fb6:	6842      	ldr	r2, [r0, #4]
 8012fb8:	fa1f fe84 	uxth.w	lr, r4
 8012fbc:	3204      	adds	r2, #4
 8012fbe:	43e4      	mvns	r4, r4
 8012fc0:	9204      	str	r2, [sp, #16]
 8012fc2:	b2e4      	uxtb	r4, r4
 8012fc4:	9a01      	ldr	r2, [sp, #4]
 8012fc6:	2a00      	cmp	r2, #0
 8012fc8:	dc03      	bgt.n	8012fd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8012fca:	9a05      	ldr	r2, [sp, #20]
 8012fcc:	2a00      	cmp	r2, #0
 8012fce:	f340 8119 	ble.w	8013204 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8012fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fd4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012fda:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	dd0f      	ble.n	8013002 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8012fe2:	1408      	asrs	r0, r1, #16
 8012fe4:	d406      	bmi.n	8012ff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012fe6:	4540      	cmp	r0, r8
 8012fe8:	da04      	bge.n	8012ff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012fea:	1410      	asrs	r0, r2, #16
 8012fec:	d402      	bmi.n	8012ff4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012fee:	9e02      	ldr	r6, [sp, #8]
 8012ff0:	42b0      	cmp	r0, r6
 8012ff2:	db07      	blt.n	8013004 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012ff4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012ff6:	4401      	add	r1, r0
 8012ff8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012ffa:	3b01      	subs	r3, #1
 8012ffc:	4402      	add	r2, r0
 8012ffe:	3502      	adds	r5, #2
 8013000:	e7ed      	b.n	8012fde <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8013002:	d00f      	beq.n	8013024 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8013004:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013006:	1e58      	subs	r0, r3, #1
 8013008:	fb06 1600 	mla	r6, r6, r0, r1
 801300c:	1436      	asrs	r6, r6, #16
 801300e:	d547      	bpl.n	80130a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8013010:	469b      	mov	fp, r3
 8013012:	46aa      	mov	sl, r5
 8013014:	f1bb 0f00 	cmp.w	fp, #0
 8013018:	f300 809e 	bgt.w	8013158 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801301c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013020:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8013024:	9b01      	ldr	r3, [sp, #4]
 8013026:	2b00      	cmp	r3, #0
 8013028:	f340 80ec 	ble.w	8013204 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801302c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013034:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013038:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801303a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801303e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013042:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013046:	eef0 6a62 	vmov.f32	s13, s5
 801304a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801304e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013052:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013056:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801305a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801305e:	eef0 6a43 	vmov.f32	s13, s6
 8013062:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013066:	ee12 2a90 	vmov	r2, s5
 801306a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801306e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013072:	ee13 2a10 	vmov	r2, s6
 8013076:	9313      	str	r3, [sp, #76]	; 0x4c
 8013078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801307a:	fb92 f3f3 	sdiv	r3, r2, r3
 801307e:	9314      	str	r3, [sp, #80]	; 0x50
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	9a05      	ldr	r2, [sp, #20]
 8013084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013088:	3b01      	subs	r3, #1
 801308a:	9301      	str	r3, [sp, #4]
 801308c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8013090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013092:	eeb0 3a67 	vmov.f32	s6, s15
 8013096:	bf08      	it	eq
 8013098:	4613      	moveq	r3, r2
 801309a:	eef0 2a47 	vmov.f32	s5, s14
 801309e:	e791      	b.n	8012fc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80130a0:	4546      	cmp	r6, r8
 80130a2:	dab5      	bge.n	8013010 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80130a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80130a6:	fb06 2000 	mla	r0, r6, r0, r2
 80130aa:	1400      	asrs	r0, r0, #16
 80130ac:	d4b0      	bmi.n	8013010 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80130ae:	9e02      	ldr	r6, [sp, #8]
 80130b0:	42b0      	cmp	r0, r6
 80130b2:	daad      	bge.n	8013010 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80130b4:	469a      	mov	sl, r3
 80130b6:	46ab      	mov	fp, r5
 80130b8:	f1ba 0f00 	cmp.w	sl, #0
 80130bc:	ddae      	ble.n	801301c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80130be:	9f03      	ldr	r7, [sp, #12]
 80130c0:	1410      	asrs	r0, r2, #16
 80130c2:	140e      	asrs	r6, r1, #16
 80130c4:	fb08 7000 	mla	r0, r8, r0, r7
 80130c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130cc:	5d80      	ldrb	r0, [r0, r6]
 80130ce:	9e04      	ldr	r6, [sp, #16]
 80130d0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 80130d4:	f8bb 6000 	ldrh.w	r6, [fp]
 80130d8:	1237      	asrs	r7, r6, #8
 80130da:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80130de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80130e2:	fb17 f704 	smulbb	r7, r7, r4
 80130e6:	ea4f 09e6 	mov.w	r9, r6, asr #3
 80130ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80130ee:	00f6      	lsls	r6, r6, #3
 80130f0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80130f4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80130f8:	10c7      	asrs	r7, r0, #3
 80130fa:	b2f6      	uxtb	r6, r6
 80130fc:	00c0      	lsls	r0, r0, #3
 80130fe:	fb19 f904 	smulbb	r9, r9, r4
 8013102:	fb16 f604 	smulbb	r6, r6, r4
 8013106:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801310a:	b2c0      	uxtb	r0, r0
 801310c:	fa1f fc8c 	uxth.w	ip, ip
 8013110:	fb07 970e 	mla	r7, r7, lr, r9
 8013114:	fb00 600e 	mla	r0, r0, lr, r6
 8013118:	b280      	uxth	r0, r0
 801311a:	b2bf      	uxth	r7, r7
 801311c:	f10c 0601 	add.w	r6, ip, #1
 8013120:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8013124:	f107 0901 	add.w	r9, r7, #1
 8013128:	1c46      	adds	r6, r0, #1
 801312a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801312e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8013132:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013134:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013138:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801313c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8013140:	ea4c 0c06 	orr.w	ip, ip, r6
 8013144:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8013148:	4401      	add	r1, r0
 801314a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801314c:	ea4c 0c09 	orr.w	ip, ip, r9
 8013150:	f82b cb02 	strh.w	ip, [fp], #2
 8013154:	4402      	add	r2, r0
 8013156:	e7af      	b.n	80130b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8013158:	140e      	asrs	r6, r1, #16
 801315a:	d44a      	bmi.n	80131f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801315c:	4546      	cmp	r6, r8
 801315e:	da48      	bge.n	80131f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8013160:	1410      	asrs	r0, r2, #16
 8013162:	d446      	bmi.n	80131f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8013164:	9f02      	ldr	r7, [sp, #8]
 8013166:	42b8      	cmp	r0, r7
 8013168:	da43      	bge.n	80131f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 801316a:	9f03      	ldr	r7, [sp, #12]
 801316c:	fb08 7000 	mla	r0, r8, r0, r7
 8013170:	5d80      	ldrb	r0, [r0, r6]
 8013172:	9e04      	ldr	r6, [sp, #16]
 8013174:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8013178:	f8ba 6000 	ldrh.w	r6, [sl]
 801317c:	1237      	asrs	r7, r6, #8
 801317e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013182:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013186:	fb17 f704 	smulbb	r7, r7, r4
 801318a:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801318e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013192:	00f6      	lsls	r6, r6, #3
 8013194:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8013198:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801319c:	10c7      	asrs	r7, r0, #3
 801319e:	b2f6      	uxtb	r6, r6
 80131a0:	00c0      	lsls	r0, r0, #3
 80131a2:	fb19 f904 	smulbb	r9, r9, r4
 80131a6:	fb16 f604 	smulbb	r6, r6, r4
 80131aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80131ae:	b2c0      	uxtb	r0, r0
 80131b0:	fa1f fc8c 	uxth.w	ip, ip
 80131b4:	fb07 970e 	mla	r7, r7, lr, r9
 80131b8:	fb00 600e 	mla	r0, r0, lr, r6
 80131bc:	b2bf      	uxth	r7, r7
 80131be:	b280      	uxth	r0, r0
 80131c0:	f10c 0601 	add.w	r6, ip, #1
 80131c4:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80131c8:	f107 0901 	add.w	r9, r7, #1
 80131cc:	1c46      	adds	r6, r0, #1
 80131ce:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80131d2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80131d6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80131da:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80131de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80131e2:	ea4c 0c06 	orr.w	ip, ip, r6
 80131e6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80131ea:	ea4c 0c09 	orr.w	ip, ip, r9
 80131ee:	f8aa c000 	strh.w	ip, [sl]
 80131f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80131f4:	4401      	add	r1, r0
 80131f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80131f8:	f10a 0a02 	add.w	sl, sl, #2
 80131fc:	4402      	add	r2, r0
 80131fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013202:	e707      	b.n	8013014 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8013204:	b007      	add	sp, #28
 8013206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801320a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801320a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320e:	b085      	sub	sp, #20
 8013210:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8013214:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013216:	9203      	str	r2, [sp, #12]
 8013218:	6842      	ldr	r2, [r0, #4]
 801321a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801321c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801321e:	6800      	ldr	r0, [r0, #0]
 8013220:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8013224:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8013228:	4696      	mov	lr, r2
 801322a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801322c:	fb0e 2505 	mla	r5, lr, r5, r2
 8013230:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013234:	6860      	ldr	r0, [r4, #4]
 8013236:	6822      	ldr	r2, [r4, #0]
 8013238:	9201      	str	r2, [sp, #4]
 801323a:	1d02      	adds	r2, r0, #4
 801323c:	9202      	str	r2, [sp, #8]
 801323e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013242:	2900      	cmp	r1, #0
 8013244:	dc03      	bgt.n	801324e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8013246:	9a03      	ldr	r2, [sp, #12]
 8013248:	2a00      	cmp	r2, #0
 801324a:	f340 809b 	ble.w	8013384 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 801324e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013250:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013256:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801325a:	2b00      	cmp	r3, #0
 801325c:	dd0e      	ble.n	801327c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801325e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8013262:	d406      	bmi.n	8013272 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8013264:	45e6      	cmp	lr, ip
 8013266:	da04      	bge.n	8013272 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8013268:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801326c:	d401      	bmi.n	8013272 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801326e:	45c6      	cmp	lr, r8
 8013270:	db05      	blt.n	801327e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013272:	443c      	add	r4, r7
 8013274:	4430      	add	r0, r6
 8013276:	3b01      	subs	r3, #1
 8013278:	3502      	adds	r5, #2
 801327a:	e7ee      	b.n	801325a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801327c:	d010      	beq.n	80132a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801327e:	f103 3eff 	add.w	lr, r3, #4294967295
 8013282:	fb07 490e 	mla	r9, r7, lr, r4
 8013286:	ea5f 4929 	movs.w	r9, r9, asr #16
 801328a:	d53d      	bpl.n	8013308 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801328c:	469e      	mov	lr, r3
 801328e:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8013292:	f1be 0f00 	cmp.w	lr, #0
 8013296:	dc58      	bgt.n	801334a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8013298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801329c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80132a0:	2900      	cmp	r1, #0
 80132a2:	dd6f      	ble.n	8013384 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 80132a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80132a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80132ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80132b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132b2:	3901      	subs	r1, #1
 80132b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80132b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80132bc:	eeb0 6a62 	vmov.f32	s12, s5
 80132c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80132c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80132c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80132cc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80132d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80132d4:	eeb0 6a43 	vmov.f32	s12, s6
 80132d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80132dc:	ee12 2a90 	vmov	r2, s5
 80132e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80132e4:	fb92 f7f3 	sdiv	r7, r2, r3
 80132e8:	ee13 2a10 	vmov	r2, s6
 80132ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80132f0:	fb92 f6f3 	sdiv	r6, r2, r3
 80132f4:	9a03      	ldr	r2, [sp, #12]
 80132f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80132fa:	bf08      	it	eq
 80132fc:	4613      	moveq	r3, r2
 80132fe:	eeb0 3a67 	vmov.f32	s6, s15
 8013302:	eef0 2a47 	vmov.f32	s5, s14
 8013306:	e79c      	b.n	8013242 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8013308:	45e1      	cmp	r9, ip
 801330a:	dabf      	bge.n	801328c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 801330c:	fb06 0e0e 	mla	lr, r6, lr, r0
 8013310:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8013314:	d4ba      	bmi.n	801328c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8013316:	45c6      	cmp	lr, r8
 8013318:	dab8      	bge.n	801328c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 801331a:	469e      	mov	lr, r3
 801331c:	46aa      	mov	sl, r5
 801331e:	f1be 0f00 	cmp.w	lr, #0
 8013322:	ddb9      	ble.n	8013298 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8013324:	9a01      	ldr	r2, [sp, #4]
 8013326:	ea4f 4920 	mov.w	r9, r0, asr #16
 801332a:	ea4f 4b24 	mov.w	fp, r4, asr #16
 801332e:	fb0c 2909 	mla	r9, ip, r9, r2
 8013332:	9a02      	ldr	r2, [sp, #8]
 8013334:	f819 900b 	ldrb.w	r9, [r9, fp]
 8013338:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 801333c:	f82a 9b02 	strh.w	r9, [sl], #2
 8013340:	443c      	add	r4, r7
 8013342:	4430      	add	r0, r6
 8013344:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013348:	e7e9      	b.n	801331e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801334a:	ea5f 4a24 	movs.w	sl, r4, asr #16
 801334e:	d414      	bmi.n	801337a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8013350:	45e2      	cmp	sl, ip
 8013352:	da12      	bge.n	801337a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8013354:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013358:	d40f      	bmi.n	801337a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801335a:	45c1      	cmp	r9, r8
 801335c:	da0d      	bge.n	801337a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801335e:	9a01      	ldr	r2, [sp, #4]
 8013360:	fb0c 2909 	mla	r9, ip, r9, r2
 8013364:	9a02      	ldr	r2, [sp, #8]
 8013366:	f819 900a 	ldrb.w	r9, [r9, sl]
 801336a:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 801336e:	f06f 0201 	mvn.w	r2, #1
 8013372:	fb02 f90e 	mul.w	r9, r2, lr
 8013376:	f82b a009 	strh.w	sl, [fp, r9]
 801337a:	443c      	add	r4, r7
 801337c:	4430      	add	r0, r6
 801337e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013382:	e786      	b.n	8013292 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8013384:	b005      	add	sp, #20
 8013386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801338a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801338a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801338e:	b087      	sub	sp, #28
 8013390:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8013392:	9205      	str	r2, [sp, #20]
 8013394:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013398:	9202      	str	r2, [sp, #8]
 801339a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801339e:	9101      	str	r1, [sp, #4]
 80133a0:	6871      	ldr	r1, [r6, #4]
 80133a2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80133a4:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 80133a8:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80133ac:	fb01 2404 	mla	r4, r1, r4, r2
 80133b0:	6832      	ldr	r2, [r6, #0]
 80133b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80133b6:	682a      	ldr	r2, [r5, #0]
 80133b8:	9203      	str	r2, [sp, #12]
 80133ba:	686a      	ldr	r2, [r5, #4]
 80133bc:	fa1f fc80 	uxth.w	ip, r0
 80133c0:	3204      	adds	r2, #4
 80133c2:	43c0      	mvns	r0, r0
 80133c4:	9200      	str	r2, [sp, #0]
 80133c6:	b2c0      	uxtb	r0, r0
 80133c8:	9a01      	ldr	r2, [sp, #4]
 80133ca:	2a00      	cmp	r2, #0
 80133cc:	dc03      	bgt.n	80133d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80133ce:	9a05      	ldr	r2, [sp, #20]
 80133d0:	2a00      	cmp	r2, #0
 80133d2:	f340 811b 	ble.w	801360c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80133d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80133d8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80133dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	dd0f      	ble.n	8013406 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80133e6:	140d      	asrs	r5, r1, #16
 80133e8:	d406      	bmi.n	80133f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80133ea:	4575      	cmp	r5, lr
 80133ec:	da04      	bge.n	80133f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80133ee:	1415      	asrs	r5, r2, #16
 80133f0:	d402      	bmi.n	80133f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80133f2:	9e02      	ldr	r6, [sp, #8]
 80133f4:	42b5      	cmp	r5, r6
 80133f6:	db07      	blt.n	8013408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80133f8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80133fa:	4429      	add	r1, r5
 80133fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80133fe:	3b01      	subs	r3, #1
 8013400:	442a      	add	r2, r5
 8013402:	3402      	adds	r4, #2
 8013404:	e7ed      	b.n	80133e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8013406:	d00f      	beq.n	8013428 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8013408:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801340a:	1e5d      	subs	r5, r3, #1
 801340c:	fb06 1605 	mla	r6, r6, r5, r1
 8013410:	1436      	asrs	r6, r6, #16
 8013412:	d547      	bpl.n	80134a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8013414:	469a      	mov	sl, r3
 8013416:	46a1      	mov	r9, r4
 8013418:	f1ba 0f00 	cmp.w	sl, #0
 801341c:	f300 809f 	bgt.w	801355e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8013420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013424:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013428:	9b01      	ldr	r3, [sp, #4]
 801342a:	2b00      	cmp	r3, #0
 801342c:	f340 80ee 	ble.w	801360c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8013430:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013438:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801343c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801343e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013442:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013446:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801344a:	eef0 6a62 	vmov.f32	s13, s5
 801344e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013452:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013456:	ee77 2a62 	vsub.f32	s5, s14, s5
 801345a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801345e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013462:	eef0 6a43 	vmov.f32	s13, s6
 8013466:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801346a:	ee12 2a90 	vmov	r2, s5
 801346e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013472:	fb92 f3f3 	sdiv	r3, r2, r3
 8013476:	ee13 2a10 	vmov	r2, s6
 801347a:	9313      	str	r3, [sp, #76]	; 0x4c
 801347c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801347e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013482:	9314      	str	r3, [sp, #80]	; 0x50
 8013484:	9b01      	ldr	r3, [sp, #4]
 8013486:	9a05      	ldr	r2, [sp, #20]
 8013488:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801348c:	3b01      	subs	r3, #1
 801348e:	9301      	str	r3, [sp, #4]
 8013490:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8013494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013496:	eeb0 3a67 	vmov.f32	s6, s15
 801349a:	bf08      	it	eq
 801349c:	4613      	moveq	r3, r2
 801349e:	eef0 2a47 	vmov.f32	s5, s14
 80134a2:	e791      	b.n	80133c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80134a4:	4576      	cmp	r6, lr
 80134a6:	dab5      	bge.n	8013414 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80134a8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80134aa:	fb06 2505 	mla	r5, r6, r5, r2
 80134ae:	142d      	asrs	r5, r5, #16
 80134b0:	d4b0      	bmi.n	8013414 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80134b2:	9e02      	ldr	r6, [sp, #8]
 80134b4:	42b5      	cmp	r5, r6
 80134b6:	daad      	bge.n	8013414 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80134b8:	4699      	mov	r9, r3
 80134ba:	46a2      	mov	sl, r4
 80134bc:	f1b9 0f00 	cmp.w	r9, #0
 80134c0:	ddae      	ble.n	8013420 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80134c2:	9f03      	ldr	r7, [sp, #12]
 80134c4:	1415      	asrs	r5, r2, #16
 80134c6:	140e      	asrs	r6, r1, #16
 80134c8:	fb0e 7505 	mla	r5, lr, r5, r7
 80134cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80134d0:	f815 8006 	ldrb.w	r8, [r5, r6]
 80134d4:	9d00      	ldr	r5, [sp, #0]
 80134d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80134da:	eb05 0b08 	add.w	fp, r5, r8
 80134de:	f8ba 5000 	ldrh.w	r5, [sl]
 80134e2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80134e6:	f89b b001 	ldrb.w	fp, [fp, #1]
 80134ea:	122f      	asrs	r7, r5, #8
 80134ec:	fb16 f60c 	smulbb	r6, r6, ip
 80134f0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80134f4:	fb07 6700 	mla	r7, r7, r0, r6
 80134f8:	10ee      	asrs	r6, r5, #3
 80134fa:	fb1b fb0c 	smulbb	fp, fp, ip
 80134fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013502:	fb06 b600 	mla	r6, r6, r0, fp
 8013506:	b2b6      	uxth	r6, r6
 8013508:	9604      	str	r6, [sp, #16]
 801350a:	9e00      	ldr	r6, [sp, #0]
 801350c:	00ed      	lsls	r5, r5, #3
 801350e:	f816 8008 	ldrb.w	r8, [r6, r8]
 8013512:	b2ed      	uxtb	r5, r5
 8013514:	fb15 f500 	smulbb	r5, r5, r0
 8013518:	b2bf      	uxth	r7, r7
 801351a:	fb08 580c 	mla	r8, r8, ip, r5
 801351e:	fa1f f888 	uxth.w	r8, r8
 8013522:	1c7d      	adds	r5, r7, #1
 8013524:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8013528:	f108 0501 	add.w	r5, r8, #1
 801352c:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8013530:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013534:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013538:	432f      	orrs	r7, r5
 801353a:	9d04      	ldr	r5, [sp, #16]
 801353c:	f105 0b01 	add.w	fp, r5, #1
 8013540:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8013544:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013546:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801354a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801354e:	4429      	add	r1, r5
 8013550:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013552:	ea47 070b 	orr.w	r7, r7, fp
 8013556:	f82a 7b02 	strh.w	r7, [sl], #2
 801355a:	442a      	add	r2, r5
 801355c:	e7ae      	b.n	80134bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801355e:	140e      	asrs	r6, r1, #16
 8013560:	d44b      	bmi.n	80135fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8013562:	4576      	cmp	r6, lr
 8013564:	da49      	bge.n	80135fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8013566:	1415      	asrs	r5, r2, #16
 8013568:	d447      	bmi.n	80135fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801356a:	9f02      	ldr	r7, [sp, #8]
 801356c:	42bd      	cmp	r5, r7
 801356e:	da44      	bge.n	80135fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8013570:	9f03      	ldr	r7, [sp, #12]
 8013572:	fb0e 7505 	mla	r5, lr, r5, r7
 8013576:	f815 8006 	ldrb.w	r8, [r5, r6]
 801357a:	9d00      	ldr	r5, [sp, #0]
 801357c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013580:	eb05 0b08 	add.w	fp, r5, r8
 8013584:	f8b9 5000 	ldrh.w	r5, [r9]
 8013588:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801358c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8013590:	122f      	asrs	r7, r5, #8
 8013592:	fb16 f60c 	smulbb	r6, r6, ip
 8013596:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801359a:	fb07 6700 	mla	r7, r7, r0, r6
 801359e:	10ee      	asrs	r6, r5, #3
 80135a0:	fb1b fb0c 	smulbb	fp, fp, ip
 80135a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80135a8:	fb06 b600 	mla	r6, r6, r0, fp
 80135ac:	b2b6      	uxth	r6, r6
 80135ae:	9604      	str	r6, [sp, #16]
 80135b0:	9e00      	ldr	r6, [sp, #0]
 80135b2:	00ed      	lsls	r5, r5, #3
 80135b4:	f816 8008 	ldrb.w	r8, [r6, r8]
 80135b8:	b2ed      	uxtb	r5, r5
 80135ba:	fb15 f500 	smulbb	r5, r5, r0
 80135be:	b2bf      	uxth	r7, r7
 80135c0:	fb08 580c 	mla	r8, r8, ip, r5
 80135c4:	fa1f f888 	uxth.w	r8, r8
 80135c8:	1c7d      	adds	r5, r7, #1
 80135ca:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80135ce:	f108 0501 	add.w	r5, r8, #1
 80135d2:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 80135d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80135da:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80135de:	432f      	orrs	r7, r5
 80135e0:	9d04      	ldr	r5, [sp, #16]
 80135e2:	f105 0b01 	add.w	fp, r5, #1
 80135e6:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80135ea:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80135ee:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80135f2:	ea47 070b 	orr.w	r7, r7, fp
 80135f6:	f8a9 7000 	strh.w	r7, [r9]
 80135fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80135fc:	4429      	add	r1, r5
 80135fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013600:	f109 0902 	add.w	r9, r9, #2
 8013604:	442a      	add	r2, r5
 8013606:	f10a 3aff 	add.w	sl, sl, #4294967295
 801360a:	e705      	b.n	8013418 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801360c:	b007      	add	sp, #28
 801360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013618:	b085      	sub	sp, #20
 801361a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801361e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013620:	9203      	str	r2, [sp, #12]
 8013622:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013626:	6870      	ldr	r0, [r6, #4]
 8013628:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801362a:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 801362e:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8013632:	9101      	str	r1, [sp, #4]
 8013634:	fb00 2404 	mla	r4, r0, r4, r2
 8013638:	6832      	ldr	r2, [r6, #0]
 801363a:	686e      	ldr	r6, [r5, #4]
 801363c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013640:	682a      	ldr	r2, [r5, #0]
 8013642:	9202      	str	r2, [sp, #8]
 8013644:	3604      	adds	r6, #4
 8013646:	9a01      	ldr	r2, [sp, #4]
 8013648:	2a00      	cmp	r2, #0
 801364a:	dc03      	bgt.n	8013654 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801364c:	9a03      	ldr	r2, [sp, #12]
 801364e:	2a00      	cmp	r2, #0
 8013650:	f340 80c7 	ble.w	80137e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8013654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013656:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801365a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801365c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013660:	2b00      	cmp	r3, #0
 8013662:	dd0e      	ble.n	8013682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8013664:	1405      	asrs	r5, r0, #16
 8013666:	d405      	bmi.n	8013674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8013668:	42bd      	cmp	r5, r7
 801366a:	da03      	bge.n	8013674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801366c:	1415      	asrs	r5, r2, #16
 801366e:	d401      	bmi.n	8013674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8013670:	4545      	cmp	r5, r8
 8013672:	db07      	blt.n	8013684 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8013674:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8013676:	4428      	add	r0, r5
 8013678:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801367a:	3b01      	subs	r3, #1
 801367c:	442a      	add	r2, r5
 801367e:	3402      	adds	r4, #2
 8013680:	e7ee      	b.n	8013660 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8013682:	d010      	beq.n	80136a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013684:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013686:	1e5d      	subs	r5, r3, #1
 8013688:	fb01 0c05 	mla	ip, r1, r5, r0
 801368c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8013690:	d545      	bpl.n	801371e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8013692:	469e      	mov	lr, r3
 8013694:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 8013698:	f1be 0f00 	cmp.w	lr, #0
 801369c:	dc72      	bgt.n	8013784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 801369e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80136a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80136a6:	9b01      	ldr	r3, [sp, #4]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f340 809a 	ble.w	80137e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 80136ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80136b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80136b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80136ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80136c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80136c4:	eeb0 6a62 	vmov.f32	s12, s5
 80136c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80136cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80136d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80136d4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80136d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80136dc:	eeb0 6a43 	vmov.f32	s12, s6
 80136e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80136e4:	ee12 2a90 	vmov	r2, s5
 80136e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80136ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80136f0:	ee13 2a10 	vmov	r2, s6
 80136f4:	9311      	str	r3, [sp, #68]	; 0x44
 80136f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80136fc:	9312      	str	r3, [sp, #72]	; 0x48
 80136fe:	9b01      	ldr	r3, [sp, #4]
 8013700:	9a03      	ldr	r2, [sp, #12]
 8013702:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013706:	3b01      	subs	r3, #1
 8013708:	9301      	str	r3, [sp, #4]
 801370a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801370e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013710:	eeb0 3a67 	vmov.f32	s6, s15
 8013714:	bf08      	it	eq
 8013716:	4613      	moveq	r3, r2
 8013718:	eef0 2a47 	vmov.f32	s5, s14
 801371c:	e793      	b.n	8013646 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 801371e:	45bc      	cmp	ip, r7
 8013720:	dab7      	bge.n	8013692 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8013722:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013724:	fb01 2505 	mla	r5, r1, r5, r2
 8013728:	142d      	asrs	r5, r5, #16
 801372a:	d4b2      	bmi.n	8013692 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801372c:	4545      	cmp	r5, r8
 801372e:	dab0      	bge.n	8013692 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8013730:	469e      	mov	lr, r3
 8013732:	46a2      	mov	sl, r4
 8013734:	f1be 0f00 	cmp.w	lr, #0
 8013738:	ddb1      	ble.n	801369e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801373a:	9902      	ldr	r1, [sp, #8]
 801373c:	1415      	asrs	r5, r2, #16
 801373e:	fb07 1505 	mla	r5, r7, r5, r1
 8013742:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013746:	4928      	ldr	r1, [pc, #160]	; (80137e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 8013748:	f815 c00c 	ldrb.w	ip, [r5, ip]
 801374c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013750:	eb06 0b0c 	add.w	fp, r6, ip
 8013754:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013758:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801375c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8013760:	00ed      	lsls	r5, r5, #3
 8013762:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8013766:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801376a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801376c:	ea49 0505 	orr.w	r5, r9, r5
 8013770:	f816 900c 	ldrb.w	r9, [r6, ip]
 8013774:	4408      	add	r0, r1
 8013776:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013778:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 801377c:	f82a 5b02 	strh.w	r5, [sl], #2
 8013780:	440a      	add	r2, r1
 8013782:	e7d7      	b.n	8013734 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 8013784:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8013788:	d424      	bmi.n	80137d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801378a:	45bc      	cmp	ip, r7
 801378c:	da22      	bge.n	80137d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801378e:	1415      	asrs	r5, r2, #16
 8013790:	d420      	bmi.n	80137d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8013792:	4545      	cmp	r5, r8
 8013794:	da1e      	bge.n	80137d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8013796:	9902      	ldr	r1, [sp, #8]
 8013798:	fb07 1505 	mla	r5, r7, r5, r1
 801379c:	f06f 0101 	mvn.w	r1, #1
 80137a0:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80137a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80137a8:	eb06 050c 	add.w	r5, r6, ip
 80137ac:	fb01 f90e 	mul.w	r9, r1, lr
 80137b0:	f895 a002 	ldrb.w	sl, [r5, #2]
 80137b4:	786d      	ldrb	r5, [r5, #1]
 80137b6:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80137ba:	00ed      	lsls	r5, r5, #3
 80137bc:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 80137c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80137c4:	ea4a 0505 	orr.w	r5, sl, r5
 80137c8:	f816 a00c 	ldrb.w	sl, [r6, ip]
 80137cc:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 80137d0:	f82b 5009 	strh.w	r5, [fp, r9]
 80137d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80137d6:	4408      	add	r0, r1
 80137d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80137da:	f10e 3eff 	add.w	lr, lr, #4294967295
 80137de:	440a      	add	r2, r1
 80137e0:	e75a      	b.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80137e2:	b005      	add	sp, #20
 80137e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e8:	fffff800 	.word	0xfffff800

080137ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80137ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137f0:	b087      	sub	sp, #28
 80137f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137f6:	9204      	str	r2, [sp, #16]
 80137f8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80137fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80137fe:	9201      	str	r2, [sp, #4]
 8013800:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8013804:	9205      	str	r2, [sp, #20]
 8013806:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801380a:	9100      	str	r1, [sp, #0]
 801380c:	6869      	ldr	r1, [r5, #4]
 801380e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013810:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8013814:	fb01 2404 	mla	r4, r1, r4, r2
 8013818:	682a      	ldr	r2, [r5, #0]
 801381a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801381e:	6802      	ldr	r2, [r0, #0]
 8013820:	9202      	str	r2, [sp, #8]
 8013822:	6842      	ldr	r2, [r0, #4]
 8013824:	3204      	adds	r2, #4
 8013826:	9203      	str	r2, [sp, #12]
 8013828:	9a00      	ldr	r2, [sp, #0]
 801382a:	2a00      	cmp	r2, #0
 801382c:	dc03      	bgt.n	8013836 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801382e:	9a04      	ldr	r2, [sp, #16]
 8013830:	2a00      	cmp	r2, #0
 8013832:	f340 812c 	ble.w	8013a8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8013836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013838:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801383c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801383e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013842:	2b00      	cmp	r3, #0
 8013844:	dd0f      	ble.n	8013866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8013846:	1402      	asrs	r2, r0, #16
 8013848:	d406      	bmi.n	8013858 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801384a:	4572      	cmp	r2, lr
 801384c:	da04      	bge.n	8013858 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801384e:	140a      	asrs	r2, r1, #16
 8013850:	d402      	bmi.n	8013858 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8013852:	9d01      	ldr	r5, [sp, #4]
 8013854:	42aa      	cmp	r2, r5
 8013856:	db07      	blt.n	8013868 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8013858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801385a:	4410      	add	r0, r2
 801385c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801385e:	3b01      	subs	r3, #1
 8013860:	4411      	add	r1, r2
 8013862:	3402      	adds	r4, #2
 8013864:	e7ed      	b.n	8013842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8013866:	d00f      	beq.n	8013888 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013868:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801386a:	1e5a      	subs	r2, r3, #1
 801386c:	fb05 0502 	mla	r5, r5, r2, r0
 8013870:	142d      	asrs	r5, r5, #16
 8013872:	d545      	bpl.n	8013900 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8013874:	4699      	mov	r9, r3
 8013876:	46a0      	mov	r8, r4
 8013878:	f1b9 0f00 	cmp.w	r9, #0
 801387c:	f300 80a7 	bgt.w	80139ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8013880:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013884:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013888:	9b00      	ldr	r3, [sp, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	f340 80ff 	ble.w	8013a8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8013890:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013894:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013898:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801389c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801389e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80138a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80138a6:	eeb0 6a62 	vmov.f32	s12, s5
 80138aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80138ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80138b6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80138ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80138be:	eeb0 6a43 	vmov.f32	s12, s6
 80138c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80138c6:	ee12 2a90 	vmov	r2, s5
 80138ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80138ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80138d2:	ee13 2a10 	vmov	r2, s6
 80138d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80138d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138da:	fb92 f3f3 	sdiv	r3, r2, r3
 80138de:	9314      	str	r3, [sp, #80]	; 0x50
 80138e0:	9b00      	ldr	r3, [sp, #0]
 80138e2:	9a04      	ldr	r2, [sp, #16]
 80138e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138e8:	3b01      	subs	r3, #1
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80138f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138f2:	eeb0 3a67 	vmov.f32	s6, s15
 80138f6:	bf08      	it	eq
 80138f8:	4613      	moveq	r3, r2
 80138fa:	eef0 2a47 	vmov.f32	s5, s14
 80138fe:	e793      	b.n	8013828 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8013900:	4575      	cmp	r5, lr
 8013902:	dab7      	bge.n	8013874 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8013904:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013906:	fb05 1202 	mla	r2, r5, r2, r1
 801390a:	1412      	asrs	r2, r2, #16
 801390c:	d4b2      	bmi.n	8013874 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801390e:	9d01      	ldr	r5, [sp, #4]
 8013910:	42aa      	cmp	r2, r5
 8013912:	daaf      	bge.n	8013874 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8013914:	f04f 0800 	mov.w	r8, #0
 8013918:	eba3 0208 	sub.w	r2, r3, r8
 801391c:	2a00      	cmp	r2, #0
 801391e:	ddaf      	ble.n	8013880 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8013920:	9e02      	ldr	r6, [sp, #8]
 8013922:	140a      	asrs	r2, r1, #16
 8013924:	1405      	asrs	r5, r0, #16
 8013926:	fb0e 6202 	mla	r2, lr, r2, r6
 801392a:	5d52      	ldrb	r2, [r2, r5]
 801392c:	9d03      	ldr	r5, [sp, #12]
 801392e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013932:	0e2e      	lsrs	r6, r5, #24
 8013934:	d044      	beq.n	80139c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8013936:	9a05      	ldr	r2, [sp, #20]
 8013938:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801393c:	4356      	muls	r6, r2
 801393e:	1c72      	adds	r2, r6, #1
 8013940:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013944:	1212      	asrs	r2, r2, #8
 8013946:	fa1f f982 	uxth.w	r9, r2
 801394a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801394e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013952:	43d2      	mvns	r2, r2
 8013954:	b2d2      	uxtb	r2, r2
 8013956:	fb16 f609 	smulbb	r6, r6, r9
 801395a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801395e:	fb07 6702 	mla	r7, r7, r2, r6
 8013962:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013966:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801396a:	b2ed      	uxtb	r5, r5
 801396c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013970:	fa5f fc8c 	uxtb.w	ip, ip
 8013974:	fb15 f509 	smulbb	r5, r5, r9
 8013978:	fb0c 5502 	mla	r5, ip, r2, r5
 801397c:	b2bf      	uxth	r7, r7
 801397e:	fb1a fa09 	smulbb	sl, sl, r9
 8013982:	b2ad      	uxth	r5, r5
 8013984:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013988:	fb06 a602 	mla	r6, r6, r2, sl
 801398c:	1c7a      	adds	r2, r7, #1
 801398e:	f105 0a01 	add.w	sl, r5, #1
 8013992:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013996:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801399a:	b2b6      	uxth	r6, r6
 801399c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80139a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80139a4:	ea47 070a 	orr.w	r7, r7, sl
 80139a8:	f106 0a01 	add.w	sl, r6, #1
 80139ac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80139b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80139b4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80139b8:	ea47 070a 	orr.w	r7, r7, sl
 80139bc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80139c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80139c2:	4410      	add	r0, r2
 80139c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80139c6:	f108 0801 	add.w	r8, r8, #1
 80139ca:	4411      	add	r1, r2
 80139cc:	e7a4      	b.n	8013918 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 80139ce:	1405      	asrs	r5, r0, #16
 80139d0:	d454      	bmi.n	8013a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80139d2:	4575      	cmp	r5, lr
 80139d4:	da52      	bge.n	8013a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80139d6:	140a      	asrs	r2, r1, #16
 80139d8:	d450      	bmi.n	8013a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80139da:	9e01      	ldr	r6, [sp, #4]
 80139dc:	42b2      	cmp	r2, r6
 80139de:	da4d      	bge.n	8013a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80139e0:	9e02      	ldr	r6, [sp, #8]
 80139e2:	fb0e 6202 	mla	r2, lr, r2, r6
 80139e6:	5d52      	ldrb	r2, [r2, r5]
 80139e8:	9d03      	ldr	r5, [sp, #12]
 80139ea:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80139ee:	0e2e      	lsrs	r6, r5, #24
 80139f0:	d044      	beq.n	8013a7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80139f2:	9a05      	ldr	r2, [sp, #20]
 80139f4:	f8b8 c000 	ldrh.w	ip, [r8]
 80139f8:	4356      	muls	r6, r2
 80139fa:	1c72      	adds	r2, r6, #1
 80139fc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013a00:	1212      	asrs	r2, r2, #8
 8013a02:	fa1f fa82 	uxth.w	sl, r2
 8013a06:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013a0a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013a0e:	43d2      	mvns	r2, r2
 8013a10:	b2d2      	uxtb	r2, r2
 8013a12:	fb16 f60a 	smulbb	r6, r6, sl
 8013a16:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013a1a:	fb07 6702 	mla	r7, r7, r2, r6
 8013a1e:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 8013a22:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8013a26:	b2ed      	uxtb	r5, r5
 8013a28:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013a2c:	fa5f fc8c 	uxtb.w	ip, ip
 8013a30:	fb15 f50a 	smulbb	r5, r5, sl
 8013a34:	fb0c 5502 	mla	r5, ip, r2, r5
 8013a38:	b2bf      	uxth	r7, r7
 8013a3a:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a3e:	b2ad      	uxth	r5, r5
 8013a40:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013a44:	fb06 b602 	mla	r6, r6, r2, fp
 8013a48:	1c7a      	adds	r2, r7, #1
 8013a4a:	f105 0b01 	add.w	fp, r5, #1
 8013a4e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013a52:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8013a56:	b2b6      	uxth	r6, r6
 8013a58:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8013a5c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013a60:	ea47 070b 	orr.w	r7, r7, fp
 8013a64:	f106 0b01 	add.w	fp, r6, #1
 8013a68:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8013a6c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8013a70:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8013a74:	ea47 070b 	orr.w	r7, r7, fp
 8013a78:	f8a8 7000 	strh.w	r7, [r8]
 8013a7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013a7e:	4410      	add	r0, r2
 8013a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013a82:	f108 0802 	add.w	r8, r8, #2
 8013a86:	4411      	add	r1, r2
 8013a88:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a8c:	e6f4      	b.n	8013878 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8013a8e:	b007      	add	sp, #28
 8013a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a98:	b087      	sub	sp, #28
 8013a9a:	468b      	mov	fp, r1
 8013a9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013a9e:	9205      	str	r2, [sp, #20]
 8013aa0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013aa4:	9201      	str	r2, [sp, #4]
 8013aa6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013aaa:	6869      	ldr	r1, [r5, #4]
 8013aac:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013aae:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8013ab2:	fb01 2404 	mla	r4, r1, r4, r2
 8013ab6:	682a      	ldr	r2, [r5, #0]
 8013ab8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013abc:	6802      	ldr	r2, [r0, #0]
 8013abe:	9203      	str	r2, [sp, #12]
 8013ac0:	6842      	ldr	r2, [r0, #4]
 8013ac2:	3204      	adds	r2, #4
 8013ac4:	9204      	str	r2, [sp, #16]
 8013ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013aca:	f1bb 0f00 	cmp.w	fp, #0
 8013ace:	dc03      	bgt.n	8013ad8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8013ad0:	9a05      	ldr	r2, [sp, #20]
 8013ad2:	2a00      	cmp	r2, #0
 8013ad4:	f340 814a 	ble.w	8013d6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8013ad8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ada:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013ade:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ae0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	dd0f      	ble.n	8013b08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013ae8:	1408      	asrs	r0, r1, #16
 8013aea:	d406      	bmi.n	8013afa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013aec:	4540      	cmp	r0, r8
 8013aee:	da04      	bge.n	8013afa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013af0:	1410      	asrs	r0, r2, #16
 8013af2:	d402      	bmi.n	8013afa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013af4:	9d01      	ldr	r5, [sp, #4]
 8013af6:	42a8      	cmp	r0, r5
 8013af8:	db07      	blt.n	8013b0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8013afa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013afc:	4401      	add	r1, r0
 8013afe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013b00:	3b01      	subs	r3, #1
 8013b02:	4402      	add	r2, r0
 8013b04:	3402      	adds	r4, #2
 8013b06:	e7ed      	b.n	8013ae4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8013b08:	d018      	beq.n	8013b3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 8013b0a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013b0c:	1e58      	subs	r0, r3, #1
 8013b0e:	fb05 1500 	mla	r5, r5, r0, r1
 8013b12:	142d      	asrs	r5, r5, #16
 8013b14:	d40a      	bmi.n	8013b2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013b16:	4545      	cmp	r5, r8
 8013b18:	da08      	bge.n	8013b2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013b1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013b1c:	fb05 2000 	mla	r0, r5, r0, r2
 8013b20:	1400      	asrs	r0, r0, #16
 8013b22:	d403      	bmi.n	8013b2c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013b24:	9d01      	ldr	r5, [sp, #4]
 8013b26:	42a8      	cmp	r0, r5
 8013b28:	f2c0 80b7 	blt.w	8013c9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8013b2c:	2600      	movs	r6, #0
 8013b2e:	1998      	adds	r0, r3, r6
 8013b30:	2800      	cmp	r0, #0
 8013b32:	dc3e      	bgt.n	8013bb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8013b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013b38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013b3c:	f1bb 0f00 	cmp.w	fp, #0
 8013b40:	f340 8114 	ble.w	8013d6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8013b44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013b48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013b4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b52:	f1bb 0b01 	subs.w	fp, fp, #1
 8013b56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013b5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013b5e:	eeb0 6a62 	vmov.f32	s12, s5
 8013b62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013b66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013b6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013b6e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013b72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013b76:	eeb0 6a43 	vmov.f32	s12, s6
 8013b7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013b7e:	ee12 2a90 	vmov	r2, s5
 8013b82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b8a:	ee13 2a10 	vmov	r2, s6
 8013b8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013b92:	9313      	str	r3, [sp, #76]	; 0x4c
 8013b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b96:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b9a:	9a05      	ldr	r2, [sp, #20]
 8013b9c:	9314      	str	r3, [sp, #80]	; 0x50
 8013b9e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ba4:	eeb0 3a67 	vmov.f32	s6, s15
 8013ba8:	bf08      	it	eq
 8013baa:	4613      	moveq	r3, r2
 8013bac:	eef0 2a47 	vmov.f32	s5, s14
 8013bb0:	e78b      	b.n	8013aca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8013bb2:	140d      	asrs	r5, r1, #16
 8013bb4:	d459      	bmi.n	8013c6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013bb6:	4545      	cmp	r5, r8
 8013bb8:	da57      	bge.n	8013c6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013bba:	1410      	asrs	r0, r2, #16
 8013bbc:	d455      	bmi.n	8013c6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013bbe:	9f01      	ldr	r7, [sp, #4]
 8013bc0:	42b8      	cmp	r0, r7
 8013bc2:	da52      	bge.n	8013c6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013bc4:	9f03      	ldr	r7, [sp, #12]
 8013bc6:	fb08 7000 	mla	r0, r8, r0, r7
 8013bca:	5d40      	ldrb	r0, [r0, r5]
 8013bcc:	9d04      	ldr	r5, [sp, #16]
 8013bce:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8013bd2:	0e07      	lsrs	r7, r0, #24
 8013bd4:	2fff      	cmp	r7, #255	; 0xff
 8013bd6:	d04e      	beq.n	8013c76 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8013bd8:	b2fd      	uxtb	r5, r7
 8013bda:	2f00      	cmp	r7, #0
 8013bdc:	d045      	beq.n	8013c6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013bde:	f06f 0701 	mvn.w	r7, #1
 8013be2:	4377      	muls	r7, r6
 8013be4:	fa1f f985 	uxth.w	r9, r5
 8013be8:	f834 e007 	ldrh.w	lr, [r4, r7]
 8013bec:	9702      	str	r7, [sp, #8]
 8013bee:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013bf2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013bf6:	43ed      	mvns	r5, r5
 8013bf8:	b2ed      	uxtb	r5, r5
 8013bfa:	fb17 f709 	smulbb	r7, r7, r9
 8013bfe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013c02:	fb0c 7c05 	mla	ip, ip, r5, r7
 8013c06:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8013c0a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8013c0e:	b2c0      	uxtb	r0, r0
 8013c10:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013c14:	fa5f fe8e 	uxtb.w	lr, lr
 8013c18:	fb10 f009 	smulbb	r0, r0, r9
 8013c1c:	fb0e 0005 	mla	r0, lr, r5, r0
 8013c20:	b280      	uxth	r0, r0
 8013c22:	fa1f fc8c 	uxth.w	ip, ip
 8013c26:	fb1a fa09 	smulbb	sl, sl, r9
 8013c2a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8013c2e:	fb07 a705 	mla	r7, r7, r5, sl
 8013c32:	f100 0a01 	add.w	sl, r0, #1
 8013c36:	f10c 0501 	add.w	r5, ip, #1
 8013c3a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8013c3e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013c42:	b2bf      	uxth	r7, r7
 8013c44:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013c48:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013c4c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013c50:	f107 0a01 	add.w	sl, r7, #1
 8013c54:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8013c58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013c5c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013c60:	9802      	ldr	r0, [sp, #8]
 8013c62:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013c66:	f824 c000 	strh.w	ip, [r4, r0]
 8013c6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013c6c:	4401      	add	r1, r0
 8013c6e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013c70:	3e01      	subs	r6, #1
 8013c72:	4402      	add	r2, r0
 8013c74:	e75b      	b.n	8013b2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8013c76:	f06f 0501 	mvn.w	r5, #1
 8013c7a:	fb05 f706 	mul.w	r7, r5, r6
 8013c7e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8013c82:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8013c86:	0945      	lsrs	r5, r0, #5
 8013c88:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8013c8c:	ea4c 0505 	orr.w	r5, ip, r5
 8013c90:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8013c94:	4305      	orrs	r5, r0
 8013c96:	53e5      	strh	r5, [r4, r7]
 8013c98:	e7e7      	b.n	8013c6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013c9a:	f04f 0e00 	mov.w	lr, #0
 8013c9e:	eba3 000e 	sub.w	r0, r3, lr
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	f77f af46 	ble.w	8013b34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8013ca8:	9e03      	ldr	r6, [sp, #12]
 8013caa:	1410      	asrs	r0, r2, #16
 8013cac:	140d      	asrs	r5, r1, #16
 8013cae:	fb08 6000 	mla	r0, r8, r0, r6
 8013cb2:	5d40      	ldrb	r0, [r0, r5]
 8013cb4:	9d04      	ldr	r5, [sp, #16]
 8013cb6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8013cba:	0e06      	lsrs	r6, r0, #24
 8013cbc:	2eff      	cmp	r6, #255	; 0xff
 8013cbe:	d048      	beq.n	8013d52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8013cc0:	b2f5      	uxtb	r5, r6
 8013cc2:	2e00      	cmp	r6, #0
 8013cc4:	d03e      	beq.n	8013d44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8013cc6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8013cca:	fa1f f985 	uxth.w	r9, r5
 8013cce:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013cd2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8013cd6:	43ed      	mvns	r5, r5
 8013cd8:	b2ed      	uxtb	r5, r5
 8013cda:	fb16 f609 	smulbb	r6, r6, r9
 8013cde:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013ce2:	fb07 6705 	mla	r7, r7, r5, r6
 8013ce6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8013cea:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8013cee:	b2c0      	uxtb	r0, r0
 8013cf0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013cf4:	fa5f fc8c 	uxtb.w	ip, ip
 8013cf8:	fb10 f009 	smulbb	r0, r0, r9
 8013cfc:	fb0c 0005 	mla	r0, ip, r5, r0
 8013d00:	b2bf      	uxth	r7, r7
 8013d02:	fb1a fa09 	smulbb	sl, sl, r9
 8013d06:	b280      	uxth	r0, r0
 8013d08:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013d0c:	fb06 a605 	mla	r6, r6, r5, sl
 8013d10:	1c7d      	adds	r5, r7, #1
 8013d12:	f100 0a01 	add.w	sl, r0, #1
 8013d16:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8013d1a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8013d1e:	b2b6      	uxth	r6, r6
 8013d20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013d24:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013d28:	ea47 070a 	orr.w	r7, r7, sl
 8013d2c:	f106 0a01 	add.w	sl, r6, #1
 8013d30:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013d34:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013d38:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013d3c:	ea47 070a 	orr.w	r7, r7, sl
 8013d40:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8013d44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013d46:	4401      	add	r1, r0
 8013d48:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013d4a:	f10e 0e01 	add.w	lr, lr, #1
 8013d4e:	4402      	add	r2, r0
 8013d50:	e7a5      	b.n	8013c9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 8013d52:	4d08      	ldr	r5, [pc, #32]	; (8013d74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 8013d54:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 8013d58:	0945      	lsrs	r5, r0, #5
 8013d5a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8013d5e:	4335      	orrs	r5, r6
 8013d60:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8013d64:	4305      	orrs	r5, r0
 8013d66:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 8013d6a:	e7eb      	b.n	8013d44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8013d6c:	b007      	add	sp, #28
 8013d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d72:	bf00      	nop
 8013d74:	fffff800 	.word	0xfffff800

08013d78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d7c:	b087      	sub	sp, #28
 8013d7e:	468b      	mov	fp, r1
 8013d80:	9204      	str	r2, [sp, #16]
 8013d82:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013d86:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d88:	9201      	str	r2, [sp, #4]
 8013d8a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8013d8e:	9205      	str	r2, [sp, #20]
 8013d90:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013d94:	6869      	ldr	r1, [r5, #4]
 8013d96:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013d98:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8013d9c:	fb01 2404 	mla	r4, r1, r4, r2
 8013da0:	682a      	ldr	r2, [r5, #0]
 8013da2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013da6:	6802      	ldr	r2, [r0, #0]
 8013da8:	9202      	str	r2, [sp, #8]
 8013daa:	6842      	ldr	r2, [r0, #4]
 8013dac:	9203      	str	r2, [sp, #12]
 8013dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013db2:	f1bb 0f00 	cmp.w	fp, #0
 8013db6:	dc03      	bgt.n	8013dc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8013db8:	9a04      	ldr	r2, [sp, #16]
 8013dba:	2a00      	cmp	r2, #0
 8013dbc:	f340 8136 	ble.w	801402c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8013dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013dc2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013dc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	dd0f      	ble.n	8013df0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013dd0:	1408      	asrs	r0, r1, #16
 8013dd2:	d406      	bmi.n	8013de2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013dd4:	4540      	cmp	r0, r8
 8013dd6:	da04      	bge.n	8013de2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013dd8:	1410      	asrs	r0, r2, #16
 8013dda:	d402      	bmi.n	8013de2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013ddc:	9d01      	ldr	r5, [sp, #4]
 8013dde:	42a8      	cmp	r0, r5
 8013de0:	db07      	blt.n	8013df2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8013de2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013de4:	4401      	add	r1, r0
 8013de6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013de8:	3b01      	subs	r3, #1
 8013dea:	4402      	add	r2, r0
 8013dec:	3402      	adds	r4, #2
 8013dee:	e7ed      	b.n	8013dcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8013df0:	d00f      	beq.n	8013e12 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8013df2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013df4:	1e58      	subs	r0, r3, #1
 8013df6:	fb05 1500 	mla	r5, r5, r0, r1
 8013dfa:	142d      	asrs	r5, r5, #16
 8013dfc:	d544      	bpl.n	8013e88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8013dfe:	9300      	str	r3, [sp, #0]
 8013e00:	46a2      	mov	sl, r4
 8013e02:	9800      	ldr	r0, [sp, #0]
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f300 80ab 	bgt.w	8013f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013e0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013e12:	f1bb 0f00 	cmp.w	fp, #0
 8013e16:	f340 8109 	ble.w	801402c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8013e1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013e1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013e22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e28:	f1bb 0b01 	subs.w	fp, fp, #1
 8013e2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013e30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013e34:	eeb0 6a62 	vmov.f32	s12, s5
 8013e38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013e3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013e44:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013e48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013e4c:	eeb0 6a43 	vmov.f32	s12, s6
 8013e50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013e54:	ee12 2a90 	vmov	r2, s5
 8013e58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e60:	ee13 2a10 	vmov	r2, s6
 8013e64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013e68:	9313      	str	r3, [sp, #76]	; 0x4c
 8013e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e70:	9a04      	ldr	r2, [sp, #16]
 8013e72:	9314      	str	r3, [sp, #80]	; 0x50
 8013e74:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013e78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e7a:	eeb0 3a67 	vmov.f32	s6, s15
 8013e7e:	bf08      	it	eq
 8013e80:	4613      	moveq	r3, r2
 8013e82:	eef0 2a47 	vmov.f32	s5, s14
 8013e86:	e794      	b.n	8013db2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8013e88:	4545      	cmp	r5, r8
 8013e8a:	dab8      	bge.n	8013dfe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013e8c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013e8e:	fb05 2000 	mla	r0, r5, r0, r2
 8013e92:	1400      	asrs	r0, r0, #16
 8013e94:	d4b3      	bmi.n	8013dfe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013e96:	9d01      	ldr	r5, [sp, #4]
 8013e98:	42a8      	cmp	r0, r5
 8013e9a:	dab0      	bge.n	8013dfe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013e9c:	f04f 0900 	mov.w	r9, #0
 8013ea0:	eba3 0009 	sub.w	r0, r3, r9
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	ddb0      	ble.n	8013e0a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013ea8:	140d      	asrs	r5, r1, #16
 8013eaa:	1410      	asrs	r0, r2, #16
 8013eac:	fb08 5000 	mla	r0, r8, r0, r5
 8013eb0:	9d03      	ldr	r5, [sp, #12]
 8013eb2:	5c2e      	ldrb	r6, [r5, r0]
 8013eb4:	2e00      	cmp	r6, #0
 8013eb6:	d04c      	beq.n	8013f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8013eb8:	9d02      	ldr	r5, [sp, #8]
 8013eba:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8013ebe:	9805      	ldr	r0, [sp, #20]
 8013ec0:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8013ec4:	4346      	muls	r6, r0
 8013ec6:	1c70      	adds	r0, r6, #1
 8013ec8:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8013ecc:	1200      	asrs	r0, r0, #8
 8013ece:	b287      	uxth	r7, r0
 8013ed0:	122e      	asrs	r6, r5, #8
 8013ed2:	43c0      	mvns	r0, r0
 8013ed4:	b2c0      	uxtb	r0, r0
 8013ed6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013eda:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8013ede:	fb16 f600 	smulbb	r6, r6, r0
 8013ee2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8013ee6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013eea:	00ed      	lsls	r5, r5, #3
 8013eec:	fb0c 6c07 	mla	ip, ip, r7, r6
 8013ef0:	b2ed      	uxtb	r5, r5
 8013ef2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013ef6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013efa:	fb15 f500 	smulbb	r5, r5, r0
 8013efe:	fa5f fe8e 	uxtb.w	lr, lr
 8013f02:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8013f06:	fb0e 5507 	mla	r5, lr, r7, r5
 8013f0a:	fb1a fa00 	smulbb	sl, sl, r0
 8013f0e:	fa1f fc8c 	uxth.w	ip, ip
 8013f12:	b2ad      	uxth	r5, r5
 8013f14:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013f18:	fb06 a607 	mla	r6, r6, r7, sl
 8013f1c:	f10c 0001 	add.w	r0, ip, #1
 8013f20:	f105 0a01 	add.w	sl, r5, #1
 8013f24:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8013f28:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013f2c:	b2b6      	uxth	r6, r6
 8013f2e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013f32:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013f36:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013f3a:	f106 0a01 	add.w	sl, r6, #1
 8013f3e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013f42:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013f46:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013f4a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013f4e:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 8013f52:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013f54:	4401      	add	r1, r0
 8013f56:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013f58:	f109 0901 	add.w	r9, r9, #1
 8013f5c:	4402      	add	r2, r0
 8013f5e:	e79f      	b.n	8013ea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 8013f60:	1408      	asrs	r0, r1, #16
 8013f62:	d459      	bmi.n	8014018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8013f64:	4540      	cmp	r0, r8
 8013f66:	da57      	bge.n	8014018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8013f68:	1415      	asrs	r5, r2, #16
 8013f6a:	d455      	bmi.n	8014018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8013f6c:	9e01      	ldr	r6, [sp, #4]
 8013f6e:	42b5      	cmp	r5, r6
 8013f70:	da52      	bge.n	8014018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8013f72:	fb08 0005 	mla	r0, r8, r5, r0
 8013f76:	9d03      	ldr	r5, [sp, #12]
 8013f78:	5c2e      	ldrb	r6, [r5, r0]
 8013f7a:	2e00      	cmp	r6, #0
 8013f7c:	d04c      	beq.n	8014018 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8013f7e:	9d02      	ldr	r5, [sp, #8]
 8013f80:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8013f84:	9805      	ldr	r0, [sp, #20]
 8013f86:	f8ba 5000 	ldrh.w	r5, [sl]
 8013f8a:	4346      	muls	r6, r0
 8013f8c:	1c70      	adds	r0, r6, #1
 8013f8e:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8013f92:	1200      	asrs	r0, r0, #8
 8013f94:	b287      	uxth	r7, r0
 8013f96:	122e      	asrs	r6, r5, #8
 8013f98:	43c0      	mvns	r0, r0
 8013f9a:	b2c0      	uxtb	r0, r0
 8013f9c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013fa0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8013fa4:	fb16 f600 	smulbb	r6, r6, r0
 8013fa8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8013fac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013fb0:	00ed      	lsls	r5, r5, #3
 8013fb2:	fb0c 6c07 	mla	ip, ip, r7, r6
 8013fb6:	b2ed      	uxtb	r5, r5
 8013fb8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013fbc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013fc0:	fb15 f500 	smulbb	r5, r5, r0
 8013fc4:	fa5f fe8e 	uxtb.w	lr, lr
 8013fc8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013fcc:	fb0e 5507 	mla	r5, lr, r7, r5
 8013fd0:	fb19 f900 	smulbb	r9, r9, r0
 8013fd4:	fa1f fc8c 	uxth.w	ip, ip
 8013fd8:	b2ad      	uxth	r5, r5
 8013fda:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013fde:	fb06 9607 	mla	r6, r6, r7, r9
 8013fe2:	f10c 0001 	add.w	r0, ip, #1
 8013fe6:	f105 0901 	add.w	r9, r5, #1
 8013fea:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8013fee:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8013ff2:	b2b6      	uxth	r6, r6
 8013ff4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8013ff8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013ffc:	ea4c 0c09 	orr.w	ip, ip, r9
 8014000:	f106 0901 	add.w	r9, r6, #1
 8014004:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 8014008:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801400c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8014010:	ea4c 0c09 	orr.w	ip, ip, r9
 8014014:	f8aa c000 	strh.w	ip, [sl]
 8014018:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801401a:	4401      	add	r1, r0
 801401c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801401e:	4402      	add	r2, r0
 8014020:	9800      	ldr	r0, [sp, #0]
 8014022:	3801      	subs	r0, #1
 8014024:	f10a 0a02 	add.w	sl, sl, #2
 8014028:	9000      	str	r0, [sp, #0]
 801402a:	e6ea      	b.n	8013e02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801402c:	b007      	add	sp, #28
 801402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014032 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014036:	b087      	sub	sp, #28
 8014038:	468b      	mov	fp, r1
 801403a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801403c:	9205      	str	r2, [sp, #20]
 801403e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8014042:	9202      	str	r2, [sp, #8]
 8014044:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8014048:	6869      	ldr	r1, [r5, #4]
 801404a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801404c:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8014050:	fb01 2000 	mla	r0, r1, r0, r2
 8014054:	682a      	ldr	r2, [r5, #0]
 8014056:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801405a:	6822      	ldr	r2, [r4, #0]
 801405c:	9201      	str	r2, [sp, #4]
 801405e:	6862      	ldr	r2, [r4, #4]
 8014060:	9204      	str	r2, [sp, #16]
 8014062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014066:	f1bb 0f00 	cmp.w	fp, #0
 801406a:	dc03      	bgt.n	8014074 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801406c:	9a05      	ldr	r2, [sp, #20]
 801406e:	2a00      	cmp	r2, #0
 8014070:	f340 813d 	ble.w	80142ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8014074:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014076:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801407a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801407c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014080:	2b00      	cmp	r3, #0
 8014082:	dd0f      	ble.n	80140a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8014084:	140c      	asrs	r4, r1, #16
 8014086:	d406      	bmi.n	8014096 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8014088:	454c      	cmp	r4, r9
 801408a:	da04      	bge.n	8014096 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801408c:	1414      	asrs	r4, r2, #16
 801408e:	d402      	bmi.n	8014096 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8014090:	9d02      	ldr	r5, [sp, #8]
 8014092:	42ac      	cmp	r4, r5
 8014094:	db07      	blt.n	80140a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014096:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014098:	4421      	add	r1, r4
 801409a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801409c:	3b01      	subs	r3, #1
 801409e:	4422      	add	r2, r4
 80140a0:	3002      	adds	r0, #2
 80140a2:	e7ed      	b.n	8014080 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 80140a4:	d018      	beq.n	80140d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 80140a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80140a8:	1e5c      	subs	r4, r3, #1
 80140aa:	fb05 1504 	mla	r5, r5, r4, r1
 80140ae:	142d      	asrs	r5, r5, #16
 80140b0:	d40a      	bmi.n	80140c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80140b2:	454d      	cmp	r5, r9
 80140b4:	da08      	bge.n	80140c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80140b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80140b8:	fb05 2404 	mla	r4, r5, r4, r2
 80140bc:	1424      	asrs	r4, r4, #16
 80140be:	d403      	bmi.n	80140c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80140c0:	9d02      	ldr	r5, [sp, #8]
 80140c2:	42ac      	cmp	r4, r5
 80140c4:	f2c0 80ae 	blt.w	8014224 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 80140c8:	2600      	movs	r6, #0
 80140ca:	199c      	adds	r4, r3, r6
 80140cc:	2c00      	cmp	r4, #0
 80140ce:	dc3e      	bgt.n	801414e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 80140d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80140d8:	f1bb 0f00 	cmp.w	fp, #0
 80140dc:	f340 8107 	ble.w	80142ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 80140e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80140e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80140e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80140ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140ee:	f1bb 0b01 	subs.w	fp, fp, #1
 80140f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80140f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80140fa:	eeb0 6a62 	vmov.f32	s12, s5
 80140fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014102:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014106:	ee77 2a62 	vsub.f32	s5, s14, s5
 801410a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801410e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014112:	eeb0 6a43 	vmov.f32	s12, s6
 8014116:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801411a:	ee12 2a90 	vmov	r2, s5
 801411e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014122:	fb92 f3f3 	sdiv	r3, r2, r3
 8014126:	ee13 2a10 	vmov	r2, s6
 801412a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801412e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014130:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014132:	fb92 f3f3 	sdiv	r3, r2, r3
 8014136:	9a05      	ldr	r2, [sp, #20]
 8014138:	9314      	str	r3, [sp, #80]	; 0x50
 801413a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801413e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014140:	eeb0 3a67 	vmov.f32	s6, s15
 8014144:	bf08      	it	eq
 8014146:	4613      	moveq	r3, r2
 8014148:	eef0 2a47 	vmov.f32	s5, s14
 801414c:	e78b      	b.n	8014066 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801414e:	140c      	asrs	r4, r1, #16
 8014150:	d45a      	bmi.n	8014208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014152:	454c      	cmp	r4, r9
 8014154:	da58      	bge.n	8014208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014156:	1415      	asrs	r5, r2, #16
 8014158:	d456      	bmi.n	8014208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801415a:	9f02      	ldr	r7, [sp, #8]
 801415c:	42bd      	cmp	r5, r7
 801415e:	da53      	bge.n	8014208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014160:	fb09 4505 	mla	r5, r9, r5, r4
 8014164:	9c04      	ldr	r4, [sp, #16]
 8014166:	5d64      	ldrb	r4, [r4, r5]
 8014168:	2cff      	cmp	r4, #255	; 0xff
 801416a:	d053      	beq.n	8014214 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 801416c:	2c00      	cmp	r4, #0
 801416e:	d04b      	beq.n	8014208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014170:	9f01      	ldr	r7, [sp, #4]
 8014172:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8014176:	f06f 0501 	mvn.w	r5, #1
 801417a:	4375      	muls	r5, r6
 801417c:	9503      	str	r5, [sp, #12]
 801417e:	5b45      	ldrh	r5, [r0, r5]
 8014180:	fa1f fc84 	uxth.w	ip, r4
 8014184:	122f      	asrs	r7, r5, #8
 8014186:	43e4      	mvns	r4, r4
 8014188:	b2e4      	uxtb	r4, r4
 801418a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801418e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014192:	fb17 f704 	smulbb	r7, r7, r4
 8014196:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801419a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801419e:	00ed      	lsls	r5, r5, #3
 80141a0:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80141a4:	b2ed      	uxtb	r5, r5
 80141a6:	ea4f 07e8 	mov.w	r7, r8, asr #3
 80141aa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80141ae:	fb15 f504 	smulbb	r5, r5, r4
 80141b2:	fa5f f888 	uxtb.w	r8, r8
 80141b6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80141ba:	fb08 550c 	mla	r5, r8, ip, r5
 80141be:	fb1a fa04 	smulbb	sl, sl, r4
 80141c2:	fa1f fe8e 	uxth.w	lr, lr
 80141c6:	b2ad      	uxth	r5, r5
 80141c8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80141cc:	fb07 a70c 	mla	r7, r7, ip, sl
 80141d0:	f10e 0401 	add.w	r4, lr, #1
 80141d4:	f105 0a01 	add.w	sl, r5, #1
 80141d8:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80141dc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80141e0:	b2bf      	uxth	r7, r7
 80141e2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80141e6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80141ea:	ea4e 0e0a 	orr.w	lr, lr, sl
 80141ee:	f107 0a01 	add.w	sl, r7, #1
 80141f2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80141f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80141fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80141fe:	9c03      	ldr	r4, [sp, #12]
 8014200:	ea4e 0e0a 	orr.w	lr, lr, sl
 8014204:	f820 e004 	strh.w	lr, [r0, r4]
 8014208:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801420a:	4421      	add	r1, r4
 801420c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801420e:	3e01      	subs	r6, #1
 8014210:	4422      	add	r2, r4
 8014212:	e75a      	b.n	80140ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8014214:	9c01      	ldr	r4, [sp, #4]
 8014216:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801421a:	f06f 0401 	mvn.w	r4, #1
 801421e:	4374      	muls	r4, r6
 8014220:	5305      	strh	r5, [r0, r4]
 8014222:	e7f1      	b.n	8014208 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014224:	f04f 0800 	mov.w	r8, #0
 8014228:	eba3 0408 	sub.w	r4, r3, r8
 801422c:	2c00      	cmp	r4, #0
 801422e:	f77f af4f 	ble.w	80140d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8014232:	140c      	asrs	r4, r1, #16
 8014234:	1415      	asrs	r5, r2, #16
 8014236:	fb09 4505 	mla	r5, r9, r5, r4
 801423a:	9c04      	ldr	r4, [sp, #16]
 801423c:	5d64      	ldrb	r4, [r4, r5]
 801423e:	2cff      	cmp	r4, #255	; 0xff
 8014240:	d04f      	beq.n	80142e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8014242:	2c00      	cmp	r4, #0
 8014244:	d046      	beq.n	80142d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8014246:	9e01      	ldr	r6, [sp, #4]
 8014248:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801424c:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 8014250:	b2a7      	uxth	r7, r4
 8014252:	122e      	asrs	r6, r5, #8
 8014254:	43e4      	mvns	r4, r4
 8014256:	b2e4      	uxtb	r4, r4
 8014258:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801425c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014260:	fb16 f604 	smulbb	r6, r6, r4
 8014264:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8014268:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801426c:	00ed      	lsls	r5, r5, #3
 801426e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014272:	b2ed      	uxtb	r5, r5
 8014274:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8014278:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801427c:	fb15 f504 	smulbb	r5, r5, r4
 8014280:	fa5f fe8e 	uxtb.w	lr, lr
 8014284:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014288:	fb0e 5507 	mla	r5, lr, r7, r5
 801428c:	fb1a fa04 	smulbb	sl, sl, r4
 8014290:	fa1f fc8c 	uxth.w	ip, ip
 8014294:	b2ad      	uxth	r5, r5
 8014296:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801429a:	fb06 a607 	mla	r6, r6, r7, sl
 801429e:	f10c 0401 	add.w	r4, ip, #1
 80142a2:	f105 0a01 	add.w	sl, r5, #1
 80142a6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80142aa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80142ae:	b2b6      	uxth	r6, r6
 80142b0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80142b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80142b8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80142bc:	f106 0a01 	add.w	sl, r6, #1
 80142c0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80142c4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80142c8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80142cc:	ea4c 0c0a 	orr.w	ip, ip, sl
 80142d0:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 80142d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80142d6:	4421      	add	r1, r4
 80142d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80142da:	f108 0801 	add.w	r8, r8, #1
 80142de:	4422      	add	r2, r4
 80142e0:	e7a2      	b.n	8014228 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 80142e2:	9c01      	ldr	r4, [sp, #4]
 80142e4:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80142e8:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 80142ec:	e7f2      	b.n	80142d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80142ee:	b007      	add	sp, #28
 80142f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080142f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80142f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f8:	b085      	sub	sp, #20
 80142fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80142fc:	9203      	str	r2, [sp, #12]
 80142fe:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8014302:	9201      	str	r2, [sp, #4]
 8014304:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014308:	9100      	str	r1, [sp, #0]
 801430a:	6841      	ldr	r1, [r0, #4]
 801430c:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8014310:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8014314:	fb01 2404 	mla	r4, r1, r4, r2
 8014318:	6802      	ldr	r2, [r0, #0]
 801431a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801431e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014320:	fa1f fe85 	uxth.w	lr, r5
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	9202      	str	r2, [sp, #8]
 8014328:	43ed      	mvns	r5, r5
 801432a:	b2ed      	uxtb	r5, r5
 801432c:	9a00      	ldr	r2, [sp, #0]
 801432e:	2a00      	cmp	r2, #0
 8014330:	dc03      	bgt.n	801433a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8014332:	9a03      	ldr	r2, [sp, #12]
 8014334:	2a00      	cmp	r2, #0
 8014336:	f340 8117 	ble.w	8014568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801433a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801433c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014342:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014346:	2b00      	cmp	r3, #0
 8014348:	dd0f      	ble.n	801436a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801434a:	1408      	asrs	r0, r1, #16
 801434c:	d406      	bmi.n	801435c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801434e:	4540      	cmp	r0, r8
 8014350:	da04      	bge.n	801435c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8014352:	1410      	asrs	r0, r2, #16
 8014354:	d402      	bmi.n	801435c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8014356:	9e01      	ldr	r6, [sp, #4]
 8014358:	42b0      	cmp	r0, r6
 801435a:	db07      	blt.n	801436c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801435c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801435e:	4401      	add	r1, r0
 8014360:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014362:	3b01      	subs	r3, #1
 8014364:	4402      	add	r2, r0
 8014366:	3402      	adds	r4, #2
 8014368:	e7ed      	b.n	8014346 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801436a:	d069      	beq.n	8014440 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801436c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801436e:	1e58      	subs	r0, r3, #1
 8014370:	fb06 1600 	mla	r6, r6, r0, r1
 8014374:	1436      	asrs	r6, r6, #16
 8014376:	d459      	bmi.n	801442c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8014378:	4546      	cmp	r6, r8
 801437a:	da57      	bge.n	801442c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801437c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801437e:	fb06 2000 	mla	r0, r6, r0, r2
 8014382:	1400      	asrs	r0, r0, #16
 8014384:	d452      	bmi.n	801442c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8014386:	9e01      	ldr	r6, [sp, #4]
 8014388:	42b0      	cmp	r0, r6
 801438a:	da4f      	bge.n	801442c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801438c:	469a      	mov	sl, r3
 801438e:	46a3      	mov	fp, r4
 8014390:	f1ba 0f00 	cmp.w	sl, #0
 8014394:	dd50      	ble.n	8014438 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8014396:	140e      	asrs	r6, r1, #16
 8014398:	1410      	asrs	r0, r2, #16
 801439a:	fb08 6000 	mla	r0, r8, r0, r6
 801439e:	9e02      	ldr	r6, [sp, #8]
 80143a0:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 80143a4:	f8bb 6000 	ldrh.w	r6, [fp]
 80143a8:	1237      	asrs	r7, r6, #8
 80143aa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80143ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80143b2:	fb17 f705 	smulbb	r7, r7, r5
 80143b6:	ea4f 09e6 	mov.w	r9, r6, asr #3
 80143ba:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80143be:	00f6      	lsls	r6, r6, #3
 80143c0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80143c4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80143c8:	10c7      	asrs	r7, r0, #3
 80143ca:	b2f6      	uxtb	r6, r6
 80143cc:	00c0      	lsls	r0, r0, #3
 80143ce:	fb19 f905 	smulbb	r9, r9, r5
 80143d2:	fb16 f605 	smulbb	r6, r6, r5
 80143d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80143da:	b2c0      	uxtb	r0, r0
 80143dc:	fa1f fc8c 	uxth.w	ip, ip
 80143e0:	fb07 970e 	mla	r7, r7, lr, r9
 80143e4:	fb00 600e 	mla	r0, r0, lr, r6
 80143e8:	b280      	uxth	r0, r0
 80143ea:	b2bf      	uxth	r7, r7
 80143ec:	f10c 0601 	add.w	r6, ip, #1
 80143f0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80143f4:	f107 0901 	add.w	r9, r7, #1
 80143f8:	1c46      	adds	r6, r0, #1
 80143fa:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80143fe:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8014402:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014404:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014408:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801440c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8014410:	ea4c 0c06 	orr.w	ip, ip, r6
 8014414:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8014418:	4401      	add	r1, r0
 801441a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801441c:	ea4c 0c09 	orr.w	ip, ip, r9
 8014420:	f82b cb02 	strh.w	ip, [fp], #2
 8014424:	4402      	add	r2, r0
 8014426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801442a:	e7b1      	b.n	8014390 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801442c:	f04f 0900 	mov.w	r9, #0
 8014430:	eb03 0009 	add.w	r0, r3, r9
 8014434:	2800      	cmp	r0, #0
 8014436:	dc41      	bgt.n	80144bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8014438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801443c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014440:	9b00      	ldr	r3, [sp, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	f340 8090 	ble.w	8014568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8014448:	ee30 0a04 	vadd.f32	s0, s0, s8
 801444c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014450:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014456:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801445a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801445e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014462:	eef0 6a62 	vmov.f32	s13, s5
 8014466:	ee61 7a27 	vmul.f32	s15, s2, s15
 801446a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801446e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014472:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8014476:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801447a:	eef0 6a43 	vmov.f32	s13, s6
 801447e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014482:	ee12 2a90 	vmov	r2, s5
 8014486:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801448a:	fb92 f3f3 	sdiv	r3, r2, r3
 801448e:	ee13 2a10 	vmov	r2, s6
 8014492:	9311      	str	r3, [sp, #68]	; 0x44
 8014494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014496:	fb92 f3f3 	sdiv	r3, r2, r3
 801449a:	9312      	str	r3, [sp, #72]	; 0x48
 801449c:	9b00      	ldr	r3, [sp, #0]
 801449e:	9a03      	ldr	r2, [sp, #12]
 80144a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80144a4:	3b01      	subs	r3, #1
 80144a6:	9300      	str	r3, [sp, #0]
 80144a8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80144ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144ae:	eeb0 3a67 	vmov.f32	s6, s15
 80144b2:	bf08      	it	eq
 80144b4:	4613      	moveq	r3, r2
 80144b6:	eef0 2a47 	vmov.f32	s5, s14
 80144ba:	e737      	b.n	801432c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80144bc:	140e      	asrs	r6, r1, #16
 80144be:	d44c      	bmi.n	801455a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80144c0:	4546      	cmp	r6, r8
 80144c2:	da4a      	bge.n	801455a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80144c4:	1410      	asrs	r0, r2, #16
 80144c6:	d448      	bmi.n	801455a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80144c8:	9f01      	ldr	r7, [sp, #4]
 80144ca:	42b8      	cmp	r0, r7
 80144cc:	da45      	bge.n	801455a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80144ce:	fb08 6000 	mla	r0, r8, r0, r6
 80144d2:	9e02      	ldr	r6, [sp, #8]
 80144d4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 80144d8:	f06f 0601 	mvn.w	r6, #1
 80144dc:	fb06 fb09 	mul.w	fp, r6, r9
 80144e0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80144e4:	f834 600b 	ldrh.w	r6, [r4, fp]
 80144e8:	1237      	asrs	r7, r6, #8
 80144ea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80144ee:	fb17 f705 	smulbb	r7, r7, r5
 80144f2:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 80144f6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80144fa:	00f6      	lsls	r6, r6, #3
 80144fc:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8014500:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014504:	10c7      	asrs	r7, r0, #3
 8014506:	b2f6      	uxtb	r6, r6
 8014508:	00c0      	lsls	r0, r0, #3
 801450a:	fb1a fa05 	smulbb	sl, sl, r5
 801450e:	fb16 f605 	smulbb	r6, r6, r5
 8014512:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014516:	b2c0      	uxtb	r0, r0
 8014518:	fa1f fc8c 	uxth.w	ip, ip
 801451c:	fb07 a70e 	mla	r7, r7, lr, sl
 8014520:	fb00 600e 	mla	r0, r0, lr, r6
 8014524:	b2bf      	uxth	r7, r7
 8014526:	b280      	uxth	r0, r0
 8014528:	f10c 0601 	add.w	r6, ip, #1
 801452c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8014530:	f107 0a01 	add.w	sl, r7, #1
 8014534:	1c46      	adds	r6, r0, #1
 8014536:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801453a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801453e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014542:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014546:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801454a:	ea4c 0c06 	orr.w	ip, ip, r6
 801454e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8014552:	ea4c 0c0a 	orr.w	ip, ip, sl
 8014556:	f824 c00b 	strh.w	ip, [r4, fp]
 801455a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801455c:	4401      	add	r1, r0
 801455e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014560:	f109 39ff 	add.w	r9, r9, #4294967295
 8014564:	4402      	add	r2, r0
 8014566:	e763      	b.n	8014430 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 8014568:	b005      	add	sp, #20
 801456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801456e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801456e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014572:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014574:	9201      	str	r2, [sp, #4]
 8014576:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801457a:	6844      	ldr	r4, [r0, #4]
 801457c:	6800      	ldr	r0, [r0, #0]
 801457e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8014582:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8014586:	fb04 2505 	mla	r5, r4, r5, r2
 801458a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801458e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014590:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8014594:	6802      	ldr	r2, [r0, #0]
 8014596:	9200      	str	r2, [sp, #0]
 8014598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801459c:	2900      	cmp	r1, #0
 801459e:	dc03      	bgt.n	80145a8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 80145a0:	9a01      	ldr	r2, [sp, #4]
 80145a2:	2a00      	cmp	r2, #0
 80145a4:	f340 8095 	ble.w	80146d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80145a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145aa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80145ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145b0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	dd0e      	ble.n	80145d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80145b8:	ea5f 4824 	movs.w	r8, r4, asr #16
 80145bc:	d406      	bmi.n	80145cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80145be:	45e0      	cmp	r8, ip
 80145c0:	da04      	bge.n	80145cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80145c2:	ea5f 4820 	movs.w	r8, r0, asr #16
 80145c6:	d401      	bmi.n	80145cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80145c8:	45f0      	cmp	r8, lr
 80145ca:	db05      	blt.n	80145d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80145cc:	443c      	add	r4, r7
 80145ce:	4430      	add	r0, r6
 80145d0:	3b01      	subs	r3, #1
 80145d2:	3502      	adds	r5, #2
 80145d4:	e7ee      	b.n	80145b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80145d6:	d010      	beq.n	80145fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80145d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80145dc:	fb07 4908 	mla	r9, r7, r8, r4
 80145e0:	ea5f 4929 	movs.w	r9, r9, asr #16
 80145e4:	d53d      	bpl.n	8014662 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80145e6:	4698      	mov	r8, r3
 80145e8:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 80145ec:	f1b8 0f00 	cmp.w	r8, #0
 80145f0:	dc55      	bgt.n	801469e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80145f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80145f6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80145fa:	2900      	cmp	r1, #0
 80145fc:	dd69      	ble.n	80146d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80145fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014602:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014606:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801460a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801460c:	3901      	subs	r1, #1
 801460e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014612:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014616:	eeb0 6a62 	vmov.f32	s12, s5
 801461a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801461e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014622:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014626:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801462a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801462e:	eeb0 6a43 	vmov.f32	s12, s6
 8014632:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014636:	ee12 2a90 	vmov	r2, s5
 801463a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801463e:	fb92 f7f3 	sdiv	r7, r2, r3
 8014642:	ee13 2a10 	vmov	r2, s6
 8014646:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801464a:	fb92 f6f3 	sdiv	r6, r2, r3
 801464e:	9a01      	ldr	r2, [sp, #4]
 8014650:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014654:	bf08      	it	eq
 8014656:	4613      	moveq	r3, r2
 8014658:	eeb0 3a67 	vmov.f32	s6, s15
 801465c:	eef0 2a47 	vmov.f32	s5, s14
 8014660:	e79c      	b.n	801459c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 8014662:	45e1      	cmp	r9, ip
 8014664:	dabf      	bge.n	80145e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8014666:	fb06 0808 	mla	r8, r6, r8, r0
 801466a:	ea5f 4828 	movs.w	r8, r8, asr #16
 801466e:	d4ba      	bmi.n	80145e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8014670:	45f0      	cmp	r8, lr
 8014672:	dab8      	bge.n	80145e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8014674:	4698      	mov	r8, r3
 8014676:	46aa      	mov	sl, r5
 8014678:	f1b8 0f00 	cmp.w	r8, #0
 801467c:	ddb9      	ble.n	80145f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 801467e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8014682:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8014686:	fb0c b909 	mla	r9, ip, r9, fp
 801468a:	9a00      	ldr	r2, [sp, #0]
 801468c:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8014690:	f82a 9b02 	strh.w	r9, [sl], #2
 8014694:	443c      	add	r4, r7
 8014696:	4430      	add	r0, r6
 8014698:	f108 38ff 	add.w	r8, r8, #4294967295
 801469c:	e7ec      	b.n	8014678 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801469e:	ea5f 4a24 	movs.w	sl, r4, asr #16
 80146a2:	d411      	bmi.n	80146c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80146a4:	45e2      	cmp	sl, ip
 80146a6:	da0f      	bge.n	80146c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80146a8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80146ac:	d40c      	bmi.n	80146c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80146ae:	45f1      	cmp	r9, lr
 80146b0:	da0a      	bge.n	80146c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80146b2:	fb0c a909 	mla	r9, ip, r9, sl
 80146b6:	9a00      	ldr	r2, [sp, #0]
 80146b8:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 80146bc:	f06f 0201 	mvn.w	r2, #1
 80146c0:	fb02 f908 	mul.w	r9, r2, r8
 80146c4:	f82b a009 	strh.w	sl, [fp, r9]
 80146c8:	443c      	add	r4, r7
 80146ca:	4430      	add	r0, r6
 80146cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80146d0:	e78c      	b.n	80145ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80146d2:	b003      	add	sp, #12
 80146d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080146d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80146d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146dc:	b087      	sub	sp, #28
 80146de:	468b      	mov	fp, r1
 80146e0:	9204      	str	r2, [sp, #16]
 80146e2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80146e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80146e8:	9201      	str	r2, [sp, #4]
 80146ea:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80146ee:	9205      	str	r2, [sp, #20]
 80146f0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80146f4:	6841      	ldr	r1, [r0, #4]
 80146f6:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80146fa:	fb01 2404 	mla	r4, r1, r4, r2
 80146fe:	6802      	ldr	r2, [r0, #0]
 8014700:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014704:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014706:	6812      	ldr	r2, [r2, #0]
 8014708:	9203      	str	r2, [sp, #12]
 801470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801470e:	f1bb 0f00 	cmp.w	fp, #0
 8014712:	dc03      	bgt.n	801471c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8014714:	9a04      	ldr	r2, [sp, #16]
 8014716:	2a00      	cmp	r2, #0
 8014718:	f340 812c 	ble.w	8014974 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801471c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801471e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014724:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014728:	2b00      	cmp	r3, #0
 801472a:	dd0f      	ble.n	801474c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801472c:	1402      	asrs	r2, r0, #16
 801472e:	d406      	bmi.n	801473e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8014730:	4542      	cmp	r2, r8
 8014732:	da04      	bge.n	801473e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8014734:	140a      	asrs	r2, r1, #16
 8014736:	d402      	bmi.n	801473e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8014738:	9d01      	ldr	r5, [sp, #4]
 801473a:	42aa      	cmp	r2, r5
 801473c:	db07      	blt.n	801474e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801473e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014740:	4410      	add	r0, r2
 8014742:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014744:	3b01      	subs	r3, #1
 8014746:	4411      	add	r1, r2
 8014748:	3402      	adds	r4, #2
 801474a:	e7ed      	b.n	8014728 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801474c:	d01a      	beq.n	8014784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801474e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014750:	1e5a      	subs	r2, r3, #1
 8014752:	fb05 0502 	mla	r5, r5, r2, r0
 8014756:	142d      	asrs	r5, r5, #16
 8014758:	d40a      	bmi.n	8014770 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801475a:	4545      	cmp	r5, r8
 801475c:	da08      	bge.n	8014770 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801475e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014760:	fb05 1202 	mla	r2, r5, r2, r1
 8014764:	1412      	asrs	r2, r2, #16
 8014766:	d403      	bmi.n	8014770 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8014768:	9d01      	ldr	r5, [sp, #4]
 801476a:	42aa      	cmp	r2, r5
 801476c:	f2c0 80a6 	blt.w	80148bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8014770:	f04f 0c00 	mov.w	ip, #0
 8014774:	eb03 020c 	add.w	r2, r3, ip
 8014778:	2a00      	cmp	r2, #0
 801477a:	dc3e      	bgt.n	80147fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801477c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014780:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014784:	f1bb 0f00 	cmp.w	fp, #0
 8014788:	f340 80f4 	ble.w	8014974 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801478c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014790:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014794:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801479a:	f1bb 0b01 	subs.w	fp, fp, #1
 801479e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80147a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80147a6:	eeb0 6a62 	vmov.f32	s12, s5
 80147aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80147ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80147b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80147b6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80147ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80147be:	eeb0 6a43 	vmov.f32	s12, s6
 80147c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80147c6:	ee12 2a90 	vmov	r2, s5
 80147ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80147ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80147d2:	ee13 2a10 	vmov	r2, s6
 80147d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80147da:	9313      	str	r3, [sp, #76]	; 0x4c
 80147dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147de:	fb92 f3f3 	sdiv	r3, r2, r3
 80147e2:	9a04      	ldr	r2, [sp, #16]
 80147e4:	9314      	str	r3, [sp, #80]	; 0x50
 80147e6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80147ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147ec:	eeb0 3a67 	vmov.f32	s6, s15
 80147f0:	bf08      	it	eq
 80147f2:	4613      	moveq	r3, r2
 80147f4:	eef0 2a47 	vmov.f32	s5, s14
 80147f8:	e789      	b.n	801470e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80147fa:	1405      	asrs	r5, r0, #16
 80147fc:	d457      	bmi.n	80148ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80147fe:	4545      	cmp	r5, r8
 8014800:	da55      	bge.n	80148ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014802:	140a      	asrs	r2, r1, #16
 8014804:	d453      	bmi.n	80148ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014806:	9e01      	ldr	r6, [sp, #4]
 8014808:	42b2      	cmp	r2, r6
 801480a:	da50      	bge.n	80148ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801480c:	fb08 5202 	mla	r2, r8, r2, r5
 8014810:	9d03      	ldr	r5, [sp, #12]
 8014812:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8014816:	0e2e      	lsrs	r6, r5, #24
 8014818:	d049      	beq.n	80148ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801481a:	f06f 0201 	mvn.w	r2, #1
 801481e:	fb02 f20c 	mul.w	r2, r2, ip
 8014822:	9202      	str	r2, [sp, #8]
 8014824:	f834 e002 	ldrh.w	lr, [r4, r2]
 8014828:	9a05      	ldr	r2, [sp, #20]
 801482a:	4356      	muls	r6, r2
 801482c:	1c72      	adds	r2, r6, #1
 801482e:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8014832:	1212      	asrs	r2, r2, #8
 8014834:	fa1f f982 	uxth.w	r9, r2
 8014838:	ea4f 272e 	mov.w	r7, lr, asr #8
 801483c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8014840:	43d2      	mvns	r2, r2
 8014842:	b2d2      	uxtb	r2, r2
 8014844:	fb16 f609 	smulbb	r6, r6, r9
 8014848:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801484c:	fb07 6702 	mla	r7, r7, r2, r6
 8014850:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014854:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8014858:	b2ed      	uxtb	r5, r5
 801485a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801485e:	fa5f fe8e 	uxtb.w	lr, lr
 8014862:	fb15 f509 	smulbb	r5, r5, r9
 8014866:	fb0e 5502 	mla	r5, lr, r2, r5
 801486a:	b2bf      	uxth	r7, r7
 801486c:	fb1a fa09 	smulbb	sl, sl, r9
 8014870:	b2ad      	uxth	r5, r5
 8014872:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014876:	fb06 a602 	mla	r6, r6, r2, sl
 801487a:	1c7a      	adds	r2, r7, #1
 801487c:	f105 0a01 	add.w	sl, r5, #1
 8014880:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8014884:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014888:	b2b6      	uxth	r6, r6
 801488a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801488e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014892:	ea47 070a 	orr.w	r7, r7, sl
 8014896:	f106 0a01 	add.w	sl, r6, #1
 801489a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801489e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80148a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80148a6:	9a02      	ldr	r2, [sp, #8]
 80148a8:	ea47 070a 	orr.w	r7, r7, sl
 80148ac:	52a7      	strh	r7, [r4, r2]
 80148ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80148b0:	4410      	add	r0, r2
 80148b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80148b8:	4411      	add	r1, r2
 80148ba:	e75b      	b.n	8014774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80148bc:	f04f 0e00 	mov.w	lr, #0
 80148c0:	eba3 020e 	sub.w	r2, r3, lr
 80148c4:	2a00      	cmp	r2, #0
 80148c6:	f77f af59 	ble.w	801477c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 80148ca:	1405      	asrs	r5, r0, #16
 80148cc:	140a      	asrs	r2, r1, #16
 80148ce:	fb08 5202 	mla	r2, r8, r2, r5
 80148d2:	9d03      	ldr	r5, [sp, #12]
 80148d4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80148d8:	0e2e      	lsrs	r6, r5, #24
 80148da:	d044      	beq.n	8014966 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80148dc:	9a05      	ldr	r2, [sp, #20]
 80148de:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80148e2:	4356      	muls	r6, r2
 80148e4:	1c72      	adds	r2, r6, #1
 80148e6:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80148ea:	1212      	asrs	r2, r2, #8
 80148ec:	fa1f f982 	uxth.w	r9, r2
 80148f0:	ea4f 272c 	mov.w	r7, ip, asr #8
 80148f4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80148f8:	43d2      	mvns	r2, r2
 80148fa:	b2d2      	uxtb	r2, r2
 80148fc:	fb16 f609 	smulbb	r6, r6, r9
 8014900:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014904:	fb07 6702 	mla	r7, r7, r2, r6
 8014908:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801490c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8014910:	b2ed      	uxtb	r5, r5
 8014912:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014916:	fa5f fc8c 	uxtb.w	ip, ip
 801491a:	fb15 f509 	smulbb	r5, r5, r9
 801491e:	fb0c 5502 	mla	r5, ip, r2, r5
 8014922:	b2bf      	uxth	r7, r7
 8014924:	fb1a fa09 	smulbb	sl, sl, r9
 8014928:	b2ad      	uxth	r5, r5
 801492a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801492e:	fb06 a602 	mla	r6, r6, r2, sl
 8014932:	1c7a      	adds	r2, r7, #1
 8014934:	f105 0a01 	add.w	sl, r5, #1
 8014938:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801493c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8014940:	b2b6      	uxth	r6, r6
 8014942:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8014946:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801494a:	ea47 070a 	orr.w	r7, r7, sl
 801494e:	f106 0a01 	add.w	sl, r6, #1
 8014952:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8014956:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801495a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801495e:	ea47 070a 	orr.w	r7, r7, sl
 8014962:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8014966:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014968:	4410      	add	r0, r2
 801496a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801496c:	f10e 0e01 	add.w	lr, lr, #1
 8014970:	4411      	add	r1, r2
 8014972:	e7a5      	b.n	80148c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8014974:	b007      	add	sp, #28
 8014976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801497c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	b087      	sub	sp, #28
 8014982:	468b      	mov	fp, r1
 8014984:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014986:	9205      	str	r2, [sp, #20]
 8014988:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801498c:	9201      	str	r2, [sp, #4]
 801498e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8014992:	6861      	ldr	r1, [r4, #4]
 8014994:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8014998:	fb01 2000 	mla	r0, r1, r0, r2
 801499c:	6822      	ldr	r2, [r4, #0]
 801499e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80149a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80149a4:	6812      	ldr	r2, [r2, #0]
 80149a6:	9203      	str	r2, [sp, #12]
 80149a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80149ac:	f1bb 0f00 	cmp.w	fp, #0
 80149b0:	dc03      	bgt.n	80149ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80149b2:	9a05      	ldr	r2, [sp, #20]
 80149b4:	2a00      	cmp	r2, #0
 80149b6:	f340 814b 	ble.w	8014c50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 80149ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149bc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80149c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80149c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	dd0f      	ble.n	80149ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80149ca:	140c      	asrs	r4, r1, #16
 80149cc:	d406      	bmi.n	80149dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80149ce:	454c      	cmp	r4, r9
 80149d0:	da04      	bge.n	80149dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80149d2:	1414      	asrs	r4, r2, #16
 80149d4:	d402      	bmi.n	80149dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80149d6:	9d01      	ldr	r5, [sp, #4]
 80149d8:	42ac      	cmp	r4, r5
 80149da:	db07      	blt.n	80149ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80149dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80149de:	4421      	add	r1, r4
 80149e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80149e2:	3b01      	subs	r3, #1
 80149e4:	4422      	add	r2, r4
 80149e6:	3002      	adds	r0, #2
 80149e8:	e7ed      	b.n	80149c6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80149ea:	d018      	beq.n	8014a1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80149ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80149ee:	1e5c      	subs	r4, r3, #1
 80149f0:	fb05 1504 	mla	r5, r5, r4, r1
 80149f4:	142d      	asrs	r5, r5, #16
 80149f6:	d40a      	bmi.n	8014a0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80149f8:	454d      	cmp	r5, r9
 80149fa:	da08      	bge.n	8014a0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80149fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80149fe:	fb05 2404 	mla	r4, r5, r4, r2
 8014a02:	1424      	asrs	r4, r4, #16
 8014a04:	d403      	bmi.n	8014a0e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8014a06:	9d01      	ldr	r5, [sp, #4]
 8014a08:	42ac      	cmp	r4, r5
 8014a0a:	f2c0 80bb 	blt.w	8014b84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 8014a0e:	2700      	movs	r7, #0
 8014a10:	19dc      	adds	r4, r3, r7
 8014a12:	2c00      	cmp	r4, #0
 8014a14:	dc3e      	bgt.n	8014a94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8014a16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014a1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014a1e:	f1bb 0f00 	cmp.w	fp, #0
 8014a22:	f340 8115 	ble.w	8014c50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 8014a26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014a2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014a2e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a34:	f1bb 0b01 	subs.w	fp, fp, #1
 8014a38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014a3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014a40:	eeb0 6a62 	vmov.f32	s12, s5
 8014a44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014a48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014a50:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014a54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014a58:	eeb0 6a43 	vmov.f32	s12, s6
 8014a5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014a60:	ee12 2a90 	vmov	r2, s5
 8014a64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a6c:	ee13 2a10 	vmov	r2, s6
 8014a70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a7c:	9a05      	ldr	r2, [sp, #20]
 8014a7e:	9314      	str	r3, [sp, #80]	; 0x50
 8014a80:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a86:	eeb0 3a67 	vmov.f32	s6, s15
 8014a8a:	bf08      	it	eq
 8014a8c:	4613      	moveq	r3, r2
 8014a8e:	eef0 2a47 	vmov.f32	s5, s14
 8014a92:	e78b      	b.n	80149ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8014a94:	140d      	asrs	r5, r1, #16
 8014a96:	d45c      	bmi.n	8014b52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014a98:	454d      	cmp	r5, r9
 8014a9a:	da5a      	bge.n	8014b52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014a9c:	1414      	asrs	r4, r2, #16
 8014a9e:	d458      	bmi.n	8014b52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014aa0:	9e01      	ldr	r6, [sp, #4]
 8014aa2:	42b4      	cmp	r4, r6
 8014aa4:	da55      	bge.n	8014b52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014aa6:	fb09 5404 	mla	r4, r9, r4, r5
 8014aaa:	9d03      	ldr	r5, [sp, #12]
 8014aac:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8014ab0:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8014ab4:	d04d      	beq.n	8014b52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014ab6:	0a26      	lsrs	r6, r4, #8
 8014ab8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014abc:	fa5f f58e 	uxtb.w	r5, lr
 8014ac0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8014ac4:	9604      	str	r6, [sp, #16]
 8014ac6:	d04a      	beq.n	8014b5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8014ac8:	f06f 0601 	mvn.w	r6, #1
 8014acc:	437e      	muls	r6, r7
 8014ace:	fa1f fa85 	uxth.w	sl, r5
 8014ad2:	f830 8006 	ldrh.w	r8, [r0, r6]
 8014ad6:	9602      	str	r6, [sp, #8]
 8014ad8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8014adc:	43ed      	mvns	r5, r5
 8014ade:	fa5f fc8c 	uxtb.w	ip, ip
 8014ae2:	b2ed      	uxtb	r5, r5
 8014ae4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8014ae8:	fb1c fc0a 	smulbb	ip, ip, sl
 8014aec:	fb0e cc05 	mla	ip, lr, r5, ip
 8014af0:	b2e4      	uxtb	r4, r4
 8014af2:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8014af6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014afa:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8014afe:	fa5f f888 	uxtb.w	r8, r8
 8014b02:	fb14 f40a 	smulbb	r4, r4, sl
 8014b06:	fb08 4405 	mla	r4, r8, r5, r4
 8014b0a:	b2a4      	uxth	r4, r4
 8014b0c:	fa1f fc8c 	uxth.w	ip, ip
 8014b10:	fb16 f60a 	smulbb	r6, r6, sl
 8014b14:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8014b18:	fb0e 6e05 	mla	lr, lr, r5, r6
 8014b1c:	1c66      	adds	r6, r4, #1
 8014b1e:	f10c 0501 	add.w	r5, ip, #1
 8014b22:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8014b26:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8014b2a:	fa1f fe8e 	uxth.w	lr, lr
 8014b2e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014b32:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014b36:	ea4c 0c06 	orr.w	ip, ip, r6
 8014b3a:	f10e 0601 	add.w	r6, lr, #1
 8014b3e:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8014b42:	0976      	lsrs	r6, r6, #5
 8014b44:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014b48:	9c02      	ldr	r4, [sp, #8]
 8014b4a:	ea4c 0c06 	orr.w	ip, ip, r6
 8014b4e:	f820 c004 	strh.w	ip, [r0, r4]
 8014b52:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014b54:	4421      	add	r1, r4
 8014b56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014b58:	3f01      	subs	r7, #1
 8014b5a:	4422      	add	r2, r4
 8014b5c:	e758      	b.n	8014a10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8014b5e:	4e3e      	ldr	r6, [pc, #248]	; (8014c58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8014b60:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014b64:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8014b68:	ea4c 0c04 	orr.w	ip, ip, r4
 8014b6c:	9c04      	ldr	r4, [sp, #16]
 8014b6e:	f06f 0501 	mvn.w	r5, #1
 8014b72:	00e6      	lsls	r6, r4, #3
 8014b74:	437d      	muls	r5, r7
 8014b76:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8014b7a:	ea4c 0c04 	orr.w	ip, ip, r4
 8014b7e:	f820 c005 	strh.w	ip, [r0, r5]
 8014b82:	e7e6      	b.n	8014b52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014b84:	f04f 0800 	mov.w	r8, #0
 8014b88:	eba3 0408 	sub.w	r4, r3, r8
 8014b8c:	2c00      	cmp	r4, #0
 8014b8e:	f77f af42 	ble.w	8014a16 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8014b92:	140d      	asrs	r5, r1, #16
 8014b94:	1414      	asrs	r4, r2, #16
 8014b96:	fb09 5404 	mla	r4, r9, r4, r5
 8014b9a:	9d03      	ldr	r5, [sp, #12]
 8014b9c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8014ba0:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8014ba4:	d042      	beq.n	8014c2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8014ba6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8014baa:	fa5f f58c 	uxtb.w	r5, ip
 8014bae:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8014bb2:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8014bb6:	d040      	beq.n	8014c3a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8014bb8:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 8014bbc:	fa1f fa85 	uxth.w	sl, r5
 8014bc0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8014bc4:	43ed      	mvns	r5, r5
 8014bc6:	b2ff      	uxtb	r7, r7
 8014bc8:	b2ed      	uxtb	r5, r5
 8014bca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014bce:	fb17 f70a 	smulbb	r7, r7, sl
 8014bd2:	fb0c 7705 	mla	r7, ip, r5, r7
 8014bd6:	b2e4      	uxtb	r4, r4
 8014bd8:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8014bdc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014be0:	fa5f fe8e 	uxtb.w	lr, lr
 8014be4:	fb14 f40a 	smulbb	r4, r4, sl
 8014be8:	fb0e 4405 	mla	r4, lr, r5, r4
 8014bec:	b2f6      	uxtb	r6, r6
 8014bee:	b2bf      	uxth	r7, r7
 8014bf0:	fb16 f60a 	smulbb	r6, r6, sl
 8014bf4:	b2a4      	uxth	r4, r4
 8014bf6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8014bfa:	fb0c 6c05 	mla	ip, ip, r5, r6
 8014bfe:	1c7d      	adds	r5, r7, #1
 8014c00:	1c66      	adds	r6, r4, #1
 8014c02:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8014c06:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8014c0a:	fa1f fc8c 	uxth.w	ip, ip
 8014c0e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014c12:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014c16:	4337      	orrs	r7, r6
 8014c18:	f10c 0601 	add.w	r6, ip, #1
 8014c1c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8014c20:	0976      	lsrs	r6, r6, #5
 8014c22:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014c26:	4337      	orrs	r7, r6
 8014c28:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 8014c2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014c2e:	4421      	add	r1, r4
 8014c30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014c32:	f108 0801 	add.w	r8, r8, #1
 8014c36:	4422      	add	r2, r4
 8014c38:	e7a6      	b.n	8014b88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 8014c3a:	4d07      	ldr	r5, [pc, #28]	; (8014c58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8014c3c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8014c40:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8014c44:	00f6      	lsls	r6, r6, #3
 8014c46:	4327      	orrs	r7, r4
 8014c48:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8014c4c:	4327      	orrs	r7, r4
 8014c4e:	e7eb      	b.n	8014c28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8014c50:	b007      	add	sp, #28
 8014c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c56:	bf00      	nop
 8014c58:	fffff800 	.word	0xfffff800

08014c5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c60:	b089      	sub	sp, #36	; 0x24
 8014c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c66:	9206      	str	r2, [sp, #24]
 8014c68:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8014c6c:	9202      	str	r2, [sp, #8]
 8014c6e:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8014c72:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014c74:	9203      	str	r2, [sp, #12]
 8014c76:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8014c7a:	9207      	str	r2, [sp, #28]
 8014c7c:	e9dd 2518 	ldrd	r2, r5, [sp, #96]	; 0x60
 8014c80:	6860      	ldr	r0, [r4, #4]
 8014c82:	9101      	str	r1, [sp, #4]
 8014c84:	fb00 2505 	mla	r5, r0, r5, r2
 8014c88:	6822      	ldr	r2, [r4, #0]
 8014c8a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8014c8e:	9a02      	ldr	r2, [sp, #8]
 8014c90:	3201      	adds	r2, #1
 8014c92:	f022 0201 	bic.w	r2, r2, #1
 8014c96:	9204      	str	r2, [sp, #16]
 8014c98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c9a:	6812      	ldr	r2, [r2, #0]
 8014c9c:	9205      	str	r2, [sp, #20]
 8014c9e:	9a01      	ldr	r2, [sp, #4]
 8014ca0:	2a00      	cmp	r2, #0
 8014ca2:	dc03      	bgt.n	8014cac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8014ca4:	9a06      	ldr	r2, [sp, #24]
 8014ca6:	2a00      	cmp	r2, #0
 8014ca8:	f340 8153 	ble.w	8014f52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8014cac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014cae:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014cb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014cb4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	dd10      	ble.n	8014cde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8014cbc:	1422      	asrs	r2, r4, #16
 8014cbe:	d407      	bmi.n	8014cd0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014cc0:	9e02      	ldr	r6, [sp, #8]
 8014cc2:	4296      	cmp	r6, r2
 8014cc4:	dd04      	ble.n	8014cd0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014cc6:	1402      	asrs	r2, r0, #16
 8014cc8:	d402      	bmi.n	8014cd0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014cca:	9e03      	ldr	r6, [sp, #12]
 8014ccc:	42b2      	cmp	r2, r6
 8014cce:	db07      	blt.n	8014ce0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8014cd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cd2:	4414      	add	r4, r2
 8014cd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014cd6:	3b01      	subs	r3, #1
 8014cd8:	4410      	add	r0, r2
 8014cda:	3502      	adds	r5, #2
 8014cdc:	e7ec      	b.n	8014cb8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8014cde:	d00f      	beq.n	8014d00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8014ce0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014ce2:	1e5a      	subs	r2, r3, #1
 8014ce4:	fb06 4602 	mla	r6, r6, r2, r4
 8014ce8:	1436      	asrs	r6, r6, #16
 8014cea:	d545      	bpl.n	8014d78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8014cec:	469a      	mov	sl, r3
 8014cee:	46a9      	mov	r9, r5
 8014cf0:	f1ba 0f00 	cmp.w	sl, #0
 8014cf4:	f300 80ba 	bgt.w	8014e6c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8014cf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014cfc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8014d00:	9b01      	ldr	r3, [sp, #4]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	f340 8125 	ble.w	8014f52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8014d08:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014d0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014d10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014d14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014d1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014d1e:	eeb0 6a62 	vmov.f32	s12, s5
 8014d22:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014d26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014d2e:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8014d32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014d36:	eeb0 6a43 	vmov.f32	s12, s6
 8014d3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014d3e:	ee12 2a90 	vmov	r2, s5
 8014d42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d4a:	ee13 2a10 	vmov	r2, s6
 8014d4e:	9315      	str	r3, [sp, #84]	; 0x54
 8014d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8014d56:	9316      	str	r3, [sp, #88]	; 0x58
 8014d58:	9b01      	ldr	r3, [sp, #4]
 8014d5a:	9a06      	ldr	r2, [sp, #24]
 8014d5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014d60:	3b01      	subs	r3, #1
 8014d62:	9301      	str	r3, [sp, #4]
 8014d64:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8014d68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d6a:	eeb0 3a67 	vmov.f32	s6, s15
 8014d6e:	bf08      	it	eq
 8014d70:	4613      	moveq	r3, r2
 8014d72:	eef0 2a47 	vmov.f32	s5, s14
 8014d76:	e792      	b.n	8014c9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8014d78:	9f02      	ldr	r7, [sp, #8]
 8014d7a:	42b7      	cmp	r7, r6
 8014d7c:	ddb6      	ble.n	8014cec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8014d7e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8014d80:	fb06 0202 	mla	r2, r6, r2, r0
 8014d84:	1412      	asrs	r2, r2, #16
 8014d86:	d4b1      	bmi.n	8014cec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8014d88:	9e03      	ldr	r6, [sp, #12]
 8014d8a:	42b2      	cmp	r2, r6
 8014d8c:	daae      	bge.n	8014cec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8014d8e:	f04f 0800 	mov.w	r8, #0
 8014d92:	eba3 0208 	sub.w	r2, r3, r8
 8014d96:	2a00      	cmp	r2, #0
 8014d98:	ddae      	ble.n	8014cf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8014d9a:	9904      	ldr	r1, [sp, #16]
 8014d9c:	1422      	asrs	r2, r4, #16
 8014d9e:	1406      	asrs	r6, r0, #16
 8014da0:	fb01 2606 	mla	r6, r1, r6, r2
 8014da4:	0872      	lsrs	r2, r6, #1
 8014da6:	9905      	ldr	r1, [sp, #20]
 8014da8:	5c8a      	ldrb	r2, [r1, r2]
 8014daa:	07f1      	lsls	r1, r6, #31
 8014dac:	bf54      	ite	pl
 8014dae:	f002 020f 	andpl.w	r2, r2, #15
 8014db2:	1112      	asrmi	r2, r2, #4
 8014db4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014db8:	b2d2      	uxtb	r2, r2
 8014dba:	2a00      	cmp	r2, #0
 8014dbc:	d04f      	beq.n	8014e5e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8014dbe:	4966      	ldr	r1, [pc, #408]	; (8014f58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8014dc0:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8014dc4:	680e      	ldr	r6, [r1, #0]
 8014dc6:	9907      	ldr	r1, [sp, #28]
 8014dc8:	434a      	muls	r2, r1
 8014dca:	1c57      	adds	r7, r2, #1
 8014dcc:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8014dd0:	1212      	asrs	r2, r2, #8
 8014dd2:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8014dd6:	fa1f fa82 	uxth.w	sl, r2
 8014dda:	ea4f 272e 	mov.w	r7, lr, asr #8
 8014dde:	43d2      	mvns	r2, r2
 8014de0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014de4:	b2d2      	uxtb	r2, r2
 8014de6:	fb1c fc0a 	smulbb	ip, ip, sl
 8014dea:	f3c6 09cc 	ubfx	r9, r6, #3, #13
 8014dee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014df2:	495a      	ldr	r1, [pc, #360]	; (8014f5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8014df4:	fb07 c702 	mla	r7, r7, r2, ip
 8014df8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014dfc:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8014e00:	fb19 f90a 	smulbb	r9, r9, sl
 8014e04:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8014e08:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8014e0c:	fb0c 9c02 	mla	ip, ip, r2, r9
 8014e10:	b2f6      	uxtb	r6, r6
 8014e12:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014e16:	fa1f fc8c 	uxth.w	ip, ip
 8014e1a:	fa5f fe8e 	uxtb.w	lr, lr
 8014e1e:	fb16 f60a 	smulbb	r6, r6, sl
 8014e22:	b2bf      	uxth	r7, r7
 8014e24:	fb0e 6602 	mla	r6, lr, r2, r6
 8014e28:	f10c 0901 	add.w	r9, ip, #1
 8014e2c:	b2b6      	uxth	r6, r6
 8014e2e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8014e32:	f107 0b01 	add.w	fp, r7, #1
 8014e36:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014e3a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014e3e:	f106 0e01 	add.w	lr, r6, #1
 8014e42:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8014e46:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014e4a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8014e4e:	ea4c 0c07 	orr.w	ip, ip, r7
 8014e52:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8014e56:	ea4c 0c0e 	orr.w	ip, ip, lr
 8014e5a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8014e5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014e60:	4414      	add	r4, r2
 8014e62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e64:	f108 0801 	add.w	r8, r8, #1
 8014e68:	4410      	add	r0, r2
 8014e6a:	e792      	b.n	8014d92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8014e6c:	1422      	asrs	r2, r4, #16
 8014e6e:	d467      	bmi.n	8014f40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014e70:	9e02      	ldr	r6, [sp, #8]
 8014e72:	4296      	cmp	r6, r2
 8014e74:	dd64      	ble.n	8014f40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014e76:	1406      	asrs	r6, r0, #16
 8014e78:	d462      	bmi.n	8014f40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014e7a:	9f03      	ldr	r7, [sp, #12]
 8014e7c:	42be      	cmp	r6, r7
 8014e7e:	da5f      	bge.n	8014f40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014e80:	9f04      	ldr	r7, [sp, #16]
 8014e82:	fb06 2607 	mla	r6, r6, r7, r2
 8014e86:	0872      	lsrs	r2, r6, #1
 8014e88:	9f05      	ldr	r7, [sp, #20]
 8014e8a:	5cba      	ldrb	r2, [r7, r2]
 8014e8c:	07f6      	lsls	r6, r6, #31
 8014e8e:	bf54      	ite	pl
 8014e90:	f002 020f 	andpl.w	r2, r2, #15
 8014e94:	1112      	asrmi	r2, r2, #4
 8014e96:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014e9a:	b2d2      	uxtb	r2, r2
 8014e9c:	2a00      	cmp	r2, #0
 8014e9e:	d04f      	beq.n	8014f40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014ea0:	9f07      	ldr	r7, [sp, #28]
 8014ea2:	4e2d      	ldr	r6, [pc, #180]	; (8014f58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8014ea4:	f8b9 e000 	ldrh.w	lr, [r9]
 8014ea8:	6836      	ldr	r6, [r6, #0]
 8014eaa:	492c      	ldr	r1, [pc, #176]	; (8014f5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8014eac:	437a      	muls	r2, r7
 8014eae:	1c57      	adds	r7, r2, #1
 8014eb0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8014eb4:	1212      	asrs	r2, r2, #8
 8014eb6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8014eba:	fa1f fb82 	uxth.w	fp, r2
 8014ebe:	ea4f 272e 	mov.w	r7, lr, asr #8
 8014ec2:	43d2      	mvns	r2, r2
 8014ec4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014ec8:	b2d2      	uxtb	r2, r2
 8014eca:	fb1c fc0b 	smulbb	ip, ip, fp
 8014ece:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8014ed2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014ed6:	fb07 c702 	mla	r7, r7, r2, ip
 8014eda:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8014ede:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8014ee2:	fb18 f80b 	smulbb	r8, r8, fp
 8014ee6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8014eea:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8014eee:	fb0c 8c02 	mla	ip, ip, r2, r8
 8014ef2:	b2f6      	uxtb	r6, r6
 8014ef4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014ef8:	fa1f fc8c 	uxth.w	ip, ip
 8014efc:	fa5f fe8e 	uxtb.w	lr, lr
 8014f00:	fb16 f60b 	smulbb	r6, r6, fp
 8014f04:	b2bf      	uxth	r7, r7
 8014f06:	fb0e 6602 	mla	r6, lr, r2, r6
 8014f0a:	f10c 0801 	add.w	r8, ip, #1
 8014f0e:	b2b6      	uxth	r6, r6
 8014f10:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8014f14:	f107 0801 	add.w	r8, r7, #1
 8014f18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014f1c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8014f20:	f106 0e01 	add.w	lr, r6, #1
 8014f24:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8014f28:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8014f2c:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8014f30:	ea4c 0c07 	orr.w	ip, ip, r7
 8014f34:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8014f38:	ea4c 0c0e 	orr.w	ip, ip, lr
 8014f3c:	f8a9 c000 	strh.w	ip, [r9]
 8014f40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f42:	4414      	add	r4, r2
 8014f44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f46:	f109 0902 	add.w	r9, r9, #2
 8014f4a:	4410      	add	r0, r2
 8014f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014f50:	e6ce      	b.n	8014cf0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8014f52:	b009      	add	sp, #36	; 0x24
 8014f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f58:	2002ee80 	.word	0x2002ee80
 8014f5c:	0007fff8 	.word	0x0007fff8

08014f60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f64:	b087      	sub	sp, #28
 8014f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014f6a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014f6c:	9205      	str	r2, [sp, #20]
 8014f6e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8014f72:	9201      	str	r2, [sp, #4]
 8014f74:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8014f78:	6860      	ldr	r0, [r4, #4]
 8014f7a:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 8014f7e:	9100      	str	r1, [sp, #0]
 8014f80:	fb00 2505 	mla	r5, r0, r5, r2
 8014f84:	6822      	ldr	r2, [r4, #0]
 8014f86:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8014f8a:	f10b 0201 	add.w	r2, fp, #1
 8014f8e:	f022 0201 	bic.w	r2, r2, #1
 8014f92:	9203      	str	r2, [sp, #12]
 8014f94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014f96:	6812      	ldr	r2, [r2, #0]
 8014f98:	9204      	str	r2, [sp, #16]
 8014f9a:	9a00      	ldr	r2, [sp, #0]
 8014f9c:	2a00      	cmp	r2, #0
 8014f9e:	dc03      	bgt.n	8014fa8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8014fa0:	9a05      	ldr	r2, [sp, #20]
 8014fa2:	2a00      	cmp	r2, #0
 8014fa4:	f340 815c 	ble.w	8015260 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8014fa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014faa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014fae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fb0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	dd0f      	ble.n	8014fd8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8014fb8:	1422      	asrs	r2, r4, #16
 8014fba:	d406      	bmi.n	8014fca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8014fbc:	4593      	cmp	fp, r2
 8014fbe:	dd04      	ble.n	8014fca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8014fc0:	1402      	asrs	r2, r0, #16
 8014fc2:	d402      	bmi.n	8014fca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8014fc4:	9e01      	ldr	r6, [sp, #4]
 8014fc6:	42b2      	cmp	r2, r6
 8014fc8:	db07      	blt.n	8014fda <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8014fca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014fcc:	4414      	add	r4, r2
 8014fce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fd0:	3b01      	subs	r3, #1
 8014fd2:	4410      	add	r0, r2
 8014fd4:	3502      	adds	r5, #2
 8014fd6:	e7ed      	b.n	8014fb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8014fd8:	d018      	beq.n	801500c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8014fda:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014fdc:	1e5a      	subs	r2, r3, #1
 8014fde:	fb06 4602 	mla	r6, r6, r2, r4
 8014fe2:	1436      	asrs	r6, r6, #16
 8014fe4:	d40a      	bmi.n	8014ffc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8014fe6:	45b3      	cmp	fp, r6
 8014fe8:	dd08      	ble.n	8014ffc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8014fea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8014fec:	fb06 0202 	mla	r2, r6, r2, r0
 8014ff0:	1412      	asrs	r2, r2, #16
 8014ff2:	d403      	bmi.n	8014ffc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8014ff4:	9e01      	ldr	r6, [sp, #4]
 8014ff6:	42b2      	cmp	r2, r6
 8014ff8:	f2c0 80bf 	blt.w	801517a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 8014ffc:	2700      	movs	r7, #0
 8014ffe:	19da      	adds	r2, r3, r7
 8015000:	2a00      	cmp	r2, #0
 8015002:	dc3f      	bgt.n	8015084 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8015004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015008:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801500c:	9b00      	ldr	r3, [sp, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	f340 8126 	ble.w	8015260 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8015014:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015018:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801501c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015022:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015026:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801502a:	eeb0 6a62 	vmov.f32	s12, s5
 801502e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015032:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015036:	ee77 2a62 	vsub.f32	s5, s14, s5
 801503a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801503e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015042:	eeb0 6a43 	vmov.f32	s12, s6
 8015046:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801504a:	ee12 2a90 	vmov	r2, s5
 801504e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015052:	fb92 f3f3 	sdiv	r3, r2, r3
 8015056:	ee13 2a10 	vmov	r2, s6
 801505a:	9313      	str	r3, [sp, #76]	; 0x4c
 801505c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801505e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015062:	9314      	str	r3, [sp, #80]	; 0x50
 8015064:	9b00      	ldr	r3, [sp, #0]
 8015066:	9a05      	ldr	r2, [sp, #20]
 8015068:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801506c:	3b01      	subs	r3, #1
 801506e:	9300      	str	r3, [sp, #0]
 8015070:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015076:	eeb0 3a67 	vmov.f32	s6, s15
 801507a:	bf08      	it	eq
 801507c:	4613      	moveq	r3, r2
 801507e:	eef0 2a47 	vmov.f32	s5, s14
 8015082:	e78a      	b.n	8014f9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8015084:	1422      	asrs	r2, r4, #16
 8015086:	d466      	bmi.n	8015156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8015088:	4593      	cmp	fp, r2
 801508a:	dd64      	ble.n	8015156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801508c:	1406      	asrs	r6, r0, #16
 801508e:	d462      	bmi.n	8015156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8015090:	9901      	ldr	r1, [sp, #4]
 8015092:	428e      	cmp	r6, r1
 8015094:	da5f      	bge.n	8015156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8015096:	9903      	ldr	r1, [sp, #12]
 8015098:	fb06 2601 	mla	r6, r6, r1, r2
 801509c:	0872      	lsrs	r2, r6, #1
 801509e:	9904      	ldr	r1, [sp, #16]
 80150a0:	5c8a      	ldrb	r2, [r1, r2]
 80150a2:	07f6      	lsls	r6, r6, #31
 80150a4:	bf54      	ite	pl
 80150a6:	f002 020f 	andpl.w	r2, r2, #15
 80150aa:	1112      	asrmi	r2, r2, #4
 80150ac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80150b0:	b2d2      	uxtb	r2, r2
 80150b2:	2a00      	cmp	r2, #0
 80150b4:	d04f      	beq.n	8015156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 80150b6:	496c      	ldr	r1, [pc, #432]	; (8015268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 80150b8:	680e      	ldr	r6, [r1, #0]
 80150ba:	496c      	ldr	r1, [pc, #432]	; (801526c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 80150bc:	ea4f 2926 	mov.w	r9, r6, asr #8
 80150c0:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 80150c4:	2aff      	cmp	r2, #255	; 0xff
 80150c6:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 80150ca:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80150ce:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80150d2:	b2f6      	uxtb	r6, r6
 80150d4:	d045      	beq.n	8015162 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 80150d6:	f06f 0101 	mvn.w	r1, #1
 80150da:	4379      	muls	r1, r7
 80150dc:	fa1f fa82 	uxth.w	sl, r2
 80150e0:	f835 e001 	ldrh.w	lr, [r5, r1]
 80150e4:	9102      	str	r1, [sp, #8]
 80150e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80150ea:	43d2      	mvns	r2, r2
 80150ec:	b2d2      	uxtb	r2, r2
 80150ee:	fb19 f90a 	smulbb	r9, r9, sl
 80150f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80150f6:	fb0c 9c02 	mla	ip, ip, r2, r9
 80150fa:	ea4f 09ee 	mov.w	r9, lr, asr #3
 80150fe:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015102:	fb18 f80a 	smulbb	r8, r8, sl
 8015106:	fb09 8802 	mla	r8, r9, r2, r8
 801510a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801510e:	fa1f f888 	uxth.w	r8, r8
 8015112:	fa5f fe8e 	uxtb.w	lr, lr
 8015116:	fb16 f60a 	smulbb	r6, r6, sl
 801511a:	fa1f fc8c 	uxth.w	ip, ip
 801511e:	fb0e 6602 	mla	r6, lr, r2, r6
 8015122:	f108 0901 	add.w	r9, r8, #1
 8015126:	b2b6      	uxth	r6, r6
 8015128:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801512c:	f10c 0901 	add.w	r9, ip, #1
 8015130:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015134:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8015138:	1c72      	adds	r2, r6, #1
 801513a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801513e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015142:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8015146:	ea48 080c 	orr.w	r8, r8, ip
 801514a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801514e:	ea48 0806 	orr.w	r8, r8, r6
 8015152:	f825 8001 	strh.w	r8, [r5, r1]
 8015156:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015158:	4414      	add	r4, r2
 801515a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801515c:	3f01      	subs	r7, #1
 801515e:	4410      	add	r0, r2
 8015160:	e74d      	b.n	8014ffe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8015162:	f06f 0201 	mvn.w	r2, #1
 8015166:	08f6      	lsrs	r6, r6, #3
 8015168:	fb02 fe07 	mul.w	lr, r2, r7
 801516c:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8015170:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 8015174:	f825 600e 	strh.w	r6, [r5, lr]
 8015178:	e7ed      	b.n	8015156 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801517a:	f04f 0e00 	mov.w	lr, #0
 801517e:	eba3 020e 	sub.w	r2, r3, lr
 8015182:	2a00      	cmp	r2, #0
 8015184:	f77f af3e 	ble.w	8015004 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8015188:	9903      	ldr	r1, [sp, #12]
 801518a:	1422      	asrs	r2, r4, #16
 801518c:	1406      	asrs	r6, r0, #16
 801518e:	fb01 2606 	mla	r6, r1, r6, r2
 8015192:	0872      	lsrs	r2, r6, #1
 8015194:	9904      	ldr	r1, [sp, #16]
 8015196:	5c8a      	ldrb	r2, [r1, r2]
 8015198:	07f1      	lsls	r1, r6, #31
 801519a:	bf54      	ite	pl
 801519c:	f002 020f 	andpl.w	r2, r2, #15
 80151a0:	1112      	asrmi	r2, r2, #4
 80151a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80151a6:	b2d2      	uxtb	r2, r2
 80151a8:	2a00      	cmp	r2, #0
 80151aa:	d04a      	beq.n	8015242 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 80151ac:	492e      	ldr	r1, [pc, #184]	; (8015268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 80151ae:	680e      	ldr	r6, [r1, #0]
 80151b0:	492e      	ldr	r1, [pc, #184]	; (801526c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 80151b2:	ea4f 2926 	mov.w	r9, r6, asr #8
 80151b6:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 80151ba:	2aff      	cmp	r2, #255	; 0xff
 80151bc:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 80151c0:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80151c4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80151c8:	b2f6      	uxtb	r6, r6
 80151ca:	d041      	beq.n	8015250 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f0>
 80151cc:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 80151d0:	fa1f fa82 	uxth.w	sl, r2
 80151d4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80151d8:	43d2      	mvns	r2, r2
 80151da:	b2d2      	uxtb	r2, r2
 80151dc:	fb19 f90a 	smulbb	r9, r9, sl
 80151e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80151e4:	fb07 9702 	mla	r7, r7, r2, r9
 80151e8:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80151ec:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80151f0:	fb18 f80a 	smulbb	r8, r8, sl
 80151f4:	fb09 8802 	mla	r8, r9, r2, r8
 80151f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80151fc:	fa1f f888 	uxth.w	r8, r8
 8015200:	fa5f fc8c 	uxtb.w	ip, ip
 8015204:	fb16 f60a 	smulbb	r6, r6, sl
 8015208:	b2bf      	uxth	r7, r7
 801520a:	fb0c 6602 	mla	r6, ip, r2, r6
 801520e:	f108 0901 	add.w	r9, r8, #1
 8015212:	b2b6      	uxth	r6, r6
 8015214:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8015218:	f107 0901 	add.w	r9, r7, #1
 801521c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015220:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8015224:	1c72      	adds	r2, r6, #1
 8015226:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801522a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801522e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8015232:	ea48 0807 	orr.w	r8, r8, r7
 8015236:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801523a:	ea48 0806 	orr.w	r8, r8, r6
 801523e:	f825 801e 	strh.w	r8, [r5, lr, lsl #1]
 8015242:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015244:	4414      	add	r4, r2
 8015246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015248:	f10e 0e01 	add.w	lr, lr, #1
 801524c:	4410      	add	r0, r2
 801524e:	e796      	b.n	801517e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8015250:	08f6      	lsrs	r6, r6, #3
 8015252:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8015256:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 801525a:	f825 601e 	strh.w	r6, [r5, lr, lsl #1]
 801525e:	e7f0      	b.n	8015242 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 8015260:	b007      	add	sp, #28
 8015262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015266:	bf00      	nop
 8015268:	2002ee80 	.word	0x2002ee80
 801526c:	0007fff8 	.word	0x0007fff8

08015270 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015270:	4770      	bx	lr

08015272 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015272:	4770      	bx	lr

08015274 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015274:	4770      	bx	lr

08015276 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015276:	4770      	bx	lr

08015278 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015278:	4770      	bx	lr

0801527a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801527a:	4770      	bx	lr

0801527c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801527c:	4770      	bx	lr

0801527e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801527e:	4770      	bx	lr

08015280 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015280:	4770      	bx	lr

08015282 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8015282:	4770      	bx	lr

08015284 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015284:	4770      	bx	lr

08015286 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015286:	4770      	bx	lr

08015288 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015288:	4770      	bx	lr

0801528a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801528a:	4770      	bx	lr

0801528c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801528c:	4770      	bx	lr

0801528e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801528e:	4770      	bx	lr

08015290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015290:	4770      	bx	lr

08015292 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015292:	4770      	bx	lr

08015294 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015294:	4770      	bx	lr

08015296 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015296:	4770      	bx	lr

08015298 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015298:	4770      	bx	lr

0801529a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801529a:	4770      	bx	lr

0801529c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801529c:	4770      	bx	lr

0801529e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801529e:	4770      	bx	lr

080152a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80152a0:	4770      	bx	lr

080152a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80152a2:	4770      	bx	lr

080152a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80152a4:	4770      	bx	lr

080152a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80152a6:	4770      	bx	lr

080152a8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80152a8:	b508      	push	{r3, lr}
 80152aa:	4b06      	ldr	r3, [pc, #24]	; (80152c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80152ac:	8818      	ldrh	r0, [r3, #0]
 80152ae:	b928      	cbnz	r0, 80152bc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 80152b0:	4b05      	ldr	r3, [pc, #20]	; (80152c8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80152b2:	4a06      	ldr	r2, [pc, #24]	; (80152cc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80152b4:	4806      	ldr	r0, [pc, #24]	; (80152d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80152b6:	21d7      	movs	r1, #215	; 0xd7
 80152b8:	f009 f894 	bl	801e3e4 <__assert_func>
 80152bc:	0040      	lsls	r0, r0, #1
 80152be:	b280      	uxth	r0, r0
 80152c0:	bd08      	pop	{r3, pc}
 80152c2:	bf00      	nop
 80152c4:	2002ee72 	.word	0x2002ee72
 80152c8:	0802225d 	.word	0x0802225d
 80152cc:	080227e3 	.word	0x080227e3
 80152d0:	0802229f 	.word	0x0802229f

080152d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	b08d      	sub	sp, #52	; 0x34
 80152da:	460f      	mov	r7, r1
 80152dc:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80152e0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 80152e4:	4616      	mov	r6, r2
 80152e6:	f1b9 0f00 	cmp.w	r9, #0
 80152ea:	d046      	beq.n	801537a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80152ec:	6810      	ldr	r0, [r2, #0]
 80152ee:	6851      	ldr	r1, [r2, #4]
 80152f0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80154b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 80152f4:	ad08      	add	r5, sp, #32
 80152f6:	c503      	stmia	r5!, {r0, r1}
 80152f8:	6818      	ldr	r0, [r3, #0]
 80152fa:	6859      	ldr	r1, [r3, #4]
 80152fc:	ad0a      	add	r5, sp, #40	; 0x28
 80152fe:	c503      	stmia	r5!, {r0, r1}
 8015300:	a808      	add	r0, sp, #32
 8015302:	f7fb fc5b 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015306:	4631      	mov	r1, r6
 8015308:	a80a      	add	r0, sp, #40	; 0x28
 801530a:	f7fb fc3f 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801530e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015312:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015316:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801531a:	f8d8 0000 	ldr.w	r0, [r8]
 801531e:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8015322:	fb16 2103 	smlabb	r1, r6, r3, r2
 8015326:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801532a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801532e:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8015332:	440a      	add	r2, r1
 8015334:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015338:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801533c:	4413      	add	r3, r2
 801533e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015342:	6803      	ldr	r3, [r0, #0]
 8015344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015346:	4798      	blx	r3
 8015348:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801534c:	d018      	beq.n	8015380 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801534e:	f010 0f04 	tst.w	r0, #4
 8015352:	d019      	beq.n	8015388 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8015354:	f8d8 0000 	ldr.w	r0, [r8]
 8015358:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801535c:	6801      	ldr	r1, [r0, #0]
 801535e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8015362:	e9cd 9403 	strd	r9, r4, [sp, #12]
 8015366:	b2bf      	uxth	r7, r7
 8015368:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801536c:	9402      	str	r4, [sp, #8]
 801536e:	b2ad      	uxth	r5, r5
 8015370:	9701      	str	r7, [sp, #4]
 8015372:	9500      	str	r5, [sp, #0]
 8015374:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8015376:	4631      	mov	r1, r6
 8015378:	47a0      	blx	r4
 801537a:	b00d      	add	sp, #52	; 0x34
 801537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015380:	b914      	cbnz	r4, 8015388 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8015382:	f010 0f01 	tst.w	r0, #1
 8015386:	e7e4      	b.n	8015352 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8015388:	f8d8 0000 	ldr.w	r0, [r8]
 801538c:	6803      	ldr	r3, [r0, #0]
 801538e:	6a1b      	ldr	r3, [r3, #32]
 8015390:	4798      	blx	r3
 8015392:	4a48      	ldr	r2, [pc, #288]	; (80154b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 8015394:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8015398:	8814      	ldrh	r4, [r2, #0]
 801539a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801539e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80153a2:	fb01 3404 	mla	r4, r1, r4, r3
 80153a6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80153aa:	4692      	mov	sl, r2
 80153ac:	d118      	bne.n	80153e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 80153ae:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 80153b2:	f04f 0900 	mov.w	r9, #0
 80153b6:	f8d8 0000 	ldr.w	r0, [r8]
 80153ba:	45b9      	cmp	r9, r7
 80153bc:	6803      	ldr	r3, [r0, #0]
 80153be:	da73      	bge.n	80154a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 80153c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80153c2:	4632      	mov	r2, r6
 80153c4:	465b      	mov	r3, fp
 80153c6:	4621      	mov	r1, r4
 80153c8:	47a8      	blx	r5
 80153ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80153ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80153d2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80153d6:	f109 0901 	add.w	r9, r9, #1
 80153da:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80153de:	e7ea      	b.n	80153b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 80153e0:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 80153e4:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 80153e8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80153ec:	f04f 0b00 	mov.w	fp, #0
 80153f0:	fa1f f389 	uxth.w	r3, r9
 80153f4:	fa1f f888 	uxth.w	r8, r8
 80153f8:	9207      	str	r2, [sp, #28]
 80153fa:	45bb      	cmp	fp, r7
 80153fc:	da54      	bge.n	80154a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 80153fe:	f04f 0e00 	mov.w	lr, #0
 8015402:	45ae      	cmp	lr, r5
 8015404:	da41      	bge.n	801548a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 8015406:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 801540a:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 801540e:	1208      	asrs	r0, r1, #8
 8015410:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8015414:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8015418:	fb10 f008 	smulbb	r0, r0, r8
 801541c:	ea4f 09e1 	mov.w	r9, r1, asr #3
 8015420:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015424:	00c9      	lsls	r1, r1, #3
 8015426:	fb0c 0c03 	mla	ip, ip, r3, r0
 801542a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801542e:	10d0      	asrs	r0, r2, #3
 8015430:	b2c9      	uxtb	r1, r1
 8015432:	00d2      	lsls	r2, r2, #3
 8015434:	fa1f fc8c 	uxth.w	ip, ip
 8015438:	fb19 f908 	smulbb	r9, r9, r8
 801543c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015440:	b2d2      	uxtb	r2, r2
 8015442:	fb11 f108 	smulbb	r1, r1, r8
 8015446:	fb00 9003 	mla	r0, r0, r3, r9
 801544a:	fb02 1203 	mla	r2, r2, r3, r1
 801544e:	f10c 0901 	add.w	r9, ip, #1
 8015452:	b292      	uxth	r2, r2
 8015454:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8015458:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801545c:	f102 0c01 	add.w	ip, r2, #1
 8015460:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015464:	b280      	uxth	r0, r0
 8015466:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801546a:	ea49 0c02 	orr.w	ip, r9, r2
 801546e:	f100 0901 	add.w	r9, r0, #1
 8015472:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8015476:	0940      	lsrs	r0, r0, #5
 8015478:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801547c:	ea4c 0c00 	orr.w	ip, ip, r0
 8015480:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 8015484:	f10e 0e01 	add.w	lr, lr, #1
 8015488:	e7bb      	b.n	8015402 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801548a:	9a07      	ldr	r2, [sp, #28]
 801548c:	8812      	ldrh	r2, [r2, #0]
 801548e:	1b52      	subs	r2, r2, r5
 8015490:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8015494:	4414      	add	r4, r2
 8015496:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801549a:	1b52      	subs	r2, r2, r5
 801549c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 80154a0:	4416      	add	r6, r2
 80154a2:	f10b 0b01 	add.w	fp, fp, #1
 80154a6:	e7a8      	b.n	80153fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 80154a8:	4b03      	ldr	r3, [pc, #12]	; (80154b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 80154aa:	6818      	ldr	r0, [r3, #0]
 80154ac:	6803      	ldr	r3, [r0, #0]
 80154ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b0:	4798      	blx	r3
 80154b2:	e762      	b.n	801537a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80154b4:	2002ee72 	.word	0x2002ee72
 80154b8:	2002ee78 	.word	0x2002ee78

080154bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80154bc:	b510      	push	{r4, lr}
 80154be:	2104      	movs	r1, #4
 80154c0:	4604      	mov	r4, r0
 80154c2:	f008 ff63 	bl	801e38c <_ZdlPvj>
 80154c6:	4620      	mov	r0, r4
 80154c8:	bd10      	pop	{r4, pc}

080154ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80154ca:	b510      	push	{r4, lr}
 80154cc:	2104      	movs	r1, #4
 80154ce:	4604      	mov	r4, r0
 80154d0:	f008 ff5c 	bl	801e38c <_ZdlPvj>
 80154d4:	4620      	mov	r0, r4
 80154d6:	bd10      	pop	{r4, pc}

080154d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80154d8:	b510      	push	{r4, lr}
 80154da:	2104      	movs	r1, #4
 80154dc:	4604      	mov	r4, r0
 80154de:	f008 ff55 	bl	801e38c <_ZdlPvj>
 80154e2:	4620      	mov	r0, r4
 80154e4:	bd10      	pop	{r4, pc}

080154e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80154e6:	b510      	push	{r4, lr}
 80154e8:	2104      	movs	r1, #4
 80154ea:	4604      	mov	r4, r0
 80154ec:	f008 ff4e 	bl	801e38c <_ZdlPvj>
 80154f0:	4620      	mov	r0, r4
 80154f2:	bd10      	pop	{r4, pc}

080154f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80154f4:	b510      	push	{r4, lr}
 80154f6:	2104      	movs	r1, #4
 80154f8:	4604      	mov	r4, r0
 80154fa:	f008 ff47 	bl	801e38c <_ZdlPvj>
 80154fe:	4620      	mov	r0, r4
 8015500:	bd10      	pop	{r4, pc}

08015502 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8015502:	b510      	push	{r4, lr}
 8015504:	2104      	movs	r1, #4
 8015506:	4604      	mov	r4, r0
 8015508:	f008 ff40 	bl	801e38c <_ZdlPvj>
 801550c:	4620      	mov	r0, r4
 801550e:	bd10      	pop	{r4, pc}

08015510 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8015510:	b510      	push	{r4, lr}
 8015512:	2104      	movs	r1, #4
 8015514:	4604      	mov	r4, r0
 8015516:	f008 ff39 	bl	801e38c <_ZdlPvj>
 801551a:	4620      	mov	r0, r4
 801551c:	bd10      	pop	{r4, pc}

0801551e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801551e:	b510      	push	{r4, lr}
 8015520:	2104      	movs	r1, #4
 8015522:	4604      	mov	r4, r0
 8015524:	f008 ff32 	bl	801e38c <_ZdlPvj>
 8015528:	4620      	mov	r0, r4
 801552a:	bd10      	pop	{r4, pc}

0801552c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801552c:	b510      	push	{r4, lr}
 801552e:	2104      	movs	r1, #4
 8015530:	4604      	mov	r4, r0
 8015532:	f008 ff2b 	bl	801e38c <_ZdlPvj>
 8015536:	4620      	mov	r0, r4
 8015538:	bd10      	pop	{r4, pc}

0801553a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801553a:	b510      	push	{r4, lr}
 801553c:	2104      	movs	r1, #4
 801553e:	4604      	mov	r4, r0
 8015540:	f008 ff24 	bl	801e38c <_ZdlPvj>
 8015544:	4620      	mov	r0, r4
 8015546:	bd10      	pop	{r4, pc}

08015548 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8015548:	b510      	push	{r4, lr}
 801554a:	2104      	movs	r1, #4
 801554c:	4604      	mov	r4, r0
 801554e:	f008 ff1d 	bl	801e38c <_ZdlPvj>
 8015552:	4620      	mov	r0, r4
 8015554:	bd10      	pop	{r4, pc}

08015556 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8015556:	b510      	push	{r4, lr}
 8015558:	2104      	movs	r1, #4
 801555a:	4604      	mov	r4, r0
 801555c:	f008 ff16 	bl	801e38c <_ZdlPvj>
 8015560:	4620      	mov	r0, r4
 8015562:	bd10      	pop	{r4, pc}

08015564 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8015564:	b510      	push	{r4, lr}
 8015566:	2104      	movs	r1, #4
 8015568:	4604      	mov	r4, r0
 801556a:	f008 ff0f 	bl	801e38c <_ZdlPvj>
 801556e:	4620      	mov	r0, r4
 8015570:	bd10      	pop	{r4, pc}

08015572 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8015572:	b510      	push	{r4, lr}
 8015574:	2104      	movs	r1, #4
 8015576:	4604      	mov	r4, r0
 8015578:	f008 ff08 	bl	801e38c <_ZdlPvj>
 801557c:	4620      	mov	r0, r4
 801557e:	bd10      	pop	{r4, pc}

08015580 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8015580:	b510      	push	{r4, lr}
 8015582:	2104      	movs	r1, #4
 8015584:	4604      	mov	r4, r0
 8015586:	f008 ff01 	bl	801e38c <_ZdlPvj>
 801558a:	4620      	mov	r0, r4
 801558c:	bd10      	pop	{r4, pc}

0801558e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801558e:	b510      	push	{r4, lr}
 8015590:	2104      	movs	r1, #4
 8015592:	4604      	mov	r4, r0
 8015594:	f008 fefa 	bl	801e38c <_ZdlPvj>
 8015598:	4620      	mov	r0, r4
 801559a:	bd10      	pop	{r4, pc}

0801559c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801559c:	b510      	push	{r4, lr}
 801559e:	2104      	movs	r1, #4
 80155a0:	4604      	mov	r4, r0
 80155a2:	f008 fef3 	bl	801e38c <_ZdlPvj>
 80155a6:	4620      	mov	r0, r4
 80155a8:	bd10      	pop	{r4, pc}

080155aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80155aa:	b510      	push	{r4, lr}
 80155ac:	2104      	movs	r1, #4
 80155ae:	4604      	mov	r4, r0
 80155b0:	f008 feec 	bl	801e38c <_ZdlPvj>
 80155b4:	4620      	mov	r0, r4
 80155b6:	bd10      	pop	{r4, pc}

080155b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80155b8:	b510      	push	{r4, lr}
 80155ba:	2104      	movs	r1, #4
 80155bc:	4604      	mov	r4, r0
 80155be:	f008 fee5 	bl	801e38c <_ZdlPvj>
 80155c2:	4620      	mov	r0, r4
 80155c4:	bd10      	pop	{r4, pc}

080155c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80155c6:	b510      	push	{r4, lr}
 80155c8:	2104      	movs	r1, #4
 80155ca:	4604      	mov	r4, r0
 80155cc:	f008 fede 	bl	801e38c <_ZdlPvj>
 80155d0:	4620      	mov	r0, r4
 80155d2:	bd10      	pop	{r4, pc}

080155d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80155d4:	b510      	push	{r4, lr}
 80155d6:	2104      	movs	r1, #4
 80155d8:	4604      	mov	r4, r0
 80155da:	f008 fed7 	bl	801e38c <_ZdlPvj>
 80155de:	4620      	mov	r0, r4
 80155e0:	bd10      	pop	{r4, pc}

080155e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80155e2:	b510      	push	{r4, lr}
 80155e4:	2104      	movs	r1, #4
 80155e6:	4604      	mov	r4, r0
 80155e8:	f008 fed0 	bl	801e38c <_ZdlPvj>
 80155ec:	4620      	mov	r0, r4
 80155ee:	bd10      	pop	{r4, pc}

080155f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80155f0:	b510      	push	{r4, lr}
 80155f2:	2104      	movs	r1, #4
 80155f4:	4604      	mov	r4, r0
 80155f6:	f008 fec9 	bl	801e38c <_ZdlPvj>
 80155fa:	4620      	mov	r0, r4
 80155fc:	bd10      	pop	{r4, pc}

080155fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80155fe:	b510      	push	{r4, lr}
 8015600:	2104      	movs	r1, #4
 8015602:	4604      	mov	r4, r0
 8015604:	f008 fec2 	bl	801e38c <_ZdlPvj>
 8015608:	4620      	mov	r0, r4
 801560a:	bd10      	pop	{r4, pc}

0801560c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801560c:	b510      	push	{r4, lr}
 801560e:	2104      	movs	r1, #4
 8015610:	4604      	mov	r4, r0
 8015612:	f008 febb 	bl	801e38c <_ZdlPvj>
 8015616:	4620      	mov	r0, r4
 8015618:	bd10      	pop	{r4, pc}

0801561a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801561a:	b510      	push	{r4, lr}
 801561c:	2104      	movs	r1, #4
 801561e:	4604      	mov	r4, r0
 8015620:	f008 feb4 	bl	801e38c <_ZdlPvj>
 8015624:	4620      	mov	r0, r4
 8015626:	bd10      	pop	{r4, pc}

08015628 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8015628:	b510      	push	{r4, lr}
 801562a:	2104      	movs	r1, #4
 801562c:	4604      	mov	r4, r0
 801562e:	f008 fead 	bl	801e38c <_ZdlPvj>
 8015632:	4620      	mov	r0, r4
 8015634:	bd10      	pop	{r4, pc}

08015636 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8015636:	b510      	push	{r4, lr}
 8015638:	2104      	movs	r1, #4
 801563a:	4604      	mov	r4, r0
 801563c:	f008 fea6 	bl	801e38c <_ZdlPvj>
 8015640:	4620      	mov	r0, r4
 8015642:	bd10      	pop	{r4, pc}

08015644 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015648:	460e      	mov	r6, r1
 801564a:	b08b      	sub	sp, #44	; 0x2c
 801564c:	4615      	mov	r5, r2
 801564e:	461c      	mov	r4, r3
 8015650:	b323      	cbz	r3, 801569c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8015652:	4608      	mov	r0, r1
 8015654:	f7f9 f9ae 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015658:	bb00      	cbnz	r0, 801569c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801565a:	6830      	ldr	r0, [r6, #0]
 801565c:	6871      	ldr	r1, [r6, #4]
 801565e:	4e55      	ldr	r6, [pc, #340]	; (80157b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 8015660:	ab08      	add	r3, sp, #32
 8015662:	c303      	stmia	r3!, {r0, r1}
 8015664:	a808      	add	r0, sp, #32
 8015666:	f7fb faa9 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801566a:	6830      	ldr	r0, [r6, #0]
 801566c:	6803      	ldr	r3, [r0, #0]
 801566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015670:	4798      	blx	r3
 8015672:	2cff      	cmp	r4, #255	; 0xff
 8015674:	d015      	beq.n	80156a2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 8015676:	f010 0f08 	tst.w	r0, #8
 801567a:	d015      	beq.n	80156a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 801567c:	6830      	ldr	r0, [r6, #0]
 801567e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015682:	6801      	ldr	r1, [r0, #0]
 8015684:	9402      	str	r4, [sp, #8]
 8015686:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801568a:	9401      	str	r4, [sp, #4]
 801568c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8015690:	9400      	str	r4, [sp, #0]
 8015692:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8015694:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015698:	4629      	mov	r1, r5
 801569a:	47a0      	blx	r4
 801569c:	b00b      	add	sp, #44	; 0x2c
 801569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a2:	f010 0f02 	tst.w	r0, #2
 80156a6:	e7e8      	b.n	801567a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80156a8:	6830      	ldr	r0, [r6, #0]
 80156aa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80156ae:	6803      	ldr	r3, [r0, #0]
 80156b0:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80156b4:	6a1b      	ldr	r3, [r3, #32]
 80156b6:	4798      	blx	r3
 80156b8:	4a3f      	ldr	r2, [pc, #252]	; (80157b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 80156ba:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80156be:	8816      	ldrh	r6, [r2, #0]
 80156c0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80156c4:	2cff      	cmp	r4, #255	; 0xff
 80156c6:	fb06 1303 	mla	r3, r6, r3, r1
 80156ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80156ce:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80156d2:	4616      	mov	r6, r2
 80156d4:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 80156d8:	d10a      	bne.n	80156f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 80156da:	0049      	lsls	r1, r1, #1
 80156dc:	2200      	movs	r2, #0
 80156de:	454a      	cmp	r2, r9
 80156e0:	da62      	bge.n	80157a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 80156e2:	2300      	movs	r3, #0
 80156e4:	4543      	cmp	r3, r8
 80156e6:	da58      	bge.n	801579a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 80156e8:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 80156ec:	3301      	adds	r3, #1
 80156ee:	e7f9      	b.n	80156e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 80156f0:	122b      	asrs	r3, r5, #8
 80156f2:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 80156f6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80156fa:	b2a4      	uxth	r4, r4
 80156fc:	4363      	muls	r3, r4
 80156fe:	9305      	str	r3, [sp, #20]
 8015700:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 8015704:	00eb      	lsls	r3, r5, #3
 8015706:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801570a:	b2db      	uxtb	r3, r3
 801570c:	0049      	lsls	r1, r1, #1
 801570e:	4366      	muls	r6, r4
 8015710:	4363      	muls	r3, r4
 8015712:	9106      	str	r1, [sp, #24]
 8015714:	f04f 0c00 	mov.w	ip, #0
 8015718:	b2bf      	uxth	r7, r7
 801571a:	9207      	str	r2, [sp, #28]
 801571c:	45cc      	cmp	ip, r9
 801571e:	da43      	bge.n	80157a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8015720:	4682      	mov	sl, r0
 8015722:	f04f 0e00 	mov.w	lr, #0
 8015726:	45c6      	cmp	lr, r8
 8015728:	da2d      	bge.n	8015786 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x142>
 801572a:	f8ba 2000 	ldrh.w	r2, [sl]
 801572e:	9905      	ldr	r1, [sp, #20]
 8015730:	1214      	asrs	r4, r2, #8
 8015732:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8015736:	fb14 f407 	smulbb	r4, r4, r7
 801573a:	440c      	add	r4, r1
 801573c:	10d1      	asrs	r1, r2, #3
 801573e:	00d2      	lsls	r2, r2, #3
 8015740:	b2d2      	uxtb	r2, r2
 8015742:	fb12 f207 	smulbb	r2, r2, r7
 8015746:	b2a4      	uxth	r4, r4
 8015748:	441a      	add	r2, r3
 801574a:	b292      	uxth	r2, r2
 801574c:	1c65      	adds	r5, r4, #1
 801574e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8015752:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8015756:	fb11 f107 	smulbb	r1, r1, r7
 801575a:	1c55      	adds	r5, r2, #1
 801575c:	4431      	add	r1, r6
 801575e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8015762:	b289      	uxth	r1, r1
 8015764:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8015768:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801576c:	4314      	orrs	r4, r2
 801576e:	1c4a      	adds	r2, r1, #1
 8015770:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8015774:	0949      	lsrs	r1, r1, #5
 8015776:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801577a:	430c      	orrs	r4, r1
 801577c:	f82a 4b02 	strh.w	r4, [sl], #2
 8015780:	f10e 0e01 	add.w	lr, lr, #1
 8015784:	e7cf      	b.n	8015726 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe2>
 8015786:	9a07      	ldr	r2, [sp, #28]
 8015788:	9906      	ldr	r1, [sp, #24]
 801578a:	8812      	ldrh	r2, [r2, #0]
 801578c:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 8015790:	440a      	add	r2, r1
 8015792:	4410      	add	r0, r2
 8015794:	f10c 0c01 	add.w	ip, ip, #1
 8015798:	e7c0      	b.n	801571c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd8>
 801579a:	8833      	ldrh	r3, [r6, #0]
 801579c:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 80157a0:	440b      	add	r3, r1
 80157a2:	4418      	add	r0, r3
 80157a4:	3201      	adds	r2, #1
 80157a6:	e79a      	b.n	80156de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 80157a8:	4b02      	ldr	r3, [pc, #8]	; (80157b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 80157aa:	6818      	ldr	r0, [r3, #0]
 80157ac:	6803      	ldr	r3, [r0, #0]
 80157ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b0:	4798      	blx	r3
 80157b2:	e773      	b.n	801569c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 80157b4:	2002ee78 	.word	0x2002ee78
 80157b8:	2002ee72 	.word	0x2002ee72

080157bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80157bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c0:	4d9b      	ldr	r5, [pc, #620]	; (8015a30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80157c2:	4690      	mov	r8, r2
 80157c4:	682a      	ldr	r2, [r5, #0]
 80157c6:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80157ca:	2a02      	cmp	r2, #2
 80157cc:	b08f      	sub	sp, #60	; 0x3c
 80157ce:	4604      	mov	r4, r0
 80157d0:	4689      	mov	r9, r1
 80157d2:	d106      	bne.n	80157e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80157d4:	4b97      	ldr	r3, [pc, #604]	; (8015a34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80157d6:	4a98      	ldr	r2, [pc, #608]	; (8015a38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80157d8:	f240 21c2 	movw	r1, #706	; 0x2c2
 80157dc:	4897      	ldr	r0, [pc, #604]	; (8015a3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80157de:	f008 fe01 	bl	801e3e4 <__assert_func>
 80157e2:	ae0e      	add	r6, sp, #56	; 0x38
 80157e4:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80157e8:	4630      	mov	r0, r6
 80157ea:	f7fd facf 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80157ee:	6823      	ldr	r3, [r4, #0]
 80157f0:	4607      	mov	r7, r0
 80157f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f4:	4620      	mov	r0, r4
 80157f6:	4798      	blx	r3
 80157f8:	4287      	cmp	r7, r0
 80157fa:	d004      	beq.n	8015806 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80157fc:	4b90      	ldr	r3, [pc, #576]	; (8015a40 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80157fe:	4a8e      	ldr	r2, [pc, #568]	; (8015a38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8015800:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8015804:	e7ea      	b.n	80157dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015806:	4630      	mov	r0, r6
 8015808:	f7fd fa3c 	bl	8012c84 <_ZNK8touchgfx6Bitmap7getDataEv>
 801580c:	4607      	mov	r7, r0
 801580e:	b920      	cbnz	r0, 801581a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8015810:	4b8c      	ldr	r3, [pc, #560]	; (8015a44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8015812:	4a89      	ldr	r2, [pc, #548]	; (8015a38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8015814:	f240 21c6 	movw	r1, #710	; 0x2c6
 8015818:	e7e0      	b.n	80157dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801581a:	f8d8 0000 	ldr.w	r0, [r8]
 801581e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015822:	f9b8 a000 	ldrsh.w	sl, [r8]
 8015826:	ab06      	add	r3, sp, #24
 8015828:	c303      	stmia	r3!, {r0, r1}
 801582a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801582e:	f8d9 0000 	ldr.w	r0, [r9]
 8015832:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8015836:	ab08      	add	r3, sp, #32
 8015838:	c303      	stmia	r3!, {r0, r1}
 801583a:	4630      	mov	r0, r6
 801583c:	f7fd f91a 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015840:	4680      	mov	r8, r0
 8015842:	4630      	mov	r0, r6
 8015844:	f7fd f950 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015848:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801584c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8015850:	f10d 0920 	add.w	r9, sp, #32
 8015854:	a806      	add	r0, sp, #24
 8015856:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801585a:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801585e:	f7fb f9ad 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015862:	4648      	mov	r0, r9
 8015864:	f7fb f9aa 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015868:	a80a      	add	r0, sp, #40	; 0x28
 801586a:	f7fb f9a7 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801586e:	4e76      	ldr	r6, [pc, #472]	; (8015a48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8015870:	4b76      	ldr	r3, [pc, #472]	; (8015a4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8015872:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015876:	f9b3 3000 	ldrsh.w	r3, [r3]
 801587a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801587e:	2100      	movs	r1, #0
 8015880:	910c      	str	r1, [sp, #48]	; 0x30
 8015882:	4648      	mov	r0, r9
 8015884:	a90c      	add	r1, sp, #48	; 0x30
 8015886:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801588a:	f7f9 f84f 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 801588e:	4648      	mov	r0, r9
 8015890:	f7f9 f890 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015894:	2800      	cmp	r0, #0
 8015896:	f040 80bd 	bne.w	8015a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801589a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801589e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80158a2:	4288      	cmp	r0, r1
 80158a4:	db37      	blt.n	8015916 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80158a6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80158aa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	db31      	blt.n	8015916 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80158b2:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 80158b6:	4460      	add	r0, ip
 80158b8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80158bc:	4461      	add	r1, ip
 80158be:	b200      	sxth	r0, r0
 80158c0:	b209      	sxth	r1, r1
 80158c2:	4288      	cmp	r0, r1
 80158c4:	dc27      	bgt.n	8015916 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80158c6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80158ca:	440a      	add	r2, r1
 80158cc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80158d0:	440b      	add	r3, r1
 80158d2:	b212      	sxth	r2, r2
 80158d4:	b21b      	sxth	r3, r3
 80158d6:	429a      	cmp	r2, r3
 80158d8:	dc1d      	bgt.n	8015916 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80158da:	6823      	ldr	r3, [r4, #0]
 80158dc:	4620      	mov	r0, r4
 80158de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158e0:	4798      	blx	r3
 80158e2:	4682      	mov	sl, r0
 80158e4:	6828      	ldr	r0, [r5, #0]
 80158e6:	6803      	ldr	r3, [r0, #0]
 80158e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158ea:	4798      	blx	r3
 80158ec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80158f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80158f4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80158f8:	1a9b      	subs	r3, r3, r2
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	b21c      	sxth	r4, r3
 80158fe:	2c00      	cmp	r4, #0
 8015900:	dc0e      	bgt.n	8015920 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8015902:	bf1f      	itttt	ne
 8015904:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8015908:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801590c:	189b      	addne	r3, r3, r2
 801590e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8015912:	463c      	mov	r4, r7
 8015914:	e00a      	b.n	801592c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 8015916:	4b4e      	ldr	r3, [pc, #312]	; (8015a50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8015918:	4a47      	ldr	r2, [pc, #284]	; (8015a38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801591a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 801591e:	e75d      	b.n	80157dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8015920:	ebab 0303 	sub.w	r3, fp, r3
 8015924:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8015928:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801592c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8015930:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015934:	1a5b      	subs	r3, r3, r1
 8015936:	b29b      	uxth	r3, r3
 8015938:	b21a      	sxth	r2, r3
 801593a:	2a00      	cmp	r2, #0
 801593c:	dd4a      	ble.n	80159d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 801593e:	fb02 f20b 	mul.w	r2, r2, fp
 8015942:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8015946:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801594a:	1ad3      	subs	r3, r2, r3
 801594c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015950:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015954:	2b00      	cmp	r3, #0
 8015956:	dd5d      	ble.n	8015a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8015958:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801595c:	f1bc 0f00 	cmp.w	ip, #0
 8015960:	dd58      	ble.n	8015a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8015962:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8015966:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801596a:	fb0a f801 	mul.w	r8, sl, r1
 801596e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8015972:	4480      	add	r8, r0
 8015974:	8830      	ldrh	r0, [r6, #0]
 8015976:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801597a:	42b3      	cmp	r3, r6
 801597c:	bfa8      	it	ge
 801597e:	4633      	movge	r3, r6
 8015980:	1a82      	subs	r2, r0, r2
 8015982:	4293      	cmp	r3, r2
 8015984:	bfa8      	it	ge
 8015986:	4613      	movge	r3, r2
 8015988:	4a30      	ldr	r2, [pc, #192]	; (8015a4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801598a:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801598e:	8812      	ldrh	r2, [r2, #0]
 8015990:	4566      	cmp	r6, ip
 8015992:	eba2 0101 	sub.w	r1, r2, r1
 8015996:	bfa8      	it	ge
 8015998:	4666      	movge	r6, ip
 801599a:	428e      	cmp	r6, r1
 801599c:	4632      	mov	r2, r6
 801599e:	bfa8      	it	ge
 80159a0:	460a      	movge	r2, r1
 80159a2:	4298      	cmp	r0, r3
 80159a4:	9202      	str	r2, [sp, #8]
 80159a6:	d01e      	beq.n	80159e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	9303      	str	r3, [sp, #12]
 80159ac:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80159b0:	f04f 0900 	mov.w	r9, #0
 80159b4:	9b02      	ldr	r3, [sp, #8]
 80159b6:	454b      	cmp	r3, r9
 80159b8:	dd2c      	ble.n	8015a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 80159ba:	6828      	ldr	r0, [r5, #0]
 80159bc:	6803      	ldr	r3, [r0, #0]
 80159be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159c0:	4642      	mov	r2, r8
 80159c2:	461e      	mov	r6, r3
 80159c4:	4621      	mov	r1, r4
 80159c6:	9b03      	ldr	r3, [sp, #12]
 80159c8:	47b0      	blx	r6
 80159ca:	44d0      	add	r8, sl
 80159cc:	445c      	add	r4, fp
 80159ce:	f109 0901 	add.w	r9, r9, #1
 80159d2:	e7ef      	b.n	80159b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 80159d4:	bf1f      	itttt	ne
 80159d6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80159da:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 80159de:	189b      	addne	r3, r3, r2
 80159e0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80159e4:	e7b4      	b.n	8015950 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 80159e6:	4558      	cmp	r0, fp
 80159e8:	d1de      	bne.n	80159a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 80159ea:	6828      	ldr	r0, [r5, #0]
 80159ec:	6803      	ldr	r3, [r0, #0]
 80159ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159f0:	4798      	blx	r3
 80159f2:	07c3      	lsls	r3, r0, #31
 80159f4:	d512      	bpl.n	8015a1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80159f6:	6828      	ldr	r0, [r5, #0]
 80159f8:	9b02      	ldr	r3, [sp, #8]
 80159fa:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80159fe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015a02:	6803      	ldr	r3, [r0, #0]
 8015a04:	f8cd b000 	str.w	fp, [sp]
 8015a08:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8015a0a:	e899 0006 	ldmia.w	r9, {r1, r2}
 8015a0e:	4623      	mov	r3, r4
 8015a10:	47a8      	blx	r5
 8015a12:	4607      	mov	r7, r0
 8015a14:	4638      	mov	r0, r7
 8015a16:	b00f      	add	sp, #60	; 0x3c
 8015a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a1c:	6828      	ldr	r0, [r5, #0]
 8015a1e:	6803      	ldr	r3, [r0, #0]
 8015a20:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8015a22:	9b02      	ldr	r3, [sp, #8]
 8015a24:	4642      	mov	r2, r8
 8015a26:	fb03 f30a 	mul.w	r3, r3, sl
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	47a8      	blx	r5
 8015a2e:	e7f1      	b.n	8015a14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8015a30:	2002ee78 	.word	0x2002ee78
 8015a34:	0802204f 	.word	0x0802204f
 8015a38:	08022893 	.word	0x08022893
 8015a3c:	08022103 	.word	0x08022103
 8015a40:	08022135 	.word	0x08022135
 8015a44:	0802218a 	.word	0x0802218a
 8015a48:	2002ee72 	.word	0x2002ee72
 8015a4c:	2002ee74 	.word	0x2002ee74
 8015a50:	080221c8 	.word	0x080221c8

08015a54 <_ZN8touchgfx8LCD16bppC1Ev>:
 8015a54:	2200      	movs	r2, #0
 8015a56:	4910      	ldr	r1, [pc, #64]	; (8015a98 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8015a58:	6042      	str	r2, [r0, #4]
 8015a5a:	6001      	str	r1, [r0, #0]
 8015a5c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8015a60:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8015a64:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015a68:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015a6c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8015a70:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8015a74:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8015a78:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8015a7c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8015a80:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8015a84:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8015a88:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8015a8c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8015a90:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8015a94:	4770      	bx	lr
 8015a96:	bf00      	nop
 8015a98:	0802250c 	.word	0x0802250c

08015a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8015a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa0:	460c      	mov	r4, r1
 8015aa2:	b08d      	sub	sp, #52	; 0x34
 8015aa4:	4682      	mov	sl, r0
 8015aa6:	6808      	ldr	r0, [r1, #0]
 8015aa8:	6849      	ldr	r1, [r1, #4]
 8015aaa:	469b      	mov	fp, r3
 8015aac:	ab08      	add	r3, sp, #32
 8015aae:	c303      	stmia	r3!, {r0, r1}
 8015ab0:	6810      	ldr	r0, [r2, #0]
 8015ab2:	6851      	ldr	r1, [r2, #4]
 8015ab4:	ab0a      	add	r3, sp, #40	; 0x28
 8015ab6:	c303      	stmia	r3!, {r0, r1}
 8015ab8:	a808      	add	r0, sp, #32
 8015aba:	f7fb f87f 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015abe:	4621      	mov	r1, r4
 8015ac0:	a80a      	add	r0, sp, #40	; 0x28
 8015ac2:	f7fb f863 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015ac6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8015aca:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015ace:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8015ad2:	4c60      	ldr	r4, [pc, #384]	; (8015c54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8015ad4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8015ad8:	6820      	ldr	r0, [r4, #0]
 8015ada:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 8015ade:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015ae2:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8015ae6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8015aea:	440a      	add	r2, r1
 8015aec:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015af0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8015af4:	4413      	add	r3, r2
 8015af6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015afa:	6803      	ldr	r3, [r0, #0]
 8015afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015afe:	4798      	blx	r3
 8015b00:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8015b04:	d119      	bne.n	8015b3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8015b06:	f010 0f20 	tst.w	r0, #32
 8015b0a:	6820      	ldr	r0, [r4, #0]
 8015b0c:	d018      	beq.n	8015b40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8015b0e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8015b12:	6801      	ldr	r1, [r0, #0]
 8015b14:	9402      	str	r4, [sp, #8]
 8015b16:	fa1f f489 	uxth.w	r4, r9
 8015b1a:	9401      	str	r4, [sp, #4]
 8015b1c:	fa1f f488 	uxth.w	r4, r8
 8015b20:	f8cd b00c 	str.w	fp, [sp, #12]
 8015b24:	9400      	str	r4, [sp, #0]
 8015b26:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8015b28:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8015b2c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8015b30:	4651      	mov	r1, sl
 8015b32:	47a0      	blx	r4
 8015b34:	b00d      	add	sp, #52	; 0x34
 8015b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015b3e:	e7e4      	b.n	8015b0a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8015b40:	6803      	ldr	r3, [r0, #0]
 8015b42:	6a1b      	ldr	r3, [r3, #32]
 8015b44:	4798      	blx	r3
 8015b46:	4a44      	ldr	r2, [pc, #272]	; (8015c58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 8015b48:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8015b4c:	8813      	ldrh	r3, [r2, #0]
 8015b4e:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8015b52:	9207      	str	r2, [sp, #28]
 8015b54:	fb04 1303 	mla	r3, r4, r3, r1
 8015b58:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015b5c:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8015b60:	0099      	lsls	r1, r3, #2
 8015b62:	005b      	lsls	r3, r3, #1
 8015b64:	9106      	str	r1, [sp, #24]
 8015b66:	9305      	str	r3, [sp, #20]
 8015b68:	f04f 0c00 	mov.w	ip, #0
 8015b6c:	45cc      	cmp	ip, r9
 8015b6e:	da6b      	bge.n	8015c48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 8015b70:	2300      	movs	r3, #0
 8015b72:	4543      	cmp	r3, r8
 8015b74:	da55      	bge.n	8015c22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 8015b76:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 8015b7a:	0e25      	lsrs	r5, r4, #24
 8015b7c:	d013      	beq.n	8015ba6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8015b7e:	2dff      	cmp	r5, #255	; 0xff
 8015b80:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8015b84:	d111      	bne.n	8015baa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8015b86:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8015b8a:	d10e      	bne.n	8015baa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8015b8c:	0962      	lsrs	r2, r4, #5
 8015b8e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8015b92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8015b96:	f027 0707 	bic.w	r7, r7, #7
 8015b9a:	4317      	orrs	r7, r2
 8015b9c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8015ba0:	433c      	orrs	r4, r7
 8015ba2:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	e7e3      	b.n	8015b72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 8015baa:	fb0b f505 	mul.w	r5, fp, r5
 8015bae:	1c6a      	adds	r2, r5, #1
 8015bb0:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8015bb4:	eb02 2225 	add.w	r2, r2, r5, asr #8
 8015bb8:	1212      	asrs	r2, r2, #8
 8015bba:	fa1f fe82 	uxth.w	lr, r2
 8015bbe:	120e      	asrs	r6, r1, #8
 8015bc0:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8015bc4:	43d2      	mvns	r2, r2
 8015bc6:	b2d2      	uxtb	r2, r2
 8015bc8:	fb15 f50e 	smulbb	r5, r5, lr
 8015bcc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015bd0:	fb06 5602 	mla	r6, r6, r2, r5
 8015bd4:	b2e4      	uxtb	r4, r4
 8015bd6:	10cd      	asrs	r5, r1, #3
 8015bd8:	00c9      	lsls	r1, r1, #3
 8015bda:	b2c9      	uxtb	r1, r1
 8015bdc:	fb14 f40e 	smulbb	r4, r4, lr
 8015be0:	fb01 4402 	mla	r4, r1, r2, r4
 8015be4:	b2ff      	uxtb	r7, r7
 8015be6:	b2b6      	uxth	r6, r6
 8015be8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8015bec:	b2a4      	uxth	r4, r4
 8015bee:	fb17 f70e 	smulbb	r7, r7, lr
 8015bf2:	fb05 7702 	mla	r7, r5, r2, r7
 8015bf6:	1c72      	adds	r2, r6, #1
 8015bf8:	1c65      	adds	r5, r4, #1
 8015bfa:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8015bfe:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 8015c02:	b2bf      	uxth	r7, r7
 8015c04:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015c08:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8015c0c:	432e      	orrs	r6, r5
 8015c0e:	1c7d      	adds	r5, r7, #1
 8015c10:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8015c14:	097f      	lsrs	r7, r7, #5
 8015c16:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8015c1a:	433e      	orrs	r6, r7
 8015c1c:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8015c20:	e7c1      	b.n	8015ba6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8015c22:	9b07      	ldr	r3, [sp, #28]
 8015c24:	9a05      	ldr	r2, [sp, #20]
 8015c26:	881b      	ldrh	r3, [r3, #0]
 8015c28:	eba3 0308 	sub.w	r3, r3, r8
 8015c2c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015c30:	4418      	add	r0, r3
 8015c32:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8015c36:	9a06      	ldr	r2, [sp, #24]
 8015c38:	eba3 0308 	sub.w	r3, r3, r8
 8015c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c40:	449a      	add	sl, r3
 8015c42:	f10c 0c01 	add.w	ip, ip, #1
 8015c46:	e791      	b.n	8015b6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8015c48:	4b02      	ldr	r3, [pc, #8]	; (8015c54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8015c4a:	6818      	ldr	r0, [r3, #0]
 8015c4c:	6803      	ldr	r3, [r0, #0]
 8015c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c50:	4798      	blx	r3
 8015c52:	e76f      	b.n	8015b34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8015c54:	2002ee78 	.word	0x2002ee78
 8015c58:	2002ee72 	.word	0x2002ee72

08015c5c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8015c5c:	b570      	push	{r4, r5, r6, lr}
 8015c5e:	9d04      	ldr	r5, [sp, #16]
 8015c60:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8015c64:	460c      	mov	r4, r1
 8015c66:	4619      	mov	r1, r3
 8015c68:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015c6c:	2a0c      	cmp	r2, #12
 8015c6e:	d820      	bhi.n	8015cb2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8015c70:	e8df f002 	tbb	[pc, r2]
 8015c74:	18121807 	.word	0x18121807
 8015c78:	18181818 	.word	0x18181818
 8015c7c:	18181818 	.word	0x18181818
 8015c80:	18          	.byte	0x18
 8015c81:	00          	.byte	0x00
 8015c82:	6802      	ldr	r2, [r0, #0]
 8015c84:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8015c88:	6916      	ldr	r6, [r2, #16]
 8015c8a:	462b      	mov	r3, r5
 8015c8c:	460a      	mov	r2, r1
 8015c8e:	46b4      	mov	ip, r6
 8015c90:	4621      	mov	r1, r4
 8015c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c96:	4760      	bx	ip
 8015c98:	462a      	mov	r2, r5
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ca0:	f7ff befc 	b.w	8015a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015ca4:	4b03      	ldr	r3, [pc, #12]	; (8015cb4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8015ca6:	4a04      	ldr	r2, [pc, #16]	; (8015cb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8015ca8:	4804      	ldr	r0, [pc, #16]	; (8015cbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8015caa:	f240 21bb 	movw	r1, #699	; 0x2bb
 8015cae:	f008 fb99 	bl	801e3e4 <__assert_func>
 8015cb2:	bd70      	pop	{r4, r5, r6, pc}
 8015cb4:	08022228 	.word	0x08022228
 8015cb8:	08022919 	.word	0x08022919
 8015cbc:	08022103 	.word	0x08022103

08015cc0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc4:	b093      	sub	sp, #76	; 0x4c
 8015cc6:	880f      	ldrh	r7, [r1, #0]
 8015cc8:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8015ccc:	4681      	mov	r9, r0
 8015cce:	4688      	mov	r8, r1
 8015cd0:	4615      	mov	r5, r2
 8015cd2:	b12f      	cbz	r7, 8015ce0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8015cd4:	4b71      	ldr	r3, [pc, #452]	; (8015e9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8015cd6:	4a72      	ldr	r2, [pc, #456]	; (8015ea0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8015cd8:	4872      	ldr	r0, [pc, #456]	; (8015ea4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8015cda:	21ec      	movs	r1, #236	; 0xec
 8015cdc:	f008 fb82 	bl	801e3e4 <__assert_func>
 8015ce0:	6810      	ldr	r0, [r2, #0]
 8015ce2:	6851      	ldr	r1, [r2, #4]
 8015ce4:	ac0e      	add	r4, sp, #56	; 0x38
 8015ce6:	c403      	stmia	r4!, {r0, r1}
 8015ce8:	6818      	ldr	r0, [r3, #0]
 8015cea:	6859      	ldr	r1, [r3, #4]
 8015cec:	ac10      	add	r4, sp, #64	; 0x40
 8015cee:	c403      	stmia	r4!, {r0, r1}
 8015cf0:	a80e      	add	r0, sp, #56	; 0x38
 8015cf2:	f7fa ff63 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015cf6:	4629      	mov	r1, r5
 8015cf8:	a810      	add	r0, sp, #64	; 0x40
 8015cfa:	f7fa ff47 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015cfe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015d02:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8015d06:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8015d0a:	4d67      	ldr	r5, [pc, #412]	; (8015ea8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8015d0c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8015d10:	6828      	ldr	r0, [r5, #0]
 8015d12:	4c66      	ldr	r4, [pc, #408]	; (8015eac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 8015d14:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015d18:	4489      	add	r9, r1
 8015d1a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8015d1e:	440a      	add	r2, r1
 8015d20:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8015d24:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015d28:	4413      	add	r3, r2
 8015d2a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015d2e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8015d32:	930a      	str	r3, [sp, #40]	; 0x28
 8015d34:	6803      	ldr	r3, [r0, #0]
 8015d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d3a:	4798      	blx	r3
 8015d3c:	2801      	cmp	r0, #1
 8015d3e:	d11d      	bne.n	8015d7c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 8015d40:	220b      	movs	r2, #11
 8015d42:	9708      	str	r7, [sp, #32]
 8015d44:	9207      	str	r2, [sp, #28]
 8015d46:	8822      	ldrh	r2, [r4, #0]
 8015d48:	f8cd a010 	str.w	sl, [sp, #16]
 8015d4c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8015d50:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8015d54:	9203      	str	r2, [sp, #12]
 8015d56:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8015d5a:	9202      	str	r2, [sp, #8]
 8015d5c:	fa1f f28b 	uxth.w	r2, fp
 8015d60:	9201      	str	r2, [sp, #4]
 8015d62:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8015d66:	9200      	str	r2, [sp, #0]
 8015d68:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015d6c:	6828      	ldr	r0, [r5, #0]
 8015d6e:	4642      	mov	r2, r8
 8015d70:	4649      	mov	r1, r9
 8015d72:	f7f9 fa29 	bl	800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015d76:	b013      	add	sp, #76	; 0x4c
 8015d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7c:	6828      	ldr	r0, [r5, #0]
 8015d7e:	6803      	ldr	r3, [r0, #0]
 8015d80:	6a1b      	ldr	r3, [r3, #32]
 8015d82:	4798      	blx	r3
 8015d84:	8823      	ldrh	r3, [r4, #0]
 8015d86:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015d8a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015d8e:	fb01 2303 	mla	r3, r1, r3, r2
 8015d92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015d96:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8015d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d9c:	005b      	lsls	r3, r3, #1
 8015d9e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8015da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015da4:	429f      	cmp	r7, r3
 8015da6:	da72      	bge.n	8015e8e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 8015da8:	2100      	movs	r1, #0
 8015daa:	4559      	cmp	r1, fp
 8015dac:	da5e      	bge.n	8015e6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8015dae:	f819 3001 	ldrb.w	r3, [r9, r1]
 8015db2:	2204      	movs	r2, #4
 8015db4:	fb12 2303 	smlabb	r3, r2, r3, r2
 8015db8:	f858 2003 	ldr.w	r2, [r8, r3]
 8015dbc:	0e15      	lsrs	r5, r2, #24
 8015dbe:	d013      	beq.n	8015de8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015dc0:	2dff      	cmp	r5, #255	; 0xff
 8015dc2:	ea4f 2412 	mov.w	r4, r2, lsr #8
 8015dc6:	d111      	bne.n	8015dec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015dc8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015dcc:	d10e      	bne.n	8015dec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015dce:	0953      	lsrs	r3, r2, #5
 8015dd0:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8015dd4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015dd8:	f024 0407 	bic.w	r4, r4, #7
 8015ddc:	431c      	orrs	r4, r3
 8015dde:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015de2:	4314      	orrs	r4, r2
 8015de4:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 8015de8:	3101      	adds	r1, #1
 8015dea:	e7de      	b.n	8015daa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8015dec:	fb0a f505 	mul.w	r5, sl, r5
 8015df0:	1c6b      	adds	r3, r5, #1
 8015df2:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8015df6:	eb03 2325 	add.w	r3, r3, r5, asr #8
 8015dfa:	121b      	asrs	r3, r3, #8
 8015dfc:	fa1f fe83 	uxth.w	lr, r3
 8015e00:	ea4f 262c 	mov.w	r6, ip, asr #8
 8015e04:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8015e08:	43db      	mvns	r3, r3
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	fb15 f50e 	smulbb	r5, r5, lr
 8015e10:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015e14:	fb06 5603 	mla	r6, r6, r3, r5
 8015e18:	b2d2      	uxtb	r2, r2
 8015e1a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8015e1e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015e22:	fa5f fc8c 	uxtb.w	ip, ip
 8015e26:	fb12 f20e 	smulbb	r2, r2, lr
 8015e2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8015e2e:	b2e4      	uxtb	r4, r4
 8015e30:	b2b6      	uxth	r6, r6
 8015e32:	fb14 f40e 	smulbb	r4, r4, lr
 8015e36:	b292      	uxth	r2, r2
 8015e38:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8015e3c:	fb05 4503 	mla	r5, r5, r3, r4
 8015e40:	1c73      	adds	r3, r6, #1
 8015e42:	1c54      	adds	r4, r2, #1
 8015e44:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8015e48:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8015e4c:	b2ad      	uxth	r5, r5
 8015e4e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8015e52:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8015e56:	4326      	orrs	r6, r4
 8015e58:	1c6c      	adds	r4, r5, #1
 8015e5a:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 8015e5e:	0964      	lsrs	r4, r4, #5
 8015e60:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8015e64:	4326      	orrs	r6, r4
 8015e66:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 8015e6a:	e7bd      	b.n	8015de8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e70:	881b      	ldrh	r3, [r3, #0]
 8015e72:	eba3 030b 	sub.w	r3, r3, fp
 8015e76:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8015e7a:	4418      	add	r0, r3
 8015e7c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8015e80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e82:	eba3 030b 	sub.w	r3, r3, fp
 8015e86:	4413      	add	r3, r2
 8015e88:	4499      	add	r9, r3
 8015e8a:	3701      	adds	r7, #1
 8015e8c:	e789      	b.n	8015da2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8015e8e:	4b06      	ldr	r3, [pc, #24]	; (8015ea8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8015e90:	6818      	ldr	r0, [r3, #0]
 8015e92:	6803      	ldr	r3, [r0, #0]
 8015e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e96:	4798      	blx	r3
 8015e98:	e76d      	b.n	8015d76 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 8015e9a:	bf00      	nop
 8015e9c:	08021fff 	.word	0x08021fff
 8015ea0:	080226ea 	.word	0x080226ea
 8015ea4:	08022103 	.word	0x08022103
 8015ea8:	2002ee78 	.word	0x2002ee78
 8015eac:	2002ee72 	.word	0x2002ee72

08015eb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8015eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb4:	4614      	mov	r4, r2
 8015eb6:	880a      	ldrh	r2, [r1, #0]
 8015eb8:	b093      	sub	sp, #76	; 0x4c
 8015eba:	2a02      	cmp	r2, #2
 8015ebc:	4606      	mov	r6, r0
 8015ebe:	4689      	mov	r9, r1
 8015ec0:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8015ec4:	d006      	beq.n	8015ed4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8015ec6:	4b7a      	ldr	r3, [pc, #488]	; (80160b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8015ec8:	4a7a      	ldr	r2, [pc, #488]	; (80160b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8015eca:	487b      	ldr	r0, [pc, #492]	; (80160b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 8015ecc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8015ed0:	f008 fa88 	bl	801e3e4 <__assert_func>
 8015ed4:	2f00      	cmp	r7, #0
 8015ed6:	d04b      	beq.n	8015f70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8015ed8:	6820      	ldr	r0, [r4, #0]
 8015eda:	6861      	ldr	r1, [r4, #4]
 8015edc:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 80160c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 8015ee0:	ad0e      	add	r5, sp, #56	; 0x38
 8015ee2:	c503      	stmia	r5!, {r0, r1}
 8015ee4:	6818      	ldr	r0, [r3, #0]
 8015ee6:	6859      	ldr	r1, [r3, #4]
 8015ee8:	ad10      	add	r5, sp, #64	; 0x40
 8015eea:	c503      	stmia	r5!, {r0, r1}
 8015eec:	a80e      	add	r0, sp, #56	; 0x38
 8015eee:	f7fa fe65 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015ef2:	4621      	mov	r1, r4
 8015ef4:	a810      	add	r0, sp, #64	; 0x40
 8015ef6:	f7fa fe49 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015efa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015efe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8015f02:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8015f06:	f8da 0000 	ldr.w	r0, [sl]
 8015f0a:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8015f0e:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 8015f12:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015f16:	1874      	adds	r4, r6, r1
 8015f18:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8015f1c:	4e67      	ldr	r6, [pc, #412]	; (80160bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 8015f1e:	440a      	add	r2, r1
 8015f20:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8015f24:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015f28:	4413      	add	r3, r2
 8015f2a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8015f2e:	6803      	ldr	r3, [r0, #0]
 8015f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015f34:	4798      	blx	r3
 8015f36:	2801      	cmp	r0, #1
 8015f38:	d11d      	bne.n	8015f76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	210b      	movs	r1, #11
 8015f3e:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8015f42:	8831      	ldrh	r1, [r6, #0]
 8015f44:	9704      	str	r7, [sp, #16]
 8015f46:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015f4a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8015f4e:	9203      	str	r2, [sp, #12]
 8015f50:	fa1f f288 	uxth.w	r2, r8
 8015f54:	9202      	str	r2, [sp, #8]
 8015f56:	b2ad      	uxth	r5, r5
 8015f58:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8015f5c:	9200      	str	r2, [sp, #0]
 8015f5e:	9501      	str	r5, [sp, #4]
 8015f60:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015f64:	f8da 0000 	ldr.w	r0, [sl]
 8015f68:	464a      	mov	r2, r9
 8015f6a:	4621      	mov	r1, r4
 8015f6c:	f7f9 f92c 	bl	800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015f70:	b013      	add	sp, #76	; 0x4c
 8015f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f76:	f8da 0000 	ldr.w	r0, [sl]
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	6a1b      	ldr	r3, [r3, #32]
 8015f7e:	4798      	blx	r3
 8015f80:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015f84:	8833      	ldrh	r3, [r6, #0]
 8015f86:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015f8a:	fb01 2303 	mla	r3, r1, r3, r2
 8015f8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015f92:	2fff      	cmp	r7, #255	; 0xff
 8015f94:	f109 0304 	add.w	r3, r9, #4
 8015f98:	930a      	str	r3, [sp, #40]	; 0x28
 8015f9a:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8015f9e:	d111      	bne.n	8015fc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 8015fa0:	b212      	sxth	r2, r2
 8015fa2:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8015fa6:	2100      	movs	r1, #0
 8015fa8:	4541      	cmp	r1, r8
 8015faa:	da7a      	bge.n	80160a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8015fac:	2300      	movs	r3, #0
 8015fae:	42ab      	cmp	r3, r5
 8015fb0:	da6b      	bge.n	801608a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8015fb2:	f814 c003 	ldrb.w	ip, [r4, r3]
 8015fb6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015fb8:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 8015fbc:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 8015fc0:	3301      	adds	r3, #1
 8015fc2:	e7f4      	b.n	8015fae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 8015fc4:	b213      	sxth	r3, r2
 8015fc6:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8015fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fcc:	005b      	lsls	r3, r3, #1
 8015fce:	930c      	str	r3, [sp, #48]	; 0x30
 8015fd0:	f04f 0900 	mov.w	r9, #0
 8015fd4:	b2ba      	uxth	r2, r7
 8015fd6:	fa1f fc8c 	uxth.w	ip, ip
 8015fda:	960d      	str	r6, [sp, #52]	; 0x34
 8015fdc:	45c1      	cmp	r9, r8
 8015fde:	da60      	bge.n	80160a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8015fe0:	46a3      	mov	fp, r4
 8015fe2:	4682      	mov	sl, r0
 8015fe4:	ebab 0304 	sub.w	r3, fp, r4
 8015fe8:	429d      	cmp	r5, r3
 8015fea:	dd3e      	ble.n	801606a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 8015fec:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8015ff0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015ff2:	f8ba 1000 	ldrh.w	r1, [sl]
 8015ff6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8015ffa:	120e      	asrs	r6, r1, #8
 8015ffc:	121f      	asrs	r7, r3, #8
 8015ffe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8016002:	fb16 f60c 	smulbb	r6, r6, ip
 8016006:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 801600a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801600e:	00c9      	lsls	r1, r1, #3
 8016010:	fb07 6702 	mla	r7, r7, r2, r6
 8016014:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8016018:	10de      	asrs	r6, r3, #3
 801601a:	b2c9      	uxtb	r1, r1
 801601c:	00db      	lsls	r3, r3, #3
 801601e:	fb1e fe0c 	smulbb	lr, lr, ip
 8016022:	fb11 f10c 	smulbb	r1, r1, ip
 8016026:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801602a:	b2db      	uxtb	r3, r3
 801602c:	b2bf      	uxth	r7, r7
 801602e:	fb06 e602 	mla	r6, r6, r2, lr
 8016032:	fb03 1302 	mla	r3, r3, r2, r1
 8016036:	b2b6      	uxth	r6, r6
 8016038:	b29b      	uxth	r3, r3
 801603a:	1c79      	adds	r1, r7, #1
 801603c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8016040:	f106 0e01 	add.w	lr, r6, #1
 8016044:	1c59      	adds	r1, r3, #1
 8016046:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801604a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801604e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016052:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8016056:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801605a:	430f      	orrs	r7, r1
 801605c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8016060:	ea47 070e 	orr.w	r7, r7, lr
 8016064:	f82a 7b02 	strh.w	r7, [sl], #2
 8016068:	e7bc      	b.n	8015fe4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 801606a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801606c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801606e:	881b      	ldrh	r3, [r3, #0]
 8016070:	1b5b      	subs	r3, r3, r5
 8016072:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016076:	4418      	add	r0, r3
 8016078:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801607c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801607e:	1b5b      	subs	r3, r3, r5
 8016080:	440b      	add	r3, r1
 8016082:	441c      	add	r4, r3
 8016084:	f109 0901 	add.w	r9, r9, #1
 8016088:	e7a8      	b.n	8015fdc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 801608a:	8833      	ldrh	r3, [r6, #0]
 801608c:	1b5b      	subs	r3, r3, r5
 801608e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016092:	4418      	add	r0, r3
 8016094:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8016098:	1b5b      	subs	r3, r3, r5
 801609a:	4413      	add	r3, r2
 801609c:	441c      	add	r4, r3
 801609e:	3101      	adds	r1, #1
 80160a0:	e782      	b.n	8015fa8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 80160a2:	4b07      	ldr	r3, [pc, #28]	; (80160c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 80160a4:	6818      	ldr	r0, [r3, #0]
 80160a6:	6803      	ldr	r3, [r0, #0]
 80160a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160aa:	4798      	blx	r3
 80160ac:	e760      	b.n	8015f70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80160ae:	bf00      	nop
 80160b0:	08021ebd 	.word	0x08021ebd
 80160b4:	08022554 	.word	0x08022554
 80160b8:	08022103 	.word	0x08022103
 80160bc:	2002ee72 	.word	0x2002ee72
 80160c0:	2002ee78 	.word	0x2002ee78

080160c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80160c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c8:	4616      	mov	r6, r2
 80160ca:	880a      	ldrh	r2, [r1, #0]
 80160cc:	b093      	sub	sp, #76	; 0x4c
 80160ce:	2a01      	cmp	r2, #1
 80160d0:	4681      	mov	r9, r0
 80160d2:	4688      	mov	r8, r1
 80160d4:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80160d8:	d006      	beq.n	80160e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 80160da:	4b6c      	ldr	r3, [pc, #432]	; (801628c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80160dc:	4a6c      	ldr	r2, [pc, #432]	; (8016290 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 80160de:	486d      	ldr	r0, [pc, #436]	; (8016294 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 80160e0:	f240 11a1 	movw	r1, #417	; 0x1a1
 80160e4:	f008 f97e 	bl	801e3e4 <__assert_func>
 80160e8:	f1ba 0f00 	cmp.w	sl, #0
 80160ec:	d04a      	beq.n	8016184 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80160ee:	6830      	ldr	r0, [r6, #0]
 80160f0:	6871      	ldr	r1, [r6, #4]
 80160f2:	4d69      	ldr	r5, [pc, #420]	; (8016298 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 80160f4:	ac0e      	add	r4, sp, #56	; 0x38
 80160f6:	c403      	stmia	r4!, {r0, r1}
 80160f8:	6818      	ldr	r0, [r3, #0]
 80160fa:	6859      	ldr	r1, [r3, #4]
 80160fc:	ac10      	add	r4, sp, #64	; 0x40
 80160fe:	c403      	stmia	r4!, {r0, r1}
 8016100:	a80e      	add	r0, sp, #56	; 0x38
 8016102:	f7fa fd5b 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016106:	4631      	mov	r1, r6
 8016108:	a810      	add	r0, sp, #64	; 0x40
 801610a:	f7fa fd3f 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801610e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8016112:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8016116:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801611a:	6828      	ldr	r0, [r5, #0]
 801611c:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8016120:	4c5e      	ldr	r4, [pc, #376]	; (801629c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8016122:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016126:	4489      	add	r9, r1
 8016128:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801612c:	440a      	add	r2, r1
 801612e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8016132:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016136:	4413      	add	r3, r2
 8016138:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801613c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8016140:	930a      	str	r3, [sp, #40]	; 0x28
 8016142:	6803      	ldr	r3, [r0, #0]
 8016144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016148:	4798      	blx	r3
 801614a:	2801      	cmp	r0, #1
 801614c:	d11d      	bne.n	801618a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801614e:	220b      	movs	r2, #11
 8016150:	2100      	movs	r1, #0
 8016152:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8016156:	8822      	ldrh	r2, [r4, #0]
 8016158:	f8cd a010 	str.w	sl, [sp, #16]
 801615c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8016160:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8016164:	9203      	str	r2, [sp, #12]
 8016166:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801616a:	9202      	str	r2, [sp, #8]
 801616c:	b2b6      	uxth	r6, r6
 801616e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016172:	9200      	str	r2, [sp, #0]
 8016174:	9601      	str	r6, [sp, #4]
 8016176:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801617a:	6828      	ldr	r0, [r5, #0]
 801617c:	4642      	mov	r2, r8
 801617e:	4649      	mov	r1, r9
 8016180:	f7f9 f822 	bl	800f1c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8016184:	b013      	add	sp, #76	; 0x4c
 8016186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801618a:	6828      	ldr	r0, [r5, #0]
 801618c:	6803      	ldr	r3, [r0, #0]
 801618e:	6a1b      	ldr	r3, [r3, #32]
 8016190:	4798      	blx	r3
 8016192:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016196:	8823      	ldrh	r3, [r4, #0]
 8016198:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801619c:	940d      	str	r4, [sp, #52]	; 0x34
 801619e:	fb01 2303 	mla	r3, r1, r3, r2
 80161a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80161a6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80161aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80161ac:	ea6f 010a 	mvn.w	r1, sl
 80161b0:	005b      	lsls	r3, r3, #1
 80161b2:	930c      	str	r3, [sp, #48]	; 0x30
 80161b4:	f04f 0e00 	mov.w	lr, #0
 80161b8:	b2c9      	uxtb	r1, r1
 80161ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161bc:	459e      	cmp	lr, r3
 80161be:	da5f      	bge.n	8016280 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80161c0:	2700      	movs	r7, #0
 80161c2:	fa1f fb8a 	uxth.w	fp, sl
 80161c6:	42b7      	cmp	r7, r6
 80161c8:	da4a      	bge.n	8016260 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 80161ca:	f819 3007 	ldrb.w	r3, [r9, r7]
 80161ce:	2203      	movs	r2, #3
 80161d0:	2404      	movs	r4, #4
 80161d2:	fb12 4303 	smlabb	r3, r2, r3, r4
 80161d6:	eb08 0403 	add.w	r4, r8, r3
 80161da:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80161de:	78a2      	ldrb	r2, [r4, #2]
 80161e0:	7865      	ldrb	r5, [r4, #1]
 80161e2:	f818 c003 	ldrb.w	ip, [r8, r3]
 80161e6:	d10c      	bne.n	8016202 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 80161e8:	4b2d      	ldr	r3, [pc, #180]	; (80162a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80161ea:	00ed      	lsls	r5, r5, #3
 80161ec:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 80161f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80161f4:	432a      	orrs	r2, r5
 80161f6:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 80161fa:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 80161fe:	3701      	adds	r7, #1
 8016200:	e7e1      	b.n	80161c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 8016202:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 8016206:	121c      	asrs	r4, r3, #8
 8016208:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801620c:	fb12 f20b 	smulbb	r2, r2, fp
 8016210:	fb04 2201 	mla	r2, r4, r1, r2
 8016214:	10dc      	asrs	r4, r3, #3
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801621c:	b2db      	uxtb	r3, r3
 801621e:	fb15 f50b 	smulbb	r5, r5, fp
 8016222:	fb1c fc0b 	smulbb	ip, ip, fp
 8016226:	b292      	uxth	r2, r2
 8016228:	fb04 5501 	mla	r5, r4, r1, r5
 801622c:	fb03 cc01 	mla	ip, r3, r1, ip
 8016230:	b2ad      	uxth	r5, r5
 8016232:	fa1f fc8c 	uxth.w	ip, ip
 8016236:	1c53      	adds	r3, r2, #1
 8016238:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801623c:	1c6c      	adds	r4, r5, #1
 801623e:	f10c 0301 	add.w	r3, ip, #1
 8016242:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8016246:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 801624a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801624e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8016252:	096d      	lsrs	r5, r5, #5
 8016254:	ea42 020c 	orr.w	r2, r2, ip
 8016258:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801625c:	432a      	orrs	r2, r5
 801625e:	e7cc      	b.n	80161fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 8016260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016264:	881b      	ldrh	r3, [r3, #0]
 8016266:	1b9b      	subs	r3, r3, r6
 8016268:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801626c:	4418      	add	r0, r3
 801626e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8016272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016274:	1b9b      	subs	r3, r3, r6
 8016276:	4413      	add	r3, r2
 8016278:	4499      	add	r9, r3
 801627a:	f10e 0e01 	add.w	lr, lr, #1
 801627e:	e79c      	b.n	80161ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 8016280:	4b05      	ldr	r3, [pc, #20]	; (8016298 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8016282:	6818      	ldr	r0, [r3, #0]
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016288:	4798      	blx	r3
 801628a:	e77b      	b.n	8016184 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801628c:	08021f0b 	.word	0x08021f0b
 8016290:	080225dd 	.word	0x080225dd
 8016294:	08022103 	.word	0x08022103
 8016298:	2002ee78 	.word	0x2002ee78
 801629c:	2002ee72 	.word	0x2002ee72
 80162a0:	fffff800 	.word	0xfffff800

080162a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80162a4:	b430      	push	{r4, r5}
 80162a6:	780d      	ldrb	r5, [r1, #0]
 80162a8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80162ac:	2d01      	cmp	r5, #1
 80162ae:	d00a      	beq.n	80162c6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80162b0:	d305      	bcc.n	80162be <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80162b2:	2d02      	cmp	r5, #2
 80162b4:	d10b      	bne.n	80162ce <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80162b6:	9402      	str	r4, [sp, #8]
 80162b8:	bc30      	pop	{r4, r5}
 80162ba:	f7ff bdf9 	b.w	8015eb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80162be:	9402      	str	r4, [sp, #8]
 80162c0:	bc30      	pop	{r4, r5}
 80162c2:	f7ff bcfd 	b.w	8015cc0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80162c6:	9402      	str	r4, [sp, #8]
 80162c8:	bc30      	pop	{r4, r5}
 80162ca:	f7ff befb 	b.w	80160c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80162ce:	bc30      	pop	{r4, r5}
 80162d0:	4770      	bx	lr
	...

080162d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80162d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d8:	4605      	mov	r5, r0
 80162da:	b089      	sub	sp, #36	; 0x24
 80162dc:	6810      	ldr	r0, [r2, #0]
 80162de:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 80162e2:	460c      	mov	r4, r1
 80162e4:	6851      	ldr	r1, [r2, #4]
 80162e6:	ae04      	add	r6, sp, #16
 80162e8:	c603      	stmia	r6!, {r0, r1}
 80162ea:	6818      	ldr	r0, [r3, #0]
 80162ec:	6859      	ldr	r1, [r3, #4]
 80162ee:	ae06      	add	r6, sp, #24
 80162f0:	4617      	mov	r7, r2
 80162f2:	c603      	stmia	r6!, {r0, r1}
 80162f4:	a804      	add	r0, sp, #16
 80162f6:	f7fa fc61 	bl	8010bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80162fa:	4639      	mov	r1, r7
 80162fc:	a806      	add	r0, sp, #24
 80162fe:	f7fa fc45 	bl	8010b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016302:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8016306:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801630a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801630e:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8016312:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016316:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801631a:	440c      	add	r4, r1
 801631c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016320:	440a      	add	r2, r1
 8016322:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016326:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801632a:	4413      	add	r3, r2
 801632c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016330:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016334:	9300      	str	r3, [sp, #0]
 8016336:	4b80      	ldr	r3, [pc, #512]	; (8016538 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 8016338:	6818      	ldr	r0, [r3, #0]
 801633a:	6803      	ldr	r3, [r0, #0]
 801633c:	6a1b      	ldr	r3, [r3, #32]
 801633e:	4798      	blx	r3
 8016340:	4b7e      	ldr	r3, [pc, #504]	; (801653c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 8016342:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8016346:	881a      	ldrh	r2, [r3, #0]
 8016348:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801634c:	fb06 1202 	mla	r2, r6, r2, r1
 8016350:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8016354:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016358:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 801635c:	b212      	sxth	r2, r2
 801635e:	d117      	bne.n	8016390 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 8016360:	9201      	str	r2, [sp, #4]
 8016362:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8016366:	f04f 0a00 	mov.w	sl, #0
 801636a:	9302      	str	r3, [sp, #8]
 801636c:	9b00      	ldr	r3, [sp, #0]
 801636e:	459a      	cmp	sl, r3
 8016370:	f280 80d9 	bge.w	8016526 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8016374:	2100      	movs	r1, #0
 8016376:	4541      	cmp	r1, r8
 8016378:	f280 80c1 	bge.w	80164fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 801637c:	5c63      	ldrb	r3, [r4, r1]
 801637e:	b12b      	cbz	r3, 801638c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 8016380:	2bff      	cmp	r3, #255	; 0xff
 8016382:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 8016386:	d176      	bne.n	8016476 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 8016388:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 801638c:	3101      	adds	r1, #1
 801638e:	e7f2      	b.n	8016376 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 8016390:	9202      	str	r2, [sp, #8]
 8016392:	0052      	lsls	r2, r2, #1
 8016394:	9201      	str	r2, [sp, #4]
 8016396:	f04f 0b00 	mov.w	fp, #0
 801639a:	9303      	str	r3, [sp, #12]
 801639c:	9b00      	ldr	r3, [sp, #0]
 801639e:	459b      	cmp	fp, r3
 80163a0:	f280 80c1 	bge.w	8016526 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 80163a4:	f04f 0c00 	mov.w	ip, #0
 80163a8:	45c4      	cmp	ip, r8
 80163aa:	da4f      	bge.n	801644c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 80163ac:	f814 300c 	ldrb.w	r3, [r4, ip]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d048      	beq.n	8016446 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 80163b4:	fb09 f303 	mul.w	r3, r9, r3
 80163b8:	1c5a      	adds	r2, r3, #1
 80163ba:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80163be:	121b      	asrs	r3, r3, #8
 80163c0:	d041      	beq.n	8016446 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 80163c2:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 80163c6:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 80163ca:	b29e      	uxth	r6, r3
 80163cc:	1211      	asrs	r1, r2, #8
 80163ce:	43db      	mvns	r3, r3
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	ea4f 272e 	mov.w	r7, lr, asr #8
 80163d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80163da:	fb11 f103 	smulbb	r1, r1, r3
 80163de:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80163e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80163e6:	00d2      	lsls	r2, r2, #3
 80163e8:	fb07 1706 	mla	r7, r7, r6, r1
 80163ec:	b2d2      	uxtb	r2, r2
 80163ee:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80163f2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80163f6:	fb12 f203 	smulbb	r2, r2, r3
 80163fa:	fa5f fe8e 	uxtb.w	lr, lr
 80163fe:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8016402:	fb0e 2206 	mla	r2, lr, r6, r2
 8016406:	fb1a fa03 	smulbb	sl, sl, r3
 801640a:	b2bf      	uxth	r7, r7
 801640c:	b292      	uxth	r2, r2
 801640e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016412:	fb01 a106 	mla	r1, r1, r6, sl
 8016416:	1c7b      	adds	r3, r7, #1
 8016418:	f102 0a01 	add.w	sl, r2, #1
 801641c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8016420:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 8016424:	b289      	uxth	r1, r1
 8016426:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801642a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801642e:	ea47 070a 	orr.w	r7, r7, sl
 8016432:	f101 0a01 	add.w	sl, r1, #1
 8016436:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801643a:	0949      	lsrs	r1, r1, #5
 801643c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016440:	430f      	orrs	r7, r1
 8016442:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 8016446:	f10c 0c01 	add.w	ip, ip, #1
 801644a:	e7ad      	b.n	80163a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 801644c:	9b03      	ldr	r3, [sp, #12]
 801644e:	9a01      	ldr	r2, [sp, #4]
 8016450:	881b      	ldrh	r3, [r3, #0]
 8016452:	eba3 0308 	sub.w	r3, r3, r8
 8016456:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801645a:	4418      	add	r0, r3
 801645c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016460:	eba3 0308 	sub.w	r3, r3, r8
 8016464:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8016468:	4415      	add	r5, r2
 801646a:	9a02      	ldr	r2, [sp, #8]
 801646c:	4413      	add	r3, r2
 801646e:	441c      	add	r4, r3
 8016470:	f10b 0b01 	add.w	fp, fp, #1
 8016474:	e792      	b.n	801639c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 8016476:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801647a:	b29f      	uxth	r7, r3
 801647c:	1216      	asrs	r6, r2, #8
 801647e:	43db      	mvns	r3, r3
 8016480:	b2db      	uxtb	r3, r3
 8016482:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8016486:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801648a:	fb16 f603 	smulbb	r6, r6, r3
 801648e:	ea4f 09e2 	mov.w	r9, r2, asr #3
 8016492:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016496:	00d2      	lsls	r2, r2, #3
 8016498:	fb0c 6c07 	mla	ip, ip, r7, r6
 801649c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80164a0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80164a4:	b2d2      	uxtb	r2, r2
 80164a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80164aa:	fa1f fc8c 	uxth.w	ip, ip
 80164ae:	fb19 f903 	smulbb	r9, r9, r3
 80164b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80164b6:	fa5f fe8e 	uxtb.w	lr, lr
 80164ba:	fb12 f203 	smulbb	r2, r2, r3
 80164be:	fb06 9607 	mla	r6, r6, r7, r9
 80164c2:	fb0e 2207 	mla	r2, lr, r7, r2
 80164c6:	f10c 0901 	add.w	r9, ip, #1
 80164ca:	b292      	uxth	r2, r2
 80164cc:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80164d0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80164d4:	f102 0c01 	add.w	ip, r2, #1
 80164d8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80164dc:	b2b6      	uxth	r6, r6
 80164de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80164e2:	ea49 0c02 	orr.w	ip, r9, r2
 80164e6:	f106 0901 	add.w	r9, r6, #1
 80164ea:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80164ee:	0976      	lsrs	r6, r6, #5
 80164f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80164f4:	ea4c 0c06 	orr.w	ip, ip, r6
 80164f8:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 80164fc:	e746      	b.n	801638c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 80164fe:	9b02      	ldr	r3, [sp, #8]
 8016500:	881b      	ldrh	r3, [r3, #0]
 8016502:	eba3 0308 	sub.w	r3, r3, r8
 8016506:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801650a:	4418      	add	r0, r3
 801650c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016510:	eba3 0308 	sub.w	r3, r3, r8
 8016514:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 8016518:	4415      	add	r5, r2
 801651a:	9a01      	ldr	r2, [sp, #4]
 801651c:	4413      	add	r3, r2
 801651e:	441c      	add	r4, r3
 8016520:	f10a 0a01 	add.w	sl, sl, #1
 8016524:	e722      	b.n	801636c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 8016526:	4b04      	ldr	r3, [pc, #16]	; (8016538 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 8016528:	6818      	ldr	r0, [r3, #0]
 801652a:	6803      	ldr	r3, [r0, #0]
 801652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801652e:	4798      	blx	r3
 8016530:	b009      	add	sp, #36	; 0x24
 8016532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016536:	bf00      	nop
 8016538:	2002ee78 	.word	0x2002ee78
 801653c:	2002ee72 	.word	0x2002ee72

08016540 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8016540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016544:	b089      	sub	sp, #36	; 0x24
 8016546:	4682      	mov	sl, r0
 8016548:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801654c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801654e:	460d      	mov	r5, r1
 8016550:	4691      	mov	r9, r2
 8016552:	4698      	mov	r8, r3
 8016554:	b3ae      	cbz	r6, 80165c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8016556:	4608      	mov	r0, r1
 8016558:	f7fc fa8c 	bl	8012a74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801655c:	4607      	mov	r7, r0
 801655e:	4628      	mov	r0, r5
 8016560:	f7fc fac2 	bl	8012ae8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016564:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016568:	4628      	mov	r0, r5
 801656a:	f8ad 9008 	strh.w	r9, [sp, #8]
 801656e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8016572:	f8ad 700c 	strh.w	r7, [sp, #12]
 8016576:	f7fc fc09 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801657a:	b178      	cbz	r0, 801659c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801657c:	4628      	mov	r0, r5
 801657e:	f7fc fc05 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016582:	2802      	cmp	r0, #2
 8016584:	d00a      	beq.n	801659c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016586:	4628      	mov	r0, r5
 8016588:	f7fc fc00 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801658c:	280b      	cmp	r0, #11
 801658e:	d005      	beq.n	801659c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016590:	4b69      	ldr	r3, [pc, #420]	; (8016738 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8016592:	4a6a      	ldr	r2, [pc, #424]	; (801673c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8016594:	486a      	ldr	r0, [pc, #424]	; (8016740 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8016596:	214f      	movs	r1, #79	; 0x4f
 8016598:	f007 ff24 	bl	801e3e4 <__assert_func>
 801659c:	4628      	mov	r0, r5
 801659e:	f7fc fb71 	bl	8012c84 <_ZNK8touchgfx6Bitmap7getDataEv>
 80165a2:	4607      	mov	r7, r0
 80165a4:	4628      	mov	r0, r5
 80165a6:	f7fc fb9f 	bl	8012ce8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80165aa:	4681      	mov	r9, r0
 80165ac:	4628      	mov	r0, r5
 80165ae:	f7fc fbed 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80165b2:	2802      	cmp	r0, #2
 80165b4:	d108      	bne.n	80165c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80165b6:	4633      	mov	r3, r6
 80165b8:	4622      	mov	r2, r4
 80165ba:	a902      	add	r1, sp, #8
 80165bc:	4638      	mov	r0, r7
 80165be:	f7ff fa6d 	bl	8015a9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80165c2:	b009      	add	sp, #36	; 0x24
 80165c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c8:	4628      	mov	r0, r5
 80165ca:	f7fc fbdf 	bl	8012d8c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80165ce:	280b      	cmp	r0, #11
 80165d0:	d107      	bne.n	80165e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80165d2:	9600      	str	r6, [sp, #0]
 80165d4:	4623      	mov	r3, r4
 80165d6:	aa02      	add	r2, sp, #8
 80165d8:	4649      	mov	r1, r9
 80165da:	4638      	mov	r0, r7
 80165dc:	f7ff fe62 	bl	80162a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80165e0:	e7ef      	b.n	80165c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80165e2:	4628      	mov	r0, r5
 80165e4:	f7fc fb14 	bl	8012c10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80165e8:	b950      	cbnz	r0, 8016600 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80165ea:	e9cd 6000 	strd	r6, r0, [sp]
 80165ee:	f8da 3000 	ldr.w	r3, [sl]
 80165f2:	aa02      	add	r2, sp, #8
 80165f4:	691d      	ldr	r5, [r3, #16]
 80165f6:	4639      	mov	r1, r7
 80165f8:	4623      	mov	r3, r4
 80165fa:	4650      	mov	r0, sl
 80165fc:	47a8      	blx	r5
 80165fe:	e7e0      	b.n	80165c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8016600:	f10d 0818 	add.w	r8, sp, #24
 8016604:	4629      	mov	r1, r5
 8016606:	4640      	mov	r0, r8
 8016608:	f7fc faa8 	bl	8012b5c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801660c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016610:	ad04      	add	r5, sp, #16
 8016612:	e885 0003 	stmia.w	r5, {r0, r1}
 8016616:	4628      	mov	r0, r5
 8016618:	4621      	mov	r1, r4
 801661a:	f7f8 f987 	bl	800e92c <_ZN8touchgfx4RectaNERKS0_>
 801661e:	4628      	mov	r0, r5
 8016620:	f7f8 f9c8 	bl	800e9b4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016624:	b138      	cbz	r0, 8016636 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8016626:	9600      	str	r6, [sp, #0]
 8016628:	4623      	mov	r3, r4
 801662a:	aa02      	add	r2, sp, #8
 801662c:	4649      	mov	r1, r9
 801662e:	4638      	mov	r0, r7
 8016630:	f7ff fe50 	bl	80162d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8016634:	e7c5      	b.n	80165c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8016636:	e9cd 6000 	strd	r6, r0, [sp]
 801663a:	f8da 3000 	ldr.w	r3, [sl]
 801663e:	aa02      	add	r2, sp, #8
 8016640:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016644:	4639      	mov	r1, r7
 8016646:	462b      	mov	r3, r5
 8016648:	4650      	mov	r0, sl
 801664a:	47d8      	blx	fp
 801664c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016650:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016654:	4293      	cmp	r3, r2
 8016656:	dd13      	ble.n	8016680 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8016658:	f9b4 0000 	ldrsh.w	r0, [r4]
 801665c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016660:	f8ad 0018 	strh.w	r0, [sp, #24]
 8016664:	1a9b      	subs	r3, r3, r2
 8016666:	f8ad 201a 	strh.w	r2, [sp, #26]
 801666a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801666e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016672:	9600      	str	r6, [sp, #0]
 8016674:	4643      	mov	r3, r8
 8016676:	aa02      	add	r2, sp, #8
 8016678:	4649      	mov	r1, r9
 801667a:	4638      	mov	r0, r7
 801667c:	f7ff fe2a 	bl	80162d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8016680:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8016684:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016688:	4293      	cmp	r3, r2
 801668a:	dd13      	ble.n	80166b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 801668c:	1a9b      	subs	r3, r3, r2
 801668e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016692:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8016696:	f8ad 2018 	strh.w	r2, [sp, #24]
 801669a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801669e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80166a2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80166a6:	9600      	str	r6, [sp, #0]
 80166a8:	4643      	mov	r3, r8
 80166aa:	aa02      	add	r2, sp, #8
 80166ac:	4649      	mov	r1, r9
 80166ae:	4638      	mov	r0, r7
 80166b0:	f7ff fe10 	bl	80162d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80166b4:	88a2      	ldrh	r2, [r4, #4]
 80166b6:	8823      	ldrh	r3, [r4, #0]
 80166b8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80166bc:	4413      	add	r3, r2
 80166be:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80166c2:	440a      	add	r2, r1
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	b292      	uxth	r2, r2
 80166c8:	b211      	sxth	r1, r2
 80166ca:	b218      	sxth	r0, r3
 80166cc:	4288      	cmp	r0, r1
 80166ce:	dd13      	ble.n	80166f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 80166d0:	1a9b      	subs	r3, r3, r2
 80166d2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80166d6:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80166da:	f8ad 1018 	strh.w	r1, [sp, #24]
 80166de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80166e2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80166e6:	9600      	str	r6, [sp, #0]
 80166e8:	4643      	mov	r3, r8
 80166ea:	aa02      	add	r2, sp, #8
 80166ec:	4649      	mov	r1, r9
 80166ee:	4638      	mov	r0, r7
 80166f0:	f8ad 501a 	strh.w	r5, [sp, #26]
 80166f4:	f7ff fdee 	bl	80162d4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80166f8:	88e2      	ldrh	r2, [r4, #6]
 80166fa:	8863      	ldrh	r3, [r4, #2]
 80166fc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8016700:	4413      	add	r3, r2
 8016702:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016706:	440a      	add	r2, r1
 8016708:	b29b      	uxth	r3, r3
 801670a:	b292      	uxth	r2, r2
 801670c:	b211      	sxth	r1, r2
 801670e:	b218      	sxth	r0, r3
 8016710:	4288      	cmp	r0, r1
 8016712:	f77f af56 	ble.w	80165c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8016716:	f9b4 5000 	ldrsh.w	r5, [r4]
 801671a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801671e:	f8ad 5018 	strh.w	r5, [sp, #24]
 8016722:	1a9b      	subs	r3, r3, r2
 8016724:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016728:	f8ad 101a 	strh.w	r1, [sp, #26]
 801672c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8016730:	9600      	str	r6, [sp, #0]
 8016732:	4643      	mov	r3, r8
 8016734:	e779      	b.n	801662a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8016736:	bf00      	nop
 8016738:	08021f59 	.word	0x08021f59
 801673c:	08022666 	.word	0x08022666
 8016740:	08022103 	.word	0x08022103

08016744 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8016744:	b508      	push	{r3, lr}
 8016746:	b180      	cbz	r0, 801676a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8016748:	2902      	cmp	r1, #2
 801674a:	d014      	beq.n	8016776 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 801674c:	2903      	cmp	r1, #3
 801674e:	d01d      	beq.n	801678c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8016750:	2901      	cmp	r1, #1
 8016752:	d101      	bne.n	8016758 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8016754:	2001      	movs	r0, #1
 8016756:	bd08      	pop	{r3, pc}
 8016758:	4b0e      	ldr	r3, [pc, #56]	; (8016794 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801675a:	8818      	ldrh	r0, [r3, #0]
 801675c:	b990      	cbnz	r0, 8016784 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801675e:	4b0e      	ldr	r3, [pc, #56]	; (8016798 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8016760:	4a0e      	ldr	r2, [pc, #56]	; (801679c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8016762:	480f      	ldr	r0, [pc, #60]	; (80167a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8016764:	21d7      	movs	r1, #215	; 0xd7
 8016766:	f007 fe3d 	bl	801e3e4 <__assert_func>
 801676a:	2902      	cmp	r1, #2
 801676c:	d00e      	beq.n	801678c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 801676e:	2903      	cmp	r1, #3
 8016770:	d0f2      	beq.n	8016758 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8016772:	2901      	cmp	r1, #1
 8016774:	d1ee      	bne.n	8016754 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8016776:	4b07      	ldr	r3, [pc, #28]	; (8016794 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8016778:	8818      	ldrh	r0, [r3, #0]
 801677a:	2800      	cmp	r0, #0
 801677c:	d0ef      	beq.n	801675e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801677e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8016782:	e7e8      	b.n	8016756 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016784:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8016788:	4240      	negs	r0, r0
 801678a:	e7e4      	b.n	8016756 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801678c:	f04f 30ff 	mov.w	r0, #4294967295
 8016790:	e7e1      	b.n	8016756 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8016792:	bf00      	nop
 8016794:	2002ee72 	.word	0x2002ee72
 8016798:	0802225d 	.word	0x0802225d
 801679c:	080227e3 	.word	0x080227e3
 80167a0:	0802229f 	.word	0x0802229f

080167a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80167a4:	b508      	push	{r3, lr}
 80167a6:	b180      	cbz	r0, 80167ca <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80167a8:	2902      	cmp	r1, #2
 80167aa:	d014      	beq.n	80167d6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80167ac:	2903      	cmp	r1, #3
 80167ae:	d018      	beq.n	80167e2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80167b0:	2901      	cmp	r1, #1
 80167b2:	d001      	beq.n	80167b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80167b4:	2001      	movs	r0, #1
 80167b6:	e013      	b.n	80167e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80167b8:	4b0e      	ldr	r3, [pc, #56]	; (80167f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80167ba:	8818      	ldrh	r0, [r3, #0]
 80167bc:	b970      	cbnz	r0, 80167dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80167be:	4b0e      	ldr	r3, [pc, #56]	; (80167f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80167c0:	4a0e      	ldr	r2, [pc, #56]	; (80167fc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80167c2:	480f      	ldr	r0, [pc, #60]	; (8016800 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80167c4:	21d7      	movs	r1, #215	; 0xd7
 80167c6:	f007 fe0d 	bl	801e3e4 <__assert_func>
 80167ca:	2902      	cmp	r1, #2
 80167cc:	d009      	beq.n	80167e2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80167ce:	2903      	cmp	r1, #3
 80167d0:	d0f0      	beq.n	80167b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80167d2:	2901      	cmp	r1, #1
 80167d4:	d1f0      	bne.n	80167b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80167d6:	f04f 30ff 	mov.w	r0, #4294967295
 80167da:	e001      	b.n	80167e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80167dc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80167e0:	bd08      	pop	{r3, pc}
 80167e2:	4b04      	ldr	r3, [pc, #16]	; (80167f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80167e4:	8818      	ldrh	r0, [r3, #0]
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d0e9      	beq.n	80167be <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80167ea:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80167ee:	4240      	negs	r0, r0
 80167f0:	e7f6      	b.n	80167e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80167f2:	bf00      	nop
 80167f4:	2002ee72 	.word	0x2002ee72
 80167f8:	0802225d 	.word	0x0802225d
 80167fc:	080227e3 	.word	0x080227e3
 8016800:	0802229f 	.word	0x0802229f

08016804 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8016804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016808:	b097      	sub	sp, #92	; 0x5c
 801680a:	9109      	str	r1, [sp, #36]	; 0x24
 801680c:	a912      	add	r1, sp, #72	; 0x48
 801680e:	e881 000c 	stmia.w	r1, {r2, r3}
 8016812:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8016816:	9306      	str	r3, [sp, #24]
 8016818:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801681c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8016820:	930e      	str	r3, [sp, #56]	; 0x38
 8016822:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8016826:	930a      	str	r3, [sp, #40]	; 0x28
 8016828:	7b4b      	ldrb	r3, [r1, #13]
 801682a:	798f      	ldrb	r7, [r1, #6]
 801682c:	f9bd 4080 	ldrsh.w	r4, [sp, #128]	; 0x80
 8016830:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 8016834:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8016838:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801683c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8016840:	0158      	lsls	r0, r3, #5
 8016842:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016846:	4338      	orrs	r0, r7
 8016848:	9008      	str	r0, [sp, #32]
 801684a:	f000 8149 	beq.w	8016ae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801684e:	011b      	lsls	r3, r3, #4
 8016850:	79c8      	ldrb	r0, [r1, #7]
 8016852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016856:	4303      	orrs	r3, r0
 8016858:	9307      	str	r3, [sp, #28]
 801685a:	f000 8141 	beq.w	8016ae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801685e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8016862:	b29b      	uxth	r3, r3
 8016864:	2e00      	cmp	r6, #0
 8016866:	f000 80e5 	beq.w	8016a34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x230>
 801686a:	1af6      	subs	r6, r6, r3
 801686c:	b2b6      	uxth	r6, r6
 801686e:	0433      	lsls	r3, r6, #16
 8016870:	d502      	bpl.n	8016878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016872:	1ba4      	subs	r4, r4, r6
 8016874:	b224      	sxth	r4, r4
 8016876:	2600      	movs	r6, #0
 8016878:	f9b2 1000 	ldrsh.w	r1, [r2]
 801687c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8016880:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8016884:	428c      	cmp	r4, r1
 8016886:	b28b      	uxth	r3, r1
 8016888:	bfbf      	itttt	lt
 801688a:	18f6      	addlt	r6, r6, r3
 801688c:	1b34      	sublt	r4, r6, r4
 801688e:	b2a6      	uxthlt	r6, r4
 8016890:	460c      	movlt	r4, r1
 8016892:	8891      	ldrh	r1, [r2, #4]
 8016894:	440b      	add	r3, r1
 8016896:	b21b      	sxth	r3, r3
 8016898:	930d      	str	r3, [sp, #52]	; 0x34
 801689a:	88d3      	ldrh	r3, [r2, #6]
 801689c:	9a06      	ldr	r2, [sp, #24]
 801689e:	449a      	add	sl, r3
 80168a0:	fa0f f38a 	sxth.w	r3, sl
 80168a4:	930c      	str	r3, [sp, #48]	; 0x30
 80168a6:	4bb5      	ldr	r3, [pc, #724]	; (8016b7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 80168a8:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 80168ac:	f893 9000 	ldrb.w	r9, [r3]
 80168b0:	f109 3cff 	add.w	ip, r9, #4294967295
 80168b4:	f1dc 0300 	rsbs	r3, ip, #0
 80168b8:	eb43 030c 	adc.w	r3, r3, ip
 80168bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80168be:	4621      	mov	r1, r4
 80168c0:	465b      	mov	r3, fp
 80168c2:	a812      	add	r0, sp, #72	; 0x48
 80168c4:	f7fa f852 	bl	801096c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80168c8:	4621      	mov	r1, r4
 80168ca:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80168ce:	465b      	mov	r3, fp
 80168d0:	9a06      	ldr	r2, [sp, #24]
 80168d2:	a812      	add	r0, sp, #72	; 0x48
 80168d4:	f7fa f862 	bl	801099c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80168d8:	a916      	add	r1, sp, #88	; 0x58
 80168da:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80168de:	a815      	add	r0, sp, #84	; 0x54
 80168e0:	f7fa f93e 	bl	8010b60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80168e4:	f1bb 0f00 	cmp.w	fp, #0
 80168e8:	f040 80a7 	bne.w	8016a3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x236>
 80168ec:	f1b9 0f01 	cmp.w	r9, #1
 80168f0:	f040 80ab 	bne.w	8016a4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 80168f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	f040 80f7 	bne.w	8016aea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e6>
 80168fc:	4ba0      	ldr	r3, [pc, #640]	; (8016b80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80168fe:	6818      	ldr	r0, [r3, #0]
 8016900:	6803      	ldr	r3, [r0, #0]
 8016902:	6a1b      	ldr	r3, [r3, #32]
 8016904:	4798      	blx	r3
 8016906:	4a9f      	ldr	r2, [pc, #636]	; (8016b84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8016908:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801690c:	8811      	ldrh	r1, [r2, #0]
 801690e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8016912:	fb01 2303 	mla	r3, r1, r3, r2
 8016916:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801691a:	f04f 0901 	mov.w	r9, #1
 801691e:	9307      	str	r3, [sp, #28]
 8016920:	fa09 f308 	lsl.w	r3, r9, r8
 8016924:	3b01      	subs	r3, #1
 8016926:	b2db      	uxtb	r3, r3
 8016928:	45c8      	cmp	r8, r9
 801692a:	930f      	str	r3, [sp, #60]	; 0x3c
 801692c:	f000 80df 	beq.w	8016aee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8016930:	f1b8 0f02 	cmp.w	r8, #2
 8016934:	f000 8153 	beq.w	8016bde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3da>
 8016938:	f1b8 0f04 	cmp.w	r8, #4
 801693c:	f000 8146 	beq.w	8016bcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c8>
 8016940:	b906      	cbnz	r6, 8016944 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8016942:	b175      	cbz	r5, 8016962 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 8016944:	fb17 6305 	smlabb	r3, r7, r5, r6
 8016948:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801694a:	fb13 f308 	smulbb	r3, r3, r8
 801694e:	b29b      	uxth	r3, r3
 8016950:	ebaa 0a05 	sub.w	sl, sl, r5
 8016954:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016958:	9226      	str	r2, [sp, #152]	; 0x98
 801695a:	fa1f fa8a 	uxth.w	sl, sl
 801695e:	f003 0507 	and.w	r5, r3, #7
 8016962:	4659      	mov	r1, fp
 8016964:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016966:	f7ff feed 	bl	8016744 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801696a:	4659      	mov	r1, fp
 801696c:	9010      	str	r0, [sp, #64]	; 0x40
 801696e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016970:	f7ff ff18 	bl	80167a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8016974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016976:	9a06      	ldr	r2, [sp, #24]
 8016978:	1a9a      	subs	r2, r3, r2
 801697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801697c:	1ba4      	subs	r4, r4, r6
 801697e:	1b1c      	subs	r4, r3, r4
 8016980:	9b08      	ldr	r3, [sp, #32]
 8016982:	4592      	cmp	sl, r2
 8016984:	bfa8      	it	ge
 8016986:	4692      	movge	sl, r2
 8016988:	429c      	cmp	r4, r3
 801698a:	bfd4      	ite	le
 801698c:	ebc6 0604 	rsble	r6, r6, r4
 8016990:	ebc6 0603 	rsbgt	r6, r6, r3
 8016994:	1bbf      	subs	r7, r7, r6
 8016996:	fb08 f307 	mul.w	r3, r8, r7
 801699a:	930b      	str	r3, [sp, #44]	; 0x2c
 801699c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801699e:	781a      	ldrb	r2, [r3, #0]
 80169a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169a2:	1219      	asrs	r1, r3, #8
 80169a4:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 80169a8:	930c      	str	r3, [sp, #48]	; 0x30
 80169aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169ac:	f3c3 01cc 	ubfx	r1, r3, #3, #13
 80169b0:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80169b4:	930d      	str	r3, [sp, #52]	; 0x34
 80169b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80169b8:	00d9      	lsls	r1, r3, #3
 80169ba:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 80169be:	930e      	str	r3, [sp, #56]	; 0x38
 80169c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169c2:	0059      	lsls	r1, r3, #1
 80169c4:	fb03 0016 	mls	r0, r3, r6, r0
 80169c8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80169cc:	434b      	muls	r3, r1
 80169ce:	9106      	str	r1, [sp, #24]
 80169d0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80169d2:	412a      	asrs	r2, r5
 80169d4:	b289      	uxth	r1, r1
 80169d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80169da:	b2d2      	uxtb	r2, r2
 80169dc:	9110      	str	r1, [sp, #64]	; 0x40
 80169de:	9311      	str	r3, [sp, #68]	; 0x44
 80169e0:	f1ba 0f00 	cmp.w	sl, #0
 80169e4:	f340 80e4 	ble.w	8016bb0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80169e8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80169ec:	46b6      	mov	lr, r6
 80169ee:	f1be 0f00 	cmp.w	lr, #0
 80169f2:	f340 80c9 	ble.w	8016b88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80169f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169f8:	4013      	ands	r3, r2
 80169fa:	d009      	beq.n	8016a10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20c>
 80169fc:	fb13 f309 	smulbb	r3, r3, r9
 8016a00:	2bfe      	cmp	r3, #254	; 0xfe
 8016a02:	dd77      	ble.n	8016af4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 8016a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a06:	29ff      	cmp	r1, #255	; 0xff
 8016a08:	d174      	bne.n	8016af4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 8016a0a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016a0c:	f8ac 0000 	strh.w	r0, [ip]
 8016a10:	4445      	add	r5, r8
 8016a12:	b2ad      	uxth	r5, r5
 8016a14:	2d07      	cmp	r5, #7
 8016a16:	bf81      	itttt	hi
 8016a18:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8016a1a:	785a      	ldrbhi	r2, [r3, #1]
 8016a1c:	3301      	addhi	r3, #1
 8016a1e:	9326      	strhi	r3, [sp, #152]	; 0x98
 8016a20:	9b06      	ldr	r3, [sp, #24]
 8016a22:	bf9a      	itte	ls
 8016a24:	fa42 f208 	asrls.w	r2, r2, r8
 8016a28:	b2d2      	uxtbls	r2, r2
 8016a2a:	2500      	movhi	r5, #0
 8016a2c:	449c      	add	ip, r3
 8016a2e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016a32:	e7dc      	b.n	80169ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8016a34:	441c      	add	r4, r3
 8016a36:	b224      	sxth	r4, r4
 8016a38:	e71e      	b.n	8016878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8016a3a:	f1bb 0f01 	cmp.w	fp, #1
 8016a3e:	f47f af59 	bne.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016a42:	f1b9 0f01 	cmp.w	r9, #1
 8016a46:	f47f af55 	bne.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016a4a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8016b80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8016a4e:	f8d9 0000 	ldr.w	r0, [r9]
 8016a52:	6803      	ldr	r3, [r0, #0]
 8016a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a56:	4798      	blx	r3
 8016a58:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8016a5c:	464a      	mov	r2, r9
 8016a5e:	d006      	beq.n	8016a6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8016a60:	f1b8 0f04 	cmp.w	r8, #4
 8016a64:	d13f      	bne.n	8016ae6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8016a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a68:	3300      	adds	r3, #0
 8016a6a:	bf18      	it	ne
 8016a6c:	2301      	movne	r3, #1
 8016a6e:	05c0      	lsls	r0, r0, #23
 8016a70:	f140 80a7 	bpl.w	8016bc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8016a74:	f1b8 0f08 	cmp.w	r8, #8
 8016a78:	f040 80a3 	bne.w	8016bc2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	bf0c      	ite	eq
 8016a80:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8016a84:	2180      	movne	r1, #128	; 0x80
 8016a86:	2e00      	cmp	r6, #0
 8016a88:	f47f af34 	bne.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016a8c:	2d00      	cmp	r5, #0
 8016a8e:	f47f af31 	bne.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016a92:	9b08      	ldr	r3, [sp, #32]
 8016a94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016a96:	18e3      	adds	r3, r4, r3
 8016a98:	4283      	cmp	r3, r0
 8016a9a:	f73f af2b 	bgt.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016a9e:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8016aa2:	4403      	add	r3, r0
 8016aa4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016aa6:	4283      	cmp	r3, r0
 8016aa8:	f73f af24 	bgt.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016aac:	6810      	ldr	r0, [r2, #0]
 8016aae:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016ab2:	6804      	ldr	r4, [r0, #0]
 8016ab4:	9105      	str	r1, [sp, #20]
 8016ab6:	f1b8 0f08 	cmp.w	r8, #8
 8016aba:	bf18      	it	ne
 8016abc:	3701      	addne	r7, #1
 8016abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016ac0:	9104      	str	r1, [sp, #16]
 8016ac2:	bf18      	it	ne
 8016ac4:	f027 0701 	bicne.w	r7, r7, #1
 8016ac8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016aca:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8016ace:	bf18      	it	ne
 8016ad0:	b2bf      	uxthne	r7, r7
 8016ad2:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8016ad6:	e9cd 7a00 	strd	r7, sl, [sp]
 8016ada:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016adc:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8016ade:	47a0      	blx	r4
 8016ae0:	b017      	add	sp, #92	; 0x5c
 8016ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	e7c1      	b.n	8016a6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8016aea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016aec:	e70b      	b.n	8016906 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8016aee:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8016af2:	e725      	b.n	8016940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8016af4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016af6:	f8bc 4000 	ldrh.w	r4, [ip]
 8016afa:	fb11 f303 	smulbb	r3, r1, r3
 8016afe:	b29b      	uxth	r3, r3
 8016b00:	1c59      	adds	r1, r3, #1
 8016b02:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016b06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b0c:	b29f      	uxth	r7, r3
 8016b0e:	1220      	asrs	r0, r4, #8
 8016b10:	43db      	mvns	r3, r3
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	fb11 f107 	smulbb	r1, r1, r7
 8016b18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016b1c:	fb00 1003 	mla	r0, r0, r3, r1
 8016b20:	b281      	uxth	r1, r0
 8016b22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016b24:	9108      	str	r1, [sp, #32]
 8016b26:	fb17 fb00 	smulbb	fp, r7, r0
 8016b2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016b2c:	10e1      	asrs	r1, r4, #3
 8016b2e:	00e4      	lsls	r4, r4, #3
 8016b30:	fb17 f700 	smulbb	r7, r7, r0
 8016b34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016b38:	b2e4      	uxtb	r4, r4
 8016b3a:	fb01 b103 	mla	r1, r1, r3, fp
 8016b3e:	fb04 7703 	mla	r7, r4, r3, r7
 8016b42:	9b08      	ldr	r3, [sp, #32]
 8016b44:	9808      	ldr	r0, [sp, #32]
 8016b46:	b2bf      	uxth	r7, r7
 8016b48:	3301      	adds	r3, #1
 8016b4a:	f107 0b01 	add.w	fp, r7, #1
 8016b4e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8016b52:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8016b56:	b289      	uxth	r1, r1
 8016b58:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8016b5c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8016b60:	ea40 000b 	orr.w	r0, r0, fp
 8016b64:	f101 0b01 	add.w	fp, r1, #1
 8016b68:	eb0b 2b11 	add.w	fp, fp, r1, lsr #8
 8016b6c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8016b70:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016b74:	ea40 000b 	orr.w	r0, r0, fp
 8016b78:	e748      	b.n	8016a0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8016b7a:	bf00      	nop
 8016b7c:	2002ee70 	.word	0x2002ee70
 8016b80:	2002ee78 	.word	0x2002ee78
 8016b84:	2002ee72 	.word	0x2002ee72
 8016b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b8a:	b153      	cbz	r3, 8016ba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8016b8c:	441d      	add	r5, r3
 8016b8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016b90:	b2ad      	uxth	r5, r5
 8016b92:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 8016b96:	f005 0507 	and.w	r5, r5, #7
 8016b9a:	781a      	ldrb	r2, [r3, #0]
 8016b9c:	9326      	str	r3, [sp, #152]	; 0x98
 8016b9e:	412a      	asrs	r2, r5
 8016ba0:	b2d2      	uxtb	r2, r2
 8016ba2:	9b07      	ldr	r3, [sp, #28]
 8016ba4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016ba6:	440b      	add	r3, r1
 8016ba8:	9307      	str	r3, [sp, #28]
 8016baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016bae:	e717      	b.n	80169e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1dc>
 8016bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d194      	bne.n	8016ae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8016bb6:	4b0b      	ldr	r3, [pc, #44]	; (8016be4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>)
 8016bb8:	6818      	ldr	r0, [r3, #0]
 8016bba:	6803      	ldr	r3, [r0, #0]
 8016bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bbe:	4798      	blx	r3
 8016bc0:	e78e      	b.n	8016ae0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	f43f ae96 	beq.w	80168f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016bc8:	2180      	movs	r1, #128	; 0x80
 8016bca:	e75c      	b.n	8016a86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 8016bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bce:	b11b      	cbz	r3, 8016bd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 8016bd0:	07fb      	lsls	r3, r7, #31
 8016bd2:	d501      	bpl.n	8016bd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 8016bd4:	3701      	adds	r7, #1
 8016bd6:	b2bf      	uxth	r7, r7
 8016bd8:	f04f 0911 	mov.w	r9, #17
 8016bdc:	e6b0      	b.n	8016940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8016bde:	f04f 0955 	mov.w	r9, #85	; 0x55
 8016be2:	e6ad      	b.n	8016940 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8016be4:	2002ee78 	.word	0x2002ee78

08016be8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4c15      	ldr	r4, [pc, #84]	; (8016c40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8016bec:	7823      	ldrb	r3, [r4, #0]
 8016bee:	f3bf 8f5b 	dmb	ish
 8016bf2:	07da      	lsls	r2, r3, #31
 8016bf4:	4605      	mov	r5, r0
 8016bf6:	d40b      	bmi.n	8016c10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	f007 fbc9 	bl	801e390 <__cxa_guard_acquire>
 8016bfe:	b138      	cbz	r0, 8016c10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8016c00:	4620      	mov	r0, r4
 8016c02:	f007 fbd1 	bl	801e3a8 <__cxa_guard_release>
 8016c06:	4a0f      	ldr	r2, [pc, #60]	; (8016c44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8016c08:	490f      	ldr	r1, [pc, #60]	; (8016c48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8016c0a:	4810      	ldr	r0, [pc, #64]	; (8016c4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8016c0c:	f007 fbb6 	bl	801e37c <__aeabi_atexit>
 8016c10:	4c0f      	ldr	r4, [pc, #60]	; (8016c50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8016c12:	7823      	ldrb	r3, [r4, #0]
 8016c14:	f3bf 8f5b 	dmb	ish
 8016c18:	07db      	lsls	r3, r3, #31
 8016c1a:	d40b      	bmi.n	8016c34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	f007 fbb7 	bl	801e390 <__cxa_guard_acquire>
 8016c22:	b138      	cbz	r0, 8016c34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8016c24:	4620      	mov	r0, r4
 8016c26:	f007 fbbf 	bl	801e3a8 <__cxa_guard_release>
 8016c2a:	4a06      	ldr	r2, [pc, #24]	; (8016c44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8016c2c:	4909      	ldr	r1, [pc, #36]	; (8016c54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8016c2e:	480a      	ldr	r0, [pc, #40]	; (8016c58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8016c30:	f007 fba4 	bl	801e37c <__aeabi_atexit>
 8016c34:	4b05      	ldr	r3, [pc, #20]	; (8016c4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8016c36:	612b      	str	r3, [r5, #16]
 8016c38:	4b07      	ldr	r3, [pc, #28]	; (8016c58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8016c3a:	616b      	str	r3, [r5, #20]
 8016c3c:	bd38      	pop	{r3, r4, r5, pc}
 8016c3e:	bf00      	nop
 8016c40:	2002ef64 	.word	0x2002ef64
 8016c44:	20000000 	.word	0x20000000
 8016c48:	080152a3 	.word	0x080152a3
 8016c4c:	200000d8 	.word	0x200000d8
 8016c50:	2002ef68 	.word	0x2002ef68
 8016c54:	080152a1 	.word	0x080152a1
 8016c58:	200000dc 	.word	0x200000dc

08016c5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	4c15      	ldr	r4, [pc, #84]	; (8016cb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8016c60:	7823      	ldrb	r3, [r4, #0]
 8016c62:	f3bf 8f5b 	dmb	ish
 8016c66:	07da      	lsls	r2, r3, #31
 8016c68:	4605      	mov	r5, r0
 8016c6a:	d40b      	bmi.n	8016c84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f007 fb8f 	bl	801e390 <__cxa_guard_acquire>
 8016c72:	b138      	cbz	r0, 8016c84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8016c74:	4620      	mov	r0, r4
 8016c76:	f007 fb97 	bl	801e3a8 <__cxa_guard_release>
 8016c7a:	4a0f      	ldr	r2, [pc, #60]	; (8016cb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8016c7c:	490f      	ldr	r1, [pc, #60]	; (8016cbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8016c7e:	4810      	ldr	r0, [pc, #64]	; (8016cc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8016c80:	f007 fb7c 	bl	801e37c <__aeabi_atexit>
 8016c84:	4c0f      	ldr	r4, [pc, #60]	; (8016cc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8016c86:	7823      	ldrb	r3, [r4, #0]
 8016c88:	f3bf 8f5b 	dmb	ish
 8016c8c:	07db      	lsls	r3, r3, #31
 8016c8e:	d40b      	bmi.n	8016ca8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8016c90:	4620      	mov	r0, r4
 8016c92:	f007 fb7d 	bl	801e390 <__cxa_guard_acquire>
 8016c96:	b138      	cbz	r0, 8016ca8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f007 fb85 	bl	801e3a8 <__cxa_guard_release>
 8016c9e:	4a06      	ldr	r2, [pc, #24]	; (8016cb8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8016ca0:	4909      	ldr	r1, [pc, #36]	; (8016cc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8016ca2:	480a      	ldr	r0, [pc, #40]	; (8016ccc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8016ca4:	f007 fb6a 	bl	801e37c <__aeabi_atexit>
 8016ca8:	4b05      	ldr	r3, [pc, #20]	; (8016cc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8016caa:	60ab      	str	r3, [r5, #8]
 8016cac:	4b07      	ldr	r3, [pc, #28]	; (8016ccc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8016cae:	60eb      	str	r3, [r5, #12]
 8016cb0:	bd38      	pop	{r3, r4, r5, pc}
 8016cb2:	bf00      	nop
 8016cb4:	2002ef3c 	.word	0x2002ef3c
 8016cb8:	20000000 	.word	0x20000000
 8016cbc:	080152a7 	.word	0x080152a7
 8016cc0:	200000b0 	.word	0x200000b0
 8016cc4:	2002ef40 	.word	0x2002ef40
 8016cc8:	080152a5 	.word	0x080152a5
 8016ccc:	200000b4 	.word	0x200000b4

08016cd0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8016cd0:	b510      	push	{r4, lr}
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	f7ff ff88 	bl	8016be8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8016cd8:	4620      	mov	r0, r4
 8016cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cde:	f7ff bfbd 	b.w	8016c5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08016ce4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016ce4:	b538      	push	{r3, r4, r5, lr}
 8016ce6:	4c15      	ldr	r4, [pc, #84]	; (8016d3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016ce8:	7823      	ldrb	r3, [r4, #0]
 8016cea:	f3bf 8f5b 	dmb	ish
 8016cee:	07da      	lsls	r2, r3, #31
 8016cf0:	4605      	mov	r5, r0
 8016cf2:	d40b      	bmi.n	8016d0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	f007 fb4b 	bl	801e390 <__cxa_guard_acquire>
 8016cfa:	b138      	cbz	r0, 8016d0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f007 fb53 	bl	801e3a8 <__cxa_guard_release>
 8016d02:	4a0f      	ldr	r2, [pc, #60]	; (8016d40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016d04:	490f      	ldr	r1, [pc, #60]	; (8016d44 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016d06:	4810      	ldr	r0, [pc, #64]	; (8016d48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016d08:	f007 fb38 	bl	801e37c <__aeabi_atexit>
 8016d0c:	4c0f      	ldr	r4, [pc, #60]	; (8016d4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016d0e:	7823      	ldrb	r3, [r4, #0]
 8016d10:	f3bf 8f5b 	dmb	ish
 8016d14:	07db      	lsls	r3, r3, #31
 8016d16:	d40b      	bmi.n	8016d30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016d18:	4620      	mov	r0, r4
 8016d1a:	f007 fb39 	bl	801e390 <__cxa_guard_acquire>
 8016d1e:	b138      	cbz	r0, 8016d30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016d20:	4620      	mov	r0, r4
 8016d22:	f007 fb41 	bl	801e3a8 <__cxa_guard_release>
 8016d26:	4a06      	ldr	r2, [pc, #24]	; (8016d40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016d28:	4909      	ldr	r1, [pc, #36]	; (8016d50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016d2a:	480a      	ldr	r0, [pc, #40]	; (8016d54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016d2c:	f007 fb26 	bl	801e37c <__aeabi_atexit>
 8016d30:	4b05      	ldr	r3, [pc, #20]	; (8016d48 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016d32:	622b      	str	r3, [r5, #32]
 8016d34:	4b07      	ldr	r3, [pc, #28]	; (8016d54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016d36:	626b      	str	r3, [r5, #36]	; 0x24
 8016d38:	bd38      	pop	{r3, r4, r5, pc}
 8016d3a:	bf00      	nop
 8016d3c:	2002ef6c 	.word	0x2002ef6c
 8016d40:	20000000 	.word	0x20000000
 8016d44:	0801529b 	.word	0x0801529b
 8016d48:	200000e0 	.word	0x200000e0
 8016d4c:	2002ef70 	.word	0x2002ef70
 8016d50:	08015299 	.word	0x08015299
 8016d54:	200000e4 	.word	0x200000e4

08016d58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016d58:	b538      	push	{r3, r4, r5, lr}
 8016d5a:	4c15      	ldr	r4, [pc, #84]	; (8016db0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016d5c:	7823      	ldrb	r3, [r4, #0]
 8016d5e:	f3bf 8f5b 	dmb	ish
 8016d62:	07da      	lsls	r2, r3, #31
 8016d64:	4605      	mov	r5, r0
 8016d66:	d40b      	bmi.n	8016d80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f007 fb11 	bl	801e390 <__cxa_guard_acquire>
 8016d6e:	b138      	cbz	r0, 8016d80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016d70:	4620      	mov	r0, r4
 8016d72:	f007 fb19 	bl	801e3a8 <__cxa_guard_release>
 8016d76:	4a0f      	ldr	r2, [pc, #60]	; (8016db4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016d78:	490f      	ldr	r1, [pc, #60]	; (8016db8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016d7a:	4810      	ldr	r0, [pc, #64]	; (8016dbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016d7c:	f007 fafe 	bl	801e37c <__aeabi_atexit>
 8016d80:	4c0f      	ldr	r4, [pc, #60]	; (8016dc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8016d82:	7823      	ldrb	r3, [r4, #0]
 8016d84:	f3bf 8f5b 	dmb	ish
 8016d88:	07db      	lsls	r3, r3, #31
 8016d8a:	d40b      	bmi.n	8016da4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f007 faff 	bl	801e390 <__cxa_guard_acquire>
 8016d92:	b138      	cbz	r0, 8016da4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016d94:	4620      	mov	r0, r4
 8016d96:	f007 fb07 	bl	801e3a8 <__cxa_guard_release>
 8016d9a:	4a06      	ldr	r2, [pc, #24]	; (8016db4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016d9c:	4909      	ldr	r1, [pc, #36]	; (8016dc4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8016d9e:	480a      	ldr	r0, [pc, #40]	; (8016dc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016da0:	f007 faec 	bl	801e37c <__aeabi_atexit>
 8016da4:	4b05      	ldr	r3, [pc, #20]	; (8016dbc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016da6:	61ab      	str	r3, [r5, #24]
 8016da8:	4b07      	ldr	r3, [pc, #28]	; (8016dc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016daa:	61eb      	str	r3, [r5, #28]
 8016dac:	bd38      	pop	{r3, r4, r5, pc}
 8016dae:	bf00      	nop
 8016db0:	2002ef44 	.word	0x2002ef44
 8016db4:	20000000 	.word	0x20000000
 8016db8:	0801529f 	.word	0x0801529f
 8016dbc:	200000b8 	.word	0x200000b8
 8016dc0:	2002ef48 	.word	0x2002ef48
 8016dc4:	0801529d 	.word	0x0801529d
 8016dc8:	200000bc 	.word	0x200000bc

08016dcc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8016dcc:	b510      	push	{r4, lr}
 8016dce:	4604      	mov	r4, r0
 8016dd0:	f7ff ff88 	bl	8016ce4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dda:	f7ff bfbd 	b.w	8016d58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016de0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016de0:	b538      	push	{r3, r4, r5, lr}
 8016de2:	4c15      	ldr	r4, [pc, #84]	; (8016e38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016de4:	7823      	ldrb	r3, [r4, #0]
 8016de6:	f3bf 8f5b 	dmb	ish
 8016dea:	07da      	lsls	r2, r3, #31
 8016dec:	4605      	mov	r5, r0
 8016dee:	d40b      	bmi.n	8016e08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016df0:	4620      	mov	r0, r4
 8016df2:	f007 facd 	bl	801e390 <__cxa_guard_acquire>
 8016df6:	b138      	cbz	r0, 8016e08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016df8:	4620      	mov	r0, r4
 8016dfa:	f007 fad5 	bl	801e3a8 <__cxa_guard_release>
 8016dfe:	4a0f      	ldr	r2, [pc, #60]	; (8016e3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016e00:	490f      	ldr	r1, [pc, #60]	; (8016e40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016e02:	4810      	ldr	r0, [pc, #64]	; (8016e44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016e04:	f007 faba 	bl	801e37c <__aeabi_atexit>
 8016e08:	4c0f      	ldr	r4, [pc, #60]	; (8016e48 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016e0a:	7823      	ldrb	r3, [r4, #0]
 8016e0c:	f3bf 8f5b 	dmb	ish
 8016e10:	07db      	lsls	r3, r3, #31
 8016e12:	d40b      	bmi.n	8016e2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016e14:	4620      	mov	r0, r4
 8016e16:	f007 fabb 	bl	801e390 <__cxa_guard_acquire>
 8016e1a:	b138      	cbz	r0, 8016e2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	f007 fac3 	bl	801e3a8 <__cxa_guard_release>
 8016e22:	4a06      	ldr	r2, [pc, #24]	; (8016e3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016e24:	4909      	ldr	r1, [pc, #36]	; (8016e4c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8016e26:	480a      	ldr	r0, [pc, #40]	; (8016e50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016e28:	f007 faa8 	bl	801e37c <__aeabi_atexit>
 8016e2c:	4b05      	ldr	r3, [pc, #20]	; (8016e44 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016e2e:	632b      	str	r3, [r5, #48]	; 0x30
 8016e30:	4b07      	ldr	r3, [pc, #28]	; (8016e50 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016e32:	636b      	str	r3, [r5, #52]	; 0x34
 8016e34:	bd38      	pop	{r3, r4, r5, pc}
 8016e36:	bf00      	nop
 8016e38:	2002ef7c 	.word	0x2002ef7c
 8016e3c:	20000000 	.word	0x20000000
 8016e40:	08015293 	.word	0x08015293
 8016e44:	200000f0 	.word	0x200000f0
 8016e48:	2002ef80 	.word	0x2002ef80
 8016e4c:	08015291 	.word	0x08015291
 8016e50:	200000f4 	.word	0x200000f4

08016e54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8016e54:	b538      	push	{r3, r4, r5, lr}
 8016e56:	4c15      	ldr	r4, [pc, #84]	; (8016eac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016e58:	7823      	ldrb	r3, [r4, #0]
 8016e5a:	f3bf 8f5b 	dmb	ish
 8016e5e:	07da      	lsls	r2, r3, #31
 8016e60:	4605      	mov	r5, r0
 8016e62:	d40b      	bmi.n	8016e7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016e64:	4620      	mov	r0, r4
 8016e66:	f007 fa93 	bl	801e390 <__cxa_guard_acquire>
 8016e6a:	b138      	cbz	r0, 8016e7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016e6c:	4620      	mov	r0, r4
 8016e6e:	f007 fa9b 	bl	801e3a8 <__cxa_guard_release>
 8016e72:	4a0f      	ldr	r2, [pc, #60]	; (8016eb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016e74:	490f      	ldr	r1, [pc, #60]	; (8016eb4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016e76:	4810      	ldr	r0, [pc, #64]	; (8016eb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016e78:	f007 fa80 	bl	801e37c <__aeabi_atexit>
 8016e7c:	4c0f      	ldr	r4, [pc, #60]	; (8016ebc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016e7e:	7823      	ldrb	r3, [r4, #0]
 8016e80:	f3bf 8f5b 	dmb	ish
 8016e84:	07db      	lsls	r3, r3, #31
 8016e86:	d40b      	bmi.n	8016ea0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f007 fa81 	bl	801e390 <__cxa_guard_acquire>
 8016e8e:	b138      	cbz	r0, 8016ea0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016e90:	4620      	mov	r0, r4
 8016e92:	f007 fa89 	bl	801e3a8 <__cxa_guard_release>
 8016e96:	4a06      	ldr	r2, [pc, #24]	; (8016eb0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016e98:	4909      	ldr	r1, [pc, #36]	; (8016ec0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8016e9a:	480a      	ldr	r0, [pc, #40]	; (8016ec4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016e9c:	f007 fa6e 	bl	801e37c <__aeabi_atexit>
 8016ea0:	4b05      	ldr	r3, [pc, #20]	; (8016eb8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016ea2:	62ab      	str	r3, [r5, #40]	; 0x28
 8016ea4:	4b07      	ldr	r3, [pc, #28]	; (8016ec4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016ea6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8016ea8:	bd38      	pop	{r3, r4, r5, pc}
 8016eaa:	bf00      	nop
 8016eac:	2002ef4c 	.word	0x2002ef4c
 8016eb0:	20000000 	.word	0x20000000
 8016eb4:	08015297 	.word	0x08015297
 8016eb8:	200000c0 	.word	0x200000c0
 8016ebc:	2002ef50 	.word	0x2002ef50
 8016ec0:	08015295 	.word	0x08015295
 8016ec4:	200000c4 	.word	0x200000c4

08016ec8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016ec8:	b510      	push	{r4, lr}
 8016eca:	4604      	mov	r4, r0
 8016ecc:	f7ff ff88 	bl	8016de0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ed6:	f7ff bfbd 	b.w	8016e54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08016edc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8016edc:	b538      	push	{r3, r4, r5, lr}
 8016ede:	4c15      	ldr	r4, [pc, #84]	; (8016f34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8016ee0:	7823      	ldrb	r3, [r4, #0]
 8016ee2:	f3bf 8f5b 	dmb	ish
 8016ee6:	07da      	lsls	r2, r3, #31
 8016ee8:	4605      	mov	r5, r0
 8016eea:	d40b      	bmi.n	8016f04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8016eec:	4620      	mov	r0, r4
 8016eee:	f007 fa4f 	bl	801e390 <__cxa_guard_acquire>
 8016ef2:	b138      	cbz	r0, 8016f04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f007 fa57 	bl	801e3a8 <__cxa_guard_release>
 8016efa:	4a0f      	ldr	r2, [pc, #60]	; (8016f38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8016efc:	490f      	ldr	r1, [pc, #60]	; (8016f3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8016efe:	4810      	ldr	r0, [pc, #64]	; (8016f40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8016f00:	f007 fa3c 	bl	801e37c <__aeabi_atexit>
 8016f04:	4c0f      	ldr	r4, [pc, #60]	; (8016f44 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8016f06:	7823      	ldrb	r3, [r4, #0]
 8016f08:	f3bf 8f5b 	dmb	ish
 8016f0c:	07db      	lsls	r3, r3, #31
 8016f0e:	d40b      	bmi.n	8016f28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8016f10:	4620      	mov	r0, r4
 8016f12:	f007 fa3d 	bl	801e390 <__cxa_guard_acquire>
 8016f16:	b138      	cbz	r0, 8016f28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f007 fa45 	bl	801e3a8 <__cxa_guard_release>
 8016f1e:	4a06      	ldr	r2, [pc, #24]	; (8016f38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8016f20:	4909      	ldr	r1, [pc, #36]	; (8016f48 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8016f22:	480a      	ldr	r0, [pc, #40]	; (8016f4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8016f24:	f007 fa2a 	bl	801e37c <__aeabi_atexit>
 8016f28:	4b05      	ldr	r3, [pc, #20]	; (8016f40 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8016f2a:	652b      	str	r3, [r5, #80]	; 0x50
 8016f2c:	4b07      	ldr	r3, [pc, #28]	; (8016f4c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8016f2e:	656b      	str	r3, [r5, #84]	; 0x54
 8016f30:	bd38      	pop	{r3, r4, r5, pc}
 8016f32:	bf00      	nop
 8016f34:	2002ef84 	.word	0x2002ef84
 8016f38:	20000000 	.word	0x20000000
 8016f3c:	08015283 	.word	0x08015283
 8016f40:	200000f8 	.word	0x200000f8
 8016f44:	2002ef88 	.word	0x2002ef88
 8016f48:	08015281 	.word	0x08015281
 8016f4c:	200000fc 	.word	0x200000fc

08016f50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8016f50:	b538      	push	{r3, r4, r5, lr}
 8016f52:	4c15      	ldr	r4, [pc, #84]	; (8016fa8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8016f54:	7823      	ldrb	r3, [r4, #0]
 8016f56:	f3bf 8f5b 	dmb	ish
 8016f5a:	07da      	lsls	r2, r3, #31
 8016f5c:	4605      	mov	r5, r0
 8016f5e:	d40b      	bmi.n	8016f78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8016f60:	4620      	mov	r0, r4
 8016f62:	f007 fa15 	bl	801e390 <__cxa_guard_acquire>
 8016f66:	b138      	cbz	r0, 8016f78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f007 fa1d 	bl	801e3a8 <__cxa_guard_release>
 8016f6e:	4a0f      	ldr	r2, [pc, #60]	; (8016fac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8016f70:	490f      	ldr	r1, [pc, #60]	; (8016fb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8016f72:	4810      	ldr	r0, [pc, #64]	; (8016fb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8016f74:	f007 fa02 	bl	801e37c <__aeabi_atexit>
 8016f78:	4c0f      	ldr	r4, [pc, #60]	; (8016fb8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8016f7a:	7823      	ldrb	r3, [r4, #0]
 8016f7c:	f3bf 8f5b 	dmb	ish
 8016f80:	07db      	lsls	r3, r3, #31
 8016f82:	d40b      	bmi.n	8016f9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8016f84:	4620      	mov	r0, r4
 8016f86:	f007 fa03 	bl	801e390 <__cxa_guard_acquire>
 8016f8a:	b138      	cbz	r0, 8016f9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f007 fa0b 	bl	801e3a8 <__cxa_guard_release>
 8016f92:	4a06      	ldr	r2, [pc, #24]	; (8016fac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8016f94:	4909      	ldr	r1, [pc, #36]	; (8016fbc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8016f96:	480a      	ldr	r0, [pc, #40]	; (8016fc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8016f98:	f007 f9f0 	bl	801e37c <__aeabi_atexit>
 8016f9c:	4b05      	ldr	r3, [pc, #20]	; (8016fb4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8016f9e:	64ab      	str	r3, [r5, #72]	; 0x48
 8016fa0:	4b07      	ldr	r3, [pc, #28]	; (8016fc0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8016fa2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016fa4:	bd38      	pop	{r3, r4, r5, pc}
 8016fa6:	bf00      	nop
 8016fa8:	2002ef8c 	.word	0x2002ef8c
 8016fac:	20000000 	.word	0x20000000
 8016fb0:	08015287 	.word	0x08015287
 8016fb4:	20000100 	.word	0x20000100
 8016fb8:	2002ef90 	.word	0x2002ef90
 8016fbc:	08015285 	.word	0x08015285
 8016fc0:	20000104 	.word	0x20000104

08016fc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8016fc4:	b538      	push	{r3, r4, r5, lr}
 8016fc6:	4c15      	ldr	r4, [pc, #84]	; (801701c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8016fc8:	7823      	ldrb	r3, [r4, #0]
 8016fca:	f3bf 8f5b 	dmb	ish
 8016fce:	07da      	lsls	r2, r3, #31
 8016fd0:	4605      	mov	r5, r0
 8016fd2:	d40b      	bmi.n	8016fec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f007 f9db 	bl	801e390 <__cxa_guard_acquire>
 8016fda:	b138      	cbz	r0, 8016fec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8016fdc:	4620      	mov	r0, r4
 8016fde:	f007 f9e3 	bl	801e3a8 <__cxa_guard_release>
 8016fe2:	4a0f      	ldr	r2, [pc, #60]	; (8017020 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8016fe4:	490f      	ldr	r1, [pc, #60]	; (8017024 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8016fe6:	4810      	ldr	r0, [pc, #64]	; (8017028 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8016fe8:	f007 f9c8 	bl	801e37c <__aeabi_atexit>
 8016fec:	4c0f      	ldr	r4, [pc, #60]	; (801702c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8016fee:	7823      	ldrb	r3, [r4, #0]
 8016ff0:	f3bf 8f5b 	dmb	ish
 8016ff4:	07db      	lsls	r3, r3, #31
 8016ff6:	d40b      	bmi.n	8017010 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f007 f9c9 	bl	801e390 <__cxa_guard_acquire>
 8016ffe:	b138      	cbz	r0, 8017010 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8017000:	4620      	mov	r0, r4
 8017002:	f007 f9d1 	bl	801e3a8 <__cxa_guard_release>
 8017006:	4a06      	ldr	r2, [pc, #24]	; (8017020 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8017008:	4909      	ldr	r1, [pc, #36]	; (8017030 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801700a:	480a      	ldr	r0, [pc, #40]	; (8017034 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801700c:	f007 f9b6 	bl	801e37c <__aeabi_atexit>
 8017010:	4b05      	ldr	r3, [pc, #20]	; (8017028 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8017012:	642b      	str	r3, [r5, #64]	; 0x40
 8017014:	4b07      	ldr	r3, [pc, #28]	; (8017034 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8017016:	646b      	str	r3, [r5, #68]	; 0x44
 8017018:	bd38      	pop	{r3, r4, r5, pc}
 801701a:	bf00      	nop
 801701c:	2002ef54 	.word	0x2002ef54
 8017020:	20000000 	.word	0x20000000
 8017024:	0801528b 	.word	0x0801528b
 8017028:	200000c8 	.word	0x200000c8
 801702c:	2002ef58 	.word	0x2002ef58
 8017030:	08015289 	.word	0x08015289
 8017034:	200000cc 	.word	0x200000cc

08017038 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8017038:	b538      	push	{r3, r4, r5, lr}
 801703a:	4c15      	ldr	r4, [pc, #84]	; (8017090 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801703c:	7823      	ldrb	r3, [r4, #0]
 801703e:	f3bf 8f5b 	dmb	ish
 8017042:	07da      	lsls	r2, r3, #31
 8017044:	4605      	mov	r5, r0
 8017046:	d40b      	bmi.n	8017060 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8017048:	4620      	mov	r0, r4
 801704a:	f007 f9a1 	bl	801e390 <__cxa_guard_acquire>
 801704e:	b138      	cbz	r0, 8017060 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8017050:	4620      	mov	r0, r4
 8017052:	f007 f9a9 	bl	801e3a8 <__cxa_guard_release>
 8017056:	4a0f      	ldr	r2, [pc, #60]	; (8017094 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8017058:	490f      	ldr	r1, [pc, #60]	; (8017098 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801705a:	4810      	ldr	r0, [pc, #64]	; (801709c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801705c:	f007 f98e 	bl	801e37c <__aeabi_atexit>
 8017060:	4c0f      	ldr	r4, [pc, #60]	; (80170a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8017062:	7823      	ldrb	r3, [r4, #0]
 8017064:	f3bf 8f5b 	dmb	ish
 8017068:	07db      	lsls	r3, r3, #31
 801706a:	d40b      	bmi.n	8017084 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801706c:	4620      	mov	r0, r4
 801706e:	f007 f98f 	bl	801e390 <__cxa_guard_acquire>
 8017072:	b138      	cbz	r0, 8017084 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8017074:	4620      	mov	r0, r4
 8017076:	f007 f997 	bl	801e3a8 <__cxa_guard_release>
 801707a:	4a06      	ldr	r2, [pc, #24]	; (8017094 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801707c:	4909      	ldr	r1, [pc, #36]	; (80170a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801707e:	480a      	ldr	r0, [pc, #40]	; (80170a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8017080:	f007 f97c 	bl	801e37c <__aeabi_atexit>
 8017084:	4b05      	ldr	r3, [pc, #20]	; (801709c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8017086:	63ab      	str	r3, [r5, #56]	; 0x38
 8017088:	4b07      	ldr	r3, [pc, #28]	; (80170a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801708a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801708c:	bd38      	pop	{r3, r4, r5, pc}
 801708e:	bf00      	nop
 8017090:	2002ef74 	.word	0x2002ef74
 8017094:	20000000 	.word	0x20000000
 8017098:	0801528f 	.word	0x0801528f
 801709c:	200000e8 	.word	0x200000e8
 80170a0:	2002ef78 	.word	0x2002ef78
 80170a4:	0801528d 	.word	0x0801528d
 80170a8:	200000ec 	.word	0x200000ec

080170ac <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80170ac:	b510      	push	{r4, lr}
 80170ae:	4604      	mov	r4, r0
 80170b0:	f7ff ff14 	bl	8016edc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80170b4:	4620      	mov	r0, r4
 80170b6:	f7ff ff85 	bl	8016fc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80170ba:	4620      	mov	r0, r4
 80170bc:	f7ff ff48 	bl	8016f50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80170c0:	4620      	mov	r0, r4
 80170c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170c6:	f7ff bfb7 	b.w	8017038 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080170cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	4c15      	ldr	r4, [pc, #84]	; (8017124 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80170d0:	7823      	ldrb	r3, [r4, #0]
 80170d2:	f3bf 8f5b 	dmb	ish
 80170d6:	07da      	lsls	r2, r3, #31
 80170d8:	4605      	mov	r5, r0
 80170da:	d40b      	bmi.n	80170f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80170dc:	4620      	mov	r0, r4
 80170de:	f007 f957 	bl	801e390 <__cxa_guard_acquire>
 80170e2:	b138      	cbz	r0, 80170f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80170e4:	4620      	mov	r0, r4
 80170e6:	f007 f95f 	bl	801e3a8 <__cxa_guard_release>
 80170ea:	4a0f      	ldr	r2, [pc, #60]	; (8017128 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80170ec:	490f      	ldr	r1, [pc, #60]	; (801712c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80170ee:	4810      	ldr	r0, [pc, #64]	; (8017130 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80170f0:	f007 f944 	bl	801e37c <__aeabi_atexit>
 80170f4:	4c0f      	ldr	r4, [pc, #60]	; (8017134 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80170f6:	7823      	ldrb	r3, [r4, #0]
 80170f8:	f3bf 8f5b 	dmb	ish
 80170fc:	07db      	lsls	r3, r3, #31
 80170fe:	d40b      	bmi.n	8017118 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8017100:	4620      	mov	r0, r4
 8017102:	f007 f945 	bl	801e390 <__cxa_guard_acquire>
 8017106:	b138      	cbz	r0, 8017118 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8017108:	4620      	mov	r0, r4
 801710a:	f007 f94d 	bl	801e3a8 <__cxa_guard_release>
 801710e:	4a06      	ldr	r2, [pc, #24]	; (8017128 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8017110:	4909      	ldr	r1, [pc, #36]	; (8017138 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8017112:	480a      	ldr	r0, [pc, #40]	; (801713c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8017114:	f007 f932 	bl	801e37c <__aeabi_atexit>
 8017118:	4b05      	ldr	r3, [pc, #20]	; (8017130 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801711a:	662b      	str	r3, [r5, #96]	; 0x60
 801711c:	4b07      	ldr	r3, [pc, #28]	; (801713c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801711e:	666b      	str	r3, [r5, #100]	; 0x64
 8017120:	bd38      	pop	{r3, r4, r5, pc}
 8017122:	bf00      	nop
 8017124:	2002ef5c 	.word	0x2002ef5c
 8017128:	20000000 	.word	0x20000000
 801712c:	0801527b 	.word	0x0801527b
 8017130:	200000d0 	.word	0x200000d0
 8017134:	2002ef60 	.word	0x2002ef60
 8017138:	08015279 	.word	0x08015279
 801713c:	200000d4 	.word	0x200000d4

08017140 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8017140:	b538      	push	{r3, r4, r5, lr}
 8017142:	4c15      	ldr	r4, [pc, #84]	; (8017198 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8017144:	7823      	ldrb	r3, [r4, #0]
 8017146:	f3bf 8f5b 	dmb	ish
 801714a:	07da      	lsls	r2, r3, #31
 801714c:	4605      	mov	r5, r0
 801714e:	d40b      	bmi.n	8017168 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017150:	4620      	mov	r0, r4
 8017152:	f007 f91d 	bl	801e390 <__cxa_guard_acquire>
 8017156:	b138      	cbz	r0, 8017168 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8017158:	4620      	mov	r0, r4
 801715a:	f007 f925 	bl	801e3a8 <__cxa_guard_release>
 801715e:	4a0f      	ldr	r2, [pc, #60]	; (801719c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017160:	490f      	ldr	r1, [pc, #60]	; (80171a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8017162:	4810      	ldr	r0, [pc, #64]	; (80171a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8017164:	f007 f90a 	bl	801e37c <__aeabi_atexit>
 8017168:	4c0f      	ldr	r4, [pc, #60]	; (80171a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801716a:	7823      	ldrb	r3, [r4, #0]
 801716c:	f3bf 8f5b 	dmb	ish
 8017170:	07db      	lsls	r3, r3, #31
 8017172:	d40b      	bmi.n	801718c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8017174:	4620      	mov	r0, r4
 8017176:	f007 f90b 	bl	801e390 <__cxa_guard_acquire>
 801717a:	b138      	cbz	r0, 801718c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801717c:	4620      	mov	r0, r4
 801717e:	f007 f913 	bl	801e3a8 <__cxa_guard_release>
 8017182:	4a06      	ldr	r2, [pc, #24]	; (801719c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8017184:	4909      	ldr	r1, [pc, #36]	; (80171ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8017186:	480a      	ldr	r0, [pc, #40]	; (80171b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017188:	f007 f8f8 	bl	801e37c <__aeabi_atexit>
 801718c:	4b05      	ldr	r3, [pc, #20]	; (80171a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801718e:	65ab      	str	r3, [r5, #88]	; 0x58
 8017190:	4b07      	ldr	r3, [pc, #28]	; (80171b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8017192:	65eb      	str	r3, [r5, #92]	; 0x5c
 8017194:	bd38      	pop	{r3, r4, r5, pc}
 8017196:	bf00      	nop
 8017198:	2002ef34 	.word	0x2002ef34
 801719c:	20000000 	.word	0x20000000
 80171a0:	0801527f 	.word	0x0801527f
 80171a4:	200000a8 	.word	0x200000a8
 80171a8:	2002ef38 	.word	0x2002ef38
 80171ac:	0801527d 	.word	0x0801527d
 80171b0:	200000ac 	.word	0x200000ac

080171b4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80171b4:	b510      	push	{r4, lr}
 80171b6:	4604      	mov	r4, r0
 80171b8:	f7ff ff88 	bl	80170cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80171bc:	4620      	mov	r0, r4
 80171be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171c2:	f7ff bfbd 	b.w	8017140 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080171c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80171c8:	b538      	push	{r3, r4, r5, lr}
 80171ca:	4c15      	ldr	r4, [pc, #84]	; (8017220 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80171cc:	7823      	ldrb	r3, [r4, #0]
 80171ce:	f3bf 8f5b 	dmb	ish
 80171d2:	07da      	lsls	r2, r3, #31
 80171d4:	4605      	mov	r5, r0
 80171d6:	d40b      	bmi.n	80171f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80171d8:	4620      	mov	r0, r4
 80171da:	f007 f8d9 	bl	801e390 <__cxa_guard_acquire>
 80171de:	b138      	cbz	r0, 80171f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80171e0:	4620      	mov	r0, r4
 80171e2:	f007 f8e1 	bl	801e3a8 <__cxa_guard_release>
 80171e6:	4a0f      	ldr	r2, [pc, #60]	; (8017224 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80171e8:	490f      	ldr	r1, [pc, #60]	; (8017228 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80171ea:	4810      	ldr	r0, [pc, #64]	; (801722c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80171ec:	f007 f8c6 	bl	801e37c <__aeabi_atexit>
 80171f0:	4c0f      	ldr	r4, [pc, #60]	; (8017230 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80171f2:	7823      	ldrb	r3, [r4, #0]
 80171f4:	f3bf 8f5b 	dmb	ish
 80171f8:	07db      	lsls	r3, r3, #31
 80171fa:	d40b      	bmi.n	8017214 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80171fc:	4620      	mov	r0, r4
 80171fe:	f007 f8c7 	bl	801e390 <__cxa_guard_acquire>
 8017202:	b138      	cbz	r0, 8017214 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8017204:	4620      	mov	r0, r4
 8017206:	f007 f8cf 	bl	801e3a8 <__cxa_guard_release>
 801720a:	4a06      	ldr	r2, [pc, #24]	; (8017224 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801720c:	4909      	ldr	r1, [pc, #36]	; (8017234 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801720e:	480a      	ldr	r0, [pc, #40]	; (8017238 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8017210:	f007 f8b4 	bl	801e37c <__aeabi_atexit>
 8017214:	4b05      	ldr	r3, [pc, #20]	; (801722c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8017216:	672b      	str	r3, [r5, #112]	; 0x70
 8017218:	4b07      	ldr	r3, [pc, #28]	; (8017238 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801721a:	676b      	str	r3, [r5, #116]	; 0x74
 801721c:	bd38      	pop	{r3, r4, r5, pc}
 801721e:	bf00      	nop
 8017220:	2002ef2c 	.word	0x2002ef2c
 8017224:	20000000 	.word	0x20000000
 8017228:	08015273 	.word	0x08015273
 801722c:	200000a0 	.word	0x200000a0
 8017230:	2002ef30 	.word	0x2002ef30
 8017234:	08015271 	.word	0x08015271
 8017238:	200000a4 	.word	0x200000a4

0801723c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801723c:	b538      	push	{r3, r4, r5, lr}
 801723e:	4c15      	ldr	r4, [pc, #84]	; (8017294 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8017240:	7823      	ldrb	r3, [r4, #0]
 8017242:	f3bf 8f5b 	dmb	ish
 8017246:	07da      	lsls	r2, r3, #31
 8017248:	4605      	mov	r5, r0
 801724a:	d40b      	bmi.n	8017264 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801724c:	4620      	mov	r0, r4
 801724e:	f007 f89f 	bl	801e390 <__cxa_guard_acquire>
 8017252:	b138      	cbz	r0, 8017264 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8017254:	4620      	mov	r0, r4
 8017256:	f007 f8a7 	bl	801e3a8 <__cxa_guard_release>
 801725a:	4a0f      	ldr	r2, [pc, #60]	; (8017298 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801725c:	490f      	ldr	r1, [pc, #60]	; (801729c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801725e:	4810      	ldr	r0, [pc, #64]	; (80172a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8017260:	f007 f88c 	bl	801e37c <__aeabi_atexit>
 8017264:	4c0f      	ldr	r4, [pc, #60]	; (80172a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8017266:	7823      	ldrb	r3, [r4, #0]
 8017268:	f3bf 8f5b 	dmb	ish
 801726c:	07db      	lsls	r3, r3, #31
 801726e:	d40b      	bmi.n	8017288 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017270:	4620      	mov	r0, r4
 8017272:	f007 f88d 	bl	801e390 <__cxa_guard_acquire>
 8017276:	b138      	cbz	r0, 8017288 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8017278:	4620      	mov	r0, r4
 801727a:	f007 f895 	bl	801e3a8 <__cxa_guard_release>
 801727e:	4a06      	ldr	r2, [pc, #24]	; (8017298 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8017280:	4909      	ldr	r1, [pc, #36]	; (80172a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8017282:	480a      	ldr	r0, [pc, #40]	; (80172ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8017284:	f007 f87a 	bl	801e37c <__aeabi_atexit>
 8017288:	4b05      	ldr	r3, [pc, #20]	; (80172a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801728a:	66ab      	str	r3, [r5, #104]	; 0x68
 801728c:	4b07      	ldr	r3, [pc, #28]	; (80172ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801728e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8017290:	bd38      	pop	{r3, r4, r5, pc}
 8017292:	bf00      	nop
 8017294:	2002ef24 	.word	0x2002ef24
 8017298:	20000000 	.word	0x20000000
 801729c:	08015277 	.word	0x08015277
 80172a0:	20000098 	.word	0x20000098
 80172a4:	2002ef28 	.word	0x2002ef28
 80172a8:	08015275 	.word	0x08015275
 80172ac:	2000009c 	.word	0x2000009c

080172b0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80172b0:	b510      	push	{r4, lr}
 80172b2:	4604      	mov	r4, r0
 80172b4:	f7ff ff88 	bl	80171c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80172b8:	4620      	mov	r0, r4
 80172ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172be:	f7ff bfbd 	b.w	801723c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080172c2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80172c2:	b510      	push	{r4, lr}
 80172c4:	4604      	mov	r4, r0
 80172c6:	f7ff fff3 	bl	80172b0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80172ca:	4620      	mov	r0, r4
 80172cc:	f7ff ff72 	bl	80171b4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80172d0:	4620      	mov	r0, r4
 80172d2:	f7ff fdf9 	bl	8016ec8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80172d6:	4620      	mov	r0, r4
 80172d8:	f7ff fcfa 	bl	8016cd0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80172dc:	4620      	mov	r0, r4
 80172de:	f7ff fd75 	bl	8016dcc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80172e2:	4620      	mov	r0, r4
 80172e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172e8:	f7ff bee0 	b.w	80170ac <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080172ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80172ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 80172f4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80172f8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80172fc:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8017300:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8017304:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8017308:	8808      	ldrh	r0, [r1, #0]
 801730a:	fb0e 4708 	mla	r7, lr, r8, r4
 801730e:	f1be 0f00 	cmp.w	lr, #0
 8017312:	eb02 0a07 	add.w	sl, r2, r7
 8017316:	db37      	blt.n	8017388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8017318:	45f3      	cmp	fp, lr
 801731a:	dd35      	ble.n	8017388 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 801731c:	2c00      	cmp	r4, #0
 801731e:	db31      	blt.n	8017384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8017320:	45a0      	cmp	r8, r4
 8017322:	dd2f      	ble.n	8017384 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8017324:	5dd2      	ldrb	r2, [r2, r7]
 8017326:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 801732a:	1c62      	adds	r2, r4, #1
 801732c:	d42f      	bmi.n	801738e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 801732e:	4590      	cmp	r8, r2
 8017330:	dd2d      	ble.n	801738e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8017332:	b366      	cbz	r6, 801738e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8017334:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8017338:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801733c:	f11e 0e01 	adds.w	lr, lr, #1
 8017340:	d429      	bmi.n	8017396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8017342:	45f3      	cmp	fp, lr
 8017344:	dd27      	ble.n	8017396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8017346:	f1bc 0f00 	cmp.w	ip, #0
 801734a:	f000 80a0 	beq.w	801748e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 801734e:	2c00      	cmp	r4, #0
 8017350:	db1f      	blt.n	8017392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8017352:	45a0      	cmp	r8, r4
 8017354:	dd1d      	ble.n	8017392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8017356:	f81a 2008 	ldrb.w	r2, [sl, r8]
 801735a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 801735e:	3401      	adds	r4, #1
 8017360:	d41c      	bmi.n	801739c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8017362:	45a0      	cmp	r8, r4
 8017364:	dd1a      	ble.n	801739c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8017366:	b1de      	cbz	r6, 80173a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8017368:	44d0      	add	r8, sl
 801736a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801736e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017372:	2e0f      	cmp	r6, #15
 8017374:	d915      	bls.n	80173a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8017376:	4b49      	ldr	r3, [pc, #292]	; (801749c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8017378:	4a49      	ldr	r2, [pc, #292]	; (80174a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801737a:	484a      	ldr	r0, [pc, #296]	; (80174a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801737c:	f240 3155 	movw	r1, #853	; 0x355
 8017380:	f007 f830 	bl	801e3e4 <__assert_func>
 8017384:	4681      	mov	r9, r0
 8017386:	e7d0      	b.n	801732a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8017388:	4607      	mov	r7, r0
 801738a:	4681      	mov	r9, r0
 801738c:	e7d6      	b.n	801733c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801738e:	4607      	mov	r7, r0
 8017390:	e7d4      	b.n	801733c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8017392:	4686      	mov	lr, r0
 8017394:	e7e3      	b.n	801735e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8017396:	4603      	mov	r3, r0
 8017398:	4686      	mov	lr, r0
 801739a:	e7ea      	b.n	8017372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801739c:	4603      	mov	r3, r0
 801739e:	e7e8      	b.n	8017372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80173a0:	4603      	mov	r3, r0
 80173a2:	f1bc 0f0f 	cmp.w	ip, #15
 80173a6:	d8e6      	bhi.n	8017376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80173a8:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80173ac:	fb16 f80c 	smulbb	r8, r6, ip
 80173b0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80173b4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80173b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80173bc:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80173c0:	ea44 0909 	orr.w	r9, r4, r9
 80173c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80173c8:	f1cc 0410 	rsb	r4, ip, #16
 80173cc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80173d0:	1ba4      	subs	r4, r4, r6
 80173d2:	041a      	lsls	r2, r3, #16
 80173d4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80173d8:	ea4a 0707 	orr.w	r7, sl, r7
 80173dc:	4377      	muls	r7, r6
 80173de:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80173e2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80173e6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80173ea:	fb04 7409 	mla	r4, r4, r9, r7
 80173ee:	4313      	orrs	r3, r2
 80173f0:	ea4f 420e 	mov.w	r2, lr, lsl #16
 80173f4:	fb08 4303 	mla	r3, r8, r3, r4
 80173f8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80173fc:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8017400:	4322      	orrs	r2, r4
 8017402:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8017406:	fb0c 3202 	mla	r2, ip, r2, r3
 801740a:	0d53      	lsrs	r3, r2, #21
 801740c:	0952      	lsrs	r2, r2, #5
 801740e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017412:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017416:	431a      	orrs	r2, r3
 8017418:	b293      	uxth	r3, r2
 801741a:	b2af      	uxth	r7, r5
 801741c:	1202      	asrs	r2, r0, #8
 801741e:	43ed      	mvns	r5, r5
 8017420:	b2ed      	uxtb	r5, r5
 8017422:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8017426:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801742a:	fb12 f205 	smulbb	r2, r2, r5
 801742e:	10c6      	asrs	r6, r0, #3
 8017430:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017434:	fb0c 2c07 	mla	ip, ip, r7, r2
 8017438:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801743c:	10da      	asrs	r2, r3, #3
 801743e:	fb16 f605 	smulbb	r6, r6, r5
 8017442:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017446:	fb02 6207 	mla	r2, r2, r7, r6
 801744a:	b296      	uxth	r6, r2
 801744c:	00c2      	lsls	r2, r0, #3
 801744e:	00dc      	lsls	r4, r3, #3
 8017450:	b2d2      	uxtb	r2, r2
 8017452:	b2e4      	uxtb	r4, r4
 8017454:	fb12 f205 	smulbb	r2, r2, r5
 8017458:	fb04 2207 	mla	r2, r4, r7, r2
 801745c:	fa1f fc8c 	uxth.w	ip, ip
 8017460:	b292      	uxth	r2, r2
 8017462:	f10c 0301 	add.w	r3, ip, #1
 8017466:	1c50      	adds	r0, r2, #1
 8017468:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801746c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017470:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017474:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8017478:	4313      	orrs	r3, r2
 801747a:	1c72      	adds	r2, r6, #1
 801747c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8017480:	0952      	lsrs	r2, r2, #5
 8017482:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017486:	4313      	orrs	r3, r2
 8017488:	800b      	strh	r3, [r1, #0]
 801748a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801748e:	2e0f      	cmp	r6, #15
 8017490:	f63f af71 	bhi.w	8017376 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8017494:	4603      	mov	r3, r0
 8017496:	4686      	mov	lr, r0
 8017498:	e786      	b.n	80173a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801749a:	bf00      	nop
 801749c:	08022217 	.word	0x08022217
 80174a0:	0802281e 	.word	0x0802281e
 80174a4:	0802229f 	.word	0x0802229f

080174a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80174a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ac:	ed2d 8b08 	vpush	{d8-d11}
 80174b0:	b09b      	sub	sp, #108	; 0x6c
 80174b2:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 80174b6:	9309      	str	r3, [sp, #36]	; 0x24
 80174b8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80174bc:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80174be:	930a      	str	r3, [sp, #40]	; 0x28
 80174c0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80174c4:	930e      	str	r3, [sp, #56]	; 0x38
 80174c6:	910d      	str	r1, [sp, #52]	; 0x34
 80174c8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80174cc:	9018      	str	r0, [sp, #96]	; 0x60
 80174ce:	6870      	ldr	r0, [r6, #4]
 80174d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80174d2:	fb00 1303 	mla	r3, r0, r3, r1
 80174d6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80174d8:	6831      	ldr	r1, [r6, #0]
 80174da:	6856      	ldr	r6, [r2, #4]
 80174dc:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 80174e0:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 80174e4:	6813      	ldr	r3, [r2, #0]
 80174e6:	930c      	str	r3, [sp, #48]	; 0x30
 80174e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174ea:	43db      	mvns	r3, r3
 80174ec:	b2db      	uxtb	r3, r3
 80174ee:	eeb0 aa40 	vmov.f32	s20, s0
 80174f2:	eef0 9a60 	vmov.f32	s19, s1
 80174f6:	eeb0 9a41 	vmov.f32	s18, s2
 80174fa:	eeb0 8a62 	vmov.f32	s16, s5
 80174fe:	eef0 8a43 	vmov.f32	s17, s6
 8017502:	eef0 ba44 	vmov.f32	s23, s8
 8017506:	eeb0 ba64 	vmov.f32	s22, s9
 801750a:	eef0 aa45 	vmov.f32	s21, s10
 801750e:	3604      	adds	r6, #4
 8017510:	930b      	str	r3, [sp, #44]	; 0x2c
 8017512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017514:	2b00      	cmp	r3, #0
 8017516:	dc03      	bgt.n	8017520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8017518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801751a:	2b00      	cmp	r3, #0
 801751c:	f340 8215 	ble.w	801794a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8017520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017522:	2b00      	cmp	r3, #0
 8017524:	f340 8102 	ble.w	801772c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8017528:	ea5f 4229 	movs.w	r2, r9, asr #16
 801752c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8017530:	d42c      	bmi.n	801758c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8017532:	1c51      	adds	r1, r2, #1
 8017534:	428c      	cmp	r4, r1
 8017536:	dd2c      	ble.n	8017592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8017538:	2b00      	cmp	r3, #0
 801753a:	db2a      	blt.n	8017592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801753c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801753e:	1c59      	adds	r1, r3, #1
 8017540:	4288      	cmp	r0, r1
 8017542:	dd26      	ble.n	8017592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8017544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017546:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017548:	3b01      	subs	r3, #1
 801754a:	fb02 9203 	mla	r2, r2, r3, r9
 801754e:	1412      	asrs	r2, r2, #16
 8017550:	d429      	bmi.n	80175a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017552:	3201      	adds	r2, #1
 8017554:	4294      	cmp	r4, r2
 8017556:	dd26      	ble.n	80175a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017558:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801755a:	fb02 8303 	mla	r3, r2, r3, r8
 801755e:	141b      	asrs	r3, r3, #16
 8017560:	d421      	bmi.n	80175a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017564:	3301      	adds	r3, #1
 8017566:	429a      	cmp	r2, r3
 8017568:	dd1d      	ble.n	80175a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801756a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801756e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8017572:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8017576:	9312      	str	r3, [sp, #72]	; 0x48
 8017578:	f1be 0f00 	cmp.w	lr, #0
 801757c:	f300 8138 	bgt.w	80177f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 8017580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017582:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8017586:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801758a:	e0d1      	b.n	8017730 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 801758c:	1c51      	adds	r1, r2, #1
 801758e:	f040 80c3 	bne.w	8017718 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8017592:	42a2      	cmp	r2, r4
 8017594:	f280 80c0 	bge.w	8017718 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8017598:	1c5f      	adds	r7, r3, #1
 801759a:	f2c0 80bd 	blt.w	8017718 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801759e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175a0:	4293      	cmp	r3, r2
 80175a2:	f280 80b9 	bge.w	8017718 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80175a6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80175aa:	4657      	mov	r7, sl
 80175ac:	f1bb 0f00 	cmp.w	fp, #0
 80175b0:	dde6      	ble.n	8017580 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80175b2:	ea5f 4229 	movs.w	r2, r9, asr #16
 80175b6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80175ba:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80175be:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80175c2:	f100 80fc 	bmi.w	80177be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 80175c6:	f102 0c01 	add.w	ip, r2, #1
 80175ca:	4564      	cmp	r4, ip
 80175cc:	f340 80f9 	ble.w	80177c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	f2c0 80f6 	blt.w	80177c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80175d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80175d8:	f103 0c01 	add.w	ip, r3, #1
 80175dc:	4565      	cmp	r5, ip
 80175de:	f340 80f0 	ble.w	80177c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80175e2:	fb03 2304 	mla	r3, r3, r4, r2
 80175e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80175e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80175ea:	441a      	add	r2, r3
 80175ec:	5ceb      	ldrb	r3, [r5, r3]
 80175ee:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 80175f2:	2800      	cmp	r0, #0
 80175f4:	f000 80db 	beq.w	80177ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 80175f8:	7853      	ldrb	r3, [r2, #1]
 80175fa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80175fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8017600:	b141      	cbz	r1, 8017614 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8017602:	1913      	adds	r3, r2, r4
 8017604:	5d12      	ldrb	r2, [r2, r4]
 8017606:	785b      	ldrb	r3, [r3, #1]
 8017608:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801760c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8017610:	9210      	str	r2, [sp, #64]	; 0x40
 8017612:	9314      	str	r3, [sp, #80]	; 0x50
 8017614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017616:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017618:	fb10 f201 	smulbb	r2, r0, r1
 801761c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8017620:	10d2      	asrs	r2, r2, #3
 8017622:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017626:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801762a:	ea4c 0c03 	orr.w	ip, ip, r3
 801762e:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8017632:	930f      	str	r3, [sp, #60]	; 0x3c
 8017634:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017636:	041b      	lsls	r3, r3, #16
 8017638:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801763c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8017640:	432b      	orrs	r3, r5
 8017642:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017644:	4353      	muls	r3, r2
 8017646:	fb05 330c 	mla	r3, r5, ip, r3
 801764a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801764e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017652:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8017656:	ea4c 0e0e 	orr.w	lr, ip, lr
 801765a:	f1c1 0c10 	rsb	ip, r1, #16
 801765e:	ebac 0c00 	sub.w	ip, ip, r0
 8017662:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8017666:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801766a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801766c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801766e:	0418      	lsls	r0, r3, #16
 8017670:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8017674:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017678:	4318      	orrs	r0, r3
 801767a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801767e:	fb02 c200 	mla	r2, r2, r0, ip
 8017682:	0d53      	lsrs	r3, r2, #21
 8017684:	0952      	lsrs	r2, r2, #5
 8017686:	f8b7 c000 	ldrh.w	ip, [r7]
 801768a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801768e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017692:	431a      	orrs	r2, r3
 8017694:	b292      	uxth	r2, r2
 8017696:	ea4f 212c 	mov.w	r1, ip, asr #8
 801769a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801769e:	1210      	asrs	r0, r2, #8
 80176a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80176a4:	fb11 f105 	smulbb	r1, r1, r5
 80176a8:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80176ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80176b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80176b4:	fb00 1003 	mla	r0, r0, r3, r1
 80176b8:	fa5f fc8c 	uxtb.w	ip, ip
 80176bc:	10d1      	asrs	r1, r2, #3
 80176be:	00d2      	lsls	r2, r2, #3
 80176c0:	fb1c fc05 	smulbb	ip, ip, r5
 80176c4:	b2d2      	uxtb	r2, r2
 80176c6:	fb02 c203 	mla	r2, r2, r3, ip
 80176ca:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80176ce:	b280      	uxth	r0, r0
 80176d0:	b292      	uxth	r2, r2
 80176d2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80176d6:	fb1e fe05 	smulbb	lr, lr, r5
 80176da:	fb01 e103 	mla	r1, r1, r3, lr
 80176de:	f102 0c01 	add.w	ip, r2, #1
 80176e2:	1c43      	adds	r3, r0, #1
 80176e4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80176e8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80176ec:	b289      	uxth	r1, r1
 80176ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80176f2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80176f6:	4313      	orrs	r3, r2
 80176f8:	1c4a      	adds	r2, r1, #1
 80176fa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80176fe:	0949      	lsrs	r1, r1, #5
 8017700:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017704:	430b      	orrs	r3, r1
 8017706:	803b      	strh	r3, [r7, #0]
 8017708:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801770a:	4499      	add	r9, r3
 801770c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801770e:	3702      	adds	r7, #2
 8017710:	4498      	add	r8, r3
 8017712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017716:	e749      	b.n	80175ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8017718:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801771a:	4499      	add	r9, r3
 801771c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801771e:	4498      	add	r8, r3
 8017720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017722:	3b01      	subs	r3, #1
 8017724:	9309      	str	r3, [sp, #36]	; 0x24
 8017726:	f10a 0a02 	add.w	sl, sl, #2
 801772a:	e6f9      	b.n	8017520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801772c:	f47f af0a 	bne.w	8017544 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8017730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017732:	2b00      	cmp	r3, #0
 8017734:	f340 8109 	ble.w	801794a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8017738:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801773c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017740:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017744:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017746:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801774a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801774e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017752:	eef0 6a48 	vmov.f32	s13, s16
 8017756:	ee69 7a27 	vmul.f32	s15, s18, s15
 801775a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801775e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017762:	ee16 9a90 	vmov	r9, s13
 8017766:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801776a:	eef0 6a68 	vmov.f32	s13, s17
 801776e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017772:	ee18 2a10 	vmov	r2, s16
 8017776:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801777a:	fb92 f3f3 	sdiv	r3, r2, r3
 801777e:	ee18 2a90 	vmov	r2, s17
 8017782:	932f      	str	r3, [sp, #188]	; 0xbc
 8017784:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017786:	fb92 f3f3 	sdiv	r3, r2, r3
 801778a:	9330      	str	r3, [sp, #192]	; 0xc0
 801778c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801778e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017790:	3b01      	subs	r3, #1
 8017792:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017796:	930d      	str	r3, [sp, #52]	; 0x34
 8017798:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801779a:	bf08      	it	eq
 801779c:	4613      	moveq	r3, r2
 801779e:	ee16 8a90 	vmov	r8, s13
 80177a2:	9309      	str	r3, [sp, #36]	; 0x24
 80177a4:	eef0 8a67 	vmov.f32	s17, s15
 80177a8:	eeb0 8a47 	vmov.f32	s16, s14
 80177ac:	e6b1      	b.n	8017512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80177ae:	2900      	cmp	r1, #0
 80177b0:	f43f af30 	beq.w	8017614 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80177b4:	5d13      	ldrb	r3, [r2, r4]
 80177b6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80177ba:	9310      	str	r3, [sp, #64]	; 0x40
 80177bc:	e72a      	b.n	8017614 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80177be:	1c55      	adds	r5, r2, #1
 80177c0:	d1a2      	bne.n	8017708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80177c2:	4294      	cmp	r4, r2
 80177c4:	dda0      	ble.n	8017708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80177c6:	1c5d      	adds	r5, r3, #1
 80177c8:	db9e      	blt.n	8017708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80177ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80177cc:	429d      	cmp	r5, r3
 80177ce:	dd9b      	ble.n	8017708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80177d0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80177d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80177d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177d8:	9202      	str	r2, [sp, #8]
 80177da:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80177de:	e9cd 4300 	strd	r4, r3, [sp]
 80177e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80177e4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80177e6:	4633      	mov	r3, r6
 80177e8:	4639      	mov	r1, r7
 80177ea:	f7ff fd7f 	bl	80172ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80177ee:	e78b      	b.n	8017708 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80177f0:	ea4f 4329 	mov.w	r3, r9, asr #16
 80177f4:	ea4f 4228 	mov.w	r2, r8, asr #16
 80177f8:	fb04 3202 	mla	r2, r4, r2, r3
 80177fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80177fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017800:	4413      	add	r3, r2
 8017802:	5c8a      	ldrb	r2, [r1, r2]
 8017804:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 8017808:	f3c8 3003 	ubfx	r0, r8, #12, #4
 801780c:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 8017810:	f1bc 0f00 	cmp.w	ip, #0
 8017814:	f000 8091 	beq.w	801793a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 8017818:	785a      	ldrb	r2, [r3, #1]
 801781a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801781e:	9215      	str	r2, [sp, #84]	; 0x54
 8017820:	b140      	cbz	r0, 8017834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8017822:	191a      	adds	r2, r3, r4
 8017824:	5d1b      	ldrb	r3, [r3, r4]
 8017826:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801782a:	9311      	str	r3, [sp, #68]	; 0x44
 801782c:	7853      	ldrb	r3, [r2, #1]
 801782e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8017832:	9316      	str	r3, [sp, #88]	; 0x58
 8017834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017836:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017838:	fb1c f200 	smulbb	r2, ip, r0
 801783c:	041f      	lsls	r7, r3, #16
 801783e:	10d2      	asrs	r2, r2, #3
 8017840:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017844:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8017848:	431f      	orrs	r7, r3
 801784a:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801784e:	9319      	str	r3, [sp, #100]	; 0x64
 8017850:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017852:	041b      	lsls	r3, r3, #16
 8017854:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8017858:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801785c:	ea43 030b 	orr.w	r3, r3, fp
 8017860:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8017862:	4353      	muls	r3, r2
 8017864:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8017868:	fb05 3707 	mla	r7, r5, r7, r3
 801786c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8017870:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8017874:	ea43 0b01 	orr.w	fp, r3, r1
 8017878:	f1c0 0110 	rsb	r1, r0, #16
 801787c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801787e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017880:	eba1 0c0c 	sub.w	ip, r1, ip
 8017884:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8017888:	fb0c 770b 	mla	r7, ip, fp, r7
 801788c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8017890:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8017894:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017898:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801789c:	ea4c 0c0b 	orr.w	ip, ip, fp
 80178a0:	fb02 770c 	mla	r7, r2, ip, r7
 80178a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178a6:	0d79      	lsrs	r1, r7, #21
 80178a8:	8812      	ldrh	r2, [r2, #0]
 80178aa:	097f      	lsrs	r7, r7, #5
 80178ac:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80178b0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80178b4:	430f      	orrs	r7, r1
 80178b6:	1211      	asrs	r1, r2, #8
 80178b8:	b2bb      	uxth	r3, r7
 80178ba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80178be:	fb11 f105 	smulbb	r1, r1, r5
 80178c2:	1218      	asrs	r0, r3, #8
 80178c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80178c6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80178ca:	fb00 1005 	mla	r0, r0, r5, r1
 80178ce:	10d7      	asrs	r7, r2, #3
 80178d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80178d2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80178d6:	fb17 f705 	smulbb	r7, r7, r5
 80178da:	10d9      	asrs	r1, r3, #3
 80178dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80178de:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80178e2:	fb01 7105 	mla	r1, r1, r5, r7
 80178e6:	00d2      	lsls	r2, r2, #3
 80178e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80178ea:	b2d2      	uxtb	r2, r2
 80178ec:	fb12 f205 	smulbb	r2, r2, r5
 80178f0:	00db      	lsls	r3, r3, #3
 80178f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80178f4:	b2db      	uxtb	r3, r3
 80178f6:	b280      	uxth	r0, r0
 80178f8:	fb03 2305 	mla	r3, r3, r5, r2
 80178fc:	b29b      	uxth	r3, r3
 80178fe:	b289      	uxth	r1, r1
 8017900:	1c42      	adds	r2, r0, #1
 8017902:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8017906:	1c4f      	adds	r7, r1, #1
 8017908:	1c5a      	adds	r2, r3, #1
 801790a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801790e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8017912:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8017916:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801791a:	0949      	lsrs	r1, r1, #5
 801791c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801791e:	4310      	orrs	r0, r2
 8017920:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017924:	4308      	orrs	r0, r1
 8017926:	f823 0b02 	strh.w	r0, [r3], #2
 801792a:	930f      	str	r3, [sp, #60]	; 0x3c
 801792c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801792e:	4499      	add	r9, r3
 8017930:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017932:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017936:	4498      	add	r8, r3
 8017938:	e61e      	b.n	8017578 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801793a:	2800      	cmp	r0, #0
 801793c:	f43f af7a 	beq.w	8017834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8017940:	5d1b      	ldrb	r3, [r3, r4]
 8017942:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8017946:	9311      	str	r3, [sp, #68]	; 0x44
 8017948:	e774      	b.n	8017834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801794a:	b01b      	add	sp, #108	; 0x6c
 801794c:	ecbd 8b08 	vpop	{d8-d11}
 8017950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017954 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8017954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017958:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 801795c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8017960:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8017964:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8017968:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801796c:	8808      	ldrh	r0, [r1, #0]
 801796e:	fb06 570e 	mla	r7, r6, lr, r5
 8017972:	2e00      	cmp	r6, #0
 8017974:	eb02 0807 	add.w	r8, r2, r7
 8017978:	db38      	blt.n	80179ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801797a:	45b1      	cmp	r9, r6
 801797c:	dd36      	ble.n	80179ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801797e:	2d00      	cmp	r5, #0
 8017980:	db32      	blt.n	80179e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8017982:	45ae      	cmp	lr, r5
 8017984:	dd30      	ble.n	80179e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8017986:	5dd2      	ldrb	r2, [r2, r7]
 8017988:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801798c:	1c6a      	adds	r2, r5, #1
 801798e:	d430      	bmi.n	80179f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8017990:	4596      	cmp	lr, r2
 8017992:	dd2e      	ble.n	80179f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8017994:	b36c      	cbz	r4, 80179f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8017996:	f898 2001 	ldrb.w	r2, [r8, #1]
 801799a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801799e:	3601      	adds	r6, #1
 80179a0:	d42b      	bmi.n	80179fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80179a2:	45b1      	cmp	r9, r6
 80179a4:	dd29      	ble.n	80179fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80179a6:	f1bc 0f00 	cmp.w	ip, #0
 80179aa:	d028      	beq.n	80179fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80179ac:	2d00      	cmp	r5, #0
 80179ae:	db22      	blt.n	80179f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80179b0:	45ae      	cmp	lr, r5
 80179b2:	dd20      	ble.n	80179f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80179b4:	f818 600e 	ldrb.w	r6, [r8, lr]
 80179b8:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80179bc:	3501      	adds	r5, #1
 80179be:	d407      	bmi.n	80179d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80179c0:	45ae      	cmp	lr, r5
 80179c2:	dd05      	ble.n	80179d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80179c4:	b134      	cbz	r4, 80179d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80179c6:	44c6      	add	lr, r8
 80179c8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80179cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80179d0:	2c0f      	cmp	r4, #15
 80179d2:	d802      	bhi.n	80179da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80179d4:	f1bc 0f0f 	cmp.w	ip, #15
 80179d8:	d914      	bls.n	8017a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80179da:	4b26      	ldr	r3, [pc, #152]	; (8017a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80179dc:	4a26      	ldr	r2, [pc, #152]	; (8017a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80179de:	4827      	ldr	r0, [pc, #156]	; (8017a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80179e0:	f240 3155 	movw	r1, #853	; 0x355
 80179e4:	f006 fcfe 	bl	801e3e4 <__assert_func>
 80179e8:	4607      	mov	r7, r0
 80179ea:	e7cf      	b.n	801798c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80179ec:	4602      	mov	r2, r0
 80179ee:	4607      	mov	r7, r0
 80179f0:	e7d5      	b.n	801799e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80179f2:	4602      	mov	r2, r0
 80179f4:	e7d3      	b.n	801799e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80179f6:	4606      	mov	r6, r0
 80179f8:	e7e0      	b.n	80179bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80179fa:	4606      	mov	r6, r0
 80179fc:	e7e8      	b.n	80179d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80179fe:	2c0f      	cmp	r4, #15
 8017a00:	d8eb      	bhi.n	80179da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8017a02:	4606      	mov	r6, r0
 8017a04:	043d      	lsls	r5, r7, #16
 8017a06:	fb14 f30c 	smulbb	r3, r4, ip
 8017a0a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8017a0e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8017a12:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8017a16:	10db      	asrs	r3, r3, #3
 8017a18:	432f      	orrs	r7, r5
 8017a1a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8017a1e:	f1cc 0510 	rsb	r5, ip, #16
 8017a22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017a26:	1b2d      	subs	r5, r5, r4
 8017a28:	ea4e 0202 	orr.w	r2, lr, r2
 8017a2c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8017a30:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8017a34:	4354      	muls	r4, r2
 8017a36:	fb05 4507 	mla	r5, r5, r7, r4
 8017a3a:	0404      	lsls	r4, r0, #16
 8017a3c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8017a40:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8017a44:	4320      	orrs	r0, r4
 8017a46:	fb03 5400 	mla	r4, r3, r0, r5
 8017a4a:	0430      	lsls	r0, r6, #16
 8017a4c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8017a50:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8017a54:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8017a58:	4330      	orrs	r0, r6
 8017a5a:	fb03 4000 	mla	r0, r3, r0, r4
 8017a5e:	0d43      	lsrs	r3, r0, #21
 8017a60:	0940      	lsrs	r0, r0, #5
 8017a62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017a66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8017a6a:	4318      	orrs	r0, r3
 8017a6c:	8008      	strh	r0, [r1, #0]
 8017a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a72:	bf00      	nop
 8017a74:	08022217 	.word	0x08022217
 8017a78:	0802281e 	.word	0x0802281e
 8017a7c:	0802229f 	.word	0x0802229f

08017a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a84:	ed2d 8b0a 	vpush	{d8-d12}
 8017a88:	b095      	sub	sp, #84	; 0x54
 8017a8a:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 8017a8e:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8017a90:	9306      	str	r3, [sp, #24]
 8017a92:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8017a96:	9109      	str	r1, [sp, #36]	; 0x24
 8017a98:	9307      	str	r3, [sp, #28]
 8017a9a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8017a9e:	9012      	str	r0, [sp, #72]	; 0x48
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	9211      	str	r2, [sp, #68]	; 0x44
 8017aa4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8017aa6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8017aaa:	fb00 1303 	mla	r3, r0, r3, r1
 8017aae:	6839      	ldr	r1, [r7, #0]
 8017ab0:	6857      	ldr	r7, [r2, #4]
 8017ab2:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8017ab6:	6813      	ldr	r3, [r2, #0]
 8017ab8:	9308      	str	r3, [sp, #32]
 8017aba:	eeb0 aa40 	vmov.f32	s20, s0
 8017abe:	eef0 9a60 	vmov.f32	s19, s1
 8017ac2:	eeb0 9a41 	vmov.f32	s18, s2
 8017ac6:	eeb0 8a62 	vmov.f32	s16, s5
 8017aca:	eef0 8a43 	vmov.f32	s17, s6
 8017ace:	eeb0 ca44 	vmov.f32	s24, s8
 8017ad2:	eef0 ba64 	vmov.f32	s23, s9
 8017ad6:	eeb0 ba45 	vmov.f32	s22, s10
 8017ada:	3704      	adds	r7, #4
 8017adc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	dc03      	bgt.n	8017aee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8017ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	f340 819a 	ble.w	8017e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8017aee:	9b06      	ldr	r3, [sp, #24]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f340 80c4 	ble.w	8017c7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017af6:	ea5f 4229 	movs.w	r2, r9, asr #16
 8017afa:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017afe:	d429      	bmi.n	8017b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8017b00:	1c51      	adds	r1, r2, #1
 8017b02:	428c      	cmp	r4, r1
 8017b04:	dd29      	ble.n	8017b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	db27      	blt.n	8017b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8017b0a:	9807      	ldr	r0, [sp, #28]
 8017b0c:	1c59      	adds	r1, r3, #1
 8017b0e:	4288      	cmp	r0, r1
 8017b10:	dd23      	ble.n	8017b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8017b12:	9b06      	ldr	r3, [sp, #24]
 8017b14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017b16:	3b01      	subs	r3, #1
 8017b18:	fb02 9203 	mla	r2, r2, r3, r9
 8017b1c:	1412      	asrs	r2, r2, #16
 8017b1e:	d425      	bmi.n	8017b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8017b20:	3201      	adds	r2, #1
 8017b22:	4294      	cmp	r4, r2
 8017b24:	dd22      	ble.n	8017b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8017b26:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017b28:	fb02 6303 	mla	r3, r2, r3, r6
 8017b2c:	141b      	asrs	r3, r3, #16
 8017b2e:	d41d      	bmi.n	8017b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8017b30:	9a07      	ldr	r2, [sp, #28]
 8017b32:	3301      	adds	r3, #1
 8017b34:	429a      	cmp	r2, r3
 8017b36:	dd19      	ble.n	8017b6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8017b38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017b3c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8017b40:	f1b8 0f00 	cmp.w	r8, #0
 8017b44:	f300 80f8 	bgt.w	8017d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8017b48:	9b06      	ldr	r3, [sp, #24]
 8017b4a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8017b4e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8017b52:	e096      	b.n	8017c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8017b54:	1c51      	adds	r1, r2, #1
 8017b56:	f040 8088 	bne.w	8017c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8017b5a:	42a2      	cmp	r2, r4
 8017b5c:	f280 8085 	bge.w	8017c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8017b60:	1c5a      	adds	r2, r3, #1
 8017b62:	f2c0 8082 	blt.w	8017c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8017b66:	9a07      	ldr	r2, [sp, #28]
 8017b68:	4293      	cmp	r3, r2
 8017b6a:	da7e      	bge.n	8017c6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8017b6c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017b70:	46d0      	mov	r8, sl
 8017b72:	f1bb 0f00 	cmp.w	fp, #0
 8017b76:	dde7      	ble.n	8017b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8017b78:	ea5f 4229 	movs.w	r2, r9, asr #16
 8017b7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017b80:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8017b84:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017b88:	f100 80c0 	bmi.w	8017d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 8017b8c:	f102 0c01 	add.w	ip, r2, #1
 8017b90:	4564      	cmp	r4, ip
 8017b92:	f340 80bd 	ble.w	8017d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	f2c0 80ba 	blt.w	8017d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8017b9c:	9d07      	ldr	r5, [sp, #28]
 8017b9e:	f103 0c01 	add.w	ip, r3, #1
 8017ba2:	4565      	cmp	r5, ip
 8017ba4:	f340 80b4 	ble.w	8017d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8017ba8:	fb03 2304 	mla	r3, r3, r4, r2
 8017bac:	9d08      	ldr	r5, [sp, #32]
 8017bae:	9a08      	ldr	r2, [sp, #32]
 8017bb0:	441a      	add	r2, r3
 8017bb2:	5ceb      	ldrb	r3, [r5, r3]
 8017bb4:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	f000 809f 	beq.w	8017cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 8017bbe:	7853      	ldrb	r3, [r2, #1]
 8017bc0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017bc4:	930d      	str	r3, [sp, #52]	; 0x34
 8017bc6:	b141      	cbz	r1, 8017bda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8017bc8:	1913      	adds	r3, r2, r4
 8017bca:	5d12      	ldrb	r2, [r2, r4]
 8017bcc:	785b      	ldrb	r3, [r3, #1]
 8017bce:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8017bd2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017bd6:	920a      	str	r2, [sp, #40]	; 0x28
 8017bd8:	930e      	str	r3, [sp, #56]	; 0x38
 8017bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bdc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017bde:	fb10 f201 	smulbb	r2, r0, r1
 8017be2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8017be6:	10d2      	asrs	r2, r2, #3
 8017be8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017bec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017bf0:	ea4c 0c03 	orr.w	ip, ip, r3
 8017bf4:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8017bf8:	930c      	str	r3, [sp, #48]	; 0x30
 8017bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bfc:	041b      	lsls	r3, r3, #16
 8017bfe:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8017c02:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8017c06:	432b      	orrs	r3, r5
 8017c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017c0a:	4353      	muls	r3, r2
 8017c0c:	fb05 330c 	mla	r3, r5, ip, r3
 8017c10:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8017c14:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017c18:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8017c1c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8017c20:	f1c1 0c10 	rsb	ip, r1, #16
 8017c24:	ebac 0c00 	sub.w	ip, ip, r0
 8017c28:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8017c2c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8017c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c32:	0418      	lsls	r0, r3, #16
 8017c34:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8017c38:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017c3c:	4318      	orrs	r0, r3
 8017c3e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8017c42:	fb02 c200 	mla	r2, r2, r0, ip
 8017c46:	0d53      	lsrs	r3, r2, #21
 8017c48:	0952      	lsrs	r2, r2, #5
 8017c4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017c4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8017c52:	431a      	orrs	r2, r3
 8017c54:	f8a8 2000 	strh.w	r2, [r8]
 8017c58:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017c5a:	4499      	add	r9, r3
 8017c5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017c5e:	f108 0802 	add.w	r8, r8, #2
 8017c62:	441e      	add	r6, r3
 8017c64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017c68:	e783      	b.n	8017b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8017c6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017c6c:	4499      	add	r9, r3
 8017c6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017c70:	441e      	add	r6, r3
 8017c72:	9b06      	ldr	r3, [sp, #24]
 8017c74:	3b01      	subs	r3, #1
 8017c76:	9306      	str	r3, [sp, #24]
 8017c78:	f10a 0a02 	add.w	sl, sl, #2
 8017c7c:	e737      	b.n	8017aee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8017c7e:	f47f af48 	bne.w	8017b12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8017c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	f340 80cc 	ble.w	8017e22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8017c8a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017c8e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017c92:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017c96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017c98:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017c9c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017ca0:	eef0 6a48 	vmov.f32	s13, s16
 8017ca4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017ca8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017cac:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017cb0:	ee16 9a90 	vmov	r9, s13
 8017cb4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017cb8:	eef0 6a68 	vmov.f32	s13, s17
 8017cbc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017cc0:	ee18 2a10 	vmov	r2, s16
 8017cc4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017cc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ccc:	ee18 2a90 	vmov	r2, s17
 8017cd0:	932b      	str	r3, [sp, #172]	; 0xac
 8017cd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8017cd8:	932c      	str	r3, [sp, #176]	; 0xb0
 8017cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017cde:	3b01      	subs	r3, #1
 8017ce0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ce6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017ce8:	bf08      	it	eq
 8017cea:	4613      	moveq	r3, r2
 8017cec:	ee16 6a90 	vmov	r6, s13
 8017cf0:	9306      	str	r3, [sp, #24]
 8017cf2:	eef0 8a67 	vmov.f32	s17, s15
 8017cf6:	eeb0 8a47 	vmov.f32	s16, s14
 8017cfa:	e6f1      	b.n	8017ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8017cfc:	2900      	cmp	r1, #0
 8017cfe:	f43f af6c 	beq.w	8017bda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8017d02:	5d13      	ldrb	r3, [r2, r4]
 8017d04:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017d08:	930a      	str	r3, [sp, #40]	; 0x28
 8017d0a:	e766      	b.n	8017bda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8017d0c:	1c55      	adds	r5, r2, #1
 8017d0e:	d1a3      	bne.n	8017c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8017d10:	4294      	cmp	r4, r2
 8017d12:	dda1      	ble.n	8017c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8017d14:	1c5d      	adds	r5, r3, #1
 8017d16:	db9f      	blt.n	8017c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8017d18:	9d07      	ldr	r5, [sp, #28]
 8017d1a:	429d      	cmp	r5, r3
 8017d1c:	dd9c      	ble.n	8017c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8017d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017d22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017d26:	e9cd 4500 	strd	r4, r5, [sp]
 8017d2a:	463b      	mov	r3, r7
 8017d2c:	9a08      	ldr	r2, [sp, #32]
 8017d2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017d30:	4641      	mov	r1, r8
 8017d32:	f7ff fe0f 	bl	8017954 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8017d36:	e78f      	b.n	8017c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8017d38:	ea4f 4329 	mov.w	r3, r9, asr #16
 8017d3c:	1432      	asrs	r2, r6, #16
 8017d3e:	fb04 3202 	mla	r2, r4, r2, r3
 8017d42:	9908      	ldr	r1, [sp, #32]
 8017d44:	9b08      	ldr	r3, [sp, #32]
 8017d46:	4413      	add	r3, r2
 8017d48:	5c8a      	ldrb	r2, [r1, r2]
 8017d4a:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8017d4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017d52:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8017d56:	f1be 0f00 	cmp.w	lr, #0
 8017d5a:	d05b      	beq.n	8017e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 8017d5c:	785a      	ldrb	r2, [r3, #1]
 8017d5e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8017d62:	920f      	str	r2, [sp, #60]	; 0x3c
 8017d64:	b140      	cbz	r0, 8017d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8017d66:	191a      	adds	r2, r3, r4
 8017d68:	5d1b      	ldrb	r3, [r3, r4]
 8017d6a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d70:	7853      	ldrb	r3, [r2, #1]
 8017d72:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017d76:	9310      	str	r3, [sp, #64]	; 0x40
 8017d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8017d7c:	fb1e f200 	smulbb	r2, lr, r0
 8017d80:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8017d84:	10d2      	asrs	r2, r2, #3
 8017d86:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8017d8a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8017d92:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8017d96:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d9a:	041b      	lsls	r3, r3, #16
 8017d9c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8017da0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8017da4:	ea43 030b 	orr.w	r3, r3, fp
 8017da8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017daa:	4353      	muls	r3, r2
 8017dac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8017db0:	fb05 3c0c 	mla	ip, r5, ip, r3
 8017db4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8017db8:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8017dbc:	ea43 0b01 	orr.w	fp, r3, r1
 8017dc0:	f1c0 0110 	rsb	r1, r0, #16
 8017dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dc6:	eba1 0e0e 	sub.w	lr, r1, lr
 8017dca:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8017dce:	fb0e cc0b 	mla	ip, lr, fp, ip
 8017dd2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8017dd6:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8017dda:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8017dde:	ea4b 0e0e 	orr.w	lr, fp, lr
 8017de2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8017de6:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017dea:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8017dee:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017df2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017df6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8017dfa:	ea43 0c0c 	orr.w	ip, r3, ip
 8017dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e00:	f823 cb02 	strh.w	ip, [r3], #2
 8017e04:	930c      	str	r3, [sp, #48]	; 0x30
 8017e06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017e08:	4499      	add	r9, r3
 8017e0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017e10:	441e      	add	r6, r3
 8017e12:	e695      	b.n	8017b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d0af      	beq.n	8017d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8017e18:	5d1b      	ldrb	r3, [r3, r4]
 8017e1a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e20:	e7aa      	b.n	8017d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8017e22:	b015      	add	sp, #84	; 0x54
 8017e24:	ecbd 8b0a 	vpop	{d8-d12}
 8017e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8017e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e30:	468b      	mov	fp, r1
 8017e32:	8809      	ldrh	r1, [r1, #0]
 8017e34:	b089      	sub	sp, #36	; 0x24
 8017e36:	10cd      	asrs	r5, r1, #3
 8017e38:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8017e3c:	ea4f 2921 	mov.w	r9, r1, asr #8
 8017e40:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8017e44:	00c9      	lsls	r1, r1, #3
 8017e46:	9500      	str	r5, [sp, #0]
 8017e48:	b2c9      	uxtb	r1, r1
 8017e4a:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8017e4e:	9101      	str	r1, [sp, #4]
 8017e50:	9900      	ldr	r1, [sp, #0]
 8017e52:	9202      	str	r2, [sp, #8]
 8017e54:	fb04 650e 	mla	r5, r4, lr, r6
 8017e58:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8017e5c:	eb02 0805 	add.w	r8, r2, r5
 8017e60:	0209      	lsls	r1, r1, #8
 8017e62:	9a01      	ldr	r2, [sp, #4]
 8017e64:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8017e68:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8017e6c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017e70:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8017e74:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8017e78:	4311      	orrs	r1, r2
 8017e7a:	2c00      	cmp	r4, #0
 8017e7c:	9107      	str	r1, [sp, #28]
 8017e7e:	db43      	blt.n	8017f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8017e80:	45a2      	cmp	sl, r4
 8017e82:	dd41      	ble.n	8017f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8017e84:	2e00      	cmp	r6, #0
 8017e86:	db3d      	blt.n	8017f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8017e88:	45b6      	cmp	lr, r6
 8017e8a:	dd3b      	ble.n	8017f04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8017e8c:	9a02      	ldr	r2, [sp, #8]
 8017e8e:	5d55      	ldrb	r5, [r2, r5]
 8017e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e94:	441d      	add	r5, r3
 8017e96:	1c72      	adds	r2, r6, #1
 8017e98:	d439      	bmi.n	8017f0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8017e9a:	4596      	cmp	lr, r2
 8017e9c:	dd37      	ble.n	8017f0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8017e9e:	2f00      	cmp	r7, #0
 8017ea0:	d035      	beq.n	8017f0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8017ea2:	f898 1001 	ldrb.w	r1, [r8, #1]
 8017ea6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017eaa:	4419      	add	r1, r3
 8017eac:	3401      	adds	r4, #1
 8017eae:	d432      	bmi.n	8017f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8017eb0:	45a2      	cmp	sl, r4
 8017eb2:	dd30      	ble.n	8017f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8017eb4:	b378      	cbz	r0, 8017f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8017eb6:	2e00      	cmp	r6, #0
 8017eb8:	db2b      	blt.n	8017f12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8017eba:	45b6      	cmp	lr, r6
 8017ebc:	dd29      	ble.n	8017f12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8017ebe:	f818 400e 	ldrb.w	r4, [r8, lr]
 8017ec2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017ec6:	441c      	add	r4, r3
 8017ec8:	3601      	adds	r6, #1
 8017eca:	d427      	bmi.n	8017f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8017ecc:	45b6      	cmp	lr, r6
 8017ece:	dd25      	ble.n	8017f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8017ed0:	b327      	cbz	r7, 8017f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8017ed2:	44c6      	add	lr, r8
 8017ed4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017edc:	4413      	add	r3, r2
 8017ede:	782a      	ldrb	r2, [r5, #0]
 8017ee0:	9202      	str	r2, [sp, #8]
 8017ee2:	780a      	ldrb	r2, [r1, #0]
 8017ee4:	9203      	str	r2, [sp, #12]
 8017ee6:	7822      	ldrb	r2, [r4, #0]
 8017ee8:	9204      	str	r2, [sp, #16]
 8017eea:	2f0f      	cmp	r7, #15
 8017eec:	781a      	ldrb	r2, [r3, #0]
 8017eee:	9205      	str	r2, [sp, #20]
 8017ef0:	d801      	bhi.n	8017ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8017ef2:	280f      	cmp	r0, #15
 8017ef4:	d914      	bls.n	8017f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8017ef6:	4b3f      	ldr	r3, [pc, #252]	; (8017ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8017ef8:	4a3f      	ldr	r2, [pc, #252]	; (8017ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8017efa:	4840      	ldr	r0, [pc, #256]	; (8017ffc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8017efc:	f240 3173 	movw	r1, #883	; 0x373
 8017f00:	f006 fa70 	bl	801e3e4 <__assert_func>
 8017f04:	ad07      	add	r5, sp, #28
 8017f06:	e7c6      	b.n	8017e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8017f08:	a907      	add	r1, sp, #28
 8017f0a:	460d      	mov	r5, r1
 8017f0c:	e7ce      	b.n	8017eac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8017f0e:	a907      	add	r1, sp, #28
 8017f10:	e7cc      	b.n	8017eac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8017f12:	ac07      	add	r4, sp, #28
 8017f14:	e7d8      	b.n	8017ec8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8017f16:	ab07      	add	r3, sp, #28
 8017f18:	461c      	mov	r4, r3
 8017f1a:	e7e0      	b.n	8017ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8017f1c:	ab07      	add	r3, sp, #28
 8017f1e:	e7de      	b.n	8017ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8017f20:	b2ba      	uxth	r2, r7
 8017f22:	b280      	uxth	r0, r0
 8017f24:	fb02 fa00 	mul.w	sl, r2, r0
 8017f28:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017f2c:	0112      	lsls	r2, r2, #4
 8017f2e:	b280      	uxth	r0, r0
 8017f30:	f891 8002 	ldrb.w	r8, [r1, #2]
 8017f34:	7849      	ldrb	r1, [r1, #1]
 8017f36:	78ae      	ldrb	r6, [r5, #2]
 8017f38:	786d      	ldrb	r5, [r5, #1]
 8017f3a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8017f3e:	eba2 020a 	sub.w	r2, r2, sl
 8017f42:	b292      	uxth	r2, r2
 8017f44:	ebae 0e00 	sub.w	lr, lr, r0
 8017f48:	fa1f fe8e 	uxth.w	lr, lr
 8017f4c:	4351      	muls	r1, r2
 8017f4e:	fb02 f808 	mul.w	r8, r2, r8
 8017f52:	fb0e 8806 	mla	r8, lr, r6, r8
 8017f56:	fb0e 1505 	mla	r5, lr, r5, r1
 8017f5a:	78a6      	ldrb	r6, [r4, #2]
 8017f5c:	7861      	ldrb	r1, [r4, #1]
 8017f5e:	fa1f f78c 	uxth.w	r7, ip
 8017f62:	fb00 8806 	mla	r8, r0, r6, r8
 8017f66:	fb00 5501 	mla	r5, r0, r1, r5
 8017f6a:	789e      	ldrb	r6, [r3, #2]
 8017f6c:	7859      	ldrb	r1, [r3, #1]
 8017f6e:	9b00      	ldr	r3, [sp, #0]
 8017f70:	ea6f 0c0c 	mvn.w	ip, ip
 8017f74:	fa5f fc8c 	uxtb.w	ip, ip
 8017f78:	fb0a 5101 	mla	r1, sl, r1, r5
 8017f7c:	fb13 f50c 	smulbb	r5, r3, ip
 8017f80:	9b03      	ldr	r3, [sp, #12]
 8017f82:	435a      	muls	r2, r3
 8017f84:	9b02      	ldr	r3, [sp, #8]
 8017f86:	fb0e 2203 	mla	r2, lr, r3, r2
 8017f8a:	9b04      	ldr	r3, [sp, #16]
 8017f8c:	fb00 2003 	mla	r0, r0, r3, r2
 8017f90:	9b05      	ldr	r3, [sp, #20]
 8017f92:	fb0a 8606 	mla	r6, sl, r6, r8
 8017f96:	fb0a 0a03 	mla	sl, sl, r3, r0
 8017f9a:	9b01      	ldr	r3, [sp, #4]
 8017f9c:	fb19 f90c 	smulbb	r9, r9, ip
 8017fa0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8017fa4:	fb13 fc0c 	smulbb	ip, r3, ip
 8017fa8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8017fac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017fb0:	fb06 9607 	mla	r6, r6, r7, r9
 8017fb4:	fb01 5107 	mla	r1, r1, r7, r5
 8017fb8:	fb0a c707 	mla	r7, sl, r7, ip
 8017fbc:	b2b6      	uxth	r6, r6
 8017fbe:	b289      	uxth	r1, r1
 8017fc0:	b2bf      	uxth	r7, r7
 8017fc2:	f106 0901 	add.w	r9, r6, #1
 8017fc6:	f107 0c01 	add.w	ip, r7, #1
 8017fca:	1c4d      	adds	r5, r1, #1
 8017fcc:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8017fd0:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8017fd4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8017fd8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017fdc:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8017fe0:	0949      	lsrs	r1, r1, #5
 8017fe2:	433e      	orrs	r6, r7
 8017fe4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017fe8:	430e      	orrs	r6, r1
 8017fea:	f8ab 6000 	strh.w	r6, [fp]
 8017fee:	b009      	add	sp, #36	; 0x24
 8017ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff4:	08022217 	.word	0x08022217
 8017ff8:	08022775 	.word	0x08022775
 8017ffc:	0802229f 	.word	0x0802229f

08018000 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018004:	ed2d 8b08 	vpush	{d8-d11}
 8018008:	b097      	sub	sp, #92	; 0x5c
 801800a:	eeb0 aa40 	vmov.f32	s20, s0
 801800e:	9309      	str	r3, [sp, #36]	; 0x24
 8018010:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8018014:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8018016:	930b      	str	r3, [sp, #44]	; 0x2c
 8018018:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801801c:	9310      	str	r3, [sp, #64]	; 0x40
 801801e:	910f      	str	r1, [sp, #60]	; 0x3c
 8018020:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018024:	9015      	str	r0, [sp, #84]	; 0x54
 8018026:	6860      	ldr	r0, [r4, #4]
 8018028:	9213      	str	r2, [sp, #76]	; 0x4c
 801802a:	fb00 1303 	mla	r3, r0, r3, r1
 801802e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018030:	6821      	ldr	r1, [r4, #0]
 8018032:	6854      	ldr	r4, [r2, #4]
 8018034:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 8018038:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801803c:	930a      	str	r3, [sp, #40]	; 0x28
 801803e:	6813      	ldr	r3, [r2, #0]
 8018040:	930e      	str	r3, [sp, #56]	; 0x38
 8018042:	1d23      	adds	r3, r4, #4
 8018044:	9308      	str	r3, [sp, #32]
 8018046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018048:	43db      	mvns	r3, r3
 801804a:	b2db      	uxtb	r3, r3
 801804c:	eef0 9a60 	vmov.f32	s19, s1
 8018050:	eeb0 9a41 	vmov.f32	s18, s2
 8018054:	eeb0 8a62 	vmov.f32	s16, s5
 8018058:	eef0 8a43 	vmov.f32	s17, s6
 801805c:	eef0 ba44 	vmov.f32	s23, s8
 8018060:	eeb0 ba64 	vmov.f32	s22, s9
 8018064:	eef0 aa45 	vmov.f32	s21, s10
 8018068:	930c      	str	r3, [sp, #48]	; 0x30
 801806a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801806c:	2b00      	cmp	r3, #0
 801806e:	dc03      	bgt.n	8018078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8018070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018072:	2b00      	cmp	r3, #0
 8018074:	f340 825c 	ble.w	8018530 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8018078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801807a:	2b00      	cmp	r3, #0
 801807c:	f340 8127 	ble.w	80182ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8018080:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018082:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018084:	1412      	asrs	r2, r2, #16
 8018086:	ea4f 4323 	mov.w	r3, r3, asr #16
 801808a:	d430      	bmi.n	80180ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801808c:	1c51      	adds	r1, r2, #1
 801808e:	428d      	cmp	r5, r1
 8018090:	dd30      	ble.n	80180f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8018092:	2b00      	cmp	r3, #0
 8018094:	db2e      	blt.n	80180f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8018096:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018098:	1c59      	adds	r1, r3, #1
 801809a:	4288      	cmp	r0, r1
 801809c:	dd2a      	ble.n	80180f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801809e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80180a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80180a4:	3b01      	subs	r3, #1
 80180a6:	fb02 1203 	mla	r2, r2, r3, r1
 80180aa:	1412      	asrs	r2, r2, #16
 80180ac:	d42c      	bmi.n	8018108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80180ae:	3201      	adds	r2, #1
 80180b0:	4295      	cmp	r5, r2
 80180b2:	dd29      	ble.n	8018108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80180b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80180b6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80180b8:	fb02 1303 	mla	r3, r2, r3, r1
 80180bc:	141b      	asrs	r3, r3, #16
 80180be:	d423      	bmi.n	8018108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80180c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80180c2:	3301      	adds	r3, #1
 80180c4:	429a      	cmp	r2, r3
 80180c6:	dd1f      	ble.n	8018108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80180c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ca:	9311      	str	r3, [sp, #68]	; 0x44
 80180cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180ce:	930d      	str	r3, [sp, #52]	; 0x34
 80180d0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80180d4:	9312      	str	r3, [sp, #72]	; 0x48
 80180d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80180d8:	2b00      	cmp	r3, #0
 80180da:	f300 8161 	bgt.w	80183a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80180de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80180ea:	930a      	str	r3, [sp, #40]	; 0x28
 80180ec:	e0f1      	b.n	80182d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 80180ee:	1c51      	adds	r1, r2, #1
 80180f0:	f040 80de 	bne.w	80182b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80180f4:	42aa      	cmp	r2, r5
 80180f6:	f280 80db 	bge.w	80182b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80180fa:	1c5f      	adds	r7, r3, #1
 80180fc:	f2c0 80d8 	blt.w	80182b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8018100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018102:	4293      	cmp	r3, r2
 8018104:	f280 80d4 	bge.w	80182b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8018108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801810a:	9311      	str	r3, [sp, #68]	; 0x44
 801810c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801810e:	930d      	str	r3, [sp, #52]	; 0x34
 8018110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018112:	2b00      	cmp	r3, #0
 8018114:	dde3      	ble.n	80180de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018116:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018118:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801811a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801811c:	141a      	asrs	r2, r3, #16
 801811e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018120:	1400      	asrs	r0, r0, #16
 8018122:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018126:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801812a:	f100 8120 	bmi.w	801836e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 801812e:	1c46      	adds	r6, r0, #1
 8018130:	42b5      	cmp	r5, r6
 8018132:	f340 811e 	ble.w	8018372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8018136:	2a00      	cmp	r2, #0
 8018138:	f2c0 811b 	blt.w	8018372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 801813c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801813e:	1c56      	adds	r6, r2, #1
 8018140:	42b7      	cmp	r7, r6
 8018142:	f340 8116 	ble.w	8018372 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8018146:	fb02 0005 	mla	r0, r2, r5, r0
 801814a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801814c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801814e:	9c08      	ldr	r4, [sp, #32]
 8018150:	4402      	add	r2, r0
 8018152:	5c30      	ldrb	r0, [r6, r0]
 8018154:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018158:	9014      	str	r0, [sp, #80]	; 0x50
 801815a:	1826      	adds	r6, r4, r0
 801815c:	2b00      	cmp	r3, #0
 801815e:	f000 80f7 	beq.w	8018350 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8018162:	f892 e001 	ldrb.w	lr, [r2, #1]
 8018166:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801816a:	44a6      	add	lr, r4
 801816c:	2900      	cmp	r1, #0
 801816e:	f000 80f8 	beq.w	8018362 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8018172:	1950      	adds	r0, r2, r5
 8018174:	5d52      	ldrb	r2, [r2, r5]
 8018176:	7840      	ldrb	r0, [r0, #1]
 8018178:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801817c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018180:	4422      	add	r2, r4
 8018182:	4420      	add	r0, r4
 8018184:	b29b      	uxth	r3, r3
 8018186:	b289      	uxth	r1, r1
 8018188:	fb03 fa01 	mul.w	sl, r3, r1
 801818c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8018190:	011b      	lsls	r3, r3, #4
 8018192:	b289      	uxth	r1, r1
 8018194:	f89e c002 	ldrb.w	ip, [lr, #2]
 8018198:	f896 b002 	ldrb.w	fp, [r6, #2]
 801819c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801819e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80181a0:	f8b7 8000 	ldrh.w	r8, [r7]
 80181a4:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 80181a8:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80181ac:	eba3 030a 	sub.w	r3, r3, sl
 80181b0:	b29b      	uxth	r3, r3
 80181b2:	eba9 0901 	sub.w	r9, r9, r1
 80181b6:	fa1f f989 	uxth.w	r9, r9
 80181ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80181be:	fb09 cc0b 	mla	ip, r9, fp, ip
 80181c2:	f892 b002 	ldrb.w	fp, [r2, #2]
 80181c6:	fb01 cc0b 	mla	ip, r1, fp, ip
 80181ca:	f890 b002 	ldrb.w	fp, [r0, #2]
 80181ce:	fb0a cc0b 	mla	ip, sl, fp, ip
 80181d2:	ea4f 2b28 	mov.w	fp, r8, asr #8
 80181d6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80181da:	fb1b fb04 	smulbb	fp, fp, r4
 80181de:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80181e2:	fb0c bc07 	mla	ip, ip, r7, fp
 80181e6:	f896 b001 	ldrb.w	fp, [r6, #1]
 80181ea:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80181ee:	f89e e000 	ldrb.w	lr, [lr]
 80181f2:	435e      	muls	r6, r3
 80181f4:	fb09 660b 	mla	r6, r9, fp, r6
 80181f8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80181fc:	fb01 660b 	mla	r6, r1, fp, r6
 8018200:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018204:	fb0a 660b 	mla	r6, sl, fp, r6
 8018208:	ea4f 0be8 	mov.w	fp, r8, asr #3
 801820c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8018210:	fb1b fb04 	smulbb	fp, fp, r4
 8018214:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018218:	fb06 b607 	mla	r6, r6, r7, fp
 801821c:	b2b4      	uxth	r4, r6
 801821e:	9412      	str	r4, [sp, #72]	; 0x48
 8018220:	9e08      	ldr	r6, [sp, #32]
 8018222:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018224:	f816 b004 	ldrb.w	fp, [r6, r4]
 8018228:	fb03 f30e 	mul.w	r3, r3, lr
 801822c:	f892 e000 	ldrb.w	lr, [r2]
 8018230:	fb09 330b 	mla	r3, r9, fp, r3
 8018234:	fb01 330e 	mla	r3, r1, lr, r3
 8018238:	f890 e000 	ldrb.w	lr, [r0]
 801823c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018240:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8018244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018246:	fa5f f888 	uxtb.w	r8, r8
 801824a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801824e:	fb18 f803 	smulbb	r8, r8, r3
 8018252:	fb0e 8807 	mla	r8, lr, r7, r8
 8018256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018258:	fa1f fc8c 	uxth.w	ip, ip
 801825c:	fa1f f888 	uxth.w	r8, r8
 8018260:	f103 0b01 	add.w	fp, r3, #1
 8018264:	f10c 0201 	add.w	r2, ip, #1
 8018268:	f108 0e01 	add.w	lr, r8, #1
 801826c:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 8018270:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8018274:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 8018278:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801827c:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 8018280:	0976      	lsrs	r6, r6, #5
 8018282:	ea4c 0c08 	orr.w	ip, ip, r8
 8018286:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801828c:	ea4c 0606 	orr.w	r6, ip, r6
 8018290:	801e      	strh	r6, [r3, #0]
 8018292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018294:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018296:	3302      	adds	r3, #2
 8018298:	930d      	str	r3, [sp, #52]	; 0x34
 801829a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801829c:	4413      	add	r3, r2
 801829e:	9329      	str	r3, [sp, #164]	; 0xa4
 80182a0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80182a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80182a4:	4413      	add	r3, r2
 80182a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80182a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80182aa:	3b01      	subs	r3, #1
 80182ac:	9311      	str	r3, [sp, #68]	; 0x44
 80182ae:	e72f      	b.n	8018110 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80182b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80182b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80182b4:	4413      	add	r3, r2
 80182b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80182b8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80182ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80182bc:	4413      	add	r3, r2
 80182be:	932a      	str	r3, [sp, #168]	; 0xa8
 80182c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182c2:	3b01      	subs	r3, #1
 80182c4:	9309      	str	r3, [sp, #36]	; 0x24
 80182c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182c8:	3302      	adds	r3, #2
 80182ca:	930a      	str	r3, [sp, #40]	; 0x28
 80182cc:	e6d4      	b.n	8018078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80182ce:	f47f aee6 	bne.w	801809e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80182d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	f340 812b 	ble.w	8018530 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 80182da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80182de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80182e2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80182e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80182e8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80182ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80182f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80182f4:	eef0 6a48 	vmov.f32	s13, s16
 80182f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80182fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018300:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018304:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8018308:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801830c:	eef0 6a68 	vmov.f32	s13, s17
 8018310:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018314:	ee18 2a10 	vmov	r2, s16
 8018318:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801831c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018320:	ee18 2a90 	vmov	r2, s17
 8018324:	932b      	str	r3, [sp, #172]	; 0xac
 8018326:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018328:	fb92 f3f3 	sdiv	r3, r2, r3
 801832c:	932c      	str	r3, [sp, #176]	; 0xb0
 801832e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018332:	3b01      	subs	r3, #1
 8018334:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018338:	930f      	str	r3, [sp, #60]	; 0x3c
 801833a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801833c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8018340:	bf08      	it	eq
 8018342:	4613      	moveq	r3, r2
 8018344:	9309      	str	r3, [sp, #36]	; 0x24
 8018346:	eef0 8a67 	vmov.f32	s17, s15
 801834a:	eeb0 8a47 	vmov.f32	s16, s14
 801834e:	e68c      	b.n	801806a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018350:	b151      	cbz	r1, 8018368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8018352:	5d52      	ldrb	r2, [r2, r5]
 8018354:	9808      	ldr	r0, [sp, #32]
 8018356:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801835a:	4402      	add	r2, r0
 801835c:	4630      	mov	r0, r6
 801835e:	46b6      	mov	lr, r6
 8018360:	e710      	b.n	8018184 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8018362:	4630      	mov	r0, r6
 8018364:	4632      	mov	r2, r6
 8018366:	e70d      	b.n	8018184 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8018368:	4630      	mov	r0, r6
 801836a:	4632      	mov	r2, r6
 801836c:	e7f7      	b.n	801835e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 801836e:	1c46      	adds	r6, r0, #1
 8018370:	d18f      	bne.n	8018292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8018372:	4285      	cmp	r5, r0
 8018374:	dd8d      	ble.n	8018292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8018376:	1c54      	adds	r4, r2, #1
 8018378:	db8b      	blt.n	8018292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801837a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801837c:	4294      	cmp	r4, r2
 801837e:	dd88      	ble.n	8018292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8018380:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8018384:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018388:	9002      	str	r0, [sp, #8]
 801838a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801838e:	e9cd 5300 	strd	r5, r3, [sp]
 8018392:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8018396:	9b08      	ldr	r3, [sp, #32]
 8018398:	9815      	ldr	r0, [sp, #84]	; 0x54
 801839a:	f7ff fd47 	bl	8017e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801839e:	e778      	b.n	8018292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80183a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80183a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80183a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80183a6:	1410      	asrs	r0, r2, #16
 80183a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80183ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80183ae:	1412      	asrs	r2, r2, #16
 80183b0:	fb05 2000 	mla	r0, r5, r0, r2
 80183b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183b6:	f814 a000 	ldrb.w	sl, [r4, r0]
 80183ba:	4402      	add	r2, r0
 80183bc:	9808      	ldr	r0, [sp, #32]
 80183be:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80183c2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80183c6:	eb00 060a 	add.w	r6, r0, sl
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	f000 80a1 	beq.w	8018512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 80183d0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80183d4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80183d8:	4484      	add	ip, r0
 80183da:	2900      	cmp	r1, #0
 80183dc:	f000 80a2 	beq.w	8018524 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 80183e0:	1950      	adds	r0, r2, r5
 80183e2:	5d52      	ldrb	r2, [r2, r5]
 80183e4:	7840      	ldrb	r0, [r0, #1]
 80183e6:	9c08      	ldr	r4, [sp, #32]
 80183e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80183ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80183f0:	4422      	add	r2, r4
 80183f2:	4420      	add	r0, r4
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	b289      	uxth	r1, r1
 80183f8:	fb03 f901 	mul.w	r9, r3, r1
 80183fc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018400:	011b      	lsls	r3, r3, #4
 8018402:	b289      	uxth	r1, r1
 8018404:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8018408:	f896 b002 	ldrb.w	fp, [r6, #2]
 801840c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801840e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8018412:	eba3 0309 	sub.w	r3, r3, r9
 8018416:	b29b      	uxth	r3, r3
 8018418:	eba8 0801 	sub.w	r8, r8, r1
 801841c:	fa1f f888 	uxth.w	r8, r8
 8018420:	435f      	muls	r7, r3
 8018422:	fb08 770b 	mla	r7, r8, fp, r7
 8018426:	f892 b002 	ldrb.w	fp, [r2, #2]
 801842a:	f8b4 e000 	ldrh.w	lr, [r4]
 801842e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018430:	fb01 770b 	mla	r7, r1, fp, r7
 8018434:	f890 b002 	ldrb.w	fp, [r0, #2]
 8018438:	fb09 770b 	mla	r7, r9, fp, r7
 801843c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8018440:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8018444:	fb1b fb04 	smulbb	fp, fp, r4
 8018448:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801844a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801844e:	fb07 b704 	mla	r7, r7, r4, fp
 8018452:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018456:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801845a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801845c:	f89c c000 	ldrb.w	ip, [ip]
 8018460:	435e      	muls	r6, r3
 8018462:	fb08 660b 	mla	r6, r8, fp, r6
 8018466:	f892 b001 	ldrb.w	fp, [r2, #1]
 801846a:	fb01 660b 	mla	r6, r1, fp, r6
 801846e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018472:	fb09 660b 	mla	r6, r9, fp, r6
 8018476:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801847a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801847e:	fb1b fb04 	smulbb	fp, fp, r4
 8018482:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018484:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018488:	fb06 b604 	mla	r6, r6, r4, fp
 801848c:	9c08      	ldr	r4, [sp, #32]
 801848e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8018492:	fb03 f30c 	mul.w	r3, r3, ip
 8018496:	f892 c000 	ldrb.w	ip, [r2]
 801849a:	fb08 330a 	mla	r3, r8, sl, r3
 801849e:	fb01 330c 	mla	r3, r1, ip, r3
 80184a2:	f890 c000 	ldrb.w	ip, [r0]
 80184a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80184aa:	fb09 3c0c 	mla	ip, r9, ip, r3
 80184ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184b0:	fa5f fe8e 	uxtb.w	lr, lr
 80184b4:	fb1e fe03 	smulbb	lr, lr, r3
 80184b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80184ba:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80184be:	fb0c ec03 	mla	ip, ip, r3, lr
 80184c2:	b2bf      	uxth	r7, r7
 80184c4:	b2b6      	uxth	r6, r6
 80184c6:	fa1f fc8c 	uxth.w	ip, ip
 80184ca:	1c7b      	adds	r3, r7, #1
 80184cc:	f10c 0201 	add.w	r2, ip, #1
 80184d0:	f106 0b01 	add.w	fp, r6, #1
 80184d4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80184d8:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80184dc:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 80184e0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80184e4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80184e8:	0976      	lsrs	r6, r6, #5
 80184ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80184ec:	4317      	orrs	r7, r2
 80184ee:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80184f2:	4337      	orrs	r7, r6
 80184f4:	f823 7b02 	strh.w	r7, [r3], #2
 80184f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80184fa:	930d      	str	r3, [sp, #52]	; 0x34
 80184fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80184fe:	4413      	add	r3, r2
 8018500:	9329      	str	r3, [sp, #164]	; 0xa4
 8018502:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018504:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018506:	4413      	add	r3, r2
 8018508:	932a      	str	r3, [sp, #168]	; 0xa8
 801850a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801850c:	3b01      	subs	r3, #1
 801850e:	9311      	str	r3, [sp, #68]	; 0x44
 8018510:	e5e1      	b.n	80180d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 8018512:	b151      	cbz	r1, 801852a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 8018514:	5d52      	ldrb	r2, [r2, r5]
 8018516:	9808      	ldr	r0, [sp, #32]
 8018518:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801851c:	4402      	add	r2, r0
 801851e:	4630      	mov	r0, r6
 8018520:	46b4      	mov	ip, r6
 8018522:	e767      	b.n	80183f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 8018524:	4630      	mov	r0, r6
 8018526:	4632      	mov	r2, r6
 8018528:	e764      	b.n	80183f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801852a:	4630      	mov	r0, r6
 801852c:	4632      	mov	r2, r6
 801852e:	e7f7      	b.n	8018520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 8018530:	b017      	add	sp, #92	; 0x5c
 8018532:	ecbd 8b08 	vpop	{d8-d11}
 8018536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801853c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018540:	880e      	ldrh	r6, [r1, #0]
 8018542:	b085      	sub	sp, #20
 8018544:	0230      	lsls	r0, r6, #8
 8018546:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801854a:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801854e:	0170      	lsls	r0, r6, #5
 8018550:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8018554:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8018558:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801855c:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8018560:	00f6      	lsls	r6, r6, #3
 8018562:	ea4b 0000 	orr.w	r0, fp, r0
 8018566:	b2f6      	uxtb	r6, r6
 8018568:	4691      	mov	r9, r2
 801856a:	fb05 7a0c 	mla	sl, r5, ip, r7
 801856e:	4306      	orrs	r6, r0
 8018570:	2d00      	cmp	r5, #0
 8018572:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8018576:	9603      	str	r6, [sp, #12]
 8018578:	eb09 0e0a 	add.w	lr, r9, sl
 801857c:	db42      	blt.n	8018604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801857e:	45a8      	cmp	r8, r5
 8018580:	dd40      	ble.n	8018604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8018582:	2f00      	cmp	r7, #0
 8018584:	db3c      	blt.n	8018600 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8018586:	45bc      	cmp	ip, r7
 8018588:	dd3a      	ble.n	8018600 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801858a:	f819 600a 	ldrb.w	r6, [r9, sl]
 801858e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018592:	441e      	add	r6, r3
 8018594:	1c78      	adds	r0, r7, #1
 8018596:	d438      	bmi.n	801860a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8018598:	4584      	cmp	ip, r0
 801859a:	dd36      	ble.n	801860a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801859c:	b3aa      	cbz	r2, 801860a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801859e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80185a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80185a6:	4418      	add	r0, r3
 80185a8:	3501      	adds	r5, #1
 80185aa:	d432      	bmi.n	8018612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80185ac:	45a8      	cmp	r8, r5
 80185ae:	dd30      	ble.n	8018612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80185b0:	b37c      	cbz	r4, 8018612 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 80185b2:	2f00      	cmp	r7, #0
 80185b4:	db2b      	blt.n	801860e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80185b6:	45bc      	cmp	ip, r7
 80185b8:	dd29      	ble.n	801860e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 80185ba:	f81e 500c 	ldrb.w	r5, [lr, ip]
 80185be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185c2:	441d      	add	r5, r3
 80185c4:	3701      	adds	r7, #1
 80185c6:	d427      	bmi.n	8018618 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80185c8:	45bc      	cmp	ip, r7
 80185ca:	dd25      	ble.n	8018618 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80185cc:	b322      	cbz	r2, 8018618 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 80185ce:	44f4      	add	ip, lr
 80185d0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80185d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80185d8:	443b      	add	r3, r7
 80185da:	781f      	ldrb	r7, [r3, #0]
 80185dc:	f896 a000 	ldrb.w	sl, [r6]
 80185e0:	f890 b000 	ldrb.w	fp, [r0]
 80185e4:	f895 9000 	ldrb.w	r9, [r5]
 80185e8:	9700      	str	r7, [sp, #0]
 80185ea:	2a0f      	cmp	r2, #15
 80185ec:	d801      	bhi.n	80185f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 80185ee:	2c0f      	cmp	r4, #15
 80185f0:	d914      	bls.n	801861c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 80185f2:	4b2c      	ldr	r3, [pc, #176]	; (80186a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 80185f4:	4a2c      	ldr	r2, [pc, #176]	; (80186a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 80185f6:	482d      	ldr	r0, [pc, #180]	; (80186ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 80185f8:	f240 3173 	movw	r1, #883	; 0x373
 80185fc:	f005 fef2 	bl	801e3e4 <__assert_func>
 8018600:	ae03      	add	r6, sp, #12
 8018602:	e7c7      	b.n	8018594 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8018604:	a803      	add	r0, sp, #12
 8018606:	4606      	mov	r6, r0
 8018608:	e7ce      	b.n	80185a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801860a:	a803      	add	r0, sp, #12
 801860c:	e7cc      	b.n	80185a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801860e:	ad03      	add	r5, sp, #12
 8018610:	e7d8      	b.n	80185c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8018612:	ab03      	add	r3, sp, #12
 8018614:	461d      	mov	r5, r3
 8018616:	e7e0      	b.n	80185da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8018618:	ab03      	add	r3, sp, #12
 801861a:	e7de      	b.n	80185da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801861c:	b292      	uxth	r2, r2
 801861e:	b2a4      	uxth	r4, r4
 8018620:	fb02 f804 	mul.w	r8, r2, r4
 8018624:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8018628:	0112      	lsls	r2, r2, #4
 801862a:	b2a4      	uxth	r4, r4
 801862c:	f890 e002 	ldrb.w	lr, [r0, #2]
 8018630:	78b7      	ldrb	r7, [r6, #2]
 8018632:	7840      	ldrb	r0, [r0, #1]
 8018634:	7876      	ldrb	r6, [r6, #1]
 8018636:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801863a:	eba2 0208 	sub.w	r2, r2, r8
 801863e:	b292      	uxth	r2, r2
 8018640:	ebac 0c04 	sub.w	ip, ip, r4
 8018644:	fa1f fc8c 	uxth.w	ip, ip
 8018648:	fb02 fe0e 	mul.w	lr, r2, lr
 801864c:	fb0c ee07 	mla	lr, ip, r7, lr
 8018650:	78af      	ldrb	r7, [r5, #2]
 8018652:	fb04 ee07 	mla	lr, r4, r7, lr
 8018656:	789f      	ldrb	r7, [r3, #2]
 8018658:	785b      	ldrb	r3, [r3, #1]
 801865a:	fb08 e707 	mla	r7, r8, r7, lr
 801865e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018662:	fb02 fe0b 	mul.w	lr, r2, fp
 8018666:	4342      	muls	r2, r0
 8018668:	7868      	ldrb	r0, [r5, #1]
 801866a:	9701      	str	r7, [sp, #4]
 801866c:	fb0c ee0a 	mla	lr, ip, sl, lr
 8018670:	9f00      	ldr	r7, [sp, #0]
 8018672:	fb0c 2206 	mla	r2, ip, r6, r2
 8018676:	fb04 ee09 	mla	lr, r4, r9, lr
 801867a:	fb04 2400 	mla	r4, r4, r0, r2
 801867e:	fb08 ee07 	mla	lr, r8, r7, lr
 8018682:	9f01      	ldr	r7, [sp, #4]
 8018684:	fb08 4803 	mla	r8, r8, r3, r4
 8018688:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801868c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018690:	ea47 070e 	orr.w	r7, r7, lr
 8018694:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8018698:	ea47 0708 	orr.w	r7, r7, r8
 801869c:	800f      	strh	r7, [r1, #0]
 801869e:	b005      	add	sp, #20
 80186a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186a4:	08022217 	.word	0x08022217
 80186a8:	08022775 	.word	0x08022775
 80186ac:	0802229f 	.word	0x0802229f

080186b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80186b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186b4:	ed2d 8b0a 	vpush	{d8-d12}
 80186b8:	b091      	sub	sp, #68	; 0x44
 80186ba:	eeb0 aa40 	vmov.f32	s20, s0
 80186be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80186c0:	9307      	str	r3, [sp, #28]
 80186c2:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 80186c6:	910c      	str	r1, [sp, #48]	; 0x30
 80186c8:	9309      	str	r3, [sp, #36]	; 0x24
 80186ca:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80186ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80186d0:	6860      	ldr	r0, [r4, #4]
 80186d2:	920e      	str	r2, [sp, #56]	; 0x38
 80186d4:	fb00 1303 	mla	r3, r0, r3, r1
 80186d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80186da:	6821      	ldr	r1, [r4, #0]
 80186dc:	6854      	ldr	r4, [r2, #4]
 80186de:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 80186e2:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 80186e6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80186ea:	9308      	str	r3, [sp, #32]
 80186ec:	6813      	ldr	r3, [r2, #0]
 80186ee:	930a      	str	r3, [sp, #40]	; 0x28
 80186f0:	eef0 9a60 	vmov.f32	s19, s1
 80186f4:	eeb0 9a41 	vmov.f32	s18, s2
 80186f8:	eeb0 8a62 	vmov.f32	s16, s5
 80186fc:	eef0 8a43 	vmov.f32	s17, s6
 8018700:	eeb0 ca44 	vmov.f32	s24, s8
 8018704:	eef0 ba64 	vmov.f32	s23, s9
 8018708:	eeb0 ba45 	vmov.f32	s22, s10
 801870c:	3404      	adds	r4, #4
 801870e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8018712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018714:	2b00      	cmp	r3, #0
 8018716:	dc03      	bgt.n	8018720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8018718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801871a:	2b00      	cmp	r3, #0
 801871c:	f340 81cb 	ble.w	8018ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8018720:	9b07      	ldr	r3, [sp, #28]
 8018722:	2b00      	cmp	r3, #0
 8018724:	f340 80dd 	ble.w	80188e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 8018728:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801872a:	1412      	asrs	r2, r2, #16
 801872c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8018730:	d42c      	bmi.n	801878c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8018732:	1c51      	adds	r1, r2, #1
 8018734:	428d      	cmp	r5, r1
 8018736:	dd2c      	ble.n	8018792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8018738:	2b00      	cmp	r3, #0
 801873a:	db2a      	blt.n	8018792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801873c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801873e:	1c59      	adds	r1, r3, #1
 8018740:	4288      	cmp	r0, r1
 8018742:	dd26      	ble.n	8018792 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8018744:	9b07      	ldr	r3, [sp, #28]
 8018746:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018748:	9925      	ldr	r1, [sp, #148]	; 0x94
 801874a:	3b01      	subs	r3, #1
 801874c:	fb02 1203 	mla	r2, r2, r3, r1
 8018750:	1412      	asrs	r2, r2, #16
 8018752:	d428      	bmi.n	80187a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8018754:	3201      	adds	r2, #1
 8018756:	4295      	cmp	r5, r2
 8018758:	dd25      	ble.n	80187a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801875a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801875c:	fb02 b303 	mla	r3, r2, r3, fp
 8018760:	141b      	asrs	r3, r3, #16
 8018762:	d420      	bmi.n	80187a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8018764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018766:	3301      	adds	r3, #1
 8018768:	429a      	cmp	r2, r3
 801876a:	dd1c      	ble.n	80187a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801876c:	9b07      	ldr	r3, [sp, #28]
 801876e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018770:	9b08      	ldr	r3, [sp, #32]
 8018772:	930d      	str	r3, [sp, #52]	; 0x34
 8018774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018776:	2b00      	cmp	r3, #0
 8018778:	f300 8116 	bgt.w	80189a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801877c:	9b07      	ldr	r3, [sp, #28]
 801877e:	9a08      	ldr	r2, [sp, #32]
 8018780:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018784:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018788:	9308      	str	r3, [sp, #32]
 801878a:	e0ac      	b.n	80188e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801878c:	1c51      	adds	r1, r2, #1
 801878e:	f040 809b 	bne.w	80188c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8018792:	42aa      	cmp	r2, r5
 8018794:	f280 8098 	bge.w	80188c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8018798:	1c5a      	adds	r2, r3, #1
 801879a:	f2c0 8095 	blt.w	80188c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801879e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187a0:	4293      	cmp	r3, r2
 80187a2:	f280 8091 	bge.w	80188c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 80187a6:	9b07      	ldr	r3, [sp, #28]
 80187a8:	930d      	str	r3, [sp, #52]	; 0x34
 80187aa:	9b08      	ldr	r3, [sp, #32]
 80187ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80187ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	dde3      	ble.n	801877c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80187b4:	9825      	ldr	r0, [sp, #148]	; 0x94
 80187b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80187b8:	1400      	asrs	r0, r0, #16
 80187ba:	ea4f 422b 	mov.w	r2, fp, asr #16
 80187be:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80187c2:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80187c6:	f100 80d9 	bmi.w	801897c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 80187ca:	1c46      	adds	r6, r0, #1
 80187cc:	42b5      	cmp	r5, r6
 80187ce:	f340 80d7 	ble.w	8018980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80187d2:	2a00      	cmp	r2, #0
 80187d4:	f2c0 80d4 	blt.w	8018980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80187d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80187da:	1c56      	adds	r6, r2, #1
 80187dc:	42b7      	cmp	r7, r6
 80187de:	f340 80cf 	ble.w	8018980 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80187e2:	fb02 0005 	mla	r0, r2, r5, r0
 80187e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80187e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187ea:	4402      	add	r2, r0
 80187ec:	5c30      	ldrb	r0, [r6, r0]
 80187ee:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80187f2:	eb04 0c08 	add.w	ip, r4, r8
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	f000 80b2 	beq.w	8018960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80187fc:	7856      	ldrb	r6, [r2, #1]
 80187fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018802:	4426      	add	r6, r4
 8018804:	2900      	cmp	r1, #0
 8018806:	f000 80b3 	beq.w	8018970 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801880a:	1950      	adds	r0, r2, r5
 801880c:	5d52      	ldrb	r2, [r2, r5]
 801880e:	7840      	ldrb	r0, [r0, #1]
 8018810:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018814:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018818:	4422      	add	r2, r4
 801881a:	4420      	add	r0, r4
 801881c:	b29b      	uxth	r3, r3
 801881e:	b289      	uxth	r1, r1
 8018820:	fb03 f901 	mul.w	r9, r3, r1
 8018824:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018828:	011b      	lsls	r3, r3, #4
 801882a:	b289      	uxth	r1, r1
 801882c:	78b7      	ldrb	r7, [r6, #2]
 801882e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8018832:	f89c c001 	ldrb.w	ip, [ip, #1]
 8018836:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801883a:	eba3 0309 	sub.w	r3, r3, r9
 801883e:	b29b      	uxth	r3, r3
 8018840:	ebae 0e01 	sub.w	lr, lr, r1
 8018844:	fa1f fe8e 	uxth.w	lr, lr
 8018848:	435f      	muls	r7, r3
 801884a:	fb0e 770a 	mla	r7, lr, sl, r7
 801884e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8018852:	fb01 770a 	mla	r7, r1, sl, r7
 8018856:	f890 a002 	ldrb.w	sl, [r0, #2]
 801885a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801885e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8018862:	f896 8000 	ldrb.w	r8, [r6]
 8018866:	7876      	ldrb	r6, [r6, #1]
 8018868:	fb03 f808 	mul.w	r8, r3, r8
 801886c:	fb0e 8807 	mla	r8, lr, r7, r8
 8018870:	7817      	ldrb	r7, [r2, #0]
 8018872:	fb01 8807 	mla	r8, r1, r7, r8
 8018876:	7807      	ldrb	r7, [r0, #0]
 8018878:	fb09 8707 	mla	r7, r9, r7, r8
 801887c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8018880:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8018884:	ea4a 0707 	orr.w	r7, sl, r7
 8018888:	4373      	muls	r3, r6
 801888a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801888e:	fb0e 330c 	mla	r3, lr, ip, r3
 8018892:	fb01 310a 	mla	r1, r1, sl, r3
 8018896:	f890 a001 	ldrb.w	sl, [r0, #1]
 801889a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801889c:	fb09 1a0a 	mla	sl, r9, sl, r1
 80188a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80188a4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80188a8:	ea47 070a 	orr.w	r7, r7, sl
 80188ac:	801f      	strh	r7, [r3, #0]
 80188ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80188b2:	3302      	adds	r3, #2
 80188b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80188b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80188b8:	4413      	add	r3, r2
 80188ba:	9325      	str	r3, [sp, #148]	; 0x94
 80188bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188be:	449b      	add	fp, r3
 80188c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188c2:	3b01      	subs	r3, #1
 80188c4:	930d      	str	r3, [sp, #52]	; 0x34
 80188c6:	e772      	b.n	80187ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80188c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80188ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80188cc:	4413      	add	r3, r2
 80188ce:	9325      	str	r3, [sp, #148]	; 0x94
 80188d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188d2:	449b      	add	fp, r3
 80188d4:	9b07      	ldr	r3, [sp, #28]
 80188d6:	3b01      	subs	r3, #1
 80188d8:	9307      	str	r3, [sp, #28]
 80188da:	9b08      	ldr	r3, [sp, #32]
 80188dc:	3302      	adds	r3, #2
 80188de:	9308      	str	r3, [sp, #32]
 80188e0:	e71e      	b.n	8018720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80188e2:	f47f af2f 	bne.w	8018744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80188e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	f340 80e4 	ble.w	8018ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80188ee:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80188f2:	ee79 9aab 	vadd.f32	s19, s19, s23
 80188f6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80188fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80188fc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8018900:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018904:	eef0 6a48 	vmov.f32	s13, s16
 8018908:	ee69 7a27 	vmul.f32	s15, s18, s15
 801890c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018910:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018914:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8018918:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801891c:	eef0 6a68 	vmov.f32	s13, s17
 8018920:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018924:	ee18 2a10 	vmov	r2, s16
 8018928:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801892c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018930:	ee18 2a90 	vmov	r2, s17
 8018934:	9327      	str	r3, [sp, #156]	; 0x9c
 8018936:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018938:	fb92 f3f3 	sdiv	r3, r2, r3
 801893c:	9328      	str	r3, [sp, #160]	; 0xa0
 801893e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018942:	3b01      	subs	r3, #1
 8018944:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018948:	930c      	str	r3, [sp, #48]	; 0x30
 801894a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801894c:	bf08      	it	eq
 801894e:	4613      	moveq	r3, r2
 8018950:	ee16 ba90 	vmov	fp, s13
 8018954:	9307      	str	r3, [sp, #28]
 8018956:	eef0 8a67 	vmov.f32	s17, s15
 801895a:	eeb0 8a47 	vmov.f32	s16, s14
 801895e:	e6d8      	b.n	8018712 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8018960:	b149      	cbz	r1, 8018976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8018962:	5d52      	ldrb	r2, [r2, r5]
 8018964:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018968:	4422      	add	r2, r4
 801896a:	4660      	mov	r0, ip
 801896c:	4666      	mov	r6, ip
 801896e:	e755      	b.n	801881c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8018970:	4660      	mov	r0, ip
 8018972:	4662      	mov	r2, ip
 8018974:	e752      	b.n	801881c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8018976:	4660      	mov	r0, ip
 8018978:	4662      	mov	r2, ip
 801897a:	e7f7      	b.n	801896c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801897c:	1c47      	adds	r7, r0, #1
 801897e:	d196      	bne.n	80188ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8018980:	4285      	cmp	r5, r0
 8018982:	dd94      	ble.n	80188ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8018984:	1c56      	adds	r6, r2, #1
 8018986:	db92      	blt.n	80188ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8018988:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801898a:	4296      	cmp	r6, r2
 801898c:	dd8f      	ble.n	80188ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801898e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8018992:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8018996:	e9cd 5600 	strd	r5, r6, [sp]
 801899a:	4623      	mov	r3, r4
 801899c:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 80189a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80189a2:	f7ff fdcb 	bl	801853c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80189a6:	e782      	b.n	80188ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80189a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80189aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80189ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80189ae:	1412      	asrs	r2, r2, #16
 80189b0:	ea4f 402b 	mov.w	r0, fp, asr #16
 80189b4:	fb05 2000 	mla	r0, r5, r0, r2
 80189b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80189ba:	f816 8000 	ldrb.w	r8, [r6, r0]
 80189be:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80189c2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80189c6:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80189ca:	4402      	add	r2, r0
 80189cc:	eb04 0c08 	add.w	ip, r4, r8
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d062      	beq.n	8018a9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 80189d4:	7856      	ldrb	r6, [r2, #1]
 80189d6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80189da:	4426      	add	r6, r4
 80189dc:	2900      	cmp	r1, #0
 80189de:	d064      	beq.n	8018aaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 80189e0:	1950      	adds	r0, r2, r5
 80189e2:	5d52      	ldrb	r2, [r2, r5]
 80189e4:	7840      	ldrb	r0, [r0, #1]
 80189e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80189ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80189ee:	4422      	add	r2, r4
 80189f0:	4420      	add	r0, r4
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	b289      	uxth	r1, r1
 80189f6:	fb03 f901 	mul.w	r9, r3, r1
 80189fa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80189fe:	011b      	lsls	r3, r3, #4
 8018a00:	b289      	uxth	r1, r1
 8018a02:	78b7      	ldrb	r7, [r6, #2]
 8018a04:	f89c a002 	ldrb.w	sl, [ip, #2]
 8018a08:	f89c c001 	ldrb.w	ip, [ip, #1]
 8018a0c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8018a10:	eba3 0309 	sub.w	r3, r3, r9
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	ebae 0e01 	sub.w	lr, lr, r1
 8018a1a:	fa1f fe8e 	uxth.w	lr, lr
 8018a1e:	435f      	muls	r7, r3
 8018a20:	fb0e 770a 	mla	r7, lr, sl, r7
 8018a24:	f892 a002 	ldrb.w	sl, [r2, #2]
 8018a28:	fb01 770a 	mla	r7, r1, sl, r7
 8018a2c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8018a30:	fb09 7a0a 	mla	sl, r9, sl, r7
 8018a34:	f814 7008 	ldrb.w	r7, [r4, r8]
 8018a38:	f896 8000 	ldrb.w	r8, [r6]
 8018a3c:	7876      	ldrb	r6, [r6, #1]
 8018a3e:	fb03 f808 	mul.w	r8, r3, r8
 8018a42:	fb0e 8807 	mla	r8, lr, r7, r8
 8018a46:	7817      	ldrb	r7, [r2, #0]
 8018a48:	fb01 8807 	mla	r8, r1, r7, r8
 8018a4c:	7807      	ldrb	r7, [r0, #0]
 8018a4e:	fb09 8707 	mla	r7, r9, r7, r8
 8018a52:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8018a56:	4373      	muls	r3, r6
 8018a58:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8018a5c:	7856      	ldrb	r6, [r2, #1]
 8018a5e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8018a60:	ea4a 0707 	orr.w	r7, sl, r7
 8018a64:	fb0e 330c 	mla	r3, lr, ip, r3
 8018a68:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018a6c:	fb01 3306 	mla	r3, r1, r6, r3
 8018a70:	fb09 3a0a 	mla	sl, r9, sl, r3
 8018a74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018a7e:	ea47 070a 	orr.w	r7, r7, sl
 8018a82:	f823 7b02 	strh.w	r7, [r3], #2
 8018a86:	930d      	str	r3, [sp, #52]	; 0x34
 8018a88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018a8a:	4413      	add	r3, r2
 8018a8c:	9325      	str	r3, [sp, #148]	; 0x94
 8018a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018a90:	449b      	add	fp, r3
 8018a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a94:	3b01      	subs	r3, #1
 8018a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a98:	e66c      	b.n	8018774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8018a9a:	b149      	cbz	r1, 8018ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 8018a9c:	5d52      	ldrb	r2, [r2, r5]
 8018a9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018aa2:	4422      	add	r2, r4
 8018aa4:	4660      	mov	r0, ip
 8018aa6:	4666      	mov	r6, ip
 8018aa8:	e7a3      	b.n	80189f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8018aaa:	4660      	mov	r0, ip
 8018aac:	4662      	mov	r2, ip
 8018aae:	e7a0      	b.n	80189f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8018ab0:	4660      	mov	r0, ip
 8018ab2:	4662      	mov	r2, ip
 8018ab4:	e7f7      	b.n	8018aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8018ab6:	b011      	add	sp, #68	; 0x44
 8018ab8:	ecbd 8b0a 	vpop	{d8-d12}
 8018abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8018ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac4:	8808      	ldrh	r0, [r1, #0]
 8018ac6:	b085      	sub	sp, #20
 8018ac8:	1206      	asrs	r6, r0, #8
 8018aca:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8018ace:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018ad2:	9600      	str	r6, [sp, #0]
 8018ad4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8018ad8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8018adc:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8018ae0:	10c6      	asrs	r6, r0, #3
 8018ae2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018ae6:	9601      	str	r6, [sp, #4]
 8018ae8:	00c0      	lsls	r0, r0, #3
 8018aea:	fb04 560c 	mla	r6, r4, ip, r5
 8018aee:	b2c0      	uxtb	r0, r0
 8018af0:	4692      	mov	sl, r2
 8018af2:	eb02 0e06 	add.w	lr, r2, r6
 8018af6:	9a00      	ldr	r2, [sp, #0]
 8018af8:	9002      	str	r0, [sp, #8]
 8018afa:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8018afe:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8018b02:	9a01      	ldr	r2, [sp, #4]
 8018b04:	2c00      	cmp	r4, #0
 8018b06:	4698      	mov	r8, r3
 8018b08:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8018b0c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018b10:	db3e      	blt.n	8018b90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8018b12:	45a1      	cmp	r9, r4
 8018b14:	dd3c      	ble.n	8018b90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8018b16:	2d00      	cmp	r5, #0
 8018b18:	db38      	blt.n	8018b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8018b1a:	45ac      	cmp	ip, r5
 8018b1c:	dd36      	ble.n	8018b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8018b1e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8018b22:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8018b26:	1c6e      	adds	r6, r5, #1
 8018b28:	d435      	bmi.n	8018b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8018b2a:	45b4      	cmp	ip, r6
 8018b2c:	dd33      	ble.n	8018b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8018b2e:	b393      	cbz	r3, 8018b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8018b30:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8018b34:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8018b38:	3401      	adds	r4, #1
 8018b3a:	d430      	bmi.n	8018b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8018b3c:	45a1      	cmp	r9, r4
 8018b3e:	dd2e      	ble.n	8018b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8018b40:	b36f      	cbz	r7, 8018b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8018b42:	2d00      	cmp	r5, #0
 8018b44:	db29      	blt.n	8018b9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8018b46:	45ac      	cmp	ip, r5
 8018b48:	dd27      	ble.n	8018b9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8018b4a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8018b4e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8018b52:	3501      	adds	r5, #1
 8018b54:	d407      	bmi.n	8018b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8018b56:	45ac      	cmp	ip, r5
 8018b58:	dd05      	ble.n	8018b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8018b5a:	b123      	cbz	r3, 8018b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8018b5c:	44f4      	add	ip, lr
 8018b5e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8018b62:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8018b66:	2b0f      	cmp	r3, #15
 8018b68:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018b6c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018b70:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018b74:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8018b78:	d801      	bhi.n	8018b7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8018b7a:	2f0f      	cmp	r7, #15
 8018b7c:	d911      	bls.n	8018ba2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 8018b7e:	4b7f      	ldr	r3, [pc, #508]	; (8018d7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 8018b80:	4a7f      	ldr	r2, [pc, #508]	; (8018d80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 8018b82:	4880      	ldr	r0, [pc, #512]	; (8018d84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8018b84:	f240 3173 	movw	r1, #883	; 0x373
 8018b88:	f005 fc2c 	bl	801e3e4 <__assert_func>
 8018b8c:	4602      	mov	r2, r0
 8018b8e:	e7ca      	b.n	8018b26 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8018b90:	4606      	mov	r6, r0
 8018b92:	4602      	mov	r2, r0
 8018b94:	e7d0      	b.n	8018b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 8018b96:	4606      	mov	r6, r0
 8018b98:	e7ce      	b.n	8018b38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 8018b9a:	4604      	mov	r4, r0
 8018b9c:	e7d9      	b.n	8018b52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	e7e1      	b.n	8018b66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8018ba2:	b29b      	uxth	r3, r3
 8018ba4:	b2bf      	uxth	r7, r7
 8018ba6:	fb03 fe07 	mul.w	lr, r3, r7
 8018baa:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018bae:	011b      	lsls	r3, r3, #4
 8018bb0:	eba3 0c0e 	sub.w	ip, r3, lr
 8018bb4:	b2bf      	uxth	r7, r7
 8018bb6:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8018bba:	fa1f fc8c 	uxth.w	ip, ip
 8018bbe:	1bed      	subs	r5, r5, r7
 8018bc0:	b2ad      	uxth	r5, r5
 8018bc2:	fb0c f30a 	mul.w	r3, ip, sl
 8018bc6:	fb05 330b 	mla	r3, r5, fp, r3
 8018bca:	fb07 3309 	mla	r3, r7, r9, r3
 8018bce:	fb0e 3308 	mla	r3, lr, r8, r3
 8018bd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018bd6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018bda:	9303      	str	r3, [sp, #12]
 8018bdc:	d018      	beq.n	8018c10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 8018bde:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018be2:	fb0b f303 	mul.w	r3, fp, r3
 8018be6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018bea:	fb0b fb02 	mul.w	fp, fp, r2
 8018bee:	0a1a      	lsrs	r2, r3, #8
 8018bf0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018bf4:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8018bf8:	441a      	add	r2, r3
 8018bfa:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8018bfe:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8018c02:	0a12      	lsrs	r2, r2, #8
 8018c04:	0a1b      	lsrs	r3, r3, #8
 8018c06:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018c0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c0e:	431a      	orrs	r2, r3
 8018c10:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018c14:	d019      	beq.n	8018c4a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 8018c16:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8018c1a:	fb0a fb0b 	mul.w	fp, sl, fp
 8018c1e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018c22:	fb0a fa06 	mul.w	sl, sl, r6
 8018c26:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8018c2a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018c2e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018c32:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8018c36:	445e      	add	r6, fp
 8018c38:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8018c3c:	0a36      	lsrs	r6, r6, #8
 8018c3e:	0a1b      	lsrs	r3, r3, #8
 8018c40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018c44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c48:	431e      	orrs	r6, r3
 8018c4a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018c4e:	d019      	beq.n	8018c84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 8018c50:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018c54:	fb09 fa0a 	mul.w	sl, r9, sl
 8018c58:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018c5c:	fb09 f904 	mul.w	r9, r9, r4
 8018c60:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018c64:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018c68:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018c6c:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8018c70:	4454      	add	r4, sl
 8018c72:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8018c76:	0a24      	lsrs	r4, r4, #8
 8018c78:	0a1b      	lsrs	r3, r3, #8
 8018c7a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c82:	431c      	orrs	r4, r3
 8018c84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018c88:	d019      	beq.n	8018cbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 8018c8a:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8018c8e:	fb08 f909 	mul.w	r9, r8, r9
 8018c92:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018c96:	fb08 f800 	mul.w	r8, r8, r0
 8018c9a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8018c9e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018ca2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018ca6:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8018caa:	4448      	add	r0, r9
 8018cac:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8018cb0:	0a00      	lsrs	r0, r0, #8
 8018cb2:	0a1b      	lsrs	r3, r3, #8
 8018cb4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018cb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018cbc:	4318      	orrs	r0, r3
 8018cbe:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018cc2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018cc6:	fb0c f808 	mul.w	r8, ip, r8
 8018cca:	fb05 8803 	mla	r8, r5, r3, r8
 8018cce:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8018cd2:	fb07 8803 	mla	r8, r7, r3, r8
 8018cd6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8018cda:	fb0e 8303 	mla	r3, lr, r3, r8
 8018cde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018ce2:	fb0c f606 	mul.w	r6, ip, r6
 8018ce6:	0a1b      	lsrs	r3, r3, #8
 8018ce8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018cec:	fb05 6202 	mla	r2, r5, r2, r6
 8018cf0:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8018cf4:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8018cf8:	fb07 2703 	mla	r7, r7, r3, r2
 8018cfc:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018d00:	b295      	uxth	r5, r2
 8018d02:	9a03      	ldr	r2, [sp, #12]
 8018d04:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8018d08:	436a      	muls	r2, r5
 8018d0a:	fb0e 7303 	mla	r3, lr, r3, r7
 8018d0e:	1c50      	adds	r0, r2, #1
 8018d10:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8018d14:	0a1b      	lsrs	r3, r3, #8
 8018d16:	9a00      	ldr	r2, [sp, #0]
 8018d18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018d1c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018d20:	ea48 0303 	orr.w	r3, r8, r3
 8018d24:	b2c0      	uxtb	r0, r0
 8018d26:	fb12 f200 	smulbb	r2, r2, r0
 8018d2a:	0c1e      	lsrs	r6, r3, #16
 8018d2c:	fb06 2605 	mla	r6, r6, r5, r2
 8018d30:	9a01      	ldr	r2, [sp, #4]
 8018d32:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8018d36:	fb12 f200 	smulbb	r2, r2, r0
 8018d3a:	fb04 2205 	mla	r2, r4, r5, r2
 8018d3e:	b294      	uxth	r4, r2
 8018d40:	9a02      	ldr	r2, [sp, #8]
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	fb12 f200 	smulbb	r2, r2, r0
 8018d48:	fb03 2205 	mla	r2, r3, r5, r2
 8018d4c:	b2b6      	uxth	r6, r6
 8018d4e:	b292      	uxth	r2, r2
 8018d50:	1c73      	adds	r3, r6, #1
 8018d52:	1c50      	adds	r0, r2, #1
 8018d54:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8018d58:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018d5c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8018d60:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8018d64:	4313      	orrs	r3, r2
 8018d66:	1c62      	adds	r2, r4, #1
 8018d68:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8018d6c:	0952      	lsrs	r2, r2, #5
 8018d6e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018d72:	4313      	orrs	r3, r2
 8018d74:	800b      	strh	r3, [r1, #0]
 8018d76:	b005      	add	sp, #20
 8018d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7c:	08022217 	.word	0x08022217
 8018d80:	08022775 	.word	0x08022775
 8018d84:	0802229f 	.word	0x0802229f

08018d88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d8c:	ed2d 8b08 	vpush	{d8-d11}
 8018d90:	b09b      	sub	sp, #108	; 0x6c
 8018d92:	eeb0 aa40 	vmov.f32	s20, s0
 8018d96:	9309      	str	r3, [sp, #36]	; 0x24
 8018d98:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8018d9c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8018d9e:	9311      	str	r3, [sp, #68]	; 0x44
 8018da0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8018da4:	9114      	str	r1, [sp, #80]	; 0x50
 8018da6:	9317      	str	r3, [sp, #92]	; 0x5c
 8018da8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8018dac:	9019      	str	r0, [sp, #100]	; 0x64
 8018dae:	6868      	ldr	r0, [r5, #4]
 8018db0:	9218      	str	r2, [sp, #96]	; 0x60
 8018db2:	fb00 1303 	mla	r3, r0, r3, r1
 8018db6:	6829      	ldr	r1, [r5, #0]
 8018db8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8018dba:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8018dbe:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8018dc4:	6813      	ldr	r3, [r2, #0]
 8018dc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8018dc8:	6853      	ldr	r3, [r2, #4]
 8018dca:	3304      	adds	r3, #4
 8018dcc:	eef0 9a60 	vmov.f32	s19, s1
 8018dd0:	eeb0 9a41 	vmov.f32	s18, s2
 8018dd4:	eeb0 8a62 	vmov.f32	s16, s5
 8018dd8:	eef0 8a43 	vmov.f32	s17, s6
 8018ddc:	eef0 ba44 	vmov.f32	s23, s8
 8018de0:	eeb0 ba64 	vmov.f32	s22, s9
 8018de4:	eef0 aa45 	vmov.f32	s21, s10
 8018de8:	9308      	str	r3, [sp, #32]
 8018dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	dc03      	bgt.n	8018df8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8018df0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	f340 8363 	ble.w	80194be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8018df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	f340 81ad 	ble.w	801915a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 8018e00:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018e02:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e04:	1412      	asrs	r2, r2, #16
 8018e06:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018e0a:	d42f      	bmi.n	8018e6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8018e0c:	1c51      	adds	r1, r2, #1
 8018e0e:	428c      	cmp	r4, r1
 8018e10:	dd2f      	ble.n	8018e72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	db2d      	blt.n	8018e72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8018e16:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018e18:	1c59      	adds	r1, r3, #1
 8018e1a:	4288      	cmp	r0, r1
 8018e1c:	dd29      	ble.n	8018e72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8018e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e20:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018e22:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018e24:	3b01      	subs	r3, #1
 8018e26:	fb02 1203 	mla	r2, r2, r3, r1
 8018e2a:	1412      	asrs	r2, r2, #16
 8018e2c:	d42b      	bmi.n	8018e86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8018e2e:	3201      	adds	r2, #1
 8018e30:	4294      	cmp	r4, r2
 8018e32:	dd28      	ble.n	8018e86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8018e34:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8018e36:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8018e38:	fb02 1303 	mla	r3, r2, r3, r1
 8018e3c:	141b      	asrs	r3, r3, #16
 8018e3e:	d422      	bmi.n	8018e86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8018e40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018e42:	3301      	adds	r3, #1
 8018e44:	429a      	cmp	r2, r3
 8018e46:	dd1e      	ble.n	8018e86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8018e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e4a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018e4e:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8018e52:	9312      	str	r3, [sp, #72]	; 0x48
 8018e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	f300 81ea 	bgt.w	8019230 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 8018e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018e68:	930c      	str	r3, [sp, #48]	; 0x30
 8018e6a:	e178      	b.n	801915e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 8018e6c:	1c51      	adds	r1, r2, #1
 8018e6e:	f040 8165 	bne.w	801913c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018e72:	42a2      	cmp	r2, r4
 8018e74:	f280 8162 	bge.w	801913c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018e78:	1c5f      	adds	r7, r3, #1
 8018e7a:	f2c0 815f 	blt.w	801913c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018e7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018e80:	4293      	cmp	r3, r2
 8018e82:	f280 815b 	bge.w	801913c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e88:	9316      	str	r3, [sp, #88]	; 0x58
 8018e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e8c:	9312      	str	r3, [sp, #72]	; 0x48
 8018e8e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8018e92:	9315      	str	r3, [sp, #84]	; 0x54
 8018e94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	dde0      	ble.n	8018e5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8018e9a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018e9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018e9e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8018ea2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8018ea4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018ea8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018eaa:	1412      	asrs	r2, r2, #16
 8018eac:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018eb0:	f100 81a5 	bmi.w	80191fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 8018eb4:	1c55      	adds	r5, r2, #1
 8018eb6:	42ac      	cmp	r4, r5
 8018eb8:	f340 81a3 	ble.w	8019202 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	f2c0 81a0 	blt.w	8019202 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8018ec2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8018ec4:	1c5d      	adds	r5, r3, #1
 8018ec6:	42af      	cmp	r7, r5
 8018ec8:	f340 819b 	ble.w	8019202 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8018ecc:	fb03 2304 	mla	r3, r3, r4, r2
 8018ed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018ed2:	18d5      	adds	r5, r2, r3
 8018ed4:	5cd3      	ldrb	r3, [r2, r3]
 8018ed6:	9a08      	ldr	r2, [sp, #32]
 8018ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018edc:	0e1f      	lsrs	r7, r3, #24
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	f000 817c 	beq.w	80191dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8018ee4:	786a      	ldrb	r2, [r5, #1]
 8018ee6:	9e08      	ldr	r6, [sp, #32]
 8018ee8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8018eec:	920d      	str	r2, [sp, #52]	; 0x34
 8018eee:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8018ef2:	2900      	cmp	r1, #0
 8018ef4:	f000 817d 	beq.w	80191f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 8018ef8:	192a      	adds	r2, r5, r4
 8018efa:	5d2d      	ldrb	r5, [r5, r4]
 8018efc:	7852      	ldrb	r2, [r2, #1]
 8018efe:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8018f02:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8018f06:	950a      	str	r5, [sp, #40]	; 0x28
 8018f08:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8018f0c:	920e      	str	r2, [sp, #56]	; 0x38
 8018f0e:	0e15      	lsrs	r5, r2, #24
 8018f10:	b280      	uxth	r0, r0
 8018f12:	b289      	uxth	r1, r1
 8018f14:	fb00 fa01 	mul.w	sl, r0, r1
 8018f18:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8018f1c:	0100      	lsls	r0, r0, #4
 8018f1e:	eba0 080a 	sub.w	r8, r0, sl
 8018f22:	b289      	uxth	r1, r1
 8018f24:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8018f28:	fa1f f888 	uxth.w	r8, r8
 8018f2c:	1a52      	subs	r2, r2, r1
 8018f2e:	b292      	uxth	r2, r2
 8018f30:	fb08 f00e 	mul.w	r0, r8, lr
 8018f34:	fb02 0007 	mla	r0, r2, r7, r0
 8018f38:	fb01 0009 	mla	r0, r1, r9, r0
 8018f3c:	fb0a 0005 	mla	r0, sl, r5, r0
 8018f40:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018f44:	2800      	cmp	r0, #0
 8018f46:	f000 80ea 	beq.w	801911e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8018f4a:	2fff      	cmp	r7, #255	; 0xff
 8018f4c:	d01a      	beq.n	8018f84 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 8018f4e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018f52:	fb07 fc0c 	mul.w	ip, r7, ip
 8018f56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018f5a:	435f      	muls	r7, r3
 8018f5c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018f60:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018f64:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018f68:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8018f6c:	4463      	add	r3, ip
 8018f6e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8018f72:	0a1b      	lsrs	r3, r3, #8
 8018f74:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018f78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018f7c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8018f80:	ea43 030b 	orr.w	r3, r3, fp
 8018f84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018f88:	d01e      	beq.n	8018fc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8018f8a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8018f8c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8018f90:	fb0e fb0b 	mul.w	fp, lr, fp
 8018f94:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8018f98:	fb0e fe07 	mul.w	lr, lr, r7
 8018f9c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8018fa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018fa4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018fa8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8018fac:	44dc      	add	ip, fp
 8018fae:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8018fb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018fb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018fba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018fbe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018fc2:	ea4c 060e 	orr.w	r6, ip, lr
 8018fc6:	960d      	str	r6, [sp, #52]	; 0x34
 8018fc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018fcc:	d01e      	beq.n	801900c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 8018fce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018fd0:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8018fd4:	fb09 fe0e 	mul.w	lr, r9, lr
 8018fd8:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8018fdc:	fb09 f907 	mul.w	r9, r9, r7
 8018fe0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8018fe4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018fe8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8018fec:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8018ff0:	44f4      	add	ip, lr
 8018ff2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018ff6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018ffa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018ffe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019002:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019006:	ea4c 0609 	orr.w	r6, ip, r9
 801900a:	960a      	str	r6, [sp, #40]	; 0x28
 801900c:	2dff      	cmp	r5, #255	; 0xff
 801900e:	d01c      	beq.n	801904a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8019010:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019012:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8019016:	fb05 fe0e 	mul.w	lr, r5, lr
 801901a:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801901e:	437d      	muls	r5, r7
 8019020:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019024:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019028:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801902c:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8019030:	44f4      	add	ip, lr
 8019032:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8019036:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801903a:	0a2d      	lsrs	r5, r5, #8
 801903c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019040:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019044:	ea4c 0505 	orr.w	r5, ip, r5
 8019048:	950e      	str	r5, [sp, #56]	; 0x38
 801904a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801904c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801904e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019052:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8019056:	fb08 f505 	mul.w	r5, r8, r5
 801905a:	fb02 5507 	mla	r5, r2, r7, r5
 801905e:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 8019062:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019064:	fb01 5507 	mla	r5, r1, r7, r5
 8019068:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801906c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801906e:	fb0a 5507 	mla	r5, sl, r7, r5
 8019072:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8019076:	fb08 f807 	mul.w	r8, r8, r7
 801907a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801907e:	fb02 8303 	mla	r3, r2, r3, r8
 8019082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019084:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019086:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801908a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801908c:	fb01 330c 	mla	r3, r1, ip, r3
 8019090:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019094:	fb0a 3a01 	mla	sl, sl, r1, r3
 8019098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801909a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801909c:	881f      	ldrh	r7, [r3, #0]
 801909e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190a0:	0a2d      	lsrs	r5, r5, #8
 80190a2:	4343      	muls	r3, r0
 80190a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190a8:	1c58      	adds	r0, r3, #1
 80190aa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80190ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80190b2:	ea45 050a 	orr.w	r5, r5, sl
 80190b6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80190ba:	0c29      	lsrs	r1, r5, #16
 80190bc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80190c0:	123b      	asrs	r3, r7, #8
 80190c2:	b2c0      	uxtb	r0, r0
 80190c4:	fb11 f102 	smulbb	r1, r1, r2
 80190c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80190cc:	fb03 1300 	mla	r3, r3, r0, r1
 80190d0:	b299      	uxth	r1, r3
 80190d2:	10fa      	asrs	r2, r7, #3
 80190d4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80190d8:	fb13 f306 	smulbb	r3, r3, r6
 80190dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80190e0:	fb02 3200 	mla	r2, r2, r0, r3
 80190e4:	b2ed      	uxtb	r5, r5
 80190e6:	00fb      	lsls	r3, r7, #3
 80190e8:	b2db      	uxtb	r3, r3
 80190ea:	fb15 f506 	smulbb	r5, r5, r6
 80190ee:	fb03 5500 	mla	r5, r3, r0, r5
 80190f2:	b292      	uxth	r2, r2
 80190f4:	b2ad      	uxth	r5, r5
 80190f6:	1c4b      	adds	r3, r1, #1
 80190f8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80190fc:	1c68      	adds	r0, r5, #1
 80190fe:	1c51      	adds	r1, r2, #1
 8019100:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8019104:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019108:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801910c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019110:	0952      	lsrs	r2, r2, #5
 8019112:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019116:	432b      	orrs	r3, r5
 8019118:	4313      	orrs	r3, r2
 801911a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801911c:	8013      	strh	r3, [r2, #0]
 801911e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019120:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019122:	3302      	adds	r3, #2
 8019124:	9312      	str	r3, [sp, #72]	; 0x48
 8019126:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019128:	4413      	add	r3, r2
 801912a:	932d      	str	r3, [sp, #180]	; 0xb4
 801912c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801912e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019130:	4413      	add	r3, r2
 8019132:	932e      	str	r3, [sp, #184]	; 0xb8
 8019134:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019136:	3b01      	subs	r3, #1
 8019138:	9316      	str	r3, [sp, #88]	; 0x58
 801913a:	e6ab      	b.n	8018e94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801913c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801913e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019140:	4413      	add	r3, r2
 8019142:	932d      	str	r3, [sp, #180]	; 0xb4
 8019144:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8019146:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019148:	4413      	add	r3, r2
 801914a:	932e      	str	r3, [sp, #184]	; 0xb8
 801914c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801914e:	3b01      	subs	r3, #1
 8019150:	9309      	str	r3, [sp, #36]	; 0x24
 8019152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019154:	3302      	adds	r3, #2
 8019156:	930c      	str	r3, [sp, #48]	; 0x30
 8019158:	e64e      	b.n	8018df8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801915a:	f47f ae60 	bne.w	8018e1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801915e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019160:	2b00      	cmp	r3, #0
 8019162:	f340 81ac 	ble.w	80194be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8019166:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801916a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801916e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019172:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019174:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019178:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801917c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019180:	eef0 6a48 	vmov.f32	s13, s16
 8019184:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801918c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019190:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8019194:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019198:	eef0 6a68 	vmov.f32	s13, s17
 801919c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80191a0:	ee18 2a10 	vmov	r2, s16
 80191a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80191a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80191ac:	ee18 2a90 	vmov	r2, s17
 80191b0:	932f      	str	r3, [sp, #188]	; 0xbc
 80191b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80191b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80191b8:	9330      	str	r3, [sp, #192]	; 0xc0
 80191ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80191bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191be:	3b01      	subs	r3, #1
 80191c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191c4:	9314      	str	r3, [sp, #80]	; 0x50
 80191c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80191c8:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80191cc:	bf08      	it	eq
 80191ce:	4613      	moveq	r3, r2
 80191d0:	9309      	str	r3, [sp, #36]	; 0x24
 80191d2:	eef0 8a67 	vmov.f32	s17, s15
 80191d6:	eeb0 8a47 	vmov.f32	s16, s14
 80191da:	e606      	b.n	8018dea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80191dc:	b161      	cbz	r1, 80191f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 80191de:	5d2a      	ldrb	r2, [r5, r4]
 80191e0:	9d08      	ldr	r5, [sp, #32]
 80191e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80191e6:	920a      	str	r2, [sp, #40]	; 0x28
 80191e8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80191ec:	25ff      	movs	r5, #255	; 0xff
 80191ee:	46ae      	mov	lr, r5
 80191f0:	e68e      	b.n	8018f10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 80191f2:	25ff      	movs	r5, #255	; 0xff
 80191f4:	46a9      	mov	r9, r5
 80191f6:	e68b      	b.n	8018f10 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 80191f8:	25ff      	movs	r5, #255	; 0xff
 80191fa:	46a9      	mov	r9, r5
 80191fc:	e7f7      	b.n	80191ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80191fe:	1c56      	adds	r6, r2, #1
 8019200:	d18d      	bne.n	801911e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019202:	4294      	cmp	r4, r2
 8019204:	dd8b      	ble.n	801911e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019206:	1c5d      	adds	r5, r3, #1
 8019208:	db89      	blt.n	801911e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801920a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801920c:	429d      	cmp	r5, r3
 801920e:	dd86      	ble.n	801911e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019210:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8019214:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8019216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019218:	9202      	str	r2, [sp, #8]
 801921a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801921e:	e9cd 4300 	strd	r4, r3, [sp]
 8019222:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8019226:	9b08      	ldr	r3, [sp, #32]
 8019228:	9819      	ldr	r0, [sp, #100]	; 0x64
 801922a:	f7ff fc49 	bl	8018ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801922e:	e776      	b.n	801911e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8019230:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019232:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019234:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8019238:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801923a:	1412      	asrs	r2, r2, #16
 801923c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8019240:	141b      	asrs	r3, r3, #16
 8019242:	fb04 2303 	mla	r3, r4, r3, r2
 8019246:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019248:	18d5      	adds	r5, r2, r3
 801924a:	5cd3      	ldrb	r3, [r2, r3]
 801924c:	9a08      	ldr	r2, [sp, #32]
 801924e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019252:	0e1e      	lsrs	r6, r3, #24
 8019254:	2900      	cmp	r1, #0
 8019256:	f000 8121 	beq.w	801949c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801925a:	786a      	ldrb	r2, [r5, #1]
 801925c:	9f08      	ldr	r7, [sp, #32]
 801925e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8019262:	920f      	str	r2, [sp, #60]	; 0x3c
 8019264:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019268:	2800      	cmp	r0, #0
 801926a:	f000 8122 	beq.w	80194b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 801926e:	192a      	adds	r2, r5, r4
 8019270:	5d2d      	ldrb	r5, [r5, r4]
 8019272:	7852      	ldrb	r2, [r2, #1]
 8019274:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8019278:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801927c:	950b      	str	r5, [sp, #44]	; 0x2c
 801927e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8019282:	9210      	str	r2, [sp, #64]	; 0x40
 8019284:	0e15      	lsrs	r5, r2, #24
 8019286:	b289      	uxth	r1, r1
 8019288:	b280      	uxth	r0, r0
 801928a:	fb01 f900 	mul.w	r9, r1, r0
 801928e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019292:	0109      	lsls	r1, r1, #4
 8019294:	eba1 0e09 	sub.w	lr, r1, r9
 8019298:	b280      	uxth	r0, r0
 801929a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801929e:	fa1f fe8e 	uxth.w	lr, lr
 80192a2:	1a12      	subs	r2, r2, r0
 80192a4:	b292      	uxth	r2, r2
 80192a6:	fb0e f10c 	mul.w	r1, lr, ip
 80192aa:	fb02 1106 	mla	r1, r2, r6, r1
 80192ae:	fb00 1108 	mla	r1, r0, r8, r1
 80192b2:	fb09 1105 	mla	r1, r9, r5, r1
 80192b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80192ba:	2900      	cmp	r1, #0
 80192bc:	f000 80e0 	beq.w	8019480 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 80192c0:	2eff      	cmp	r6, #255	; 0xff
 80192c2:	d016      	beq.n	80192f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 80192c4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80192c8:	4377      	muls	r7, r6
 80192ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80192ce:	435e      	muls	r6, r3
 80192d0:	0a3b      	lsrs	r3, r7, #8
 80192d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80192d6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80192da:	443b      	add	r3, r7
 80192dc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80192e0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80192e4:	0a1b      	lsrs	r3, r3, #8
 80192e6:	0a3f      	lsrs	r7, r7, #8
 80192e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80192ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80192f0:	433b      	orrs	r3, r7
 80192f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80192f6:	d01d      	beq.n	8019334 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 80192f8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80192fa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80192fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019300:	fb0c f606 	mul.w	r6, ip, r6
 8019304:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019308:	fb0c fc07 	mul.w	ip, ip, r7
 801930c:	0a37      	lsrs	r7, r6, #8
 801930e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019312:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8019316:	4437      	add	r7, r6
 8019318:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801931c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8019320:	0a3f      	lsrs	r7, r7, #8
 8019322:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019326:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801932a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801932e:	ea47 060c 	orr.w	r6, r7, ip
 8019332:	960f      	str	r6, [sp, #60]	; 0x3c
 8019334:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019338:	d01d      	beq.n	8019376 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 801933a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801933c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019340:	fb08 fc0c 	mul.w	ip, r8, ip
 8019344:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019348:	fb08 f806 	mul.w	r8, r8, r6
 801934c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8019350:	f508 7680 	add.w	r6, r8, #256	; 0x100
 8019354:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019358:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801935c:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 8019360:	4467      	add	r7, ip
 8019362:	0a3f      	lsrs	r7, r7, #8
 8019364:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019368:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801936c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019370:	ea47 0608 	orr.w	r6, r7, r8
 8019374:	960b      	str	r6, [sp, #44]	; 0x2c
 8019376:	2dff      	cmp	r5, #255	; 0xff
 8019378:	d01a      	beq.n	80193b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801937a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801937c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019380:	fb05 fc0c 	mul.w	ip, r5, ip
 8019384:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019388:	4375      	muls	r5, r6
 801938a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801938e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019392:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019396:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801939a:	4467      	add	r7, ip
 801939c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80193a0:	0a3f      	lsrs	r7, r7, #8
 80193a2:	0a2d      	lsrs	r5, r5, #8
 80193a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80193a8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80193ac:	433d      	orrs	r5, r7
 80193ae:	9510      	str	r5, [sp, #64]	; 0x40
 80193b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80193b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80193b6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80193ba:	fb0e f505 	mul.w	r5, lr, r5
 80193be:	fb02 5506 	mla	r5, r2, r6, r5
 80193c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80193c4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80193c8:	fb00 5506 	mla	r5, r0, r6, r5
 80193cc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80193ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80193d2:	fb09 5506 	mla	r5, r9, r6, r5
 80193d6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80193d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80193dc:	fb0e fe06 	mul.w	lr, lr, r6
 80193e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80193e4:	fb02 e303 	mla	r3, r2, r3, lr
 80193e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80193ea:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80193ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80193f0:	fb00 3307 	mla	r3, r0, r7, r3
 80193f4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80193f8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80193fc:	fb01 f10b 	mul.w	r1, r1, fp
 8019400:	0a2d      	lsrs	r5, r5, #8
 8019402:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019406:	f8ba 0000 	ldrh.w	r0, [sl]
 801940a:	1c4b      	adds	r3, r1, #1
 801940c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019410:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019414:	ea45 050c 	orr.w	r5, r5, ip
 8019418:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801941c:	1202      	asrs	r2, r0, #8
 801941e:	0c2b      	lsrs	r3, r5, #16
 8019420:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019424:	b2c9      	uxtb	r1, r1
 8019426:	fb13 f30b 	smulbb	r3, r3, fp
 801942a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801942e:	fb02 3201 	mla	r2, r2, r1, r3
 8019432:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8019436:	10c3      	asrs	r3, r0, #3
 8019438:	b2ed      	uxtb	r5, r5
 801943a:	00c0      	lsls	r0, r0, #3
 801943c:	b2c0      	uxtb	r0, r0
 801943e:	fb15 f50b 	smulbb	r5, r5, fp
 8019442:	fb00 5001 	mla	r0, r0, r1, r5
 8019446:	b292      	uxth	r2, r2
 8019448:	fb16 f60b 	smulbb	r6, r6, fp
 801944c:	b280      	uxth	r0, r0
 801944e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019452:	fb03 6301 	mla	r3, r3, r1, r6
 8019456:	1c51      	adds	r1, r2, #1
 8019458:	1c46      	adds	r6, r0, #1
 801945a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801945e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8019462:	b29b      	uxth	r3, r3
 8019464:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019468:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801946c:	4332      	orrs	r2, r6
 801946e:	1c5e      	adds	r6, r3, #1
 8019470:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8019474:	095b      	lsrs	r3, r3, #5
 8019476:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801947a:	431a      	orrs	r2, r3
 801947c:	f8aa 2000 	strh.w	r2, [sl]
 8019480:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019482:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019484:	4413      	add	r3, r2
 8019486:	932d      	str	r3, [sp, #180]	; 0xb4
 8019488:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801948a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801948c:	4413      	add	r3, r2
 801948e:	932e      	str	r3, [sp, #184]	; 0xb8
 8019490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019492:	3b01      	subs	r3, #1
 8019494:	f10a 0a02 	add.w	sl, sl, #2
 8019498:	9312      	str	r3, [sp, #72]	; 0x48
 801949a:	e4db      	b.n	8018e54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801949c:	b160      	cbz	r0, 80194b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801949e:	5d2a      	ldrb	r2, [r5, r4]
 80194a0:	9d08      	ldr	r5, [sp, #32]
 80194a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80194a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80194a8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80194ac:	25ff      	movs	r5, #255	; 0xff
 80194ae:	46ac      	mov	ip, r5
 80194b0:	e6e9      	b.n	8019286 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 80194b2:	25ff      	movs	r5, #255	; 0xff
 80194b4:	46a8      	mov	r8, r5
 80194b6:	e6e6      	b.n	8019286 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 80194b8:	25ff      	movs	r5, #255	; 0xff
 80194ba:	46a8      	mov	r8, r5
 80194bc:	e7f7      	b.n	80194ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 80194be:	b01b      	add	sp, #108	; 0x6c
 80194c0:	ecbd 8b08 	vpop	{d8-d11}
 80194c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80194c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194cc:	8808      	ldrh	r0, [r1, #0]
 80194ce:	b085      	sub	sp, #20
 80194d0:	1206      	asrs	r6, r0, #8
 80194d2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80194d6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80194da:	9600      	str	r6, [sp, #0]
 80194dc:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80194e0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80194e4:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80194e8:	10c6      	asrs	r6, r0, #3
 80194ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80194ee:	9601      	str	r6, [sp, #4]
 80194f0:	00c0      	lsls	r0, r0, #3
 80194f2:	fb04 560c 	mla	r6, r4, ip, r5
 80194f6:	b2c0      	uxtb	r0, r0
 80194f8:	4692      	mov	sl, r2
 80194fa:	eb02 0e06 	add.w	lr, r2, r6
 80194fe:	9a00      	ldr	r2, [sp, #0]
 8019500:	9002      	str	r0, [sp, #8]
 8019502:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8019506:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801950a:	9a01      	ldr	r2, [sp, #4]
 801950c:	2c00      	cmp	r4, #0
 801950e:	4698      	mov	r8, r3
 8019510:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8019514:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019518:	db3e      	blt.n	8019598 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801951a:	45a1      	cmp	r9, r4
 801951c:	dd3c      	ble.n	8019598 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801951e:	2d00      	cmp	r5, #0
 8019520:	db38      	blt.n	8019594 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8019522:	45ac      	cmp	ip, r5
 8019524:	dd36      	ble.n	8019594 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 8019526:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801952a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801952e:	1c6e      	adds	r6, r5, #1
 8019530:	d435      	bmi.n	801959e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8019532:	45b4      	cmp	ip, r6
 8019534:	dd33      	ble.n	801959e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8019536:	b393      	cbz	r3, 801959e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8019538:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801953c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8019540:	3401      	adds	r4, #1
 8019542:	d430      	bmi.n	80195a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 8019544:	45a1      	cmp	r9, r4
 8019546:	dd2e      	ble.n	80195a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 8019548:	b36f      	cbz	r7, 80195a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801954a:	2d00      	cmp	r5, #0
 801954c:	db29      	blt.n	80195a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801954e:	45ac      	cmp	ip, r5
 8019550:	dd27      	ble.n	80195a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8019552:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8019556:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801955a:	3501      	adds	r5, #1
 801955c:	d407      	bmi.n	801956e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801955e:	45ac      	cmp	ip, r5
 8019560:	dd05      	ble.n	801956e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8019562:	b123      	cbz	r3, 801956e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8019564:	44f4      	add	ip, lr
 8019566:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801956a:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801956e:	2b0f      	cmp	r3, #15
 8019570:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8019574:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8019578:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801957c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8019580:	d801      	bhi.n	8019586 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8019582:	2f0f      	cmp	r7, #15
 8019584:	d911      	bls.n	80195aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8019586:	4b79      	ldr	r3, [pc, #484]	; (801976c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 8019588:	4a79      	ldr	r2, [pc, #484]	; (8019770 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801958a:	487a      	ldr	r0, [pc, #488]	; (8019774 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801958c:	f240 3173 	movw	r1, #883	; 0x373
 8019590:	f004 ff28 	bl	801e3e4 <__assert_func>
 8019594:	4602      	mov	r2, r0
 8019596:	e7ca      	b.n	801952e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8019598:	4606      	mov	r6, r0
 801959a:	4602      	mov	r2, r0
 801959c:	e7d0      	b.n	8019540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801959e:	4606      	mov	r6, r0
 80195a0:	e7ce      	b.n	8019540 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 80195a2:	4604      	mov	r4, r0
 80195a4:	e7d9      	b.n	801955a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 80195a6:	4604      	mov	r4, r0
 80195a8:	e7e1      	b.n	801956e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80195aa:	b29b      	uxth	r3, r3
 80195ac:	b2bf      	uxth	r7, r7
 80195ae:	fb03 fe07 	mul.w	lr, r3, r7
 80195b2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80195b6:	011b      	lsls	r3, r3, #4
 80195b8:	eba3 0c0e 	sub.w	ip, r3, lr
 80195bc:	b2bf      	uxth	r7, r7
 80195be:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80195c2:	fa1f fc8c 	uxth.w	ip, ip
 80195c6:	1bed      	subs	r5, r5, r7
 80195c8:	b2ad      	uxth	r5, r5
 80195ca:	fb0c f30a 	mul.w	r3, ip, sl
 80195ce:	fb05 330b 	mla	r3, r5, fp, r3
 80195d2:	fb07 3309 	mla	r3, r7, r9, r3
 80195d6:	fb0e 3308 	mla	r3, lr, r8, r3
 80195da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80195de:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80195e2:	9303      	str	r3, [sp, #12]
 80195e4:	d018      	beq.n	8019618 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 80195e6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80195ea:	fb0b f303 	mul.w	r3, fp, r3
 80195ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80195f2:	fb0b fb02 	mul.w	fp, fp, r2
 80195f6:	0a1a      	lsrs	r2, r3, #8
 80195f8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80195fc:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8019600:	441a      	add	r2, r3
 8019602:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8019606:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801960a:	0a12      	lsrs	r2, r2, #8
 801960c:	0a1b      	lsrs	r3, r3, #8
 801960e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019616:	431a      	orrs	r2, r3
 8019618:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801961c:	d019      	beq.n	8019652 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 801961e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8019622:	fb0a fb0b 	mul.w	fp, sl, fp
 8019626:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801962a:	fb0a fa06 	mul.w	sl, sl, r6
 801962e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8019632:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019636:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801963a:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801963e:	445e      	add	r6, fp
 8019640:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8019644:	0a36      	lsrs	r6, r6, #8
 8019646:	0a1b      	lsrs	r3, r3, #8
 8019648:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801964c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019650:	431e      	orrs	r6, r3
 8019652:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019656:	d019      	beq.n	801968c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8019658:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801965c:	fb09 fa0a 	mul.w	sl, r9, sl
 8019660:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019664:	fb09 f904 	mul.w	r9, r9, r4
 8019668:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801966c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019670:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019674:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8019678:	4454      	add	r4, sl
 801967a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801967e:	0a24      	lsrs	r4, r4, #8
 8019680:	0a1b      	lsrs	r3, r3, #8
 8019682:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801968a:	431c      	orrs	r4, r3
 801968c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019690:	d019      	beq.n	80196c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 8019692:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8019696:	fb08 f909 	mul.w	r9, r8, r9
 801969a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801969e:	fb08 f800 	mul.w	r8, r8, r0
 80196a2:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80196a6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80196aa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80196ae:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80196b2:	4448      	add	r0, r9
 80196b4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80196b8:	0a00      	lsrs	r0, r0, #8
 80196ba:	0a1b      	lsrs	r3, r3, #8
 80196bc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80196c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80196c4:	4318      	orrs	r0, r3
 80196c6:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80196ca:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80196ce:	fb0c f808 	mul.w	r8, ip, r8
 80196d2:	fb05 8803 	mla	r8, r5, r3, r8
 80196d6:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80196da:	fb07 8803 	mla	r8, r7, r3, r8
 80196de:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80196e2:	fb0e 8303 	mla	r3, lr, r3, r8
 80196e6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80196ea:	0a1b      	lsrs	r3, r3, #8
 80196ec:	fb0c f606 	mul.w	r6, ip, r6
 80196f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80196f4:	fb05 6202 	mla	r2, r5, r2, r6
 80196f8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80196fc:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8019700:	fb07 2703 	mla	r7, r7, r3, r2
 8019704:	9a03      	ldr	r2, [sp, #12]
 8019706:	9c02      	ldr	r4, [sp, #8]
 8019708:	9d01      	ldr	r5, [sp, #4]
 801970a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801970e:	fb0e 7303 	mla	r3, lr, r3, r7
 8019712:	43d0      	mvns	r0, r2
 8019714:	9a00      	ldr	r2, [sp, #0]
 8019716:	b2c0      	uxtb	r0, r0
 8019718:	0a1b      	lsrs	r3, r3, #8
 801971a:	4342      	muls	r2, r0
 801971c:	4344      	muls	r4, r0
 801971e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019722:	ea48 0303 	orr.w	r3, r8, r3
 8019726:	4345      	muls	r5, r0
 8019728:	4620      	mov	r0, r4
 801972a:	1c54      	adds	r4, r2, #1
 801972c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8019730:	0c1a      	lsrs	r2, r3, #16
 8019732:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8019736:	4a10      	ldr	r2, [pc, #64]	; (8019778 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8019738:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 801973c:	1c44      	adds	r4, r0, #1
 801973e:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8019742:	b2d8      	uxtb	r0, r3
 8019744:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8019748:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801974c:	1c68      	adds	r0, r5, #1
 801974e:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8019752:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019756:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801975a:	00db      	lsls	r3, r3, #3
 801975c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019760:	4313      	orrs	r3, r2
 8019762:	800b      	strh	r3, [r1, #0]
 8019764:	b005      	add	sp, #20
 8019766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801976a:	bf00      	nop
 801976c:	08022217 	.word	0x08022217
 8019770:	08022775 	.word	0x08022775
 8019774:	0802229f 	.word	0x0802229f
 8019778:	fffff800 	.word	0xfffff800

0801977c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019780:	ed2d 8b08 	vpush	{d8-d11}
 8019784:	b097      	sub	sp, #92	; 0x5c
 8019786:	eeb0 aa40 	vmov.f32	s20, s0
 801978a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801978c:	9307      	str	r3, [sp, #28]
 801978e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8019792:	9112      	str	r1, [sp, #72]	; 0x48
 8019794:	930f      	str	r3, [sp, #60]	; 0x3c
 8019796:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801979a:	9015      	str	r0, [sp, #84]	; 0x54
 801979c:	6868      	ldr	r0, [r5, #4]
 801979e:	9214      	str	r2, [sp, #80]	; 0x50
 80197a0:	fb00 1303 	mla	r3, r0, r3, r1
 80197a4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80197a6:	6829      	ldr	r1, [r5, #0]
 80197a8:	6855      	ldr	r5, [r2, #4]
 80197aa:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 80197ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80197b2:	930a      	str	r3, [sp, #40]	; 0x28
 80197b4:	6813      	ldr	r3, [r2, #0]
 80197b6:	9311      	str	r3, [sp, #68]	; 0x44
 80197b8:	eef0 9a60 	vmov.f32	s19, s1
 80197bc:	eeb0 9a41 	vmov.f32	s18, s2
 80197c0:	eeb0 8a62 	vmov.f32	s16, s5
 80197c4:	eef0 8a43 	vmov.f32	s17, s6
 80197c8:	eef0 ba44 	vmov.f32	s23, s8
 80197cc:	eeb0 ba64 	vmov.f32	s22, s9
 80197d0:	eef0 aa45 	vmov.f32	s21, s10
 80197d4:	3504      	adds	r5, #4
 80197d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80197d8:	2b00      	cmp	r3, #0
 80197da:	dc03      	bgt.n	80197e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80197dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80197de:	2b00      	cmp	r3, #0
 80197e0:	f340 834d 	ble.w	8019e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 80197e4:	9b07      	ldr	r3, [sp, #28]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	f340 819c 	ble.w	8019b24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 80197ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80197ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80197f0:	1412      	asrs	r2, r2, #16
 80197f2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80197f6:	d42d      	bmi.n	8019854 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80197f8:	1c51      	adds	r1, r2, #1
 80197fa:	428c      	cmp	r4, r1
 80197fc:	dd2d      	ble.n	801985a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80197fe:	2b00      	cmp	r3, #0
 8019800:	db2b      	blt.n	801985a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8019802:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019804:	1c59      	adds	r1, r3, #1
 8019806:	4288      	cmp	r0, r1
 8019808:	dd27      	ble.n	801985a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801980a:	9b07      	ldr	r3, [sp, #28]
 801980c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801980e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019810:	3b01      	subs	r3, #1
 8019812:	fb02 1203 	mla	r2, r2, r3, r1
 8019816:	1412      	asrs	r2, r2, #16
 8019818:	d429      	bmi.n	801986e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801981a:	3201      	adds	r2, #1
 801981c:	4294      	cmp	r4, r2
 801981e:	dd26      	ble.n	801986e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8019820:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019822:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019824:	fb02 1303 	mla	r3, r2, r3, r1
 8019828:	141b      	asrs	r3, r3, #16
 801982a:	d420      	bmi.n	801986e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801982c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801982e:	3301      	adds	r3, #1
 8019830:	429a      	cmp	r2, r3
 8019832:	dd1c      	ble.n	801986e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8019834:	9b07      	ldr	r3, [sp, #28]
 8019836:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801983a:	9310      	str	r3, [sp, #64]	; 0x40
 801983c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801983e:	2b00      	cmp	r3, #0
 8019840:	f300 81da 	bgt.w	8019bf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8019844:	9b07      	ldr	r3, [sp, #28]
 8019846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019848:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801984c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019850:	930a      	str	r3, [sp, #40]	; 0x28
 8019852:	e169      	b.n	8019b28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8019854:	1c51      	adds	r1, r2, #1
 8019856:	f040 8156 	bne.w	8019b06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801985a:	42a2      	cmp	r2, r4
 801985c:	f280 8153 	bge.w	8019b06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8019860:	1c5a      	adds	r2, r3, #1
 8019862:	f2c0 8150 	blt.w	8019b06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8019866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019868:	4293      	cmp	r3, r2
 801986a:	f280 814c 	bge.w	8019b06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801986e:	9b07      	ldr	r3, [sp, #28]
 8019870:	9313      	str	r3, [sp, #76]	; 0x4c
 8019872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019874:	9310      	str	r3, [sp, #64]	; 0x40
 8019876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019878:	2b00      	cmp	r3, #0
 801987a:	dde3      	ble.n	8019844 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801987c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801987e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019880:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019884:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019886:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801988a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801988c:	1412      	asrs	r2, r2, #16
 801988e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019892:	f100 8198 	bmi.w	8019bc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 8019896:	1c56      	adds	r6, r2, #1
 8019898:	42b4      	cmp	r4, r6
 801989a:	f340 8196 	ble.w	8019bca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801989e:	2b00      	cmp	r3, #0
 80198a0:	f2c0 8193 	blt.w	8019bca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80198a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80198a6:	1c5e      	adds	r6, r3, #1
 80198a8:	42b7      	cmp	r7, r6
 80198aa:	f340 818e 	ble.w	8019bca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 80198ae:	fb03 2304 	mla	r3, r3, r4, r2
 80198b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198b4:	18d6      	adds	r6, r2, r3
 80198b6:	5cd3      	ldrb	r3, [r2, r3]
 80198b8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80198bc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80198c0:	2900      	cmp	r1, #0
 80198c2:	f000 8170 	beq.w	8019ba6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80198c6:	7872      	ldrb	r2, [r6, #1]
 80198c8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80198cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80198ce:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80198d2:	2800      	cmp	r0, #0
 80198d4:	f000 8171 	beq.w	8019bba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 80198d8:	1932      	adds	r2, r6, r4
 80198da:	5d36      	ldrb	r6, [r6, r4]
 80198dc:	7852      	ldrb	r2, [r2, #1]
 80198de:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80198e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80198e6:	9608      	str	r6, [sp, #32]
 80198e8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80198ec:	920c      	str	r2, [sp, #48]	; 0x30
 80198ee:	0e16      	lsrs	r6, r2, #24
 80198f0:	b289      	uxth	r1, r1
 80198f2:	b280      	uxth	r0, r0
 80198f4:	fb01 fb00 	mul.w	fp, r1, r0
 80198f8:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80198fc:	0109      	lsls	r1, r1, #4
 80198fe:	eba1 090b 	sub.w	r9, r1, fp
 8019902:	b280      	uxth	r0, r0
 8019904:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8019908:	fa1f f989 	uxth.w	r9, r9
 801990c:	1a12      	subs	r2, r2, r0
 801990e:	b292      	uxth	r2, r2
 8019910:	fb09 f108 	mul.w	r1, r9, r8
 8019914:	fb02 110c 	mla	r1, r2, ip, r1
 8019918:	fb00 110a 	mla	r1, r0, sl, r1
 801991c:	fb0b 1106 	mla	r1, fp, r6, r1
 8019920:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019924:	2900      	cmp	r1, #0
 8019926:	f000 80df 	beq.w	8019ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801992a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801992e:	d01b      	beq.n	8019968 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 8019930:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019934:	fb0c fe0e 	mul.w	lr, ip, lr
 8019938:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801993c:	fb0c fc03 	mul.w	ip, ip, r3
 8019940:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8019944:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019948:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801994c:	4473      	add	r3, lr
 801994e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8019952:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8019956:	0a1b      	lsrs	r3, r3, #8
 8019958:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801995c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019960:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019964:	ea43 030e 	orr.w	r3, r3, lr
 8019968:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801996c:	d01e      	beq.n	80199ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801996e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019970:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8019974:	fb08 fc0c 	mul.w	ip, r8, ip
 8019978:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801997c:	fb08 f80e 	mul.w	r8, r8, lr
 8019980:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019984:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019988:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801998c:	44e6      	add	lr, ip
 801998e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8019992:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8019996:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801999a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801999e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80199a6:	ea4e 0708 	orr.w	r7, lr, r8
 80199aa:	970b      	str	r7, [sp, #44]	; 0x2c
 80199ac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80199b0:	d01e      	beq.n	80199f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80199b2:	9f08      	ldr	r7, [sp, #32]
 80199b4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80199b8:	fb0a f808 	mul.w	r8, sl, r8
 80199bc:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80199c0:	fb0a fa0c 	mul.w	sl, sl, ip
 80199c4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80199c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199cc:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80199d0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80199d4:	44c6      	add	lr, r8
 80199d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80199da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80199de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80199e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80199e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80199ea:	ea4e 070a 	orr.w	r7, lr, sl
 80199ee:	9708      	str	r7, [sp, #32]
 80199f0:	2eff      	cmp	r6, #255	; 0xff
 80199f2:	d01d      	beq.n	8019a30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80199f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80199f6:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80199fa:	fb06 f808 	mul.w	r8, r6, r8
 80199fe:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8019a02:	fb06 f60c 	mul.w	r6, r6, ip
 8019a06:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8019a0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019a0e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8019a12:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019a16:	44c6      	add	lr, r8
 8019a18:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019a1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019a20:	0a36      	lsrs	r6, r6, #8
 8019a22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019a26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019a2a:	ea4e 0606 	orr.w	r6, lr, r6
 8019a2e:	960c      	str	r6, [sp, #48]	; 0x30
 8019a30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019a32:	9f08      	ldr	r7, [sp, #32]
 8019a34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019a38:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019a3c:	fb09 f606 	mul.w	r6, r9, r6
 8019a40:	fb02 660c 	mla	r6, r2, ip, r6
 8019a44:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8019a48:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019a4a:	fb00 660c 	mla	r6, r0, ip, r6
 8019a4e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8019a52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019a54:	fb0b 660c 	mla	r6, fp, ip, r6
 8019a58:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8019a5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019a60:	fb09 f90c 	mul.w	r9, r9, ip
 8019a64:	fb02 9303 	mla	r3, r2, r3, r9
 8019a68:	9a08      	ldr	r2, [sp, #32]
 8019a6a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8019a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019a70:	fb00 330e 	mla	r3, r0, lr, r3
 8019a74:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8019a78:	fb0b 3b00 	mla	fp, fp, r0, r3
 8019a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a7e:	881b      	ldrh	r3, [r3, #0]
 8019a80:	43c9      	mvns	r1, r1
 8019a82:	1218      	asrs	r0, r3, #8
 8019a84:	b2c9      	uxtb	r1, r1
 8019a86:	10da      	asrs	r2, r3, #3
 8019a88:	0a36      	lsrs	r6, r6, #8
 8019a8a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019a8e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019a92:	00db      	lsls	r3, r3, #3
 8019a94:	4348      	muls	r0, r1
 8019a96:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019a9a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8019a9e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019aa2:	b2db      	uxtb	r3, r3
 8019aa4:	434b      	muls	r3, r1
 8019aa6:	ea46 060b 	orr.w	r6, r6, fp
 8019aaa:	434a      	muls	r2, r1
 8019aac:	1c41      	adds	r1, r0, #1
 8019aae:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8019ab2:	0c30      	lsrs	r0, r6, #16
 8019ab4:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8019ab8:	494e      	ldr	r1, [pc, #312]	; (8019bf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 8019aba:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8019abe:	1c59      	adds	r1, r3, #1
 8019ac0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019ac4:	b2f3      	uxtb	r3, r6
 8019ac6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8019aca:	1c51      	adds	r1, r2, #1
 8019acc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019ad0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019ad4:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8019ad8:	00f6      	lsls	r6, r6, #3
 8019ada:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8019ade:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019ae2:	431e      	orrs	r6, r3
 8019ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ae6:	801e      	strh	r6, [r3, #0]
 8019ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019aea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019aec:	3302      	adds	r3, #2
 8019aee:	9310      	str	r3, [sp, #64]	; 0x40
 8019af0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019af2:	4413      	add	r3, r2
 8019af4:	9329      	str	r3, [sp, #164]	; 0xa4
 8019af6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019af8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019afa:	4413      	add	r3, r2
 8019afc:	932a      	str	r3, [sp, #168]	; 0xa8
 8019afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019b00:	3b01      	subs	r3, #1
 8019b02:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b04:	e6b7      	b.n	8019876 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8019b06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019b08:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019b0a:	4413      	add	r3, r2
 8019b0c:	9329      	str	r3, [sp, #164]	; 0xa4
 8019b0e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019b10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b12:	4413      	add	r3, r2
 8019b14:	932a      	str	r3, [sp, #168]	; 0xa8
 8019b16:	9b07      	ldr	r3, [sp, #28]
 8019b18:	3b01      	subs	r3, #1
 8019b1a:	9307      	str	r3, [sp, #28]
 8019b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b1e:	3302      	adds	r3, #2
 8019b20:	930a      	str	r3, [sp, #40]	; 0x28
 8019b22:	e65f      	b.n	80197e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8019b24:	f47f ae71 	bne.w	801980a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8019b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	f340 81a7 	ble.w	8019e7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8019b30:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b38:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019b3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b3e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019b42:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019b46:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019b4a:	eef0 6a48 	vmov.f32	s13, s16
 8019b4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019b52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b56:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019b5a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8019b5e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019b62:	eef0 6a68 	vmov.f32	s13, s17
 8019b66:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019b6a:	ee18 2a10 	vmov	r2, s16
 8019b6e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b76:	ee18 2a90 	vmov	r2, s17
 8019b7a:	932b      	str	r3, [sp, #172]	; 0xac
 8019b7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b82:	932c      	str	r3, [sp, #176]	; 0xb0
 8019b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019b86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b88:	3b01      	subs	r3, #1
 8019b8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019b8e:	9312      	str	r3, [sp, #72]	; 0x48
 8019b90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b92:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8019b96:	bf08      	it	eq
 8019b98:	4613      	moveq	r3, r2
 8019b9a:	9307      	str	r3, [sp, #28]
 8019b9c:	eef0 8a67 	vmov.f32	s17, s15
 8019ba0:	eeb0 8a47 	vmov.f32	s16, s14
 8019ba4:	e617      	b.n	80197d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8019ba6:	b158      	cbz	r0, 8019bc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 8019ba8:	5d32      	ldrb	r2, [r6, r4]
 8019baa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019bae:	9208      	str	r2, [sp, #32]
 8019bb0:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8019bb4:	26ff      	movs	r6, #255	; 0xff
 8019bb6:	46b0      	mov	r8, r6
 8019bb8:	e69a      	b.n	80198f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8019bba:	26ff      	movs	r6, #255	; 0xff
 8019bbc:	46b2      	mov	sl, r6
 8019bbe:	e697      	b.n	80198f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8019bc0:	26ff      	movs	r6, #255	; 0xff
 8019bc2:	46b2      	mov	sl, r6
 8019bc4:	e7f7      	b.n	8019bb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8019bc6:	1c57      	adds	r7, r2, #1
 8019bc8:	d18e      	bne.n	8019ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019bca:	4294      	cmp	r4, r2
 8019bcc:	dd8c      	ble.n	8019ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019bce:	1c5e      	adds	r6, r3, #1
 8019bd0:	db8a      	blt.n	8019ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019bd2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019bd4:	429e      	cmp	r6, r3
 8019bd6:	dd87      	ble.n	8019ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019bd8:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8019bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019be0:	e9cd 4600 	strd	r4, r6, [sp]
 8019be4:	462b      	mov	r3, r5
 8019be6:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8019bea:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019bec:	f7ff fc6c 	bl	80194c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8019bf0:	e77a      	b.n	8019ae8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019bf2:	bf00      	nop
 8019bf4:	fffff800 	.word	0xfffff800
 8019bf8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019bfa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019bfc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019c00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019c02:	1409      	asrs	r1, r1, #16
 8019c04:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8019c08:	141b      	asrs	r3, r3, #16
 8019c0a:	fb04 1303 	mla	r3, r4, r3, r1
 8019c0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019c10:	18ce      	adds	r6, r1, r3
 8019c12:	5ccb      	ldrb	r3, [r1, r3]
 8019c14:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8019c18:	0e1f      	lsrs	r7, r3, #24
 8019c1a:	2a00      	cmp	r2, #0
 8019c1c:	f000 811f 	beq.w	8019e5e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 8019c20:	7871      	ldrb	r1, [r6, #1]
 8019c22:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8019c26:	910d      	str	r1, [sp, #52]	; 0x34
 8019c28:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	f000 8120 	beq.w	8019e72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 8019c32:	1931      	adds	r1, r6, r4
 8019c34:	5d36      	ldrb	r6, [r6, r4]
 8019c36:	7849      	ldrb	r1, [r1, #1]
 8019c38:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8019c3c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8019c40:	9609      	str	r6, [sp, #36]	; 0x24
 8019c42:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8019c46:	910e      	str	r1, [sp, #56]	; 0x38
 8019c48:	0e0e      	lsrs	r6, r1, #24
 8019c4a:	b292      	uxth	r2, r2
 8019c4c:	b280      	uxth	r0, r0
 8019c4e:	fb02 fa00 	mul.w	sl, r2, r0
 8019c52:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8019c56:	0112      	lsls	r2, r2, #4
 8019c58:	eba2 080a 	sub.w	r8, r2, sl
 8019c5c:	b280      	uxth	r0, r0
 8019c5e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8019c62:	fa1f f888 	uxth.w	r8, r8
 8019c66:	1a09      	subs	r1, r1, r0
 8019c68:	b289      	uxth	r1, r1
 8019c6a:	fb08 f20e 	mul.w	r2, r8, lr
 8019c6e:	fb01 2207 	mla	r2, r1, r7, r2
 8019c72:	fb00 2209 	mla	r2, r0, r9, r2
 8019c76:	fb0a 2206 	mla	r2, sl, r6, r2
 8019c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019c7e:	9213      	str	r2, [sp, #76]	; 0x4c
 8019c80:	2a00      	cmp	r2, #0
 8019c82:	f000 80de 	beq.w	8019e42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 8019c86:	2fff      	cmp	r7, #255	; 0xff
 8019c88:	d01a      	beq.n	8019cc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 8019c8a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019c8e:	fb07 fc0c 	mul.w	ip, r7, ip
 8019c92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019c96:	435f      	muls	r7, r3
 8019c98:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8019c9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019ca0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019ca4:	4463      	add	r3, ip
 8019ca6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8019caa:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8019cae:	0a1b      	lsrs	r3, r3, #8
 8019cb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cb4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019cb8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019cbc:	ea43 030c 	orr.w	r3, r3, ip
 8019cc0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019cc4:	d01f      	beq.n	8019d06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 8019cc6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019cc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019cca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019cce:	fb0e f707 	mul.w	r7, lr, r7
 8019cd2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019cd6:	fb0e fe0c 	mul.w	lr, lr, ip
 8019cda:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019cde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ce2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019ce6:	44bc      	add	ip, r7
 8019ce8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8019cec:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8019cf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019cf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019cfc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019d00:	ea4c 020e 	orr.w	r2, ip, lr
 8019d04:	920d      	str	r2, [sp, #52]	; 0x34
 8019d06:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019d0a:	d01e      	beq.n	8019d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 8019d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d0e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8019d12:	fb09 fe0e 	mul.w	lr, r9, lr
 8019d16:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8019d1a:	fb09 f907 	mul.w	r9, r9, r7
 8019d1e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019d22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019d26:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8019d2a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8019d2e:	44f4      	add	ip, lr
 8019d30:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019d34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d38:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019d3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019d40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019d44:	ea4c 0209 	orr.w	r2, ip, r9
 8019d48:	9209      	str	r2, [sp, #36]	; 0x24
 8019d4a:	2eff      	cmp	r6, #255	; 0xff
 8019d4c:	d01c      	beq.n	8019d88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 8019d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d50:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8019d54:	fb06 fe0e 	mul.w	lr, r6, lr
 8019d58:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8019d5c:	437e      	muls	r6, r7
 8019d5e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019d62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019d66:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8019d6a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8019d6e:	44f4      	add	ip, lr
 8019d70:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8019d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d78:	0a36      	lsrs	r6, r6, #8
 8019d7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019d7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019d82:	ea4c 0206 	orr.w	r2, ip, r6
 8019d86:	920e      	str	r2, [sp, #56]	; 0x38
 8019d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d8a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8019d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d90:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8019d94:	fb08 f606 	mul.w	r6, r8, r6
 8019d98:	fb01 6607 	mla	r6, r1, r7, r6
 8019d9c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8019da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019da2:	fb00 6607 	mla	r6, r0, r7, r6
 8019da6:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8019daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dac:	fb0a 6607 	mla	r6, sl, r7, r6
 8019db0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8019db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019db6:	fb08 f807 	mul.w	r8, r8, r7
 8019dba:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019dbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019dc4:	fb01 8303 	mla	r3, r1, r3, r8
 8019dc8:	fb00 330c 	mla	r3, r0, ip, r3
 8019dcc:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8019dd0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8019dd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019dd6:	f8bb 3000 	ldrh.w	r3, [fp]
 8019dda:	43d2      	mvns	r2, r2
 8019ddc:	1218      	asrs	r0, r3, #8
 8019dde:	b2d2      	uxtb	r2, r2
 8019de0:	0a36      	lsrs	r6, r6, #8
 8019de2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019de6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019dea:	4350      	muls	r0, r2
 8019dec:	10d9      	asrs	r1, r3, #3
 8019dee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019df2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019df6:	00db      	lsls	r3, r3, #3
 8019df8:	ea46 060e 	orr.w	r6, r6, lr
 8019dfc:	1c47      	adds	r7, r0, #1
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	4353      	muls	r3, r2
 8019e02:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8019e06:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019e0a:	0c37      	lsrs	r7, r6, #16
 8019e0c:	4351      	muls	r1, r2
 8019e0e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8019e12:	4a1d      	ldr	r2, [pc, #116]	; (8019e88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 8019e14:	1c5f      	adds	r7, r3, #1
 8019e16:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8019e1a:	b2f7      	uxtb	r7, r6
 8019e1c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8019e20:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8019e24:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8019e28:	1c4b      	adds	r3, r1, #1
 8019e2a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8019e2e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019e32:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8019e36:	00f6      	lsls	r6, r6, #3
 8019e38:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019e3c:	4330      	orrs	r0, r6
 8019e3e:	f8ab 0000 	strh.w	r0, [fp]
 8019e42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019e44:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019e46:	4413      	add	r3, r2
 8019e48:	9329      	str	r3, [sp, #164]	; 0xa4
 8019e4a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019e4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019e4e:	4413      	add	r3, r2
 8019e50:	932a      	str	r3, [sp, #168]	; 0xa8
 8019e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e54:	3b01      	subs	r3, #1
 8019e56:	f10b 0b02 	add.w	fp, fp, #2
 8019e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8019e5c:	e4ee      	b.n	801983c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 8019e5e:	b158      	cbz	r0, 8019e78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 8019e60:	5d31      	ldrb	r1, [r6, r4]
 8019e62:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8019e66:	9109      	str	r1, [sp, #36]	; 0x24
 8019e68:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8019e6c:	26ff      	movs	r6, #255	; 0xff
 8019e6e:	46b6      	mov	lr, r6
 8019e70:	e6eb      	b.n	8019c4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8019e72:	26ff      	movs	r6, #255	; 0xff
 8019e74:	46b1      	mov	r9, r6
 8019e76:	e6e8      	b.n	8019c4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8019e78:	26ff      	movs	r6, #255	; 0xff
 8019e7a:	46b1      	mov	r9, r6
 8019e7c:	e7f7      	b.n	8019e6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 8019e7e:	b017      	add	sp, #92	; 0x5c
 8019e80:	ecbd 8b08 	vpop	{d8-d11}
 8019e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e88:	fffff800 	.word	0xfffff800

08019e8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8019e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e90:	b087      	sub	sp, #28
 8019e92:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8019e96:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8019e9a:	9105      	str	r1, [sp, #20]
 8019e9c:	fb00 e604 	mla	r6, r0, r4, lr
 8019ea0:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8019ea4:	9102      	str	r1, [sp, #8]
 8019ea6:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 8019eaa:	9103      	str	r1, [sp, #12]
 8019eac:	9905      	ldr	r1, [sp, #20]
 8019eae:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8019eb2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019eb6:	8809      	ldrh	r1, [r1, #0]
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	eb03 0a06 	add.w	sl, r3, r6
 8019ebe:	f2c0 80ca 	blt.w	801a056 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8019ec2:	4287      	cmp	r7, r0
 8019ec4:	f340 80c7 	ble.w	801a056 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8019ec8:	f1be 0f00 	cmp.w	lr, #0
 8019ecc:	f2c0 80bf 	blt.w	801a04e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8019ed0:	4574      	cmp	r4, lr
 8019ed2:	f340 80bc 	ble.w	801a04e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8019ed6:	f813 c006 	ldrb.w	ip, [r3, r6]
 8019eda:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 8019ede:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019ee2:	d01c      	beq.n	8019f1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 8019ee4:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8019ee8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8019eec:	4372      	muls	r2, r6
 8019eee:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8019ef2:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8019ef6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019efa:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019efe:	fb0c f609 	mul.w	r6, ip, r9
 8019f02:	eb03 0902 	add.w	r9, r3, r2
 8019f06:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 8019f0a:	f106 0820 	add.w	r8, r6, #32
 8019f0e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019f12:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019f16:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019f1a:	ea49 0908 	orr.w	r9, r9, r8
 8019f1e:	fa1f f989 	uxth.w	r9, r9
 8019f22:	f11e 0301 	adds.w	r3, lr, #1
 8019f26:	f100 809b 	bmi.w	801a060 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8019f2a:	429c      	cmp	r4, r3
 8019f2c:	f340 8098 	ble.w	801a060 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8019f30:	2d00      	cmp	r5, #0
 8019f32:	f000 8095 	beq.w	801a060 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 8019f36:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8019f3a:	9b03      	ldr	r3, [sp, #12]
 8019f3c:	2eff      	cmp	r6, #255	; 0xff
 8019f3e:	885b      	ldrh	r3, [r3, #2]
 8019f40:	d01b      	beq.n	8019f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 8019f42:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8019f46:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8019f4a:	fb08 f202 	mul.w	r2, r8, r2
 8019f4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f52:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019f56:	fb06 f803 	mul.w	r8, r6, r3
 8019f5a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8019f5e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019f62:	441a      	add	r2, r3
 8019f64:	f108 0320 	add.w	r3, r8, #32
 8019f68:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8019f6c:	0a1b      	lsrs	r3, r3, #8
 8019f6e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8019f72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f76:	ea4b 0303 	orr.w	r3, fp, r3
 8019f7a:	b29b      	uxth	r3, r3
 8019f7c:	9301      	str	r3, [sp, #4]
 8019f7e:	3001      	adds	r0, #1
 8019f80:	d474      	bmi.n	801a06c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8019f82:	4287      	cmp	r7, r0
 8019f84:	dd72      	ble.n	801a06c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8019f86:	9a02      	ldr	r2, [sp, #8]
 8019f88:	2a00      	cmp	r2, #0
 8019f8a:	f000 8121 	beq.w	801a1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 8019f8e:	f1be 0f00 	cmp.w	lr, #0
 8019f92:	db68      	blt.n	801a066 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8019f94:	4574      	cmp	r4, lr
 8019f96:	dd66      	ble.n	801a066 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8019f98:	f81a 7004 	ldrb.w	r7, [sl, r4]
 8019f9c:	9a03      	ldr	r2, [sp, #12]
 8019f9e:	2fff      	cmp	r7, #255	; 0xff
 8019fa0:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8019fa4:	d01c      	beq.n	8019fe0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 8019fa6:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8019faa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8019fae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019fb2:	fb07 fb00 	mul.w	fp, r7, r0
 8019fb6:	fb08 f802 	mul.w	r8, r8, r2
 8019fba:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8019fbe:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8019fc2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019fc6:	4490      	add	r8, r2
 8019fc8:	f10b 0220 	add.w	r2, fp, #32
 8019fcc:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8019fd0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019fd4:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8019fd8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019fdc:	ea40 000b 	orr.w	r0, r0, fp
 8019fe0:	b280      	uxth	r0, r0
 8019fe2:	f11e 0e01 	adds.w	lr, lr, #1
 8019fe6:	d446      	bmi.n	801a076 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8019fe8:	4574      	cmp	r4, lr
 8019fea:	dd44      	ble.n	801a076 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8019fec:	2d00      	cmp	r5, #0
 8019fee:	d045      	beq.n	801a07c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 8019ff0:	1c62      	adds	r2, r4, #1
 8019ff2:	9b03      	ldr	r3, [sp, #12]
 8019ff4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8019ff8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8019ffc:	2cff      	cmp	r4, #255	; 0xff
 8019ffe:	d01c      	beq.n	801a03a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 801a000:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 801a004:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801a008:	fb08 fe0e 	mul.w	lr, r8, lr
 801a00c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801a010:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a014:	fb04 f802 	mul.w	r8, r4, r2
 801a018:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801a01c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a020:	4472      	add	r2, lr
 801a022:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801a026:	f108 0a20 	add.w	sl, r8, #32
 801a02a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801a02e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a032:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a036:	ea42 020a 	orr.w	r2, r2, sl
 801a03a:	b292      	uxth	r2, r2
 801a03c:	2d0f      	cmp	r5, #15
 801a03e:	d91f      	bls.n	801a080 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 801a040:	4b67      	ldr	r3, [pc, #412]	; (801a1e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 801a042:	4a68      	ldr	r2, [pc, #416]	; (801a1e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 801a044:	4868      	ldr	r0, [pc, #416]	; (801a1e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 801a046:	f240 3173 	movw	r1, #883	; 0x373
 801a04a:	f004 f9cb 	bl	801e3e4 <__assert_func>
 801a04e:	4689      	mov	r9, r1
 801a050:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801a054:	e765      	b.n	8019f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 801a056:	26ff      	movs	r6, #255	; 0xff
 801a058:	9101      	str	r1, [sp, #4]
 801a05a:	4689      	mov	r9, r1
 801a05c:	46b4      	mov	ip, r6
 801a05e:	e78e      	b.n	8019f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 801a060:	9101      	str	r1, [sp, #4]
 801a062:	26ff      	movs	r6, #255	; 0xff
 801a064:	e78b      	b.n	8019f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 801a066:	4608      	mov	r0, r1
 801a068:	27ff      	movs	r7, #255	; 0xff
 801a06a:	e7ba      	b.n	8019fe2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 801a06c:	24ff      	movs	r4, #255	; 0xff
 801a06e:	460a      	mov	r2, r1
 801a070:	4608      	mov	r0, r1
 801a072:	4627      	mov	r7, r4
 801a074:	e7e2      	b.n	801a03c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801a076:	460a      	mov	r2, r1
 801a078:	24ff      	movs	r4, #255	; 0xff
 801a07a:	e7df      	b.n	801a03c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801a07c:	460a      	mov	r2, r1
 801a07e:	24ff      	movs	r4, #255	; 0xff
 801a080:	9b02      	ldr	r3, [sp, #8]
 801a082:	2b0f      	cmp	r3, #15
 801a084:	d8dc      	bhi.n	801a040 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 801a086:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801a08a:	fa1f f885 	uxth.w	r8, r5
 801a08e:	fb08 fa0e 	mul.w	sl, r8, lr
 801a092:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801a096:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801a09a:	9303      	str	r3, [sp, #12]
 801a09c:	fa1f f38e 	uxth.w	r3, lr
 801a0a0:	9304      	str	r3, [sp, #16]
 801a0a2:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801a0a6:	9b02      	ldr	r3, [sp, #8]
 801a0a8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a0ac:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801a0b0:	fb15 fe03 	smulbb	lr, r5, r3
 801a0b4:	ea48 0809 	orr.w	r8, r8, r9
 801a0b8:	f1c3 0910 	rsb	r9, r3, #16
 801a0bc:	9b01      	ldr	r3, [sp, #4]
 801a0be:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801a0c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801a0c6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a0ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a0ce:	eba9 0905 	sub.w	r9, r9, r5
 801a0d2:	ea4b 0303 	orr.w	r3, fp, r3
 801a0d6:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801a0da:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801a0de:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801a0e2:	436b      	muls	r3, r5
 801a0e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a0e8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a0ec:	ea4b 0202 	orr.w	r2, fp, r2
 801a0f0:	fb09 3308 	mla	r3, r9, r8, r3
 801a0f4:	fb0e 3302 	mla	r3, lr, r2, r3
 801a0f8:	0402      	lsls	r2, r0, #16
 801a0fa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a0fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a102:	4310      	orrs	r0, r2
 801a104:	9a02      	ldr	r2, [sp, #8]
 801a106:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801a10a:	fb0e 3e00 	mla	lr, lr, r0, r3
 801a10e:	9803      	ldr	r0, [sp, #12]
 801a110:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 801a114:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801a118:	9804      	ldr	r0, [sp, #16]
 801a11a:	1a2d      	subs	r5, r5, r0
 801a11c:	9803      	ldr	r0, [sp, #12]
 801a11e:	eba0 000a 	sub.w	r0, r0, sl
 801a122:	b280      	uxth	r0, r0
 801a124:	b2ad      	uxth	r5, r5
 801a126:	4346      	muls	r6, r0
 801a128:	9804      	ldr	r0, [sp, #16]
 801a12a:	fb0c 6605 	mla	r6, ip, r5, r6
 801a12e:	fb00 6707 	mla	r7, r0, r7, r6
 801a132:	fb0a 7404 	mla	r4, sl, r4, r7
 801a136:	b292      	uxth	r2, r2
 801a138:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a13c:	4354      	muls	r4, r2
 801a13e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801a142:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801a146:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a14a:	f104 0a01 	add.w	sl, r4, #1
 801a14e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a152:	ea43 0e0e 	orr.w	lr, r3, lr
 801a156:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a15a:	fa1f f38e 	uxth.w	r3, lr
 801a15e:	1208      	asrs	r0, r1, #8
 801a160:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 801a164:	b2e4      	uxtb	r4, r4
 801a166:	121d      	asrs	r5, r3, #8
 801a168:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a16c:	fb10 f004 	smulbb	r0, r0, r4
 801a170:	10ce      	asrs	r6, r1, #3
 801a172:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a176:	00c9      	lsls	r1, r1, #3
 801a178:	fb05 0502 	mla	r5, r5, r2, r0
 801a17c:	b2c9      	uxtb	r1, r1
 801a17e:	10d8      	asrs	r0, r3, #3
 801a180:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a184:	00db      	lsls	r3, r3, #3
 801a186:	fb16 f604 	smulbb	r6, r6, r4
 801a18a:	b2db      	uxtb	r3, r3
 801a18c:	fb11 f404 	smulbb	r4, r1, r4
 801a190:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a194:	fb00 6002 	mla	r0, r0, r2, r6
 801a198:	fb03 4202 	mla	r2, r3, r2, r4
 801a19c:	b2ad      	uxth	r5, r5
 801a19e:	b292      	uxth	r2, r2
 801a1a0:	1c6b      	adds	r3, r5, #1
 801a1a2:	1c51      	adds	r1, r2, #1
 801a1a4:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801a1a8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a1ac:	b280      	uxth	r0, r0
 801a1ae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a1b2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801a1b6:	4313      	orrs	r3, r2
 801a1b8:	1c42      	adds	r2, r0, #1
 801a1ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a1be:	0940      	lsrs	r0, r0, #5
 801a1c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a1c4:	9a05      	ldr	r2, [sp, #20]
 801a1c6:	4303      	orrs	r3, r0
 801a1c8:	8013      	strh	r3, [r2, #0]
 801a1ca:	b007      	add	sp, #28
 801a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1d0:	2d0f      	cmp	r5, #15
 801a1d2:	f63f af35 	bhi.w	801a040 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 801a1d6:	24ff      	movs	r4, #255	; 0xff
 801a1d8:	460a      	mov	r2, r1
 801a1da:	4608      	mov	r0, r1
 801a1dc:	4627      	mov	r7, r4
 801a1de:	e752      	b.n	801a086 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 801a1e0:	08022217 	.word	0x08022217
 801a1e4:	08022775 	.word	0x08022775
 801a1e8:	0802229f 	.word	0x0802229f

0801a1ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f0:	ed2d 8b08 	vpush	{d8-d11}
 801a1f4:	b099      	sub	sp, #100	; 0x64
 801a1f6:	eeb0 aa40 	vmov.f32	s20, s0
 801a1fa:	9308      	str	r3, [sp, #32]
 801a1fc:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801a200:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 801a202:	930b      	str	r3, [sp, #44]	; 0x2c
 801a204:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801a208:	9314      	str	r3, [sp, #80]	; 0x50
 801a20a:	9113      	str	r1, [sp, #76]	; 0x4c
 801a20c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801a210:	9017      	str	r0, [sp, #92]	; 0x5c
 801a212:	6870      	ldr	r0, [r6, #4]
 801a214:	9216      	str	r2, [sp, #88]	; 0x58
 801a216:	fb00 1303 	mla	r3, r0, r3, r1
 801a21a:	6831      	ldr	r1, [r6, #0]
 801a21c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801a21e:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 801a222:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a226:	9309      	str	r3, [sp, #36]	; 0x24
 801a228:	6813      	ldr	r3, [r2, #0]
 801a22a:	930c      	str	r3, [sp, #48]	; 0x30
 801a22c:	6853      	ldr	r3, [r2, #4]
 801a22e:	930d      	str	r3, [sp, #52]	; 0x34
 801a230:	006b      	lsls	r3, r5, #1
 801a232:	9312      	str	r3, [sp, #72]	; 0x48
 801a234:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a238:	930a      	str	r3, [sp, #40]	; 0x28
 801a23a:	eef0 9a60 	vmov.f32	s19, s1
 801a23e:	eeb0 9a41 	vmov.f32	s18, s2
 801a242:	eeb0 8a62 	vmov.f32	s16, s5
 801a246:	eef0 8a43 	vmov.f32	s17, s6
 801a24a:	eef0 ba44 	vmov.f32	s23, s8
 801a24e:	eeb0 ba64 	vmov.f32	s22, s9
 801a252:	eef0 aa45 	vmov.f32	s21, s10
 801a256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a258:	2b00      	cmp	r3, #0
 801a25a:	dc03      	bgt.n	801a264 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a25c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a25e:	2b00      	cmp	r3, #0
 801a260:	f340 83bf 	ble.w	801a9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 801a264:	9b08      	ldr	r3, [sp, #32]
 801a266:	2b00      	cmp	r3, #0
 801a268:	f340 81cb 	ble.w	801a602 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801a26c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a26e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a270:	1412      	asrs	r2, r2, #16
 801a272:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a276:	d42f      	bmi.n	801a2d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801a278:	1c51      	adds	r1, r2, #1
 801a27a:	428d      	cmp	r5, r1
 801a27c:	dd2f      	ble.n	801a2de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801a27e:	2b00      	cmp	r3, #0
 801a280:	db2d      	blt.n	801a2de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801a282:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a284:	1c59      	adds	r1, r3, #1
 801a286:	4288      	cmp	r0, r1
 801a288:	dd29      	ble.n	801a2de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801a28a:	9b08      	ldr	r3, [sp, #32]
 801a28c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a28e:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a290:	3b01      	subs	r3, #1
 801a292:	fb02 1203 	mla	r2, r2, r3, r1
 801a296:	1412      	asrs	r2, r2, #16
 801a298:	d42b      	bmi.n	801a2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801a29a:	3201      	adds	r2, #1
 801a29c:	4295      	cmp	r5, r2
 801a29e:	dd28      	ble.n	801a2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801a2a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801a2a2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a2a4:	fb02 1303 	mla	r3, r2, r3, r1
 801a2a8:	141b      	asrs	r3, r3, #16
 801a2aa:	d422      	bmi.n	801a2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801a2ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2ae:	3301      	adds	r3, #1
 801a2b0:	429a      	cmp	r2, r3
 801a2b2:	dd1e      	ble.n	801a2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801a2b4:	9b08      	ldr	r3, [sp, #32]
 801a2b6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801a2ba:	9315      	str	r3, [sp, #84]	; 0x54
 801a2bc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801a2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	f300 8217 	bgt.w	801a6f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 801a2c8:	9b08      	ldr	r3, [sp, #32]
 801a2ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2d0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801a2d4:	9309      	str	r3, [sp, #36]	; 0x24
 801a2d6:	e196      	b.n	801a606 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801a2d8:	1c57      	adds	r7, r2, #1
 801a2da:	f040 8183 	bne.w	801a5e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801a2de:	42aa      	cmp	r2, r5
 801a2e0:	f280 8180 	bge.w	801a5e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801a2e4:	1c5e      	adds	r6, r3, #1
 801a2e6:	f2c0 817d 	blt.w	801a5e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801a2ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	f280 8179 	bge.w	801a5e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801a2f2:	9b08      	ldr	r3, [sp, #32]
 801a2f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a2f6:	9315      	str	r3, [sp, #84]	; 0x54
 801a2f8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801a2fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	dde2      	ble.n	801a2c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801a302:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a304:	1419      	asrs	r1, r3, #16
 801a306:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a308:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a30c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a30e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801a312:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a314:	141b      	asrs	r3, r3, #16
 801a316:	f100 81d3 	bmi.w	801a6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801a31a:	1c58      	adds	r0, r3, #1
 801a31c:	4285      	cmp	r5, r0
 801a31e:	f340 81d1 	ble.w	801a6c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801a322:	2900      	cmp	r1, #0
 801a324:	f2c0 81ce 	blt.w	801a6c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801a328:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a32a:	1c48      	adds	r0, r1, #1
 801a32c:	4284      	cmp	r4, r0
 801a32e:	f340 81c9 	ble.w	801a6c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801a332:	fb01 3105 	mla	r1, r1, r5, r3
 801a336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a338:	fa1f fe82 	uxth.w	lr, r2
 801a33c:	eb03 0a01 	add.w	sl, r3, r1
 801a340:	ea4f 100e 	mov.w	r0, lr, lsl #4
 801a344:	f813 9001 	ldrb.w	r9, [r3, r1]
 801a348:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a34c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a350:	b29b      	uxth	r3, r3
 801a352:	f1bc 0f00 	cmp.w	ip, #0
 801a356:	f000 8195 	beq.w	801a684 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 801a35a:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801a35e:	940e      	str	r4, [sp, #56]	; 0x38
 801a360:	eb0a 0b05 	add.w	fp, sl, r5
 801a364:	fa1f fa8c 	uxth.w	sl, ip
 801a368:	fb0a fe0e 	mul.w	lr, sl, lr
 801a36c:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801a370:	fa1f fa8a 	uxth.w	sl, sl
 801a374:	eba0 000e 	sub.w	r0, r0, lr
 801a378:	eba3 030a 	sub.w	r3, r3, sl
 801a37c:	b280      	uxth	r0, r0
 801a37e:	fb08 f000 	mul.w	r0, r8, r0
 801a382:	b29b      	uxth	r3, r3
 801a384:	fb09 0303 	mla	r3, r9, r3, r0
 801a388:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a38a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a38e:	940f      	str	r4, [sp, #60]	; 0x3c
 801a390:	fb0a 3300 	mla	r3, sl, r0, r3
 801a394:	fb0e 3304 	mla	r3, lr, r4, r3
 801a398:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	f000 8114 	beq.w	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a3a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a3a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a3a6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a3aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a3ae:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801a3b2:	f000 816c 	beq.w	801a68e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801a3b6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801a3ba:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801a3be:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a3c2:	fb09 f101 	mul.w	r1, r9, r1
 801a3c6:	fb0a fe0e 	mul.w	lr, sl, lr
 801a3ca:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801a3ce:	f101 0b20 	add.w	fp, r1, #32
 801a3d2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a3d6:	44ce      	add	lr, r9
 801a3d8:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801a3dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a3e0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801a3e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a3e8:	ea4e 0909 	orr.w	r9, lr, r9
 801a3ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a3f0:	8841      	ldrh	r1, [r0, #2]
 801a3f2:	d019      	beq.n	801a428 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801a3f4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801a3f8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801a3fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a400:	fb0a fe0e 	mul.w	lr, sl, lr
 801a404:	fb08 f801 	mul.w	r8, r8, r1
 801a408:	f108 0b20 	add.w	fp, r8, #32
 801a40c:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 801a410:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a414:	448e      	add	lr, r1
 801a416:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 801a41a:	0a09      	lsrs	r1, r1, #8
 801a41c:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 801a420:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a424:	ea4a 0101 	orr.w	r1, sl, r1
 801a428:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801a42c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a430:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a434:	ea4e 0909 	orr.w	r9, lr, r9
 801a438:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801a43c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a440:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a444:	ea4e 0e01 	orr.w	lr, lr, r1
 801a448:	f1bc 0f00 	cmp.w	ip, #0
 801a44c:	f000 8121 	beq.w	801a692 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 801a450:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a452:	eb00 0801 	add.w	r8, r0, r1
 801a456:	5a41      	ldrh	r1, [r0, r1]
 801a458:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a45a:	28ff      	cmp	r0, #255	; 0xff
 801a45c:	d019      	beq.n	801a492 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801a45e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a460:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801a464:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a468:	fb04 fb01 	mul.w	fp, r4, r1
 801a46c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a470:	fb0a fa00 	mul.w	sl, sl, r0
 801a474:	f10b 0020 	add.w	r0, fp, #32
 801a478:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801a47c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a480:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a484:	4451      	add	r1, sl
 801a486:	0a00      	lsrs	r0, r0, #8
 801a488:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801a48c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a490:	4301      	orrs	r1, r0
 801a492:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a494:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801a498:	2cff      	cmp	r4, #255	; 0xff
 801a49a:	d01a      	beq.n	801a4d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 801a49c:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 801a4a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a4a4:	fb04 fb00 	mul.w	fp, r4, r0
 801a4a8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a4ac:	fb0a fa08 	mul.w	sl, sl, r8
 801a4b0:	f10b 0820 	add.w	r8, fp, #32
 801a4b4:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 801a4b8:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801a4bc:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a4c0:	4450      	add	r0, sl
 801a4c2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a4c6:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801a4ca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a4ce:	ea40 0008 	orr.w	r0, r0, r8
 801a4d2:	fb1c f802 	smulbb	r8, ip, r2
 801a4d6:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801a4da:	f1cc 0a10 	rsb	sl, ip, #16
 801a4de:	ebaa 0a02 	sub.w	sl, sl, r2
 801a4e2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a4e6:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801a4ea:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801a4ee:	fb0e f202 	mul.w	r2, lr, r2
 801a4f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a4f6:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801a4fa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a4fe:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801a502:	fb09 220a 	mla	r2, r9, sl, r2
 801a506:	ea4b 0101 	orr.w	r1, fp, r1
 801a50a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a50e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a512:	fb0c 2201 	mla	r2, ip, r1, r2
 801a516:	ea4e 0000 	orr.w	r0, lr, r0
 801a51a:	fb08 2800 	mla	r8, r8, r0, r2
 801a51e:	ea4f 5258 	mov.w	r2, r8, lsr #21
 801a522:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a526:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a52a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801a52e:	ea42 0808 	orr.w	r8, r2, r8
 801a532:	fa1f f288 	uxth.w	r2, r8
 801a536:	2bff      	cmp	r3, #255	; 0xff
 801a538:	d103      	bne.n	801a542 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801a53a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a53c:	29ff      	cmp	r1, #255	; 0xff
 801a53e:	f000 80bd 	beq.w	801a6bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 801a542:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a544:	f8b7 c000 	ldrh.w	ip, [r7]
 801a548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a54a:	434b      	muls	r3, r1
 801a54c:	f103 0e01 	add.w	lr, r3, #1
 801a550:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 801a554:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 801a558:	ea4f 202c 	mov.w	r0, ip, asr #8
 801a55c:	fa5f fe8e 	uxtb.w	lr, lr
 801a560:	1213      	asrs	r3, r2, #8
 801a562:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a566:	fb10 f00e 	smulbb	r0, r0, lr
 801a56a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801a56e:	fb03 0301 	mla	r3, r3, r1, r0
 801a572:	b298      	uxth	r0, r3
 801a574:	ea4f 03ec 	mov.w	r3, ip, asr #3
 801a578:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801a57c:	10d1      	asrs	r1, r2, #3
 801a57e:	fa5f fc8c 	uxtb.w	ip, ip
 801a582:	00d2      	lsls	r2, r2, #3
 801a584:	fb1c fc0e 	smulbb	ip, ip, lr
 801a588:	b2d2      	uxtb	r2, r2
 801a58a:	fb02 c204 	mla	r2, r2, r4, ip
 801a58e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801a592:	fb13 f30e 	smulbb	r3, r3, lr
 801a596:	b292      	uxth	r2, r2
 801a598:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a59c:	fb01 3104 	mla	r1, r1, r4, r3
 801a5a0:	f102 0c01 	add.w	ip, r2, #1
 801a5a4:	1c43      	adds	r3, r0, #1
 801a5a6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a5aa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a5ae:	b289      	uxth	r1, r1
 801a5b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a5b4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801a5b8:	4313      	orrs	r3, r2
 801a5ba:	1c4a      	adds	r2, r1, #1
 801a5bc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801a5c0:	0949      	lsrs	r1, r1, #5
 801a5c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a5c6:	430b      	orrs	r3, r1
 801a5c8:	803b      	strh	r3, [r7, #0]
 801a5ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a5cc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a5ce:	4413      	add	r3, r2
 801a5d0:	932b      	str	r3, [sp, #172]	; 0xac
 801a5d2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a5d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a5d6:	441a      	add	r2, r3
 801a5d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a5da:	922c      	str	r2, [sp, #176]	; 0xb0
 801a5dc:	3b01      	subs	r3, #1
 801a5de:	3702      	adds	r7, #2
 801a5e0:	9315      	str	r3, [sp, #84]	; 0x54
 801a5e2:	e68b      	b.n	801a2fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801a5e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a5e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a5e8:	4413      	add	r3, r2
 801a5ea:	932b      	str	r3, [sp, #172]	; 0xac
 801a5ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a5ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a5f0:	441a      	add	r2, r3
 801a5f2:	9b08      	ldr	r3, [sp, #32]
 801a5f4:	922c      	str	r2, [sp, #176]	; 0xb0
 801a5f6:	3b01      	subs	r3, #1
 801a5f8:	9308      	str	r3, [sp, #32]
 801a5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5fc:	3302      	adds	r3, #2
 801a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 801a600:	e630      	b.n	801a264 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801a602:	f47f ae42 	bne.w	801a28a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801a606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a608:	2b00      	cmp	r3, #0
 801a60a:	f340 81ea 	ble.w	801a9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 801a60e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a616:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a61a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a61c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a620:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a624:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a628:	eef0 6a48 	vmov.f32	s13, s16
 801a62c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a634:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a638:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801a63c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a640:	eef0 6a68 	vmov.f32	s13, s17
 801a644:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a648:	ee18 2a10 	vmov	r2, s16
 801a64c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a650:	fb92 f3f3 	sdiv	r3, r2, r3
 801a654:	ee18 2a90 	vmov	r2, s17
 801a658:	932d      	str	r3, [sp, #180]	; 0xb4
 801a65a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a65c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a660:	932e      	str	r3, [sp, #184]	; 0xb8
 801a662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a664:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a666:	3b01      	subs	r3, #1
 801a668:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a66c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a66e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a670:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 801a674:	bf08      	it	eq
 801a676:	4613      	moveq	r3, r2
 801a678:	9308      	str	r3, [sp, #32]
 801a67a:	eef0 8a67 	vmov.f32	s17, s15
 801a67e:	eeb0 8a47 	vmov.f32	s16, s14
 801a682:	e5e8      	b.n	801a256 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801a684:	fb08 f000 	mul.w	r0, r8, r0
 801a688:	fb09 0303 	mla	r3, r9, r3, r0
 801a68c:	e684      	b.n	801a398 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 801a68e:	4689      	mov	r9, r1
 801a690:	e6ac      	b.n	801a3ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801a692:	f1c2 0010 	rsb	r0, r2, #16
 801a696:	fb0e f202 	mul.w	r2, lr, r2
 801a69a:	fb09 2900 	mla	r9, r9, r0, r2
 801a69e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a6a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801a6a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a6aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a6ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a6b2:	ea42 0909 	orr.w	r9, r2, r9
 801a6b6:	fa1f f289 	uxth.w	r2, r9
 801a6ba:	e73c      	b.n	801a536 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801a6bc:	803a      	strh	r2, [r7, #0]
 801a6be:	e784      	b.n	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a6c0:	1c5c      	adds	r4, r3, #1
 801a6c2:	d182      	bne.n	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a6c4:	429d      	cmp	r5, r3
 801a6c6:	dd80      	ble.n	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a6c8:	1c48      	adds	r0, r1, #1
 801a6ca:	f6ff af7e 	blt.w	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a6ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a6d0:	4288      	cmp	r0, r1
 801a6d2:	f77f af7a 	ble.w	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a6d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a6d8:	9302      	str	r3, [sp, #8]
 801a6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6dc:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801a6e0:	e9cd c005 	strd	ip, r0, [sp, #20]
 801a6e4:	e9cd 5300 	strd	r5, r3, [sp]
 801a6e8:	4639      	mov	r1, r7
 801a6ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801a6ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a6f0:	f7ff fbcc 	bl	8019e8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801a6f4:	e769      	b.n	801a5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801a6f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a6f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a6fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a6fe:	141f      	asrs	r7, r3, #16
 801a700:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801a704:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a706:	141b      	asrs	r3, r3, #16
 801a708:	fb05 3707 	mla	r7, r5, r7, r3
 801a70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a70e:	fa1f fc82 	uxth.w	ip, r2
 801a712:	eb03 0a07 	add.w	sl, r3, r7
 801a716:	ea4f 110c 	mov.w	r1, ip, lsl #4
 801a71a:	f813 9007 	ldrb.w	r9, [r3, r7]
 801a71e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a722:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 801a726:	b29b      	uxth	r3, r3
 801a728:	2800      	cmp	r0, #0
 801a72a:	f000 813f 	beq.w	801a9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 801a72e:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801a732:	9410      	str	r4, [sp, #64]	; 0x40
 801a734:	eb0a 0b05 	add.w	fp, sl, r5
 801a738:	fa1f fa80 	uxth.w	sl, r0
 801a73c:	fb0a fc0c 	mul.w	ip, sl, ip
 801a740:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801a744:	fa1f fa8a 	uxth.w	sl, sl
 801a748:	eba1 010c 	sub.w	r1, r1, ip
 801a74c:	eba3 030a 	sub.w	r3, r3, sl
 801a750:	b289      	uxth	r1, r1
 801a752:	fb08 f101 	mul.w	r1, r8, r1
 801a756:	b29b      	uxth	r3, r3
 801a758:	fb09 1303 	mla	r3, r9, r3, r1
 801a75c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a75e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a762:	9411      	str	r4, [sp, #68]	; 0x44
 801a764:	fb0a 3301 	mla	r3, sl, r1, r3
 801a768:	fb0c 3304 	mla	r3, ip, r4, r3
 801a76c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a770:	2b00      	cmp	r3, #0
 801a772:	f000 810d 	beq.w	801a990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 801a776:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a778:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a77a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a77e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801a782:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801a786:	f000 8116 	beq.w	801a9b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 801a78a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801a78e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801a792:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a796:	fb09 f707 	mul.w	r7, r9, r7
 801a79a:	fb0a fc0c 	mul.w	ip, sl, ip
 801a79e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801a7a2:	f107 0b20 	add.w	fp, r7, #32
 801a7a6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801a7aa:	44cc      	add	ip, r9
 801a7ac:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801a7b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a7b4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801a7b8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a7bc:	ea4c 0909 	orr.w	r9, ip, r9
 801a7c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a7c4:	884f      	ldrh	r7, [r1, #2]
 801a7c6:	d019      	beq.n	801a7fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 801a7c8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801a7cc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801a7d0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a7d4:	fb08 f807 	mul.w	r8, r8, r7
 801a7d8:	fb0a fc0c 	mul.w	ip, sl, ip
 801a7dc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801a7e0:	f108 0b20 	add.w	fp, r8, #32
 801a7e4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801a7e8:	44bc      	add	ip, r7
 801a7ea:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801a7ee:	0a3f      	lsrs	r7, r7, #8
 801a7f0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801a7f4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a7f8:	ea4c 0707 	orr.w	r7, ip, r7
 801a7fc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801a800:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801a804:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a808:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a80c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a810:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801a814:	ea4c 0909 	orr.w	r9, ip, r9
 801a818:	ea4a 0707 	orr.w	r7, sl, r7
 801a81c:	2800      	cmp	r0, #0
 801a81e:	f000 80cc 	beq.w	801a9ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 801a822:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a824:	eb01 0c04 	add.w	ip, r1, r4
 801a828:	f831 8004 	ldrh.w	r8, [r1, r4]
 801a82c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a82e:	29ff      	cmp	r1, #255	; 0xff
 801a830:	d01a      	beq.n	801a868 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 801a832:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a834:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801a838:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a83c:	fb04 fb08 	mul.w	fp, r4, r8
 801a840:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a844:	fb0a fa01 	mul.w	sl, sl, r1
 801a848:	f10b 0120 	add.w	r1, fp, #32
 801a84c:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801a850:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801a854:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a858:	44d0      	add	r8, sl
 801a85a:	0a09      	lsrs	r1, r1, #8
 801a85c:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801a860:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a864:	ea48 0801 	orr.w	r8, r8, r1
 801a868:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a86a:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801a86e:	2cff      	cmp	r4, #255	; 0xff
 801a870:	d01a      	beq.n	801a8a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801a872:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801a876:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a87a:	fb04 fb01 	mul.w	fp, r4, r1
 801a87e:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a882:	fb0a fa0c 	mul.w	sl, sl, ip
 801a886:	f10b 0c20 	add.w	ip, fp, #32
 801a88a:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801a88e:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801a892:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a896:	4451      	add	r1, sl
 801a898:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a89c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801a8a0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a8a4:	ea41 010c 	orr.w	r1, r1, ip
 801a8a8:	fb10 fc02 	smulbb	ip, r0, r2
 801a8ac:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801a8b0:	f1c0 0a10 	rsb	sl, r0, #16
 801a8b4:	ebaa 0a02 	sub.w	sl, sl, r2
 801a8b8:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801a8bc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801a8c0:	437a      	muls	r2, r7
 801a8c2:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801a8c6:	040f      	lsls	r7, r1, #16
 801a8c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a8cc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801a8d0:	fb09 220a 	mla	r2, r9, sl, r2
 801a8d4:	ea4b 0808 	orr.w	r8, fp, r8
 801a8d8:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801a8dc:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801a8e0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a8e4:	fb00 2208 	mla	r2, r0, r8, r2
 801a8e8:	4339      	orrs	r1, r7
 801a8ea:	fb0c 2201 	mla	r2, ip, r1, r2
 801a8ee:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801a8f2:	0952      	lsrs	r2, r2, #5
 801a8f4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a8f8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a8fc:	ea49 0202 	orr.w	r2, r9, r2
 801a900:	2bff      	cmp	r3, #255	; 0xff
 801a902:	b292      	uxth	r2, r2
 801a904:	d102      	bne.n	801a90c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 801a906:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a908:	29ff      	cmp	r1, #255	; 0xff
 801a90a:	d067      	beq.n	801a9dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 801a90c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a90e:	f8be 0000 	ldrh.w	r0, [lr]
 801a912:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a914:	434b      	muls	r3, r1
 801a916:	1c59      	adds	r1, r3, #1
 801a918:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801a91c:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801a920:	1201      	asrs	r1, r0, #8
 801a922:	b2db      	uxtb	r3, r3
 801a924:	1217      	asrs	r7, r2, #8
 801a926:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a92a:	fb11 f103 	smulbb	r1, r1, r3
 801a92e:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 801a932:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a936:	00c0      	lsls	r0, r0, #3
 801a938:	fb07 1704 	mla	r7, r7, r4, r1
 801a93c:	b2c0      	uxtb	r0, r0
 801a93e:	10d1      	asrs	r1, r2, #3
 801a940:	00d2      	lsls	r2, r2, #3
 801a942:	fb10 f003 	smulbb	r0, r0, r3
 801a946:	b2d2      	uxtb	r2, r2
 801a948:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a94c:	fb02 0204 	mla	r2, r2, r4, r0
 801a950:	fb1c fc03 	smulbb	ip, ip, r3
 801a954:	b2bf      	uxth	r7, r7
 801a956:	b292      	uxth	r2, r2
 801a958:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a95c:	fb01 c104 	mla	r1, r1, r4, ip
 801a960:	1c7b      	adds	r3, r7, #1
 801a962:	f102 0c01 	add.w	ip, r2, #1
 801a966:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a96a:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801a96e:	b289      	uxth	r1, r1
 801a970:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a974:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a978:	ea47 070c 	orr.w	r7, r7, ip
 801a97c:	f101 0c01 	add.w	ip, r1, #1
 801a980:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801a984:	0949      	lsrs	r1, r1, #5
 801a986:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a98a:	430f      	orrs	r7, r1
 801a98c:	f8ae 7000 	strh.w	r7, [lr]
 801a990:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a992:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a994:	4413      	add	r3, r2
 801a996:	932b      	str	r3, [sp, #172]	; 0xac
 801a998:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a99a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a99c:	441a      	add	r2, r3
 801a99e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9a0:	922c      	str	r2, [sp, #176]	; 0xb0
 801a9a2:	3b01      	subs	r3, #1
 801a9a4:	f10e 0e02 	add.w	lr, lr, #2
 801a9a8:	9315      	str	r3, [sp, #84]	; 0x54
 801a9aa:	e489      	b.n	801a2c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801a9ac:	fb08 f101 	mul.w	r1, r8, r1
 801a9b0:	fb09 1303 	mla	r3, r9, r3, r1
 801a9b4:	e6da      	b.n	801a76c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 801a9b6:	46b9      	mov	r9, r7
 801a9b8:	e702      	b.n	801a7c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 801a9ba:	f1c2 0110 	rsb	r1, r2, #16
 801a9be:	437a      	muls	r2, r7
 801a9c0:	fb09 2901 	mla	r9, r9, r1, r2
 801a9c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a9c8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801a9cc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801a9d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a9d4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a9d8:	4302      	orrs	r2, r0
 801a9da:	e791      	b.n	801a900 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801a9dc:	f8ae 2000 	strh.w	r2, [lr]
 801a9e0:	e7d6      	b.n	801a990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 801a9e2:	b019      	add	sp, #100	; 0x64
 801a9e4:	ecbd 8b08 	vpop	{d8-d11}
 801a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f0:	b087      	sub	sp, #28
 801a9f2:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 801a9f6:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 801a9fa:	9105      	str	r1, [sp, #20]
 801a9fc:	fb00 e604 	mla	r6, r0, r4, lr
 801aa00:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 801aa04:	9102      	str	r1, [sp, #8]
 801aa06:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 801aa0a:	9103      	str	r1, [sp, #12]
 801aa0c:	9905      	ldr	r1, [sp, #20]
 801aa0e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 801aa12:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801aa16:	8809      	ldrh	r1, [r1, #0]
 801aa18:	2800      	cmp	r0, #0
 801aa1a:	eb02 0a06 	add.w	sl, r2, r6
 801aa1e:	f2c0 80ca 	blt.w	801abb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 801aa22:	4287      	cmp	r7, r0
 801aa24:	f340 80c7 	ble.w	801abb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 801aa28:	f1be 0f00 	cmp.w	lr, #0
 801aa2c:	f2c0 80bf 	blt.w	801abae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 801aa30:	4574      	cmp	r4, lr
 801aa32:	f340 80bc 	ble.w	801abae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 801aa36:	f812 c006 	ldrb.w	ip, [r2, r6]
 801aa3a:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 801aa3e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801aa42:	d01c      	beq.n	801aa7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 801aa44:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 801aa48:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801aa4c:	4372      	muls	r2, r6
 801aa4e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 801aa52:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 801aa56:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801aa5a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801aa5e:	fb0c f609 	mul.w	r6, ip, r9
 801aa62:	eb03 0902 	add.w	r9, r3, r2
 801aa66:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801aa6a:	f106 0820 	add.w	r8, r6, #32
 801aa6e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801aa72:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801aa76:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801aa7a:	ea49 0908 	orr.w	r9, r9, r8
 801aa7e:	fa1f f989 	uxth.w	r9, r9
 801aa82:	f11e 0301 	adds.w	r3, lr, #1
 801aa86:	f100 809b 	bmi.w	801abc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801aa8a:	429c      	cmp	r4, r3
 801aa8c:	f340 8098 	ble.w	801abc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801aa90:	2d00      	cmp	r5, #0
 801aa92:	f000 8095 	beq.w	801abc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801aa96:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801aa9a:	9b03      	ldr	r3, [sp, #12]
 801aa9c:	2eff      	cmp	r6, #255	; 0xff
 801aa9e:	885b      	ldrh	r3, [r3, #2]
 801aaa0:	d01b      	beq.n	801aada <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 801aaa2:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801aaa6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801aaaa:	fb08 f202 	mul.w	r2, r8, r2
 801aaae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aab2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801aab6:	fb06 f803 	mul.w	r8, r6, r3
 801aaba:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801aabe:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801aac2:	441a      	add	r2, r3
 801aac4:	f108 0320 	add.w	r3, r8, #32
 801aac8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801aacc:	0a1b      	lsrs	r3, r3, #8
 801aace:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801aad2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aad6:	ea4b 0303 	orr.w	r3, fp, r3
 801aada:	b29b      	uxth	r3, r3
 801aadc:	9301      	str	r3, [sp, #4]
 801aade:	3001      	adds	r0, #1
 801aae0:	d474      	bmi.n	801abcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801aae2:	4287      	cmp	r7, r0
 801aae4:	dd72      	ble.n	801abcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801aae6:	9a02      	ldr	r2, [sp, #8]
 801aae8:	2a00      	cmp	r2, #0
 801aaea:	f000 8111 	beq.w	801ad10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 801aaee:	f1be 0f00 	cmp.w	lr, #0
 801aaf2:	db68      	blt.n	801abc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 801aaf4:	4574      	cmp	r4, lr
 801aaf6:	dd66      	ble.n	801abc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 801aaf8:	f81a 7004 	ldrb.w	r7, [sl, r4]
 801aafc:	9a03      	ldr	r2, [sp, #12]
 801aafe:	2fff      	cmp	r7, #255	; 0xff
 801ab00:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801ab04:	d01c      	beq.n	801ab40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 801ab06:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 801ab0a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801ab0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ab12:	fb07 fb00 	mul.w	fp, r7, r0
 801ab16:	fb08 f802 	mul.w	r8, r8, r2
 801ab1a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801ab1e:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 801ab22:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ab26:	4490      	add	r8, r2
 801ab28:	f10b 0220 	add.w	r2, fp, #32
 801ab2c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801ab30:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ab34:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 801ab38:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ab3c:	ea40 000b 	orr.w	r0, r0, fp
 801ab40:	b280      	uxth	r0, r0
 801ab42:	f11e 0e01 	adds.w	lr, lr, #1
 801ab46:	d446      	bmi.n	801abd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801ab48:	4574      	cmp	r4, lr
 801ab4a:	dd44      	ble.n	801abd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801ab4c:	2d00      	cmp	r5, #0
 801ab4e:	d045      	beq.n	801abdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 801ab50:	1c62      	adds	r2, r4, #1
 801ab52:	9b03      	ldr	r3, [sp, #12]
 801ab54:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801ab58:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ab5c:	2cff      	cmp	r4, #255	; 0xff
 801ab5e:	d01c      	beq.n	801ab9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 801ab60:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 801ab64:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ab68:	fb08 fe0e 	mul.w	lr, r8, lr
 801ab6c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801ab70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ab74:	fb04 f802 	mul.w	r8, r4, r2
 801ab78:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801ab7c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801ab80:	4472      	add	r2, lr
 801ab82:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801ab86:	f108 0a20 	add.w	sl, r8, #32
 801ab8a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801ab8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab92:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ab96:	ea42 020a 	orr.w	r2, r2, sl
 801ab9a:	b292      	uxth	r2, r2
 801ab9c:	2d0f      	cmp	r5, #15
 801ab9e:	d91f      	bls.n	801abe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 801aba0:	4b5f      	ldr	r3, [pc, #380]	; (801ad20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 801aba2:	4a60      	ldr	r2, [pc, #384]	; (801ad24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 801aba4:	4860      	ldr	r0, [pc, #384]	; (801ad28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 801aba6:	f240 3173 	movw	r1, #883	; 0x373
 801abaa:	f003 fc1b 	bl	801e3e4 <__assert_func>
 801abae:	4689      	mov	r9, r1
 801abb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801abb4:	e765      	b.n	801aa82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 801abb6:	26ff      	movs	r6, #255	; 0xff
 801abb8:	9101      	str	r1, [sp, #4]
 801abba:	4689      	mov	r9, r1
 801abbc:	46b4      	mov	ip, r6
 801abbe:	e78e      	b.n	801aade <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801abc0:	9101      	str	r1, [sp, #4]
 801abc2:	26ff      	movs	r6, #255	; 0xff
 801abc4:	e78b      	b.n	801aade <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801abc6:	4608      	mov	r0, r1
 801abc8:	27ff      	movs	r7, #255	; 0xff
 801abca:	e7ba      	b.n	801ab42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 801abcc:	24ff      	movs	r4, #255	; 0xff
 801abce:	460a      	mov	r2, r1
 801abd0:	4608      	mov	r0, r1
 801abd2:	4627      	mov	r7, r4
 801abd4:	e7e2      	b.n	801ab9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801abd6:	460a      	mov	r2, r1
 801abd8:	24ff      	movs	r4, #255	; 0xff
 801abda:	e7df      	b.n	801ab9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801abdc:	460a      	mov	r2, r1
 801abde:	24ff      	movs	r4, #255	; 0xff
 801abe0:	9b02      	ldr	r3, [sp, #8]
 801abe2:	2b0f      	cmp	r3, #15
 801abe4:	d8dc      	bhi.n	801aba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801abe6:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801abea:	fa1f f885 	uxth.w	r8, r5
 801abee:	fb08 fa0e 	mul.w	sl, r8, lr
 801abf2:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801abf6:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801abfa:	9303      	str	r3, [sp, #12]
 801abfc:	fa1f f38e 	uxth.w	r3, lr
 801ac00:	9304      	str	r3, [sp, #16]
 801ac02:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801ac06:	9b02      	ldr	r3, [sp, #8]
 801ac08:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ac0c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801ac10:	fb15 fe03 	smulbb	lr, r5, r3
 801ac14:	ea48 0809 	orr.w	r8, r8, r9
 801ac18:	f1c3 0910 	rsb	r9, r3, #16
 801ac1c:	9b01      	ldr	r3, [sp, #4]
 801ac1e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801ac22:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801ac26:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ac2a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ac2e:	eba9 0905 	sub.w	r9, r9, r5
 801ac32:	ea4b 0303 	orr.w	r3, fp, r3
 801ac36:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801ac3a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801ac3e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801ac42:	436b      	muls	r3, r5
 801ac44:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ac48:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ac4c:	ea4b 0202 	orr.w	r2, fp, r2
 801ac50:	fb09 3308 	mla	r3, r9, r8, r3
 801ac54:	fb0e 3302 	mla	r3, lr, r2, r3
 801ac58:	0402      	lsls	r2, r0, #16
 801ac5a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ac5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ac62:	4310      	orrs	r0, r2
 801ac64:	9a02      	ldr	r2, [sp, #8]
 801ac66:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801ac6a:	9a03      	ldr	r2, [sp, #12]
 801ac6c:	fb0e 3e00 	mla	lr, lr, r0, r3
 801ac70:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801ac74:	9a04      	ldr	r2, [sp, #16]
 801ac76:	1a80      	subs	r0, r0, r2
 801ac78:	9a03      	ldr	r2, [sp, #12]
 801ac7a:	eba2 020a 	sub.w	r2, r2, sl
 801ac7e:	b292      	uxth	r2, r2
 801ac80:	b280      	uxth	r0, r0
 801ac82:	4356      	muls	r6, r2
 801ac84:	9a04      	ldr	r2, [sp, #16]
 801ac86:	fb0c 6600 	mla	r6, ip, r0, r6
 801ac8a:	fb02 6707 	mla	r7, r2, r7, r6
 801ac8e:	fb0a 7404 	mla	r4, sl, r4, r7
 801ac92:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801ac96:	1208      	asrs	r0, r1, #8
 801ac98:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ac9c:	ea6f 2424 	mvn.w	r4, r4, asr #8
 801aca0:	b2e4      	uxtb	r4, r4
 801aca2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aca6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801acaa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801acae:	4360      	muls	r0, r4
 801acb0:	ea43 0e0e 	orr.w	lr, r3, lr
 801acb4:	fa1f f38e 	uxth.w	r3, lr
 801acb8:	1c42      	adds	r2, r0, #1
 801acba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801acbe:	1218      	asrs	r0, r3, #8
 801acc0:	10cd      	asrs	r5, r1, #3
 801acc2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801acc6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801acca:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801acce:	4a17      	ldr	r2, [pc, #92]	; (801ad2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 801acd0:	4365      	muls	r5, r4
 801acd2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801acd6:	1c6a      	adds	r2, r5, #1
 801acd8:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801acdc:	00c9      	lsls	r1, r1, #3
 801acde:	10da      	asrs	r2, r3, #3
 801ace0:	b2c9      	uxtb	r1, r1
 801ace2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ace6:	434c      	muls	r4, r1
 801ace8:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801acec:	1c61      	adds	r1, r4, #1
 801acee:	00d2      	lsls	r2, r2, #3
 801acf0:	00db      	lsls	r3, r3, #3
 801acf2:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 801acf6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801acfa:	b2db      	uxtb	r3, r3
 801acfc:	4302      	orrs	r2, r0
 801acfe:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801ad02:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 801ad06:	9a05      	ldr	r2, [sp, #20]
 801ad08:	8013      	strh	r3, [r2, #0]
 801ad0a:	b007      	add	sp, #28
 801ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad10:	2d0f      	cmp	r5, #15
 801ad12:	f63f af45 	bhi.w	801aba0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801ad16:	24ff      	movs	r4, #255	; 0xff
 801ad18:	460a      	mov	r2, r1
 801ad1a:	4608      	mov	r0, r1
 801ad1c:	4627      	mov	r7, r4
 801ad1e:	e762      	b.n	801abe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 801ad20:	08022217 	.word	0x08022217
 801ad24:	08022775 	.word	0x08022775
 801ad28:	0802229f 	.word	0x0802229f
 801ad2c:	fffff800 	.word	0xfffff800

0801ad30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad34:	ed2d 8b08 	vpush	{d8-d11}
 801ad38:	b095      	sub	sp, #84	; 0x54
 801ad3a:	eeb0 aa40 	vmov.f32	s20, s0
 801ad3e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801ad40:	9306      	str	r3, [sp, #24]
 801ad42:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801ad46:	9110      	str	r1, [sp, #64]	; 0x40
 801ad48:	9308      	str	r3, [sp, #32]
 801ad4a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801ad4e:	9013      	str	r0, [sp, #76]	; 0x4c
 801ad50:	6870      	ldr	r0, [r6, #4]
 801ad52:	9212      	str	r2, [sp, #72]	; 0x48
 801ad54:	fb00 1303 	mla	r3, r0, r3, r1
 801ad58:	6831      	ldr	r1, [r6, #0]
 801ad5a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ad5c:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801ad60:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801ad64:	9307      	str	r3, [sp, #28]
 801ad66:	6813      	ldr	r3, [r2, #0]
 801ad68:	9309      	str	r3, [sp, #36]	; 0x24
 801ad6a:	6853      	ldr	r3, [r2, #4]
 801ad6c:	930a      	str	r3, [sp, #40]	; 0x28
 801ad6e:	006b      	lsls	r3, r5, #1
 801ad70:	eef0 9a60 	vmov.f32	s19, s1
 801ad74:	eeb0 9a41 	vmov.f32	s18, s2
 801ad78:	eeb0 8a62 	vmov.f32	s16, s5
 801ad7c:	eef0 8a43 	vmov.f32	s17, s6
 801ad80:	eef0 ba44 	vmov.f32	s23, s8
 801ad84:	eeb0 ba64 	vmov.f32	s22, s9
 801ad88:	eef0 aa45 	vmov.f32	s21, s10
 801ad8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	dc03      	bgt.n	801ad9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801ad94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	f340 83a3 	ble.w	801b4e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801ad9c:	9b06      	ldr	r3, [sp, #24]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	f340 81bc 	ble.w	801b11c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 801ada4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ada6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ada8:	1412      	asrs	r2, r2, #16
 801adaa:	ea4f 4323 	mov.w	r3, r3, asr #16
 801adae:	d42f      	bmi.n	801ae10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801adb0:	1c51      	adds	r1, r2, #1
 801adb2:	428d      	cmp	r5, r1
 801adb4:	dd2f      	ble.n	801ae16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	db2d      	blt.n	801ae16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801adba:	9808      	ldr	r0, [sp, #32]
 801adbc:	1c59      	adds	r1, r3, #1
 801adbe:	4288      	cmp	r0, r1
 801adc0:	dd29      	ble.n	801ae16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801adc2:	9b06      	ldr	r3, [sp, #24]
 801adc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801adc6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801adc8:	3b01      	subs	r3, #1
 801adca:	fb02 1203 	mla	r2, r2, r3, r1
 801adce:	1412      	asrs	r2, r2, #16
 801add0:	d42b      	bmi.n	801ae2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801add2:	3201      	adds	r2, #1
 801add4:	4295      	cmp	r5, r2
 801add6:	dd28      	ble.n	801ae2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801add8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801adda:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801addc:	fb02 1303 	mla	r3, r2, r3, r1
 801ade0:	141b      	asrs	r3, r3, #16
 801ade2:	d422      	bmi.n	801ae2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ade4:	9a08      	ldr	r2, [sp, #32]
 801ade6:	3301      	adds	r3, #1
 801ade8:	429a      	cmp	r2, r3
 801adea:	dd1e      	ble.n	801ae2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801adec:	9b06      	ldr	r3, [sp, #24]
 801adee:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801adf2:	9311      	str	r3, [sp, #68]	; 0x44
 801adf4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801adf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	f300 8208 	bgt.w	801b210 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 801ae00:	9b06      	ldr	r3, [sp, #24]
 801ae02:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ae06:	9b07      	ldr	r3, [sp, #28]
 801ae08:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ae0c:	9307      	str	r3, [sp, #28]
 801ae0e:	e187      	b.n	801b120 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 801ae10:	1c57      	adds	r7, r2, #1
 801ae12:	f040 8174 	bne.w	801b0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ae16:	42aa      	cmp	r2, r5
 801ae18:	f280 8171 	bge.w	801b0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ae1c:	1c5e      	adds	r6, r3, #1
 801ae1e:	f2c0 816e 	blt.w	801b0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ae22:	9a08      	ldr	r2, [sp, #32]
 801ae24:	4293      	cmp	r3, r2
 801ae26:	f280 816a 	bge.w	801b0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ae2a:	9b06      	ldr	r3, [sp, #24]
 801ae2c:	9f07      	ldr	r7, [sp, #28]
 801ae2e:	9311      	str	r3, [sp, #68]	; 0x44
 801ae30:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ae34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	dde2      	ble.n	801ae00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ae3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae3c:	1419      	asrs	r1, r3, #16
 801ae3e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ae40:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ae44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae46:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ae4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ae4c:	141b      	asrs	r3, r3, #16
 801ae4e:	f100 81c4 	bmi.w	801b1da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 801ae52:	1c58      	adds	r0, r3, #1
 801ae54:	4285      	cmp	r5, r0
 801ae56:	f340 81c2 	ble.w	801b1de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801ae5a:	2900      	cmp	r1, #0
 801ae5c:	f2c0 81bf 	blt.w	801b1de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801ae60:	9c08      	ldr	r4, [sp, #32]
 801ae62:	1c48      	adds	r0, r1, #1
 801ae64:	4284      	cmp	r4, r0
 801ae66:	f340 81ba 	ble.w	801b1de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801ae6a:	fb01 3105 	mla	r1, r1, r5, r3
 801ae6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae70:	fa1f fe82 	uxth.w	lr, r2
 801ae74:	eb03 0a01 	add.w	sl, r3, r1
 801ae78:	ea4f 100e 	mov.w	r0, lr, lsl #4
 801ae7c:	f813 9001 	ldrb.w	r9, [r3, r1]
 801ae80:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ae84:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801ae88:	b29b      	uxth	r3, r3
 801ae8a:	f1bc 0f00 	cmp.w	ip, #0
 801ae8e:	f000 8186 	beq.w	801b19e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 801ae92:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801ae96:	940b      	str	r4, [sp, #44]	; 0x2c
 801ae98:	eb0a 0b05 	add.w	fp, sl, r5
 801ae9c:	fa1f fa8c 	uxth.w	sl, ip
 801aea0:	fb0a fe0e 	mul.w	lr, sl, lr
 801aea4:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801aea8:	fa1f fa8a 	uxth.w	sl, sl
 801aeac:	eba0 000e 	sub.w	r0, r0, lr
 801aeb0:	eba3 030a 	sub.w	r3, r3, sl
 801aeb4:	b280      	uxth	r0, r0
 801aeb6:	fb08 f000 	mul.w	r0, r8, r0
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	fb09 0303 	mla	r3, r9, r3, r0
 801aec0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801aec2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801aec6:	940c      	str	r4, [sp, #48]	; 0x30
 801aec8:	fb0a 3300 	mla	r3, sl, r0, r3
 801aecc:	fb0e 3304 	mla	r3, lr, r4, r3
 801aed0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	f000 8105 	beq.w	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801aeda:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aedc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801aede:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801aee2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801aee6:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801aeea:	f000 815d 	beq.w	801b1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 801aeee:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801aef2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801aef6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801aefa:	fb09 f101 	mul.w	r1, r9, r1
 801aefe:	fb0a fe0e 	mul.w	lr, sl, lr
 801af02:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801af06:	f101 0b20 	add.w	fp, r1, #32
 801af0a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801af0e:	44ce      	add	lr, r9
 801af10:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801af14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801af18:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801af1c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801af20:	ea4e 0909 	orr.w	r9, lr, r9
 801af24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801af28:	8841      	ldrh	r1, [r0, #2]
 801af2a:	d019      	beq.n	801af60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801af2c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801af30:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801af34:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801af38:	fb0a fe0e 	mul.w	lr, sl, lr
 801af3c:	fb08 f801 	mul.w	r8, r8, r1
 801af40:	f108 0b20 	add.w	fp, r8, #32
 801af44:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 801af48:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801af4c:	448e      	add	lr, r1
 801af4e:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 801af52:	0a09      	lsrs	r1, r1, #8
 801af54:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 801af58:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801af5c:	ea4a 0101 	orr.w	r1, sl, r1
 801af60:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801af64:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801af68:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801af6c:	ea4e 0909 	orr.w	r9, lr, r9
 801af70:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801af74:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801af78:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801af7c:	ea4e 0e01 	orr.w	lr, lr, r1
 801af80:	f1bc 0f00 	cmp.w	ip, #0
 801af84:	f000 8112 	beq.w	801b1ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 801af88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801af8a:	eb00 0801 	add.w	r8, r0, r1
 801af8e:	5a41      	ldrh	r1, [r0, r1]
 801af90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801af92:	28ff      	cmp	r0, #255	; 0xff
 801af94:	d019      	beq.n	801afca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 801af96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af98:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801af9c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801afa0:	fb04 fb01 	mul.w	fp, r4, r1
 801afa4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801afa8:	fb0a fa00 	mul.w	sl, sl, r0
 801afac:	f10b 0020 	add.w	r0, fp, #32
 801afb0:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801afb4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801afb8:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801afbc:	4451      	add	r1, sl
 801afbe:	0a00      	lsrs	r0, r0, #8
 801afc0:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801afc4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801afc8:	4301      	orrs	r1, r0
 801afca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801afcc:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801afd0:	2cff      	cmp	r4, #255	; 0xff
 801afd2:	d01a      	beq.n	801b00a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801afd4:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 801afd8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801afdc:	fb04 fb00 	mul.w	fp, r4, r0
 801afe0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801afe4:	fb0a fa08 	mul.w	sl, sl, r8
 801afe8:	f10b 0820 	add.w	r8, fp, #32
 801afec:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 801aff0:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801aff4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801aff8:	4450      	add	r0, sl
 801affa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801affe:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801b002:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b006:	ea40 0008 	orr.w	r0, r0, r8
 801b00a:	fb1c f802 	smulbb	r8, ip, r2
 801b00e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801b012:	f1cc 0a10 	rsb	sl, ip, #16
 801b016:	ebaa 0a02 	sub.w	sl, sl, r2
 801b01a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b01e:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801b022:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801b026:	fb0e f202 	mul.w	r2, lr, r2
 801b02a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b02e:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801b032:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b036:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801b03a:	fb09 220a 	mla	r2, r9, sl, r2
 801b03e:	ea4b 0101 	orr.w	r1, fp, r1
 801b042:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b046:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b04a:	fb0c 2201 	mla	r2, ip, r1, r2
 801b04e:	ea4e 0000 	orr.w	r0, lr, r0
 801b052:	fb08 2800 	mla	r8, r8, r0, r2
 801b056:	ea4f 5258 	mov.w	r2, r8, lsr #21
 801b05a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b05e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b062:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801b066:	ea42 0808 	orr.w	r8, r2, r8
 801b06a:	fa1f f288 	uxth.w	r2, r8
 801b06e:	2bff      	cmp	r3, #255	; 0xff
 801b070:	f000 80b1 	beq.w	801b1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 801b074:	f8b7 8000 	ldrh.w	r8, [r7]
 801b078:	43db      	mvns	r3, r3
 801b07a:	ea4f 2028 	mov.w	r0, r8, asr #8
 801b07e:	fa5f fe83 	uxtb.w	lr, r3
 801b082:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b086:	fb00 f00e 	mul.w	r0, r0, lr
 801b08a:	1c41      	adds	r1, r0, #1
 801b08c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801b090:	1210      	asrs	r0, r2, #8
 801b092:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801b096:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b09a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801b09e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801b0a2:	495a      	ldr	r1, [pc, #360]	; (801b20c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 801b0a4:	fb0c fc0e 	mul.w	ip, ip, lr
 801b0a8:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801b0ac:	f10c 0101 	add.w	r1, ip, #1
 801b0b0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801b0b4:	10d1      	asrs	r1, r2, #3
 801b0b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b0ba:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801b0be:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801b0c2:	b2db      	uxtb	r3, r3
 801b0c4:	00c9      	lsls	r1, r1, #3
 801b0c6:	fb03 f30e 	mul.w	r3, r3, lr
 801b0ca:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b0ce:	4301      	orrs	r1, r0
 801b0d0:	1c58      	adds	r0, r3, #1
 801b0d2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b0d6:	00d3      	lsls	r3, r2, #3
 801b0d8:	b2db      	uxtb	r3, r3
 801b0da:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b0de:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801b0e2:	803b      	strh	r3, [r7, #0]
 801b0e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b0e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b0e8:	4413      	add	r3, r2
 801b0ea:	9327      	str	r3, [sp, #156]	; 0x9c
 801b0ec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b0ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b0f0:	441a      	add	r2, r3
 801b0f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b0f4:	9228      	str	r2, [sp, #160]	; 0xa0
 801b0f6:	3b01      	subs	r3, #1
 801b0f8:	3702      	adds	r7, #2
 801b0fa:	9311      	str	r3, [sp, #68]	; 0x44
 801b0fc:	e69a      	b.n	801ae34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801b0fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b100:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b102:	4413      	add	r3, r2
 801b104:	9327      	str	r3, [sp, #156]	; 0x9c
 801b106:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b108:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b10a:	441a      	add	r2, r3
 801b10c:	9b06      	ldr	r3, [sp, #24]
 801b10e:	9228      	str	r2, [sp, #160]	; 0xa0
 801b110:	3b01      	subs	r3, #1
 801b112:	9306      	str	r3, [sp, #24]
 801b114:	9b07      	ldr	r3, [sp, #28]
 801b116:	3302      	adds	r3, #2
 801b118:	9307      	str	r3, [sp, #28]
 801b11a:	e63f      	b.n	801ad9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801b11c:	f47f ae51 	bne.w	801adc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b122:	2b00      	cmp	r3, #0
 801b124:	f340 81dd 	ble.w	801b4e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801b128:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b130:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b134:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b136:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b13a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b13e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b142:	eef0 6a48 	vmov.f32	s13, s16
 801b146:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b14a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b14e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b152:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801b156:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b15a:	eef0 6a68 	vmov.f32	s13, s17
 801b15e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b162:	ee18 2a10 	vmov	r2, s16
 801b166:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b16a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b16e:	ee18 2a90 	vmov	r2, s17
 801b172:	9329      	str	r3, [sp, #164]	; 0xa4
 801b174:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b176:	fb92 f3f3 	sdiv	r3, r2, r3
 801b17a:	932a      	str	r3, [sp, #168]	; 0xa8
 801b17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b17e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b180:	3b01      	subs	r3, #1
 801b182:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b186:	9310      	str	r3, [sp, #64]	; 0x40
 801b188:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b18a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801b18e:	bf08      	it	eq
 801b190:	4613      	moveq	r3, r2
 801b192:	9306      	str	r3, [sp, #24]
 801b194:	eef0 8a67 	vmov.f32	s17, s15
 801b198:	eeb0 8a47 	vmov.f32	s16, s14
 801b19c:	e5f7      	b.n	801ad8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801b19e:	fb08 f000 	mul.w	r0, r8, r0
 801b1a2:	fb09 0303 	mla	r3, r9, r3, r0
 801b1a6:	e693      	b.n	801aed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 801b1a8:	4689      	mov	r9, r1
 801b1aa:	e6bb      	b.n	801af24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 801b1ac:	f1c2 0010 	rsb	r0, r2, #16
 801b1b0:	fb0e f202 	mul.w	r2, lr, r2
 801b1b4:	fb09 2900 	mla	r9, r9, r0, r2
 801b1b8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b1bc:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801b1c0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b1c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b1c8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b1cc:	ea42 0909 	orr.w	r9, r2, r9
 801b1d0:	fa1f f289 	uxth.w	r2, r9
 801b1d4:	e74b      	b.n	801b06e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801b1d6:	803a      	strh	r2, [r7, #0]
 801b1d8:	e784      	b.n	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b1da:	1c5c      	adds	r4, r3, #1
 801b1dc:	d182      	bne.n	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b1de:	429d      	cmp	r5, r3
 801b1e0:	dd80      	ble.n	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b1e2:	1c48      	adds	r0, r1, #1
 801b1e4:	f6ff af7e 	blt.w	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b1e8:	9808      	ldr	r0, [sp, #32]
 801b1ea:	4288      	cmp	r0, r1
 801b1ec:	f77f af7a 	ble.w	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b1f0:	e9cd 3102 	strd	r3, r1, [sp, #8]
 801b1f4:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 801b1f8:	e9cd 5000 	strd	r5, r0, [sp]
 801b1fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b200:	4639      	mov	r1, r7
 801b202:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b204:	f7ff fbf2 	bl	801a9ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801b208:	e76c      	b.n	801b0e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801b20a:	bf00      	nop
 801b20c:	fffff800 	.word	0xfffff800
 801b210:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b212:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b218:	141f      	asrs	r7, r3, #16
 801b21a:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801b21e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b220:	141b      	asrs	r3, r3, #16
 801b222:	fb05 3707 	mla	r7, r5, r7, r3
 801b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b228:	fa1f fc82 	uxth.w	ip, r2
 801b22c:	eb03 0a07 	add.w	sl, r3, r7
 801b230:	ea4f 110c 	mov.w	r1, ip, lsl #4
 801b234:	f813 9007 	ldrb.w	r9, [r3, r7]
 801b238:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b23c:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 801b240:	b29b      	uxth	r3, r3
 801b242:	2800      	cmp	r0, #0
 801b244:	f000 8132 	beq.w	801b4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 801b248:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801b24c:	940d      	str	r4, [sp, #52]	; 0x34
 801b24e:	eb0a 0b05 	add.w	fp, sl, r5
 801b252:	fa1f fa80 	uxth.w	sl, r0
 801b256:	fb0a fc0c 	mul.w	ip, sl, ip
 801b25a:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801b25e:	fa1f fa8a 	uxth.w	sl, sl
 801b262:	eba1 010c 	sub.w	r1, r1, ip
 801b266:	eba3 030a 	sub.w	r3, r3, sl
 801b26a:	b289      	uxth	r1, r1
 801b26c:	fb08 f101 	mul.w	r1, r8, r1
 801b270:	b29b      	uxth	r3, r3
 801b272:	fb09 1303 	mla	r3, r9, r3, r1
 801b276:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b278:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801b27c:	940e      	str	r4, [sp, #56]	; 0x38
 801b27e:	fb0a 3301 	mla	r3, sl, r1, r3
 801b282:	fb0c 3304 	mla	r3, ip, r4, r3
 801b286:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	f000 8100 	beq.w	801b490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801b290:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b292:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b294:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b298:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801b29c:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801b2a0:	f000 8109 	beq.w	801b4b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 801b2a4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801b2a8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801b2ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b2b0:	fb09 f707 	mul.w	r7, r9, r7
 801b2b4:	fb0a fc0c 	mul.w	ip, sl, ip
 801b2b8:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801b2bc:	f107 0b20 	add.w	fp, r7, #32
 801b2c0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801b2c4:	44cc      	add	ip, r9
 801b2c6:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801b2ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b2ce:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801b2d2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b2d6:	ea4c 0909 	orr.w	r9, ip, r9
 801b2da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b2de:	884f      	ldrh	r7, [r1, #2]
 801b2e0:	d019      	beq.n	801b316 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 801b2e2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801b2e6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801b2ea:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b2ee:	fb08 f807 	mul.w	r8, r8, r7
 801b2f2:	fb0a fc0c 	mul.w	ip, sl, ip
 801b2f6:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801b2fa:	f108 0b20 	add.w	fp, r8, #32
 801b2fe:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801b302:	44bc      	add	ip, r7
 801b304:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801b308:	0a3f      	lsrs	r7, r7, #8
 801b30a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801b30e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b312:	ea4c 0707 	orr.w	r7, ip, r7
 801b316:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801b31a:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801b31e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b322:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b326:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b32a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b32e:	ea4c 0909 	orr.w	r9, ip, r9
 801b332:	ea4a 0707 	orr.w	r7, sl, r7
 801b336:	2800      	cmp	r0, #0
 801b338:	f000 80bf 	beq.w	801b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 801b33c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b33e:	eb01 0c04 	add.w	ip, r1, r4
 801b342:	f831 8004 	ldrh.w	r8, [r1, r4]
 801b346:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b348:	29ff      	cmp	r1, #255	; 0xff
 801b34a:	d01a      	beq.n	801b382 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 801b34c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b34e:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801b352:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b356:	fb04 fb08 	mul.w	fp, r4, r8
 801b35a:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801b35e:	fb0a fa01 	mul.w	sl, sl, r1
 801b362:	f10b 0120 	add.w	r1, fp, #32
 801b366:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801b36a:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801b36e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801b372:	44d0      	add	r8, sl
 801b374:	0a09      	lsrs	r1, r1, #8
 801b376:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801b37a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b37e:	ea48 0801 	orr.w	r8, r8, r1
 801b382:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b384:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801b388:	2cff      	cmp	r4, #255	; 0xff
 801b38a:	d01a      	beq.n	801b3c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 801b38c:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801b390:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b394:	fb04 fb01 	mul.w	fp, r4, r1
 801b398:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801b39c:	fb0a fa0c 	mul.w	sl, sl, ip
 801b3a0:	f10b 0c20 	add.w	ip, fp, #32
 801b3a4:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801b3a8:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801b3ac:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801b3b0:	4451      	add	r1, sl
 801b3b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3b6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801b3ba:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801b3be:	ea41 010c 	orr.w	r1, r1, ip
 801b3c2:	fb10 fc02 	smulbb	ip, r0, r2
 801b3c6:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801b3ca:	f1c0 0a10 	rsb	sl, r0, #16
 801b3ce:	ebaa 0a02 	sub.w	sl, sl, r2
 801b3d2:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801b3d6:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801b3da:	437a      	muls	r2, r7
 801b3dc:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801b3e0:	040f      	lsls	r7, r1, #16
 801b3e2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b3e6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801b3ea:	fb09 220a 	mla	r2, r9, sl, r2
 801b3ee:	ea4b 0808 	orr.w	r8, fp, r8
 801b3f2:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801b3f6:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801b3fa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b3fe:	fb00 2208 	mla	r2, r0, r8, r2
 801b402:	4339      	orrs	r1, r7
 801b404:	fb0c 2201 	mla	r2, ip, r1, r2
 801b408:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801b40c:	0952      	lsrs	r2, r2, #5
 801b40e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801b412:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b416:	ea49 0202 	orr.w	r2, r9, r2
 801b41a:	2bff      	cmp	r3, #255	; 0xff
 801b41c:	b292      	uxth	r2, r2
 801b41e:	d05d      	beq.n	801b4dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 801b420:	f8be 8000 	ldrh.w	r8, [lr]
 801b424:	4c31      	ldr	r4, [pc, #196]	; (801b4ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 801b426:	43db      	mvns	r3, r3
 801b428:	ea4f 2028 	mov.w	r0, r8, asr #8
 801b42c:	fa5f fc83 	uxtb.w	ip, r3
 801b430:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b434:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801b438:	fb00 f00c 	mul.w	r0, r0, ip
 801b43c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b440:	fb07 f10c 	mul.w	r1, r7, ip
 801b444:	1c47      	adds	r7, r0, #1
 801b446:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b44a:	1217      	asrs	r7, r2, #8
 801b44c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b450:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b454:	1c4f      	adds	r7, r1, #1
 801b456:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801b45a:	10d1      	asrs	r1, r2, #3
 801b45c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b460:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801b464:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801b468:	b2db      	uxtb	r3, r3
 801b46a:	00c9      	lsls	r1, r1, #3
 801b46c:	fb03 f30c 	mul.w	r3, r3, ip
 801b470:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b474:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801b478:	4308      	orrs	r0, r1
 801b47a:	00d2      	lsls	r2, r2, #3
 801b47c:	1c59      	adds	r1, r3, #1
 801b47e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b482:	b2d2      	uxtb	r2, r2
 801b484:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b488:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801b48c:	f8ae 0000 	strh.w	r0, [lr]
 801b490:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b492:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b494:	4413      	add	r3, r2
 801b496:	9327      	str	r3, [sp, #156]	; 0x9c
 801b498:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b49a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b49c:	441a      	add	r2, r3
 801b49e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b4a0:	9228      	str	r2, [sp, #160]	; 0xa0
 801b4a2:	3b01      	subs	r3, #1
 801b4a4:	f10e 0e02 	add.w	lr, lr, #2
 801b4a8:	9311      	str	r3, [sp, #68]	; 0x44
 801b4aa:	e4a5      	b.n	801adf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b4ac:	fb08 f101 	mul.w	r1, r8, r1
 801b4b0:	fb09 1303 	mla	r3, r9, r3, r1
 801b4b4:	e6e7      	b.n	801b286 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801b4b6:	46b9      	mov	r9, r7
 801b4b8:	e70f      	b.n	801b2da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 801b4ba:	f1c2 0110 	rsb	r1, r2, #16
 801b4be:	437a      	muls	r2, r7
 801b4c0:	fb09 2901 	mla	r9, r9, r1, r2
 801b4c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b4c8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801b4cc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801b4d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b4d4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b4d8:	4302      	orrs	r2, r0
 801b4da:	e79e      	b.n	801b41a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801b4dc:	f8ae 2000 	strh.w	r2, [lr]
 801b4e0:	e7d6      	b.n	801b490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801b4e2:	b015      	add	sp, #84	; 0x54
 801b4e4:	ecbd 8b08 	vpop	{d8-d11}
 801b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ec:	fffff800 	.word	0xfffff800

0801b4f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801b4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4f4:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801b4f8:	fb0c 4e03 	mla	lr, ip, r3, r4
 801b4fc:	f1bc 0f00 	cmp.w	ip, #0
 801b500:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801b504:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801b508:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801b50c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801b510:	8808      	ldrh	r0, [r1, #0]
 801b512:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801b516:	db2f      	blt.n	801b578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801b518:	45e2      	cmp	sl, ip
 801b51a:	dd2d      	ble.n	801b578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801b51c:	2c00      	cmp	r4, #0
 801b51e:	db29      	blt.n	801b574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801b520:	42a3      	cmp	r3, r4
 801b522:	dd27      	ble.n	801b574 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801b524:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801b528:	1c62      	adds	r2, r4, #1
 801b52a:	d428      	bmi.n	801b57e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801b52c:	4293      	cmp	r3, r2
 801b52e:	dd26      	ble.n	801b57e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801b530:	b32f      	cbz	r7, 801b57e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801b532:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801b536:	f11c 0c01 	adds.w	ip, ip, #1
 801b53a:	d424      	bmi.n	801b586 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801b53c:	45e2      	cmp	sl, ip
 801b53e:	dd22      	ble.n	801b586 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801b540:	2e00      	cmp	r6, #0
 801b542:	f000 809c 	beq.w	801b67e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 801b546:	2c00      	cmp	r4, #0
 801b548:	db1b      	blt.n	801b582 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801b54a:	42a3      	cmp	r3, r4
 801b54c:	dd19      	ble.n	801b582 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801b54e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801b552:	3401      	adds	r4, #1
 801b554:	d41a      	bmi.n	801b58c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801b556:	42a3      	cmp	r3, r4
 801b558:	dd18      	ble.n	801b58c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801b55a:	b1cf      	cbz	r7, 801b590 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801b55c:	3301      	adds	r3, #1
 801b55e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801b562:	2f0f      	cmp	r7, #15
 801b564:	d915      	bls.n	801b592 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801b566:	4b49      	ldr	r3, [pc, #292]	; (801b68c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801b568:	4a49      	ldr	r2, [pc, #292]	; (801b690 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801b56a:	484a      	ldr	r0, [pc, #296]	; (801b694 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801b56c:	f240 3155 	movw	r1, #853	; 0x355
 801b570:	f002 ff38 	bl	801e3e4 <__assert_func>
 801b574:	4681      	mov	r9, r0
 801b576:	e7d7      	b.n	801b528 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801b578:	4686      	mov	lr, r0
 801b57a:	4681      	mov	r9, r0
 801b57c:	e7db      	b.n	801b536 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801b57e:	4686      	mov	lr, r0
 801b580:	e7d9      	b.n	801b536 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801b582:	4684      	mov	ip, r0
 801b584:	e7e5      	b.n	801b552 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801b586:	4603      	mov	r3, r0
 801b588:	4684      	mov	ip, r0
 801b58a:	e7ea      	b.n	801b562 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801b58c:	4603      	mov	r3, r0
 801b58e:	e7e8      	b.n	801b562 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801b590:	4603      	mov	r3, r0
 801b592:	2e0f      	cmp	r6, #15
 801b594:	d8e7      	bhi.n	801b566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801b596:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801b59a:	fb17 f806 	smulbb	r8, r7, r6
 801b59e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b5a2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801b5a6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801b5aa:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801b5ae:	ea44 0909 	orr.w	r9, r4, r9
 801b5b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b5b6:	f1c6 0410 	rsb	r4, r6, #16
 801b5ba:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b5be:	1be4      	subs	r4, r4, r7
 801b5c0:	041a      	lsls	r2, r3, #16
 801b5c2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801b5c6:	ea4a 0e0e 	orr.w	lr, sl, lr
 801b5ca:	fb07 fe0e 	mul.w	lr, r7, lr
 801b5ce:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b5d2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801b5d6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b5da:	fb04 e409 	mla	r4, r4, r9, lr
 801b5de:	4313      	orrs	r3, r2
 801b5e0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801b5e4:	fb08 4303 	mla	r3, r8, r3, r4
 801b5e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801b5ec:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801b5f0:	4322      	orrs	r2, r4
 801b5f2:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801b5f6:	fb06 3202 	mla	r2, r6, r2, r3
 801b5fa:	0d53      	lsrs	r3, r2, #21
 801b5fc:	0952      	lsrs	r2, r2, #5
 801b5fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b602:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b606:	431a      	orrs	r2, r3
 801b608:	b293      	uxth	r3, r2
 801b60a:	b2af      	uxth	r7, r5
 801b60c:	1202      	asrs	r2, r0, #8
 801b60e:	43ed      	mvns	r5, r5
 801b610:	b2ed      	uxtb	r5, r5
 801b612:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b616:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b61a:	fb12 f205 	smulbb	r2, r2, r5
 801b61e:	10c6      	asrs	r6, r0, #3
 801b620:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b624:	fb0c 2c07 	mla	ip, ip, r7, r2
 801b628:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b62c:	10da      	asrs	r2, r3, #3
 801b62e:	fb16 f605 	smulbb	r6, r6, r5
 801b632:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b636:	fb02 6207 	mla	r2, r2, r7, r6
 801b63a:	b296      	uxth	r6, r2
 801b63c:	00c2      	lsls	r2, r0, #3
 801b63e:	00dc      	lsls	r4, r3, #3
 801b640:	b2d2      	uxtb	r2, r2
 801b642:	b2e4      	uxtb	r4, r4
 801b644:	fb12 f205 	smulbb	r2, r2, r5
 801b648:	fb04 2207 	mla	r2, r4, r7, r2
 801b64c:	fa1f fc8c 	uxth.w	ip, ip
 801b650:	b292      	uxth	r2, r2
 801b652:	f10c 0301 	add.w	r3, ip, #1
 801b656:	1c50      	adds	r0, r2, #1
 801b658:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801b65c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b660:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b664:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b668:	4313      	orrs	r3, r2
 801b66a:	1c72      	adds	r2, r6, #1
 801b66c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801b670:	0952      	lsrs	r2, r2, #5
 801b672:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b676:	4313      	orrs	r3, r2
 801b678:	800b      	strh	r3, [r1, #0]
 801b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b67e:	2f0f      	cmp	r7, #15
 801b680:	f63f af71 	bhi.w	801b566 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801b684:	4603      	mov	r3, r0
 801b686:	4684      	mov	ip, r0
 801b688:	e785      	b.n	801b596 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801b68a:	bf00      	nop
 801b68c:	08022217 	.word	0x08022217
 801b690:	0802281e 	.word	0x0802281e
 801b694:	0802229f 	.word	0x0802229f

0801b698 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b69c:	ed2d 8b08 	vpush	{d8-d11}
 801b6a0:	b095      	sub	sp, #84	; 0x54
 801b6a2:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801b6a6:	9306      	str	r3, [sp, #24]
 801b6a8:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801b6ac:	9212      	str	r2, [sp, #72]	; 0x48
 801b6ae:	9307      	str	r3, [sp, #28]
 801b6b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b6b2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801b6b6:	930c      	str	r3, [sp, #48]	; 0x30
 801b6b8:	910b      	str	r1, [sp, #44]	; 0x2c
 801b6ba:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b6be:	9013      	str	r0, [sp, #76]	; 0x4c
 801b6c0:	6850      	ldr	r0, [r2, #4]
 801b6c2:	6812      	ldr	r2, [r2, #0]
 801b6c4:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 801b6c8:	fb00 1303 	mla	r3, r0, r3, r1
 801b6cc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801b6d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	9309      	str	r3, [sp, #36]	; 0x24
 801b6d6:	007b      	lsls	r3, r7, #1
 801b6d8:	930a      	str	r3, [sp, #40]	; 0x28
 801b6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b6dc:	43db      	mvns	r3, r3
 801b6de:	b2db      	uxtb	r3, r3
 801b6e0:	eeb0 aa40 	vmov.f32	s20, s0
 801b6e4:	eef0 9a60 	vmov.f32	s19, s1
 801b6e8:	eeb0 9a41 	vmov.f32	s18, s2
 801b6ec:	eeb0 8a62 	vmov.f32	s16, s5
 801b6f0:	eef0 8a43 	vmov.f32	s17, s6
 801b6f4:	eef0 ba44 	vmov.f32	s23, s8
 801b6f8:	eeb0 ba64 	vmov.f32	s22, s9
 801b6fc:	eef0 aa45 	vmov.f32	s21, s10
 801b700:	9308      	str	r3, [sp, #32]
 801b702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b704:	2b00      	cmp	r3, #0
 801b706:	dc03      	bgt.n	801b710 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b708:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	f340 81f3 	ble.w	801baf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801b710:	9b06      	ldr	r3, [sp, #24]
 801b712:	2b00      	cmp	r3, #0
 801b714:	f340 80fa 	ble.w	801b90c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b718:	1422      	asrs	r2, r4, #16
 801b71a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b71e:	d42b      	bmi.n	801b778 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801b720:	1c51      	adds	r1, r2, #1
 801b722:	428f      	cmp	r7, r1
 801b724:	dd2b      	ble.n	801b77e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801b726:	2b00      	cmp	r3, #0
 801b728:	db29      	blt.n	801b77e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801b72a:	9807      	ldr	r0, [sp, #28]
 801b72c:	1c59      	adds	r1, r3, #1
 801b72e:	4288      	cmp	r0, r1
 801b730:	dd25      	ble.n	801b77e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801b732:	9b06      	ldr	r3, [sp, #24]
 801b734:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b736:	3b01      	subs	r3, #1
 801b738:	fb02 4203 	mla	r2, r2, r3, r4
 801b73c:	1412      	asrs	r2, r2, #16
 801b73e:	d428      	bmi.n	801b792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b740:	3201      	adds	r2, #1
 801b742:	4297      	cmp	r7, r2
 801b744:	dd25      	ble.n	801b792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b746:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b748:	fb02 6303 	mla	r3, r2, r3, r6
 801b74c:	141b      	asrs	r3, r3, #16
 801b74e:	d420      	bmi.n	801b792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b750:	9a07      	ldr	r2, [sp, #28]
 801b752:	3301      	adds	r3, #1
 801b754:	429a      	cmp	r2, r3
 801b756:	dd1c      	ble.n	801b792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b758:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b75c:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801b760:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b764:	f1b8 0f00 	cmp.w	r8, #0
 801b768:	f300 8129 	bgt.w	801b9be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 801b76c:	9b06      	ldr	r3, [sp, #24]
 801b76e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801b772:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801b776:	e0cb      	b.n	801b910 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b778:	1c51      	adds	r1, r2, #1
 801b77a:	f040 80bd 	bne.w	801b8f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801b77e:	42ba      	cmp	r2, r7
 801b780:	f280 80ba 	bge.w	801b8f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801b784:	1c5a      	adds	r2, r3, #1
 801b786:	f2c0 80b7 	blt.w	801b8f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801b78a:	9a07      	ldr	r2, [sp, #28]
 801b78c:	4293      	cmp	r3, r2
 801b78e:	f280 80b3 	bge.w	801b8f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801b792:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b796:	46c8      	mov	r8, r9
 801b798:	f1bb 0f00 	cmp.w	fp, #0
 801b79c:	dde6      	ble.n	801b76c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801b79e:	1421      	asrs	r1, r4, #16
 801b7a0:	ea4f 4226 	mov.w	r2, r6, asr #16
 801b7a4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801b7a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b7ac:	f100 80ef 	bmi.w	801b98e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801b7b0:	f101 0c01 	add.w	ip, r1, #1
 801b7b4:	4567      	cmp	r7, ip
 801b7b6:	f340 80ec 	ble.w	801b992 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801b7ba:	2a00      	cmp	r2, #0
 801b7bc:	f2c0 80e9 	blt.w	801b992 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801b7c0:	9d07      	ldr	r5, [sp, #28]
 801b7c2:	f102 0c01 	add.w	ip, r2, #1
 801b7c6:	4565      	cmp	r5, ip
 801b7c8:	f340 80e3 	ble.w	801b992 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801b7cc:	fb02 1207 	mla	r2, r2, r7, r1
 801b7d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b7d2:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801b7d6:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801b7da:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801b7de:	b138      	cbz	r0, 801b7f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 801b7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b7e4:	4472      	add	r2, lr
 801b7e6:	f83e 5005 	ldrh.w	r5, [lr, r5]
 801b7ea:	8852      	ldrh	r2, [r2, #2]
 801b7ec:	950e      	str	r5, [sp, #56]	; 0x38
 801b7ee:	920f      	str	r2, [sp, #60]	; 0x3c
 801b7f0:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801b7f4:	fb13 f200 	smulbb	r2, r3, r0
 801b7f8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b7fc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801b800:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b804:	10d2      	asrs	r2, r2, #3
 801b806:	ea4e 0c0c 	orr.w	ip, lr, ip
 801b80a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b80e:	f1c0 0e10 	rsb	lr, r0, #16
 801b812:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b816:	ebae 0e03 	sub.w	lr, lr, r3
 801b81a:	ea4a 0101 	orr.w	r1, sl, r1
 801b81e:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801b822:	4359      	muls	r1, r3
 801b824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b826:	9d08      	ldr	r5, [sp, #32]
 801b828:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801b82c:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801b830:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b834:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b838:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b83c:	ea4c 0c03 	orr.w	ip, ip, r3
 801b840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b842:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b844:	041b      	lsls	r3, r3, #16
 801b846:	fb02 ec0c 	mla	ip, r2, ip, lr
 801b84a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b84e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801b852:	ea43 030e 	orr.w	r3, r3, lr
 801b856:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801b85a:	fb02 c203 	mla	r2, r2, r3, ip
 801b85e:	0d53      	lsrs	r3, r2, #21
 801b860:	0952      	lsrs	r2, r2, #5
 801b862:	f8b8 c000 	ldrh.w	ip, [r8]
 801b866:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b86a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b86e:	431a      	orrs	r2, r3
 801b870:	b292      	uxth	r2, r2
 801b872:	ea4f 212c 	mov.w	r1, ip, asr #8
 801b876:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b87a:	1210      	asrs	r0, r2, #8
 801b87c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b880:	fb11 f105 	smulbb	r1, r1, r5
 801b884:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801b888:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b88c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b890:	fb00 1003 	mla	r0, r0, r3, r1
 801b894:	fa5f fc8c 	uxtb.w	ip, ip
 801b898:	10d1      	asrs	r1, r2, #3
 801b89a:	00d2      	lsls	r2, r2, #3
 801b89c:	fb1c fc05 	smulbb	ip, ip, r5
 801b8a0:	b2d2      	uxtb	r2, r2
 801b8a2:	fb02 c203 	mla	r2, r2, r3, ip
 801b8a6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b8aa:	b280      	uxth	r0, r0
 801b8ac:	b292      	uxth	r2, r2
 801b8ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b8b2:	fb1e fe05 	smulbb	lr, lr, r5
 801b8b6:	fb01 e103 	mla	r1, r1, r3, lr
 801b8ba:	f102 0c01 	add.w	ip, r2, #1
 801b8be:	1c43      	adds	r3, r0, #1
 801b8c0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b8c4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b8c8:	b289      	uxth	r1, r1
 801b8ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b8ce:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b8d2:	4313      	orrs	r3, r2
 801b8d4:	1c4a      	adds	r2, r1, #1
 801b8d6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b8da:	0949      	lsrs	r1, r1, #5
 801b8dc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b8e0:	430b      	orrs	r3, r1
 801b8e2:	f8a8 3000 	strh.w	r3, [r8]
 801b8e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b8e8:	441c      	add	r4, r3
 801b8ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b8ec:	f108 0802 	add.w	r8, r8, #2
 801b8f0:	441e      	add	r6, r3
 801b8f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b8f6:	e74f      	b.n	801b798 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801b8f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b8fa:	441c      	add	r4, r3
 801b8fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b8fe:	441e      	add	r6, r3
 801b900:	9b06      	ldr	r3, [sp, #24]
 801b902:	3b01      	subs	r3, #1
 801b904:	9306      	str	r3, [sp, #24]
 801b906:	f109 0902 	add.w	r9, r9, #2
 801b90a:	e701      	b.n	801b710 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b90c:	f47f af11 	bne.w	801b732 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801b910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b912:	2b00      	cmp	r3, #0
 801b914:	f340 80ef 	ble.w	801baf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801b918:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b91c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b920:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b924:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b926:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b92a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b92e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b932:	eef0 6a48 	vmov.f32	s13, s16
 801b936:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b93a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b93e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b942:	ee16 4a90 	vmov	r4, s13
 801b946:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b94a:	eef0 6a68 	vmov.f32	s13, s17
 801b94e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b952:	ee18 2a10 	vmov	r2, s16
 801b956:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b95a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b95e:	ee18 2a90 	vmov	r2, s17
 801b962:	9329      	str	r3, [sp, #164]	; 0xa4
 801b964:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b966:	fb92 f3f3 	sdiv	r3, r2, r3
 801b96a:	932a      	str	r3, [sp, #168]	; 0xa8
 801b96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b96e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b970:	3b01      	subs	r3, #1
 801b972:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b976:	930b      	str	r3, [sp, #44]	; 0x2c
 801b978:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b97a:	bf08      	it	eq
 801b97c:	4613      	moveq	r3, r2
 801b97e:	ee16 6a90 	vmov	r6, s13
 801b982:	9306      	str	r3, [sp, #24]
 801b984:	eef0 8a67 	vmov.f32	s17, s15
 801b988:	eeb0 8a47 	vmov.f32	s16, s14
 801b98c:	e6b9      	b.n	801b702 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b98e:	1c4d      	adds	r5, r1, #1
 801b990:	d1a9      	bne.n	801b8e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801b992:	428f      	cmp	r7, r1
 801b994:	dda7      	ble.n	801b8e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801b996:	1c55      	adds	r5, r2, #1
 801b998:	dba5      	blt.n	801b8e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801b99a:	9d07      	ldr	r5, [sp, #28]
 801b99c:	4295      	cmp	r5, r2
 801b99e:	dda2      	ble.n	801b8e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801b9a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b9a2:	9101      	str	r1, [sp, #4]
 801b9a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b9a8:	9b07      	ldr	r3, [sp, #28]
 801b9aa:	9300      	str	r3, [sp, #0]
 801b9ac:	e9cd 0504 	strd	r0, r5, [sp, #16]
 801b9b0:	463b      	mov	r3, r7
 801b9b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b9b6:	4641      	mov	r1, r8
 801b9b8:	f7ff fd9a 	bl	801b4f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801b9bc:	e793      	b.n	801b8e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801b9be:	1422      	asrs	r2, r4, #16
 801b9c0:	1431      	asrs	r1, r6, #16
 801b9c2:	fb07 2101 	mla	r1, r7, r1, r2
 801b9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b9ca:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801b9ce:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801b9d2:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801b9d6:	8851      	ldrh	r1, [r2, #2]
 801b9d8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801b9dc:	f1be 0f00 	cmp.w	lr, #0
 801b9e0:	d006      	beq.n	801b9f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801b9e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b9e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b9e6:	1810      	adds	r0, r2, r0
 801b9e8:	5b52      	ldrh	r2, [r2, r5]
 801b9ea:	9210      	str	r2, [sp, #64]	; 0x40
 801b9ec:	8842      	ldrh	r2, [r0, #2]
 801b9ee:	9211      	str	r2, [sp, #68]	; 0x44
 801b9f0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801b9f4:	fb13 f20e 	smulbb	r2, r3, lr
 801b9f8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b9fc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ba00:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ba04:	10d2      	asrs	r2, r2, #3
 801ba06:	ea40 000c 	orr.w	r0, r0, ip
 801ba0a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ba0e:	f1ce 0c10 	rsb	ip, lr, #16
 801ba12:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ba16:	ebac 0c03 	sub.w	ip, ip, r3
 801ba1a:	ea4b 0101 	orr.w	r1, fp, r1
 801ba1e:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801ba22:	4359      	muls	r1, r3
 801ba24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba26:	9d08      	ldr	r5, [sp, #32]
 801ba28:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ba2c:	fb0c 1c00 	mla	ip, ip, r0, r1
 801ba30:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801ba34:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801ba38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba3a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ba3e:	ea4b 0000 	orr.w	r0, fp, r0
 801ba42:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801ba46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ba4a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ba4e:	fb02 c000 	mla	r0, r2, r0, ip
 801ba52:	ea4b 0b03 	orr.w	fp, fp, r3
 801ba56:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801ba5a:	fb02 0b0b 	mla	fp, r2, fp, r0
 801ba5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba60:	ea4f 515b 	mov.w	r1, fp, lsr #21
 801ba64:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ba68:	8812      	ldrh	r2, [r2, #0]
 801ba6a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ba6e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801ba72:	ea41 0b0b 	orr.w	fp, r1, fp
 801ba76:	fa1f f38b 	uxth.w	r3, fp
 801ba7a:	1211      	asrs	r1, r2, #8
 801ba7c:	1218      	asrs	r0, r3, #8
 801ba7e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ba82:	fb11 f105 	smulbb	r1, r1, r5
 801ba86:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801ba8a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ba8e:	00d2      	lsls	r2, r2, #3
 801ba90:	fb00 100a 	mla	r0, r0, sl, r1
 801ba94:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ba98:	10d9      	asrs	r1, r3, #3
 801ba9a:	b2d2      	uxtb	r2, r2
 801ba9c:	00db      	lsls	r3, r3, #3
 801ba9e:	fb1c fc05 	smulbb	ip, ip, r5
 801baa2:	fb12 f205 	smulbb	r2, r2, r5
 801baa6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801baaa:	b2db      	uxtb	r3, r3
 801baac:	b280      	uxth	r0, r0
 801baae:	fb01 c10a 	mla	r1, r1, sl, ip
 801bab2:	fb03 230a 	mla	r3, r3, sl, r2
 801bab6:	b29b      	uxth	r3, r3
 801bab8:	b289      	uxth	r1, r1
 801baba:	1c42      	adds	r2, r0, #1
 801babc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bac0:	f101 0c01 	add.w	ip, r1, #1
 801bac4:	1c5a      	adds	r2, r3, #1
 801bac6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801baca:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801bace:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bad2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bad6:	0949      	lsrs	r1, r1, #5
 801bad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bada:	4310      	orrs	r0, r2
 801badc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bae0:	4308      	orrs	r0, r1
 801bae2:	f823 0b02 	strh.w	r0, [r3], #2
 801bae6:	930d      	str	r3, [sp, #52]	; 0x34
 801bae8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801baea:	441c      	add	r4, r3
 801baec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801baee:	f108 38ff 	add.w	r8, r8, #4294967295
 801baf2:	441e      	add	r6, r3
 801baf4:	e636      	b.n	801b764 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801baf6:	b015      	add	sp, #84	; 0x54
 801baf8:	ecbd 8b08 	vpop	{d8-d11}
 801bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801bb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb04:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801bb08:	fb06 5c03 	mla	ip, r6, r3, r5
 801bb0c:	2e00      	cmp	r6, #0
 801bb0e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 801bb12:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801bb16:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801bb1a:	8808      	ldrh	r0, [r1, #0]
 801bb1c:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801bb20:	db2e      	blt.n	801bb80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801bb22:	45b0      	cmp	r8, r6
 801bb24:	dd2c      	ble.n	801bb80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801bb26:	2d00      	cmp	r5, #0
 801bb28:	db28      	blt.n	801bb7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801bb2a:	42ab      	cmp	r3, r5
 801bb2c:	dd26      	ble.n	801bb7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801bb2e:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 801bb32:	1c6a      	adds	r2, r5, #1
 801bb34:	d427      	bmi.n	801bb86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801bb36:	4293      	cmp	r3, r2
 801bb38:	dd25      	ble.n	801bb86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801bb3a:	b324      	cbz	r4, 801bb86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801bb3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bb40:	3601      	adds	r6, #1
 801bb42:	d424      	bmi.n	801bb8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801bb44:	45b0      	cmp	r8, r6
 801bb46:	dd22      	ble.n	801bb8e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801bb48:	b31f      	cbz	r7, 801bb92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 801bb4a:	2d00      	cmp	r5, #0
 801bb4c:	db1d      	blt.n	801bb8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801bb4e:	42ab      	cmp	r3, r5
 801bb50:	dd1b      	ble.n	801bb8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801bb52:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 801bb56:	3501      	adds	r5, #1
 801bb58:	d405      	bmi.n	801bb66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801bb5a:	42ab      	cmp	r3, r5
 801bb5c:	dd03      	ble.n	801bb66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801bb5e:	b124      	cbz	r4, 801bb6a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 801bb60:	3301      	adds	r3, #1
 801bb62:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 801bb66:	2c0f      	cmp	r4, #15
 801bb68:	d801      	bhi.n	801bb6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801bb6a:	2f0f      	cmp	r7, #15
 801bb6c:	d914      	bls.n	801bb98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 801bb6e:	4b27      	ldr	r3, [pc, #156]	; (801bc0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 801bb70:	4a27      	ldr	r2, [pc, #156]	; (801bc10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801bb72:	4828      	ldr	r0, [pc, #160]	; (801bc14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801bb74:	f240 3155 	movw	r1, #853	; 0x355
 801bb78:	f002 fc34 	bl	801e3e4 <__assert_func>
 801bb7c:	4684      	mov	ip, r0
 801bb7e:	e7d8      	b.n	801bb32 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 801bb80:	4602      	mov	r2, r0
 801bb82:	4684      	mov	ip, r0
 801bb84:	e7dc      	b.n	801bb40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801bb86:	4602      	mov	r2, r0
 801bb88:	e7da      	b.n	801bb40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801bb8a:	4606      	mov	r6, r0
 801bb8c:	e7e3      	b.n	801bb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 801bb8e:	4606      	mov	r6, r0
 801bb90:	e7e9      	b.n	801bb66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801bb92:	2c0f      	cmp	r4, #15
 801bb94:	d8eb      	bhi.n	801bb6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801bb96:	4606      	mov	r6, r0
 801bb98:	ea4f 450c 	mov.w	r5, ip, lsl #16
 801bb9c:	fb14 f307 	smulbb	r3, r4, r7
 801bba0:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801bba4:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801bba8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801bbac:	10db      	asrs	r3, r3, #3
 801bbae:	ea45 0c0c 	orr.w	ip, r5, ip
 801bbb2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801bbb6:	f1c7 0510 	rsb	r5, r7, #16
 801bbba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bbbe:	1b2d      	subs	r5, r5, r4
 801bbc0:	ea4e 0202 	orr.w	r2, lr, r2
 801bbc4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801bbc8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801bbcc:	4354      	muls	r4, r2
 801bbce:	fb05 450c 	mla	r5, r5, ip, r4
 801bbd2:	0404      	lsls	r4, r0, #16
 801bbd4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801bbd8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bbdc:	4320      	orrs	r0, r4
 801bbde:	fb03 5400 	mla	r4, r3, r0, r5
 801bbe2:	0430      	lsls	r0, r6, #16
 801bbe4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801bbe8:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801bbec:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801bbf0:	4330      	orrs	r0, r6
 801bbf2:	fb07 4000 	mla	r0, r7, r0, r4
 801bbf6:	0d43      	lsrs	r3, r0, #21
 801bbf8:	0940      	lsrs	r0, r0, #5
 801bbfa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bbfe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bc02:	4318      	orrs	r0, r3
 801bc04:	8008      	strh	r0, [r1, #0]
 801bc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc0a:	bf00      	nop
 801bc0c:	08022217 	.word	0x08022217
 801bc10:	0802281e 	.word	0x0802281e
 801bc14:	0802229f 	.word	0x0802229f

0801bc18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc1c:	ed2d 8b0a 	vpush	{d8-d12}
 801bc20:	b093      	sub	sp, #76	; 0x4c
 801bc22:	461d      	mov	r5, r3
 801bc24:	9210      	str	r2, [sp, #64]	; 0x40
 801bc26:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bc28:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 801bc2c:	9208      	str	r2, [sp, #32]
 801bc2e:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 801bc32:	910b      	str	r1, [sp, #44]	; 0x2c
 801bc34:	6859      	ldr	r1, [r3, #4]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 801bc3c:	9011      	str	r0, [sp, #68]	; 0x44
 801bc3e:	fb01 2707 	mla	r7, r1, r7, r2
 801bc42:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801bc46:	9307      	str	r3, [sp, #28]
 801bc48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801bc4a:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	9309      	str	r3, [sp, #36]	; 0x24
 801bc52:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801bc56:	eeb0 aa40 	vmov.f32	s20, s0
 801bc5a:	eef0 9a60 	vmov.f32	s19, s1
 801bc5e:	eeb0 9a41 	vmov.f32	s18, s2
 801bc62:	eeb0 8a62 	vmov.f32	s16, s5
 801bc66:	eef0 8a43 	vmov.f32	s17, s6
 801bc6a:	eeb0 ca44 	vmov.f32	s24, s8
 801bc6e:	eef0 ba64 	vmov.f32	s23, s9
 801bc72:	eeb0 ba45 	vmov.f32	s22, s10
 801bc76:	930a      	str	r3, [sp, #40]	; 0x28
 801bc78:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801bc7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	dc03      	bgt.n	801bc8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bc82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	f340 816c 	ble.w	801bf62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801bc8a:	2d00      	cmp	r5, #0
 801bc8c:	f340 80b6 	ble.w	801bdfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801bc90:	1422      	asrs	r2, r4, #16
 801bc92:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bc96:	d428      	bmi.n	801bcea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801bc98:	1c51      	adds	r1, r2, #1
 801bc9a:	4588      	cmp	r8, r1
 801bc9c:	dd27      	ble.n	801bcee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	db25      	blt.n	801bcee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801bca2:	9808      	ldr	r0, [sp, #32]
 801bca4:	1c59      	adds	r1, r3, #1
 801bca6:	4288      	cmp	r0, r1
 801bca8:	dd21      	ble.n	801bcee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801bcaa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801bcac:	1e6b      	subs	r3, r5, #1
 801bcae:	fb02 4203 	mla	r2, r2, r3, r4
 801bcb2:	1412      	asrs	r2, r2, #16
 801bcb4:	d422      	bmi.n	801bcfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801bcb6:	3201      	adds	r2, #1
 801bcb8:	4590      	cmp	r8, r2
 801bcba:	dd1f      	ble.n	801bcfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801bcbc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801bcbe:	fb02 6303 	mla	r3, r2, r3, r6
 801bcc2:	141b      	asrs	r3, r3, #16
 801bcc4:	d41a      	bmi.n	801bcfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801bcc6:	9a08      	ldr	r2, [sp, #32]
 801bcc8:	3301      	adds	r3, #1
 801bcca:	429a      	cmp	r2, r3
 801bccc:	dd16      	ble.n	801bcfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801bcce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bcd2:	46a9      	mov	r9, r5
 801bcd4:	f1b9 0f00 	cmp.w	r9, #0
 801bcd8:	f300 80e4 	bgt.w	801bea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801bcdc:	9b07      	ldr	r3, [sp, #28]
 801bcde:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801bce2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801bce6:	9307      	str	r3, [sp, #28]
 801bce8:	e08a      	b.n	801be00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801bcea:	1c51      	adds	r1, r2, #1
 801bcec:	d17d      	bne.n	801bdea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801bcee:	4542      	cmp	r2, r8
 801bcf0:	da7b      	bge.n	801bdea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801bcf2:	1c5a      	adds	r2, r3, #1
 801bcf4:	db79      	blt.n	801bdea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801bcf6:	9a08      	ldr	r2, [sp, #32]
 801bcf8:	4293      	cmp	r3, r2
 801bcfa:	da76      	bge.n	801bdea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801bcfc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801bd00:	46aa      	mov	sl, r5
 801bd02:	f1ba 0f00 	cmp.w	sl, #0
 801bd06:	dde9      	ble.n	801bcdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801bd08:	1421      	asrs	r1, r4, #16
 801bd0a:	ea4f 4226 	mov.w	r2, r6, asr #16
 801bd0e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801bd12:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801bd16:	f100 80b0 	bmi.w	801be7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801bd1a:	f101 0c01 	add.w	ip, r1, #1
 801bd1e:	45e0      	cmp	r8, ip
 801bd20:	f340 80ad 	ble.w	801be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801bd24:	2a00      	cmp	r2, #0
 801bd26:	f2c0 80aa 	blt.w	801be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801bd2a:	9f08      	ldr	r7, [sp, #32]
 801bd2c:	f102 0c01 	add.w	ip, r2, #1
 801bd30:	4567      	cmp	r7, ip
 801bd32:	f340 80a4 	ble.w	801be7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801bd36:	fb02 1208 	mla	r2, r2, r8, r1
 801bd3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bd3c:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801bd40:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801bd44:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801bd48:	b138      	cbz	r0, 801bd5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bd4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd4c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bd4e:	4472      	add	r2, lr
 801bd50:	f83e 7007 	ldrh.w	r7, [lr, r7]
 801bd54:	8852      	ldrh	r2, [r2, #2]
 801bd56:	970c      	str	r7, [sp, #48]	; 0x30
 801bd58:	920d      	str	r2, [sp, #52]	; 0x34
 801bd5a:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801bd5e:	fb13 f200 	smulbb	r2, r3, r0
 801bd62:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801bd66:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801bd6a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801bd6e:	10d2      	asrs	r2, r2, #3
 801bd70:	ea4e 0c0c 	orr.w	ip, lr, ip
 801bd74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801bd78:	f1c0 0e10 	rsb	lr, r0, #16
 801bd7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801bd80:	ebae 0e03 	sub.w	lr, lr, r3
 801bd84:	ea4b 0101 	orr.w	r1, fp, r1
 801bd88:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801bd8c:	4359      	muls	r1, r3
 801bd8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd90:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801bd94:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801bd98:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801bd9c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801bda0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bda4:	ea4c 0c03 	orr.w	ip, ip, r3
 801bda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bdac:	041b      	lsls	r3, r3, #16
 801bdae:	fb02 ec0c 	mla	ip, r2, ip, lr
 801bdb2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bdb6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801bdba:	ea43 030e 	orr.w	r3, r3, lr
 801bdbe:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801bdc2:	fb02 c203 	mla	r2, r2, r3, ip
 801bdc6:	0d53      	lsrs	r3, r2, #21
 801bdc8:	0952      	lsrs	r2, r2, #5
 801bdca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bdce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bdd2:	431a      	orrs	r2, r3
 801bdd4:	f8a9 2000 	strh.w	r2, [r9]
 801bdd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bdda:	441c      	add	r4, r3
 801bddc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bdde:	f109 0902 	add.w	r9, r9, #2
 801bde2:	441e      	add	r6, r3
 801bde4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bde8:	e78b      	b.n	801bd02 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801bdea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bdec:	441c      	add	r4, r3
 801bdee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bdf0:	441e      	add	r6, r3
 801bdf2:	9b07      	ldr	r3, [sp, #28]
 801bdf4:	3302      	adds	r3, #2
 801bdf6:	3d01      	subs	r5, #1
 801bdf8:	9307      	str	r3, [sp, #28]
 801bdfa:	e746      	b.n	801bc8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bdfc:	f47f af55 	bne.w	801bcaa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801be00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be02:	2b00      	cmp	r3, #0
 801be04:	f340 80ad 	ble.w	801bf62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801be08:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801be0c:	ee79 9aab 	vadd.f32	s19, s19, s23
 801be10:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801be14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801be16:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801be1a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801be1e:	eef0 6a48 	vmov.f32	s13, s16
 801be22:	ee69 7a27 	vmul.f32	s15, s18, s15
 801be26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be2a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801be2e:	ee16 4a90 	vmov	r4, s13
 801be32:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801be36:	eef0 6a68 	vmov.f32	s13, s17
 801be3a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801be3e:	ee18 2a10 	vmov	r2, s16
 801be42:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801be46:	fb92 f3f3 	sdiv	r3, r2, r3
 801be4a:	ee18 2a90 	vmov	r2, s17
 801be4e:	9329      	str	r3, [sp, #164]	; 0xa4
 801be50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801be52:	fb92 f3f3 	sdiv	r3, r2, r3
 801be56:	932a      	str	r3, [sp, #168]	; 0xa8
 801be58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801be5c:	3b01      	subs	r3, #1
 801be5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be62:	930b      	str	r3, [sp, #44]	; 0x2c
 801be64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801be66:	ee16 6a90 	vmov	r6, s13
 801be6a:	bf14      	ite	ne
 801be6c:	461d      	movne	r5, r3
 801be6e:	4615      	moveq	r5, r2
 801be70:	eef0 8a67 	vmov.f32	s17, s15
 801be74:	eeb0 8a47 	vmov.f32	s16, s14
 801be78:	e700      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801be7a:	1c4f      	adds	r7, r1, #1
 801be7c:	d1ac      	bne.n	801bdd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801be7e:	4588      	cmp	r8, r1
 801be80:	ddaa      	ble.n	801bdd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801be82:	1c57      	adds	r7, r2, #1
 801be84:	dba8      	blt.n	801bdd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801be86:	9f08      	ldr	r7, [sp, #32]
 801be88:	4297      	cmp	r7, r2
 801be8a:	dda5      	ble.n	801bdd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801be8c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801be90:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801be94:	9700      	str	r7, [sp, #0]
 801be96:	4643      	mov	r3, r8
 801be98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be9a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801be9c:	4649      	mov	r1, r9
 801be9e:	f7ff fe2f 	bl	801bb00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801bea2:	e799      	b.n	801bdd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801bea4:	1422      	asrs	r2, r4, #16
 801bea6:	1431      	asrs	r1, r6, #16
 801bea8:	fb08 2101 	mla	r1, r8, r1, r2
 801beac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801beae:	9809      	ldr	r0, [sp, #36]	; 0x24
 801beb0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801beb4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801beb8:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801bebc:	8851      	ldrh	r1, [r2, #2]
 801bebe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801bec2:	f1be 0f00 	cmp.w	lr, #0
 801bec6:	d006      	beq.n	801bed6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801bec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801beca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801becc:	1810      	adds	r0, r2, r0
 801bece:	5bd2      	ldrh	r2, [r2, r7]
 801bed0:	920e      	str	r2, [sp, #56]	; 0x38
 801bed2:	8842      	ldrh	r2, [r0, #2]
 801bed4:	920f      	str	r2, [sp, #60]	; 0x3c
 801bed6:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801beda:	fb13 f20e 	smulbb	r2, r3, lr
 801bede:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801bee2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801bee6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801beea:	10d2      	asrs	r2, r2, #3
 801beec:	ea40 000c 	orr.w	r0, r0, ip
 801bef0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bef4:	f1ce 0c10 	rsb	ip, lr, #16
 801bef8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801befc:	ebac 0c03 	sub.w	ip, ip, r3
 801bf00:	ea4a 0101 	orr.w	r1, sl, r1
 801bf04:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801bf08:	4359      	muls	r1, r3
 801bf0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf0c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801bf10:	fb0c 1c00 	mla	ip, ip, r0, r1
 801bf14:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801bf18:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801bf1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bf20:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801bf24:	041b      	lsls	r3, r3, #16
 801bf26:	ea4a 0000 	orr.w	r0, sl, r0
 801bf2a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801bf2e:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 801bf32:	fb02 c000 	mla	r0, r2, r0, ip
 801bf36:	ea43 0a0a 	orr.w	sl, r3, sl
 801bf3a:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801bf3e:	fb02 000a 	mla	r0, r2, sl, r0
 801bf42:	0d43      	lsrs	r3, r0, #21
 801bf44:	0940      	lsrs	r0, r0, #5
 801bf46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bf4a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bf4e:	4318      	orrs	r0, r3
 801bf50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bf52:	f82b 0b02 	strh.w	r0, [fp], #2
 801bf56:	441c      	add	r4, r3
 801bf58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bf5a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf5e:	441e      	add	r6, r3
 801bf60:	e6b8      	b.n	801bcd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 801bf62:	b013      	add	sp, #76	; 0x4c
 801bf64:	ecbd 8b0a 	vpop	{d8-d12}
 801bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf70:	8808      	ldrh	r0, [r1, #0]
 801bf72:	b085      	sub	sp, #20
 801bf74:	1206      	asrs	r6, r0, #8
 801bf76:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801bf7a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bf7e:	9600      	str	r6, [sp, #0]
 801bf80:	10c6      	asrs	r6, r0, #3
 801bf82:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bf86:	9601      	str	r6, [sp, #4]
 801bf88:	00c0      	lsls	r0, r0, #3
 801bf8a:	fb04 c603 	mla	r6, r4, r3, ip
 801bf8e:	b2c0      	uxtb	r0, r0
 801bf90:	4691      	mov	r9, r2
 801bf92:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801bf96:	9a00      	ldr	r2, [sp, #0]
 801bf98:	9002      	str	r0, [sp, #8]
 801bf9a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801bf9e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801bfa2:	9a01      	ldr	r2, [sp, #4]
 801bfa4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801bfa8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801bfac:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801bfb0:	2c00      	cmp	r4, #0
 801bfb2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801bfb6:	db3a      	blt.n	801c02e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801bfb8:	45a0      	cmp	r8, r4
 801bfba:	dd38      	ble.n	801c02e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801bfbc:	f1bc 0f00 	cmp.w	ip, #0
 801bfc0:	db33      	blt.n	801c02a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801bfc2:	4563      	cmp	r3, ip
 801bfc4:	dd31      	ble.n	801c02a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801bfc6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801bfca:	f11c 0601 	adds.w	r6, ip, #1
 801bfce:	d431      	bmi.n	801c034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801bfd0:	42b3      	cmp	r3, r6
 801bfd2:	dd2f      	ble.n	801c034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801bfd4:	b375      	cbz	r5, 801c034 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801bfd6:	f8de 6004 	ldr.w	r6, [lr, #4]
 801bfda:	3401      	adds	r4, #1
 801bfdc:	d42e      	bmi.n	801c03c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801bfde:	45a0      	cmp	r8, r4
 801bfe0:	dd2c      	ble.n	801c03c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801bfe2:	b35f      	cbz	r7, 801c03c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801bfe4:	f1bc 0f00 	cmp.w	ip, #0
 801bfe8:	db26      	blt.n	801c038 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801bfea:	4563      	cmp	r3, ip
 801bfec:	dd24      	ble.n	801c038 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801bfee:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801bff2:	f11c 0c01 	adds.w	ip, ip, #1
 801bff6:	d405      	bmi.n	801c004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801bff8:	4563      	cmp	r3, ip
 801bffa:	dd03      	ble.n	801c004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801bffc:	b115      	cbz	r5, 801c004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801bffe:	3301      	adds	r3, #1
 801c000:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801c004:	2d0f      	cmp	r5, #15
 801c006:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801c00a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c00e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c012:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801c016:	d801      	bhi.n	801c01c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 801c018:	2f0f      	cmp	r7, #15
 801c01a:	d911      	bls.n	801c040 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 801c01c:	4b82      	ldr	r3, [pc, #520]	; (801c228 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 801c01e:	4a83      	ldr	r2, [pc, #524]	; (801c22c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 801c020:	4883      	ldr	r0, [pc, #524]	; (801c230 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 801c022:	f240 3173 	movw	r1, #883	; 0x373
 801c026:	f002 f9dd 	bl	801e3e4 <__assert_func>
 801c02a:	4602      	mov	r2, r0
 801c02c:	e7cd      	b.n	801bfca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801c02e:	4606      	mov	r6, r0
 801c030:	4602      	mov	r2, r0
 801c032:	e7d2      	b.n	801bfda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801c034:	4606      	mov	r6, r0
 801c036:	e7d0      	b.n	801bfda <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801c038:	4604      	mov	r4, r0
 801c03a:	e7da      	b.n	801bff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 801c03c:	4604      	mov	r4, r0
 801c03e:	e7e1      	b.n	801c004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801c040:	b2ab      	uxth	r3, r5
 801c042:	b2bf      	uxth	r7, r7
 801c044:	fb03 fe07 	mul.w	lr, r3, r7
 801c048:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801c04c:	011b      	lsls	r3, r3, #4
 801c04e:	eba3 0c0e 	sub.w	ip, r3, lr
 801c052:	b2bf      	uxth	r7, r7
 801c054:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801c058:	fa1f fc8c 	uxth.w	ip, ip
 801c05c:	1bed      	subs	r5, r5, r7
 801c05e:	b2ad      	uxth	r5, r5
 801c060:	fb0c f30a 	mul.w	r3, ip, sl
 801c064:	fb05 330b 	mla	r3, r5, fp, r3
 801c068:	fb07 3309 	mla	r3, r7, r9, r3
 801c06c:	fb0e 3308 	mla	r3, lr, r8, r3
 801c070:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c074:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c078:	9303      	str	r3, [sp, #12]
 801c07a:	d018      	beq.n	801c0ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 801c07c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801c080:	fb0b f303 	mul.w	r3, fp, r3
 801c084:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c088:	fb0b fb02 	mul.w	fp, fp, r2
 801c08c:	0a1a      	lsrs	r2, r3, #8
 801c08e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c092:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801c096:	441a      	add	r2, r3
 801c098:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801c09c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801c0a0:	0a12      	lsrs	r2, r2, #8
 801c0a2:	0a1b      	lsrs	r3, r3, #8
 801c0a4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c0a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c0ac:	431a      	orrs	r2, r3
 801c0ae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c0b2:	d019      	beq.n	801c0e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 801c0b4:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801c0b8:	fb0a fb0b 	mul.w	fp, sl, fp
 801c0bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c0c0:	fb0a fa06 	mul.w	sl, sl, r6
 801c0c4:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801c0c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c0cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c0d0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801c0d4:	445e      	add	r6, fp
 801c0d6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c0da:	0a36      	lsrs	r6, r6, #8
 801c0dc:	0a1b      	lsrs	r3, r3, #8
 801c0de:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c0e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c0e6:	431e      	orrs	r6, r3
 801c0e8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c0ec:	d019      	beq.n	801c122 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 801c0ee:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801c0f2:	fb09 fa0a 	mul.w	sl, r9, sl
 801c0f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c0fa:	fb09 f904 	mul.w	r9, r9, r4
 801c0fe:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801c102:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c106:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c10a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801c10e:	4454      	add	r4, sl
 801c110:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801c114:	0a24      	lsrs	r4, r4, #8
 801c116:	0a1b      	lsrs	r3, r3, #8
 801c118:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c11c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c120:	431c      	orrs	r4, r3
 801c122:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c126:	d019      	beq.n	801c15c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 801c128:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801c12c:	fb08 f909 	mul.w	r9, r8, r9
 801c130:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c134:	fb08 f800 	mul.w	r8, r8, r0
 801c138:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801c13c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c140:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801c144:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801c148:	4448      	add	r0, r9
 801c14a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801c14e:	0a00      	lsrs	r0, r0, #8
 801c150:	0a1b      	lsrs	r3, r3, #8
 801c152:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c15a:	4318      	orrs	r0, r3
 801c15c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801c160:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c164:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801c168:	fb0c f808 	mul.w	r8, ip, r8
 801c16c:	fb0c f606 	mul.w	r6, ip, r6
 801c170:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c174:	fb05 6202 	mla	r2, r5, r2, r6
 801c178:	fb05 8803 	mla	r8, r5, r3, r8
 801c17c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801c180:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c184:	fb07 8803 	mla	r8, r7, r3, r8
 801c188:	fb07 2704 	mla	r7, r7, r4, r2
 801c18c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801c190:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c194:	fb0e 8303 	mla	r3, lr, r3, r8
 801c198:	fb0e 7e00 	mla	lr, lr, r0, r7
 801c19c:	0a1b      	lsrs	r3, r3, #8
 801c19e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c1a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c1a6:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801c1aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c1ae:	ea43 0e0e 	orr.w	lr, r3, lr
 801c1b2:	9b03      	ldr	r3, [sp, #12]
 801c1b4:	b2a4      	uxth	r4, r4
 801c1b6:	4363      	muls	r3, r4
 801c1b8:	1c5a      	adds	r2, r3, #1
 801c1ba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c1be:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801c1c2:	9b00      	ldr	r3, [sp, #0]
 801c1c4:	b2d2      	uxtb	r2, r2
 801c1c6:	ea4f 451e 	mov.w	r5, lr, lsr #16
 801c1ca:	fb13 f302 	smulbb	r3, r3, r2
 801c1ce:	fb05 3304 	mla	r3, r5, r4, r3
 801c1d2:	b29d      	uxth	r5, r3
 801c1d4:	9b01      	ldr	r3, [sp, #4]
 801c1d6:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801c1da:	fb13 f302 	smulbb	r3, r3, r2
 801c1de:	fb00 3004 	mla	r0, r0, r4, r3
 801c1e2:	9b02      	ldr	r3, [sp, #8]
 801c1e4:	fa5f fe8e 	uxtb.w	lr, lr
 801c1e8:	fb13 f202 	smulbb	r2, r3, r2
 801c1ec:	fb0e 2e04 	mla	lr, lr, r4, r2
 801c1f0:	fa1f fe8e 	uxth.w	lr, lr
 801c1f4:	b280      	uxth	r0, r0
 801c1f6:	f10e 0201 	add.w	r2, lr, #1
 801c1fa:	1c6b      	adds	r3, r5, #1
 801c1fc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c200:	1c42      	adds	r2, r0, #1
 801c202:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801c206:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c20a:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801c20e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c212:	0952      	lsrs	r2, r2, #5
 801c214:	ea43 030e 	orr.w	r3, r3, lr
 801c218:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c21c:	4313      	orrs	r3, r2
 801c21e:	800b      	strh	r3, [r1, #0]
 801c220:	b005      	add	sp, #20
 801c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c226:	bf00      	nop
 801c228:	08022217 	.word	0x08022217
 801c22c:	08022775 	.word	0x08022775
 801c230:	0802229f 	.word	0x0802229f

0801c234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c238:	ed2d 8b08 	vpush	{d8-d11}
 801c23c:	b099      	sub	sp, #100	; 0x64
 801c23e:	eeb0 aa40 	vmov.f32	s20, s0
 801c242:	9306      	str	r3, [sp, #24]
 801c244:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801c248:	9307      	str	r3, [sp, #28]
 801c24a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801c24e:	9216      	str	r2, [sp, #88]	; 0x58
 801c250:	9310      	str	r3, [sp, #64]	; 0x40
 801c252:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c254:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801c258:	9113      	str	r1, [sp, #76]	; 0x4c
 801c25a:	9315      	str	r3, [sp, #84]	; 0x54
 801c25c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c260:	9017      	str	r0, [sp, #92]	; 0x5c
 801c262:	6850      	ldr	r0, [r2, #4]
 801c264:	6812      	ldr	r2, [r2, #0]
 801c266:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801c268:	fb00 1303 	mla	r3, r0, r3, r1
 801c26c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c270:	930a      	str	r3, [sp, #40]	; 0x28
 801c272:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	9312      	str	r3, [sp, #72]	; 0x48
 801c278:	9b07      	ldr	r3, [sp, #28]
 801c27a:	009b      	lsls	r3, r3, #2
 801c27c:	eef0 9a60 	vmov.f32	s19, s1
 801c280:	eeb0 9a41 	vmov.f32	s18, s2
 801c284:	eeb0 8a62 	vmov.f32	s16, s5
 801c288:	eef0 8a43 	vmov.f32	s17, s6
 801c28c:	eef0 ba44 	vmov.f32	s23, s8
 801c290:	eeb0 ba64 	vmov.f32	s22, s9
 801c294:	eef0 aa45 	vmov.f32	s21, s10
 801c298:	930e      	str	r3, [sp, #56]	; 0x38
 801c29a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	dc03      	bgt.n	801c2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c2a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	f340 8352 	ble.w	801c94c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801c2a8:	9b06      	ldr	r3, [sp, #24]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	f340 81a8 	ble.w	801c600 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 801c2b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c2b2:	1412      	asrs	r2, r2, #16
 801c2b4:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c2b8:	d430      	bmi.n	801c31c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801c2ba:	9807      	ldr	r0, [sp, #28]
 801c2bc:	1c51      	adds	r1, r2, #1
 801c2be:	4288      	cmp	r0, r1
 801c2c0:	dd2f      	ble.n	801c322 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	db2d      	blt.n	801c322 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c2c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c2c8:	1c59      	adds	r1, r3, #1
 801c2ca:	4288      	cmp	r0, r1
 801c2cc:	dd29      	ble.n	801c322 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801c2ce:	9b06      	ldr	r3, [sp, #24]
 801c2d0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c2d2:	992b      	ldr	r1, [sp, #172]	; 0xac
 801c2d4:	3b01      	subs	r3, #1
 801c2d6:	fb02 1203 	mla	r2, r2, r3, r1
 801c2da:	1412      	asrs	r2, r2, #16
 801c2dc:	d42c      	bmi.n	801c338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c2de:	9907      	ldr	r1, [sp, #28]
 801c2e0:	3201      	adds	r2, #1
 801c2e2:	4291      	cmp	r1, r2
 801c2e4:	dd28      	ble.n	801c338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c2e6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c2e8:	fb02 4303 	mla	r3, r2, r3, r4
 801c2ec:	141b      	asrs	r3, r3, #16
 801c2ee:	d423      	bmi.n	801c338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c2f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2f2:	3301      	adds	r3, #1
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	dd1f      	ble.n	801c338 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c2f8:	9b06      	ldr	r3, [sp, #24]
 801c2fa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801c2fe:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801c302:	9311      	str	r3, [sp, #68]	; 0x44
 801c304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c306:	2b00      	cmp	r3, #0
 801c308:	f300 81e3 	bgt.w	801c6d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 801c30c:	9b06      	ldr	r3, [sp, #24]
 801c30e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c314:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801c318:	930a      	str	r3, [sp, #40]	; 0x28
 801c31a:	e173      	b.n	801c604 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801c31c:	1c51      	adds	r1, r2, #1
 801c31e:	f040 8162 	bne.w	801c5e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801c322:	9907      	ldr	r1, [sp, #28]
 801c324:	428a      	cmp	r2, r1
 801c326:	f280 815e 	bge.w	801c5e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801c32a:	1c5f      	adds	r7, r3, #1
 801c32c:	f2c0 815b 	blt.w	801c5e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801c330:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c332:	4293      	cmp	r3, r2
 801c334:	f280 8157 	bge.w	801c5e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801c338:	9b06      	ldr	r3, [sp, #24]
 801c33a:	9314      	str	r3, [sp, #80]	; 0x50
 801c33c:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801c340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c342:	9311      	str	r3, [sp, #68]	; 0x44
 801c344:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c346:	2b00      	cmp	r3, #0
 801c348:	dde0      	ble.n	801c30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c34a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c34c:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801c350:	1412      	asrs	r2, r2, #16
 801c352:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c356:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801c35a:	f100 81a1 	bmi.w	801c6a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 801c35e:	9e07      	ldr	r6, [sp, #28]
 801c360:	1c55      	adds	r5, r2, #1
 801c362:	42ae      	cmp	r6, r5
 801c364:	f340 819e 	ble.w	801c6a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801c368:	2b00      	cmp	r3, #0
 801c36a:	f2c0 819b 	blt.w	801c6a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801c36e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c370:	1c5d      	adds	r5, r3, #1
 801c372:	42ae      	cmp	r6, r5
 801c374:	f340 8196 	ble.w	801c6a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801c378:	9d07      	ldr	r5, [sp, #28]
 801c37a:	fb03 2305 	mla	r3, r3, r5, r2
 801c37e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c380:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801c384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c388:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c38c:	2800      	cmp	r0, #0
 801c38e:	f000 8178 	beq.w	801c682 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801c392:	686a      	ldr	r2, [r5, #4]
 801c394:	920b      	str	r2, [sp, #44]	; 0x2c
 801c396:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c39a:	2900      	cmp	r1, #0
 801c39c:	f000 817a 	beq.w	801c694 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801c3a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c3a4:	18aa      	adds	r2, r5, r2
 801c3a6:	59ad      	ldr	r5, [r5, r6]
 801c3a8:	6852      	ldr	r2, [r2, #4]
 801c3aa:	9508      	str	r5, [sp, #32]
 801c3ac:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801c3b0:	920c      	str	r2, [sp, #48]	; 0x30
 801c3b2:	0e15      	lsrs	r5, r2, #24
 801c3b4:	b280      	uxth	r0, r0
 801c3b6:	b289      	uxth	r1, r1
 801c3b8:	fb00 fb01 	mul.w	fp, r0, r1
 801c3bc:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801c3c0:	0100      	lsls	r0, r0, #4
 801c3c2:	eba0 090b 	sub.w	r9, r0, fp
 801c3c6:	b289      	uxth	r1, r1
 801c3c8:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801c3cc:	fa1f f989 	uxth.w	r9, r9
 801c3d0:	1a52      	subs	r2, r2, r1
 801c3d2:	b292      	uxth	r2, r2
 801c3d4:	fb09 f008 	mul.w	r0, r9, r8
 801c3d8:	fb02 000c 	mla	r0, r2, ip, r0
 801c3dc:	fb01 000a 	mla	r0, r1, sl, r0
 801c3e0:	fb0b 0005 	mla	r0, fp, r5, r0
 801c3e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	f000 80ef 	beq.w	801c5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c3ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c3f2:	d01b      	beq.n	801c42c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 801c3f4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c3f8:	fb0c fe0e 	mul.w	lr, ip, lr
 801c3fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c400:	fb0c fc03 	mul.w	ip, ip, r3
 801c404:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801c408:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c40c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c410:	4473      	add	r3, lr
 801c412:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801c416:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801c41a:	0a1b      	lsrs	r3, r3, #8
 801c41c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c420:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c424:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c428:	ea43 030e 	orr.w	r3, r3, lr
 801c42c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c430:	d01e      	beq.n	801c470 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801c432:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801c434:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c438:	fb08 fc0c 	mul.w	ip, r8, ip
 801c43c:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 801c440:	fb08 f80e 	mul.w	r8, r8, lr
 801c444:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c448:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c44c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c450:	44e6      	add	lr, ip
 801c452:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801c456:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801c45a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c45e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c462:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c466:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c46a:	ea4e 0608 	orr.w	r6, lr, r8
 801c46e:	960b      	str	r6, [sp, #44]	; 0x2c
 801c470:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c474:	d01e      	beq.n	801c4b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c476:	9e08      	ldr	r6, [sp, #32]
 801c478:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801c47c:	fb0a f808 	mul.w	r8, sl, r8
 801c480:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801c484:	fb0a fa0c 	mul.w	sl, sl, ip
 801c488:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801c48c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c490:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801c494:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c498:	44c6      	add	lr, r8
 801c49a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c49e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c4a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c4a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c4aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c4ae:	ea4e 060a 	orr.w	r6, lr, sl
 801c4b2:	9608      	str	r6, [sp, #32]
 801c4b4:	2dff      	cmp	r5, #255	; 0xff
 801c4b6:	d01d      	beq.n	801c4f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801c4b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c4ba:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801c4be:	fb05 f808 	mul.w	r8, r5, r8
 801c4c2:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801c4c6:	fb05 f50c 	mul.w	r5, r5, ip
 801c4ca:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801c4ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c4d2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801c4d6:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801c4da:	44c6      	add	lr, r8
 801c4dc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801c4e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c4e4:	0a2d      	lsrs	r5, r5, #8
 801c4e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c4ea:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c4ee:	ea4e 0505 	orr.w	r5, lr, r5
 801c4f2:	950c      	str	r5, [sp, #48]	; 0x30
 801c4f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c4f6:	9e08      	ldr	r6, [sp, #32]
 801c4f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c4fc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c500:	fb09 f505 	mul.w	r5, r9, r5
 801c504:	fb02 550c 	mla	r5, r2, ip, r5
 801c508:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c50c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c50e:	fb01 550c 	mla	r5, r1, ip, r5
 801c512:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c516:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801c518:	fb0b 550c 	mla	r5, fp, ip, r5
 801c51c:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801c520:	fb09 f90c 	mul.w	r9, r9, ip
 801c524:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c528:	fb02 9303 	mla	r3, r2, r3, r9
 801c52c:	9a08      	ldr	r2, [sp, #32]
 801c52e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801c532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c534:	fb01 330e 	mla	r3, r1, lr, r3
 801c538:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801c53c:	fb0b 3b01 	mla	fp, fp, r1, r3
 801c540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c542:	0a2d      	lsrs	r5, r5, #8
 801c544:	f8b3 c000 	ldrh.w	ip, [r3]
 801c548:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c54c:	fb00 f307 	mul.w	r3, r0, r7
 801c550:	1c58      	adds	r0, r3, #1
 801c552:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c556:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c55a:	ea45 050b 	orr.w	r5, r5, fp
 801c55e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c562:	0c29      	lsrs	r1, r5, #16
 801c564:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c568:	ea4f 232c 	mov.w	r3, ip, asr #8
 801c56c:	b2c0      	uxtb	r0, r0
 801c56e:	fb11 f107 	smulbb	r1, r1, r7
 801c572:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c576:	fb03 1300 	mla	r3, r3, r0, r1
 801c57a:	b299      	uxth	r1, r3
 801c57c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801c580:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801c584:	fb13 f307 	smulbb	r3, r3, r7
 801c588:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c58c:	fb02 3200 	mla	r2, r2, r0, r3
 801c590:	b2ed      	uxtb	r5, r5
 801c592:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801c596:	b2db      	uxtb	r3, r3
 801c598:	fb15 f507 	smulbb	r5, r5, r7
 801c59c:	fb03 5500 	mla	r5, r3, r0, r5
 801c5a0:	b292      	uxth	r2, r2
 801c5a2:	b2ad      	uxth	r5, r5
 801c5a4:	1c4b      	adds	r3, r1, #1
 801c5a6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c5aa:	1c68      	adds	r0, r5, #1
 801c5ac:	1c51      	adds	r1, r2, #1
 801c5ae:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801c5b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c5b6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c5ba:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c5be:	0952      	lsrs	r2, r2, #5
 801c5c0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c5c4:	432b      	orrs	r3, r5
 801c5c6:	4313      	orrs	r3, r2
 801c5c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c5ca:	8013      	strh	r3, [r2, #0]
 801c5cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c5ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c5d0:	3302      	adds	r3, #2
 801c5d2:	9311      	str	r3, [sp, #68]	; 0x44
 801c5d4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c5d6:	4413      	add	r3, r2
 801c5d8:	932b      	str	r3, [sp, #172]	; 0xac
 801c5da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c5dc:	441c      	add	r4, r3
 801c5de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c5e0:	3b01      	subs	r3, #1
 801c5e2:	9314      	str	r3, [sp, #80]	; 0x50
 801c5e4:	e6ae      	b.n	801c344 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801c5e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c5e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c5ea:	4413      	add	r3, r2
 801c5ec:	932b      	str	r3, [sp, #172]	; 0xac
 801c5ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c5f0:	441c      	add	r4, r3
 801c5f2:	9b06      	ldr	r3, [sp, #24]
 801c5f4:	3b01      	subs	r3, #1
 801c5f6:	9306      	str	r3, [sp, #24]
 801c5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5fa:	3302      	adds	r3, #2
 801c5fc:	930a      	str	r3, [sp, #40]	; 0x28
 801c5fe:	e653      	b.n	801c2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801c600:	f47f ae65 	bne.w	801c2ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801c604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c606:	2b00      	cmp	r3, #0
 801c608:	f340 81a0 	ble.w	801c94c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801c60c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c610:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c614:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c618:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c61a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c61e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c622:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c626:	eef0 6a48 	vmov.f32	s13, s16
 801c62a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c62e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c632:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c636:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801c63a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c63e:	eef0 6a68 	vmov.f32	s13, s17
 801c642:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c646:	ee18 2a10 	vmov	r2, s16
 801c64a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c64e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c652:	ee18 2a90 	vmov	r2, s17
 801c656:	932d      	str	r3, [sp, #180]	; 0xb4
 801c658:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c65a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c65e:	932e      	str	r3, [sp, #184]	; 0xb8
 801c660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c662:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c664:	3b01      	subs	r3, #1
 801c666:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c66a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c66c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c66e:	bf08      	it	eq
 801c670:	4613      	moveq	r3, r2
 801c672:	ee16 4a90 	vmov	r4, s13
 801c676:	9306      	str	r3, [sp, #24]
 801c678:	eef0 8a67 	vmov.f32	s17, s15
 801c67c:	eeb0 8a47 	vmov.f32	s16, s14
 801c680:	e60b      	b.n	801c29a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c682:	b151      	cbz	r1, 801c69a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c686:	58aa      	ldr	r2, [r5, r2]
 801c688:	9208      	str	r2, [sp, #32]
 801c68a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801c68e:	25ff      	movs	r5, #255	; 0xff
 801c690:	46a8      	mov	r8, r5
 801c692:	e68f      	b.n	801c3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801c694:	25ff      	movs	r5, #255	; 0xff
 801c696:	46aa      	mov	sl, r5
 801c698:	e68c      	b.n	801c3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801c69a:	25ff      	movs	r5, #255	; 0xff
 801c69c:	46aa      	mov	sl, r5
 801c69e:	e7f7      	b.n	801c690 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801c6a0:	1c56      	adds	r6, r2, #1
 801c6a2:	d193      	bne.n	801c5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c6a4:	9d07      	ldr	r5, [sp, #28]
 801c6a6:	4295      	cmp	r5, r2
 801c6a8:	dd90      	ble.n	801c5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c6aa:	1c5d      	adds	r5, r3, #1
 801c6ac:	db8e      	blt.n	801c5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c6ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c6b0:	429d      	cmp	r5, r3
 801c6b2:	dd8b      	ble.n	801c5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c6b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c6b6:	9201      	str	r2, [sp, #4]
 801c6b8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801c6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6be:	9300      	str	r3, [sp, #0]
 801c6c0:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801c6c4:	9b07      	ldr	r3, [sp, #28]
 801c6c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c6c8:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 801c6cc:	f7ff fc4e 	bl	801bf6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801c6d0:	e77c      	b.n	801c5cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801c6d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c6d4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c6d6:	9d07      	ldr	r5, [sp, #28]
 801c6d8:	1412      	asrs	r2, r2, #16
 801c6da:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801c6de:	1423      	asrs	r3, r4, #16
 801c6e0:	fb05 2303 	mla	r3, r5, r3, r2
 801c6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6e6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801c6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c6ee:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c6f2:	0e1e      	lsrs	r6, r3, #24
 801c6f4:	2900      	cmp	r1, #0
 801c6f6:	f000 811a 	beq.w	801c92e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 801c6fa:	686a      	ldr	r2, [r5, #4]
 801c6fc:	920d      	str	r2, [sp, #52]	; 0x34
 801c6fe:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801c702:	2800      	cmp	r0, #0
 801c704:	f000 811c 	beq.w	801c940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 801c708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c70a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801c70c:	18aa      	adds	r2, r5, r2
 801c70e:	59ed      	ldr	r5, [r5, r7]
 801c710:	6852      	ldr	r2, [r2, #4]
 801c712:	9509      	str	r5, [sp, #36]	; 0x24
 801c714:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c718:	920f      	str	r2, [sp, #60]	; 0x3c
 801c71a:	0e15      	lsrs	r5, r2, #24
 801c71c:	b289      	uxth	r1, r1
 801c71e:	b280      	uxth	r0, r0
 801c720:	fb01 f900 	mul.w	r9, r1, r0
 801c724:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c728:	0109      	lsls	r1, r1, #4
 801c72a:	eba1 0e09 	sub.w	lr, r1, r9
 801c72e:	b280      	uxth	r0, r0
 801c730:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801c734:	fa1f fe8e 	uxth.w	lr, lr
 801c738:	1a12      	subs	r2, r2, r0
 801c73a:	b292      	uxth	r2, r2
 801c73c:	fb0e f10c 	mul.w	r1, lr, ip
 801c740:	fb02 1106 	mla	r1, r2, r6, r1
 801c744:	fb00 1108 	mla	r1, r0, r8, r1
 801c748:	fb09 1105 	mla	r1, r9, r5, r1
 801c74c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c750:	2900      	cmp	r1, #0
 801c752:	f000 80e0 	beq.w	801c916 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 801c756:	2eff      	cmp	r6, #255	; 0xff
 801c758:	d016      	beq.n	801c788 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 801c75a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801c75e:	4377      	muls	r7, r6
 801c760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c764:	435e      	muls	r6, r3
 801c766:	0a3b      	lsrs	r3, r7, #8
 801c768:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c76c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c770:	443b      	add	r3, r7
 801c772:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801c776:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801c77a:	0a1b      	lsrs	r3, r3, #8
 801c77c:	0a3f      	lsrs	r7, r7, #8
 801c77e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c782:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c786:	433b      	orrs	r3, r7
 801c788:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c78c:	d01d      	beq.n	801c7ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801c78e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801c790:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c792:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c796:	fb0c f606 	mul.w	r6, ip, r6
 801c79a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c79e:	fb0c fc07 	mul.w	ip, ip, r7
 801c7a2:	0a37      	lsrs	r7, r6, #8
 801c7a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c7a8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c7ac:	4437      	add	r7, r6
 801c7ae:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801c7b2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801c7b6:	0a3f      	lsrs	r7, r7, #8
 801c7b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c7bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c7c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c7c4:	ea47 060c 	orr.w	r6, r7, ip
 801c7c8:	960d      	str	r6, [sp, #52]	; 0x34
 801c7ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c7ce:	d01d      	beq.n	801c80c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 801c7d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c7d2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c7d6:	fb08 fc0c 	mul.w	ip, r8, ip
 801c7da:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c7de:	fb08 f806 	mul.w	r8, r8, r6
 801c7e2:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801c7e6:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801c7ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c7ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c7f2:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801c7f6:	4467      	add	r7, ip
 801c7f8:	0a3f      	lsrs	r7, r7, #8
 801c7fa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c7fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c802:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c806:	ea47 0608 	orr.w	r6, r7, r8
 801c80a:	9609      	str	r6, [sp, #36]	; 0x24
 801c80c:	2dff      	cmp	r5, #255	; 0xff
 801c80e:	d01a      	beq.n	801c846 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 801c810:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c812:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c816:	fb05 fc0c 	mul.w	ip, r5, ip
 801c81a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c81e:	4375      	muls	r5, r6
 801c820:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801c824:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c828:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c82c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801c830:	4467      	add	r7, ip
 801c832:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c836:	0a3f      	lsrs	r7, r7, #8
 801c838:	0a2d      	lsrs	r5, r5, #8
 801c83a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c83e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c842:	433d      	orrs	r5, r7
 801c844:	950f      	str	r5, [sp, #60]	; 0x3c
 801c846:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c848:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c84c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801c850:	fb0e f505 	mul.w	r5, lr, r5
 801c854:	fb02 5506 	mla	r5, r2, r6, r5
 801c858:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c85a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c85e:	fb00 5506 	mla	r5, r0, r6, r5
 801c862:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c864:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c868:	fb09 5506 	mla	r5, r9, r6, r5
 801c86c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801c86e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c872:	fb0e fe06 	mul.w	lr, lr, r6
 801c876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c87a:	fb02 e303 	mla	r3, r2, r3, lr
 801c87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c880:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801c884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c886:	fb00 3307 	mla	r3, r0, r7, r3
 801c88a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c88e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c892:	fb01 f10b 	mul.w	r1, r1, fp
 801c896:	0a2d      	lsrs	r5, r5, #8
 801c898:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c89c:	f8ba 0000 	ldrh.w	r0, [sl]
 801c8a0:	1c4b      	adds	r3, r1, #1
 801c8a2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c8a6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c8aa:	ea45 050c 	orr.w	r5, r5, ip
 801c8ae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c8b2:	1202      	asrs	r2, r0, #8
 801c8b4:	0c2b      	lsrs	r3, r5, #16
 801c8b6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c8ba:	b2c9      	uxtb	r1, r1
 801c8bc:	fb13 f30b 	smulbb	r3, r3, fp
 801c8c0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c8c4:	fb02 3201 	mla	r2, r2, r1, r3
 801c8c8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801c8cc:	10c3      	asrs	r3, r0, #3
 801c8ce:	b2ed      	uxtb	r5, r5
 801c8d0:	00c0      	lsls	r0, r0, #3
 801c8d2:	b2c0      	uxtb	r0, r0
 801c8d4:	fb15 f50b 	smulbb	r5, r5, fp
 801c8d8:	fb00 5001 	mla	r0, r0, r1, r5
 801c8dc:	b292      	uxth	r2, r2
 801c8de:	fb16 f60b 	smulbb	r6, r6, fp
 801c8e2:	b280      	uxth	r0, r0
 801c8e4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801c8e8:	fb03 6301 	mla	r3, r3, r1, r6
 801c8ec:	1c51      	adds	r1, r2, #1
 801c8ee:	1c46      	adds	r6, r0, #1
 801c8f0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c8f4:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c8fe:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801c902:	4332      	orrs	r2, r6
 801c904:	1c5e      	adds	r6, r3, #1
 801c906:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c90a:	095b      	lsrs	r3, r3, #5
 801c90c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c910:	431a      	orrs	r2, r3
 801c912:	f8aa 2000 	strh.w	r2, [sl]
 801c916:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c918:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c91a:	4413      	add	r3, r2
 801c91c:	932b      	str	r3, [sp, #172]	; 0xac
 801c91e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c920:	441c      	add	r4, r3
 801c922:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c924:	3b01      	subs	r3, #1
 801c926:	f10a 0a02 	add.w	sl, sl, #2
 801c92a:	9311      	str	r3, [sp, #68]	; 0x44
 801c92c:	e4ea      	b.n	801c304 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801c92e:	b150      	cbz	r0, 801c946 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 801c930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c932:	58aa      	ldr	r2, [r5, r2]
 801c934:	9209      	str	r2, [sp, #36]	; 0x24
 801c936:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c93a:	25ff      	movs	r5, #255	; 0xff
 801c93c:	46ac      	mov	ip, r5
 801c93e:	e6ed      	b.n	801c71c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801c940:	25ff      	movs	r5, #255	; 0xff
 801c942:	46a8      	mov	r8, r5
 801c944:	e6ea      	b.n	801c71c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801c946:	25ff      	movs	r5, #255	; 0xff
 801c948:	46a8      	mov	r8, r5
 801c94a:	e7f7      	b.n	801c93c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801c94c:	b019      	add	sp, #100	; 0x64
 801c94e:	ecbd 8b08 	vpop	{d8-d11}
 801c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c95c:	8808      	ldrh	r0, [r1, #0]
 801c95e:	b085      	sub	sp, #20
 801c960:	1206      	asrs	r6, r0, #8
 801c962:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801c966:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c96a:	9600      	str	r6, [sp, #0]
 801c96c:	10c6      	asrs	r6, r0, #3
 801c96e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c972:	9601      	str	r6, [sp, #4]
 801c974:	00c0      	lsls	r0, r0, #3
 801c976:	fb04 c603 	mla	r6, r4, r3, ip
 801c97a:	b2c0      	uxtb	r0, r0
 801c97c:	4691      	mov	r9, r2
 801c97e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801c982:	9a00      	ldr	r2, [sp, #0]
 801c984:	9002      	str	r0, [sp, #8]
 801c986:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801c98a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801c98e:	9a01      	ldr	r2, [sp, #4]
 801c990:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801c994:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801c998:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801c99c:	2c00      	cmp	r4, #0
 801c99e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801c9a2:	db3a      	blt.n	801ca1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801c9a4:	45a0      	cmp	r8, r4
 801c9a6:	dd38      	ble.n	801ca1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801c9a8:	f1bc 0f00 	cmp.w	ip, #0
 801c9ac:	db33      	blt.n	801ca16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801c9ae:	4563      	cmp	r3, ip
 801c9b0:	dd31      	ble.n	801ca16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801c9b2:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801c9b6:	f11c 0601 	adds.w	r6, ip, #1
 801c9ba:	d431      	bmi.n	801ca20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801c9bc:	42b3      	cmp	r3, r6
 801c9be:	dd2f      	ble.n	801ca20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801c9c0:	b375      	cbz	r5, 801ca20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801c9c2:	f8de 6004 	ldr.w	r6, [lr, #4]
 801c9c6:	3401      	adds	r4, #1
 801c9c8:	d42e      	bmi.n	801ca28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801c9ca:	45a0      	cmp	r8, r4
 801c9cc:	dd2c      	ble.n	801ca28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801c9ce:	b35f      	cbz	r7, 801ca28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801c9d0:	f1bc 0f00 	cmp.w	ip, #0
 801c9d4:	db26      	blt.n	801ca24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801c9d6:	4563      	cmp	r3, ip
 801c9d8:	dd24      	ble.n	801ca24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801c9da:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801c9de:	f11c 0c01 	adds.w	ip, ip, #1
 801c9e2:	d405      	bmi.n	801c9f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801c9e4:	4563      	cmp	r3, ip
 801c9e6:	dd03      	ble.n	801c9f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801c9e8:	b115      	cbz	r5, 801c9f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801c9ea:	3301      	adds	r3, #1
 801c9ec:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801c9f0:	2d0f      	cmp	r5, #15
 801c9f2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801c9f6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c9fa:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c9fe:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801ca02:	d801      	bhi.n	801ca08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 801ca04:	2f0f      	cmp	r7, #15
 801ca06:	d911      	bls.n	801ca2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 801ca08:	4b7b      	ldr	r3, [pc, #492]	; (801cbf8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 801ca0a:	4a7c      	ldr	r2, [pc, #496]	; (801cbfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 801ca0c:	487c      	ldr	r0, [pc, #496]	; (801cc00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 801ca0e:	f240 3173 	movw	r1, #883	; 0x373
 801ca12:	f001 fce7 	bl	801e3e4 <__assert_func>
 801ca16:	4602      	mov	r2, r0
 801ca18:	e7cd      	b.n	801c9b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801ca1a:	4606      	mov	r6, r0
 801ca1c:	4602      	mov	r2, r0
 801ca1e:	e7d2      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801ca20:	4606      	mov	r6, r0
 801ca22:	e7d0      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801ca24:	4604      	mov	r4, r0
 801ca26:	e7da      	b.n	801c9de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 801ca28:	4604      	mov	r4, r0
 801ca2a:	e7e1      	b.n	801c9f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801ca2c:	b2ab      	uxth	r3, r5
 801ca2e:	b2bf      	uxth	r7, r7
 801ca30:	fb03 fe07 	mul.w	lr, r3, r7
 801ca34:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801ca38:	011b      	lsls	r3, r3, #4
 801ca3a:	eba3 0c0e 	sub.w	ip, r3, lr
 801ca3e:	b2bf      	uxth	r7, r7
 801ca40:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801ca44:	fa1f fc8c 	uxth.w	ip, ip
 801ca48:	1bed      	subs	r5, r5, r7
 801ca4a:	b2ad      	uxth	r5, r5
 801ca4c:	fb0c f30a 	mul.w	r3, ip, sl
 801ca50:	fb05 330b 	mla	r3, r5, fp, r3
 801ca54:	fb07 3309 	mla	r3, r7, r9, r3
 801ca58:	fb0e 3308 	mla	r3, lr, r8, r3
 801ca5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ca60:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ca64:	9303      	str	r3, [sp, #12]
 801ca66:	d018      	beq.n	801ca9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 801ca68:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801ca6c:	fb0b f303 	mul.w	r3, fp, r3
 801ca70:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801ca74:	fb0b fb02 	mul.w	fp, fp, r2
 801ca78:	0a1a      	lsrs	r2, r3, #8
 801ca7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ca7e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801ca82:	441a      	add	r2, r3
 801ca84:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801ca88:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801ca8c:	0a12      	lsrs	r2, r2, #8
 801ca8e:	0a1b      	lsrs	r3, r3, #8
 801ca90:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ca94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca98:	431a      	orrs	r2, r3
 801ca9a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ca9e:	d019      	beq.n	801cad4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 801caa0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801caa4:	fb0a fb0b 	mul.w	fp, sl, fp
 801caa8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801caac:	fb0a fa06 	mul.w	sl, sl, r6
 801cab0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801cab4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801cab8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801cabc:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801cac0:	445e      	add	r6, fp
 801cac2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801cac6:	0a36      	lsrs	r6, r6, #8
 801cac8:	0a1b      	lsrs	r3, r3, #8
 801caca:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801cace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cad2:	431e      	orrs	r6, r3
 801cad4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cad8:	d019      	beq.n	801cb0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 801cada:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801cade:	fb09 fa0a 	mul.w	sl, r9, sl
 801cae2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801cae6:	fb09 f904 	mul.w	r9, r9, r4
 801caea:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801caee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801caf2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801caf6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801cafa:	4454      	add	r4, sl
 801cafc:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801cb00:	0a24      	lsrs	r4, r4, #8
 801cb02:	0a1b      	lsrs	r3, r3, #8
 801cb04:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801cb08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cb0c:	431c      	orrs	r4, r3
 801cb0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cb12:	d019      	beq.n	801cb48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 801cb14:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801cb18:	fb08 f909 	mul.w	r9, r8, r9
 801cb1c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cb20:	fb08 f800 	mul.w	r8, r8, r0
 801cb24:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801cb28:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cb2c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801cb30:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801cb34:	4448      	add	r0, r9
 801cb36:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801cb3a:	0a00      	lsrs	r0, r0, #8
 801cb3c:	0a1b      	lsrs	r3, r3, #8
 801cb3e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cb42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cb46:	4318      	orrs	r0, r3
 801cb48:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801cb4c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cb50:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801cb54:	fb0c f808 	mul.w	r8, ip, r8
 801cb58:	fb0c f606 	mul.w	r6, ip, r6
 801cb5c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cb60:	fb05 8803 	mla	r8, r5, r3, r8
 801cb64:	fb05 6202 	mla	r2, r5, r2, r6
 801cb68:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801cb6c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801cb70:	fb07 8803 	mla	r8, r7, r3, r8
 801cb74:	fb07 2704 	mla	r7, r7, r4, r2
 801cb78:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801cb7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cb80:	fb0e 8303 	mla	r3, lr, r3, r8
 801cb84:	fb0e 7e00 	mla	lr, lr, r0, r7
 801cb88:	0a1b      	lsrs	r3, r3, #8
 801cb8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cb8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cb92:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cb96:	ea43 0e0e 	orr.w	lr, r3, lr
 801cb9a:	9b03      	ldr	r3, [sp, #12]
 801cb9c:	9800      	ldr	r0, [sp, #0]
 801cb9e:	9c01      	ldr	r4, [sp, #4]
 801cba0:	9a02      	ldr	r2, [sp, #8]
 801cba2:	43db      	mvns	r3, r3
 801cba4:	b2db      	uxtb	r3, r3
 801cba6:	4358      	muls	r0, r3
 801cba8:	435c      	muls	r4, r3
 801cbaa:	435a      	muls	r2, r3
 801cbac:	1c43      	adds	r3, r0, #1
 801cbae:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cbb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801cbb6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cbba:	4b12      	ldr	r3, [pc, #72]	; (801cc04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 801cbbc:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 801cbc0:	1c50      	adds	r0, r2, #1
 801cbc2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801cbc6:	fa5f f28e 	uxtb.w	r2, lr
 801cbca:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801cbce:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801cbd2:	1c62      	adds	r2, r4, #1
 801cbd4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cbd8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801cbdc:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801cbe0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cbe4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801cbe8:	ea43 0e0e 	orr.w	lr, r3, lr
 801cbec:	f8a1 e000 	strh.w	lr, [r1]
 801cbf0:	b005      	add	sp, #20
 801cbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbf6:	bf00      	nop
 801cbf8:	08022217 	.word	0x08022217
 801cbfc:	08022775 	.word	0x08022775
 801cc00:	0802229f 	.word	0x0802229f
 801cc04:	fffff800 	.word	0xfffff800

0801cc08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc0c:	ed2d 8b08 	vpush	{d8-d11}
 801cc10:	b097      	sub	sp, #92	; 0x5c
 801cc12:	eeb0 aa40 	vmov.f32	s20, s0
 801cc16:	9306      	str	r3, [sp, #24]
 801cc18:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801cc1c:	9307      	str	r3, [sp, #28]
 801cc1e:	9214      	str	r2, [sp, #80]	; 0x50
 801cc20:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801cc24:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801cc26:	9112      	str	r1, [sp, #72]	; 0x48
 801cc28:	9310      	str	r3, [sp, #64]	; 0x40
 801cc2a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801cc2e:	9015      	str	r0, [sp, #84]	; 0x54
 801cc30:	6850      	ldr	r0, [r2, #4]
 801cc32:	6812      	ldr	r2, [r2, #0]
 801cc34:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801cc36:	fb00 1303 	mla	r3, r0, r3, r1
 801cc3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801cc3e:	930a      	str	r3, [sp, #40]	; 0x28
 801cc40:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	9311      	str	r3, [sp, #68]	; 0x44
 801cc46:	9b07      	ldr	r3, [sp, #28]
 801cc48:	009b      	lsls	r3, r3, #2
 801cc4a:	eef0 9a60 	vmov.f32	s19, s1
 801cc4e:	eeb0 9a41 	vmov.f32	s18, s2
 801cc52:	eeb0 8a62 	vmov.f32	s16, s5
 801cc56:	eef0 8a43 	vmov.f32	s17, s6
 801cc5a:	eef0 ba44 	vmov.f32	s23, s8
 801cc5e:	eeb0 ba64 	vmov.f32	s22, s9
 801cc62:	eef0 aa45 	vmov.f32	s21, s10
 801cc66:	930e      	str	r3, [sp, #56]	; 0x38
 801cc68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	dc03      	bgt.n	801cc76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cc6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	f340 8361 	ble.w	801d338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801cc76:	9b06      	ldr	r3, [sp, #24]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	f340 819b 	ble.w	801cfb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801cc7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cc80:	1412      	asrs	r2, r2, #16
 801cc82:	ea4f 4325 	mov.w	r3, r5, asr #16
 801cc86:	d42e      	bmi.n	801cce6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801cc88:	9807      	ldr	r0, [sp, #28]
 801cc8a:	1c51      	adds	r1, r2, #1
 801cc8c:	4288      	cmp	r0, r1
 801cc8e:	dd2d      	ble.n	801ccec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	db2b      	blt.n	801ccec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cc94:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cc96:	1c59      	adds	r1, r3, #1
 801cc98:	4288      	cmp	r0, r1
 801cc9a:	dd27      	ble.n	801ccec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cc9c:	9b06      	ldr	r3, [sp, #24]
 801cc9e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801cca0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801cca2:	3b01      	subs	r3, #1
 801cca4:	fb02 1203 	mla	r2, r2, r3, r1
 801cca8:	1412      	asrs	r2, r2, #16
 801ccaa:	d42a      	bmi.n	801cd02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ccac:	9907      	ldr	r1, [sp, #28]
 801ccae:	3201      	adds	r2, #1
 801ccb0:	4291      	cmp	r1, r2
 801ccb2:	dd26      	ble.n	801cd02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ccb4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ccb6:	fb02 5303 	mla	r3, r2, r3, r5
 801ccba:	141b      	asrs	r3, r3, #16
 801ccbc:	d421      	bmi.n	801cd02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ccbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ccc0:	3301      	adds	r3, #1
 801ccc2:	429a      	cmp	r2, r3
 801ccc4:	dd1d      	ble.n	801cd02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801ccc6:	9b06      	ldr	r3, [sp, #24]
 801ccc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801cccc:	9313      	str	r3, [sp, #76]	; 0x4c
 801ccce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f300 81e3 	bgt.w	801d09c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801ccd6:	9b06      	ldr	r3, [sp, #24]
 801ccd8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ccdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccde:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801cce2:	930a      	str	r3, [sp, #40]	; 0x28
 801cce4:	e168      	b.n	801cfb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801cce6:	1c51      	adds	r1, r2, #1
 801cce8:	f040 8157 	bne.w	801cf9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801ccec:	9907      	ldr	r1, [sp, #28]
 801ccee:	428a      	cmp	r2, r1
 801ccf0:	f280 8153 	bge.w	801cf9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801ccf4:	1c5f      	adds	r7, r3, #1
 801ccf6:	f2c0 8150 	blt.w	801cf9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801ccfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ccfc:	4293      	cmp	r3, r2
 801ccfe:	f280 814c 	bge.w	801cf9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801cd02:	9b06      	ldr	r3, [sp, #24]
 801cd04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801cd06:	9313      	str	r3, [sp, #76]	; 0x4c
 801cd08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	dde3      	ble.n	801ccd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801cd0e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801cd10:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cd12:	1409      	asrs	r1, r1, #16
 801cd14:	ea4f 4325 	mov.w	r3, r5, asr #16
 801cd18:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801cd1c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cd20:	f100 81a3 	bmi.w	801d06a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801cd24:	9c07      	ldr	r4, [sp, #28]
 801cd26:	1c4e      	adds	r6, r1, #1
 801cd28:	42b4      	cmp	r4, r6
 801cd2a:	f340 81a0 	ble.w	801d06e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	f2c0 819d 	blt.w	801d06e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801cd34:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cd36:	1c5e      	adds	r6, r3, #1
 801cd38:	42b4      	cmp	r4, r6
 801cd3a:	f340 8198 	ble.w	801d06e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801cd3e:	9c07      	ldr	r4, [sp, #28]
 801cd40:	fb03 1304 	mla	r3, r3, r4, r1
 801cd44:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cd46:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801cd4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801cd4e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cd52:	2a00      	cmp	r2, #0
 801cd54:	f000 816f 	beq.w	801d036 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801cd58:	6871      	ldr	r1, [r6, #4]
 801cd5a:	910b      	str	r1, [sp, #44]	; 0x2c
 801cd5c:	ea4f 6811 	mov.w	r8, r1, lsr #24
 801cd60:	2800      	cmp	r0, #0
 801cd62:	f000 8171 	beq.w	801d048 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801cd66:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cd68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cd6a:	1871      	adds	r1, r6, r1
 801cd6c:	5934      	ldr	r4, [r6, r4]
 801cd6e:	6849      	ldr	r1, [r1, #4]
 801cd70:	9408      	str	r4, [sp, #32]
 801cd72:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801cd76:	910c      	str	r1, [sp, #48]	; 0x30
 801cd78:	0e0e      	lsrs	r6, r1, #24
 801cd7a:	b292      	uxth	r2, r2
 801cd7c:	b280      	uxth	r0, r0
 801cd7e:	fb02 fb00 	mul.w	fp, r2, r0
 801cd82:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801cd86:	0112      	lsls	r2, r2, #4
 801cd88:	eba2 090b 	sub.w	r9, r2, fp
 801cd8c:	b280      	uxth	r0, r0
 801cd8e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801cd92:	fa1f f989 	uxth.w	r9, r9
 801cd96:	1a09      	subs	r1, r1, r0
 801cd98:	b289      	uxth	r1, r1
 801cd9a:	fb09 f208 	mul.w	r2, r9, r8
 801cd9e:	fb01 220c 	mla	r2, r1, ip, r2
 801cda2:	fb00 220a 	mla	r2, r0, sl, r2
 801cda6:	fb0b 2206 	mla	r2, fp, r6, r2
 801cdaa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cdae:	2a00      	cmp	r2, #0
 801cdb0:	f000 80e8 	beq.w	801cf84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801cdb4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cdb8:	d01b      	beq.n	801cdf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801cdba:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801cdbe:	fb0c fe0e 	mul.w	lr, ip, lr
 801cdc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cdc6:	fb0c fc03 	mul.w	ip, ip, r3
 801cdca:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801cdce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cdd2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801cdd6:	4473      	add	r3, lr
 801cdd8:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801cddc:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801cde0:	0a1b      	lsrs	r3, r3, #8
 801cde2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cde6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cdea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cdee:	ea43 030e 	orr.w	r3, r3, lr
 801cdf2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cdf6:	d01e      	beq.n	801ce36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801cdf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cdfa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cdfe:	fb08 fc0c 	mul.w	ip, r8, ip
 801ce02:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ce06:	fb08 f80e 	mul.w	r8, r8, lr
 801ce0a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ce0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ce16:	44e6      	add	lr, ip
 801ce18:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801ce1c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801ce20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce24:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ce28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce2c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ce30:	ea4e 0408 	orr.w	r4, lr, r8
 801ce34:	940b      	str	r4, [sp, #44]	; 0x2c
 801ce36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ce3a:	d01e      	beq.n	801ce7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ce3c:	9c08      	ldr	r4, [sp, #32]
 801ce3e:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801ce42:	fb0a f808 	mul.w	r8, sl, r8
 801ce46:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ce4a:	fb0a fa0c 	mul.w	sl, sl, ip
 801ce4e:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801ce52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce56:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801ce5a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ce5e:	44c6      	add	lr, r8
 801ce60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ce74:	ea4e 040a 	orr.w	r4, lr, sl
 801ce78:	9408      	str	r4, [sp, #32]
 801ce7a:	2eff      	cmp	r6, #255	; 0xff
 801ce7c:	d01d      	beq.n	801ceba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ce7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ce80:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801ce84:	fb06 f808 	mul.w	r8, r6, r8
 801ce88:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ce8c:	fb06 f60c 	mul.w	r6, r6, ip
 801ce90:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801ce94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce98:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801ce9c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801cea0:	44c6      	add	lr, r8
 801cea2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cea6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ceaa:	0a36      	lsrs	r6, r6, #8
 801ceac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ceb0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ceb4:	ea4e 0406 	orr.w	r4, lr, r6
 801ceb8:	940c      	str	r4, [sp, #48]	; 0x30
 801ceba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cebc:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801cec0:	9c08      	ldr	r4, [sp, #32]
 801cec2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801cec6:	fb09 f606 	mul.w	r6, r9, r6
 801ceca:	fb01 660c 	mla	r6, r1, ip, r6
 801cece:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ced2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ced4:	fb00 660c 	mla	r6, r0, ip, r6
 801ced8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cedc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cede:	fb0b 660c 	mla	r6, fp, ip, r6
 801cee2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801cee6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ceea:	fb09 f90c 	mul.w	r9, r9, ip
 801ceee:	fb01 9303 	mla	r3, r1, r3, r9
 801cef2:	9908      	ldr	r1, [sp, #32]
 801cef4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801cef8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cefa:	fb00 330e 	mla	r3, r0, lr, r3
 801cefe:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801cf02:	fb0b 3b00 	mla	fp, fp, r0, r3
 801cf06:	0a36      	lsrs	r6, r6, #8
 801cf08:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801cf0c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801cf10:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801cf14:	ea46 060b 	orr.w	r6, r6, fp
 801cf18:	2aff      	cmp	r2, #255	; 0xff
 801cf1a:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801cf1e:	f000 8099 	beq.w	801d054 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801cf22:	8839      	ldrh	r1, [r7, #0]
 801cf24:	43d2      	mvns	r2, r2
 801cf26:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801cf2a:	fa5f fe82 	uxtb.w	lr, r2
 801cf2e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cf32:	fb0c fc0e 	mul.w	ip, ip, lr
 801cf36:	10c8      	asrs	r0, r1, #3
 801cf38:	00ca      	lsls	r2, r1, #3
 801cf3a:	f10c 0101 	add.w	r1, ip, #1
 801cf3e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801cf42:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 801cf46:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801cf4a:	b2d2      	uxtb	r2, r2
 801cf4c:	4952      	ldr	r1, [pc, #328]	; (801d098 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 801cf4e:	fb02 f20e 	mul.w	r2, r2, lr
 801cf52:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801cf56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801cf5a:	1c51      	adds	r1, r2, #1
 801cf5c:	fb00 f00e 	mul.w	r0, r0, lr
 801cf60:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cf64:	b2f6      	uxtb	r6, r6
 801cf66:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801cf6a:	1c42      	adds	r2, r0, #1
 801cf6c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cf70:	b2db      	uxtb	r3, r3
 801cf72:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cf76:	00db      	lsls	r3, r3, #3
 801cf78:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 801cf7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cf80:	431e      	orrs	r6, r3
 801cf82:	803e      	strh	r6, [r7, #0]
 801cf84:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cf86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cf88:	441a      	add	r2, r3
 801cf8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cf8c:	9229      	str	r2, [sp, #164]	; 0xa4
 801cf8e:	441d      	add	r5, r3
 801cf90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cf92:	3b01      	subs	r3, #1
 801cf94:	3702      	adds	r7, #2
 801cf96:	9313      	str	r3, [sp, #76]	; 0x4c
 801cf98:	e6b6      	b.n	801cd08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801cf9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cf9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cf9e:	441a      	add	r2, r3
 801cfa0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cfa2:	9229      	str	r2, [sp, #164]	; 0xa4
 801cfa4:	441d      	add	r5, r3
 801cfa6:	9b06      	ldr	r3, [sp, #24]
 801cfa8:	3b01      	subs	r3, #1
 801cfaa:	9306      	str	r3, [sp, #24]
 801cfac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfae:	3302      	adds	r3, #2
 801cfb0:	930a      	str	r3, [sp, #40]	; 0x28
 801cfb2:	e660      	b.n	801cc76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801cfb4:	f47f ae72 	bne.w	801cc9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801cfb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	f340 81bc 	ble.w	801d338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801cfc0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cfc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cfc8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cfcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cfce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cfd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cfd6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cfda:	eef0 6a48 	vmov.f32	s13, s16
 801cfde:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cfe2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cfe6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cfea:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801cfee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cff2:	eef0 6a68 	vmov.f32	s13, s17
 801cff6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cffa:	ee18 2a10 	vmov	r2, s16
 801cffe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d002:	fb92 f3f3 	sdiv	r3, r2, r3
 801d006:	ee18 2a90 	vmov	r2, s17
 801d00a:	932b      	str	r3, [sp, #172]	; 0xac
 801d00c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d00e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d012:	932c      	str	r3, [sp, #176]	; 0xb0
 801d014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d018:	3b01      	subs	r3, #1
 801d01a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d01e:	9312      	str	r3, [sp, #72]	; 0x48
 801d020:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d022:	bf08      	it	eq
 801d024:	4613      	moveq	r3, r2
 801d026:	ee16 5a90 	vmov	r5, s13
 801d02a:	9306      	str	r3, [sp, #24]
 801d02c:	eef0 8a67 	vmov.f32	s17, s15
 801d030:	eeb0 8a47 	vmov.f32	s16, s14
 801d034:	e618      	b.n	801cc68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801d036:	b150      	cbz	r0, 801d04e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801d038:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d03a:	5871      	ldr	r1, [r6, r1]
 801d03c:	9108      	str	r1, [sp, #32]
 801d03e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801d042:	26ff      	movs	r6, #255	; 0xff
 801d044:	46b0      	mov	r8, r6
 801d046:	e698      	b.n	801cd7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801d048:	26ff      	movs	r6, #255	; 0xff
 801d04a:	46b2      	mov	sl, r6
 801d04c:	e695      	b.n	801cd7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801d04e:	26ff      	movs	r6, #255	; 0xff
 801d050:	46b2      	mov	sl, r6
 801d052:	e7f7      	b.n	801d044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801d054:	0972      	lsrs	r2, r6, #5
 801d056:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801d05a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d05e:	f023 0307 	bic.w	r3, r3, #7
 801d062:	4313      	orrs	r3, r2
 801d064:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d068:	e78a      	b.n	801cf80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 801d06a:	1c4e      	adds	r6, r1, #1
 801d06c:	d18a      	bne.n	801cf84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801d06e:	9c07      	ldr	r4, [sp, #28]
 801d070:	428c      	cmp	r4, r1
 801d072:	dd87      	ble.n	801cf84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801d074:	1c5c      	adds	r4, r3, #1
 801d076:	db85      	blt.n	801cf84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801d078:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d07a:	429c      	cmp	r4, r3
 801d07c:	dd82      	ble.n	801cf84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801d07e:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801d082:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d086:	9400      	str	r4, [sp, #0]
 801d088:	9b07      	ldr	r3, [sp, #28]
 801d08a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d08c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d08e:	4639      	mov	r1, r7
 801d090:	f7ff fc62 	bl	801c958 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801d094:	e776      	b.n	801cf84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801d096:	bf00      	nop
 801d098:	fffff800 	.word	0xfffff800
 801d09c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d09e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801d0a0:	9c07      	ldr	r4, [sp, #28]
 801d0a2:	1409      	asrs	r1, r1, #16
 801d0a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d0a8:	142b      	asrs	r3, r5, #16
 801d0aa:	fb04 1303 	mla	r3, r4, r3, r1
 801d0ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d0b0:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801d0b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801d0b8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d0bc:	0e1f      	lsrs	r7, r3, #24
 801d0be:	2a00      	cmp	r2, #0
 801d0c0:	f000 811d 	beq.w	801d2fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801d0c4:	6871      	ldr	r1, [r6, #4]
 801d0c6:	910d      	str	r1, [sp, #52]	; 0x34
 801d0c8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801d0cc:	2800      	cmp	r0, #0
 801d0ce:	f000 811f 	beq.w	801d310 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801d0d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d0d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d0d6:	1871      	adds	r1, r6, r1
 801d0d8:	5934      	ldr	r4, [r6, r4]
 801d0da:	6849      	ldr	r1, [r1, #4]
 801d0dc:	9409      	str	r4, [sp, #36]	; 0x24
 801d0de:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d0e2:	910f      	str	r1, [sp, #60]	; 0x3c
 801d0e4:	0e0e      	lsrs	r6, r1, #24
 801d0e6:	b292      	uxth	r2, r2
 801d0e8:	b280      	uxth	r0, r0
 801d0ea:	fb02 fb00 	mul.w	fp, r2, r0
 801d0ee:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801d0f2:	0112      	lsls	r2, r2, #4
 801d0f4:	eba2 080b 	sub.w	r8, r2, fp
 801d0f8:	b280      	uxth	r0, r0
 801d0fa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d0fe:	fa1f f888 	uxth.w	r8, r8
 801d102:	1a09      	subs	r1, r1, r0
 801d104:	b289      	uxth	r1, r1
 801d106:	fb08 f20e 	mul.w	r2, r8, lr
 801d10a:	fb01 2207 	mla	r2, r1, r7, r2
 801d10e:	fb00 2209 	mla	r2, r0, r9, r2
 801d112:	fb0b 2206 	mla	r2, fp, r6, r2
 801d116:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d11a:	2a00      	cmp	r2, #0
 801d11c:	f000 80e3 	beq.w	801d2e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801d120:	2fff      	cmp	r7, #255	; 0xff
 801d122:	d01a      	beq.n	801d15a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 801d124:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d128:	fb07 fc0c 	mul.w	ip, r7, ip
 801d12c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d130:	435f      	muls	r7, r3
 801d132:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d136:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d13a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d13e:	4463      	add	r3, ip
 801d140:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801d144:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801d148:	0a1b      	lsrs	r3, r3, #8
 801d14a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d14e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d152:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d156:	ea43 030c 	orr.w	r3, r3, ip
 801d15a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d15e:	d01e      	beq.n	801d19e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801d160:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d162:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d166:	fb0e f707 	mul.w	r7, lr, r7
 801d16a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d16e:	fb0e fe0c 	mul.w	lr, lr, ip
 801d172:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d176:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d17a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d17e:	44bc      	add	ip, r7
 801d180:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801d184:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801d188:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d18c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d190:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d194:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d198:	ea4c 040e 	orr.w	r4, ip, lr
 801d19c:	940d      	str	r4, [sp, #52]	; 0x34
 801d19e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d1a2:	d01e      	beq.n	801d1e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801d1a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d1a6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d1aa:	fb09 fe0e 	mul.w	lr, r9, lr
 801d1ae:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801d1b2:	fb09 f907 	mul.w	r9, r9, r7
 801d1b6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d1ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d1be:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d1c2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801d1c6:	44f4      	add	ip, lr
 801d1c8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d1cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d1d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d1d8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d1dc:	ea4c 0409 	orr.w	r4, ip, r9
 801d1e0:	9409      	str	r4, [sp, #36]	; 0x24
 801d1e2:	2eff      	cmp	r6, #255	; 0xff
 801d1e4:	d01c      	beq.n	801d220 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 801d1e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d1e8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d1ec:	fb06 fe0e 	mul.w	lr, r6, lr
 801d1f0:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801d1f4:	437e      	muls	r6, r7
 801d1f6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d1fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d1fe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d202:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801d206:	44f4      	add	ip, lr
 801d208:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801d20c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d210:	0a36      	lsrs	r6, r6, #8
 801d212:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d216:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d21a:	ea4c 0406 	orr.w	r4, ip, r6
 801d21e:	940f      	str	r4, [sp, #60]	; 0x3c
 801d220:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d222:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801d226:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d228:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801d22c:	fb08 f606 	mul.w	r6, r8, r6
 801d230:	fb01 6607 	mla	r6, r1, r7, r6
 801d234:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d238:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d23a:	fb00 6607 	mla	r6, r0, r7, r6
 801d23e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d242:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d244:	fb0b 6607 	mla	r6, fp, r7, r6
 801d248:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801d24c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d250:	fb08 f807 	mul.w	r8, r8, r7
 801d254:	fb01 8303 	mla	r3, r1, r3, r8
 801d258:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d25a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801d25e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d260:	fb00 330c 	mla	r3, r0, ip, r3
 801d264:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801d268:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801d26c:	0a36      	lsrs	r6, r6, #8
 801d26e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d272:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d276:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d27a:	ea46 060e 	orr.w	r6, r6, lr
 801d27e:	2aff      	cmp	r2, #255	; 0xff
 801d280:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801d284:	d04a      	beq.n	801d31c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801d286:	f8ba 1000 	ldrh.w	r1, [sl]
 801d28a:	43d2      	mvns	r2, r2
 801d28c:	120f      	asrs	r7, r1, #8
 801d28e:	fa5f fc82 	uxtb.w	ip, r2
 801d292:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d296:	fb07 f70c 	mul.w	r7, r7, ip
 801d29a:	10c8      	asrs	r0, r1, #3
 801d29c:	00ca      	lsls	r2, r1, #3
 801d29e:	1c79      	adds	r1, r7, #1
 801d2a0:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801d2a4:	0c37      	lsrs	r7, r6, #16
 801d2a6:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801d2aa:	b2d2      	uxtb	r2, r2
 801d2ac:	4925      	ldr	r1, [pc, #148]	; (801d344 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 801d2ae:	fb02 f20c 	mul.w	r2, r2, ip
 801d2b2:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 801d2b6:	1c51      	adds	r1, r2, #1
 801d2b8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d2bc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d2c0:	b2f6      	uxtb	r6, r6
 801d2c2:	fb00 f00c 	mul.w	r0, r0, ip
 801d2c6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801d2ca:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 801d2ce:	1c46      	adds	r6, r0, #1
 801d2d0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d2d4:	b2de      	uxtb	r6, r3
 801d2d6:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801d2da:	00f6      	lsls	r6, r6, #3
 801d2dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d2e0:	4337      	orrs	r7, r6
 801d2e2:	f8aa 7000 	strh.w	r7, [sl]
 801d2e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d2e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d2ea:	441a      	add	r2, r3
 801d2ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d2ee:	9229      	str	r2, [sp, #164]	; 0xa4
 801d2f0:	441d      	add	r5, r3
 801d2f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d2f4:	3b01      	subs	r3, #1
 801d2f6:	f10a 0a02 	add.w	sl, sl, #2
 801d2fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801d2fc:	e4e7      	b.n	801ccce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 801d2fe:	b150      	cbz	r0, 801d316 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 801d300:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d302:	5871      	ldr	r1, [r6, r1]
 801d304:	9109      	str	r1, [sp, #36]	; 0x24
 801d306:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801d30a:	26ff      	movs	r6, #255	; 0xff
 801d30c:	46b6      	mov	lr, r6
 801d30e:	e6ea      	b.n	801d0e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801d310:	26ff      	movs	r6, #255	; 0xff
 801d312:	46b1      	mov	r9, r6
 801d314:	e6e7      	b.n	801d0e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801d316:	26ff      	movs	r6, #255	; 0xff
 801d318:	46b1      	mov	r9, r6
 801d31a:	e7f7      	b.n	801d30c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 801d31c:	0972      	lsrs	r2, r6, #5
 801d31e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801d322:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d326:	f023 0307 	bic.w	r3, r3, #7
 801d32a:	4313      	orrs	r3, r2
 801d32c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d330:	431e      	orrs	r6, r3
 801d332:	f8aa 6000 	strh.w	r6, [sl]
 801d336:	e7d6      	b.n	801d2e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801d338:	b017      	add	sp, #92	; 0x5c
 801d33a:	ecbd 8b08 	vpop	{d8-d11}
 801d33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d342:	bf00      	nop
 801d344:	fffff800 	.word	0xfffff800

0801d348 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d34c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801d350:	2c00      	cmp	r4, #0
 801d352:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801d356:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d35a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801d35e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801d362:	fb04 ce03 	mla	lr, r4, r3, ip
 801d366:	db60      	blt.n	801d42a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801d368:	45a1      	cmp	r9, r4
 801d36a:	dd5e      	ble.n	801d42a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801d36c:	f1bc 0f00 	cmp.w	ip, #0
 801d370:	db59      	blt.n	801d426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801d372:	45e0      	cmp	r8, ip
 801d374:	dd57      	ble.n	801d426 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801d376:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801d37a:	f01e 0f01 	tst.w	lr, #1
 801d37e:	5c16      	ldrb	r6, [r2, r0]
 801d380:	bf0c      	ite	eq
 801d382:	f006 060f 	andeq.w	r6, r6, #15
 801d386:	1136      	asrne	r6, r6, #4
 801d388:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d38c:	b2f6      	uxtb	r6, r6
 801d38e:	f11c 0001 	adds.w	r0, ip, #1
 801d392:	d44d      	bmi.n	801d430 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801d394:	4580      	cmp	r8, r0
 801d396:	dd4b      	ble.n	801d430 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801d398:	2d00      	cmp	r5, #0
 801d39a:	d04b      	beq.n	801d434 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 801d39c:	f10e 0a01 	add.w	sl, lr, #1
 801d3a0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801d3a4:	f01a 0f01 	tst.w	sl, #1
 801d3a8:	5c10      	ldrb	r0, [r2, r0]
 801d3aa:	bf0c      	ite	eq
 801d3ac:	f000 000f 	andeq.w	r0, r0, #15
 801d3b0:	1100      	asrne	r0, r0, #4
 801d3b2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d3b6:	b2c0      	uxtb	r0, r0
 801d3b8:	3401      	adds	r4, #1
 801d3ba:	d43f      	bmi.n	801d43c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801d3bc:	45a1      	cmp	r9, r4
 801d3be:	dd3d      	ble.n	801d43c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801d3c0:	2f00      	cmp	r7, #0
 801d3c2:	f000 80a0 	beq.w	801d506 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1be>
 801d3c6:	f1bc 0f00 	cmp.w	ip, #0
 801d3ca:	db35      	blt.n	801d438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801d3cc:	45e0      	cmp	r8, ip
 801d3ce:	dd33      	ble.n	801d438 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801d3d0:	eb03 090e 	add.w	r9, r3, lr
 801d3d4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801d3d8:	f019 0f01 	tst.w	r9, #1
 801d3dc:	5d14      	ldrb	r4, [r2, r4]
 801d3de:	bf0c      	ite	eq
 801d3e0:	f004 040f 	andeq.w	r4, r4, #15
 801d3e4:	1124      	asrne	r4, r4, #4
 801d3e6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d3ea:	b2e4      	uxtb	r4, r4
 801d3ec:	f11c 0c01 	adds.w	ip, ip, #1
 801d3f0:	d427      	bmi.n	801d442 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801d3f2:	45e0      	cmp	r8, ip
 801d3f4:	dd25      	ble.n	801d442 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801d3f6:	b335      	cbz	r5, 801d446 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 801d3f8:	3301      	adds	r3, #1
 801d3fa:	449e      	add	lr, r3
 801d3fc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d400:	f01e 0f01 	tst.w	lr, #1
 801d404:	5cd2      	ldrb	r2, [r2, r3]
 801d406:	bf0c      	ite	eq
 801d408:	f002 020f 	andeq.w	r2, r2, #15
 801d40c:	1112      	asrne	r2, r2, #4
 801d40e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d412:	b2d3      	uxtb	r3, r2
 801d414:	2d0f      	cmp	r5, #15
 801d416:	d917      	bls.n	801d448 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 801d418:	4b3d      	ldr	r3, [pc, #244]	; (801d510 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801d41a:	4a3e      	ldr	r2, [pc, #248]	; (801d514 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801d41c:	483e      	ldr	r0, [pc, #248]	; (801d518 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 801d41e:	f240 3173 	movw	r1, #883	; 0x373
 801d422:	f000 ffdf 	bl	801e3e4 <__assert_func>
 801d426:	2600      	movs	r6, #0
 801d428:	e7b1      	b.n	801d38e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 801d42a:	2000      	movs	r0, #0
 801d42c:	4606      	mov	r6, r0
 801d42e:	e7c3      	b.n	801d3b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801d430:	2000      	movs	r0, #0
 801d432:	e7c1      	b.n	801d3b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801d434:	4628      	mov	r0, r5
 801d436:	e7bf      	b.n	801d3b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801d438:	2400      	movs	r4, #0
 801d43a:	e7d7      	b.n	801d3ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 801d43c:	2300      	movs	r3, #0
 801d43e:	461c      	mov	r4, r3
 801d440:	e7e8      	b.n	801d414 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801d442:	2300      	movs	r3, #0
 801d444:	e7e6      	b.n	801d414 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801d446:	462b      	mov	r3, r5
 801d448:	2f0f      	cmp	r7, #15
 801d44a:	d8e5      	bhi.n	801d418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801d44c:	b2ad      	uxth	r5, r5
 801d44e:	b2bf      	uxth	r7, r7
 801d450:	fb05 fc07 	mul.w	ip, r5, r7
 801d454:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801d458:	012d      	lsls	r5, r5, #4
 801d45a:	b2bf      	uxth	r7, r7
 801d45c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801d460:	eba5 050c 	sub.w	r5, r5, ip
 801d464:	1bd2      	subs	r2, r2, r7
 801d466:	b2ad      	uxth	r5, r5
 801d468:	b292      	uxth	r2, r2
 801d46a:	4368      	muls	r0, r5
 801d46c:	fb06 0002 	mla	r0, r6, r2, r0
 801d470:	fb07 0404 	mla	r4, r7, r4, r0
 801d474:	fb0c 4303 	mla	r3, ip, r3, r4
 801d478:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d040      	beq.n	801d502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 801d480:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801d484:	4a25      	ldr	r2, [pc, #148]	; (801d51c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d4>)
 801d486:	4343      	muls	r3, r0
 801d488:	1c58      	adds	r0, r3, #1
 801d48a:	6816      	ldr	r6, [r2, #0]
 801d48c:	880a      	ldrh	r2, [r1, #0]
 801d48e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d492:	1200      	asrs	r0, r0, #8
 801d494:	b284      	uxth	r4, r0
 801d496:	1215      	asrs	r5, r2, #8
 801d498:	43c0      	mvns	r0, r0
 801d49a:	b2c3      	uxtb	r3, r0
 801d49c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d4a0:	1230      	asrs	r0, r6, #8
 801d4a2:	fb15 f503 	smulbb	r5, r5, r3
 801d4a6:	10d7      	asrs	r7, r2, #3
 801d4a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d4ac:	fb00 5004 	mla	r0, r0, r4, r5
 801d4b0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d4b4:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801d4b8:	00d2      	lsls	r2, r2, #3
 801d4ba:	fb17 f703 	smulbb	r7, r7, r3
 801d4be:	b2d2      	uxtb	r2, r2
 801d4c0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d4c4:	00f6      	lsls	r6, r6, #3
 801d4c6:	fb05 7504 	mla	r5, r5, r4, r7
 801d4ca:	fb12 f303 	smulbb	r3, r2, r3
 801d4ce:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d4d2:	fb06 3304 	mla	r3, r6, r4, r3
 801d4d6:	b2ad      	uxth	r5, r5
 801d4d8:	b29a      	uxth	r2, r3
 801d4da:	b280      	uxth	r0, r0
 801d4dc:	1c6b      	adds	r3, r5, #1
 801d4de:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801d4e2:	1c44      	adds	r4, r0, #1
 801d4e4:	095b      	lsrs	r3, r3, #5
 801d4e6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801d4ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d4ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d4f2:	4303      	orrs	r3, r0
 801d4f4:	1c50      	adds	r0, r2, #1
 801d4f6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d4fa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d4fe:	4313      	orrs	r3, r2
 801d500:	800b      	strh	r3, [r1, #0]
 801d502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d506:	2d0f      	cmp	r5, #15
 801d508:	d886      	bhi.n	801d418 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801d50a:	463b      	mov	r3, r7
 801d50c:	463c      	mov	r4, r7
 801d50e:	e79d      	b.n	801d44c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 801d510:	08022217 	.word	0x08022217
 801d514:	08022775 	.word	0x08022775
 801d518:	0802229f 	.word	0x0802229f
 801d51c:	2002ee80 	.word	0x2002ee80

0801d520 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d524:	ed2d 8b08 	vpush	{d8-d11}
 801d528:	b099      	sub	sp, #100	; 0x64
 801d52a:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 801d52e:	9309      	str	r3, [sp, #36]	; 0x24
 801d530:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801d534:	930a      	str	r3, [sp, #40]	; 0x28
 801d536:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801d53a:	9216      	str	r2, [sp, #88]	; 0x58
 801d53c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d53e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d540:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801d544:	910f      	str	r1, [sp, #60]	; 0x3c
 801d546:	9310      	str	r3, [sp, #64]	; 0x40
 801d548:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801d54c:	9017      	str	r0, [sp, #92]	; 0x5c
 801d54e:	6850      	ldr	r0, [r2, #4]
 801d550:	6812      	ldr	r2, [r2, #0]
 801d552:	fb00 1303 	mla	r3, r0, r3, r1
 801d556:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 801d55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d55c:	3301      	adds	r3, #1
 801d55e:	f023 0301 	bic.w	r3, r3, #1
 801d562:	930c      	str	r3, [sp, #48]	; 0x30
 801d564:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801d566:	681f      	ldr	r7, [r3, #0]
 801d568:	eeb0 aa40 	vmov.f32	s20, s0
 801d56c:	eef0 9a60 	vmov.f32	s19, s1
 801d570:	eeb0 9a41 	vmov.f32	s18, s2
 801d574:	eeb0 8a62 	vmov.f32	s16, s5
 801d578:	eef0 8a43 	vmov.f32	s17, s6
 801d57c:	eef0 ba44 	vmov.f32	s23, s8
 801d580:	eeb0 ba64 	vmov.f32	s22, s9
 801d584:	eef0 aa45 	vmov.f32	s21, s10
 801d588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	dc03      	bgt.n	801d596 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801d58e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d590:	2b00      	cmp	r3, #0
 801d592:	f340 826b 	ble.w	801da6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801d596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d598:	2b00      	cmp	r3, #0
 801d59a:	f340 811f 	ble.w	801d7dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801d59e:	1422      	asrs	r2, r4, #16
 801d5a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d5a4:	d42d      	bmi.n	801d602 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d5a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d5a8:	1c51      	adds	r1, r2, #1
 801d5aa:	4288      	cmp	r0, r1
 801d5ac:	dd2c      	ble.n	801d608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	db2a      	blt.n	801d608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d5b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d5b4:	1c59      	adds	r1, r3, #1
 801d5b6:	4288      	cmp	r0, r1
 801d5b8:	dd26      	ble.n	801d608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5bc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d5be:	3b01      	subs	r3, #1
 801d5c0:	fb02 4203 	mla	r2, r2, r3, r4
 801d5c4:	1412      	asrs	r2, r2, #16
 801d5c6:	d42a      	bmi.n	801d61e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801d5c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d5ca:	3201      	adds	r2, #1
 801d5cc:	4291      	cmp	r1, r2
 801d5ce:	dd26      	ble.n	801d61e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801d5d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801d5d2:	fb02 6303 	mla	r3, r2, r3, r6
 801d5d6:	141b      	asrs	r3, r3, #16
 801d5d8:	d421      	bmi.n	801d61e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801d5da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d5dc:	3301      	adds	r3, #1
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	dd1d      	ble.n	801d61e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801d5e2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d5e6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801d5ea:	9311      	str	r3, [sp, #68]	; 0x44
 801d5ec:	46d1      	mov	r9, sl
 801d5ee:	f1bb 0f00 	cmp.w	fp, #0
 801d5f2:	f300 8163 	bgt.w	801d8bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39c>
 801d5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5f8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801d5fc:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801d600:	e0ee      	b.n	801d7e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801d602:	1c51      	adds	r1, r2, #1
 801d604:	f040 80e0 	bne.w	801d7c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801d608:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d60a:	4291      	cmp	r1, r2
 801d60c:	f340 80dc 	ble.w	801d7c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801d610:	1c5a      	adds	r2, r3, #1
 801d612:	f2c0 80d9 	blt.w	801d7c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801d616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d618:	4293      	cmp	r3, r2
 801d61a:	f280 80d5 	bge.w	801d7c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801d61e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d622:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d626:	9311      	str	r3, [sp, #68]	; 0x44
 801d628:	46d0      	mov	r8, sl
 801d62a:	f1b9 0f00 	cmp.w	r9, #0
 801d62e:	dde2      	ble.n	801d5f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801d630:	1420      	asrs	r0, r4, #16
 801d632:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d636:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801d63a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d63e:	f100 8122 	bmi.w	801d886 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 801d642:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d644:	f100 0c01 	add.w	ip, r0, #1
 801d648:	4565      	cmp	r5, ip
 801d64a:	f340 811e 	ble.w	801d88a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801d64e:	2b00      	cmp	r3, #0
 801d650:	f2c0 811b 	blt.w	801d88a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801d654:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d656:	f103 0c01 	add.w	ip, r3, #1
 801d65a:	4565      	cmp	r5, ip
 801d65c:	f340 8115 	ble.w	801d88a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801d660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d662:	fb03 0305 	mla	r3, r3, r5, r0
 801d666:	0858      	lsrs	r0, r3, #1
 801d668:	07dd      	lsls	r5, r3, #31
 801d66a:	5c38      	ldrb	r0, [r7, r0]
 801d66c:	bf54      	ite	pl
 801d66e:	f000 000f 	andpl.w	r0, r0, #15
 801d672:	1100      	asrmi	r0, r0, #4
 801d674:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d678:	b2c0      	uxtb	r0, r0
 801d67a:	2a00      	cmp	r2, #0
 801d67c:	f000 80ef 	beq.w	801d85e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801d680:	f103 0e01 	add.w	lr, r3, #1
 801d684:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801d688:	f01e 0f01 	tst.w	lr, #1
 801d68c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d690:	bf0c      	ite	eq
 801d692:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d696:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d69a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d69e:	fa5f f58c 	uxtb.w	r5, ip
 801d6a2:	9512      	str	r5, [sp, #72]	; 0x48
 801d6a4:	b1f9      	cbz	r1, 801d6e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801d6a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d6a8:	442b      	add	r3, r5
 801d6aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d6ae:	07dd      	lsls	r5, r3, #31
 801d6b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d6b4:	bf54      	ite	pl
 801d6b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d6ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d6be:	3301      	adds	r3, #1
 801d6c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d6c4:	fa5f f58c 	uxtb.w	r5, ip
 801d6c8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d6cc:	950d      	str	r5, [sp, #52]	; 0x34
 801d6ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d6d2:	07dd      	lsls	r5, r3, #31
 801d6d4:	bf54      	ite	pl
 801d6d6:	f00c 030f 	andpl.w	r3, ip, #15
 801d6da:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801d6de:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d6e2:	b2db      	uxtb	r3, r3
 801d6e4:	9313      	str	r3, [sp, #76]	; 0x4c
 801d6e6:	b292      	uxth	r2, r2
 801d6e8:	b289      	uxth	r1, r1
 801d6ea:	fb02 f301 	mul.w	r3, r2, r1
 801d6ee:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d6f2:	0112      	lsls	r2, r2, #4
 801d6f4:	b289      	uxth	r1, r1
 801d6f6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d6fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d6fc:	1ad2      	subs	r2, r2, r3
 801d6fe:	ebac 0c01 	sub.w	ip, ip, r1
 801d702:	b292      	uxth	r2, r2
 801d704:	436a      	muls	r2, r5
 801d706:	fa1f fc8c 	uxth.w	ip, ip
 801d70a:	fb00 200c 	mla	r0, r0, ip, r2
 801d70e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d710:	fb01 0102 	mla	r1, r1, r2, r0
 801d714:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d716:	fb03 1302 	mla	r3, r3, r2, r1
 801d71a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d049      	beq.n	801d7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801d722:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d724:	4ac5      	ldr	r2, [pc, #788]	; (801da3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801d726:	4dc6      	ldr	r5, [pc, #792]	; (801da40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801d728:	f8d2 e000 	ldr.w	lr, [r2]
 801d72c:	f8b8 2000 	ldrh.w	r2, [r8]
 801d730:	434b      	muls	r3, r1
 801d732:	1c59      	adds	r1, r3, #1
 801d734:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d738:	121b      	asrs	r3, r3, #8
 801d73a:	b299      	uxth	r1, r3
 801d73c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801d740:	43db      	mvns	r3, r3
 801d742:	b2db      	uxtb	r3, r3
 801d744:	ea4f 202e 	mov.w	r0, lr, asr #8
 801d748:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d74c:	fb1c fc03 	smulbb	ip, ip, r3
 801d750:	ea4f 0be2 	mov.w	fp, r2, asr #3
 801d754:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d758:	fb00 c001 	mla	r0, r0, r1, ip
 801d75c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d760:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801d764:	fb1b fb03 	smulbb	fp, fp, r3
 801d768:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d76c:	00d2      	lsls	r2, r2, #3
 801d76e:	fb0c bc01 	mla	ip, ip, r1, fp
 801d772:	b2d2      	uxtb	r2, r2
 801d774:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801d778:	fb12 f303 	smulbb	r3, r2, r3
 801d77c:	fa1f fc8c 	uxth.w	ip, ip
 801d780:	fa5f fe8e 	uxtb.w	lr, lr
 801d784:	b280      	uxth	r0, r0
 801d786:	fb0e 3101 	mla	r1, lr, r1, r3
 801d78a:	f10c 0201 	add.w	r2, ip, #1
 801d78e:	b289      	uxth	r1, r1
 801d790:	1c43      	adds	r3, r0, #1
 801d792:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801d796:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d79a:	0952      	lsrs	r2, r2, #5
 801d79c:	1c4b      	adds	r3, r1, #1
 801d79e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d7a2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d7a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d7aa:	4310      	orrs	r0, r2
 801d7ac:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801d7b0:	4308      	orrs	r0, r1
 801d7b2:	f8a8 0000 	strh.w	r0, [r8]
 801d7b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d7b8:	441c      	add	r4, r3
 801d7ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d7bc:	f108 0802 	add.w	r8, r8, #2
 801d7c0:	441e      	add	r6, r3
 801d7c2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d7c6:	e730      	b.n	801d62a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801d7c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d7ca:	441c      	add	r4, r3
 801d7cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801d7ce:	441e      	add	r6, r3
 801d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7d2:	3b01      	subs	r3, #1
 801d7d4:	9309      	str	r3, [sp, #36]	; 0x24
 801d7d6:	f10a 0a02 	add.w	sl, sl, #2
 801d7da:	e6dc      	b.n	801d596 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801d7dc:	f47f aeed 	bne.w	801d5ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801d7e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	f340 8142 	ble.w	801da6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801d7e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d7ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d7f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d7f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d7f6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d7fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d7fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d802:	eef0 6a48 	vmov.f32	s13, s16
 801d806:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d80a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d80e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d812:	ee16 4a90 	vmov	r4, s13
 801d816:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d81a:	eef0 6a68 	vmov.f32	s13, s17
 801d81e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d822:	ee18 2a10 	vmov	r2, s16
 801d826:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d82a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d82e:	ee18 2a90 	vmov	r2, s17
 801d832:	932d      	str	r3, [sp, #180]	; 0xb4
 801d834:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d836:	fb92 f3f3 	sdiv	r3, r2, r3
 801d83a:	932e      	str	r3, [sp, #184]	; 0xb8
 801d83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d83e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d840:	3b01      	subs	r3, #1
 801d842:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d846:	930f      	str	r3, [sp, #60]	; 0x3c
 801d848:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d84a:	bf08      	it	eq
 801d84c:	4613      	moveq	r3, r2
 801d84e:	ee16 6a90 	vmov	r6, s13
 801d852:	9309      	str	r3, [sp, #36]	; 0x24
 801d854:	eef0 8a67 	vmov.f32	s17, s15
 801d858:	eeb0 8a47 	vmov.f32	s16, s14
 801d85c:	e694      	b.n	801d588 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801d85e:	2900      	cmp	r1, #0
 801d860:	f43f af41 	beq.w	801d6e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801d864:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d866:	442b      	add	r3, r5
 801d868:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d86c:	07db      	lsls	r3, r3, #31
 801d86e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d872:	bf54      	ite	pl
 801d874:	f00c 030f 	andpl.w	r3, ip, #15
 801d878:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801d87c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d880:	b2db      	uxtb	r3, r3
 801d882:	930d      	str	r3, [sp, #52]	; 0x34
 801d884:	e72f      	b.n	801d6e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801d886:	1c45      	adds	r5, r0, #1
 801d888:	d195      	bne.n	801d7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801d88a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d88c:	4285      	cmp	r5, r0
 801d88e:	dd92      	ble.n	801d7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801d890:	1c5d      	adds	r5, r3, #1
 801d892:	db90      	blt.n	801d7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801d894:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d896:	429d      	cmp	r5, r3
 801d898:	dd8d      	ble.n	801d7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801d89a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801d89e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801d8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8a2:	9301      	str	r3, [sp, #4]
 801d8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8a6:	9002      	str	r0, [sp, #8]
 801d8a8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801d8ac:	9300      	str	r3, [sp, #0]
 801d8ae:	463a      	mov	r2, r7
 801d8b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d8b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d8b4:	4641      	mov	r1, r8
 801d8b6:	f7ff fd47 	bl	801d348 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801d8ba:	e77c      	b.n	801d7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801d8bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d8be:	1422      	asrs	r2, r4, #16
 801d8c0:	1433      	asrs	r3, r6, #16
 801d8c2:	fb05 2303 	mla	r3, r5, r3, r2
 801d8c6:	085a      	lsrs	r2, r3, #1
 801d8c8:	07dd      	lsls	r5, r3, #31
 801d8ca:	5cba      	ldrb	r2, [r7, r2]
 801d8cc:	bf54      	ite	pl
 801d8ce:	f002 020f 	andpl.w	r2, r2, #15
 801d8d2:	1112      	asrmi	r2, r2, #4
 801d8d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d8d8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801d8dc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d8e0:	b2d2      	uxtb	r2, r2
 801d8e2:	2900      	cmp	r1, #0
 801d8e4:	f000 80ae 	beq.w	801da44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801d8e8:	f103 0e01 	add.w	lr, r3, #1
 801d8ec:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801d8f0:	f01e 0f01 	tst.w	lr, #1
 801d8f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d8f8:	bf0c      	ite	eq
 801d8fa:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d8fe:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d902:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d906:	fa5f f58c 	uxtb.w	r5, ip
 801d90a:	9514      	str	r5, [sp, #80]	; 0x50
 801d90c:	b300      	cbz	r0, 801d950 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801d90e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d910:	442b      	add	r3, r5
 801d912:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d916:	07dd      	lsls	r5, r3, #31
 801d918:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d91c:	bf54      	ite	pl
 801d91e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d922:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d926:	3301      	adds	r3, #1
 801d928:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d92c:	fa5f f58c 	uxtb.w	r5, ip
 801d930:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d934:	950e      	str	r5, [sp, #56]	; 0x38
 801d936:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d93a:	07dd      	lsls	r5, r3, #31
 801d93c:	bf54      	ite	pl
 801d93e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d942:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d946:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d94a:	fa5f f38c 	uxtb.w	r3, ip
 801d94e:	9315      	str	r3, [sp, #84]	; 0x54
 801d950:	b289      	uxth	r1, r1
 801d952:	b280      	uxth	r0, r0
 801d954:	fb01 f300 	mul.w	r3, r1, r0
 801d958:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801d95c:	0109      	lsls	r1, r1, #4
 801d95e:	b280      	uxth	r0, r0
 801d960:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801d964:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d966:	1ac9      	subs	r1, r1, r3
 801d968:	ebac 0c00 	sub.w	ip, ip, r0
 801d96c:	b289      	uxth	r1, r1
 801d96e:	4369      	muls	r1, r5
 801d970:	fa1f fc8c 	uxth.w	ip, ip
 801d974:	fb02 120c 	mla	r2, r2, ip, r1
 801d978:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d97a:	fb00 2001 	mla	r0, r0, r1, r2
 801d97e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d980:	fb03 0302 	mla	r3, r3, r2, r0
 801d984:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d04d      	beq.n	801da28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x508>
 801d98c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d98e:	4a2b      	ldr	r2, [pc, #172]	; (801da3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801d990:	4d2b      	ldr	r5, [pc, #172]	; (801da40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801d992:	f8d2 e000 	ldr.w	lr, [r2]
 801d996:	f8b9 2000 	ldrh.w	r2, [r9]
 801d99a:	434b      	muls	r3, r1
 801d99c:	1c59      	adds	r1, r3, #1
 801d99e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d9a2:	121b      	asrs	r3, r3, #8
 801d9a4:	b299      	uxth	r1, r3
 801d9a6:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801d9aa:	43db      	mvns	r3, r3
 801d9ac:	b2db      	uxtb	r3, r3
 801d9ae:	ea4f 202e 	mov.w	r0, lr, asr #8
 801d9b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d9b6:	fb1c fc03 	smulbb	ip, ip, r3
 801d9ba:	ea4f 08e2 	mov.w	r8, r2, asr #3
 801d9be:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d9c2:	fb00 c001 	mla	r0, r0, r1, ip
 801d9c6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d9ca:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801d9ce:	fb18 f803 	smulbb	r8, r8, r3
 801d9d2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d9d6:	00d2      	lsls	r2, r2, #3
 801d9d8:	fb0c 8c01 	mla	ip, ip, r1, r8
 801d9dc:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801d9e0:	b2d2      	uxtb	r2, r2
 801d9e2:	fa1f fc8c 	uxth.w	ip, ip
 801d9e6:	fa5f fe8e 	uxtb.w	lr, lr
 801d9ea:	fb12 f203 	smulbb	r2, r2, r3
 801d9ee:	b280      	uxth	r0, r0
 801d9f0:	fb0e 2201 	mla	r2, lr, r1, r2
 801d9f4:	f10c 0801 	add.w	r8, ip, #1
 801d9f8:	b292      	uxth	r2, r2
 801d9fa:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801d9fe:	f100 0801 	add.w	r8, r0, #1
 801da02:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801da06:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801da0a:	1c51      	adds	r1, r2, #1
 801da0c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801da10:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801da14:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801da18:	ea4c 0c00 	orr.w	ip, ip, r0
 801da1c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801da20:	ea4c 0c02 	orr.w	ip, ip, r2
 801da24:	f8a9 c000 	strh.w	ip, [r9]
 801da28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801da2a:	441c      	add	r4, r3
 801da2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801da2e:	f109 0902 	add.w	r9, r9, #2
 801da32:	441e      	add	r6, r3
 801da34:	f10b 3bff 	add.w	fp, fp, #4294967295
 801da38:	e5d9      	b.n	801d5ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801da3a:	bf00      	nop
 801da3c:	2002ee80 	.word	0x2002ee80
 801da40:	0007fff8 	.word	0x0007fff8
 801da44:	2800      	cmp	r0, #0
 801da46:	d083      	beq.n	801d950 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801da48:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801da4a:	442b      	add	r3, r5
 801da4c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801da50:	07db      	lsls	r3, r3, #31
 801da52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801da56:	bf54      	ite	pl
 801da58:	f00c 0c0f 	andpl.w	ip, ip, #15
 801da5c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801da60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801da64:	fa5f f38c 	uxtb.w	r3, ip
 801da68:	930e      	str	r3, [sp, #56]	; 0x38
 801da6a:	e771      	b.n	801d950 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801da6c:	b019      	add	sp, #100	; 0x64
 801da6e:	ecbd 8b08 	vpop	{d8-d11}
 801da72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da76:	bf00      	nop

0801da78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801da78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da7c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801da80:	2c00      	cmp	r4, #0
 801da82:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801da86:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801da8a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801da8e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801da92:	fb04 ce03 	mla	lr, r4, r3, ip
 801da96:	db60      	blt.n	801db5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801da98:	45a1      	cmp	r9, r4
 801da9a:	dd5e      	ble.n	801db5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801da9c:	f1bc 0f00 	cmp.w	ip, #0
 801daa0:	db59      	blt.n	801db56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801daa2:	45e0      	cmp	r8, ip
 801daa4:	dd57      	ble.n	801db56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801daa6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801daaa:	f01e 0f01 	tst.w	lr, #1
 801daae:	5c16      	ldrb	r6, [r2, r0]
 801dab0:	bf0c      	ite	eq
 801dab2:	f006 060f 	andeq.w	r6, r6, #15
 801dab6:	1136      	asrne	r6, r6, #4
 801dab8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801dabc:	b2f6      	uxtb	r6, r6
 801dabe:	f11c 0001 	adds.w	r0, ip, #1
 801dac2:	d44d      	bmi.n	801db60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801dac4:	4580      	cmp	r8, r0
 801dac6:	dd4b      	ble.n	801db60 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801dac8:	2d00      	cmp	r5, #0
 801daca:	d04b      	beq.n	801db64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801dacc:	f10e 0a01 	add.w	sl, lr, #1
 801dad0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801dad4:	f01a 0f01 	tst.w	sl, #1
 801dad8:	5c10      	ldrb	r0, [r2, r0]
 801dada:	bf0c      	ite	eq
 801dadc:	f000 000f 	andeq.w	r0, r0, #15
 801dae0:	1100      	asrne	r0, r0, #4
 801dae2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801dae6:	b2c0      	uxtb	r0, r0
 801dae8:	3401      	adds	r4, #1
 801daea:	d43f      	bmi.n	801db6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801daec:	45a1      	cmp	r9, r4
 801daee:	dd3d      	ble.n	801db6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801daf0:	2f00      	cmp	r7, #0
 801daf2:	f000 8099 	beq.w	801dc28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>
 801daf6:	f1bc 0f00 	cmp.w	ip, #0
 801dafa:	db35      	blt.n	801db68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801dafc:	45e0      	cmp	r8, ip
 801dafe:	dd33      	ble.n	801db68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801db00:	eb03 090e 	add.w	r9, r3, lr
 801db04:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801db08:	f019 0f01 	tst.w	r9, #1
 801db0c:	5d14      	ldrb	r4, [r2, r4]
 801db0e:	bf0c      	ite	eq
 801db10:	f004 040f 	andeq.w	r4, r4, #15
 801db14:	1124      	asrne	r4, r4, #4
 801db16:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801db1a:	b2e4      	uxtb	r4, r4
 801db1c:	f11c 0c01 	adds.w	ip, ip, #1
 801db20:	d427      	bmi.n	801db72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801db22:	45e0      	cmp	r8, ip
 801db24:	dd25      	ble.n	801db72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801db26:	b335      	cbz	r5, 801db76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801db28:	3301      	adds	r3, #1
 801db2a:	449e      	add	lr, r3
 801db2c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801db30:	f01e 0f01 	tst.w	lr, #1
 801db34:	5cd2      	ldrb	r2, [r2, r3]
 801db36:	bf0c      	ite	eq
 801db38:	f002 020f 	andeq.w	r2, r2, #15
 801db3c:	1112      	asrne	r2, r2, #4
 801db3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801db42:	b2d3      	uxtb	r3, r2
 801db44:	2d0f      	cmp	r5, #15
 801db46:	d917      	bls.n	801db78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801db48:	4b3a      	ldr	r3, [pc, #232]	; (801dc34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801db4a:	4a3b      	ldr	r2, [pc, #236]	; (801dc38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 801db4c:	483b      	ldr	r0, [pc, #236]	; (801dc3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 801db4e:	f240 3173 	movw	r1, #883	; 0x373
 801db52:	f000 fc47 	bl	801e3e4 <__assert_func>
 801db56:	2600      	movs	r6, #0
 801db58:	e7b1      	b.n	801dabe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801db5a:	2000      	movs	r0, #0
 801db5c:	4606      	mov	r6, r0
 801db5e:	e7c3      	b.n	801dae8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801db60:	2000      	movs	r0, #0
 801db62:	e7c1      	b.n	801dae8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801db64:	4628      	mov	r0, r5
 801db66:	e7bf      	b.n	801dae8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801db68:	2400      	movs	r4, #0
 801db6a:	e7d7      	b.n	801db1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801db6c:	2300      	movs	r3, #0
 801db6e:	461c      	mov	r4, r3
 801db70:	e7e8      	b.n	801db44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801db72:	2300      	movs	r3, #0
 801db74:	e7e6      	b.n	801db44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801db76:	462b      	mov	r3, r5
 801db78:	2f0f      	cmp	r7, #15
 801db7a:	d8e5      	bhi.n	801db48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801db7c:	b2ad      	uxth	r5, r5
 801db7e:	b2bf      	uxth	r7, r7
 801db80:	fb05 fc07 	mul.w	ip, r5, r7
 801db84:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801db88:	012d      	lsls	r5, r5, #4
 801db8a:	b2bf      	uxth	r7, r7
 801db8c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801db90:	eba5 050c 	sub.w	r5, r5, ip
 801db94:	1bd2      	subs	r2, r2, r7
 801db96:	b2ad      	uxth	r5, r5
 801db98:	b292      	uxth	r2, r2
 801db9a:	4368      	muls	r0, r5
 801db9c:	fb06 0002 	mla	r0, r6, r2, r0
 801dba0:	fb07 0404 	mla	r4, r7, r4, r0
 801dba4:	fb0c 4303 	mla	r3, ip, r3, r4
 801dba8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d039      	beq.n	801dc24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 801dbb0:	4a23      	ldr	r2, [pc, #140]	; (801dc40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c8>)
 801dbb2:	6816      	ldr	r6, [r2, #0]
 801dbb4:	880a      	ldrh	r2, [r1, #0]
 801dbb6:	b298      	uxth	r0, r3
 801dbb8:	1215      	asrs	r5, r2, #8
 801dbba:	43db      	mvns	r3, r3
 801dbbc:	b2db      	uxtb	r3, r3
 801dbbe:	1234      	asrs	r4, r6, #8
 801dbc0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dbc4:	fb15 f503 	smulbb	r5, r5, r3
 801dbc8:	10d7      	asrs	r7, r2, #3
 801dbca:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801dbce:	fb04 5400 	mla	r4, r4, r0, r5
 801dbd2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dbd6:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801dbda:	fb17 f703 	smulbb	r7, r7, r3
 801dbde:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dbe2:	00d2      	lsls	r2, r2, #3
 801dbe4:	fb05 7500 	mla	r5, r5, r0, r7
 801dbe8:	b2d2      	uxtb	r2, r2
 801dbea:	00f6      	lsls	r6, r6, #3
 801dbec:	fb12 f303 	smulbb	r3, r2, r3
 801dbf0:	b2ad      	uxth	r5, r5
 801dbf2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dbf6:	b2a4      	uxth	r4, r4
 801dbf8:	fb06 3000 	mla	r0, r6, r0, r3
 801dbfc:	1c6b      	adds	r3, r5, #1
 801dbfe:	b280      	uxth	r0, r0
 801dc00:	1c62      	adds	r2, r4, #1
 801dc02:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801dc06:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801dc0a:	095b      	lsrs	r3, r3, #5
 801dc0c:	1c42      	adds	r2, r0, #1
 801dc0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801dc12:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801dc16:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801dc1a:	4323      	orrs	r3, r4
 801dc1c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801dc20:	4303      	orrs	r3, r0
 801dc22:	800b      	strh	r3, [r1, #0]
 801dc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc28:	2d0f      	cmp	r5, #15
 801dc2a:	d88d      	bhi.n	801db48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801dc2c:	463b      	mov	r3, r7
 801dc2e:	463c      	mov	r4, r7
 801dc30:	e7a4      	b.n	801db7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801dc32:	bf00      	nop
 801dc34:	08022217 	.word	0x08022217
 801dc38:	08022775 	.word	0x08022775
 801dc3c:	0802229f 	.word	0x0802229f
 801dc40:	2002ee80 	.word	0x2002ee80

0801dc44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc48:	ed2d 8b08 	vpush	{d8-d11}
 801dc4c:	b095      	sub	sp, #84	; 0x54
 801dc4e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801dc52:	9306      	str	r3, [sp, #24]
 801dc54:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801dc58:	9307      	str	r3, [sp, #28]
 801dc5a:	920d      	str	r2, [sp, #52]	; 0x34
 801dc5c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801dc60:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801dc62:	910a      	str	r1, [sp, #40]	; 0x28
 801dc64:	9308      	str	r3, [sp, #32]
 801dc66:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801dc6a:	9013      	str	r0, [sp, #76]	; 0x4c
 801dc6c:	6850      	ldr	r0, [r2, #4]
 801dc6e:	6812      	ldr	r2, [r2, #0]
 801dc70:	fb00 1303 	mla	r3, r0, r3, r1
 801dc74:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801dc78:	9b07      	ldr	r3, [sp, #28]
 801dc7a:	3301      	adds	r3, #1
 801dc7c:	f023 0301 	bic.w	r3, r3, #1
 801dc80:	9309      	str	r3, [sp, #36]	; 0x24
 801dc82:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dc84:	681f      	ldr	r7, [r3, #0]
 801dc86:	eeb0 aa40 	vmov.f32	s20, s0
 801dc8a:	eef0 9a60 	vmov.f32	s19, s1
 801dc8e:	eeb0 9a41 	vmov.f32	s18, s2
 801dc92:	eeb0 8a62 	vmov.f32	s16, s5
 801dc96:	eef0 8a43 	vmov.f32	s17, s6
 801dc9a:	eef0 ba44 	vmov.f32	s23, s8
 801dc9e:	eeb0 ba64 	vmov.f32	s22, s9
 801dca2:	eef0 aa45 	vmov.f32	s21, s10
 801dca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	dc03      	bgt.n	801dcb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801dcac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	f340 8260 	ble.w	801e174 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801dcb4:	9b06      	ldr	r3, [sp, #24]
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	f340 811c 	ble.w	801def4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801dcbc:	1422      	asrs	r2, r4, #16
 801dcbe:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dcc2:	d42d      	bmi.n	801dd20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801dcc4:	9807      	ldr	r0, [sp, #28]
 801dcc6:	1c51      	adds	r1, r2, #1
 801dcc8:	4288      	cmp	r0, r1
 801dcca:	dd2c      	ble.n	801dd26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	db2a      	blt.n	801dd26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801dcd0:	9808      	ldr	r0, [sp, #32]
 801dcd2:	1c59      	adds	r1, r3, #1
 801dcd4:	4288      	cmp	r0, r1
 801dcd6:	dd26      	ble.n	801dd26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801dcd8:	9b06      	ldr	r3, [sp, #24]
 801dcda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dcdc:	3b01      	subs	r3, #1
 801dcde:	fb02 4203 	mla	r2, r2, r3, r4
 801dce2:	1412      	asrs	r2, r2, #16
 801dce4:	d42a      	bmi.n	801dd3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dce6:	9907      	ldr	r1, [sp, #28]
 801dce8:	3201      	adds	r2, #1
 801dcea:	4291      	cmp	r1, r2
 801dcec:	dd26      	ble.n	801dd3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dcee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801dcf0:	fb02 6303 	mla	r3, r2, r3, r6
 801dcf4:	141b      	asrs	r3, r3, #16
 801dcf6:	d421      	bmi.n	801dd3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dcf8:	9a08      	ldr	r2, [sp, #32]
 801dcfa:	3301      	adds	r3, #1
 801dcfc:	429a      	cmp	r2, r3
 801dcfe:	dd1d      	ble.n	801dd3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801dd00:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801dd04:	f8dd a018 	ldr.w	sl, [sp, #24]
 801dd08:	930e      	str	r3, [sp, #56]	; 0x38
 801dd0a:	46d8      	mov	r8, fp
 801dd0c:	f1ba 0f00 	cmp.w	sl, #0
 801dd10:	f300 8164 	bgt.w	801dfdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801dd14:	9b06      	ldr	r3, [sp, #24]
 801dd16:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801dd1a:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 801dd1e:	e0eb      	b.n	801def8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801dd20:	1c51      	adds	r1, r2, #1
 801dd22:	f040 80dd 	bne.w	801dee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801dd26:	9907      	ldr	r1, [sp, #28]
 801dd28:	4291      	cmp	r1, r2
 801dd2a:	f340 80d9 	ble.w	801dee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801dd2e:	1c5a      	adds	r2, r3, #1
 801dd30:	f2c0 80d6 	blt.w	801dee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801dd34:	9a08      	ldr	r2, [sp, #32]
 801dd36:	4293      	cmp	r3, r2
 801dd38:	f280 80d2 	bge.w	801dee0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801dd3c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801dd40:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801dd44:	46d8      	mov	r8, fp
 801dd46:	f1b9 0f00 	cmp.w	r9, #0
 801dd4a:	dde3      	ble.n	801dd14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801dd4c:	1420      	asrs	r0, r4, #16
 801dd4e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dd52:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801dd56:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801dd5a:	f100 8127 	bmi.w	801dfac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801dd5e:	9d07      	ldr	r5, [sp, #28]
 801dd60:	f100 0c01 	add.w	ip, r0, #1
 801dd64:	4565      	cmp	r5, ip
 801dd66:	f340 8123 	ble.w	801dfb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	f2c0 8120 	blt.w	801dfb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801dd70:	9d08      	ldr	r5, [sp, #32]
 801dd72:	f103 0c01 	add.w	ip, r3, #1
 801dd76:	4565      	cmp	r5, ip
 801dd78:	f340 811a 	ble.w	801dfb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801dd7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801dd7e:	fb03 0305 	mla	r3, r3, r5, r0
 801dd82:	0858      	lsrs	r0, r3, #1
 801dd84:	07dd      	lsls	r5, r3, #31
 801dd86:	5c38      	ldrb	r0, [r7, r0]
 801dd88:	bf54      	ite	pl
 801dd8a:	f000 000f 	andpl.w	r0, r0, #15
 801dd8e:	1100      	asrmi	r0, r0, #4
 801dd90:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801dd94:	b2c0      	uxtb	r0, r0
 801dd96:	2a00      	cmp	r2, #0
 801dd98:	f000 80ed 	beq.w	801df76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x332>
 801dd9c:	f103 0e01 	add.w	lr, r3, #1
 801dda0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801dda4:	f01e 0f01 	tst.w	lr, #1
 801dda8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ddac:	bf0c      	ite	eq
 801ddae:	f00c 0c0f 	andeq.w	ip, ip, #15
 801ddb2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ddb6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ddba:	fa5f fc8c 	uxtb.w	ip, ip
 801ddbe:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801ddc2:	b1f9      	cbz	r1, 801de04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801ddc4:	4453      	add	r3, sl
 801ddc6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ddca:	07dd      	lsls	r5, r3, #31
 801ddcc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ddd0:	bf54      	ite	pl
 801ddd2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ddd6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ddda:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ddde:	3301      	adds	r3, #1
 801dde0:	fa5f fc8c 	uxtb.w	ip, ip
 801dde4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801dde8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ddec:	07dd      	lsls	r5, r3, #31
 801ddee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ddf2:	bf54      	ite	pl
 801ddf4:	f00c 030f 	andpl.w	r3, ip, #15
 801ddf8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801ddfc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801de00:	b2db      	uxtb	r3, r3
 801de02:	9310      	str	r3, [sp, #64]	; 0x40
 801de04:	b292      	uxth	r2, r2
 801de06:	b289      	uxth	r1, r1
 801de08:	fb02 f301 	mul.w	r3, r2, r1
 801de0c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801de10:	0112      	lsls	r2, r2, #4
 801de12:	b289      	uxth	r1, r1
 801de14:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801de18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801de1a:	1ad2      	subs	r2, r2, r3
 801de1c:	ebac 0c01 	sub.w	ip, ip, r1
 801de20:	b292      	uxth	r2, r2
 801de22:	436a      	muls	r2, r5
 801de24:	fa1f fc8c 	uxth.w	ip, ip
 801de28:	fb00 200c 	mla	r0, r0, ip, r2
 801de2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801de2e:	fb01 0102 	mla	r1, r1, r2, r0
 801de32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801de34:	fb03 1302 	mla	r3, r3, r2, r1
 801de38:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d046      	beq.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801de40:	4ac7      	ldr	r2, [pc, #796]	; (801e160 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801de42:	49c8      	ldr	r1, [pc, #800]	; (801e164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801de44:	6812      	ldr	r2, [r2, #0]
 801de46:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801de4a:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801de4e:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801de52:	b2d2      	uxtb	r2, r2
 801de54:	2bff      	cmp	r3, #255	; 0xff
 801de56:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801de5a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801de5e:	4615      	mov	r5, r2
 801de60:	f000 809c 	beq.w	801df9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801de64:	f8b8 0000 	ldrh.w	r0, [r8]
 801de68:	b29a      	uxth	r2, r3
 801de6a:	1201      	asrs	r1, r0, #8
 801de6c:	43db      	mvns	r3, r3
 801de6e:	b2db      	uxtb	r3, r3
 801de70:	fb1e fe02 	smulbb	lr, lr, r2
 801de74:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801de78:	fb01 e103 	mla	r1, r1, r3, lr
 801de7c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801de80:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801de84:	fb1c fc02 	smulbb	ip, ip, r2
 801de88:	fb0e cc03 	mla	ip, lr, r3, ip
 801de8c:	00c0      	lsls	r0, r0, #3
 801de8e:	fa1f fc8c 	uxth.w	ip, ip
 801de92:	fb15 f202 	smulbb	r2, r5, r2
 801de96:	b2c0      	uxtb	r0, r0
 801de98:	b289      	uxth	r1, r1
 801de9a:	fb00 2303 	mla	r3, r0, r3, r2
 801de9e:	f10c 0e01 	add.w	lr, ip, #1
 801dea2:	b29b      	uxth	r3, r3
 801dea4:	1c4a      	adds	r2, r1, #1
 801dea6:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801deaa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801deae:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801deb2:	1c5a      	adds	r2, r3, #1
 801deb4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801deb8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801debc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dec0:	ea4c 0101 	orr.w	r1, ip, r1
 801dec4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dec8:	4319      	orrs	r1, r3
 801deca:	f8a8 1000 	strh.w	r1, [r8]
 801dece:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ded0:	441c      	add	r4, r3
 801ded2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ded4:	f108 0802 	add.w	r8, r8, #2
 801ded8:	441e      	add	r6, r3
 801deda:	f109 39ff 	add.w	r9, r9, #4294967295
 801dede:	e732      	b.n	801dd46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801dee0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dee2:	441c      	add	r4, r3
 801dee4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dee6:	441e      	add	r6, r3
 801dee8:	9b06      	ldr	r3, [sp, #24]
 801deea:	3b01      	subs	r3, #1
 801deec:	9306      	str	r3, [sp, #24]
 801deee:	f10b 0b02 	add.w	fp, fp, #2
 801def2:	e6df      	b.n	801dcb4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801def4:	f47f aef0 	bne.w	801dcd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801def8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801defa:	2b00      	cmp	r3, #0
 801defc:	f340 813a 	ble.w	801e174 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801df00:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801df04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df08:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801df0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801df12:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801df16:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801df1a:	eef0 6a48 	vmov.f32	s13, s16
 801df1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801df22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df26:	ee37 8a48 	vsub.f32	s16, s14, s16
 801df2a:	ee16 4a90 	vmov	r4, s13
 801df2e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801df32:	eef0 6a68 	vmov.f32	s13, s17
 801df36:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801df3a:	ee18 2a10 	vmov	r2, s16
 801df3e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801df42:	fb92 f3f3 	sdiv	r3, r2, r3
 801df46:	ee18 2a90 	vmov	r2, s17
 801df4a:	9329      	str	r3, [sp, #164]	; 0xa4
 801df4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df52:	932a      	str	r3, [sp, #168]	; 0xa8
 801df54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801df58:	3b01      	subs	r3, #1
 801df5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df5e:	930a      	str	r3, [sp, #40]	; 0x28
 801df60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df62:	bf08      	it	eq
 801df64:	4613      	moveq	r3, r2
 801df66:	ee16 6a90 	vmov	r6, s13
 801df6a:	9306      	str	r3, [sp, #24]
 801df6c:	eef0 8a67 	vmov.f32	s17, s15
 801df70:	eeb0 8a47 	vmov.f32	s16, s14
 801df74:	e697      	b.n	801dca6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801df76:	2900      	cmp	r1, #0
 801df78:	f43f af44 	beq.w	801de04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801df7c:	4453      	add	r3, sl
 801df7e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801df82:	07db      	lsls	r3, r3, #31
 801df84:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801df88:	bf54      	ite	pl
 801df8a:	f00c 030f 	andpl.w	r3, ip, #15
 801df8e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801df92:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801df96:	b2db      	uxtb	r3, r3
 801df98:	930b      	str	r3, [sp, #44]	; 0x2c
 801df9a:	e733      	b.n	801de04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801df9c:	08d2      	lsrs	r2, r2, #3
 801df9e:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801dfa2:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801dfa6:	f8a8 c000 	strh.w	ip, [r8]
 801dfaa:	e790      	b.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801dfac:	1c45      	adds	r5, r0, #1
 801dfae:	d18e      	bne.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801dfb0:	9d07      	ldr	r5, [sp, #28]
 801dfb2:	4285      	cmp	r5, r0
 801dfb4:	dd8b      	ble.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801dfb6:	1c5d      	adds	r5, r3, #1
 801dfb8:	db89      	blt.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801dfba:	9d08      	ldr	r5, [sp, #32]
 801dfbc:	429d      	cmp	r5, r3
 801dfbe:	dd86      	ble.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801dfc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801dfc4:	9b07      	ldr	r3, [sp, #28]
 801dfc6:	9300      	str	r3, [sp, #0]
 801dfc8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801dfcc:	9501      	str	r5, [sp, #4]
 801dfce:	4653      	mov	r3, sl
 801dfd0:	463a      	mov	r2, r7
 801dfd2:	4641      	mov	r1, r8
 801dfd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dfd6:	f7ff fd4f 	bl	801da78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801dfda:	e778      	b.n	801dece <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801dfdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dfde:	1422      	asrs	r2, r4, #16
 801dfe0:	1433      	asrs	r3, r6, #16
 801dfe2:	fb01 2303 	mla	r3, r1, r3, r2
 801dfe6:	085a      	lsrs	r2, r3, #1
 801dfe8:	07d9      	lsls	r1, r3, #31
 801dfea:	5cba      	ldrb	r2, [r7, r2]
 801dfec:	bf54      	ite	pl
 801dfee:	f002 020f 	andpl.w	r2, r2, #15
 801dff2:	1112      	asrmi	r2, r2, #4
 801dff4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801dff8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801dffc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e000:	b2d2      	uxtb	r2, r2
 801e002:	2800      	cmp	r0, #0
 801e004:	f000 809b 	beq.w	801e13e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fa>
 801e008:	f103 0e01 	add.w	lr, r3, #1
 801e00c:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801e010:	f01e 0f01 	tst.w	lr, #1
 801e014:	5c79      	ldrb	r1, [r7, r1]
 801e016:	bf0c      	ite	eq
 801e018:	f001 010f 	andeq.w	r1, r1, #15
 801e01c:	1109      	asrne	r1, r1, #4
 801e01e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e022:	b2c9      	uxtb	r1, r1
 801e024:	9111      	str	r1, [sp, #68]	; 0x44
 801e026:	f1bc 0f00 	cmp.w	ip, #0
 801e02a:	d018      	beq.n	801e05e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801e02c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e02e:	440b      	add	r3, r1
 801e030:	0859      	lsrs	r1, r3, #1
 801e032:	07dd      	lsls	r5, r3, #31
 801e034:	5c79      	ldrb	r1, [r7, r1]
 801e036:	bf54      	ite	pl
 801e038:	f001 010f 	andpl.w	r1, r1, #15
 801e03c:	1109      	asrmi	r1, r1, #4
 801e03e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e042:	b2c9      	uxtb	r1, r1
 801e044:	3301      	adds	r3, #1
 801e046:	910c      	str	r1, [sp, #48]	; 0x30
 801e048:	0859      	lsrs	r1, r3, #1
 801e04a:	07dd      	lsls	r5, r3, #31
 801e04c:	5c79      	ldrb	r1, [r7, r1]
 801e04e:	bf54      	ite	pl
 801e050:	f001 010f 	andpl.w	r1, r1, #15
 801e054:	1109      	asrmi	r1, r1, #4
 801e056:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e05a:	b2c9      	uxtb	r1, r1
 801e05c:	9112      	str	r1, [sp, #72]	; 0x48
 801e05e:	b280      	uxth	r0, r0
 801e060:	fa1f fc8c 	uxth.w	ip, ip
 801e064:	fb00 f30c 	mul.w	r3, r0, ip
 801e068:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801e06c:	0100      	lsls	r0, r0, #4
 801e06e:	fa1f fc8c 	uxth.w	ip, ip
 801e072:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801e076:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e078:	1ac0      	subs	r0, r0, r3
 801e07a:	eba1 010c 	sub.w	r1, r1, ip
 801e07e:	b280      	uxth	r0, r0
 801e080:	b289      	uxth	r1, r1
 801e082:	4368      	muls	r0, r5
 801e084:	fb02 0201 	mla	r2, r2, r1, r0
 801e088:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e08a:	fb0c 2c01 	mla	ip, ip, r1, r2
 801e08e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e090:	fb03 c302 	mla	r3, r3, r2, ip
 801e094:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e098:	2b00      	cmp	r3, #0
 801e09a:	d047      	beq.n	801e12c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801e09c:	4a30      	ldr	r2, [pc, #192]	; (801e160 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801e09e:	4931      	ldr	r1, [pc, #196]	; (801e164 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801e0a0:	6812      	ldr	r2, [r2, #0]
 801e0a2:	2bff      	cmp	r3, #255	; 0xff
 801e0a4:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801e0a8:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801e0ac:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801e0b0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e0b4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e0b8:	b2d2      	uxtb	r2, r2
 801e0ba:	d055      	beq.n	801e168 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801e0bc:	f8b8 0000 	ldrh.w	r0, [r8]
 801e0c0:	fa1f f983 	uxth.w	r9, r3
 801e0c4:	1201      	asrs	r1, r0, #8
 801e0c6:	43db      	mvns	r3, r3
 801e0c8:	b2db      	uxtb	r3, r3
 801e0ca:	fb1e fe09 	smulbb	lr, lr, r9
 801e0ce:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e0d2:	fb01 e103 	mla	r1, r1, r3, lr
 801e0d6:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801e0da:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e0de:	fb1c fc09 	smulbb	ip, ip, r9
 801e0e2:	fb0e cc03 	mla	ip, lr, r3, ip
 801e0e6:	00c0      	lsls	r0, r0, #3
 801e0e8:	fa1f fc8c 	uxth.w	ip, ip
 801e0ec:	b2c0      	uxtb	r0, r0
 801e0ee:	fb12 f209 	smulbb	r2, r2, r9
 801e0f2:	b289      	uxth	r1, r1
 801e0f4:	fb00 2203 	mla	r2, r0, r3, r2
 801e0f8:	f10c 0e01 	add.w	lr, ip, #1
 801e0fc:	b292      	uxth	r2, r2
 801e0fe:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e102:	f101 0e01 	add.w	lr, r1, #1
 801e106:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e10a:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801e10e:	1c53      	adds	r3, r2, #1
 801e110:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e114:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e118:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e11c:	ea4c 0c01 	orr.w	ip, ip, r1
 801e120:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e124:	ea4c 0c02 	orr.w	ip, ip, r2
 801e128:	f8a8 c000 	strh.w	ip, [r8]
 801e12c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e12e:	441c      	add	r4, r3
 801e130:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e132:	f108 0802 	add.w	r8, r8, #2
 801e136:	441e      	add	r6, r3
 801e138:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e13c:	e5e6      	b.n	801dd0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e13e:	f1bc 0f00 	cmp.w	ip, #0
 801e142:	d08c      	beq.n	801e05e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801e144:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e146:	440b      	add	r3, r1
 801e148:	0859      	lsrs	r1, r3, #1
 801e14a:	07db      	lsls	r3, r3, #31
 801e14c:	5c79      	ldrb	r1, [r7, r1]
 801e14e:	bf54      	ite	pl
 801e150:	f001 010f 	andpl.w	r1, r1, #15
 801e154:	1109      	asrmi	r1, r1, #4
 801e156:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e15a:	b2c9      	uxtb	r1, r1
 801e15c:	910c      	str	r1, [sp, #48]	; 0x30
 801e15e:	e77e      	b.n	801e05e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801e160:	2002ee80 	.word	0x2002ee80
 801e164:	0007fff8 	.word	0x0007fff8
 801e168:	08d2      	lsrs	r2, r2, #3
 801e16a:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801e16e:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801e172:	e7d9      	b.n	801e128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e4>
 801e174:	b015      	add	sp, #84	; 0x54
 801e176:	ecbd 8b08 	vpop	{d8-d11}
 801e17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e17e:	bf00      	nop

0801e180 <CRC_Lock>:
 801e180:	b530      	push	{r4, r5, lr}
 801e182:	4a1d      	ldr	r2, [pc, #116]	; (801e1f8 <CRC_Lock+0x78>)
 801e184:	6813      	ldr	r3, [r2, #0]
 801e186:	f023 0301 	bic.w	r3, r3, #1
 801e18a:	6013      	str	r3, [r2, #0]
 801e18c:	4b1b      	ldr	r3, [pc, #108]	; (801e1fc <CRC_Lock+0x7c>)
 801e18e:	681a      	ldr	r2, [r3, #0]
 801e190:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801e194:	4022      	ands	r2, r4
 801e196:	f24c 2540 	movw	r5, #49728	; 0xc240
 801e19a:	42aa      	cmp	r2, r5
 801e19c:	d005      	beq.n	801e1aa <CRC_Lock+0x2a>
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	f24c 2270 	movw	r2, #49776	; 0xc270
 801e1a4:	4023      	ands	r3, r4
 801e1a6:	4293      	cmp	r3, r2
 801e1a8:	d11d      	bne.n	801e1e6 <CRC_Lock+0x66>
 801e1aa:	4b15      	ldr	r3, [pc, #84]	; (801e200 <CRC_Lock+0x80>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	b9d3      	cbnz	r3, 801e1e6 <CRC_Lock+0x66>
 801e1b0:	4a14      	ldr	r2, [pc, #80]	; (801e204 <CRC_Lock+0x84>)
 801e1b2:	6813      	ldr	r3, [r2, #0]
 801e1b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e1b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e1bc:	d006      	beq.n	801e1cc <CRC_Lock+0x4c>
 801e1be:	6813      	ldr	r3, [r2, #0]
 801e1c0:	f240 4283 	movw	r2, #1155	; 0x483
 801e1c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e1c8:	4293      	cmp	r3, r2
 801e1ca:	d10c      	bne.n	801e1e6 <CRC_Lock+0x66>
 801e1cc:	4b0e      	ldr	r3, [pc, #56]	; (801e208 <CRC_Lock+0x88>)
 801e1ce:	2201      	movs	r2, #1
 801e1d0:	601a      	str	r2, [r3, #0]
 801e1d2:	681a      	ldr	r2, [r3, #0]
 801e1d4:	2a00      	cmp	r2, #0
 801e1d6:	d1fc      	bne.n	801e1d2 <CRC_Lock+0x52>
 801e1d8:	4b0c      	ldr	r3, [pc, #48]	; (801e20c <CRC_Lock+0x8c>)
 801e1da:	6018      	str	r0, [r3, #0]
 801e1dc:	6818      	ldr	r0, [r3, #0]
 801e1de:	1a43      	subs	r3, r0, r1
 801e1e0:	4258      	negs	r0, r3
 801e1e2:	4158      	adcs	r0, r3
 801e1e4:	bd30      	pop	{r4, r5, pc}
 801e1e6:	4b0a      	ldr	r3, [pc, #40]	; (801e210 <CRC_Lock+0x90>)
 801e1e8:	2201      	movs	r2, #1
 801e1ea:	601a      	str	r2, [r3, #0]
 801e1ec:	681a      	ldr	r2, [r3, #0]
 801e1ee:	2a00      	cmp	r2, #0
 801e1f0:	d1fc      	bne.n	801e1ec <CRC_Lock+0x6c>
 801e1f2:	4b08      	ldr	r3, [pc, #32]	; (801e214 <CRC_Lock+0x94>)
 801e1f4:	e7f1      	b.n	801e1da <CRC_Lock+0x5a>
 801e1f6:	bf00      	nop
 801e1f8:	e0002000 	.word	0xe0002000
 801e1fc:	e000ed00 	.word	0xe000ed00
 801e200:	e0042000 	.word	0xe0042000
 801e204:	5c001000 	.word	0x5c001000
 801e208:	58024c08 	.word	0x58024c08
 801e20c:	58024c00 	.word	0x58024c00
 801e210:	40023008 	.word	0x40023008
 801e214:	40023000 	.word	0x40023000

0801e218 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801e218:	6101      	str	r1, [r0, #16]
 801e21a:	4770      	bx	lr

0801e21c <_ZN8touchgfx8Gestures4tickEv>:
 801e21c:	7b83      	ldrb	r3, [r0, #14]
 801e21e:	b14b      	cbz	r3, 801e234 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801e220:	8903      	ldrh	r3, [r0, #8]
 801e222:	3301      	adds	r3, #1
 801e224:	b29b      	uxth	r3, r3
 801e226:	2b07      	cmp	r3, #7
 801e228:	8103      	strh	r3, [r0, #8]
 801e22a:	bf81      	itttt	hi
 801e22c:	2300      	movhi	r3, #0
 801e22e:	8143      	strhhi	r3, [r0, #10]
 801e230:	8183      	strhhi	r3, [r0, #12]
 801e232:	7383      	strbhi	r3, [r0, #14]
 801e234:	4770      	bx	lr
	...

0801e238 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801e238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e23c:	4604      	mov	r4, r0
 801e23e:	8880      	ldrh	r0, [r0, #4]
 801e240:	f8ad 0006 	strh.w	r0, [sp, #6]
 801e244:	4698      	mov	r8, r3
 801e246:	eba8 0000 	sub.w	r0, r8, r0
 801e24a:	4b1c      	ldr	r3, [pc, #112]	; (801e2bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801e24c:	9300      	str	r3, [sp, #0]
 801e24e:	b280      	uxth	r0, r0
 801e250:	2300      	movs	r3, #0
 801e252:	f88d 3004 	strb.w	r3, [sp, #4]
 801e256:	b203      	sxth	r3, r0
 801e258:	2b00      	cmp	r3, #0
 801e25a:	bfb8      	it	lt
 801e25c:	4240      	neglt	r0, r0
 801e25e:	4617      	mov	r7, r2
 801e260:	8aa2      	ldrh	r2, [r4, #20]
 801e262:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801e266:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e26a:	bfb8      	it	lt
 801e26c:	b203      	sxthlt	r3, r0
 801e26e:	460e      	mov	r6, r1
 801e270:	4293      	cmp	r3, r2
 801e272:	88e1      	ldrh	r1, [r4, #6]
 801e274:	f8ad 1008 	strh.w	r1, [sp, #8]
 801e278:	f8ad 500c 	strh.w	r5, [sp, #12]
 801e27c:	dc08      	bgt.n	801e290 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801e27e:	1a69      	subs	r1, r5, r1
 801e280:	b289      	uxth	r1, r1
 801e282:	b20b      	sxth	r3, r1
 801e284:	2b00      	cmp	r3, #0
 801e286:	bfbc      	itt	lt
 801e288:	4249      	neglt	r1, r1
 801e28a:	b20b      	sxthlt	r3, r1
 801e28c:	429a      	cmp	r2, r3
 801e28e:	da13      	bge.n	801e2b8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801e290:	6920      	ldr	r0, [r4, #16]
 801e292:	6803      	ldr	r3, [r0, #0]
 801e294:	4669      	mov	r1, sp
 801e296:	685b      	ldr	r3, [r3, #4]
 801e298:	4798      	blx	r3
 801e29a:	eba8 0606 	sub.w	r6, r8, r6
 801e29e:	2300      	movs	r3, #0
 801e2a0:	1bef      	subs	r7, r5, r7
 801e2a2:	2001      	movs	r0, #1
 801e2a4:	8123      	strh	r3, [r4, #8]
 801e2a6:	8166      	strh	r6, [r4, #10]
 801e2a8:	81a7      	strh	r7, [r4, #12]
 801e2aa:	f8a4 8004 	strh.w	r8, [r4, #4]
 801e2ae:	80e5      	strh	r5, [r4, #6]
 801e2b0:	73a0      	strb	r0, [r4, #14]
 801e2b2:	b004      	add	sp, #16
 801e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2b8:	2000      	movs	r0, #0
 801e2ba:	e7fa      	b.n	801e2b2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801e2bc:	08021554 	.word	0x08021554

0801e2c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801e2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2c2:	461e      	mov	r6, r3
 801e2c4:	1e4b      	subs	r3, r1, #1
 801e2c6:	2b01      	cmp	r3, #1
 801e2c8:	b085      	sub	sp, #20
 801e2ca:	4604      	mov	r4, r0
 801e2cc:	460d      	mov	r5, r1
 801e2ce:	4617      	mov	r7, r2
 801e2d0:	d84b      	bhi.n	801e36a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801e2d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e2d6:	1cd3      	adds	r3, r2, #3
 801e2d8:	b29b      	uxth	r3, r3
 801e2da:	2b06      	cmp	r3, #6
 801e2dc:	d916      	bls.n	801e30c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801e2de:	f8df c098 	ldr.w	ip, [pc, #152]	; 801e378 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801e2e2:	f8cd c004 	str.w	ip, [sp, #4]
 801e2e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e2ea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e2ee:	6900      	ldr	r0, [r0, #16]
 801e2f0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e2f4:	f04f 0c00 	mov.w	ip, #0
 801e2f8:	f88d c008 	strb.w	ip, [sp, #8]
 801e2fc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e300:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e304:	6803      	ldr	r3, [r0, #0]
 801e306:	a901      	add	r1, sp, #4
 801e308:	689b      	ldr	r3, [r3, #8]
 801e30a:	4798      	blx	r3
 801e30c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e310:	1cd3      	adds	r3, r2, #3
 801e312:	b29b      	uxth	r3, r3
 801e314:	2b06      	cmp	r3, #6
 801e316:	d916      	bls.n	801e346 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e318:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801e378 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801e31c:	f8cd c004 	str.w	ip, [sp, #4]
 801e320:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801e324:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e328:	6920      	ldr	r0, [r4, #16]
 801e32a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801e32e:	f04f 0c01 	mov.w	ip, #1
 801e332:	f88d c008 	strb.w	ip, [sp, #8]
 801e336:	f8ad 200a 	strh.w	r2, [sp, #10]
 801e33a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e33e:	6803      	ldr	r3, [r0, #0]
 801e340:	a901      	add	r1, sp, #4
 801e342:	689b      	ldr	r3, [r3, #8]
 801e344:	4798      	blx	r3
 801e346:	4b0b      	ldr	r3, [pc, #44]	; (801e374 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 801e348:	9301      	str	r3, [sp, #4]
 801e34a:	6920      	ldr	r0, [r4, #16]
 801e34c:	f88d 5008 	strb.w	r5, [sp, #8]
 801e350:	2300      	movs	r3, #0
 801e352:	f8ad 700a 	strh.w	r7, [sp, #10]
 801e356:	f8ad 600c 	strh.w	r6, [sp, #12]
 801e35a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e35e:	6803      	ldr	r3, [r0, #0]
 801e360:	a901      	add	r1, sp, #4
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	4798      	blx	r3
 801e366:	b005      	add	sp, #20
 801e368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e36a:	2900      	cmp	r1, #0
 801e36c:	d1eb      	bne.n	801e346 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e36e:	80a2      	strh	r2, [r4, #4]
 801e370:	80c6      	strh	r6, [r0, #6]
 801e372:	e7e8      	b.n	801e346 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801e374:	08021540 	.word	0x08021540
 801e378:	08021568 	.word	0x08021568

0801e37c <__aeabi_atexit>:
 801e37c:	460b      	mov	r3, r1
 801e37e:	4601      	mov	r1, r0
 801e380:	4618      	mov	r0, r3
 801e382:	f000 b853 	b.w	801e42c <__cxa_atexit>

0801e386 <__cxa_pure_virtual>:
 801e386:	b508      	push	{r3, lr}
 801e388:	f000 f820 	bl	801e3cc <_ZSt9terminatev>

0801e38c <_ZdlPvj>:
 801e38c:	f000 b80f 	b.w	801e3ae <_ZdlPv>

0801e390 <__cxa_guard_acquire>:
 801e390:	6803      	ldr	r3, [r0, #0]
 801e392:	07db      	lsls	r3, r3, #31
 801e394:	d406      	bmi.n	801e3a4 <__cxa_guard_acquire+0x14>
 801e396:	7843      	ldrb	r3, [r0, #1]
 801e398:	b103      	cbz	r3, 801e39c <__cxa_guard_acquire+0xc>
 801e39a:	deff      	udf	#255	; 0xff
 801e39c:	2301      	movs	r3, #1
 801e39e:	7043      	strb	r3, [r0, #1]
 801e3a0:	4618      	mov	r0, r3
 801e3a2:	4770      	bx	lr
 801e3a4:	2000      	movs	r0, #0
 801e3a6:	4770      	bx	lr

0801e3a8 <__cxa_guard_release>:
 801e3a8:	2301      	movs	r3, #1
 801e3aa:	6003      	str	r3, [r0, #0]
 801e3ac:	4770      	bx	lr

0801e3ae <_ZdlPv>:
 801e3ae:	f000 b88f 	b.w	801e4d0 <free>

0801e3b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e3b2:	b508      	push	{r3, lr}
 801e3b4:	4780      	blx	r0
 801e3b6:	f000 f80e 	bl	801e3d6 <abort>
	...

0801e3bc <_ZSt13get_terminatev>:
 801e3bc:	4b02      	ldr	r3, [pc, #8]	; (801e3c8 <_ZSt13get_terminatev+0xc>)
 801e3be:	6818      	ldr	r0, [r3, #0]
 801e3c0:	f3bf 8f5b 	dmb	ish
 801e3c4:	4770      	bx	lr
 801e3c6:	bf00      	nop
 801e3c8:	20000108 	.word	0x20000108

0801e3cc <_ZSt9terminatev>:
 801e3cc:	b508      	push	{r3, lr}
 801e3ce:	f7ff fff5 	bl	801e3bc <_ZSt13get_terminatev>
 801e3d2:	f7ff ffee 	bl	801e3b2 <_ZN10__cxxabiv111__terminateEPFvvE>

0801e3d6 <abort>:
 801e3d6:	b508      	push	{r3, lr}
 801e3d8:	2006      	movs	r0, #6
 801e3da:	f000 fc3d 	bl	801ec58 <raise>
 801e3de:	2001      	movs	r0, #1
 801e3e0:	f7e3 f8ae 	bl	8001540 <_exit>

0801e3e4 <__assert_func>:
 801e3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e3e6:	461c      	mov	r4, r3
 801e3e8:	4b09      	ldr	r3, [pc, #36]	; (801e410 <__assert_func+0x2c>)
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	4605      	mov	r5, r0
 801e3ee:	68d8      	ldr	r0, [r3, #12]
 801e3f0:	b152      	cbz	r2, 801e408 <__assert_func+0x24>
 801e3f2:	4b08      	ldr	r3, [pc, #32]	; (801e414 <__assert_func+0x30>)
 801e3f4:	9100      	str	r1, [sp, #0]
 801e3f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801e3fa:	4907      	ldr	r1, [pc, #28]	; (801e418 <__assert_func+0x34>)
 801e3fc:	462b      	mov	r3, r5
 801e3fe:	4622      	mov	r2, r4
 801e400:	f000 f828 	bl	801e454 <fiprintf>
 801e404:	f7ff ffe7 	bl	801e3d6 <abort>
 801e408:	4b04      	ldr	r3, [pc, #16]	; (801e41c <__assert_func+0x38>)
 801e40a:	461a      	mov	r2, r3
 801e40c:	e7f2      	b.n	801e3f4 <__assert_func+0x10>
 801e40e:	bf00      	nop
 801e410:	2000010c 	.word	0x2000010c
 801e414:	080229b0 	.word	0x080229b0
 801e418:	080229bd 	.word	0x080229bd
 801e41c:	080229eb 	.word	0x080229eb

0801e420 <atexit>:
 801e420:	2300      	movs	r3, #0
 801e422:	4601      	mov	r1, r0
 801e424:	461a      	mov	r2, r3
 801e426:	4618      	mov	r0, r3
 801e428:	f000 bcf2 	b.w	801ee10 <__register_exitproc>

0801e42c <__cxa_atexit>:
 801e42c:	b510      	push	{r4, lr}
 801e42e:	4c05      	ldr	r4, [pc, #20]	; (801e444 <__cxa_atexit+0x18>)
 801e430:	4613      	mov	r3, r2
 801e432:	b12c      	cbz	r4, 801e440 <__cxa_atexit+0x14>
 801e434:	460a      	mov	r2, r1
 801e436:	4601      	mov	r1, r0
 801e438:	2002      	movs	r0, #2
 801e43a:	f000 fce9 	bl	801ee10 <__register_exitproc>
 801e43e:	bd10      	pop	{r4, pc}
 801e440:	4620      	mov	r0, r4
 801e442:	e7fc      	b.n	801e43e <__cxa_atexit+0x12>
 801e444:	0801ee11 	.word	0x0801ee11

0801e448 <__errno>:
 801e448:	4b01      	ldr	r3, [pc, #4]	; (801e450 <__errno+0x8>)
 801e44a:	6818      	ldr	r0, [r3, #0]
 801e44c:	4770      	bx	lr
 801e44e:	bf00      	nop
 801e450:	2000010c 	.word	0x2000010c

0801e454 <fiprintf>:
 801e454:	b40e      	push	{r1, r2, r3}
 801e456:	b503      	push	{r0, r1, lr}
 801e458:	4601      	mov	r1, r0
 801e45a:	ab03      	add	r3, sp, #12
 801e45c:	4805      	ldr	r0, [pc, #20]	; (801e474 <fiprintf+0x20>)
 801e45e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e462:	6800      	ldr	r0, [r0, #0]
 801e464:	9301      	str	r3, [sp, #4]
 801e466:	f000 f921 	bl	801e6ac <_vfiprintf_r>
 801e46a:	b002      	add	sp, #8
 801e46c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e470:	b003      	add	sp, #12
 801e472:	4770      	bx	lr
 801e474:	2000010c 	.word	0x2000010c

0801e478 <__libc_init_array>:
 801e478:	b570      	push	{r4, r5, r6, lr}
 801e47a:	4e0d      	ldr	r6, [pc, #52]	; (801e4b0 <__libc_init_array+0x38>)
 801e47c:	4c0d      	ldr	r4, [pc, #52]	; (801e4b4 <__libc_init_array+0x3c>)
 801e47e:	1ba4      	subs	r4, r4, r6
 801e480:	10a4      	asrs	r4, r4, #2
 801e482:	2500      	movs	r5, #0
 801e484:	42a5      	cmp	r5, r4
 801e486:	d109      	bne.n	801e49c <__libc_init_array+0x24>
 801e488:	4e0b      	ldr	r6, [pc, #44]	; (801e4b8 <__libc_init_array+0x40>)
 801e48a:	4c0c      	ldr	r4, [pc, #48]	; (801e4bc <__libc_init_array+0x44>)
 801e48c:	f000 ffb0 	bl	801f3f0 <_init>
 801e490:	1ba4      	subs	r4, r4, r6
 801e492:	10a4      	asrs	r4, r4, #2
 801e494:	2500      	movs	r5, #0
 801e496:	42a5      	cmp	r5, r4
 801e498:	d105      	bne.n	801e4a6 <__libc_init_array+0x2e>
 801e49a:	bd70      	pop	{r4, r5, r6, pc}
 801e49c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e4a0:	4798      	blx	r3
 801e4a2:	3501      	adds	r5, #1
 801e4a4:	e7ee      	b.n	801e484 <__libc_init_array+0xc>
 801e4a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e4aa:	4798      	blx	r3
 801e4ac:	3501      	adds	r5, #1
 801e4ae:	e7f2      	b.n	801e496 <__libc_init_array+0x1e>
 801e4b0:	08053db0 	.word	0x08053db0
 801e4b4:	08053db0 	.word	0x08053db0
 801e4b8:	08053db0 	.word	0x08053db0
 801e4bc:	08053dc4 	.word	0x08053dc4

0801e4c0 <malloc>:
 801e4c0:	4b02      	ldr	r3, [pc, #8]	; (801e4cc <malloc+0xc>)
 801e4c2:	4601      	mov	r1, r0
 801e4c4:	6818      	ldr	r0, [r3, #0]
 801e4c6:	f000 b86d 	b.w	801e5a4 <_malloc_r>
 801e4ca:	bf00      	nop
 801e4cc:	2000010c 	.word	0x2000010c

0801e4d0 <free>:
 801e4d0:	4b02      	ldr	r3, [pc, #8]	; (801e4dc <free+0xc>)
 801e4d2:	4601      	mov	r1, r0
 801e4d4:	6818      	ldr	r0, [r3, #0]
 801e4d6:	f000 b817 	b.w	801e508 <_free_r>
 801e4da:	bf00      	nop
 801e4dc:	2000010c 	.word	0x2000010c

0801e4e0 <memcpy>:
 801e4e0:	b510      	push	{r4, lr}
 801e4e2:	1e43      	subs	r3, r0, #1
 801e4e4:	440a      	add	r2, r1
 801e4e6:	4291      	cmp	r1, r2
 801e4e8:	d100      	bne.n	801e4ec <memcpy+0xc>
 801e4ea:	bd10      	pop	{r4, pc}
 801e4ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e4f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e4f4:	e7f7      	b.n	801e4e6 <memcpy+0x6>

0801e4f6 <memset>:
 801e4f6:	4402      	add	r2, r0
 801e4f8:	4603      	mov	r3, r0
 801e4fa:	4293      	cmp	r3, r2
 801e4fc:	d100      	bne.n	801e500 <memset+0xa>
 801e4fe:	4770      	bx	lr
 801e500:	f803 1b01 	strb.w	r1, [r3], #1
 801e504:	e7f9      	b.n	801e4fa <memset+0x4>
	...

0801e508 <_free_r>:
 801e508:	b538      	push	{r3, r4, r5, lr}
 801e50a:	4605      	mov	r5, r0
 801e50c:	2900      	cmp	r1, #0
 801e50e:	d045      	beq.n	801e59c <_free_r+0x94>
 801e510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e514:	1f0c      	subs	r4, r1, #4
 801e516:	2b00      	cmp	r3, #0
 801e518:	bfb8      	it	lt
 801e51a:	18e4      	addlt	r4, r4, r3
 801e51c:	f000 feba 	bl	801f294 <__malloc_lock>
 801e520:	4a1f      	ldr	r2, [pc, #124]	; (801e5a0 <_free_r+0x98>)
 801e522:	6813      	ldr	r3, [r2, #0]
 801e524:	4610      	mov	r0, r2
 801e526:	b933      	cbnz	r3, 801e536 <_free_r+0x2e>
 801e528:	6063      	str	r3, [r4, #4]
 801e52a:	6014      	str	r4, [r2, #0]
 801e52c:	4628      	mov	r0, r5
 801e52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e532:	f000 beb0 	b.w	801f296 <__malloc_unlock>
 801e536:	42a3      	cmp	r3, r4
 801e538:	d90c      	bls.n	801e554 <_free_r+0x4c>
 801e53a:	6821      	ldr	r1, [r4, #0]
 801e53c:	1862      	adds	r2, r4, r1
 801e53e:	4293      	cmp	r3, r2
 801e540:	bf04      	itt	eq
 801e542:	681a      	ldreq	r2, [r3, #0]
 801e544:	685b      	ldreq	r3, [r3, #4]
 801e546:	6063      	str	r3, [r4, #4]
 801e548:	bf04      	itt	eq
 801e54a:	1852      	addeq	r2, r2, r1
 801e54c:	6022      	streq	r2, [r4, #0]
 801e54e:	6004      	str	r4, [r0, #0]
 801e550:	e7ec      	b.n	801e52c <_free_r+0x24>
 801e552:	4613      	mov	r3, r2
 801e554:	685a      	ldr	r2, [r3, #4]
 801e556:	b10a      	cbz	r2, 801e55c <_free_r+0x54>
 801e558:	42a2      	cmp	r2, r4
 801e55a:	d9fa      	bls.n	801e552 <_free_r+0x4a>
 801e55c:	6819      	ldr	r1, [r3, #0]
 801e55e:	1858      	adds	r0, r3, r1
 801e560:	42a0      	cmp	r0, r4
 801e562:	d10b      	bne.n	801e57c <_free_r+0x74>
 801e564:	6820      	ldr	r0, [r4, #0]
 801e566:	4401      	add	r1, r0
 801e568:	1858      	adds	r0, r3, r1
 801e56a:	4282      	cmp	r2, r0
 801e56c:	6019      	str	r1, [r3, #0]
 801e56e:	d1dd      	bne.n	801e52c <_free_r+0x24>
 801e570:	6810      	ldr	r0, [r2, #0]
 801e572:	6852      	ldr	r2, [r2, #4]
 801e574:	605a      	str	r2, [r3, #4]
 801e576:	4401      	add	r1, r0
 801e578:	6019      	str	r1, [r3, #0]
 801e57a:	e7d7      	b.n	801e52c <_free_r+0x24>
 801e57c:	d902      	bls.n	801e584 <_free_r+0x7c>
 801e57e:	230c      	movs	r3, #12
 801e580:	602b      	str	r3, [r5, #0]
 801e582:	e7d3      	b.n	801e52c <_free_r+0x24>
 801e584:	6820      	ldr	r0, [r4, #0]
 801e586:	1821      	adds	r1, r4, r0
 801e588:	428a      	cmp	r2, r1
 801e58a:	bf04      	itt	eq
 801e58c:	6811      	ldreq	r1, [r2, #0]
 801e58e:	6852      	ldreq	r2, [r2, #4]
 801e590:	6062      	str	r2, [r4, #4]
 801e592:	bf04      	itt	eq
 801e594:	1809      	addeq	r1, r1, r0
 801e596:	6021      	streq	r1, [r4, #0]
 801e598:	605c      	str	r4, [r3, #4]
 801e59a:	e7c7      	b.n	801e52c <_free_r+0x24>
 801e59c:	bd38      	pop	{r3, r4, r5, pc}
 801e59e:	bf00      	nop
 801e5a0:	2002ef94 	.word	0x2002ef94

0801e5a4 <_malloc_r>:
 801e5a4:	b570      	push	{r4, r5, r6, lr}
 801e5a6:	1ccd      	adds	r5, r1, #3
 801e5a8:	f025 0503 	bic.w	r5, r5, #3
 801e5ac:	3508      	adds	r5, #8
 801e5ae:	2d0c      	cmp	r5, #12
 801e5b0:	bf38      	it	cc
 801e5b2:	250c      	movcc	r5, #12
 801e5b4:	2d00      	cmp	r5, #0
 801e5b6:	4606      	mov	r6, r0
 801e5b8:	db01      	blt.n	801e5be <_malloc_r+0x1a>
 801e5ba:	42a9      	cmp	r1, r5
 801e5bc:	d903      	bls.n	801e5c6 <_malloc_r+0x22>
 801e5be:	230c      	movs	r3, #12
 801e5c0:	6033      	str	r3, [r6, #0]
 801e5c2:	2000      	movs	r0, #0
 801e5c4:	bd70      	pop	{r4, r5, r6, pc}
 801e5c6:	f000 fe65 	bl	801f294 <__malloc_lock>
 801e5ca:	4a21      	ldr	r2, [pc, #132]	; (801e650 <_malloc_r+0xac>)
 801e5cc:	6814      	ldr	r4, [r2, #0]
 801e5ce:	4621      	mov	r1, r4
 801e5d0:	b991      	cbnz	r1, 801e5f8 <_malloc_r+0x54>
 801e5d2:	4c20      	ldr	r4, [pc, #128]	; (801e654 <_malloc_r+0xb0>)
 801e5d4:	6823      	ldr	r3, [r4, #0]
 801e5d6:	b91b      	cbnz	r3, 801e5e0 <_malloc_r+0x3c>
 801e5d8:	4630      	mov	r0, r6
 801e5da:	f000 fb05 	bl	801ebe8 <_sbrk_r>
 801e5de:	6020      	str	r0, [r4, #0]
 801e5e0:	4629      	mov	r1, r5
 801e5e2:	4630      	mov	r0, r6
 801e5e4:	f000 fb00 	bl	801ebe8 <_sbrk_r>
 801e5e8:	1c43      	adds	r3, r0, #1
 801e5ea:	d124      	bne.n	801e636 <_malloc_r+0x92>
 801e5ec:	230c      	movs	r3, #12
 801e5ee:	6033      	str	r3, [r6, #0]
 801e5f0:	4630      	mov	r0, r6
 801e5f2:	f000 fe50 	bl	801f296 <__malloc_unlock>
 801e5f6:	e7e4      	b.n	801e5c2 <_malloc_r+0x1e>
 801e5f8:	680b      	ldr	r3, [r1, #0]
 801e5fa:	1b5b      	subs	r3, r3, r5
 801e5fc:	d418      	bmi.n	801e630 <_malloc_r+0x8c>
 801e5fe:	2b0b      	cmp	r3, #11
 801e600:	d90f      	bls.n	801e622 <_malloc_r+0x7e>
 801e602:	600b      	str	r3, [r1, #0]
 801e604:	50cd      	str	r5, [r1, r3]
 801e606:	18cc      	adds	r4, r1, r3
 801e608:	4630      	mov	r0, r6
 801e60a:	f000 fe44 	bl	801f296 <__malloc_unlock>
 801e60e:	f104 000b 	add.w	r0, r4, #11
 801e612:	1d23      	adds	r3, r4, #4
 801e614:	f020 0007 	bic.w	r0, r0, #7
 801e618:	1ac3      	subs	r3, r0, r3
 801e61a:	d0d3      	beq.n	801e5c4 <_malloc_r+0x20>
 801e61c:	425a      	negs	r2, r3
 801e61e:	50e2      	str	r2, [r4, r3]
 801e620:	e7d0      	b.n	801e5c4 <_malloc_r+0x20>
 801e622:	428c      	cmp	r4, r1
 801e624:	684b      	ldr	r3, [r1, #4]
 801e626:	bf16      	itet	ne
 801e628:	6063      	strne	r3, [r4, #4]
 801e62a:	6013      	streq	r3, [r2, #0]
 801e62c:	460c      	movne	r4, r1
 801e62e:	e7eb      	b.n	801e608 <_malloc_r+0x64>
 801e630:	460c      	mov	r4, r1
 801e632:	6849      	ldr	r1, [r1, #4]
 801e634:	e7cc      	b.n	801e5d0 <_malloc_r+0x2c>
 801e636:	1cc4      	adds	r4, r0, #3
 801e638:	f024 0403 	bic.w	r4, r4, #3
 801e63c:	42a0      	cmp	r0, r4
 801e63e:	d005      	beq.n	801e64c <_malloc_r+0xa8>
 801e640:	1a21      	subs	r1, r4, r0
 801e642:	4630      	mov	r0, r6
 801e644:	f000 fad0 	bl	801ebe8 <_sbrk_r>
 801e648:	3001      	adds	r0, #1
 801e64a:	d0cf      	beq.n	801e5ec <_malloc_r+0x48>
 801e64c:	6025      	str	r5, [r4, #0]
 801e64e:	e7db      	b.n	801e608 <_malloc_r+0x64>
 801e650:	2002ef94 	.word	0x2002ef94
 801e654:	2002ef98 	.word	0x2002ef98

0801e658 <__sfputc_r>:
 801e658:	6893      	ldr	r3, [r2, #8]
 801e65a:	3b01      	subs	r3, #1
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	b410      	push	{r4}
 801e660:	6093      	str	r3, [r2, #8]
 801e662:	da08      	bge.n	801e676 <__sfputc_r+0x1e>
 801e664:	6994      	ldr	r4, [r2, #24]
 801e666:	42a3      	cmp	r3, r4
 801e668:	db01      	blt.n	801e66e <__sfputc_r+0x16>
 801e66a:	290a      	cmp	r1, #10
 801e66c:	d103      	bne.n	801e676 <__sfputc_r+0x1e>
 801e66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e672:	f000 bb0d 	b.w	801ec90 <__swbuf_r>
 801e676:	6813      	ldr	r3, [r2, #0]
 801e678:	1c58      	adds	r0, r3, #1
 801e67a:	6010      	str	r0, [r2, #0]
 801e67c:	7019      	strb	r1, [r3, #0]
 801e67e:	4608      	mov	r0, r1
 801e680:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e684:	4770      	bx	lr

0801e686 <__sfputs_r>:
 801e686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e688:	4606      	mov	r6, r0
 801e68a:	460f      	mov	r7, r1
 801e68c:	4614      	mov	r4, r2
 801e68e:	18d5      	adds	r5, r2, r3
 801e690:	42ac      	cmp	r4, r5
 801e692:	d101      	bne.n	801e698 <__sfputs_r+0x12>
 801e694:	2000      	movs	r0, #0
 801e696:	e007      	b.n	801e6a8 <__sfputs_r+0x22>
 801e698:	463a      	mov	r2, r7
 801e69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e69e:	4630      	mov	r0, r6
 801e6a0:	f7ff ffda 	bl	801e658 <__sfputc_r>
 801e6a4:	1c43      	adds	r3, r0, #1
 801e6a6:	d1f3      	bne.n	801e690 <__sfputs_r+0xa>
 801e6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e6ac <_vfiprintf_r>:
 801e6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6b0:	460c      	mov	r4, r1
 801e6b2:	b09d      	sub	sp, #116	; 0x74
 801e6b4:	4617      	mov	r7, r2
 801e6b6:	461d      	mov	r5, r3
 801e6b8:	4606      	mov	r6, r0
 801e6ba:	b118      	cbz	r0, 801e6c4 <_vfiprintf_r+0x18>
 801e6bc:	6983      	ldr	r3, [r0, #24]
 801e6be:	b90b      	cbnz	r3, 801e6c4 <_vfiprintf_r+0x18>
 801e6c0:	f000 fcfa 	bl	801f0b8 <__sinit>
 801e6c4:	4b7c      	ldr	r3, [pc, #496]	; (801e8b8 <_vfiprintf_r+0x20c>)
 801e6c6:	429c      	cmp	r4, r3
 801e6c8:	d158      	bne.n	801e77c <_vfiprintf_r+0xd0>
 801e6ca:	6874      	ldr	r4, [r6, #4]
 801e6cc:	89a3      	ldrh	r3, [r4, #12]
 801e6ce:	0718      	lsls	r0, r3, #28
 801e6d0:	d55e      	bpl.n	801e790 <_vfiprintf_r+0xe4>
 801e6d2:	6923      	ldr	r3, [r4, #16]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d05b      	beq.n	801e790 <_vfiprintf_r+0xe4>
 801e6d8:	2300      	movs	r3, #0
 801e6da:	9309      	str	r3, [sp, #36]	; 0x24
 801e6dc:	2320      	movs	r3, #32
 801e6de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e6e2:	2330      	movs	r3, #48	; 0x30
 801e6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6e8:	9503      	str	r5, [sp, #12]
 801e6ea:	f04f 0b01 	mov.w	fp, #1
 801e6ee:	46b8      	mov	r8, r7
 801e6f0:	4645      	mov	r5, r8
 801e6f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e6f6:	b10b      	cbz	r3, 801e6fc <_vfiprintf_r+0x50>
 801e6f8:	2b25      	cmp	r3, #37	; 0x25
 801e6fa:	d154      	bne.n	801e7a6 <_vfiprintf_r+0xfa>
 801e6fc:	ebb8 0a07 	subs.w	sl, r8, r7
 801e700:	d00b      	beq.n	801e71a <_vfiprintf_r+0x6e>
 801e702:	4653      	mov	r3, sl
 801e704:	463a      	mov	r2, r7
 801e706:	4621      	mov	r1, r4
 801e708:	4630      	mov	r0, r6
 801e70a:	f7ff ffbc 	bl	801e686 <__sfputs_r>
 801e70e:	3001      	adds	r0, #1
 801e710:	f000 80c2 	beq.w	801e898 <_vfiprintf_r+0x1ec>
 801e714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e716:	4453      	add	r3, sl
 801e718:	9309      	str	r3, [sp, #36]	; 0x24
 801e71a:	f898 3000 	ldrb.w	r3, [r8]
 801e71e:	2b00      	cmp	r3, #0
 801e720:	f000 80ba 	beq.w	801e898 <_vfiprintf_r+0x1ec>
 801e724:	2300      	movs	r3, #0
 801e726:	f04f 32ff 	mov.w	r2, #4294967295
 801e72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e72e:	9304      	str	r3, [sp, #16]
 801e730:	9307      	str	r3, [sp, #28]
 801e732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e736:	931a      	str	r3, [sp, #104]	; 0x68
 801e738:	46a8      	mov	r8, r5
 801e73a:	2205      	movs	r2, #5
 801e73c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801e740:	485e      	ldr	r0, [pc, #376]	; (801e8bc <_vfiprintf_r+0x210>)
 801e742:	f7e1 fd55 	bl	80001f0 <memchr>
 801e746:	9b04      	ldr	r3, [sp, #16]
 801e748:	bb78      	cbnz	r0, 801e7aa <_vfiprintf_r+0xfe>
 801e74a:	06d9      	lsls	r1, r3, #27
 801e74c:	bf44      	itt	mi
 801e74e:	2220      	movmi	r2, #32
 801e750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e754:	071a      	lsls	r2, r3, #28
 801e756:	bf44      	itt	mi
 801e758:	222b      	movmi	r2, #43	; 0x2b
 801e75a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e75e:	782a      	ldrb	r2, [r5, #0]
 801e760:	2a2a      	cmp	r2, #42	; 0x2a
 801e762:	d02a      	beq.n	801e7ba <_vfiprintf_r+0x10e>
 801e764:	9a07      	ldr	r2, [sp, #28]
 801e766:	46a8      	mov	r8, r5
 801e768:	2000      	movs	r0, #0
 801e76a:	250a      	movs	r5, #10
 801e76c:	4641      	mov	r1, r8
 801e76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e772:	3b30      	subs	r3, #48	; 0x30
 801e774:	2b09      	cmp	r3, #9
 801e776:	d969      	bls.n	801e84c <_vfiprintf_r+0x1a0>
 801e778:	b360      	cbz	r0, 801e7d4 <_vfiprintf_r+0x128>
 801e77a:	e024      	b.n	801e7c6 <_vfiprintf_r+0x11a>
 801e77c:	4b50      	ldr	r3, [pc, #320]	; (801e8c0 <_vfiprintf_r+0x214>)
 801e77e:	429c      	cmp	r4, r3
 801e780:	d101      	bne.n	801e786 <_vfiprintf_r+0xda>
 801e782:	68b4      	ldr	r4, [r6, #8]
 801e784:	e7a2      	b.n	801e6cc <_vfiprintf_r+0x20>
 801e786:	4b4f      	ldr	r3, [pc, #316]	; (801e8c4 <_vfiprintf_r+0x218>)
 801e788:	429c      	cmp	r4, r3
 801e78a:	bf08      	it	eq
 801e78c:	68f4      	ldreq	r4, [r6, #12]
 801e78e:	e79d      	b.n	801e6cc <_vfiprintf_r+0x20>
 801e790:	4621      	mov	r1, r4
 801e792:	4630      	mov	r0, r6
 801e794:	f000 face 	bl	801ed34 <__swsetup_r>
 801e798:	2800      	cmp	r0, #0
 801e79a:	d09d      	beq.n	801e6d8 <_vfiprintf_r+0x2c>
 801e79c:	f04f 30ff 	mov.w	r0, #4294967295
 801e7a0:	b01d      	add	sp, #116	; 0x74
 801e7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7a6:	46a8      	mov	r8, r5
 801e7a8:	e7a2      	b.n	801e6f0 <_vfiprintf_r+0x44>
 801e7aa:	4a44      	ldr	r2, [pc, #272]	; (801e8bc <_vfiprintf_r+0x210>)
 801e7ac:	1a80      	subs	r0, r0, r2
 801e7ae:	fa0b f000 	lsl.w	r0, fp, r0
 801e7b2:	4318      	orrs	r0, r3
 801e7b4:	9004      	str	r0, [sp, #16]
 801e7b6:	4645      	mov	r5, r8
 801e7b8:	e7be      	b.n	801e738 <_vfiprintf_r+0x8c>
 801e7ba:	9a03      	ldr	r2, [sp, #12]
 801e7bc:	1d11      	adds	r1, r2, #4
 801e7be:	6812      	ldr	r2, [r2, #0]
 801e7c0:	9103      	str	r1, [sp, #12]
 801e7c2:	2a00      	cmp	r2, #0
 801e7c4:	db01      	blt.n	801e7ca <_vfiprintf_r+0x11e>
 801e7c6:	9207      	str	r2, [sp, #28]
 801e7c8:	e004      	b.n	801e7d4 <_vfiprintf_r+0x128>
 801e7ca:	4252      	negs	r2, r2
 801e7cc:	f043 0302 	orr.w	r3, r3, #2
 801e7d0:	9207      	str	r2, [sp, #28]
 801e7d2:	9304      	str	r3, [sp, #16]
 801e7d4:	f898 3000 	ldrb.w	r3, [r8]
 801e7d8:	2b2e      	cmp	r3, #46	; 0x2e
 801e7da:	d10e      	bne.n	801e7fa <_vfiprintf_r+0x14e>
 801e7dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e7e0:	2b2a      	cmp	r3, #42	; 0x2a
 801e7e2:	d138      	bne.n	801e856 <_vfiprintf_r+0x1aa>
 801e7e4:	9b03      	ldr	r3, [sp, #12]
 801e7e6:	1d1a      	adds	r2, r3, #4
 801e7e8:	681b      	ldr	r3, [r3, #0]
 801e7ea:	9203      	str	r2, [sp, #12]
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	bfb8      	it	lt
 801e7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e7f4:	f108 0802 	add.w	r8, r8, #2
 801e7f8:	9305      	str	r3, [sp, #20]
 801e7fa:	4d33      	ldr	r5, [pc, #204]	; (801e8c8 <_vfiprintf_r+0x21c>)
 801e7fc:	f898 1000 	ldrb.w	r1, [r8]
 801e800:	2203      	movs	r2, #3
 801e802:	4628      	mov	r0, r5
 801e804:	f7e1 fcf4 	bl	80001f0 <memchr>
 801e808:	b140      	cbz	r0, 801e81c <_vfiprintf_r+0x170>
 801e80a:	2340      	movs	r3, #64	; 0x40
 801e80c:	1b40      	subs	r0, r0, r5
 801e80e:	fa03 f000 	lsl.w	r0, r3, r0
 801e812:	9b04      	ldr	r3, [sp, #16]
 801e814:	4303      	orrs	r3, r0
 801e816:	f108 0801 	add.w	r8, r8, #1
 801e81a:	9304      	str	r3, [sp, #16]
 801e81c:	f898 1000 	ldrb.w	r1, [r8]
 801e820:	482a      	ldr	r0, [pc, #168]	; (801e8cc <_vfiprintf_r+0x220>)
 801e822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e826:	2206      	movs	r2, #6
 801e828:	f108 0701 	add.w	r7, r8, #1
 801e82c:	f7e1 fce0 	bl	80001f0 <memchr>
 801e830:	2800      	cmp	r0, #0
 801e832:	d037      	beq.n	801e8a4 <_vfiprintf_r+0x1f8>
 801e834:	4b26      	ldr	r3, [pc, #152]	; (801e8d0 <_vfiprintf_r+0x224>)
 801e836:	bb1b      	cbnz	r3, 801e880 <_vfiprintf_r+0x1d4>
 801e838:	9b03      	ldr	r3, [sp, #12]
 801e83a:	3307      	adds	r3, #7
 801e83c:	f023 0307 	bic.w	r3, r3, #7
 801e840:	3308      	adds	r3, #8
 801e842:	9303      	str	r3, [sp, #12]
 801e844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e846:	444b      	add	r3, r9
 801e848:	9309      	str	r3, [sp, #36]	; 0x24
 801e84a:	e750      	b.n	801e6ee <_vfiprintf_r+0x42>
 801e84c:	fb05 3202 	mla	r2, r5, r2, r3
 801e850:	2001      	movs	r0, #1
 801e852:	4688      	mov	r8, r1
 801e854:	e78a      	b.n	801e76c <_vfiprintf_r+0xc0>
 801e856:	2300      	movs	r3, #0
 801e858:	f108 0801 	add.w	r8, r8, #1
 801e85c:	9305      	str	r3, [sp, #20]
 801e85e:	4619      	mov	r1, r3
 801e860:	250a      	movs	r5, #10
 801e862:	4640      	mov	r0, r8
 801e864:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e868:	3a30      	subs	r2, #48	; 0x30
 801e86a:	2a09      	cmp	r2, #9
 801e86c:	d903      	bls.n	801e876 <_vfiprintf_r+0x1ca>
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d0c3      	beq.n	801e7fa <_vfiprintf_r+0x14e>
 801e872:	9105      	str	r1, [sp, #20]
 801e874:	e7c1      	b.n	801e7fa <_vfiprintf_r+0x14e>
 801e876:	fb05 2101 	mla	r1, r5, r1, r2
 801e87a:	2301      	movs	r3, #1
 801e87c:	4680      	mov	r8, r0
 801e87e:	e7f0      	b.n	801e862 <_vfiprintf_r+0x1b6>
 801e880:	ab03      	add	r3, sp, #12
 801e882:	9300      	str	r3, [sp, #0]
 801e884:	4622      	mov	r2, r4
 801e886:	4b13      	ldr	r3, [pc, #76]	; (801e8d4 <_vfiprintf_r+0x228>)
 801e888:	a904      	add	r1, sp, #16
 801e88a:	4630      	mov	r0, r6
 801e88c:	f3af 8000 	nop.w
 801e890:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e894:	4681      	mov	r9, r0
 801e896:	d1d5      	bne.n	801e844 <_vfiprintf_r+0x198>
 801e898:	89a3      	ldrh	r3, [r4, #12]
 801e89a:	065b      	lsls	r3, r3, #25
 801e89c:	f53f af7e 	bmi.w	801e79c <_vfiprintf_r+0xf0>
 801e8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8a2:	e77d      	b.n	801e7a0 <_vfiprintf_r+0xf4>
 801e8a4:	ab03      	add	r3, sp, #12
 801e8a6:	9300      	str	r3, [sp, #0]
 801e8a8:	4622      	mov	r2, r4
 801e8aa:	4b0a      	ldr	r3, [pc, #40]	; (801e8d4 <_vfiprintf_r+0x228>)
 801e8ac:	a904      	add	r1, sp, #16
 801e8ae:	4630      	mov	r0, r6
 801e8b0:	f000 f888 	bl	801e9c4 <_printf_i>
 801e8b4:	e7ec      	b.n	801e890 <_vfiprintf_r+0x1e4>
 801e8b6:	bf00      	nop
 801e8b8:	08022a48 	.word	0x08022a48
 801e8bc:	080229f0 	.word	0x080229f0
 801e8c0:	08022a68 	.word	0x08022a68
 801e8c4:	08022a28 	.word	0x08022a28
 801e8c8:	080229f6 	.word	0x080229f6
 801e8cc:	080229fa 	.word	0x080229fa
 801e8d0:	00000000 	.word	0x00000000
 801e8d4:	0801e687 	.word	0x0801e687

0801e8d8 <_printf_common>:
 801e8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8dc:	4691      	mov	r9, r2
 801e8de:	461f      	mov	r7, r3
 801e8e0:	688a      	ldr	r2, [r1, #8]
 801e8e2:	690b      	ldr	r3, [r1, #16]
 801e8e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e8e8:	4293      	cmp	r3, r2
 801e8ea:	bfb8      	it	lt
 801e8ec:	4613      	movlt	r3, r2
 801e8ee:	f8c9 3000 	str.w	r3, [r9]
 801e8f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e8f6:	4606      	mov	r6, r0
 801e8f8:	460c      	mov	r4, r1
 801e8fa:	b112      	cbz	r2, 801e902 <_printf_common+0x2a>
 801e8fc:	3301      	adds	r3, #1
 801e8fe:	f8c9 3000 	str.w	r3, [r9]
 801e902:	6823      	ldr	r3, [r4, #0]
 801e904:	0699      	lsls	r1, r3, #26
 801e906:	bf42      	ittt	mi
 801e908:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e90c:	3302      	addmi	r3, #2
 801e90e:	f8c9 3000 	strmi.w	r3, [r9]
 801e912:	6825      	ldr	r5, [r4, #0]
 801e914:	f015 0506 	ands.w	r5, r5, #6
 801e918:	d107      	bne.n	801e92a <_printf_common+0x52>
 801e91a:	f104 0a19 	add.w	sl, r4, #25
 801e91e:	68e3      	ldr	r3, [r4, #12]
 801e920:	f8d9 2000 	ldr.w	r2, [r9]
 801e924:	1a9b      	subs	r3, r3, r2
 801e926:	42ab      	cmp	r3, r5
 801e928:	dc28      	bgt.n	801e97c <_printf_common+0xa4>
 801e92a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e92e:	6822      	ldr	r2, [r4, #0]
 801e930:	3300      	adds	r3, #0
 801e932:	bf18      	it	ne
 801e934:	2301      	movne	r3, #1
 801e936:	0692      	lsls	r2, r2, #26
 801e938:	d42d      	bmi.n	801e996 <_printf_common+0xbe>
 801e93a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e93e:	4639      	mov	r1, r7
 801e940:	4630      	mov	r0, r6
 801e942:	47c0      	blx	r8
 801e944:	3001      	adds	r0, #1
 801e946:	d020      	beq.n	801e98a <_printf_common+0xb2>
 801e948:	6823      	ldr	r3, [r4, #0]
 801e94a:	68e5      	ldr	r5, [r4, #12]
 801e94c:	f8d9 2000 	ldr.w	r2, [r9]
 801e950:	f003 0306 	and.w	r3, r3, #6
 801e954:	2b04      	cmp	r3, #4
 801e956:	bf08      	it	eq
 801e958:	1aad      	subeq	r5, r5, r2
 801e95a:	68a3      	ldr	r3, [r4, #8]
 801e95c:	6922      	ldr	r2, [r4, #16]
 801e95e:	bf0c      	ite	eq
 801e960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e964:	2500      	movne	r5, #0
 801e966:	4293      	cmp	r3, r2
 801e968:	bfc4      	itt	gt
 801e96a:	1a9b      	subgt	r3, r3, r2
 801e96c:	18ed      	addgt	r5, r5, r3
 801e96e:	f04f 0900 	mov.w	r9, #0
 801e972:	341a      	adds	r4, #26
 801e974:	454d      	cmp	r5, r9
 801e976:	d11a      	bne.n	801e9ae <_printf_common+0xd6>
 801e978:	2000      	movs	r0, #0
 801e97a:	e008      	b.n	801e98e <_printf_common+0xb6>
 801e97c:	2301      	movs	r3, #1
 801e97e:	4652      	mov	r2, sl
 801e980:	4639      	mov	r1, r7
 801e982:	4630      	mov	r0, r6
 801e984:	47c0      	blx	r8
 801e986:	3001      	adds	r0, #1
 801e988:	d103      	bne.n	801e992 <_printf_common+0xba>
 801e98a:	f04f 30ff 	mov.w	r0, #4294967295
 801e98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e992:	3501      	adds	r5, #1
 801e994:	e7c3      	b.n	801e91e <_printf_common+0x46>
 801e996:	18e1      	adds	r1, r4, r3
 801e998:	1c5a      	adds	r2, r3, #1
 801e99a:	2030      	movs	r0, #48	; 0x30
 801e99c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e9a0:	4422      	add	r2, r4
 801e9a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e9a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e9aa:	3302      	adds	r3, #2
 801e9ac:	e7c5      	b.n	801e93a <_printf_common+0x62>
 801e9ae:	2301      	movs	r3, #1
 801e9b0:	4622      	mov	r2, r4
 801e9b2:	4639      	mov	r1, r7
 801e9b4:	4630      	mov	r0, r6
 801e9b6:	47c0      	blx	r8
 801e9b8:	3001      	adds	r0, #1
 801e9ba:	d0e6      	beq.n	801e98a <_printf_common+0xb2>
 801e9bc:	f109 0901 	add.w	r9, r9, #1
 801e9c0:	e7d8      	b.n	801e974 <_printf_common+0x9c>
	...

0801e9c4 <_printf_i>:
 801e9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e9cc:	460c      	mov	r4, r1
 801e9ce:	7e09      	ldrb	r1, [r1, #24]
 801e9d0:	b085      	sub	sp, #20
 801e9d2:	296e      	cmp	r1, #110	; 0x6e
 801e9d4:	4617      	mov	r7, r2
 801e9d6:	4606      	mov	r6, r0
 801e9d8:	4698      	mov	r8, r3
 801e9da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e9dc:	f000 80b3 	beq.w	801eb46 <_printf_i+0x182>
 801e9e0:	d822      	bhi.n	801ea28 <_printf_i+0x64>
 801e9e2:	2963      	cmp	r1, #99	; 0x63
 801e9e4:	d036      	beq.n	801ea54 <_printf_i+0x90>
 801e9e6:	d80a      	bhi.n	801e9fe <_printf_i+0x3a>
 801e9e8:	2900      	cmp	r1, #0
 801e9ea:	f000 80b9 	beq.w	801eb60 <_printf_i+0x19c>
 801e9ee:	2958      	cmp	r1, #88	; 0x58
 801e9f0:	f000 8083 	beq.w	801eafa <_printf_i+0x136>
 801e9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e9f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e9fc:	e032      	b.n	801ea64 <_printf_i+0xa0>
 801e9fe:	2964      	cmp	r1, #100	; 0x64
 801ea00:	d001      	beq.n	801ea06 <_printf_i+0x42>
 801ea02:	2969      	cmp	r1, #105	; 0x69
 801ea04:	d1f6      	bne.n	801e9f4 <_printf_i+0x30>
 801ea06:	6820      	ldr	r0, [r4, #0]
 801ea08:	6813      	ldr	r3, [r2, #0]
 801ea0a:	0605      	lsls	r5, r0, #24
 801ea0c:	f103 0104 	add.w	r1, r3, #4
 801ea10:	d52a      	bpl.n	801ea68 <_printf_i+0xa4>
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	6011      	str	r1, [r2, #0]
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	da03      	bge.n	801ea22 <_printf_i+0x5e>
 801ea1a:	222d      	movs	r2, #45	; 0x2d
 801ea1c:	425b      	negs	r3, r3
 801ea1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801ea22:	486f      	ldr	r0, [pc, #444]	; (801ebe0 <_printf_i+0x21c>)
 801ea24:	220a      	movs	r2, #10
 801ea26:	e039      	b.n	801ea9c <_printf_i+0xd8>
 801ea28:	2973      	cmp	r1, #115	; 0x73
 801ea2a:	f000 809d 	beq.w	801eb68 <_printf_i+0x1a4>
 801ea2e:	d808      	bhi.n	801ea42 <_printf_i+0x7e>
 801ea30:	296f      	cmp	r1, #111	; 0x6f
 801ea32:	d020      	beq.n	801ea76 <_printf_i+0xb2>
 801ea34:	2970      	cmp	r1, #112	; 0x70
 801ea36:	d1dd      	bne.n	801e9f4 <_printf_i+0x30>
 801ea38:	6823      	ldr	r3, [r4, #0]
 801ea3a:	f043 0320 	orr.w	r3, r3, #32
 801ea3e:	6023      	str	r3, [r4, #0]
 801ea40:	e003      	b.n	801ea4a <_printf_i+0x86>
 801ea42:	2975      	cmp	r1, #117	; 0x75
 801ea44:	d017      	beq.n	801ea76 <_printf_i+0xb2>
 801ea46:	2978      	cmp	r1, #120	; 0x78
 801ea48:	d1d4      	bne.n	801e9f4 <_printf_i+0x30>
 801ea4a:	2378      	movs	r3, #120	; 0x78
 801ea4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ea50:	4864      	ldr	r0, [pc, #400]	; (801ebe4 <_printf_i+0x220>)
 801ea52:	e055      	b.n	801eb00 <_printf_i+0x13c>
 801ea54:	6813      	ldr	r3, [r2, #0]
 801ea56:	1d19      	adds	r1, r3, #4
 801ea58:	681b      	ldr	r3, [r3, #0]
 801ea5a:	6011      	str	r1, [r2, #0]
 801ea5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ea60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea64:	2301      	movs	r3, #1
 801ea66:	e08c      	b.n	801eb82 <_printf_i+0x1be>
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	6011      	str	r1, [r2, #0]
 801ea6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ea70:	bf18      	it	ne
 801ea72:	b21b      	sxthne	r3, r3
 801ea74:	e7cf      	b.n	801ea16 <_printf_i+0x52>
 801ea76:	6813      	ldr	r3, [r2, #0]
 801ea78:	6825      	ldr	r5, [r4, #0]
 801ea7a:	1d18      	adds	r0, r3, #4
 801ea7c:	6010      	str	r0, [r2, #0]
 801ea7e:	0628      	lsls	r0, r5, #24
 801ea80:	d501      	bpl.n	801ea86 <_printf_i+0xc2>
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	e002      	b.n	801ea8c <_printf_i+0xc8>
 801ea86:	0668      	lsls	r0, r5, #25
 801ea88:	d5fb      	bpl.n	801ea82 <_printf_i+0xbe>
 801ea8a:	881b      	ldrh	r3, [r3, #0]
 801ea8c:	4854      	ldr	r0, [pc, #336]	; (801ebe0 <_printf_i+0x21c>)
 801ea8e:	296f      	cmp	r1, #111	; 0x6f
 801ea90:	bf14      	ite	ne
 801ea92:	220a      	movne	r2, #10
 801ea94:	2208      	moveq	r2, #8
 801ea96:	2100      	movs	r1, #0
 801ea98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ea9c:	6865      	ldr	r5, [r4, #4]
 801ea9e:	60a5      	str	r5, [r4, #8]
 801eaa0:	2d00      	cmp	r5, #0
 801eaa2:	f2c0 8095 	blt.w	801ebd0 <_printf_i+0x20c>
 801eaa6:	6821      	ldr	r1, [r4, #0]
 801eaa8:	f021 0104 	bic.w	r1, r1, #4
 801eaac:	6021      	str	r1, [r4, #0]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d13d      	bne.n	801eb2e <_printf_i+0x16a>
 801eab2:	2d00      	cmp	r5, #0
 801eab4:	f040 808e 	bne.w	801ebd4 <_printf_i+0x210>
 801eab8:	4665      	mov	r5, ip
 801eaba:	2a08      	cmp	r2, #8
 801eabc:	d10b      	bne.n	801ead6 <_printf_i+0x112>
 801eabe:	6823      	ldr	r3, [r4, #0]
 801eac0:	07db      	lsls	r3, r3, #31
 801eac2:	d508      	bpl.n	801ead6 <_printf_i+0x112>
 801eac4:	6923      	ldr	r3, [r4, #16]
 801eac6:	6862      	ldr	r2, [r4, #4]
 801eac8:	429a      	cmp	r2, r3
 801eaca:	bfde      	ittt	le
 801eacc:	2330      	movle	r3, #48	; 0x30
 801eace:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ead2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ead6:	ebac 0305 	sub.w	r3, ip, r5
 801eada:	6123      	str	r3, [r4, #16]
 801eadc:	f8cd 8000 	str.w	r8, [sp]
 801eae0:	463b      	mov	r3, r7
 801eae2:	aa03      	add	r2, sp, #12
 801eae4:	4621      	mov	r1, r4
 801eae6:	4630      	mov	r0, r6
 801eae8:	f7ff fef6 	bl	801e8d8 <_printf_common>
 801eaec:	3001      	adds	r0, #1
 801eaee:	d14d      	bne.n	801eb8c <_printf_i+0x1c8>
 801eaf0:	f04f 30ff 	mov.w	r0, #4294967295
 801eaf4:	b005      	add	sp, #20
 801eaf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eafa:	4839      	ldr	r0, [pc, #228]	; (801ebe0 <_printf_i+0x21c>)
 801eafc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801eb00:	6813      	ldr	r3, [r2, #0]
 801eb02:	6821      	ldr	r1, [r4, #0]
 801eb04:	1d1d      	adds	r5, r3, #4
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	6015      	str	r5, [r2, #0]
 801eb0a:	060a      	lsls	r2, r1, #24
 801eb0c:	d50b      	bpl.n	801eb26 <_printf_i+0x162>
 801eb0e:	07ca      	lsls	r2, r1, #31
 801eb10:	bf44      	itt	mi
 801eb12:	f041 0120 	orrmi.w	r1, r1, #32
 801eb16:	6021      	strmi	r1, [r4, #0]
 801eb18:	b91b      	cbnz	r3, 801eb22 <_printf_i+0x15e>
 801eb1a:	6822      	ldr	r2, [r4, #0]
 801eb1c:	f022 0220 	bic.w	r2, r2, #32
 801eb20:	6022      	str	r2, [r4, #0]
 801eb22:	2210      	movs	r2, #16
 801eb24:	e7b7      	b.n	801ea96 <_printf_i+0xd2>
 801eb26:	064d      	lsls	r5, r1, #25
 801eb28:	bf48      	it	mi
 801eb2a:	b29b      	uxthmi	r3, r3
 801eb2c:	e7ef      	b.n	801eb0e <_printf_i+0x14a>
 801eb2e:	4665      	mov	r5, ip
 801eb30:	fbb3 f1f2 	udiv	r1, r3, r2
 801eb34:	fb02 3311 	mls	r3, r2, r1, r3
 801eb38:	5cc3      	ldrb	r3, [r0, r3]
 801eb3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801eb3e:	460b      	mov	r3, r1
 801eb40:	2900      	cmp	r1, #0
 801eb42:	d1f5      	bne.n	801eb30 <_printf_i+0x16c>
 801eb44:	e7b9      	b.n	801eaba <_printf_i+0xf6>
 801eb46:	6813      	ldr	r3, [r2, #0]
 801eb48:	6825      	ldr	r5, [r4, #0]
 801eb4a:	6961      	ldr	r1, [r4, #20]
 801eb4c:	1d18      	adds	r0, r3, #4
 801eb4e:	6010      	str	r0, [r2, #0]
 801eb50:	0628      	lsls	r0, r5, #24
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	d501      	bpl.n	801eb5a <_printf_i+0x196>
 801eb56:	6019      	str	r1, [r3, #0]
 801eb58:	e002      	b.n	801eb60 <_printf_i+0x19c>
 801eb5a:	066a      	lsls	r2, r5, #25
 801eb5c:	d5fb      	bpl.n	801eb56 <_printf_i+0x192>
 801eb5e:	8019      	strh	r1, [r3, #0]
 801eb60:	2300      	movs	r3, #0
 801eb62:	6123      	str	r3, [r4, #16]
 801eb64:	4665      	mov	r5, ip
 801eb66:	e7b9      	b.n	801eadc <_printf_i+0x118>
 801eb68:	6813      	ldr	r3, [r2, #0]
 801eb6a:	1d19      	adds	r1, r3, #4
 801eb6c:	6011      	str	r1, [r2, #0]
 801eb6e:	681d      	ldr	r5, [r3, #0]
 801eb70:	6862      	ldr	r2, [r4, #4]
 801eb72:	2100      	movs	r1, #0
 801eb74:	4628      	mov	r0, r5
 801eb76:	f7e1 fb3b 	bl	80001f0 <memchr>
 801eb7a:	b108      	cbz	r0, 801eb80 <_printf_i+0x1bc>
 801eb7c:	1b40      	subs	r0, r0, r5
 801eb7e:	6060      	str	r0, [r4, #4]
 801eb80:	6863      	ldr	r3, [r4, #4]
 801eb82:	6123      	str	r3, [r4, #16]
 801eb84:	2300      	movs	r3, #0
 801eb86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb8a:	e7a7      	b.n	801eadc <_printf_i+0x118>
 801eb8c:	6923      	ldr	r3, [r4, #16]
 801eb8e:	462a      	mov	r2, r5
 801eb90:	4639      	mov	r1, r7
 801eb92:	4630      	mov	r0, r6
 801eb94:	47c0      	blx	r8
 801eb96:	3001      	adds	r0, #1
 801eb98:	d0aa      	beq.n	801eaf0 <_printf_i+0x12c>
 801eb9a:	6823      	ldr	r3, [r4, #0]
 801eb9c:	079b      	lsls	r3, r3, #30
 801eb9e:	d413      	bmi.n	801ebc8 <_printf_i+0x204>
 801eba0:	68e0      	ldr	r0, [r4, #12]
 801eba2:	9b03      	ldr	r3, [sp, #12]
 801eba4:	4298      	cmp	r0, r3
 801eba6:	bfb8      	it	lt
 801eba8:	4618      	movlt	r0, r3
 801ebaa:	e7a3      	b.n	801eaf4 <_printf_i+0x130>
 801ebac:	2301      	movs	r3, #1
 801ebae:	464a      	mov	r2, r9
 801ebb0:	4639      	mov	r1, r7
 801ebb2:	4630      	mov	r0, r6
 801ebb4:	47c0      	blx	r8
 801ebb6:	3001      	adds	r0, #1
 801ebb8:	d09a      	beq.n	801eaf0 <_printf_i+0x12c>
 801ebba:	3501      	adds	r5, #1
 801ebbc:	68e3      	ldr	r3, [r4, #12]
 801ebbe:	9a03      	ldr	r2, [sp, #12]
 801ebc0:	1a9b      	subs	r3, r3, r2
 801ebc2:	42ab      	cmp	r3, r5
 801ebc4:	dcf2      	bgt.n	801ebac <_printf_i+0x1e8>
 801ebc6:	e7eb      	b.n	801eba0 <_printf_i+0x1dc>
 801ebc8:	2500      	movs	r5, #0
 801ebca:	f104 0919 	add.w	r9, r4, #25
 801ebce:	e7f5      	b.n	801ebbc <_printf_i+0x1f8>
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d1ac      	bne.n	801eb2e <_printf_i+0x16a>
 801ebd4:	7803      	ldrb	r3, [r0, #0]
 801ebd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ebda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ebde:	e76c      	b.n	801eaba <_printf_i+0xf6>
 801ebe0:	08022a01 	.word	0x08022a01
 801ebe4:	08022a12 	.word	0x08022a12

0801ebe8 <_sbrk_r>:
 801ebe8:	b538      	push	{r3, r4, r5, lr}
 801ebea:	4c06      	ldr	r4, [pc, #24]	; (801ec04 <_sbrk_r+0x1c>)
 801ebec:	2300      	movs	r3, #0
 801ebee:	4605      	mov	r5, r0
 801ebf0:	4608      	mov	r0, r1
 801ebf2:	6023      	str	r3, [r4, #0]
 801ebf4:	f7e2 fd1c 	bl	8001630 <_sbrk>
 801ebf8:	1c43      	adds	r3, r0, #1
 801ebfa:	d102      	bne.n	801ec02 <_sbrk_r+0x1a>
 801ebfc:	6823      	ldr	r3, [r4, #0]
 801ebfe:	b103      	cbz	r3, 801ec02 <_sbrk_r+0x1a>
 801ec00:	602b      	str	r3, [r5, #0]
 801ec02:	bd38      	pop	{r3, r4, r5, pc}
 801ec04:	2002f424 	.word	0x2002f424

0801ec08 <_raise_r>:
 801ec08:	291f      	cmp	r1, #31
 801ec0a:	b538      	push	{r3, r4, r5, lr}
 801ec0c:	4604      	mov	r4, r0
 801ec0e:	460d      	mov	r5, r1
 801ec10:	d904      	bls.n	801ec1c <_raise_r+0x14>
 801ec12:	2316      	movs	r3, #22
 801ec14:	6003      	str	r3, [r0, #0]
 801ec16:	f04f 30ff 	mov.w	r0, #4294967295
 801ec1a:	bd38      	pop	{r3, r4, r5, pc}
 801ec1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ec1e:	b112      	cbz	r2, 801ec26 <_raise_r+0x1e>
 801ec20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ec24:	b94b      	cbnz	r3, 801ec3a <_raise_r+0x32>
 801ec26:	4620      	mov	r0, r4
 801ec28:	f000 f830 	bl	801ec8c <_getpid_r>
 801ec2c:	462a      	mov	r2, r5
 801ec2e:	4601      	mov	r1, r0
 801ec30:	4620      	mov	r0, r4
 801ec32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec36:	f000 b817 	b.w	801ec68 <_kill_r>
 801ec3a:	2b01      	cmp	r3, #1
 801ec3c:	d00a      	beq.n	801ec54 <_raise_r+0x4c>
 801ec3e:	1c59      	adds	r1, r3, #1
 801ec40:	d103      	bne.n	801ec4a <_raise_r+0x42>
 801ec42:	2316      	movs	r3, #22
 801ec44:	6003      	str	r3, [r0, #0]
 801ec46:	2001      	movs	r0, #1
 801ec48:	e7e7      	b.n	801ec1a <_raise_r+0x12>
 801ec4a:	2400      	movs	r4, #0
 801ec4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ec50:	4628      	mov	r0, r5
 801ec52:	4798      	blx	r3
 801ec54:	2000      	movs	r0, #0
 801ec56:	e7e0      	b.n	801ec1a <_raise_r+0x12>

0801ec58 <raise>:
 801ec58:	4b02      	ldr	r3, [pc, #8]	; (801ec64 <raise+0xc>)
 801ec5a:	4601      	mov	r1, r0
 801ec5c:	6818      	ldr	r0, [r3, #0]
 801ec5e:	f7ff bfd3 	b.w	801ec08 <_raise_r>
 801ec62:	bf00      	nop
 801ec64:	2000010c 	.word	0x2000010c

0801ec68 <_kill_r>:
 801ec68:	b538      	push	{r3, r4, r5, lr}
 801ec6a:	4c07      	ldr	r4, [pc, #28]	; (801ec88 <_kill_r+0x20>)
 801ec6c:	2300      	movs	r3, #0
 801ec6e:	4605      	mov	r5, r0
 801ec70:	4608      	mov	r0, r1
 801ec72:	4611      	mov	r1, r2
 801ec74:	6023      	str	r3, [r4, #0]
 801ec76:	f7e2 fc53 	bl	8001520 <_kill>
 801ec7a:	1c43      	adds	r3, r0, #1
 801ec7c:	d102      	bne.n	801ec84 <_kill_r+0x1c>
 801ec7e:	6823      	ldr	r3, [r4, #0]
 801ec80:	b103      	cbz	r3, 801ec84 <_kill_r+0x1c>
 801ec82:	602b      	str	r3, [r5, #0]
 801ec84:	bd38      	pop	{r3, r4, r5, pc}
 801ec86:	bf00      	nop
 801ec88:	2002f424 	.word	0x2002f424

0801ec8c <_getpid_r>:
 801ec8c:	f7e2 bc40 	b.w	8001510 <_getpid>

0801ec90 <__swbuf_r>:
 801ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec92:	460e      	mov	r6, r1
 801ec94:	4614      	mov	r4, r2
 801ec96:	4605      	mov	r5, r0
 801ec98:	b118      	cbz	r0, 801eca2 <__swbuf_r+0x12>
 801ec9a:	6983      	ldr	r3, [r0, #24]
 801ec9c:	b90b      	cbnz	r3, 801eca2 <__swbuf_r+0x12>
 801ec9e:	f000 fa0b 	bl	801f0b8 <__sinit>
 801eca2:	4b21      	ldr	r3, [pc, #132]	; (801ed28 <__swbuf_r+0x98>)
 801eca4:	429c      	cmp	r4, r3
 801eca6:	d12a      	bne.n	801ecfe <__swbuf_r+0x6e>
 801eca8:	686c      	ldr	r4, [r5, #4]
 801ecaa:	69a3      	ldr	r3, [r4, #24]
 801ecac:	60a3      	str	r3, [r4, #8]
 801ecae:	89a3      	ldrh	r3, [r4, #12]
 801ecb0:	071a      	lsls	r2, r3, #28
 801ecb2:	d52e      	bpl.n	801ed12 <__swbuf_r+0x82>
 801ecb4:	6923      	ldr	r3, [r4, #16]
 801ecb6:	b363      	cbz	r3, 801ed12 <__swbuf_r+0x82>
 801ecb8:	6923      	ldr	r3, [r4, #16]
 801ecba:	6820      	ldr	r0, [r4, #0]
 801ecbc:	1ac0      	subs	r0, r0, r3
 801ecbe:	6963      	ldr	r3, [r4, #20]
 801ecc0:	b2f6      	uxtb	r6, r6
 801ecc2:	4283      	cmp	r3, r0
 801ecc4:	4637      	mov	r7, r6
 801ecc6:	dc04      	bgt.n	801ecd2 <__swbuf_r+0x42>
 801ecc8:	4621      	mov	r1, r4
 801ecca:	4628      	mov	r0, r5
 801eccc:	f000 f98a 	bl	801efe4 <_fflush_r>
 801ecd0:	bb28      	cbnz	r0, 801ed1e <__swbuf_r+0x8e>
 801ecd2:	68a3      	ldr	r3, [r4, #8]
 801ecd4:	3b01      	subs	r3, #1
 801ecd6:	60a3      	str	r3, [r4, #8]
 801ecd8:	6823      	ldr	r3, [r4, #0]
 801ecda:	1c5a      	adds	r2, r3, #1
 801ecdc:	6022      	str	r2, [r4, #0]
 801ecde:	701e      	strb	r6, [r3, #0]
 801ece0:	6963      	ldr	r3, [r4, #20]
 801ece2:	3001      	adds	r0, #1
 801ece4:	4283      	cmp	r3, r0
 801ece6:	d004      	beq.n	801ecf2 <__swbuf_r+0x62>
 801ece8:	89a3      	ldrh	r3, [r4, #12]
 801ecea:	07db      	lsls	r3, r3, #31
 801ecec:	d519      	bpl.n	801ed22 <__swbuf_r+0x92>
 801ecee:	2e0a      	cmp	r6, #10
 801ecf0:	d117      	bne.n	801ed22 <__swbuf_r+0x92>
 801ecf2:	4621      	mov	r1, r4
 801ecf4:	4628      	mov	r0, r5
 801ecf6:	f000 f975 	bl	801efe4 <_fflush_r>
 801ecfa:	b190      	cbz	r0, 801ed22 <__swbuf_r+0x92>
 801ecfc:	e00f      	b.n	801ed1e <__swbuf_r+0x8e>
 801ecfe:	4b0b      	ldr	r3, [pc, #44]	; (801ed2c <__swbuf_r+0x9c>)
 801ed00:	429c      	cmp	r4, r3
 801ed02:	d101      	bne.n	801ed08 <__swbuf_r+0x78>
 801ed04:	68ac      	ldr	r4, [r5, #8]
 801ed06:	e7d0      	b.n	801ecaa <__swbuf_r+0x1a>
 801ed08:	4b09      	ldr	r3, [pc, #36]	; (801ed30 <__swbuf_r+0xa0>)
 801ed0a:	429c      	cmp	r4, r3
 801ed0c:	bf08      	it	eq
 801ed0e:	68ec      	ldreq	r4, [r5, #12]
 801ed10:	e7cb      	b.n	801ecaa <__swbuf_r+0x1a>
 801ed12:	4621      	mov	r1, r4
 801ed14:	4628      	mov	r0, r5
 801ed16:	f000 f80d 	bl	801ed34 <__swsetup_r>
 801ed1a:	2800      	cmp	r0, #0
 801ed1c:	d0cc      	beq.n	801ecb8 <__swbuf_r+0x28>
 801ed1e:	f04f 37ff 	mov.w	r7, #4294967295
 801ed22:	4638      	mov	r0, r7
 801ed24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed26:	bf00      	nop
 801ed28:	08022a48 	.word	0x08022a48
 801ed2c:	08022a68 	.word	0x08022a68
 801ed30:	08022a28 	.word	0x08022a28

0801ed34 <__swsetup_r>:
 801ed34:	4b32      	ldr	r3, [pc, #200]	; (801ee00 <__swsetup_r+0xcc>)
 801ed36:	b570      	push	{r4, r5, r6, lr}
 801ed38:	681d      	ldr	r5, [r3, #0]
 801ed3a:	4606      	mov	r6, r0
 801ed3c:	460c      	mov	r4, r1
 801ed3e:	b125      	cbz	r5, 801ed4a <__swsetup_r+0x16>
 801ed40:	69ab      	ldr	r3, [r5, #24]
 801ed42:	b913      	cbnz	r3, 801ed4a <__swsetup_r+0x16>
 801ed44:	4628      	mov	r0, r5
 801ed46:	f000 f9b7 	bl	801f0b8 <__sinit>
 801ed4a:	4b2e      	ldr	r3, [pc, #184]	; (801ee04 <__swsetup_r+0xd0>)
 801ed4c:	429c      	cmp	r4, r3
 801ed4e:	d10f      	bne.n	801ed70 <__swsetup_r+0x3c>
 801ed50:	686c      	ldr	r4, [r5, #4]
 801ed52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed56:	b29a      	uxth	r2, r3
 801ed58:	0715      	lsls	r5, r2, #28
 801ed5a:	d42c      	bmi.n	801edb6 <__swsetup_r+0x82>
 801ed5c:	06d0      	lsls	r0, r2, #27
 801ed5e:	d411      	bmi.n	801ed84 <__swsetup_r+0x50>
 801ed60:	2209      	movs	r2, #9
 801ed62:	6032      	str	r2, [r6, #0]
 801ed64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed68:	81a3      	strh	r3, [r4, #12]
 801ed6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ed6e:	e03e      	b.n	801edee <__swsetup_r+0xba>
 801ed70:	4b25      	ldr	r3, [pc, #148]	; (801ee08 <__swsetup_r+0xd4>)
 801ed72:	429c      	cmp	r4, r3
 801ed74:	d101      	bne.n	801ed7a <__swsetup_r+0x46>
 801ed76:	68ac      	ldr	r4, [r5, #8]
 801ed78:	e7eb      	b.n	801ed52 <__swsetup_r+0x1e>
 801ed7a:	4b24      	ldr	r3, [pc, #144]	; (801ee0c <__swsetup_r+0xd8>)
 801ed7c:	429c      	cmp	r4, r3
 801ed7e:	bf08      	it	eq
 801ed80:	68ec      	ldreq	r4, [r5, #12]
 801ed82:	e7e6      	b.n	801ed52 <__swsetup_r+0x1e>
 801ed84:	0751      	lsls	r1, r2, #29
 801ed86:	d512      	bpl.n	801edae <__swsetup_r+0x7a>
 801ed88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed8a:	b141      	cbz	r1, 801ed9e <__swsetup_r+0x6a>
 801ed8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ed90:	4299      	cmp	r1, r3
 801ed92:	d002      	beq.n	801ed9a <__swsetup_r+0x66>
 801ed94:	4630      	mov	r0, r6
 801ed96:	f7ff fbb7 	bl	801e508 <_free_r>
 801ed9a:	2300      	movs	r3, #0
 801ed9c:	6363      	str	r3, [r4, #52]	; 0x34
 801ed9e:	89a3      	ldrh	r3, [r4, #12]
 801eda0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801eda4:	81a3      	strh	r3, [r4, #12]
 801eda6:	2300      	movs	r3, #0
 801eda8:	6063      	str	r3, [r4, #4]
 801edaa:	6923      	ldr	r3, [r4, #16]
 801edac:	6023      	str	r3, [r4, #0]
 801edae:	89a3      	ldrh	r3, [r4, #12]
 801edb0:	f043 0308 	orr.w	r3, r3, #8
 801edb4:	81a3      	strh	r3, [r4, #12]
 801edb6:	6923      	ldr	r3, [r4, #16]
 801edb8:	b94b      	cbnz	r3, 801edce <__swsetup_r+0x9a>
 801edba:	89a3      	ldrh	r3, [r4, #12]
 801edbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801edc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801edc4:	d003      	beq.n	801edce <__swsetup_r+0x9a>
 801edc6:	4621      	mov	r1, r4
 801edc8:	4630      	mov	r0, r6
 801edca:	f000 fa23 	bl	801f214 <__smakebuf_r>
 801edce:	89a2      	ldrh	r2, [r4, #12]
 801edd0:	f012 0301 	ands.w	r3, r2, #1
 801edd4:	d00c      	beq.n	801edf0 <__swsetup_r+0xbc>
 801edd6:	2300      	movs	r3, #0
 801edd8:	60a3      	str	r3, [r4, #8]
 801edda:	6963      	ldr	r3, [r4, #20]
 801eddc:	425b      	negs	r3, r3
 801edde:	61a3      	str	r3, [r4, #24]
 801ede0:	6923      	ldr	r3, [r4, #16]
 801ede2:	b953      	cbnz	r3, 801edfa <__swsetup_r+0xc6>
 801ede4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ede8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801edec:	d1ba      	bne.n	801ed64 <__swsetup_r+0x30>
 801edee:	bd70      	pop	{r4, r5, r6, pc}
 801edf0:	0792      	lsls	r2, r2, #30
 801edf2:	bf58      	it	pl
 801edf4:	6963      	ldrpl	r3, [r4, #20]
 801edf6:	60a3      	str	r3, [r4, #8]
 801edf8:	e7f2      	b.n	801ede0 <__swsetup_r+0xac>
 801edfa:	2000      	movs	r0, #0
 801edfc:	e7f7      	b.n	801edee <__swsetup_r+0xba>
 801edfe:	bf00      	nop
 801ee00:	2000010c 	.word	0x2000010c
 801ee04:	08022a48 	.word	0x08022a48
 801ee08:	08022a68 	.word	0x08022a68
 801ee0c:	08022a28 	.word	0x08022a28

0801ee10 <__register_exitproc>:
 801ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee14:	4d2c      	ldr	r5, [pc, #176]	; (801eec8 <__register_exitproc+0xb8>)
 801ee16:	682c      	ldr	r4, [r5, #0]
 801ee18:	4607      	mov	r7, r0
 801ee1a:	460e      	mov	r6, r1
 801ee1c:	4691      	mov	r9, r2
 801ee1e:	4698      	mov	r8, r3
 801ee20:	b934      	cbnz	r4, 801ee30 <__register_exitproc+0x20>
 801ee22:	4b2a      	ldr	r3, [pc, #168]	; (801eecc <__register_exitproc+0xbc>)
 801ee24:	4c2a      	ldr	r4, [pc, #168]	; (801eed0 <__register_exitproc+0xc0>)
 801ee26:	602c      	str	r4, [r5, #0]
 801ee28:	b113      	cbz	r3, 801ee30 <__register_exitproc+0x20>
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ee30:	6863      	ldr	r3, [r4, #4]
 801ee32:	2b1f      	cmp	r3, #31
 801ee34:	dd3d      	ble.n	801eeb2 <__register_exitproc+0xa2>
 801ee36:	4b27      	ldr	r3, [pc, #156]	; (801eed4 <__register_exitproc+0xc4>)
 801ee38:	b91b      	cbnz	r3, 801ee42 <__register_exitproc+0x32>
 801ee3a:	f04f 30ff 	mov.w	r0, #4294967295
 801ee3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee42:	208c      	movs	r0, #140	; 0x8c
 801ee44:	f7ff fb3c 	bl	801e4c0 <malloc>
 801ee48:	4604      	mov	r4, r0
 801ee4a:	2800      	cmp	r0, #0
 801ee4c:	d0f5      	beq.n	801ee3a <__register_exitproc+0x2a>
 801ee4e:	2300      	movs	r3, #0
 801ee50:	682a      	ldr	r2, [r5, #0]
 801ee52:	6002      	str	r2, [r0, #0]
 801ee54:	6043      	str	r3, [r0, #4]
 801ee56:	6028      	str	r0, [r5, #0]
 801ee58:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801ee5c:	b30f      	cbz	r7, 801eea2 <__register_exitproc+0x92>
 801ee5e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ee62:	f7ff fb2d 	bl	801e4c0 <malloc>
 801ee66:	2800      	cmp	r0, #0
 801ee68:	d0e7      	beq.n	801ee3a <__register_exitproc+0x2a>
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ee70:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801ee74:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ee78:	6862      	ldr	r2, [r4, #4]
 801ee7a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801ee7e:	2301      	movs	r3, #1
 801ee80:	4093      	lsls	r3, r2
 801ee82:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801ee86:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801ee8a:	431a      	orrs	r2, r3
 801ee8c:	2f02      	cmp	r7, #2
 801ee8e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801ee92:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801ee96:	bf02      	ittt	eq
 801ee98:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801ee9c:	4313      	orreq	r3, r2
 801ee9e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801eea2:	6863      	ldr	r3, [r4, #4]
 801eea4:	1c5a      	adds	r2, r3, #1
 801eea6:	3302      	adds	r3, #2
 801eea8:	6062      	str	r2, [r4, #4]
 801eeaa:	2000      	movs	r0, #0
 801eeac:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801eeb0:	e7c5      	b.n	801ee3e <__register_exitproc+0x2e>
 801eeb2:	2f00      	cmp	r7, #0
 801eeb4:	d0f5      	beq.n	801eea2 <__register_exitproc+0x92>
 801eeb6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801eeba:	2800      	cmp	r0, #0
 801eebc:	d1dc      	bne.n	801ee78 <__register_exitproc+0x68>
 801eebe:	4b05      	ldr	r3, [pc, #20]	; (801eed4 <__register_exitproc+0xc4>)
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d0ba      	beq.n	801ee3a <__register_exitproc+0x2a>
 801eec4:	e7cb      	b.n	801ee5e <__register_exitproc+0x4e>
 801eec6:	bf00      	nop
 801eec8:	2002f130 	.word	0x2002f130
 801eecc:	08022a24 	.word	0x08022a24
 801eed0:	2002f0a4 	.word	0x2002f0a4
 801eed4:	0801e4c1 	.word	0x0801e4c1

0801eed8 <__sflush_r>:
 801eed8:	898a      	ldrh	r2, [r1, #12]
 801eeda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eede:	4605      	mov	r5, r0
 801eee0:	0710      	lsls	r0, r2, #28
 801eee2:	460c      	mov	r4, r1
 801eee4:	d458      	bmi.n	801ef98 <__sflush_r+0xc0>
 801eee6:	684b      	ldr	r3, [r1, #4]
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	dc05      	bgt.n	801eef8 <__sflush_r+0x20>
 801eeec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	dc02      	bgt.n	801eef8 <__sflush_r+0x20>
 801eef2:	2000      	movs	r0, #0
 801eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eefa:	2e00      	cmp	r6, #0
 801eefc:	d0f9      	beq.n	801eef2 <__sflush_r+0x1a>
 801eefe:	2300      	movs	r3, #0
 801ef00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ef04:	682f      	ldr	r7, [r5, #0]
 801ef06:	6a21      	ldr	r1, [r4, #32]
 801ef08:	602b      	str	r3, [r5, #0]
 801ef0a:	d032      	beq.n	801ef72 <__sflush_r+0x9a>
 801ef0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ef0e:	89a3      	ldrh	r3, [r4, #12]
 801ef10:	075a      	lsls	r2, r3, #29
 801ef12:	d505      	bpl.n	801ef20 <__sflush_r+0x48>
 801ef14:	6863      	ldr	r3, [r4, #4]
 801ef16:	1ac0      	subs	r0, r0, r3
 801ef18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ef1a:	b10b      	cbz	r3, 801ef20 <__sflush_r+0x48>
 801ef1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef1e:	1ac0      	subs	r0, r0, r3
 801ef20:	2300      	movs	r3, #0
 801ef22:	4602      	mov	r2, r0
 801ef24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ef26:	6a21      	ldr	r1, [r4, #32]
 801ef28:	4628      	mov	r0, r5
 801ef2a:	47b0      	blx	r6
 801ef2c:	1c43      	adds	r3, r0, #1
 801ef2e:	89a3      	ldrh	r3, [r4, #12]
 801ef30:	d106      	bne.n	801ef40 <__sflush_r+0x68>
 801ef32:	6829      	ldr	r1, [r5, #0]
 801ef34:	291d      	cmp	r1, #29
 801ef36:	d848      	bhi.n	801efca <__sflush_r+0xf2>
 801ef38:	4a29      	ldr	r2, [pc, #164]	; (801efe0 <__sflush_r+0x108>)
 801ef3a:	40ca      	lsrs	r2, r1
 801ef3c:	07d6      	lsls	r6, r2, #31
 801ef3e:	d544      	bpl.n	801efca <__sflush_r+0xf2>
 801ef40:	2200      	movs	r2, #0
 801ef42:	6062      	str	r2, [r4, #4]
 801ef44:	04d9      	lsls	r1, r3, #19
 801ef46:	6922      	ldr	r2, [r4, #16]
 801ef48:	6022      	str	r2, [r4, #0]
 801ef4a:	d504      	bpl.n	801ef56 <__sflush_r+0x7e>
 801ef4c:	1c42      	adds	r2, r0, #1
 801ef4e:	d101      	bne.n	801ef54 <__sflush_r+0x7c>
 801ef50:	682b      	ldr	r3, [r5, #0]
 801ef52:	b903      	cbnz	r3, 801ef56 <__sflush_r+0x7e>
 801ef54:	6560      	str	r0, [r4, #84]	; 0x54
 801ef56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef58:	602f      	str	r7, [r5, #0]
 801ef5a:	2900      	cmp	r1, #0
 801ef5c:	d0c9      	beq.n	801eef2 <__sflush_r+0x1a>
 801ef5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef62:	4299      	cmp	r1, r3
 801ef64:	d002      	beq.n	801ef6c <__sflush_r+0x94>
 801ef66:	4628      	mov	r0, r5
 801ef68:	f7ff face 	bl	801e508 <_free_r>
 801ef6c:	2000      	movs	r0, #0
 801ef6e:	6360      	str	r0, [r4, #52]	; 0x34
 801ef70:	e7c0      	b.n	801eef4 <__sflush_r+0x1c>
 801ef72:	2301      	movs	r3, #1
 801ef74:	4628      	mov	r0, r5
 801ef76:	47b0      	blx	r6
 801ef78:	1c41      	adds	r1, r0, #1
 801ef7a:	d1c8      	bne.n	801ef0e <__sflush_r+0x36>
 801ef7c:	682b      	ldr	r3, [r5, #0]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d0c5      	beq.n	801ef0e <__sflush_r+0x36>
 801ef82:	2b1d      	cmp	r3, #29
 801ef84:	d001      	beq.n	801ef8a <__sflush_r+0xb2>
 801ef86:	2b16      	cmp	r3, #22
 801ef88:	d101      	bne.n	801ef8e <__sflush_r+0xb6>
 801ef8a:	602f      	str	r7, [r5, #0]
 801ef8c:	e7b1      	b.n	801eef2 <__sflush_r+0x1a>
 801ef8e:	89a3      	ldrh	r3, [r4, #12]
 801ef90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef94:	81a3      	strh	r3, [r4, #12]
 801ef96:	e7ad      	b.n	801eef4 <__sflush_r+0x1c>
 801ef98:	690f      	ldr	r7, [r1, #16]
 801ef9a:	2f00      	cmp	r7, #0
 801ef9c:	d0a9      	beq.n	801eef2 <__sflush_r+0x1a>
 801ef9e:	0793      	lsls	r3, r2, #30
 801efa0:	680e      	ldr	r6, [r1, #0]
 801efa2:	bf08      	it	eq
 801efa4:	694b      	ldreq	r3, [r1, #20]
 801efa6:	600f      	str	r7, [r1, #0]
 801efa8:	bf18      	it	ne
 801efaa:	2300      	movne	r3, #0
 801efac:	eba6 0807 	sub.w	r8, r6, r7
 801efb0:	608b      	str	r3, [r1, #8]
 801efb2:	f1b8 0f00 	cmp.w	r8, #0
 801efb6:	dd9c      	ble.n	801eef2 <__sflush_r+0x1a>
 801efb8:	4643      	mov	r3, r8
 801efba:	463a      	mov	r2, r7
 801efbc:	6a21      	ldr	r1, [r4, #32]
 801efbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801efc0:	4628      	mov	r0, r5
 801efc2:	47b0      	blx	r6
 801efc4:	2800      	cmp	r0, #0
 801efc6:	dc06      	bgt.n	801efd6 <__sflush_r+0xfe>
 801efc8:	89a3      	ldrh	r3, [r4, #12]
 801efca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efce:	81a3      	strh	r3, [r4, #12]
 801efd0:	f04f 30ff 	mov.w	r0, #4294967295
 801efd4:	e78e      	b.n	801eef4 <__sflush_r+0x1c>
 801efd6:	4407      	add	r7, r0
 801efd8:	eba8 0800 	sub.w	r8, r8, r0
 801efdc:	e7e9      	b.n	801efb2 <__sflush_r+0xda>
 801efde:	bf00      	nop
 801efe0:	20400001 	.word	0x20400001

0801efe4 <_fflush_r>:
 801efe4:	b538      	push	{r3, r4, r5, lr}
 801efe6:	690b      	ldr	r3, [r1, #16]
 801efe8:	4605      	mov	r5, r0
 801efea:	460c      	mov	r4, r1
 801efec:	b1db      	cbz	r3, 801f026 <_fflush_r+0x42>
 801efee:	b118      	cbz	r0, 801eff8 <_fflush_r+0x14>
 801eff0:	6983      	ldr	r3, [r0, #24]
 801eff2:	b90b      	cbnz	r3, 801eff8 <_fflush_r+0x14>
 801eff4:	f000 f860 	bl	801f0b8 <__sinit>
 801eff8:	4b0c      	ldr	r3, [pc, #48]	; (801f02c <_fflush_r+0x48>)
 801effa:	429c      	cmp	r4, r3
 801effc:	d109      	bne.n	801f012 <_fflush_r+0x2e>
 801effe:	686c      	ldr	r4, [r5, #4]
 801f000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f004:	b17b      	cbz	r3, 801f026 <_fflush_r+0x42>
 801f006:	4621      	mov	r1, r4
 801f008:	4628      	mov	r0, r5
 801f00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f00e:	f7ff bf63 	b.w	801eed8 <__sflush_r>
 801f012:	4b07      	ldr	r3, [pc, #28]	; (801f030 <_fflush_r+0x4c>)
 801f014:	429c      	cmp	r4, r3
 801f016:	d101      	bne.n	801f01c <_fflush_r+0x38>
 801f018:	68ac      	ldr	r4, [r5, #8]
 801f01a:	e7f1      	b.n	801f000 <_fflush_r+0x1c>
 801f01c:	4b05      	ldr	r3, [pc, #20]	; (801f034 <_fflush_r+0x50>)
 801f01e:	429c      	cmp	r4, r3
 801f020:	bf08      	it	eq
 801f022:	68ec      	ldreq	r4, [r5, #12]
 801f024:	e7ec      	b.n	801f000 <_fflush_r+0x1c>
 801f026:	2000      	movs	r0, #0
 801f028:	bd38      	pop	{r3, r4, r5, pc}
 801f02a:	bf00      	nop
 801f02c:	08022a48 	.word	0x08022a48
 801f030:	08022a68 	.word	0x08022a68
 801f034:	08022a28 	.word	0x08022a28

0801f038 <std>:
 801f038:	2300      	movs	r3, #0
 801f03a:	b510      	push	{r4, lr}
 801f03c:	4604      	mov	r4, r0
 801f03e:	e9c0 3300 	strd	r3, r3, [r0]
 801f042:	6083      	str	r3, [r0, #8]
 801f044:	8181      	strh	r1, [r0, #12]
 801f046:	6643      	str	r3, [r0, #100]	; 0x64
 801f048:	81c2      	strh	r2, [r0, #14]
 801f04a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f04e:	6183      	str	r3, [r0, #24]
 801f050:	4619      	mov	r1, r3
 801f052:	2208      	movs	r2, #8
 801f054:	305c      	adds	r0, #92	; 0x5c
 801f056:	f7ff fa4e 	bl	801e4f6 <memset>
 801f05a:	4b05      	ldr	r3, [pc, #20]	; (801f070 <std+0x38>)
 801f05c:	6263      	str	r3, [r4, #36]	; 0x24
 801f05e:	4b05      	ldr	r3, [pc, #20]	; (801f074 <std+0x3c>)
 801f060:	62a3      	str	r3, [r4, #40]	; 0x28
 801f062:	4b05      	ldr	r3, [pc, #20]	; (801f078 <std+0x40>)
 801f064:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f066:	4b05      	ldr	r3, [pc, #20]	; (801f07c <std+0x44>)
 801f068:	6224      	str	r4, [r4, #32]
 801f06a:	6323      	str	r3, [r4, #48]	; 0x30
 801f06c:	bd10      	pop	{r4, pc}
 801f06e:	bf00      	nop
 801f070:	0801f299 	.word	0x0801f299
 801f074:	0801f2bb 	.word	0x0801f2bb
 801f078:	0801f2f3 	.word	0x0801f2f3
 801f07c:	0801f317 	.word	0x0801f317

0801f080 <_cleanup_r>:
 801f080:	4901      	ldr	r1, [pc, #4]	; (801f088 <_cleanup_r+0x8>)
 801f082:	f000 b885 	b.w	801f190 <_fwalk_reent>
 801f086:	bf00      	nop
 801f088:	0801efe5 	.word	0x0801efe5

0801f08c <__sfmoreglue>:
 801f08c:	b570      	push	{r4, r5, r6, lr}
 801f08e:	1e4a      	subs	r2, r1, #1
 801f090:	2568      	movs	r5, #104	; 0x68
 801f092:	4355      	muls	r5, r2
 801f094:	460e      	mov	r6, r1
 801f096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f09a:	f7ff fa83 	bl	801e5a4 <_malloc_r>
 801f09e:	4604      	mov	r4, r0
 801f0a0:	b140      	cbz	r0, 801f0b4 <__sfmoreglue+0x28>
 801f0a2:	2100      	movs	r1, #0
 801f0a4:	e9c0 1600 	strd	r1, r6, [r0]
 801f0a8:	300c      	adds	r0, #12
 801f0aa:	60a0      	str	r0, [r4, #8]
 801f0ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f0b0:	f7ff fa21 	bl	801e4f6 <memset>
 801f0b4:	4620      	mov	r0, r4
 801f0b6:	bd70      	pop	{r4, r5, r6, pc}

0801f0b8 <__sinit>:
 801f0b8:	6983      	ldr	r3, [r0, #24]
 801f0ba:	b510      	push	{r4, lr}
 801f0bc:	4604      	mov	r4, r0
 801f0be:	bb33      	cbnz	r3, 801f10e <__sinit+0x56>
 801f0c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801f0c4:	6503      	str	r3, [r0, #80]	; 0x50
 801f0c6:	4b12      	ldr	r3, [pc, #72]	; (801f110 <__sinit+0x58>)
 801f0c8:	4a12      	ldr	r2, [pc, #72]	; (801f114 <__sinit+0x5c>)
 801f0ca:	681b      	ldr	r3, [r3, #0]
 801f0cc:	6282      	str	r2, [r0, #40]	; 0x28
 801f0ce:	4298      	cmp	r0, r3
 801f0d0:	bf04      	itt	eq
 801f0d2:	2301      	moveq	r3, #1
 801f0d4:	6183      	streq	r3, [r0, #24]
 801f0d6:	f000 f81f 	bl	801f118 <__sfp>
 801f0da:	6060      	str	r0, [r4, #4]
 801f0dc:	4620      	mov	r0, r4
 801f0de:	f000 f81b 	bl	801f118 <__sfp>
 801f0e2:	60a0      	str	r0, [r4, #8]
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	f000 f817 	bl	801f118 <__sfp>
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	60e0      	str	r0, [r4, #12]
 801f0ee:	2104      	movs	r1, #4
 801f0f0:	6860      	ldr	r0, [r4, #4]
 801f0f2:	f7ff ffa1 	bl	801f038 <std>
 801f0f6:	2201      	movs	r2, #1
 801f0f8:	2109      	movs	r1, #9
 801f0fa:	68a0      	ldr	r0, [r4, #8]
 801f0fc:	f7ff ff9c 	bl	801f038 <std>
 801f100:	2202      	movs	r2, #2
 801f102:	2112      	movs	r1, #18
 801f104:	68e0      	ldr	r0, [r4, #12]
 801f106:	f7ff ff97 	bl	801f038 <std>
 801f10a:	2301      	movs	r3, #1
 801f10c:	61a3      	str	r3, [r4, #24]
 801f10e:	bd10      	pop	{r4, pc}
 801f110:	080229ec 	.word	0x080229ec
 801f114:	0801f081 	.word	0x0801f081

0801f118 <__sfp>:
 801f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f11a:	4b1b      	ldr	r3, [pc, #108]	; (801f188 <__sfp+0x70>)
 801f11c:	681e      	ldr	r6, [r3, #0]
 801f11e:	69b3      	ldr	r3, [r6, #24]
 801f120:	4607      	mov	r7, r0
 801f122:	b913      	cbnz	r3, 801f12a <__sfp+0x12>
 801f124:	4630      	mov	r0, r6
 801f126:	f7ff ffc7 	bl	801f0b8 <__sinit>
 801f12a:	3648      	adds	r6, #72	; 0x48
 801f12c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f130:	3b01      	subs	r3, #1
 801f132:	d503      	bpl.n	801f13c <__sfp+0x24>
 801f134:	6833      	ldr	r3, [r6, #0]
 801f136:	b133      	cbz	r3, 801f146 <__sfp+0x2e>
 801f138:	6836      	ldr	r6, [r6, #0]
 801f13a:	e7f7      	b.n	801f12c <__sfp+0x14>
 801f13c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f140:	b16d      	cbz	r5, 801f15e <__sfp+0x46>
 801f142:	3468      	adds	r4, #104	; 0x68
 801f144:	e7f4      	b.n	801f130 <__sfp+0x18>
 801f146:	2104      	movs	r1, #4
 801f148:	4638      	mov	r0, r7
 801f14a:	f7ff ff9f 	bl	801f08c <__sfmoreglue>
 801f14e:	6030      	str	r0, [r6, #0]
 801f150:	2800      	cmp	r0, #0
 801f152:	d1f1      	bne.n	801f138 <__sfp+0x20>
 801f154:	230c      	movs	r3, #12
 801f156:	603b      	str	r3, [r7, #0]
 801f158:	4604      	mov	r4, r0
 801f15a:	4620      	mov	r0, r4
 801f15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f15e:	4b0b      	ldr	r3, [pc, #44]	; (801f18c <__sfp+0x74>)
 801f160:	6665      	str	r5, [r4, #100]	; 0x64
 801f162:	e9c4 5500 	strd	r5, r5, [r4]
 801f166:	60a5      	str	r5, [r4, #8]
 801f168:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801f16c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801f170:	2208      	movs	r2, #8
 801f172:	4629      	mov	r1, r5
 801f174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f178:	f7ff f9bd 	bl	801e4f6 <memset>
 801f17c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f184:	e7e9      	b.n	801f15a <__sfp+0x42>
 801f186:	bf00      	nop
 801f188:	080229ec 	.word	0x080229ec
 801f18c:	ffff0001 	.word	0xffff0001

0801f190 <_fwalk_reent>:
 801f190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f194:	4680      	mov	r8, r0
 801f196:	4689      	mov	r9, r1
 801f198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f19c:	2600      	movs	r6, #0
 801f19e:	b914      	cbnz	r4, 801f1a6 <_fwalk_reent+0x16>
 801f1a0:	4630      	mov	r0, r6
 801f1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801f1aa:	3f01      	subs	r7, #1
 801f1ac:	d501      	bpl.n	801f1b2 <_fwalk_reent+0x22>
 801f1ae:	6824      	ldr	r4, [r4, #0]
 801f1b0:	e7f5      	b.n	801f19e <_fwalk_reent+0xe>
 801f1b2:	89ab      	ldrh	r3, [r5, #12]
 801f1b4:	2b01      	cmp	r3, #1
 801f1b6:	d907      	bls.n	801f1c8 <_fwalk_reent+0x38>
 801f1b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f1bc:	3301      	adds	r3, #1
 801f1be:	d003      	beq.n	801f1c8 <_fwalk_reent+0x38>
 801f1c0:	4629      	mov	r1, r5
 801f1c2:	4640      	mov	r0, r8
 801f1c4:	47c8      	blx	r9
 801f1c6:	4306      	orrs	r6, r0
 801f1c8:	3568      	adds	r5, #104	; 0x68
 801f1ca:	e7ee      	b.n	801f1aa <_fwalk_reent+0x1a>

0801f1cc <__swhatbuf_r>:
 801f1cc:	b570      	push	{r4, r5, r6, lr}
 801f1ce:	460e      	mov	r6, r1
 801f1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f1d4:	2900      	cmp	r1, #0
 801f1d6:	b096      	sub	sp, #88	; 0x58
 801f1d8:	4614      	mov	r4, r2
 801f1da:	461d      	mov	r5, r3
 801f1dc:	da07      	bge.n	801f1ee <__swhatbuf_r+0x22>
 801f1de:	2300      	movs	r3, #0
 801f1e0:	602b      	str	r3, [r5, #0]
 801f1e2:	89b3      	ldrh	r3, [r6, #12]
 801f1e4:	061a      	lsls	r2, r3, #24
 801f1e6:	d410      	bmi.n	801f20a <__swhatbuf_r+0x3e>
 801f1e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f1ec:	e00e      	b.n	801f20c <__swhatbuf_r+0x40>
 801f1ee:	466a      	mov	r2, sp
 801f1f0:	f000 f8b8 	bl	801f364 <_fstat_r>
 801f1f4:	2800      	cmp	r0, #0
 801f1f6:	dbf2      	blt.n	801f1de <__swhatbuf_r+0x12>
 801f1f8:	9a01      	ldr	r2, [sp, #4]
 801f1fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f1fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f202:	425a      	negs	r2, r3
 801f204:	415a      	adcs	r2, r3
 801f206:	602a      	str	r2, [r5, #0]
 801f208:	e7ee      	b.n	801f1e8 <__swhatbuf_r+0x1c>
 801f20a:	2340      	movs	r3, #64	; 0x40
 801f20c:	2000      	movs	r0, #0
 801f20e:	6023      	str	r3, [r4, #0]
 801f210:	b016      	add	sp, #88	; 0x58
 801f212:	bd70      	pop	{r4, r5, r6, pc}

0801f214 <__smakebuf_r>:
 801f214:	898b      	ldrh	r3, [r1, #12]
 801f216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f218:	079d      	lsls	r5, r3, #30
 801f21a:	4606      	mov	r6, r0
 801f21c:	460c      	mov	r4, r1
 801f21e:	d507      	bpl.n	801f230 <__smakebuf_r+0x1c>
 801f220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f224:	6023      	str	r3, [r4, #0]
 801f226:	6123      	str	r3, [r4, #16]
 801f228:	2301      	movs	r3, #1
 801f22a:	6163      	str	r3, [r4, #20]
 801f22c:	b002      	add	sp, #8
 801f22e:	bd70      	pop	{r4, r5, r6, pc}
 801f230:	ab01      	add	r3, sp, #4
 801f232:	466a      	mov	r2, sp
 801f234:	f7ff ffca 	bl	801f1cc <__swhatbuf_r>
 801f238:	9900      	ldr	r1, [sp, #0]
 801f23a:	4605      	mov	r5, r0
 801f23c:	4630      	mov	r0, r6
 801f23e:	f7ff f9b1 	bl	801e5a4 <_malloc_r>
 801f242:	b948      	cbnz	r0, 801f258 <__smakebuf_r+0x44>
 801f244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f248:	059a      	lsls	r2, r3, #22
 801f24a:	d4ef      	bmi.n	801f22c <__smakebuf_r+0x18>
 801f24c:	f023 0303 	bic.w	r3, r3, #3
 801f250:	f043 0302 	orr.w	r3, r3, #2
 801f254:	81a3      	strh	r3, [r4, #12]
 801f256:	e7e3      	b.n	801f220 <__smakebuf_r+0xc>
 801f258:	4b0d      	ldr	r3, [pc, #52]	; (801f290 <__smakebuf_r+0x7c>)
 801f25a:	62b3      	str	r3, [r6, #40]	; 0x28
 801f25c:	89a3      	ldrh	r3, [r4, #12]
 801f25e:	6020      	str	r0, [r4, #0]
 801f260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f264:	81a3      	strh	r3, [r4, #12]
 801f266:	9b00      	ldr	r3, [sp, #0]
 801f268:	6163      	str	r3, [r4, #20]
 801f26a:	9b01      	ldr	r3, [sp, #4]
 801f26c:	6120      	str	r0, [r4, #16]
 801f26e:	b15b      	cbz	r3, 801f288 <__smakebuf_r+0x74>
 801f270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f274:	4630      	mov	r0, r6
 801f276:	f000 f887 	bl	801f388 <_isatty_r>
 801f27a:	b128      	cbz	r0, 801f288 <__smakebuf_r+0x74>
 801f27c:	89a3      	ldrh	r3, [r4, #12]
 801f27e:	f023 0303 	bic.w	r3, r3, #3
 801f282:	f043 0301 	orr.w	r3, r3, #1
 801f286:	81a3      	strh	r3, [r4, #12]
 801f288:	89a3      	ldrh	r3, [r4, #12]
 801f28a:	431d      	orrs	r5, r3
 801f28c:	81a5      	strh	r5, [r4, #12]
 801f28e:	e7cd      	b.n	801f22c <__smakebuf_r+0x18>
 801f290:	0801f081 	.word	0x0801f081

0801f294 <__malloc_lock>:
 801f294:	4770      	bx	lr

0801f296 <__malloc_unlock>:
 801f296:	4770      	bx	lr

0801f298 <__sread>:
 801f298:	b510      	push	{r4, lr}
 801f29a:	460c      	mov	r4, r1
 801f29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2a0:	f000 f894 	bl	801f3cc <_read_r>
 801f2a4:	2800      	cmp	r0, #0
 801f2a6:	bfab      	itete	ge
 801f2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f2aa:	89a3      	ldrhlt	r3, [r4, #12]
 801f2ac:	181b      	addge	r3, r3, r0
 801f2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f2b2:	bfac      	ite	ge
 801f2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f2b6:	81a3      	strhlt	r3, [r4, #12]
 801f2b8:	bd10      	pop	{r4, pc}

0801f2ba <__swrite>:
 801f2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2be:	461f      	mov	r7, r3
 801f2c0:	898b      	ldrh	r3, [r1, #12]
 801f2c2:	05db      	lsls	r3, r3, #23
 801f2c4:	4605      	mov	r5, r0
 801f2c6:	460c      	mov	r4, r1
 801f2c8:	4616      	mov	r6, r2
 801f2ca:	d505      	bpl.n	801f2d8 <__swrite+0x1e>
 801f2cc:	2302      	movs	r3, #2
 801f2ce:	2200      	movs	r2, #0
 801f2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2d4:	f000 f868 	bl	801f3a8 <_lseek_r>
 801f2d8:	89a3      	ldrh	r3, [r4, #12]
 801f2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f2e2:	81a3      	strh	r3, [r4, #12]
 801f2e4:	4632      	mov	r2, r6
 801f2e6:	463b      	mov	r3, r7
 801f2e8:	4628      	mov	r0, r5
 801f2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2ee:	f000 b817 	b.w	801f320 <_write_r>

0801f2f2 <__sseek>:
 801f2f2:	b510      	push	{r4, lr}
 801f2f4:	460c      	mov	r4, r1
 801f2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2fa:	f000 f855 	bl	801f3a8 <_lseek_r>
 801f2fe:	1c43      	adds	r3, r0, #1
 801f300:	89a3      	ldrh	r3, [r4, #12]
 801f302:	bf15      	itete	ne
 801f304:	6560      	strne	r0, [r4, #84]	; 0x54
 801f306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f30e:	81a3      	strheq	r3, [r4, #12]
 801f310:	bf18      	it	ne
 801f312:	81a3      	strhne	r3, [r4, #12]
 801f314:	bd10      	pop	{r4, pc}

0801f316 <__sclose>:
 801f316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f31a:	f000 b813 	b.w	801f344 <_close_r>
	...

0801f320 <_write_r>:
 801f320:	b538      	push	{r3, r4, r5, lr}
 801f322:	4c07      	ldr	r4, [pc, #28]	; (801f340 <_write_r+0x20>)
 801f324:	4605      	mov	r5, r0
 801f326:	4608      	mov	r0, r1
 801f328:	4611      	mov	r1, r2
 801f32a:	2200      	movs	r2, #0
 801f32c:	6022      	str	r2, [r4, #0]
 801f32e:	461a      	mov	r2, r3
 801f330:	f7e2 f92d 	bl	800158e <_write>
 801f334:	1c43      	adds	r3, r0, #1
 801f336:	d102      	bne.n	801f33e <_write_r+0x1e>
 801f338:	6823      	ldr	r3, [r4, #0]
 801f33a:	b103      	cbz	r3, 801f33e <_write_r+0x1e>
 801f33c:	602b      	str	r3, [r5, #0]
 801f33e:	bd38      	pop	{r3, r4, r5, pc}
 801f340:	2002f424 	.word	0x2002f424

0801f344 <_close_r>:
 801f344:	b538      	push	{r3, r4, r5, lr}
 801f346:	4c06      	ldr	r4, [pc, #24]	; (801f360 <_close_r+0x1c>)
 801f348:	2300      	movs	r3, #0
 801f34a:	4605      	mov	r5, r0
 801f34c:	4608      	mov	r0, r1
 801f34e:	6023      	str	r3, [r4, #0]
 801f350:	f7e2 f939 	bl	80015c6 <_close>
 801f354:	1c43      	adds	r3, r0, #1
 801f356:	d102      	bne.n	801f35e <_close_r+0x1a>
 801f358:	6823      	ldr	r3, [r4, #0]
 801f35a:	b103      	cbz	r3, 801f35e <_close_r+0x1a>
 801f35c:	602b      	str	r3, [r5, #0]
 801f35e:	bd38      	pop	{r3, r4, r5, pc}
 801f360:	2002f424 	.word	0x2002f424

0801f364 <_fstat_r>:
 801f364:	b538      	push	{r3, r4, r5, lr}
 801f366:	4c07      	ldr	r4, [pc, #28]	; (801f384 <_fstat_r+0x20>)
 801f368:	2300      	movs	r3, #0
 801f36a:	4605      	mov	r5, r0
 801f36c:	4608      	mov	r0, r1
 801f36e:	4611      	mov	r1, r2
 801f370:	6023      	str	r3, [r4, #0]
 801f372:	f7e2 f934 	bl	80015de <_fstat>
 801f376:	1c43      	adds	r3, r0, #1
 801f378:	d102      	bne.n	801f380 <_fstat_r+0x1c>
 801f37a:	6823      	ldr	r3, [r4, #0]
 801f37c:	b103      	cbz	r3, 801f380 <_fstat_r+0x1c>
 801f37e:	602b      	str	r3, [r5, #0]
 801f380:	bd38      	pop	{r3, r4, r5, pc}
 801f382:	bf00      	nop
 801f384:	2002f424 	.word	0x2002f424

0801f388 <_isatty_r>:
 801f388:	b538      	push	{r3, r4, r5, lr}
 801f38a:	4c06      	ldr	r4, [pc, #24]	; (801f3a4 <_isatty_r+0x1c>)
 801f38c:	2300      	movs	r3, #0
 801f38e:	4605      	mov	r5, r0
 801f390:	4608      	mov	r0, r1
 801f392:	6023      	str	r3, [r4, #0]
 801f394:	f7e2 f933 	bl	80015fe <_isatty>
 801f398:	1c43      	adds	r3, r0, #1
 801f39a:	d102      	bne.n	801f3a2 <_isatty_r+0x1a>
 801f39c:	6823      	ldr	r3, [r4, #0]
 801f39e:	b103      	cbz	r3, 801f3a2 <_isatty_r+0x1a>
 801f3a0:	602b      	str	r3, [r5, #0]
 801f3a2:	bd38      	pop	{r3, r4, r5, pc}
 801f3a4:	2002f424 	.word	0x2002f424

0801f3a8 <_lseek_r>:
 801f3a8:	b538      	push	{r3, r4, r5, lr}
 801f3aa:	4c07      	ldr	r4, [pc, #28]	; (801f3c8 <_lseek_r+0x20>)
 801f3ac:	4605      	mov	r5, r0
 801f3ae:	4608      	mov	r0, r1
 801f3b0:	4611      	mov	r1, r2
 801f3b2:	2200      	movs	r2, #0
 801f3b4:	6022      	str	r2, [r4, #0]
 801f3b6:	461a      	mov	r2, r3
 801f3b8:	f7e2 f92c 	bl	8001614 <_lseek>
 801f3bc:	1c43      	adds	r3, r0, #1
 801f3be:	d102      	bne.n	801f3c6 <_lseek_r+0x1e>
 801f3c0:	6823      	ldr	r3, [r4, #0]
 801f3c2:	b103      	cbz	r3, 801f3c6 <_lseek_r+0x1e>
 801f3c4:	602b      	str	r3, [r5, #0]
 801f3c6:	bd38      	pop	{r3, r4, r5, pc}
 801f3c8:	2002f424 	.word	0x2002f424

0801f3cc <_read_r>:
 801f3cc:	b538      	push	{r3, r4, r5, lr}
 801f3ce:	4c07      	ldr	r4, [pc, #28]	; (801f3ec <_read_r+0x20>)
 801f3d0:	4605      	mov	r5, r0
 801f3d2:	4608      	mov	r0, r1
 801f3d4:	4611      	mov	r1, r2
 801f3d6:	2200      	movs	r2, #0
 801f3d8:	6022      	str	r2, [r4, #0]
 801f3da:	461a      	mov	r2, r3
 801f3dc:	f7e2 f8ba 	bl	8001554 <_read>
 801f3e0:	1c43      	adds	r3, r0, #1
 801f3e2:	d102      	bne.n	801f3ea <_read_r+0x1e>
 801f3e4:	6823      	ldr	r3, [r4, #0]
 801f3e6:	b103      	cbz	r3, 801f3ea <_read_r+0x1e>
 801f3e8:	602b      	str	r3, [r5, #0]
 801f3ea:	bd38      	pop	{r3, r4, r5, pc}
 801f3ec:	2002f424 	.word	0x2002f424

0801f3f0 <_init>:
 801f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3f2:	bf00      	nop
 801f3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f3f6:	bc08      	pop	{r3}
 801f3f8:	469e      	mov	lr, r3
 801f3fa:	4770      	bx	lr

0801f3fc <_fini>:
 801f3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3fe:	bf00      	nop
 801f400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f402:	bc08      	pop	{r3}
 801f404:	469e      	mov	lr, r3
 801f406:	4770      	bx	lr
